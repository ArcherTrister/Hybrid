### YamlMime:ManagedReference
items:
- uid: Hybrid.Mapping.MapperExtensions
  commentId: T:Hybrid.Mapping.MapperExtensions
  id: MapperExtensions
  parent: Hybrid.Mapping
  children:
  - Hybrid.Mapping.MapperExtensions.MapTo``1(System.Object)
  - Hybrid.Mapping.MapperExtensions.MapTo``2(``0,``1)
  - Hybrid.Mapping.MapperExtensions.SetMapper(Hybrid.Mapping.IMapper)
  - Hybrid.Mapping.MapperExtensions.ToOutput``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``1,System.Object}}[])
  langs:
  - csharp
  - vb
  name: MapperExtensions
  nameWithType: MapperExtensions
  fullName: Hybrid.Mapping.MapperExtensions
  type: Class
  source:
    remote:
      path: src/Hybrid/Mapping/MapperExtensions.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: MapperExtensions
    path: ../src/Hybrid/Mapping/MapperExtensions.cs
    startLine: 21
  assemblies:
  - Hybrid
  namespace: Hybrid.Mapping
  summary: "\n对象映射扩展操作\n"
  example: []
  syntax:
    content: public static class MapperExtensions
    content.vb: Public Module MapperExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Hybrid.Mapping.MapperExtensions.SetMapper(Hybrid.Mapping.IMapper)
  commentId: M:Hybrid.Mapping.MapperExtensions.SetMapper(Hybrid.Mapping.IMapper)
  id: SetMapper(Hybrid.Mapping.IMapper)
  parent: Hybrid.Mapping.MapperExtensions
  langs:
  - csharp
  - vb
  name: SetMapper(IMapper)
  nameWithType: MapperExtensions.SetMapper(IMapper)
  fullName: Hybrid.Mapping.MapperExtensions.SetMapper(Hybrid.Mapping.IMapper)
  type: Method
  source:
    remote:
      path: src/Hybrid/Mapping/MapperExtensions.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: SetMapper
    path: ../src/Hybrid/Mapping/MapperExtensions.cs
    startLine: 29
  assemblies:
  - Hybrid
  namespace: Hybrid.Mapping
  summary: "\n设置对象映射执行者\n"
  example: []
  syntax:
    content: public static void SetMapper(IMapper mapper)
    parameters:
    - id: mapper
      type: Hybrid.Mapping.IMapper
      description: 映射执行者
    content.vb: Public Shared Sub SetMapper(mapper As IMapper)
  overload: Hybrid.Mapping.MapperExtensions.SetMapper*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Hybrid.Mapping.MapperExtensions.MapTo``1(System.Object)
  commentId: M:Hybrid.Mapping.MapperExtensions.MapTo``1(System.Object)
  id: MapTo``1(System.Object)
  isExtensionMethod: true
  parent: Hybrid.Mapping.MapperExtensions
  langs:
  - csharp
  - vb
  name: MapTo<TTarget>(Object)
  nameWithType: MapperExtensions.MapTo<TTarget>(Object)
  fullName: Hybrid.Mapping.MapperExtensions.MapTo<TTarget>(System.Object)
  type: Method
  source:
    remote:
      path: src/Hybrid/Mapping/MapperExtensions.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: MapTo
    path: ../src/Hybrid/Mapping/MapperExtensions.cs
    startLine: 41
  assemblies:
  - Hybrid
  namespace: Hybrid.Mapping
  summary: "\n将对象映射为指定类型\n"
  example: []
  syntax:
    content: public static TTarget MapTo<TTarget>(this object source)
    parameters:
    - id: source
      type: System.Object
      description: 源对象
    typeParameters:
    - id: TTarget
      description: 要映射的目标类型
    return:
      type: '{TTarget}'
      description: 目标类型的对象
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MapTo(Of TTarget)(source As Object) As TTarget
  overload: Hybrid.Mapping.MapperExtensions.MapTo*
  nameWithType.vb: MapperExtensions.MapTo(Of TTarget)(Object)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Hybrid.Mapping.MapperExtensions.MapTo(Of TTarget)(System.Object)
  name.vb: MapTo(Of TTarget)(Object)
- uid: Hybrid.Mapping.MapperExtensions.MapTo``2(``0,``1)
  commentId: M:Hybrid.Mapping.MapperExtensions.MapTo``2(``0,``1)
  id: MapTo``2(``0,``1)
  isExtensionMethod: true
  parent: Hybrid.Mapping.MapperExtensions
  langs:
  - csharp
  - vb
  name: MapTo<TSource, TTarget>(TSource, TTarget)
  nameWithType: MapperExtensions.MapTo<TSource, TTarget>(TSource, TTarget)
  fullName: Hybrid.Mapping.MapperExtensions.MapTo<TSource, TTarget>(TSource, TTarget)
  type: Method
  source:
    remote:
      path: src/Hybrid/Mapping/MapperExtensions.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: MapTo
    path: ../src/Hybrid/Mapping/MapperExtensions.cs
    startLine: 55
  assemblies:
  - Hybrid
  namespace: Hybrid.Mapping
  summary: "\n使用源类型的对象更新目标类型的对象\n"
  example: []
  syntax:
    content: public static TTarget MapTo<TSource, TTarget>(this TSource source, TTarget target)
    parameters:
    - id: source
      type: '{TSource}'
      description: 源对象
    - id: target
      type: '{TTarget}'
      description: 待更新的目标对象
    typeParameters:
    - id: TSource
      description: 源类型
    - id: TTarget
      description: 目标类型
    return:
      type: '{TTarget}'
      description: 更新后的目标类型对象
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MapTo(Of TSource, TTarget)(source As TSource, target As TTarget) As TTarget
  overload: Hybrid.Mapping.MapperExtensions.MapTo*
  nameWithType.vb: MapperExtensions.MapTo(Of TSource, TTarget)(TSource, TTarget)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Hybrid.Mapping.MapperExtensions.MapTo(Of TSource, TTarget)(TSource, TTarget)
  name.vb: MapTo(Of TSource, TTarget)(TSource, TTarget)
- uid: Hybrid.Mapping.MapperExtensions.ToOutput``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``1,System.Object}}[])
  commentId: M:Hybrid.Mapping.MapperExtensions.ToOutput``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``1,System.Object}}[])
  id: ToOutput``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``1,System.Object}}[])
  isExtensionMethod: true
  parent: Hybrid.Mapping.MapperExtensions
  langs:
  - csharp
  - vb
  name: ToOutput<TEntity, TOutputDto>(IQueryable<TEntity>, Expression<Func<TOutputDto, Object>>[])
  nameWithType: MapperExtensions.ToOutput<TEntity, TOutputDto>(IQueryable<TEntity>, Expression<Func<TOutputDto, Object>>[])
  fullName: Hybrid.Mapping.MapperExtensions.ToOutput<TEntity, TOutputDto>(System.Linq.IQueryable<TEntity>, System.Linq.Expressions.Expression<System.Func<TOutputDto, System.Object>>[])
  type: Method
  source:
    remote:
      path: src/Hybrid/Mapping/MapperExtensions.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: ToOutput
    path: ../src/Hybrid/Mapping/MapperExtensions.cs
    startLine: 66
  assemblies:
  - Hybrid
  namespace: Hybrid.Mapping
  summary: "\n将数据源映射为指定<code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TOutputDto</code>的集合\n"
  example: []
  syntax:
    content: public static IQueryable<TOutputDto> ToOutput<TEntity, TOutputDto>(this IQueryable<TEntity> source, params Expression<Func<TOutputDto, object>>[] membersToExpand)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TEntity}}
      description: 数据源
    - id: membersToExpand
      type: System.Linq.Expressions.Expression{System.Func{{TOutputDto},System.Object}}[]
      description: 成员展开
    typeParameters:
    - id: TEntity
    - id: TOutputDto
    return:
      type: System.Linq.IQueryable{{TOutputDto}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToOutput(Of TEntity, TOutputDto)(source As IQueryable(Of TEntity), ParamArray membersToExpand As Expression(Of Func(Of TOutputDto, Object))()) As IQueryable(Of TOutputDto)
  overload: Hybrid.Mapping.MapperExtensions.ToOutput*
  nameWithType.vb: MapperExtensions.ToOutput(Of TEntity, TOutputDto)(IQueryable(Of TEntity), Expression(Of Func(Of TOutputDto, Object))())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Hybrid.Mapping.MapperExtensions.ToOutput(Of TEntity, TOutputDto)(System.Linq.IQueryable(Of TEntity), System.Linq.Expressions.Expression(Of System.Func(Of TOutputDto, System.Object))())
  name.vb: ToOutput(Of TEntity, TOutputDto)(IQueryable(Of TEntity), Expression(Of Func(Of TOutputDto, Object))())
references:
- uid: Hybrid.Mapping
  commentId: N:Hybrid.Mapping
  name: Hybrid.Mapping
  nameWithType: Hybrid.Mapping
  fullName: Hybrid.Mapping
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Hybrid.Mapping.MapperExtensions.SetMapper*
  commentId: Overload:Hybrid.Mapping.MapperExtensions.SetMapper
  name: SetMapper
  nameWithType: MapperExtensions.SetMapper
  fullName: Hybrid.Mapping.MapperExtensions.SetMapper
- uid: Hybrid.Mapping.IMapper
  commentId: T:Hybrid.Mapping.IMapper
  parent: Hybrid.Mapping
  name: IMapper
  nameWithType: IMapper
  fullName: Hybrid.Mapping.IMapper
- uid: Hybrid.Mapping.MapperExtensions.MapTo*
  commentId: Overload:Hybrid.Mapping.MapperExtensions.MapTo
  name: MapTo
  nameWithType: MapperExtensions.MapTo
  fullName: Hybrid.Mapping.MapperExtensions.MapTo
- uid: '{TTarget}'
  commentId: '!:TTarget'
  definition: TTarget
  name: TTarget
  nameWithType: TTarget
  fullName: TTarget
- uid: TTarget
  name: TTarget
  nameWithType: TTarget
  fullName: TTarget
- uid: '{TSource}'
  commentId: '!:TSource'
  definition: TSource
  name: TSource
  nameWithType: TSource
  fullName: TSource
- uid: TSource
  name: TSource
  nameWithType: TSource
  fullName: TSource
- uid: Hybrid.Mapping.MapperExtensions.ToOutput*
  commentId: Overload:Hybrid.Mapping.MapperExtensions.ToOutput
  name: ToOutput
  nameWithType: MapperExtensions.ToOutput
  fullName: Hybrid.Mapping.MapperExtensions.ToOutput
- uid: System.Linq.IQueryable{{TEntity}}
  commentId: T:System.Linq.IQueryable{``0}
  parent: System.Linq
  definition: System.Linq.IQueryable`1
  name: IQueryable<TEntity>
  nameWithType: IQueryable<TEntity>
  fullName: System.Linq.IQueryable<TEntity>
  nameWithType.vb: IQueryable(Of TEntity)
  fullName.vb: System.Linq.IQueryable(Of TEntity)
  name.vb: IQueryable(Of TEntity)
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{TOutputDto},System.Object}}[]
  isExternal: true
  name: Expression<Func<TOutputDto, Object>>[]
  nameWithType: Expression<Func<TOutputDto, Object>>[]
  fullName: System.Linq.Expressions.Expression<System.Func<TOutputDto, System.Object>>[]
  nameWithType.vb: Expression(Of Func(Of TOutputDto, Object))()
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TOutputDto, System.Object))()
  name.vb: Expression(Of Func(Of TOutputDto, Object))()
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOutputDto
    nameWithType: TOutputDto
    fullName: TOutputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOutputDto
    nameWithType: TOutputDto
    fullName: TOutputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Linq.IQueryable{{TOutputDto}}
  commentId: T:System.Linq.IQueryable{``1}
  parent: System.Linq
  definition: System.Linq.IQueryable`1
  name: IQueryable<TOutputDto>
  nameWithType: IQueryable<TOutputDto>
  fullName: System.Linq.IQueryable<TOutputDto>
  nameWithType.vb: IQueryable(Of TOutputDto)
  fullName.vb: System.Linq.IQueryable(Of TOutputDto)
  name.vb: IQueryable(Of TOutputDto)
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOutputDto
    nameWithType: TOutputDto
    fullName: TOutputDto
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOutputDto
    nameWithType: TOutputDto
    fullName: TOutputDto
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.IQueryable`1
  commentId: T:System.Linq.IQueryable`1
  isExternal: true
  name: IQueryable<T>
  nameWithType: IQueryable<T>
  fullName: System.Linq.IQueryable<T>
  nameWithType.vb: IQueryable(Of T)
  fullName.vb: System.Linq.IQueryable(Of T)
  name.vb: IQueryable(Of T)
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq
  commentId: N:System.Linq
  isExternal: true
  name: System.Linq
  nameWithType: System.Linq
  fullName: System.Linq
