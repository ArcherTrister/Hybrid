### YamlMime:ManagedReference
items:
- uid: Hybrid.Systems.KeyValueStore
  commentId: T:Hybrid.Systems.KeyValueStore
  id: KeyValueStore
  parent: Hybrid.Systems
  children:
  - Hybrid.Systems.KeyValueStore.#ctor(Hybrid.Domain.Repositories.IRepository{Hybrid.Core.Systems.KeyValue,System.Guid},Microsoft.Extensions.Caching.Distributed.IDistributedCache)
  - Hybrid.Systems.KeyValueStore.CheckKeyValueExists(System.Linq.Expressions.Expression{System.Func{Hybrid.Core.Systems.KeyValue,System.Boolean}},System.Guid)
  - Hybrid.Systems.KeyValueStore.CreateOrUpdateKeyValue(System.String,System.Object)
  - Hybrid.Systems.KeyValueStore.CreateOrUpdateKeyValues(Hybrid.Core.Data.IKeyValue[])
  - Hybrid.Systems.KeyValueStore.DeleteKeyValues(System.Guid[])
  - Hybrid.Systems.KeyValueStore.DeleteKeyValues(System.String)
  - Hybrid.Systems.KeyValueStore.GetKeyValue(System.String)
  - Hybrid.Systems.KeyValueStore.GetSetting``1
  - Hybrid.Systems.KeyValueStore.KeyValues
  - Hybrid.Systems.KeyValueStore.SaveSetting(Hybrid.Core.Systems.ISetting)
  langs:
  - csharp
  - vb
  name: KeyValueStore
  nameWithType: KeyValueStore
  fullName: Hybrid.Systems.KeyValueStore
  type: Class
  source:
    remote:
      path: src/Hybrid.Zero/Systems/KeyValueStore.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: KeyValueStore
    path: ../src/Hybrid.Zero/Systems/KeyValueStore.cs
    startLine: 28
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Systems
  summary: "\n键值数据存储\n"
  example: []
  syntax:
    content: 'public class KeyValueStore : IKeyValueStore'
    content.vb: >-
      Public Class KeyValueStore
          Implements IKeyValueStore
  inheritance:
  - System.Object
  implements:
  - Hybrid.Core.Systems.IKeyValueStore
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - System.Object.Hybrid.Extensions.ObjectExtensions.CastTo(System.Type)
  - System.Object.Hybrid.Extensions.ObjectExtensions.CastTo``1
  - System.Object.Hybrid.Extensions.ObjectExtensions.CastTo``1({T})
  - Hybrid.Systems.KeyValueStore.Hybrid.Extensions.ObjectExtensions.IsIn``1(Hybrid.Systems.KeyValueStore[])
  - System.Object.Hybrid.Extensions.ObjectExtensions.ToDynamic
  - Hybrid.Systems.KeyValueStore.Hybrid.Extensions.ObjectExtensions.DeepClone``1
  - Hybrid.Systems.KeyValueStore.Hybrid.Extensions.ParameterCheckExtensions.Required``1(System.Func{Hybrid.Systems.KeyValueStore,System.Boolean},System.String)
  - Hybrid.Systems.KeyValueStore.Hybrid.Extensions.ParameterCheckExtensions.Required``2(System.Func{Hybrid.Systems.KeyValueStore,System.Boolean},System.String)
  - Hybrid.Systems.KeyValueStore.Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(System.String)
  - Hybrid.Systems.KeyValueStore.Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{Hybrid.Systems.KeyValueStore},System.Action{System.Exception},System.Action{Hybrid.Systems.KeyValueStore})
  - Hybrid.Systems.KeyValueStore.Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{Hybrid.Systems.KeyValueStore},System.Action{System.Exception})
  - Hybrid.Systems.KeyValueStore.Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{Hybrid.Systems.KeyValueStore,{TResult}},System.Action{System.Exception},System.Action{Hybrid.Systems.KeyValueStore})
  - Hybrid.Systems.KeyValueStore.Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{Hybrid.Systems.KeyValueStore,{TResult}},System.Action{System.Exception})
  - Hybrid.Systems.KeyValueStore.Hybrid.Extensions.TryCatchExtensions.TryFinally``1(System.Action{Hybrid.Systems.KeyValueStore},System.Action{Hybrid.Systems.KeyValueStore})
  - System.Object.Hybrid.Json.JsonExtensions.ToJsonString(System.Boolean,System.Boolean)
  - System.Object.Hybrid.Mapping.MapperExtensions.MapTo``1
  - Hybrid.Systems.KeyValueStore.Hybrid.Mapping.MapperExtensions.MapTo``2({TTarget})
  - System.Object.Hybrid.Reflection.LockExtensions.Locking(System.Action)
  - Hybrid.Systems.KeyValueStore.Hybrid.Reflection.LockExtensions.Locking``1(System.Action{Hybrid.Systems.KeyValueStore})
  - System.Object.Hybrid.Reflection.LockExtensions.Locking``1(System.Func{{TResult}})
  - Hybrid.Systems.KeyValueStore.Hybrid.Reflection.LockExtensions.Locking``2(System.Func{Hybrid.Systems.KeyValueStore,{TResult}})
  - Hybrid.Systems.KeyValueStore.Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2
  - Hybrid.Systems.KeyValueStore.Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(System.Security.Principal.IPrincipal)
  - Hybrid.Systems.KeyValueStore.Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(System.Security.Principal.IPrincipal)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Hybrid.Systems.KeyValueStore.#ctor(Hybrid.Domain.Repositories.IRepository{Hybrid.Core.Systems.KeyValue,System.Guid},Microsoft.Extensions.Caching.Distributed.IDistributedCache)
  commentId: M:Hybrid.Systems.KeyValueStore.#ctor(Hybrid.Domain.Repositories.IRepository{Hybrid.Core.Systems.KeyValue,System.Guid},Microsoft.Extensions.Caching.Distributed.IDistributedCache)
  id: '#ctor(Hybrid.Domain.Repositories.IRepository{Hybrid.Core.Systems.KeyValue,System.Guid},Microsoft.Extensions.Caching.Distributed.IDistributedCache)'
  parent: Hybrid.Systems.KeyValueStore
  langs:
  - csharp
  - vb
  name: KeyValueStore(IRepository<KeyValue, Guid>, IDistributedCache)
  nameWithType: KeyValueStore.KeyValueStore(IRepository<KeyValue, Guid>, IDistributedCache)
  fullName: Hybrid.Systems.KeyValueStore.KeyValueStore(Hybrid.Domain.Repositories.IRepository<Hybrid.Core.Systems.KeyValue, System.Guid>, Microsoft.Extensions.Caching.Distributed.IDistributedCache)
  type: Constructor
  source:
    remote:
      path: src/Hybrid.Zero/Systems/KeyValueStore.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: .ctor
    path: ../src/Hybrid.Zero/Systems/KeyValueStore.cs
    startLine: 38
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Systems
  summary: "\n初始化一个<xref href=\"Hybrid.Systems.KeyValueStore\" data-throw-if-not-resolved=\"false\"></xref>类型的新实例\n"
  example: []
  syntax:
    content: public KeyValueStore(IRepository<KeyValue, Guid> keyValueRepository, IDistributedCache cache)
    parameters:
    - id: keyValueRepository
      type: Hybrid.Domain.Repositories.IRepository{Hybrid.Core.Systems.KeyValue,System.Guid}
    - id: cache
      type: Microsoft.Extensions.Caching.Distributed.IDistributedCache
    content.vb: Public Sub New(keyValueRepository As IRepository(Of KeyValue, Guid), cache As IDistributedCache)
  overload: Hybrid.Systems.KeyValueStore.#ctor*
  nameWithType.vb: KeyValueStore.KeyValueStore(IRepository(Of KeyValue, Guid), IDistributedCache)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Hybrid.Systems.KeyValueStore.KeyValueStore(Hybrid.Domain.Repositories.IRepository(Of Hybrid.Core.Systems.KeyValue, System.Guid), Microsoft.Extensions.Caching.Distributed.IDistributedCache)
  name.vb: KeyValueStore(IRepository(Of KeyValue, Guid), IDistributedCache)
- uid: Hybrid.Systems.KeyValueStore.KeyValues
  commentId: P:Hybrid.Systems.KeyValueStore.KeyValues
  id: KeyValues
  parent: Hybrid.Systems.KeyValueStore
  langs:
  - csharp
  - vb
  name: KeyValues
  nameWithType: KeyValueStore.KeyValues
  fullName: Hybrid.Systems.KeyValueStore.KeyValues
  type: Property
  source:
    remote:
      path: src/Hybrid.Zero/Systems/KeyValueStore.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: KeyValues
    path: ../src/Hybrid.Zero/Systems/KeyValueStore.cs
    startLine: 48
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Systems
  summary: "\n获取 键值对数据查询数据集\n"
  example: []
  syntax:
    content: public IQueryable<KeyValue> KeyValues { get; }
    parameters: []
    return:
      type: System.Linq.IQueryable{Hybrid.Core.Systems.KeyValue}
    content.vb: Public ReadOnly Property KeyValues As IQueryable(Of KeyValue)
  overload: Hybrid.Systems.KeyValueStore.KeyValues*
  implements:
  - Hybrid.Core.Systems.IKeyValueStore.KeyValues
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Hybrid.Systems.KeyValueStore.GetSetting``1
  commentId: M:Hybrid.Systems.KeyValueStore.GetSetting``1
  id: GetSetting``1
  parent: Hybrid.Systems.KeyValueStore
  langs:
  - csharp
  - vb
  name: GetSetting<TSetting>()
  nameWithType: KeyValueStore.GetSetting<TSetting>()
  fullName: Hybrid.Systems.KeyValueStore.GetSetting<TSetting>()
  type: Method
  source:
    remote:
      path: src/Hybrid.Zero/Systems/KeyValueStore.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: GetSetting
    path: ../src/Hybrid.Zero/Systems/KeyValueStore.cs
    startLine: 55
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Systems
  summary: "\n获取或创建设置信息\n"
  example: []
  syntax:
    content: >-
      public TSetting GetSetting<TSetting>()
          where TSetting : ISetting, new()
    typeParameters:
    - id: TSetting
      description: 设置类型
    return:
      type: '{TSetting}'
      description: 设置实例，数据库中不存在相应节点时返回默认值
    content.vb: Public Function GetSetting(Of TSetting As {ISetting, New}) As TSetting
  overload: Hybrid.Systems.KeyValueStore.GetSetting*
  implements:
  - Hybrid.Core.Systems.IKeyValueStore.GetSetting``1
  nameWithType.vb: KeyValueStore.GetSetting(Of TSetting)()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Hybrid.Systems.KeyValueStore.GetSetting(Of TSetting)()
  name.vb: GetSetting(Of TSetting)()
- uid: Hybrid.Systems.KeyValueStore.SaveSetting(Hybrid.Core.Systems.ISetting)
  commentId: M:Hybrid.Systems.KeyValueStore.SaveSetting(Hybrid.Core.Systems.ISetting)
  id: SaveSetting(Hybrid.Core.Systems.ISetting)
  parent: Hybrid.Systems.KeyValueStore
  langs:
  - csharp
  - vb
  name: SaveSetting(ISetting)
  nameWithType: KeyValueStore.SaveSetting(ISetting)
  fullName: Hybrid.Systems.KeyValueStore.SaveSetting(Hybrid.Core.Systems.ISetting)
  type: Method
  source:
    remote:
      path: src/Hybrid.Zero/Systems/KeyValueStore.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: SaveSetting
    path: ../src/Hybrid.Zero/Systems/KeyValueStore.cs
    startLine: 75
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Systems
  summary: "\n保存设置信息\n"
  example: []
  syntax:
    content: public Task<OperationResult> SaveSetting(ISetting setting)
    parameters:
    - id: setting
      type: Hybrid.Core.Systems.ISetting
      description: 设置信息
    return:
      type: System.Threading.Tasks.Task{Hybrid.Data.OperationResult}
    content.vb: Public Function SaveSetting(setting As ISetting) As Task(Of OperationResult)
  overload: Hybrid.Systems.KeyValueStore.SaveSetting*
  implements:
  - Hybrid.Core.Systems.IKeyValueStore.SaveSetting(Hybrid.Core.Systems.ISetting)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Hybrid.Systems.KeyValueStore.GetKeyValue(System.String)
  commentId: M:Hybrid.Systems.KeyValueStore.GetKeyValue(System.String)
  id: GetKeyValue(System.String)
  parent: Hybrid.Systems.KeyValueStore
  langs:
  - csharp
  - vb
  name: GetKeyValue(String)
  nameWithType: KeyValueStore.GetKeyValue(String)
  fullName: Hybrid.Systems.KeyValueStore.GetKeyValue(System.String)
  type: Method
  source:
    remote:
      path: src/Hybrid.Zero/Systems/KeyValueStore.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: GetKeyValue
    path: ../src/Hybrid.Zero/Systems/KeyValueStore.cs
    startLine: 88
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Systems
  summary: "\n获取指定键名的数据项\n"
  example: []
  syntax:
    content: public IKeyValue GetKeyValue(string key)
    parameters:
    - id: key
      type: System.String
      description: 键名
    return:
      type: Hybrid.Core.Data.IKeyValue
      description: 数据项
    content.vb: Public Function GetKeyValue(key As String) As IKeyValue
  overload: Hybrid.Systems.KeyValueStore.GetKeyValue*
  implements:
  - Hybrid.Core.Systems.IKeyValueStore.GetKeyValue(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Hybrid.Systems.KeyValueStore.CheckKeyValueExists(System.Linq.Expressions.Expression{System.Func{Hybrid.Core.Systems.KeyValue,System.Boolean}},System.Guid)
  commentId: M:Hybrid.Systems.KeyValueStore.CheckKeyValueExists(System.Linq.Expressions.Expression{System.Func{Hybrid.Core.Systems.KeyValue,System.Boolean}},System.Guid)
  id: CheckKeyValueExists(System.Linq.Expressions.Expression{System.Func{Hybrid.Core.Systems.KeyValue,System.Boolean}},System.Guid)
  parent: Hybrid.Systems.KeyValueStore
  langs:
  - csharp
  - vb
  name: CheckKeyValueExists(Expression<Func<KeyValue, Boolean>>, Guid)
  nameWithType: KeyValueStore.CheckKeyValueExists(Expression<Func<KeyValue, Boolean>>, Guid)
  fullName: Hybrid.Systems.KeyValueStore.CheckKeyValueExists(System.Linq.Expressions.Expression<System.Func<Hybrid.Core.Systems.KeyValue, System.Boolean>>, System.Guid)
  type: Method
  source:
    remote:
      path: src/Hybrid.Zero/Systems/KeyValueStore.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: CheckKeyValueExists
    path: ../src/Hybrid.Zero/Systems/KeyValueStore.cs
    startLine: 101
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Systems
  summary: "\n检查键值对信息是否存在\n"
  example: []
  syntax:
    content: public Task<bool> CheckKeyValueExists(Expression<Func<KeyValue, bool>> predicate, Guid id = default(Guid))
    parameters:
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{Hybrid.Core.Systems.KeyValue,System.Boolean}}
      description: 检查谓语表达式
    - id: id
      type: System.Guid
      description: 更新的键值对信息编号
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: 键值对信息是否存在
    content.vb: Public Function CheckKeyValueExists(predicate As Expression(Of Func(Of KeyValue, Boolean)), id As Guid = Nothing) As Task(Of Boolean)
  overload: Hybrid.Systems.KeyValueStore.CheckKeyValueExists*
  implements:
  - Hybrid.Core.Systems.IKeyValueStore.CheckKeyValueExists(System.Linq.Expressions.Expression{System.Func{Hybrid.Core.Systems.KeyValue,System.Boolean}},System.Guid)
  nameWithType.vb: KeyValueStore.CheckKeyValueExists(Expression(Of Func(Of KeyValue, Boolean)), Guid)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Hybrid.Systems.KeyValueStore.CheckKeyValueExists(System.Linq.Expressions.Expression(Of System.Func(Of Hybrid.Core.Systems.KeyValue, System.Boolean)), System.Guid)
  name.vb: CheckKeyValueExists(Expression(Of Func(Of KeyValue, Boolean)), Guid)
- uid: Hybrid.Systems.KeyValueStore.CreateOrUpdateKeyValue(System.String,System.Object)
  commentId: M:Hybrid.Systems.KeyValueStore.CreateOrUpdateKeyValue(System.String,System.Object)
  id: CreateOrUpdateKeyValue(System.String,System.Object)
  parent: Hybrid.Systems.KeyValueStore
  langs:
  - csharp
  - vb
  name: CreateOrUpdateKeyValue(String, Object)
  nameWithType: KeyValueStore.CreateOrUpdateKeyValue(String, Object)
  fullName: Hybrid.Systems.KeyValueStore.CreateOrUpdateKeyValue(System.String, System.Object)
  type: Method
  source:
    remote:
      path: src/Hybrid.Zero/Systems/KeyValueStore.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: CreateOrUpdateKeyValue
    path: ../src/Hybrid.Zero/Systems/KeyValueStore.cs
    startLine: 112
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Systems
  summary: "\n添加或更新键值对信息\n"
  example: []
  syntax:
    content: public Task<OperationResult> CreateOrUpdateKeyValue(string key, object value)
    parameters:
    - id: key
      type: System.String
      description: 键
    - id: value
      type: System.Object
      description: 值
    return:
      type: System.Threading.Tasks.Task{Hybrid.Data.OperationResult}
      description: 业务操作结果
    content.vb: Public Function CreateOrUpdateKeyValue(key As String, value As Object) As Task(Of OperationResult)
  overload: Hybrid.Systems.KeyValueStore.CreateOrUpdateKeyValue*
  implements:
  - Hybrid.Core.Systems.IKeyValueStore.CreateOrUpdateKeyValue(System.String,System.Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Hybrid.Systems.KeyValueStore.CreateOrUpdateKeyValues(Hybrid.Core.Data.IKeyValue[])
  commentId: M:Hybrid.Systems.KeyValueStore.CreateOrUpdateKeyValues(Hybrid.Core.Data.IKeyValue[])
  id: CreateOrUpdateKeyValues(Hybrid.Core.Data.IKeyValue[])
  parent: Hybrid.Systems.KeyValueStore
  langs:
  - csharp
  - vb
  name: CreateOrUpdateKeyValues(IKeyValue[])
  nameWithType: KeyValueStore.CreateOrUpdateKeyValues(IKeyValue[])
  fullName: Hybrid.Systems.KeyValueStore.CreateOrUpdateKeyValues(Hybrid.Core.Data.IKeyValue[])
  type: Method
  source:
    remote:
      path: src/Hybrid.Zero/Systems/KeyValueStore.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: CreateOrUpdateKeyValues
    path: ../src/Hybrid.Zero/Systems/KeyValueStore.cs
    startLine: 123
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Systems
  summary: "\n添加或更新键值对信息\n"
  example: []
  syntax:
    content: public Task<OperationResult> CreateOrUpdateKeyValues(params IKeyValue[] dtos)
    parameters:
    - id: dtos
      type: Hybrid.Core.Data.IKeyValue[]
      description: 要添加的键值对信息DTO信息
    return:
      type: System.Threading.Tasks.Task{Hybrid.Data.OperationResult}
      description: 业务操作结果
    content.vb: Public Function CreateOrUpdateKeyValues(ParamArray dtos As IKeyValue()) As Task(Of OperationResult)
  overload: Hybrid.Systems.KeyValueStore.CreateOrUpdateKeyValues*
  implements:
  - Hybrid.Core.Systems.IKeyValueStore.CreateOrUpdateKeyValues(Hybrid.Core.Data.IKeyValue[])
  nameWithType.vb: KeyValueStore.CreateOrUpdateKeyValues(IKeyValue())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Hybrid.Systems.KeyValueStore.CreateOrUpdateKeyValues(Hybrid.Core.Data.IKeyValue())
  name.vb: CreateOrUpdateKeyValues(IKeyValue())
- uid: Hybrid.Systems.KeyValueStore.DeleteKeyValues(System.Guid[])
  commentId: M:Hybrid.Systems.KeyValueStore.DeleteKeyValues(System.Guid[])
  id: DeleteKeyValues(System.Guid[])
  parent: Hybrid.Systems.KeyValueStore
  langs:
  - csharp
  - vb
  name: DeleteKeyValues(Guid[])
  nameWithType: KeyValueStore.DeleteKeyValues(Guid[])
  fullName: Hybrid.Systems.KeyValueStore.DeleteKeyValues(System.Guid[])
  type: Method
  source:
    remote:
      path: src/Hybrid.Zero/Systems/KeyValueStore.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: DeleteKeyValues
    path: ../src/Hybrid.Zero/Systems/KeyValueStore.cs
    startLine: 153
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Systems
  summary: "\n删除键值对信息\n"
  example: []
  syntax:
    content: public Task<OperationResult> DeleteKeyValues(params Guid[] ids)
    parameters:
    - id: ids
      type: System.Guid[]
      description: 要删除的键值对信息编号
    return:
      type: System.Threading.Tasks.Task{Hybrid.Data.OperationResult}
      description: 业务操作结果
    content.vb: Public Function DeleteKeyValues(ParamArray ids As Guid()) As Task(Of OperationResult)
  overload: Hybrid.Systems.KeyValueStore.DeleteKeyValues*
  implements:
  - Hybrid.Core.Systems.IKeyValueStore.DeleteKeyValues(System.Guid[])
  nameWithType.vb: KeyValueStore.DeleteKeyValues(Guid())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Hybrid.Systems.KeyValueStore.DeleteKeyValues(System.Guid())
  name.vb: DeleteKeyValues(Guid())
- uid: Hybrid.Systems.KeyValueStore.DeleteKeyValues(System.String)
  commentId: M:Hybrid.Systems.KeyValueStore.DeleteKeyValues(System.String)
  id: DeleteKeyValues(System.String)
  parent: Hybrid.Systems.KeyValueStore
  langs:
  - csharp
  - vb
  name: DeleteKeyValues(String)
  nameWithType: KeyValueStore.DeleteKeyValues(String)
  fullName: Hybrid.Systems.KeyValueStore.DeleteKeyValues(System.String)
  type: Method
  source:
    remote:
      path: src/Hybrid.Zero/Systems/KeyValueStore.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: DeleteKeyValues
    path: ../src/Hybrid.Zero/Systems/KeyValueStore.cs
    startLine: 168
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Systems
  summary: "\n删除以根键路径为起始的所有字典项，如输入“System.User.”，所有键以此开头的项都会被删除\n"
  example: []
  syntax:
    content: public Task<OperationResult> DeleteKeyValues(string rootKey)
    parameters:
    - id: rootKey
      type: System.String
      description: 根键路径
    return:
      type: System.Threading.Tasks.Task{Hybrid.Data.OperationResult}
      description: 业务操作结果
    content.vb: Public Function DeleteKeyValues(rootKey As String) As Task(Of OperationResult)
  overload: Hybrid.Systems.KeyValueStore.DeleteKeyValues*
  implements:
  - Hybrid.Core.Systems.IKeyValueStore.DeleteKeyValues(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Hybrid.Systems
  commentId: N:Hybrid.Systems
  name: Hybrid.Systems
  nameWithType: Hybrid.Systems
  fullName: Hybrid.Systems
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Hybrid.Core.Systems.IKeyValueStore
  commentId: T:Hybrid.Core.Systems.IKeyValueStore
  parent: Hybrid.Core.Systems
  name: IKeyValueStore
  nameWithType: IKeyValueStore
  fullName: Hybrid.Core.Systems.IKeyValueStore
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Extensions.ObjectExtensions.CastTo(System.Type)
  commentId: M:Hybrid.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
  parent: Hybrid.Extensions.ObjectExtensions
  definition: Hybrid.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
  name: CastTo(Type)
  nameWithType: ObjectExtensions.CastTo(Type)
  fullName: Hybrid.Extensions.ObjectExtensions.CastTo(System.Type)
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo(System.Type)
    name: CastTo
    nameWithType: ObjectExtensions.CastTo
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo(System.Type)
    name: CastTo
    nameWithType: ObjectExtensions.CastTo
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Extensions.ObjectExtensions.CastTo``1
  commentId: M:Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object)
  parent: Hybrid.Extensions.ObjectExtensions
  definition: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object)
  name: CastTo<T>()
  nameWithType: ObjectExtensions.CastTo<T>()
  fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>()
  nameWithType.vb: ObjectExtensions.CastTo(Of T)()
  fullName.vb: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)()
  name.vb: CastTo(Of T)()
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1
    name: CastTo<T>
    nameWithType: ObjectExtensions.CastTo<T>
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1
    name: CastTo(Of T)
    nameWithType: ObjectExtensions.CastTo(Of T)
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Extensions.ObjectExtensions.CastTo``1({T})
  commentId: M:Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
  parent: Hybrid.Extensions.ObjectExtensions
  definition: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
  name: CastTo<T>(T)
  nameWithType: ObjectExtensions.CastTo<T>(T)
  fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>(T)
  nameWithType.vb: ObjectExtensions.CastTo(Of T)(T)
  fullName.vb: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)(T)
  name.vb: CastTo(Of T)(T)
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(``0)
    name: CastTo<T>
    nameWithType: ObjectExtensions.CastTo<T>
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(``0)
    name: CastTo(Of T)
    nameWithType: ObjectExtensions.CastTo(Of T)
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Systems.KeyValueStore.Hybrid.Extensions.ObjectExtensions.IsIn``1(Hybrid.Systems.KeyValueStore[])
  commentId: M:Hybrid.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
  parent: Hybrid.Extensions.ObjectExtensions
  definition: Hybrid.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
  name: IsIn<KeyValueStore>(KeyValueStore[])
  nameWithType: ObjectExtensions.IsIn<KeyValueStore>(KeyValueStore[])
  fullName: Hybrid.Extensions.ObjectExtensions.IsIn<Hybrid.Systems.KeyValueStore>(Hybrid.Systems.KeyValueStore[])
  nameWithType.vb: ObjectExtensions.IsIn(Of KeyValueStore)(KeyValueStore())
  fullName.vb: Hybrid.Extensions.ObjectExtensions.IsIn(Of Hybrid.Systems.KeyValueStore)(Hybrid.Systems.KeyValueStore())
  name.vb: IsIn(Of KeyValueStore)(KeyValueStore())
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.IsIn``1(``0[])
    name: IsIn<KeyValueStore>
    nameWithType: ObjectExtensions.IsIn<KeyValueStore>
    fullName: Hybrid.Extensions.ObjectExtensions.IsIn<Hybrid.Systems.KeyValueStore>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Hybrid.Systems.KeyValueStore
    name: KeyValueStore
    nameWithType: KeyValueStore
    fullName: Hybrid.Systems.KeyValueStore
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.IsIn``1(``0[])
    name: IsIn(Of KeyValueStore)
    nameWithType: ObjectExtensions.IsIn(Of KeyValueStore)
    fullName: Hybrid.Extensions.ObjectExtensions.IsIn(Of Hybrid.Systems.KeyValueStore)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Hybrid.Systems.KeyValueStore
    name: KeyValueStore
    nameWithType: KeyValueStore
    fullName: Hybrid.Systems.KeyValueStore
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Extensions.ObjectExtensions.ToDynamic
  commentId: M:Hybrid.Extensions.ObjectExtensions.ToDynamic(System.Object)
  parent: Hybrid.Extensions.ObjectExtensions
  definition: Hybrid.Extensions.ObjectExtensions.ToDynamic(System.Object)
  name: ToDynamic()
  nameWithType: ObjectExtensions.ToDynamic()
  fullName: Hybrid.Extensions.ObjectExtensions.ToDynamic()
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.ToDynamic
    name: ToDynamic
    nameWithType: ObjectExtensions.ToDynamic
    fullName: Hybrid.Extensions.ObjectExtensions.ToDynamic
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.ToDynamic
    name: ToDynamic
    nameWithType: ObjectExtensions.ToDynamic
    fullName: Hybrid.Extensions.ObjectExtensions.ToDynamic
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Systems.KeyValueStore.Hybrid.Extensions.ObjectExtensions.DeepClone``1
  commentId: M:Hybrid.Extensions.ObjectExtensions.DeepClone``1(``0)
  parent: Hybrid.Extensions.ObjectExtensions
  definition: Hybrid.Extensions.ObjectExtensions.DeepClone``1(``0)
  name: DeepClone<KeyValueStore>()
  nameWithType: ObjectExtensions.DeepClone<KeyValueStore>()
  fullName: Hybrid.Extensions.ObjectExtensions.DeepClone<Hybrid.Systems.KeyValueStore>()
  nameWithType.vb: ObjectExtensions.DeepClone(Of KeyValueStore)()
  fullName.vb: Hybrid.Extensions.ObjectExtensions.DeepClone(Of Hybrid.Systems.KeyValueStore)()
  name.vb: DeepClone(Of KeyValueStore)()
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.DeepClone``1
    name: DeepClone<KeyValueStore>
    nameWithType: ObjectExtensions.DeepClone<KeyValueStore>
    fullName: Hybrid.Extensions.ObjectExtensions.DeepClone<Hybrid.Systems.KeyValueStore>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.DeepClone``1
    name: DeepClone(Of KeyValueStore)
    nameWithType: ObjectExtensions.DeepClone(Of KeyValueStore)
    fullName: Hybrid.Extensions.ObjectExtensions.DeepClone(Of Hybrid.Systems.KeyValueStore)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Systems.KeyValueStore.Hybrid.Extensions.ParameterCheckExtensions.Required``1(System.Func{Hybrid.Systems.KeyValueStore,System.Boolean},System.String)
  commentId: M:Hybrid.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
  parent: Hybrid.Extensions.ParameterCheckExtensions
  definition: Hybrid.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
  name: Required<KeyValueStore>(Func<KeyValueStore, Boolean>, String)
  nameWithType: ParameterCheckExtensions.Required<KeyValueStore>(Func<KeyValueStore, Boolean>, String)
  fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<Hybrid.Systems.KeyValueStore>(System.Func<Hybrid.Systems.KeyValueStore, System.Boolean>, System.String)
  nameWithType.vb: ParameterCheckExtensions.Required(Of KeyValueStore)(Func(Of KeyValueStore, Boolean), String)
  fullName.vb: Hybrid.Extensions.ParameterCheckExtensions.Required(Of Hybrid.Systems.KeyValueStore)(System.Func(Of Hybrid.Systems.KeyValueStore, System.Boolean), System.String)
  name.vb: Required(Of KeyValueStore)(Func(Of KeyValueStore, Boolean), String)
  spec.csharp:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``1(System.Func{``0,System.Boolean},System.String)
    name: Required<KeyValueStore>
    nameWithType: ParameterCheckExtensions.Required<KeyValueStore>
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<Hybrid.Systems.KeyValueStore>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Systems.KeyValueStore
    name: KeyValueStore
    nameWithType: KeyValueStore
    fullName: Hybrid.Systems.KeyValueStore
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``1(System.Func{``0,System.Boolean},System.String)
    name: Required(Of KeyValueStore)
    nameWithType: ParameterCheckExtensions.Required(Of KeyValueStore)
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required(Of Hybrid.Systems.KeyValueStore)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Systems.KeyValueStore
    name: KeyValueStore
    nameWithType: KeyValueStore
    fullName: Hybrid.Systems.KeyValueStore
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Systems.KeyValueStore.Hybrid.Extensions.ParameterCheckExtensions.Required``2(System.Func{Hybrid.Systems.KeyValueStore,System.Boolean},System.String)
  commentId: M:Hybrid.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
  parent: Hybrid.Extensions.ParameterCheckExtensions
  definition: Hybrid.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
  name: Required<KeyValueStore, TException>(Func<KeyValueStore, Boolean>, String)
  nameWithType: ParameterCheckExtensions.Required<KeyValueStore, TException>(Func<KeyValueStore, Boolean>, String)
  fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<Hybrid.Systems.KeyValueStore, TException>(System.Func<Hybrid.Systems.KeyValueStore, System.Boolean>, System.String)
  nameWithType.vb: ParameterCheckExtensions.Required(Of KeyValueStore, TException)(Func(Of KeyValueStore, Boolean), String)
  fullName.vb: Hybrid.Extensions.ParameterCheckExtensions.Required(Of Hybrid.Systems.KeyValueStore, TException)(System.Func(Of Hybrid.Systems.KeyValueStore, System.Boolean), System.String)
  name.vb: Required(Of KeyValueStore, TException)(Func(Of KeyValueStore, Boolean), String)
  spec.csharp:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``2(System.Func{``0,System.Boolean},System.String)
    name: Required<KeyValueStore, TException>
    nameWithType: ParameterCheckExtensions.Required<KeyValueStore, TException>
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<Hybrid.Systems.KeyValueStore, TException>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Systems.KeyValueStore
    name: KeyValueStore
    nameWithType: KeyValueStore
    fullName: Hybrid.Systems.KeyValueStore
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``2(System.Func{``0,System.Boolean},System.String)
    name: Required(Of KeyValueStore, TException)
    nameWithType: ParameterCheckExtensions.Required(Of KeyValueStore, TException)
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required(Of Hybrid.Systems.KeyValueStore, TException)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Systems.KeyValueStore
    name: KeyValueStore
    nameWithType: KeyValueStore
    fullName: Hybrid.Systems.KeyValueStore
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Systems.KeyValueStore.Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(System.String)
  commentId: M:Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
  parent: Hybrid.Extensions.ParameterCheckExtensions
  definition: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
  name: CheckNotNull<KeyValueStore>(String)
  nameWithType: ParameterCheckExtensions.CheckNotNull<KeyValueStore>(String)
  fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull<Hybrid.Systems.KeyValueStore>(System.String)
  nameWithType.vb: ParameterCheckExtensions.CheckNotNull(Of KeyValueStore)(String)
  fullName.vb: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull(Of Hybrid.Systems.KeyValueStore)(System.String)
  name.vb: CheckNotNull(Of KeyValueStore)(String)
  spec.csharp:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(System.String)
    name: CheckNotNull<KeyValueStore>
    nameWithType: ParameterCheckExtensions.CheckNotNull<KeyValueStore>
    fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull<Hybrid.Systems.KeyValueStore>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(System.String)
    name: CheckNotNull(Of KeyValueStore)
    nameWithType: ParameterCheckExtensions.CheckNotNull(Of KeyValueStore)
    fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull(Of Hybrid.Systems.KeyValueStore)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Systems.KeyValueStore.Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{Hybrid.Systems.KeyValueStore},System.Action{System.Exception},System.Action{Hybrid.Systems.KeyValueStore})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
  parent: Hybrid.Extensions.TryCatchExtensions
  definition: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
  name: TryCatch<KeyValueStore>(Action<KeyValueStore>, Action<Exception>, Action<KeyValueStore>)
  nameWithType: TryCatchExtensions.TryCatch<KeyValueStore>(Action<KeyValueStore>, Action<Exception>, Action<KeyValueStore>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.Systems.KeyValueStore>(System.Action<Hybrid.Systems.KeyValueStore>, System.Action<System.Exception>, System.Action<Hybrid.Systems.KeyValueStore>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of KeyValueStore)(Action(Of KeyValueStore), Action(Of Exception), Action(Of KeyValueStore))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.Systems.KeyValueStore)(System.Action(Of Hybrid.Systems.KeyValueStore), System.Action(Of System.Exception), System.Action(Of Hybrid.Systems.KeyValueStore))
  name.vb: TryCatch(Of KeyValueStore)(Action(Of KeyValueStore), Action(Of Exception), Action(Of KeyValueStore))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{``0},System.Action{System.Exception},System.Action{``0})
    name: TryCatch<KeyValueStore>
    nameWithType: TryCatchExtensions.TryCatch<KeyValueStore>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.Systems.KeyValueStore>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Systems.KeyValueStore
    name: KeyValueStore
    nameWithType: KeyValueStore
    fullName: Hybrid.Systems.KeyValueStore
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Systems.KeyValueStore
    name: KeyValueStore
    nameWithType: KeyValueStore
    fullName: Hybrid.Systems.KeyValueStore
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{``0},System.Action{System.Exception},System.Action{``0})
    name: TryCatch(Of KeyValueStore)
    nameWithType: TryCatchExtensions.TryCatch(Of KeyValueStore)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.Systems.KeyValueStore)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Systems.KeyValueStore
    name: KeyValueStore
    nameWithType: KeyValueStore
    fullName: Hybrid.Systems.KeyValueStore
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Systems.KeyValueStore
    name: KeyValueStore
    nameWithType: KeyValueStore
    fullName: Hybrid.Systems.KeyValueStore
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Systems.KeyValueStore.Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{Hybrid.Systems.KeyValueStore},System.Action{System.Exception})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
  parent: Hybrid.Extensions.TryCatchExtensions
  definition: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
  name: TryCatch<KeyValueStore>(Action<KeyValueStore>, Action<Exception>)
  nameWithType: TryCatchExtensions.TryCatch<KeyValueStore>(Action<KeyValueStore>, Action<Exception>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.Systems.KeyValueStore>(System.Action<Hybrid.Systems.KeyValueStore>, System.Action<System.Exception>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of KeyValueStore)(Action(Of KeyValueStore), Action(Of Exception))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.Systems.KeyValueStore)(System.Action(Of Hybrid.Systems.KeyValueStore), System.Action(Of System.Exception))
  name.vb: TryCatch(Of KeyValueStore)(Action(Of KeyValueStore), Action(Of Exception))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{``0},System.Action{System.Exception})
    name: TryCatch<KeyValueStore>
    nameWithType: TryCatchExtensions.TryCatch<KeyValueStore>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.Systems.KeyValueStore>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Systems.KeyValueStore
    name: KeyValueStore
    nameWithType: KeyValueStore
    fullName: Hybrid.Systems.KeyValueStore
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{``0},System.Action{System.Exception})
    name: TryCatch(Of KeyValueStore)
    nameWithType: TryCatchExtensions.TryCatch(Of KeyValueStore)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.Systems.KeyValueStore)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Systems.KeyValueStore
    name: KeyValueStore
    nameWithType: KeyValueStore
    fullName: Hybrid.Systems.KeyValueStore
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Systems.KeyValueStore.Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{Hybrid.Systems.KeyValueStore,{TResult}},System.Action{System.Exception},System.Action{Hybrid.Systems.KeyValueStore})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
  parent: Hybrid.Extensions.TryCatchExtensions
  definition: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
  name: TryCatch<KeyValueStore, TResult>(Func<KeyValueStore, TResult>, Action<Exception>, Action<KeyValueStore>)
  nameWithType: TryCatchExtensions.TryCatch<KeyValueStore, TResult>(Func<KeyValueStore, TResult>, Action<Exception>, Action<KeyValueStore>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.Systems.KeyValueStore, TResult>(System.Func<Hybrid.Systems.KeyValueStore, TResult>, System.Action<System.Exception>, System.Action<Hybrid.Systems.KeyValueStore>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of KeyValueStore, TResult)(Func(Of KeyValueStore, TResult), Action(Of Exception), Action(Of KeyValueStore))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.Systems.KeyValueStore, TResult)(System.Func(Of Hybrid.Systems.KeyValueStore, TResult), System.Action(Of System.Exception), System.Action(Of Hybrid.Systems.KeyValueStore))
  name.vb: TryCatch(Of KeyValueStore, TResult)(Func(Of KeyValueStore, TResult), Action(Of Exception), Action(Of KeyValueStore))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
    name: TryCatch<KeyValueStore, TResult>
    nameWithType: TryCatchExtensions.TryCatch<KeyValueStore, TResult>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.Systems.KeyValueStore, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Systems.KeyValueStore
    name: KeyValueStore
    nameWithType: KeyValueStore
    fullName: Hybrid.Systems.KeyValueStore
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Systems.KeyValueStore
    name: KeyValueStore
    nameWithType: KeyValueStore
    fullName: Hybrid.Systems.KeyValueStore
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
    name: TryCatch(Of KeyValueStore, TResult)
    nameWithType: TryCatchExtensions.TryCatch(Of KeyValueStore, TResult)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.Systems.KeyValueStore, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Systems.KeyValueStore
    name: KeyValueStore
    nameWithType: KeyValueStore
    fullName: Hybrid.Systems.KeyValueStore
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Systems.KeyValueStore
    name: KeyValueStore
    nameWithType: KeyValueStore
    fullName: Hybrid.Systems.KeyValueStore
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Systems.KeyValueStore.Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{Hybrid.Systems.KeyValueStore,{TResult}},System.Action{System.Exception})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
  parent: Hybrid.Extensions.TryCatchExtensions
  definition: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
  name: TryCatch<KeyValueStore, TResult>(Func<KeyValueStore, TResult>, Action<Exception>)
  nameWithType: TryCatchExtensions.TryCatch<KeyValueStore, TResult>(Func<KeyValueStore, TResult>, Action<Exception>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.Systems.KeyValueStore, TResult>(System.Func<Hybrid.Systems.KeyValueStore, TResult>, System.Action<System.Exception>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of KeyValueStore, TResult)(Func(Of KeyValueStore, TResult), Action(Of Exception))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.Systems.KeyValueStore, TResult)(System.Func(Of Hybrid.Systems.KeyValueStore, TResult), System.Action(Of System.Exception))
  name.vb: TryCatch(Of KeyValueStore, TResult)(Func(Of KeyValueStore, TResult), Action(Of Exception))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{``0,``1},System.Action{System.Exception})
    name: TryCatch<KeyValueStore, TResult>
    nameWithType: TryCatchExtensions.TryCatch<KeyValueStore, TResult>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.Systems.KeyValueStore, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Systems.KeyValueStore
    name: KeyValueStore
    nameWithType: KeyValueStore
    fullName: Hybrid.Systems.KeyValueStore
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{``0,``1},System.Action{System.Exception})
    name: TryCatch(Of KeyValueStore, TResult)
    nameWithType: TryCatchExtensions.TryCatch(Of KeyValueStore, TResult)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.Systems.KeyValueStore, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Systems.KeyValueStore
    name: KeyValueStore
    nameWithType: KeyValueStore
    fullName: Hybrid.Systems.KeyValueStore
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Systems.KeyValueStore.Hybrid.Extensions.TryCatchExtensions.TryFinally``1(System.Action{Hybrid.Systems.KeyValueStore},System.Action{Hybrid.Systems.KeyValueStore})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
  parent: Hybrid.Extensions.TryCatchExtensions
  definition: Hybrid.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
  name: TryFinally<KeyValueStore>(Action<KeyValueStore>, Action<KeyValueStore>)
  nameWithType: TryCatchExtensions.TryFinally<KeyValueStore>(Action<KeyValueStore>, Action<KeyValueStore>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryFinally<Hybrid.Systems.KeyValueStore>(System.Action<Hybrid.Systems.KeyValueStore>, System.Action<Hybrid.Systems.KeyValueStore>)
  nameWithType.vb: TryCatchExtensions.TryFinally(Of KeyValueStore)(Action(Of KeyValueStore), Action(Of KeyValueStore))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryFinally(Of Hybrid.Systems.KeyValueStore)(System.Action(Of Hybrid.Systems.KeyValueStore), System.Action(Of Hybrid.Systems.KeyValueStore))
  name.vb: TryFinally(Of KeyValueStore)(Action(Of KeyValueStore), Action(Of KeyValueStore))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryFinally``1(System.Action{``0},System.Action{``0})
    name: TryFinally<KeyValueStore>
    nameWithType: TryCatchExtensions.TryFinally<KeyValueStore>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryFinally<Hybrid.Systems.KeyValueStore>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Systems.KeyValueStore
    name: KeyValueStore
    nameWithType: KeyValueStore
    fullName: Hybrid.Systems.KeyValueStore
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Systems.KeyValueStore
    name: KeyValueStore
    nameWithType: KeyValueStore
    fullName: Hybrid.Systems.KeyValueStore
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryFinally``1(System.Action{``0},System.Action{``0})
    name: TryFinally(Of KeyValueStore)
    nameWithType: TryCatchExtensions.TryFinally(Of KeyValueStore)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryFinally(Of Hybrid.Systems.KeyValueStore)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Systems.KeyValueStore
    name: KeyValueStore
    nameWithType: KeyValueStore
    fullName: Hybrid.Systems.KeyValueStore
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Systems.KeyValueStore
    name: KeyValueStore
    nameWithType: KeyValueStore
    fullName: Hybrid.Systems.KeyValueStore
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Json.JsonExtensions.ToJsonString(System.Boolean,System.Boolean)
  commentId: M:Hybrid.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
  parent: Hybrid.Json.JsonExtensions
  definition: Hybrid.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
  name: ToJsonString(Boolean, Boolean)
  nameWithType: JsonExtensions.ToJsonString(Boolean, Boolean)
  fullName: Hybrid.Json.JsonExtensions.ToJsonString(System.Boolean, System.Boolean)
  spec.csharp:
  - uid: Hybrid.Json.JsonExtensions.ToJsonString(System.Boolean,System.Boolean)
    name: ToJsonString
    nameWithType: JsonExtensions.ToJsonString
    fullName: Hybrid.Json.JsonExtensions.ToJsonString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Json.JsonExtensions.ToJsonString(System.Boolean,System.Boolean)
    name: ToJsonString
    nameWithType: JsonExtensions.ToJsonString
    fullName: Hybrid.Json.JsonExtensions.ToJsonString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Mapping.MapperExtensions.MapTo``1
  commentId: M:Hybrid.Mapping.MapperExtensions.MapTo``1(System.Object)
  parent: Hybrid.Mapping.MapperExtensions
  definition: Hybrid.Mapping.MapperExtensions.MapTo``1(System.Object)
  name: MapTo<TTarget>()
  nameWithType: MapperExtensions.MapTo<TTarget>()
  fullName: Hybrid.Mapping.MapperExtensions.MapTo<TTarget>()
  nameWithType.vb: MapperExtensions.MapTo(Of TTarget)()
  fullName.vb: Hybrid.Mapping.MapperExtensions.MapTo(Of TTarget)()
  name.vb: MapTo(Of TTarget)()
  spec.csharp:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``1
    name: MapTo<TTarget>
    nameWithType: MapperExtensions.MapTo<TTarget>
    fullName: Hybrid.Mapping.MapperExtensions.MapTo<TTarget>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``1
    name: MapTo(Of TTarget)
    nameWithType: MapperExtensions.MapTo(Of TTarget)
    fullName: Hybrid.Mapping.MapperExtensions.MapTo(Of TTarget)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Systems.KeyValueStore.Hybrid.Mapping.MapperExtensions.MapTo``2({TTarget})
  commentId: M:Hybrid.Mapping.MapperExtensions.MapTo``2(``0,``1)
  parent: Hybrid.Mapping.MapperExtensions
  definition: Hybrid.Mapping.MapperExtensions.MapTo``2(``0,``1)
  name: MapTo<KeyValueStore, TTarget>(TTarget)
  nameWithType: MapperExtensions.MapTo<KeyValueStore, TTarget>(TTarget)
  fullName: Hybrid.Mapping.MapperExtensions.MapTo<Hybrid.Systems.KeyValueStore, TTarget>(TTarget)
  nameWithType.vb: MapperExtensions.MapTo(Of KeyValueStore, TTarget)(TTarget)
  fullName.vb: Hybrid.Mapping.MapperExtensions.MapTo(Of Hybrid.Systems.KeyValueStore, TTarget)(TTarget)
  name.vb: MapTo(Of KeyValueStore, TTarget)(TTarget)
  spec.csharp:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``2(``1)
    name: MapTo<KeyValueStore, TTarget>
    nameWithType: MapperExtensions.MapTo<KeyValueStore, TTarget>
    fullName: Hybrid.Mapping.MapperExtensions.MapTo<Hybrid.Systems.KeyValueStore, TTarget>
  - name: (
    nameWithType: (
    fullName: (
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``2(``1)
    name: MapTo(Of KeyValueStore, TTarget)
    nameWithType: MapperExtensions.MapTo(Of KeyValueStore, TTarget)
    fullName: Hybrid.Mapping.MapperExtensions.MapTo(Of Hybrid.Systems.KeyValueStore, TTarget)
  - name: (
    nameWithType: (
    fullName: (
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Reflection.LockExtensions.Locking(System.Action)
  commentId: M:Hybrid.Reflection.LockExtensions.Locking(System.Object,System.Action)
  parent: Hybrid.Reflection.LockExtensions
  definition: Hybrid.Reflection.LockExtensions.Locking(System.Object,System.Action)
  name: Locking(Action)
  nameWithType: LockExtensions.Locking(Action)
  fullName: Hybrid.Reflection.LockExtensions.Locking(System.Action)
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking(System.Action)
    name: Locking
    nameWithType: LockExtensions.Locking
    fullName: Hybrid.Reflection.LockExtensions.Locking
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking(System.Action)
    name: Locking
    nameWithType: LockExtensions.Locking
    fullName: Hybrid.Reflection.LockExtensions.Locking
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Systems.KeyValueStore.Hybrid.Reflection.LockExtensions.Locking``1(System.Action{Hybrid.Systems.KeyValueStore})
  commentId: M:Hybrid.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
  parent: Hybrid.Reflection.LockExtensions
  definition: Hybrid.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
  name: Locking<KeyValueStore>(Action<KeyValueStore>)
  nameWithType: LockExtensions.Locking<KeyValueStore>(Action<KeyValueStore>)
  fullName: Hybrid.Reflection.LockExtensions.Locking<Hybrid.Systems.KeyValueStore>(System.Action<Hybrid.Systems.KeyValueStore>)
  nameWithType.vb: LockExtensions.Locking(Of KeyValueStore)(Action(Of KeyValueStore))
  fullName.vb: Hybrid.Reflection.LockExtensions.Locking(Of Hybrid.Systems.KeyValueStore)(System.Action(Of Hybrid.Systems.KeyValueStore))
  name.vb: Locking(Of KeyValueStore)(Action(Of KeyValueStore))
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(System.Action{``0})
    name: Locking<KeyValueStore>
    nameWithType: LockExtensions.Locking<KeyValueStore>
    fullName: Hybrid.Reflection.LockExtensions.Locking<Hybrid.Systems.KeyValueStore>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Systems.KeyValueStore
    name: KeyValueStore
    nameWithType: KeyValueStore
    fullName: Hybrid.Systems.KeyValueStore
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(System.Action{``0})
    name: Locking(Of KeyValueStore)
    nameWithType: LockExtensions.Locking(Of KeyValueStore)
    fullName: Hybrid.Reflection.LockExtensions.Locking(Of Hybrid.Systems.KeyValueStore)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Systems.KeyValueStore
    name: KeyValueStore
    nameWithType: KeyValueStore
    fullName: Hybrid.Systems.KeyValueStore
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Reflection.LockExtensions.Locking``1(System.Func{{TResult}})
  commentId: M:Hybrid.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
  parent: Hybrid.Reflection.LockExtensions
  definition: Hybrid.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
  name: Locking<TResult>(Func<TResult>)
  nameWithType: LockExtensions.Locking<TResult>(Func<TResult>)
  fullName: Hybrid.Reflection.LockExtensions.Locking<TResult>(System.Func<TResult>)
  nameWithType.vb: LockExtensions.Locking(Of TResult)(Func(Of TResult))
  fullName.vb: Hybrid.Reflection.LockExtensions.Locking(Of TResult)(System.Func(Of TResult))
  name.vb: Locking(Of TResult)(Func(Of TResult))
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(System.Func{``0})
    name: Locking<TResult>
    nameWithType: LockExtensions.Locking<TResult>
    fullName: Hybrid.Reflection.LockExtensions.Locking<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(System.Func{``0})
    name: Locking(Of TResult)
    nameWithType: LockExtensions.Locking(Of TResult)
    fullName: Hybrid.Reflection.LockExtensions.Locking(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Systems.KeyValueStore.Hybrid.Reflection.LockExtensions.Locking``2(System.Func{Hybrid.Systems.KeyValueStore,{TResult}})
  commentId: M:Hybrid.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
  parent: Hybrid.Reflection.LockExtensions
  definition: Hybrid.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
  name: Locking<KeyValueStore, TResult>(Func<KeyValueStore, TResult>)
  nameWithType: LockExtensions.Locking<KeyValueStore, TResult>(Func<KeyValueStore, TResult>)
  fullName: Hybrid.Reflection.LockExtensions.Locking<Hybrid.Systems.KeyValueStore, TResult>(System.Func<Hybrid.Systems.KeyValueStore, TResult>)
  nameWithType.vb: LockExtensions.Locking(Of KeyValueStore, TResult)(Func(Of KeyValueStore, TResult))
  fullName.vb: Hybrid.Reflection.LockExtensions.Locking(Of Hybrid.Systems.KeyValueStore, TResult)(System.Func(Of Hybrid.Systems.KeyValueStore, TResult))
  name.vb: Locking(Of KeyValueStore, TResult)(Func(Of KeyValueStore, TResult))
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking``2(System.Func{``0,``1})
    name: Locking<KeyValueStore, TResult>
    nameWithType: LockExtensions.Locking<KeyValueStore, TResult>
    fullName: Hybrid.Reflection.LockExtensions.Locking<Hybrid.Systems.KeyValueStore, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Systems.KeyValueStore
    name: KeyValueStore
    nameWithType: KeyValueStore
    fullName: Hybrid.Systems.KeyValueStore
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking``2(System.Func{``0,``1})
    name: Locking(Of KeyValueStore, TResult)
    nameWithType: LockExtensions.Locking(Of KeyValueStore, TResult)
    fullName: Hybrid.Reflection.LockExtensions.Locking(Of Hybrid.Systems.KeyValueStore, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Systems.KeyValueStore
    name: KeyValueStore
    nameWithType: KeyValueStore
    fullName: Hybrid.Systems.KeyValueStore
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Systems.KeyValueStore.Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2
  commentId: M:Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2(``0)
  parent: Hybrid.Domain.Entities.EntityExtensions
  definition: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2(``0)
  name: CheckICreatedTime<KeyValueStore, TKey>()
  nameWithType: EntityExtensions.CheckICreatedTime<KeyValueStore, TKey>()
  fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime<Hybrid.Systems.KeyValueStore, TKey>()
  nameWithType.vb: EntityExtensions.CheckICreatedTime(Of KeyValueStore, TKey)()
  fullName.vb: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime(Of Hybrid.Systems.KeyValueStore, TKey)()
  name.vb: CheckICreatedTime(Of KeyValueStore, TKey)()
  spec.csharp:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2
    name: CheckICreatedTime<KeyValueStore, TKey>
    nameWithType: EntityExtensions.CheckICreatedTime<KeyValueStore, TKey>
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime<Hybrid.Systems.KeyValueStore, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2
    name: CheckICreatedTime(Of KeyValueStore, TKey)
    nameWithType: EntityExtensions.CheckICreatedTime(Of KeyValueStore, TKey)
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime(Of Hybrid.Systems.KeyValueStore, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Systems.KeyValueStore.Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(System.Security.Principal.IPrincipal)
  commentId: M:Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
  parent: Hybrid.Domain.Entities.EntityExtensions
  definition: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
  name: CheckICreationAudited<KeyValueStore, TKey, TUserKey>(IPrincipal)
  nameWithType: EntityExtensions.CheckICreationAudited<KeyValueStore, TKey, TUserKey>(IPrincipal)
  fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited<Hybrid.Systems.KeyValueStore, TKey, TUserKey>(System.Security.Principal.IPrincipal)
  nameWithType.vb: EntityExtensions.CheckICreationAudited(Of KeyValueStore, TKey, TUserKey)(IPrincipal)
  fullName.vb: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited(Of Hybrid.Systems.KeyValueStore, TKey, TUserKey)(System.Security.Principal.IPrincipal)
  name.vb: CheckICreationAudited(Of KeyValueStore, TKey, TUserKey)(IPrincipal)
  spec.csharp:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(System.Security.Principal.IPrincipal)
    name: CheckICreationAudited<KeyValueStore, TKey, TUserKey>
    nameWithType: EntityExtensions.CheckICreationAudited<KeyValueStore, TKey, TUserKey>
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited<Hybrid.Systems.KeyValueStore, TKey, TUserKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(System.Security.Principal.IPrincipal)
    name: CheckICreationAudited(Of KeyValueStore, TKey, TUserKey)
    nameWithType: EntityExtensions.CheckICreationAudited(Of KeyValueStore, TKey, TUserKey)
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited(Of Hybrid.Systems.KeyValueStore, TKey, TUserKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Systems.KeyValueStore.Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(System.Security.Principal.IPrincipal)
  commentId: M:Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
  parent: Hybrid.Domain.Entities.EntityExtensions
  definition: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
  name: CheckIUpdateAudited<KeyValueStore, TKey, TUserKey>(IPrincipal)
  nameWithType: EntityExtensions.CheckIUpdateAudited<KeyValueStore, TKey, TUserKey>(IPrincipal)
  fullName: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited<Hybrid.Systems.KeyValueStore, TKey, TUserKey>(System.Security.Principal.IPrincipal)
  nameWithType.vb: EntityExtensions.CheckIUpdateAudited(Of KeyValueStore, TKey, TUserKey)(IPrincipal)
  fullName.vb: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited(Of Hybrid.Systems.KeyValueStore, TKey, TUserKey)(System.Security.Principal.IPrincipal)
  name.vb: CheckIUpdateAudited(Of KeyValueStore, TKey, TUserKey)(IPrincipal)
  spec.csharp:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(System.Security.Principal.IPrincipal)
    name: CheckIUpdateAudited<KeyValueStore, TKey, TUserKey>
    nameWithType: EntityExtensions.CheckIUpdateAudited<KeyValueStore, TKey, TUserKey>
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited<Hybrid.Systems.KeyValueStore, TKey, TUserKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(System.Security.Principal.IPrincipal)
    name: CheckIUpdateAudited(Of KeyValueStore, TKey, TUserKey)
    nameWithType: EntityExtensions.CheckIUpdateAudited(Of KeyValueStore, TKey, TUserKey)
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited(Of Hybrid.Systems.KeyValueStore, TKey, TUserKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Hybrid.Core.Systems
  commentId: N:Hybrid.Core.Systems
  name: Hybrid.Core.Systems
  nameWithType: Hybrid.Core.Systems
  fullName: Hybrid.Core.Systems
- uid: Hybrid.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
  commentId: M:Hybrid.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
  isExternal: true
  name: CastTo(Object, Type)
  nameWithType: ObjectExtensions.CastTo(Object, Type)
  fullName: Hybrid.Extensions.ObjectExtensions.CastTo(System.Object, System.Type)
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
    name: CastTo
    nameWithType: ObjectExtensions.CastTo
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
    name: CastTo
    nameWithType: ObjectExtensions.CastTo
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ObjectExtensions
  commentId: T:Hybrid.Extensions.ObjectExtensions
  parent: Hybrid.Extensions
  name: ObjectExtensions
  nameWithType: ObjectExtensions
  fullName: Hybrid.Extensions.ObjectExtensions
- uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object)
  commentId: M:Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object)
  isExternal: true
  name: CastTo<T>(Object)
  nameWithType: ObjectExtensions.CastTo<T>(Object)
  fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>(System.Object)
  nameWithType.vb: ObjectExtensions.CastTo(Of T)(Object)
  fullName.vb: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)(System.Object)
  name.vb: CastTo(Of T)(Object)
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object)
    name: CastTo<T>
    nameWithType: ObjectExtensions.CastTo<T>
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object)
    name: CastTo(Of T)
    nameWithType: ObjectExtensions.CastTo(Of T)
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
  commentId: M:Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
  isExternal: true
  name: CastTo<T>(Object, T)
  nameWithType: ObjectExtensions.CastTo<T>(Object, T)
  fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>(System.Object, T)
  nameWithType.vb: ObjectExtensions.CastTo(Of T)(Object, T)
  fullName.vb: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)(System.Object, T)
  name.vb: CastTo(Of T)(Object, T)
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
    name: CastTo<T>
    nameWithType: ObjectExtensions.CastTo<T>
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
    name: CastTo(Of T)
    nameWithType: ObjectExtensions.CastTo(Of T)
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
  commentId: M:Hybrid.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
  name: IsIn<T>(T, T[])
  nameWithType: ObjectExtensions.IsIn<T>(T, T[])
  fullName: Hybrid.Extensions.ObjectExtensions.IsIn<T>(T, T[])
  nameWithType.vb: ObjectExtensions.IsIn(Of T)(T, T())
  fullName.vb: Hybrid.Extensions.ObjectExtensions.IsIn(Of T)(T, T())
  name.vb: IsIn(Of T)(T, T())
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
    name: IsIn<T>
    nameWithType: ObjectExtensions.IsIn<T>
    fullName: Hybrid.Extensions.ObjectExtensions.IsIn<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
    name: IsIn(Of T)
    nameWithType: ObjectExtensions.IsIn(Of T)
    fullName: Hybrid.Extensions.ObjectExtensions.IsIn(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ObjectExtensions.ToDynamic(System.Object)
  commentId: M:Hybrid.Extensions.ObjectExtensions.ToDynamic(System.Object)
  isExternal: true
  name: ToDynamic(Object)
  nameWithType: ObjectExtensions.ToDynamic(Object)
  fullName: Hybrid.Extensions.ObjectExtensions.ToDynamic(System.Object)
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.ToDynamic(System.Object)
    name: ToDynamic
    nameWithType: ObjectExtensions.ToDynamic
    fullName: Hybrid.Extensions.ObjectExtensions.ToDynamic
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.ToDynamic(System.Object)
    name: ToDynamic
    nameWithType: ObjectExtensions.ToDynamic
    fullName: Hybrid.Extensions.ObjectExtensions.ToDynamic
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ObjectExtensions.DeepClone``1(``0)
  commentId: M:Hybrid.Extensions.ObjectExtensions.DeepClone``1(``0)
  name: DeepClone<T>(T)
  nameWithType: ObjectExtensions.DeepClone<T>(T)
  fullName: Hybrid.Extensions.ObjectExtensions.DeepClone<T>(T)
  nameWithType.vb: ObjectExtensions.DeepClone(Of T)(T)
  fullName.vb: Hybrid.Extensions.ObjectExtensions.DeepClone(Of T)(T)
  name.vb: DeepClone(Of T)(T)
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.DeepClone``1(``0)
    name: DeepClone<T>
    nameWithType: ObjectExtensions.DeepClone<T>
    fullName: Hybrid.Extensions.ObjectExtensions.DeepClone<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.DeepClone``1(``0)
    name: DeepClone(Of T)
    nameWithType: ObjectExtensions.DeepClone(Of T)
    fullName: Hybrid.Extensions.ObjectExtensions.DeepClone(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
  commentId: M:Hybrid.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
  isExternal: true
  name: Required<T>(T, Func<T, Boolean>, String)
  nameWithType: ParameterCheckExtensions.Required<T>(T, Func<T, Boolean>, String)
  fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<T>(T, System.Func<T, System.Boolean>, System.String)
  nameWithType.vb: ParameterCheckExtensions.Required(Of T)(T, Func(Of T, Boolean), String)
  fullName.vb: Hybrid.Extensions.ParameterCheckExtensions.Required(Of T)(T, System.Func(Of T, System.Boolean), System.String)
  name.vb: Required(Of T)(T, Func(Of T, Boolean), String)
  spec.csharp:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
    name: Required<T>
    nameWithType: ParameterCheckExtensions.Required<T>
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
    name: Required(Of T)
    nameWithType: ParameterCheckExtensions.Required(Of T)
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ParameterCheckExtensions
  commentId: T:Hybrid.Extensions.ParameterCheckExtensions
  parent: Hybrid.Extensions
  name: ParameterCheckExtensions
  nameWithType: ParameterCheckExtensions
  fullName: Hybrid.Extensions.ParameterCheckExtensions
- uid: Hybrid.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
  commentId: M:Hybrid.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
  isExternal: true
  name: Required<T, TException>(T, Func<T, Boolean>, String)
  nameWithType: ParameterCheckExtensions.Required<T, TException>(T, Func<T, Boolean>, String)
  fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<T, TException>(T, System.Func<T, System.Boolean>, System.String)
  nameWithType.vb: ParameterCheckExtensions.Required(Of T, TException)(T, Func(Of T, Boolean), String)
  fullName.vb: Hybrid.Extensions.ParameterCheckExtensions.Required(Of T, TException)(T, System.Func(Of T, System.Boolean), System.String)
  name.vb: Required(Of T, TException)(T, Func(Of T, Boolean), String)
  spec.csharp:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
    name: Required<T, TException>
    nameWithType: ParameterCheckExtensions.Required<T, TException>
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<T, TException>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
    name: Required(Of T, TException)
    nameWithType: ParameterCheckExtensions.Required(Of T, TException)
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required(Of T, TException)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
  commentId: M:Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
  isExternal: true
  name: CheckNotNull<T>(T, String)
  nameWithType: ParameterCheckExtensions.CheckNotNull<T>(T, String)
  fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull<T>(T, System.String)
  nameWithType.vb: ParameterCheckExtensions.CheckNotNull(Of T)(T, String)
  fullName.vb: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull(Of T)(T, System.String)
  name.vb: CheckNotNull(Of T)(T, String)
  spec.csharp:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
    name: CheckNotNull<T>
    nameWithType: ParameterCheckExtensions.CheckNotNull<T>
    fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
    name: CheckNotNull(Of T)
    nameWithType: ParameterCheckExtensions.CheckNotNull(Of T)
    fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
  isExternal: true
  name: TryCatch<T>(T, Action<T>, Action<Exception>, Action<T>)
  nameWithType: TryCatchExtensions.TryCatch<T>(T, Action<T>, Action<Exception>, Action<T>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T>(T, System.Action<T>, System.Action<System.Exception>, System.Action<T>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of T)(T, Action(Of T), Action(Of Exception), Action(Of T))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T)(T, System.Action(Of T), System.Action(Of System.Exception), System.Action(Of T))
  name.vb: TryCatch(Of T)(T, Action(Of T), Action(Of Exception), Action(Of T))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
    name: TryCatch<T>
    nameWithType: TryCatchExtensions.TryCatch<T>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
    name: TryCatch(Of T)
    nameWithType: TryCatchExtensions.TryCatch(Of T)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.TryCatchExtensions
  commentId: T:Hybrid.Extensions.TryCatchExtensions
  parent: Hybrid.Extensions
  name: TryCatchExtensions
  nameWithType: TryCatchExtensions
  fullName: Hybrid.Extensions.TryCatchExtensions
- uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
  isExternal: true
  name: TryCatch<T>(T, Action<T>, Action<Exception>)
  nameWithType: TryCatchExtensions.TryCatch<T>(T, Action<T>, Action<Exception>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T>(T, System.Action<T>, System.Action<System.Exception>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of T)(T, Action(Of T), Action(Of Exception))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T)(T, System.Action(Of T), System.Action(Of System.Exception))
  name.vb: TryCatch(Of T)(T, Action(Of T), Action(Of Exception))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
    name: TryCatch<T>
    nameWithType: TryCatchExtensions.TryCatch<T>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
    name: TryCatch(Of T)
    nameWithType: TryCatchExtensions.TryCatch(Of T)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
  isExternal: true
  name: TryCatch<T, TResult>(T, Func<T, TResult>, Action<Exception>, Action<T>)
  nameWithType: TryCatchExtensions.TryCatch<T, TResult>(T, Func<T, TResult>, Action<Exception>, Action<T>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T, TResult>(T, System.Func<T, TResult>, System.Action<System.Exception>, System.Action<T>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of T, TResult)(T, Func(Of T, TResult), Action(Of Exception), Action(Of T))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T, TResult)(T, System.Func(Of T, TResult), System.Action(Of System.Exception), System.Action(Of T))
  name.vb: TryCatch(Of T, TResult)(T, Func(Of T, TResult), Action(Of Exception), Action(Of T))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
    name: TryCatch<T, TResult>
    nameWithType: TryCatchExtensions.TryCatch<T, TResult>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
    name: TryCatch(Of T, TResult)
    nameWithType: TryCatchExtensions.TryCatch(Of T, TResult)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
  isExternal: true
  name: TryCatch<T, TResult>(T, Func<T, TResult>, Action<Exception>)
  nameWithType: TryCatchExtensions.TryCatch<T, TResult>(T, Func<T, TResult>, Action<Exception>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T, TResult>(T, System.Func<T, TResult>, System.Action<System.Exception>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of T, TResult)(T, Func(Of T, TResult), Action(Of Exception))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T, TResult)(T, System.Func(Of T, TResult), System.Action(Of System.Exception))
  name.vb: TryCatch(Of T, TResult)(T, Func(Of T, TResult), Action(Of Exception))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
    name: TryCatch<T, TResult>
    nameWithType: TryCatchExtensions.TryCatch<T, TResult>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
    name: TryCatch(Of T, TResult)
    nameWithType: TryCatchExtensions.TryCatch(Of T, TResult)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
  isExternal: true
  name: TryFinally<T>(T, Action<T>, Action<T>)
  nameWithType: TryCatchExtensions.TryFinally<T>(T, Action<T>, Action<T>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryFinally<T>(T, System.Action<T>, System.Action<T>)
  nameWithType.vb: TryCatchExtensions.TryFinally(Of T)(T, Action(Of T), Action(Of T))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryFinally(Of T)(T, System.Action(Of T), System.Action(Of T))
  name.vb: TryFinally(Of T)(T, Action(Of T), Action(Of T))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
    name: TryFinally<T>
    nameWithType: TryCatchExtensions.TryFinally<T>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryFinally<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
    name: TryFinally(Of T)
    nameWithType: TryCatchExtensions.TryFinally(Of T)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryFinally(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
  commentId: M:Hybrid.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
  isExternal: true
  name: ToJsonString(Object, Boolean, Boolean)
  nameWithType: JsonExtensions.ToJsonString(Object, Boolean, Boolean)
  fullName: Hybrid.Json.JsonExtensions.ToJsonString(System.Object, System.Boolean, System.Boolean)
  spec.csharp:
  - uid: Hybrid.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
    name: ToJsonString
    nameWithType: JsonExtensions.ToJsonString
    fullName: Hybrid.Json.JsonExtensions.ToJsonString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
    name: ToJsonString
    nameWithType: JsonExtensions.ToJsonString
    fullName: Hybrid.Json.JsonExtensions.ToJsonString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Json.JsonExtensions
  commentId: T:Hybrid.Json.JsonExtensions
  parent: Hybrid.Json
  name: JsonExtensions
  nameWithType: JsonExtensions
  fullName: Hybrid.Json.JsonExtensions
- uid: Hybrid.Mapping.MapperExtensions.MapTo``1(System.Object)
  commentId: M:Hybrid.Mapping.MapperExtensions.MapTo``1(System.Object)
  isExternal: true
  name: MapTo<TTarget>(Object)
  nameWithType: MapperExtensions.MapTo<TTarget>(Object)
  fullName: Hybrid.Mapping.MapperExtensions.MapTo<TTarget>(System.Object)
  nameWithType.vb: MapperExtensions.MapTo(Of TTarget)(Object)
  fullName.vb: Hybrid.Mapping.MapperExtensions.MapTo(Of TTarget)(System.Object)
  name.vb: MapTo(Of TTarget)(Object)
  spec.csharp:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``1(System.Object)
    name: MapTo<TTarget>
    nameWithType: MapperExtensions.MapTo<TTarget>
    fullName: Hybrid.Mapping.MapperExtensions.MapTo<TTarget>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``1(System.Object)
    name: MapTo(Of TTarget)
    nameWithType: MapperExtensions.MapTo(Of TTarget)
    fullName: Hybrid.Mapping.MapperExtensions.MapTo(Of TTarget)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Mapping.MapperExtensions
  commentId: T:Hybrid.Mapping.MapperExtensions
  parent: Hybrid.Mapping
  name: MapperExtensions
  nameWithType: MapperExtensions
  fullName: Hybrid.Mapping.MapperExtensions
- uid: Hybrid.Mapping.MapperExtensions.MapTo``2(``0,``1)
  commentId: M:Hybrid.Mapping.MapperExtensions.MapTo``2(``0,``1)
  name: MapTo<TSource, TTarget>(TSource, TTarget)
  nameWithType: MapperExtensions.MapTo<TSource, TTarget>(TSource, TTarget)
  fullName: Hybrid.Mapping.MapperExtensions.MapTo<TSource, TTarget>(TSource, TTarget)
  nameWithType.vb: MapperExtensions.MapTo(Of TSource, TTarget)(TSource, TTarget)
  fullName.vb: Hybrid.Mapping.MapperExtensions.MapTo(Of TSource, TTarget)(TSource, TTarget)
  name.vb: MapTo(Of TSource, TTarget)(TSource, TTarget)
  spec.csharp:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``2(``0,``1)
    name: MapTo<TSource, TTarget>
    nameWithType: MapperExtensions.MapTo<TSource, TTarget>
    fullName: Hybrid.Mapping.MapperExtensions.MapTo<TSource, TTarget>
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``2(``0,``1)
    name: MapTo(Of TSource, TTarget)
    nameWithType: MapperExtensions.MapTo(Of TSource, TTarget)
    fullName: Hybrid.Mapping.MapperExtensions.MapTo(Of TSource, TTarget)
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Reflection.LockExtensions.Locking(System.Object,System.Action)
  commentId: M:Hybrid.Reflection.LockExtensions.Locking(System.Object,System.Action)
  isExternal: true
  name: Locking(Object, Action)
  nameWithType: LockExtensions.Locking(Object, Action)
  fullName: Hybrid.Reflection.LockExtensions.Locking(System.Object, System.Action)
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking(System.Object,System.Action)
    name: Locking
    nameWithType: LockExtensions.Locking
    fullName: Hybrid.Reflection.LockExtensions.Locking
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking(System.Object,System.Action)
    name: Locking
    nameWithType: LockExtensions.Locking
    fullName: Hybrid.Reflection.LockExtensions.Locking
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Reflection.LockExtensions
  commentId: T:Hybrid.Reflection.LockExtensions
  parent: Hybrid.Reflection
  name: LockExtensions
  nameWithType: LockExtensions
  fullName: Hybrid.Reflection.LockExtensions
- uid: Hybrid.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
  commentId: M:Hybrid.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
  isExternal: true
  name: Locking<T>(T, Action<T>)
  nameWithType: LockExtensions.Locking<T>(T, Action<T>)
  fullName: Hybrid.Reflection.LockExtensions.Locking<T>(T, System.Action<T>)
  nameWithType.vb: LockExtensions.Locking(Of T)(T, Action(Of T))
  fullName.vb: Hybrid.Reflection.LockExtensions.Locking(Of T)(T, System.Action(Of T))
  name.vb: Locking(Of T)(T, Action(Of T))
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
    name: Locking<T>
    nameWithType: LockExtensions.Locking<T>
    fullName: Hybrid.Reflection.LockExtensions.Locking<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
    name: Locking(Of T)
    nameWithType: LockExtensions.Locking(Of T)
    fullName: Hybrid.Reflection.LockExtensions.Locking(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
  commentId: M:Hybrid.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
  isExternal: true
  name: Locking<TResult>(Object, Func<TResult>)
  nameWithType: LockExtensions.Locking<TResult>(Object, Func<TResult>)
  fullName: Hybrid.Reflection.LockExtensions.Locking<TResult>(System.Object, System.Func<TResult>)
  nameWithType.vb: LockExtensions.Locking(Of TResult)(Object, Func(Of TResult))
  fullName.vb: Hybrid.Reflection.LockExtensions.Locking(Of TResult)(System.Object, System.Func(Of TResult))
  name.vb: Locking(Of TResult)(Object, Func(Of TResult))
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
    name: Locking<TResult>
    nameWithType: LockExtensions.Locking<TResult>
    fullName: Hybrid.Reflection.LockExtensions.Locking<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
    name: Locking(Of TResult)
    nameWithType: LockExtensions.Locking(Of TResult)
    fullName: Hybrid.Reflection.LockExtensions.Locking(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
  commentId: M:Hybrid.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
  isExternal: true
  name: Locking<TSource, TResult>(TSource, Func<TSource, TResult>)
  nameWithType: LockExtensions.Locking<TSource, TResult>(TSource, Func<TSource, TResult>)
  fullName: Hybrid.Reflection.LockExtensions.Locking<TSource, TResult>(TSource, System.Func<TSource, TResult>)
  nameWithType.vb: LockExtensions.Locking(Of TSource, TResult)(TSource, Func(Of TSource, TResult))
  fullName.vb: Hybrid.Reflection.LockExtensions.Locking(Of TSource, TResult)(TSource, System.Func(Of TSource, TResult))
  name.vb: Locking(Of TSource, TResult)(TSource, Func(Of TSource, TResult))
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
    name: Locking<TSource, TResult>
    nameWithType: LockExtensions.Locking<TSource, TResult>
    fullName: Hybrid.Reflection.LockExtensions.Locking<TSource, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
    name: Locking(Of TSource, TResult)
    nameWithType: LockExtensions.Locking(Of TSource, TResult)
    fullName: Hybrid.Reflection.LockExtensions.Locking(Of TSource, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2(``0)
  commentId: M:Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2(``0)
  name: CheckICreatedTime<TEntity, TKey>(TEntity)
  nameWithType: EntityExtensions.CheckICreatedTime<TEntity, TKey>(TEntity)
  fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime<TEntity, TKey>(TEntity)
  nameWithType.vb: EntityExtensions.CheckICreatedTime(Of TEntity, TKey)(TEntity)
  fullName.vb: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime(Of TEntity, TKey)(TEntity)
  name.vb: CheckICreatedTime(Of TEntity, TKey)(TEntity)
  spec.csharp:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2(``0)
    name: CheckICreatedTime<TEntity, TKey>
    nameWithType: EntityExtensions.CheckICreatedTime<TEntity, TKey>
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime<TEntity, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2(``0)
    name: CheckICreatedTime(Of TEntity, TKey)
    nameWithType: EntityExtensions.CheckICreatedTime(Of TEntity, TKey)
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime(Of TEntity, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Domain.Entities.EntityExtensions
  commentId: T:Hybrid.Domain.Entities.EntityExtensions
  parent: Hybrid.Domain.Entities
  name: EntityExtensions
  nameWithType: EntityExtensions
  fullName: Hybrid.Domain.Entities.EntityExtensions
- uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
  commentId: M:Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
  isExternal: true
  name: CheckICreationAudited<TEntity, TKey, TUserKey>(TEntity, IPrincipal)
  nameWithType: EntityExtensions.CheckICreationAudited<TEntity, TKey, TUserKey>(TEntity, IPrincipal)
  fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited<TEntity, TKey, TUserKey>(TEntity, System.Security.Principal.IPrincipal)
  nameWithType.vb: EntityExtensions.CheckICreationAudited(Of TEntity, TKey, TUserKey)(TEntity, IPrincipal)
  fullName.vb: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited(Of TEntity, TKey, TUserKey)(TEntity, System.Security.Principal.IPrincipal)
  name.vb: CheckICreationAudited(Of TEntity, TKey, TUserKey)(TEntity, IPrincipal)
  spec.csharp:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
    name: CheckICreationAudited<TEntity, TKey, TUserKey>
    nameWithType: EntityExtensions.CheckICreationAudited<TEntity, TKey, TUserKey>
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited<TEntity, TKey, TUserKey>
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
    name: CheckICreationAudited(Of TEntity, TKey, TUserKey)
    nameWithType: EntityExtensions.CheckICreationAudited(Of TEntity, TKey, TUserKey)
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited(Of TEntity, TKey, TUserKey)
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
  commentId: M:Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
  isExternal: true
  name: CheckIUpdateAudited<TEntity, TKey, TUserKey>(TEntity, IPrincipal)
  nameWithType: EntityExtensions.CheckIUpdateAudited<TEntity, TKey, TUserKey>(TEntity, IPrincipal)
  fullName: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited<TEntity, TKey, TUserKey>(TEntity, System.Security.Principal.IPrincipal)
  nameWithType.vb: EntityExtensions.CheckIUpdateAudited(Of TEntity, TKey, TUserKey)(TEntity, IPrincipal)
  fullName.vb: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited(Of TEntity, TKey, TUserKey)(TEntity, System.Security.Principal.IPrincipal)
  name.vb: CheckIUpdateAudited(Of TEntity, TKey, TUserKey)(TEntity, IPrincipal)
  spec.csharp:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
    name: CheckIUpdateAudited<TEntity, TKey, TUserKey>
    nameWithType: EntityExtensions.CheckIUpdateAudited<TEntity, TKey, TUserKey>
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited<TEntity, TKey, TUserKey>
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
    name: CheckIUpdateAudited(Of TEntity, TKey, TUserKey)
    nameWithType: EntityExtensions.CheckIUpdateAudited(Of TEntity, TKey, TUserKey)
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited(Of TEntity, TKey, TUserKey)
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions
  commentId: N:Hybrid.Extensions
  name: Hybrid.Extensions
  nameWithType: Hybrid.Extensions
  fullName: Hybrid.Extensions
- uid: Hybrid.Json
  commentId: N:Hybrid.Json
  name: Hybrid.Json
  nameWithType: Hybrid.Json
  fullName: Hybrid.Json
- uid: Hybrid.Mapping
  commentId: N:Hybrid.Mapping
  name: Hybrid.Mapping
  nameWithType: Hybrid.Mapping
  fullName: Hybrid.Mapping
- uid: Hybrid.Reflection
  commentId: N:Hybrid.Reflection
  name: Hybrid.Reflection
  nameWithType: Hybrid.Reflection
  fullName: Hybrid.Reflection
- uid: Hybrid.Domain.Entities
  commentId: N:Hybrid.Domain.Entities
  name: Hybrid.Domain.Entities
  nameWithType: Hybrid.Domain.Entities
  fullName: Hybrid.Domain.Entities
- uid: Hybrid.Systems.KeyValueStore
  commentId: T:Hybrid.Systems.KeyValueStore
  name: KeyValueStore
  nameWithType: KeyValueStore
  fullName: Hybrid.Systems.KeyValueStore
- uid: Hybrid.Systems.KeyValueStore.#ctor*
  commentId: Overload:Hybrid.Systems.KeyValueStore.#ctor
  name: KeyValueStore
  nameWithType: KeyValueStore.KeyValueStore
  fullName: Hybrid.Systems.KeyValueStore.KeyValueStore
- uid: Hybrid.Domain.Repositories.IRepository{Hybrid.Core.Systems.KeyValue,System.Guid}
  commentId: T:Hybrid.Domain.Repositories.IRepository{Hybrid.Core.Systems.KeyValue,System.Guid}
  parent: Hybrid.Domain.Repositories
  definition: Hybrid.Domain.Repositories.IRepository`2
  name: IRepository<KeyValue, Guid>
  nameWithType: IRepository<KeyValue, Guid>
  fullName: Hybrid.Domain.Repositories.IRepository<Hybrid.Core.Systems.KeyValue, System.Guid>
  nameWithType.vb: IRepository(Of KeyValue, Guid)
  fullName.vb: Hybrid.Domain.Repositories.IRepository(Of Hybrid.Core.Systems.KeyValue, System.Guid)
  name.vb: IRepository(Of KeyValue, Guid)
  spec.csharp:
  - uid: Hybrid.Domain.Repositories.IRepository`2
    name: IRepository
    nameWithType: IRepository
    fullName: Hybrid.Domain.Repositories.IRepository
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Core.Systems.KeyValue
    name: KeyValue
    nameWithType: KeyValue
    fullName: Hybrid.Core.Systems.KeyValue
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Hybrid.Domain.Repositories.IRepository`2
    name: IRepository
    nameWithType: IRepository
    fullName: Hybrid.Domain.Repositories.IRepository
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Core.Systems.KeyValue
    name: KeyValue
    nameWithType: KeyValue
    fullName: Hybrid.Core.Systems.KeyValue
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Extensions.Caching.Distributed.IDistributedCache
  commentId: T:Microsoft.Extensions.Caching.Distributed.IDistributedCache
  parent: Microsoft.Extensions.Caching.Distributed
  isExternal: true
  name: IDistributedCache
  nameWithType: IDistributedCache
  fullName: Microsoft.Extensions.Caching.Distributed.IDistributedCache
- uid: Hybrid.Domain.Repositories.IRepository`2
  commentId: T:Hybrid.Domain.Repositories.IRepository`2
  name: IRepository<TEntity, TKey>
  nameWithType: IRepository<TEntity, TKey>
  fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>
  nameWithType.vb: IRepository(Of TEntity, TKey)
  fullName.vb: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey)
  name.vb: IRepository(Of TEntity, TKey)
  spec.csharp:
  - uid: Hybrid.Domain.Repositories.IRepository`2
    name: IRepository
    nameWithType: IRepository
    fullName: Hybrid.Domain.Repositories.IRepository
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Hybrid.Domain.Repositories.IRepository`2
    name: IRepository
    nameWithType: IRepository
    fullName: Hybrid.Domain.Repositories.IRepository
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Domain.Repositories
  commentId: N:Hybrid.Domain.Repositories
  name: Hybrid.Domain.Repositories
  nameWithType: Hybrid.Domain.Repositories
  fullName: Hybrid.Domain.Repositories
- uid: Microsoft.Extensions.Caching.Distributed
  commentId: N:Microsoft.Extensions.Caching.Distributed
  isExternal: true
  name: Microsoft.Extensions.Caching.Distributed
  nameWithType: Microsoft.Extensions.Caching.Distributed
  fullName: Microsoft.Extensions.Caching.Distributed
- uid: Hybrid.Systems.KeyValueStore.KeyValues*
  commentId: Overload:Hybrid.Systems.KeyValueStore.KeyValues
  name: KeyValues
  nameWithType: KeyValueStore.KeyValues
  fullName: Hybrid.Systems.KeyValueStore.KeyValues
- uid: Hybrid.Core.Systems.IKeyValueStore.KeyValues
  commentId: P:Hybrid.Core.Systems.IKeyValueStore.KeyValues
  parent: Hybrid.Core.Systems.IKeyValueStore
  name: KeyValues
  nameWithType: IKeyValueStore.KeyValues
  fullName: Hybrid.Core.Systems.IKeyValueStore.KeyValues
- uid: System.Linq.IQueryable{Hybrid.Core.Systems.KeyValue}
  commentId: T:System.Linq.IQueryable{Hybrid.Core.Systems.KeyValue}
  parent: System.Linq
  definition: System.Linq.IQueryable`1
  name: IQueryable<KeyValue>
  nameWithType: IQueryable<KeyValue>
  fullName: System.Linq.IQueryable<Hybrid.Core.Systems.KeyValue>
  nameWithType.vb: IQueryable(Of KeyValue)
  fullName.vb: System.Linq.IQueryable(Of Hybrid.Core.Systems.KeyValue)
  name.vb: IQueryable(Of KeyValue)
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Core.Systems.KeyValue
    name: KeyValue
    nameWithType: KeyValue
    fullName: Hybrid.Core.Systems.KeyValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Core.Systems.KeyValue
    name: KeyValue
    nameWithType: KeyValue
    fullName: Hybrid.Core.Systems.KeyValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.IQueryable`1
  commentId: T:System.Linq.IQueryable`1
  isExternal: true
  name: IQueryable<T>
  nameWithType: IQueryable<T>
  fullName: System.Linq.IQueryable<T>
  nameWithType.vb: IQueryable(Of T)
  fullName.vb: System.Linq.IQueryable(Of T)
  name.vb: IQueryable(Of T)
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq
  commentId: N:System.Linq
  isExternal: true
  name: System.Linq
  nameWithType: System.Linq
  fullName: System.Linq
- uid: Hybrid.Systems.KeyValueStore.GetSetting*
  commentId: Overload:Hybrid.Systems.KeyValueStore.GetSetting
  name: GetSetting
  nameWithType: KeyValueStore.GetSetting
  fullName: Hybrid.Systems.KeyValueStore.GetSetting
- uid: Hybrid.Core.Systems.IKeyValueStore.GetSetting``1
  commentId: M:Hybrid.Core.Systems.IKeyValueStore.GetSetting``1
  parent: Hybrid.Core.Systems.IKeyValueStore
  name: GetSetting<TSetting>()
  nameWithType: IKeyValueStore.GetSetting<TSetting>()
  fullName: Hybrid.Core.Systems.IKeyValueStore.GetSetting<TSetting>()
  nameWithType.vb: IKeyValueStore.GetSetting(Of TSetting)()
  fullName.vb: Hybrid.Core.Systems.IKeyValueStore.GetSetting(Of TSetting)()
  name.vb: GetSetting(Of TSetting)()
  spec.csharp:
  - uid: Hybrid.Core.Systems.IKeyValueStore.GetSetting``1
    name: GetSetting<TSetting>
    nameWithType: IKeyValueStore.GetSetting<TSetting>
    fullName: Hybrid.Core.Systems.IKeyValueStore.GetSetting<TSetting>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Core.Systems.IKeyValueStore.GetSetting``1
    name: GetSetting(Of TSetting)
    nameWithType: IKeyValueStore.GetSetting(Of TSetting)
    fullName: Hybrid.Core.Systems.IKeyValueStore.GetSetting(Of TSetting)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TSetting}'
  commentId: '!:TSetting'
  definition: TSetting
  name: TSetting
  nameWithType: TSetting
  fullName: TSetting
- uid: TSetting
  name: TSetting
  nameWithType: TSetting
  fullName: TSetting
- uid: Hybrid.Systems.KeyValueStore.SaveSetting*
  commentId: Overload:Hybrid.Systems.KeyValueStore.SaveSetting
  name: SaveSetting
  nameWithType: KeyValueStore.SaveSetting
  fullName: Hybrid.Systems.KeyValueStore.SaveSetting
- uid: Hybrid.Core.Systems.IKeyValueStore.SaveSetting(Hybrid.Core.Systems.ISetting)
  commentId: M:Hybrid.Core.Systems.IKeyValueStore.SaveSetting(Hybrid.Core.Systems.ISetting)
  parent: Hybrid.Core.Systems.IKeyValueStore
  name: SaveSetting(ISetting)
  nameWithType: IKeyValueStore.SaveSetting(ISetting)
  fullName: Hybrid.Core.Systems.IKeyValueStore.SaveSetting(Hybrid.Core.Systems.ISetting)
  spec.csharp:
  - uid: Hybrid.Core.Systems.IKeyValueStore.SaveSetting(Hybrid.Core.Systems.ISetting)
    name: SaveSetting
    nameWithType: IKeyValueStore.SaveSetting
    fullName: Hybrid.Core.Systems.IKeyValueStore.SaveSetting
  - name: (
    nameWithType: (
    fullName: (
  - uid: Hybrid.Core.Systems.ISetting
    name: ISetting
    nameWithType: ISetting
    fullName: Hybrid.Core.Systems.ISetting
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Core.Systems.IKeyValueStore.SaveSetting(Hybrid.Core.Systems.ISetting)
    name: SaveSetting
    nameWithType: IKeyValueStore.SaveSetting
    fullName: Hybrid.Core.Systems.IKeyValueStore.SaveSetting
  - name: (
    nameWithType: (
    fullName: (
  - uid: Hybrid.Core.Systems.ISetting
    name: ISetting
    nameWithType: ISetting
    fullName: Hybrid.Core.Systems.ISetting
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Core.Systems.ISetting
  commentId: T:Hybrid.Core.Systems.ISetting
  parent: Hybrid.Core.Systems
  name: ISetting
  nameWithType: ISetting
  fullName: Hybrid.Core.Systems.ISetting
- uid: System.Threading.Tasks.Task{Hybrid.Data.OperationResult}
  commentId: T:System.Threading.Tasks.Task{Hybrid.Data.OperationResult}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<OperationResult>
  nameWithType: Task<OperationResult>
  fullName: System.Threading.Tasks.Task<Hybrid.Data.OperationResult>
  nameWithType.vb: Task(Of OperationResult)
  fullName.vb: System.Threading.Tasks.Task(Of Hybrid.Data.OperationResult)
  name.vb: Task(Of OperationResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Data.OperationResult
    name: OperationResult
    nameWithType: OperationResult
    fullName: Hybrid.Data.OperationResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Data.OperationResult
    name: OperationResult
    nameWithType: OperationResult
    fullName: Hybrid.Data.OperationResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Hybrid.Systems.KeyValueStore.GetKeyValue*
  commentId: Overload:Hybrid.Systems.KeyValueStore.GetKeyValue
  name: GetKeyValue
  nameWithType: KeyValueStore.GetKeyValue
  fullName: Hybrid.Systems.KeyValueStore.GetKeyValue
- uid: Hybrid.Core.Systems.IKeyValueStore.GetKeyValue(System.String)
  commentId: M:Hybrid.Core.Systems.IKeyValueStore.GetKeyValue(System.String)
  parent: Hybrid.Core.Systems.IKeyValueStore
  isExternal: true
  name: GetKeyValue(String)
  nameWithType: IKeyValueStore.GetKeyValue(String)
  fullName: Hybrid.Core.Systems.IKeyValueStore.GetKeyValue(System.String)
  spec.csharp:
  - uid: Hybrid.Core.Systems.IKeyValueStore.GetKeyValue(System.String)
    name: GetKeyValue
    nameWithType: IKeyValueStore.GetKeyValue
    fullName: Hybrid.Core.Systems.IKeyValueStore.GetKeyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Core.Systems.IKeyValueStore.GetKeyValue(System.String)
    name: GetKeyValue
    nameWithType: IKeyValueStore.GetKeyValue
    fullName: Hybrid.Core.Systems.IKeyValueStore.GetKeyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Hybrid.Core.Data.IKeyValue
  commentId: T:Hybrid.Core.Data.IKeyValue
  parent: Hybrid.Core.Data
  name: IKeyValue
  nameWithType: IKeyValue
  fullName: Hybrid.Core.Data.IKeyValue
- uid: Hybrid.Core.Data
  commentId: N:Hybrid.Core.Data
  name: Hybrid.Core.Data
  nameWithType: Hybrid.Core.Data
  fullName: Hybrid.Core.Data
- uid: Hybrid.Systems.KeyValueStore.CheckKeyValueExists*
  commentId: Overload:Hybrid.Systems.KeyValueStore.CheckKeyValueExists
  name: CheckKeyValueExists
  nameWithType: KeyValueStore.CheckKeyValueExists
  fullName: Hybrid.Systems.KeyValueStore.CheckKeyValueExists
- uid: Hybrid.Core.Systems.IKeyValueStore.CheckKeyValueExists(System.Linq.Expressions.Expression{System.Func{Hybrid.Core.Systems.KeyValue,System.Boolean}},System.Guid)
  commentId: M:Hybrid.Core.Systems.IKeyValueStore.CheckKeyValueExists(System.Linq.Expressions.Expression{System.Func{Hybrid.Core.Systems.KeyValue,System.Boolean}},System.Guid)
  parent: Hybrid.Core.Systems.IKeyValueStore
  isExternal: true
  name: CheckKeyValueExists(Expression<Func<KeyValue, Boolean>>, Guid)
  nameWithType: IKeyValueStore.CheckKeyValueExists(Expression<Func<KeyValue, Boolean>>, Guid)
  fullName: Hybrid.Core.Systems.IKeyValueStore.CheckKeyValueExists(System.Linq.Expressions.Expression<System.Func<Hybrid.Core.Systems.KeyValue, System.Boolean>>, System.Guid)
  nameWithType.vb: IKeyValueStore.CheckKeyValueExists(Expression(Of Func(Of KeyValue, Boolean)), Guid)
  fullName.vb: Hybrid.Core.Systems.IKeyValueStore.CheckKeyValueExists(System.Linq.Expressions.Expression(Of System.Func(Of Hybrid.Core.Systems.KeyValue, System.Boolean)), System.Guid)
  name.vb: CheckKeyValueExists(Expression(Of Func(Of KeyValue, Boolean)), Guid)
  spec.csharp:
  - uid: Hybrid.Core.Systems.IKeyValueStore.CheckKeyValueExists(System.Linq.Expressions.Expression{System.Func{Hybrid.Core.Systems.KeyValue,System.Boolean}},System.Guid)
    name: CheckKeyValueExists
    nameWithType: IKeyValueStore.CheckKeyValueExists
    fullName: Hybrid.Core.Systems.IKeyValueStore.CheckKeyValueExists
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Core.Systems.KeyValue
    name: KeyValue
    nameWithType: KeyValue
    fullName: Hybrid.Core.Systems.KeyValue
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Core.Systems.IKeyValueStore.CheckKeyValueExists(System.Linq.Expressions.Expression{System.Func{Hybrid.Core.Systems.KeyValue,System.Boolean}},System.Guid)
    name: CheckKeyValueExists
    nameWithType: IKeyValueStore.CheckKeyValueExists
    fullName: Hybrid.Core.Systems.IKeyValueStore.CheckKeyValueExists
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Core.Systems.KeyValue
    name: KeyValue
    nameWithType: KeyValue
    fullName: Hybrid.Core.Systems.KeyValue
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{Hybrid.Core.Systems.KeyValue,System.Boolean}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{Hybrid.Core.Systems.KeyValue,System.Boolean}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<KeyValue, Boolean>>
  nameWithType: Expression<Func<KeyValue, Boolean>>
  fullName: System.Linq.Expressions.Expression<System.Func<Hybrid.Core.Systems.KeyValue, System.Boolean>>
  nameWithType.vb: Expression(Of Func(Of KeyValue, Boolean))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of Hybrid.Core.Systems.KeyValue, System.Boolean))
  name.vb: Expression(Of Func(Of KeyValue, Boolean))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Core.Systems.KeyValue
    name: KeyValue
    nameWithType: KeyValue
    fullName: Hybrid.Core.Systems.KeyValue
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Core.Systems.KeyValue
    name: KeyValue
    nameWithType: KeyValue
    fullName: Hybrid.Core.Systems.KeyValue
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Guid
  commentId: T:System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Threading.Tasks.Task{System.Boolean}
  commentId: T:System.Threading.Tasks.Task{System.Boolean}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Boolean>
  nameWithType: Task<Boolean>
  fullName: System.Threading.Tasks.Task<System.Boolean>
  nameWithType.vb: Task(Of Boolean)
  fullName.vb: System.Threading.Tasks.Task(Of System.Boolean)
  name.vb: Task(Of Boolean)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression`1
  commentId: T:System.Linq.Expressions.Expression`1
  isExternal: true
  name: Expression<TDelegate>
  nameWithType: Expression<TDelegate>
  fullName: System.Linq.Expressions.Expression<TDelegate>
  nameWithType.vb: Expression(Of TDelegate)
  fullName.vb: System.Linq.Expressions.Expression(Of TDelegate)
  name.vb: Expression(Of TDelegate)
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TDelegate
    nameWithType: TDelegate
    fullName: TDelegate
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TDelegate
    nameWithType: TDelegate
    fullName: TDelegate
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions
  commentId: N:System.Linq.Expressions
  isExternal: true
  name: System.Linq.Expressions
  nameWithType: System.Linq.Expressions
  fullName: System.Linq.Expressions
- uid: Hybrid.Systems.KeyValueStore.CreateOrUpdateKeyValue*
  commentId: Overload:Hybrid.Systems.KeyValueStore.CreateOrUpdateKeyValue
  name: CreateOrUpdateKeyValue
  nameWithType: KeyValueStore.CreateOrUpdateKeyValue
  fullName: Hybrid.Systems.KeyValueStore.CreateOrUpdateKeyValue
- uid: Hybrid.Core.Systems.IKeyValueStore.CreateOrUpdateKeyValue(System.String,System.Object)
  commentId: M:Hybrid.Core.Systems.IKeyValueStore.CreateOrUpdateKeyValue(System.String,System.Object)
  parent: Hybrid.Core.Systems.IKeyValueStore
  isExternal: true
  name: CreateOrUpdateKeyValue(String, Object)
  nameWithType: IKeyValueStore.CreateOrUpdateKeyValue(String, Object)
  fullName: Hybrid.Core.Systems.IKeyValueStore.CreateOrUpdateKeyValue(System.String, System.Object)
  spec.csharp:
  - uid: Hybrid.Core.Systems.IKeyValueStore.CreateOrUpdateKeyValue(System.String,System.Object)
    name: CreateOrUpdateKeyValue
    nameWithType: IKeyValueStore.CreateOrUpdateKeyValue
    fullName: Hybrid.Core.Systems.IKeyValueStore.CreateOrUpdateKeyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Core.Systems.IKeyValueStore.CreateOrUpdateKeyValue(System.String,System.Object)
    name: CreateOrUpdateKeyValue
    nameWithType: IKeyValueStore.CreateOrUpdateKeyValue
    fullName: Hybrid.Core.Systems.IKeyValueStore.CreateOrUpdateKeyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Systems.KeyValueStore.CreateOrUpdateKeyValues*
  commentId: Overload:Hybrid.Systems.KeyValueStore.CreateOrUpdateKeyValues
  name: CreateOrUpdateKeyValues
  nameWithType: KeyValueStore.CreateOrUpdateKeyValues
  fullName: Hybrid.Systems.KeyValueStore.CreateOrUpdateKeyValues
- uid: Hybrid.Core.Systems.IKeyValueStore.CreateOrUpdateKeyValues(Hybrid.Core.Data.IKeyValue[])
  commentId: M:Hybrid.Core.Systems.IKeyValueStore.CreateOrUpdateKeyValues(Hybrid.Core.Data.IKeyValue[])
  parent: Hybrid.Core.Systems.IKeyValueStore
  name: CreateOrUpdateKeyValues(IKeyValue[])
  nameWithType: IKeyValueStore.CreateOrUpdateKeyValues(IKeyValue[])
  fullName: Hybrid.Core.Systems.IKeyValueStore.CreateOrUpdateKeyValues(Hybrid.Core.Data.IKeyValue[])
  nameWithType.vb: IKeyValueStore.CreateOrUpdateKeyValues(IKeyValue())
  fullName.vb: Hybrid.Core.Systems.IKeyValueStore.CreateOrUpdateKeyValues(Hybrid.Core.Data.IKeyValue())
  name.vb: CreateOrUpdateKeyValues(IKeyValue())
  spec.csharp:
  - uid: Hybrid.Core.Systems.IKeyValueStore.CreateOrUpdateKeyValues(Hybrid.Core.Data.IKeyValue[])
    name: CreateOrUpdateKeyValues
    nameWithType: IKeyValueStore.CreateOrUpdateKeyValues
    fullName: Hybrid.Core.Systems.IKeyValueStore.CreateOrUpdateKeyValues
  - name: (
    nameWithType: (
    fullName: (
  - uid: Hybrid.Core.Data.IKeyValue
    name: IKeyValue
    nameWithType: IKeyValue
    fullName: Hybrid.Core.Data.IKeyValue
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Core.Systems.IKeyValueStore.CreateOrUpdateKeyValues(Hybrid.Core.Data.IKeyValue[])
    name: CreateOrUpdateKeyValues
    nameWithType: IKeyValueStore.CreateOrUpdateKeyValues
    fullName: Hybrid.Core.Systems.IKeyValueStore.CreateOrUpdateKeyValues
  - name: (
    nameWithType: (
    fullName: (
  - uid: Hybrid.Core.Data.IKeyValue
    name: IKeyValue
    nameWithType: IKeyValue
    fullName: Hybrid.Core.Data.IKeyValue
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Core.Data.IKeyValue[]
  isExternal: true
  name: IKeyValue[]
  nameWithType: IKeyValue[]
  fullName: Hybrid.Core.Data.IKeyValue[]
  nameWithType.vb: IKeyValue()
  fullName.vb: Hybrid.Core.Data.IKeyValue()
  name.vb: IKeyValue()
  spec.csharp:
  - uid: Hybrid.Core.Data.IKeyValue
    name: IKeyValue
    nameWithType: IKeyValue
    fullName: Hybrid.Core.Data.IKeyValue
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: Hybrid.Core.Data.IKeyValue
    name: IKeyValue
    nameWithType: IKeyValue
    fullName: Hybrid.Core.Data.IKeyValue
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Hybrid.Systems.KeyValueStore.DeleteKeyValues*
  commentId: Overload:Hybrid.Systems.KeyValueStore.DeleteKeyValues
  name: DeleteKeyValues
  nameWithType: KeyValueStore.DeleteKeyValues
  fullName: Hybrid.Systems.KeyValueStore.DeleteKeyValues
- uid: Hybrid.Core.Systems.IKeyValueStore.DeleteKeyValues(System.Guid[])
  commentId: M:Hybrid.Core.Systems.IKeyValueStore.DeleteKeyValues(System.Guid[])
  parent: Hybrid.Core.Systems.IKeyValueStore
  isExternal: true
  name: DeleteKeyValues(Guid[])
  nameWithType: IKeyValueStore.DeleteKeyValues(Guid[])
  fullName: Hybrid.Core.Systems.IKeyValueStore.DeleteKeyValues(System.Guid[])
  nameWithType.vb: IKeyValueStore.DeleteKeyValues(Guid())
  fullName.vb: Hybrid.Core.Systems.IKeyValueStore.DeleteKeyValues(System.Guid())
  name.vb: DeleteKeyValues(Guid())
  spec.csharp:
  - uid: Hybrid.Core.Systems.IKeyValueStore.DeleteKeyValues(System.Guid[])
    name: DeleteKeyValues
    nameWithType: IKeyValueStore.DeleteKeyValues
    fullName: Hybrid.Core.Systems.IKeyValueStore.DeleteKeyValues
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Core.Systems.IKeyValueStore.DeleteKeyValues(System.Guid[])
    name: DeleteKeyValues
    nameWithType: IKeyValueStore.DeleteKeyValues
    fullName: Hybrid.Core.Systems.IKeyValueStore.DeleteKeyValues
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Guid[]
  isExternal: true
  name: Guid[]
  nameWithType: Guid[]
  fullName: System.Guid[]
  nameWithType.vb: Guid()
  fullName.vb: System.Guid()
  name.vb: Guid()
  spec.csharp:
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Hybrid.Core.Systems.IKeyValueStore.DeleteKeyValues(System.String)
  commentId: M:Hybrid.Core.Systems.IKeyValueStore.DeleteKeyValues(System.String)
  parent: Hybrid.Core.Systems.IKeyValueStore
  isExternal: true
  name: DeleteKeyValues(String)
  nameWithType: IKeyValueStore.DeleteKeyValues(String)
  fullName: Hybrid.Core.Systems.IKeyValueStore.DeleteKeyValues(System.String)
  spec.csharp:
  - uid: Hybrid.Core.Systems.IKeyValueStore.DeleteKeyValues(System.String)
    name: DeleteKeyValues
    nameWithType: IKeyValueStore.DeleteKeyValues
    fullName: Hybrid.Core.Systems.IKeyValueStore.DeleteKeyValues
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Core.Systems.IKeyValueStore.DeleteKeyValues(System.String)
    name: DeleteKeyValues
    nameWithType: IKeyValueStore.DeleteKeyValues
    fullName: Hybrid.Core.Systems.IKeyValueStore.DeleteKeyValues
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
