### YamlMime:ManagedReference
items:
- uid: Hybrid.Extensions.QueryableExtensions
  commentId: T:Hybrid.Extensions.QueryableExtensions
  id: QueryableExtensions
  parent: Hybrid.Extensions
  children:
  - Hybrid.Extensions.QueryableExtensions.Expired``1(System.Collections.Generic.IEnumerable{``0})
  - Hybrid.Extensions.QueryableExtensions.Expired``1(System.Linq.IQueryable{``0})
  - Hybrid.Extensions.QueryableExtensions.Locked``1(System.Collections.Generic.IEnumerable{``0})
  - Hybrid.Extensions.QueryableExtensions.Locked``1(System.Linq.IQueryable{``0})
  - Hybrid.Extensions.QueryableExtensions.MultiOrderBy``1(System.Linq.IQueryable{``0},System.String)
  - Hybrid.Extensions.QueryableExtensions.OrderBy``1(System.Linq.IQueryable{``0},Hybrid.Filter.SortCondition)
  - Hybrid.Extensions.QueryableExtensions.OrderBy``1(System.Linq.IQueryable{``0},Hybrid.Filter.SortCondition{``0})
  - Hybrid.Extensions.QueryableExtensions.OrderBy``1(System.Linq.IQueryable{``0},System.String,System.ComponentModel.ListSortDirection)
  - Hybrid.Extensions.QueryableExtensions.ThenBy``1(System.Linq.IOrderedQueryable{``0},Hybrid.Filter.SortCondition)
  - Hybrid.Extensions.QueryableExtensions.ThenBy``1(System.Linq.IOrderedQueryable{``0},System.String,System.ComponentModel.ListSortDirection)
  - Hybrid.Extensions.QueryableExtensions.ToOutput``2(System.Linq.IQueryable{``0},System.Boolean)
  - Hybrid.Extensions.QueryableExtensions.ToPage``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},Hybrid.Filter.PageCondition)
  - Hybrid.Extensions.QueryableExtensions.ToPage``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},Hybrid.Filter.PageCondition,System.Linq.Expressions.Expression{System.Func{``0,``1}})
  - Hybrid.Extensions.QueryableExtensions.ToPage``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Int32,System.Int32,Hybrid.Filter.SortCondition[])
  - Hybrid.Extensions.QueryableExtensions.ToPage``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Int32,System.Int32,Hybrid.Filter.SortCondition[],System.Linq.Expressions.Expression{System.Func{``0,``1}})
  - Hybrid.Extensions.QueryableExtensions.Unexpired``1(System.Collections.Generic.IEnumerable{``0})
  - Hybrid.Extensions.QueryableExtensions.Unexpired``1(System.Linq.IQueryable{``0})
  - Hybrid.Extensions.QueryableExtensions.Unlocked``1(System.Collections.Generic.IEnumerable{``0})
  - Hybrid.Extensions.QueryableExtensions.Unlocked``1(System.Linq.IQueryable{``0})
  - Hybrid.Extensions.QueryableExtensions.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},Hybrid.Filter.PageCondition,System.Int32@)
  - Hybrid.Extensions.QueryableExtensions.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Int32,System.Int32,System.Int32@,Hybrid.Filter.SortCondition[])
  - Hybrid.Extensions.QueryableExtensions.WhereIf``1(System.Linq.IQueryable{``0},System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  - Hybrid.Extensions.QueryableExtensions.WhereIf``1(System.Linq.IQueryable{``0},System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})
  - Hybrid.Extensions.QueryableExtensions.WhereIf``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Boolean)
  langs:
  - csharp
  - vb
  name: QueryableExtensions
  nameWithType: QueryableExtensions
  fullName: Hybrid.Extensions.QueryableExtensions
  type: Class
  source:
    remote:
      path: src/Hybrid/Extensions/QueryableExtensions.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: QueryableExtensions
    path: ../src/Hybrid/Extensions/QueryableExtensions.cs
    startLine: 28
  assemblies:
  - Hybrid
  namespace: Hybrid.Extensions
  summary: "\nIQueryable集合扩展方法\n"
  example: []
  syntax:
    content: public static class QueryableExtensions
    content.vb: Public Module QueryableExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Hybrid.Extensions.QueryableExtensions.WhereIf``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Boolean)
  commentId: M:Hybrid.Extensions.QueryableExtensions.WhereIf``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Boolean)
  id: WhereIf``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Boolean)
  isExtensionMethod: true
  parent: Hybrid.Extensions.QueryableExtensions
  langs:
  - csharp
  - vb
  name: WhereIf<T>(IQueryable<T>, Expression<Func<T, Boolean>>, Boolean)
  nameWithType: QueryableExtensions.WhereIf<T>(IQueryable<T>, Expression<Func<T, Boolean>>, Boolean)
  fullName: Hybrid.Extensions.QueryableExtensions.WhereIf<T>(System.Linq.IQueryable<T>, System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Hybrid/Extensions/QueryableExtensions.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: WhereIf
    path: ../src/Hybrid/Extensions/QueryableExtensions.cs
    startLine: 38
  assemblies:
  - Hybrid
  namespace: Hybrid.Extensions
  summary: "\n根据第三方条件是否为真来决定是否执行指定条件的查询\n"
  example: []
  syntax:
    content: public static IQueryable<T> WhereIf<T>(this IQueryable<T> source, Expression<Func<T, bool>> predicate, bool condition)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{T}}
      description: '要查询的源 '
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}}
      description: '查询条件 '
    - id: condition
      type: System.Boolean
      description: '第三方条件 '
    typeParameters:
    - id: T
      description: '动态类型 '
    return:
      type: System.Linq.IQueryable{{T}}
      description: '查询的结果 '
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function WhereIf(Of T)(source As IQueryable(Of T), predicate As Expression(Of Func(Of T, Boolean)), condition As Boolean) As IQueryable(Of T)
  overload: Hybrid.Extensions.QueryableExtensions.WhereIf*
  nameWithType.vb: QueryableExtensions.WhereIf(Of T)(IQueryable(Of T), Expression(Of Func(Of T, Boolean)), Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Hybrid.Extensions.QueryableExtensions.WhereIf(Of T)(System.Linq.IQueryable(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Boolean)
  name.vb: WhereIf(Of T)(IQueryable(Of T), Expression(Of Func(Of T, Boolean)), Boolean)
- uid: Hybrid.Extensions.QueryableExtensions.WhereIf``1(System.Linq.IQueryable{``0},System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  commentId: M:Hybrid.Extensions.QueryableExtensions.WhereIf``1(System.Linq.IQueryable{``0},System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  id: WhereIf``1(System.Linq.IQueryable{``0},System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  isExtensionMethod: true
  parent: Hybrid.Extensions.QueryableExtensions
  langs:
  - csharp
  - vb
  name: WhereIf<T>(IQueryable<T>, Boolean, Expression<Func<T, Boolean>>)
  nameWithType: QueryableExtensions.WhereIf<T>(IQueryable<T>, Boolean, Expression<Func<T, Boolean>>)
  fullName: Hybrid.Extensions.QueryableExtensions.WhereIf<T>(System.Linq.IQueryable<T>, System.Boolean, System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>)
  type: Method
  source:
    remote:
      path: src/Hybrid/Extensions/QueryableExtensions.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: WhereIf
    path: ../src/Hybrid/Extensions/QueryableExtensions.cs
    startLine: 53
  assemblies:
  - Hybrid
  namespace: Hybrid.Extensions
  summary: "\nFilters a <xref href=\"System.Linq.IQueryable%601\" data-throw-if-not-resolved=\"false\"></xref> by given predicate if given condition is true.\n"
  example: []
  syntax:
    content: public static IQueryable<T> WhereIf<T>(this IQueryable<T> query, bool condition, Expression<Func<T, bool>> predicate)
    parameters:
    - id: query
      type: System.Linq.IQueryable{{T}}
      description: Queryable to apply filtering
    - id: condition
      type: System.Boolean
      description: A boolean value
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}}
      description: Predicate to filter the query
    typeParameters:
    - id: T
    return:
      type: System.Linq.IQueryable{{T}}
      description: Filtered or not filtered query based on <code data-dev-comment-type="paramref" class="paramref">condition</code>
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function WhereIf(Of T)(query As IQueryable(Of T), condition As Boolean, predicate As Expression(Of Func(Of T, Boolean))) As IQueryable(Of T)
  overload: Hybrid.Extensions.QueryableExtensions.WhereIf*
  nameWithType.vb: QueryableExtensions.WhereIf(Of T)(IQueryable(Of T), Boolean, Expression(Of Func(Of T, Boolean)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Hybrid.Extensions.QueryableExtensions.WhereIf(Of T)(System.Linq.IQueryable(Of T), System.Boolean, System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)))
  name.vb: WhereIf(Of T)(IQueryable(Of T), Boolean, Expression(Of Func(Of T, Boolean)))
- uid: Hybrid.Extensions.QueryableExtensions.WhereIf``1(System.Linq.IQueryable{``0},System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})
  commentId: M:Hybrid.Extensions.QueryableExtensions.WhereIf``1(System.Linq.IQueryable{``0},System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})
  id: WhereIf``1(System.Linq.IQueryable{``0},System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})
  isExtensionMethod: true
  parent: Hybrid.Extensions.QueryableExtensions
  langs:
  - csharp
  - vb
  name: WhereIf<T>(IQueryable<T>, Boolean, Expression<Func<T, Int32, Boolean>>)
  nameWithType: QueryableExtensions.WhereIf<T>(IQueryable<T>, Boolean, Expression<Func<T, Int32, Boolean>>)
  fullName: Hybrid.Extensions.QueryableExtensions.WhereIf<T>(System.Linq.IQueryable<T>, System.Boolean, System.Linq.Expressions.Expression<System.Func<T, System.Int32, System.Boolean>>)
  type: Method
  source:
    remote:
      path: src/Hybrid/Extensions/QueryableExtensions.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: WhereIf
    path: ../src/Hybrid/Extensions/QueryableExtensions.cs
    startLine: 67
  assemblies:
  - Hybrid
  namespace: Hybrid.Extensions
  summary: "\nFilters a <xref href=\"System.Linq.IQueryable%601\" data-throw-if-not-resolved=\"false\"></xref> by given predicate if given condition is true.\n"
  example: []
  syntax:
    content: public static IQueryable<T> WhereIf<T>(this IQueryable<T> query, bool condition, Expression<Func<T, int, bool>> predicate)
    parameters:
    - id: query
      type: System.Linq.IQueryable{{T}}
      description: Queryable to apply filtering
    - id: condition
      type: System.Boolean
      description: A boolean value
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Int32,System.Boolean}}
      description: Predicate to filter the query
    typeParameters:
    - id: T
    return:
      type: System.Linq.IQueryable{{T}}
      description: Filtered or not filtered query based on <code data-dev-comment-type="paramref" class="paramref">condition</code>
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function WhereIf(Of T)(query As IQueryable(Of T), condition As Boolean, predicate As Expression(Of Func(Of T, Integer, Boolean))) As IQueryable(Of T)
  overload: Hybrid.Extensions.QueryableExtensions.WhereIf*
  nameWithType.vb: QueryableExtensions.WhereIf(Of T)(IQueryable(Of T), Boolean, Expression(Of Func(Of T, Int32, Boolean)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Hybrid.Extensions.QueryableExtensions.WhereIf(Of T)(System.Linq.IQueryable(Of T), System.Boolean, System.Linq.Expressions.Expression(Of System.Func(Of T, System.Int32, System.Boolean)))
  name.vb: WhereIf(Of T)(IQueryable(Of T), Boolean, Expression(Of Func(Of T, Int32, Boolean)))
- uid: Hybrid.Extensions.QueryableExtensions.OrderBy``1(System.Linq.IQueryable{``0},System.String,System.ComponentModel.ListSortDirection)
  commentId: M:Hybrid.Extensions.QueryableExtensions.OrderBy``1(System.Linq.IQueryable{``0},System.String,System.ComponentModel.ListSortDirection)
  id: OrderBy``1(System.Linq.IQueryable{``0},System.String,System.ComponentModel.ListSortDirection)
  isExtensionMethod: true
  parent: Hybrid.Extensions.QueryableExtensions
  langs:
  - csharp
  - vb
  name: OrderBy<T>(IQueryable<T>, String, ListSortDirection)
  nameWithType: QueryableExtensions.OrderBy<T>(IQueryable<T>, String, ListSortDirection)
  fullName: Hybrid.Extensions.QueryableExtensions.OrderBy<T>(System.Linq.IQueryable<T>, System.String, System.ComponentModel.ListSortDirection)
  type: Method
  source:
    remote:
      path: src/Hybrid/Extensions/QueryableExtensions.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: OrderBy
    path: ../src/Hybrid/Extensions/QueryableExtensions.cs
    startLine: 82
  assemblies:
  - Hybrid
  namespace: Hybrid.Extensions
  summary: "\n把<xref href=\"System.Linq.IQueryable%601\" data-throw-if-not-resolved=\"false\"></xref>集合按指定字段与排序方式进行排序\n"
  example: []
  syntax:
    content: public static IOrderedQueryable<T> OrderBy<T>(this IQueryable<T> source, string propertyName, ListSortDirection sortDirection = ListSortDirection.Ascending)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{T}}
      description: 要排序的数据集
    - id: propertyName
      type: System.String
      description: 排序属性名
    - id: sortDirection
      type: System.ComponentModel.ListSortDirection
      description: 排序方向
    typeParameters:
    - id: T
      description: 动态类型
    return:
      type: System.Linq.IOrderedQueryable{{T}}
      description: 排序后的数据集
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function OrderBy(Of T)(source As IQueryable(Of T), propertyName As String, sortDirection As ListSortDirection = ListSortDirection.Ascending) As IOrderedQueryable(Of T)
  overload: Hybrid.Extensions.QueryableExtensions.OrderBy*
  nameWithType.vb: QueryableExtensions.OrderBy(Of T)(IQueryable(Of T), String, ListSortDirection)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Hybrid.Extensions.QueryableExtensions.OrderBy(Of T)(System.Linq.IQueryable(Of T), System.String, System.ComponentModel.ListSortDirection)
  name.vb: OrderBy(Of T)(IQueryable(Of T), String, ListSortDirection)
- uid: Hybrid.Extensions.QueryableExtensions.OrderBy``1(System.Linq.IQueryable{``0},Hybrid.Filter.SortCondition)
  commentId: M:Hybrid.Extensions.QueryableExtensions.OrderBy``1(System.Linq.IQueryable{``0},Hybrid.Filter.SortCondition)
  id: OrderBy``1(System.Linq.IQueryable{``0},Hybrid.Filter.SortCondition)
  isExtensionMethod: true
  parent: Hybrid.Extensions.QueryableExtensions
  langs:
  - csharp
  - vb
  name: OrderBy<T>(IQueryable<T>, SortCondition)
  nameWithType: QueryableExtensions.OrderBy<T>(IQueryable<T>, SortCondition)
  fullName: Hybrid.Extensions.QueryableExtensions.OrderBy<T>(System.Linq.IQueryable<T>, Hybrid.Filter.SortCondition)
  type: Method
  source:
    remote:
      path: src/Hybrid/Extensions/QueryableExtensions.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: OrderBy
    path: ../src/Hybrid/Extensions/QueryableExtensions.cs
    startLine: 99
  assemblies:
  - Hybrid
  namespace: Hybrid.Extensions
  summary: "\n把<xref href=\"System.Linq.IQueryable%601\" data-throw-if-not-resolved=\"false\"></xref>集合按指定字段排序条件进行排序\n"
  example: []
  syntax:
    content: public static IOrderedQueryable<T> OrderBy<T>(this IQueryable<T> source, SortCondition sortCondition)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{T}}
      description: 要排序的数据集
    - id: sortCondition
      type: Hybrid.Filter.SortCondition
      description: 列表字段排序条件
    typeParameters:
    - id: T
      description: 动态类型
    return:
      type: System.Linq.IOrderedQueryable{{T}}
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function OrderBy(Of T)(source As IQueryable(Of T), sortCondition As SortCondition) As IOrderedQueryable(Of T)
  overload: Hybrid.Extensions.QueryableExtensions.OrderBy*
  nameWithType.vb: QueryableExtensions.OrderBy(Of T)(IQueryable(Of T), SortCondition)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Hybrid.Extensions.QueryableExtensions.OrderBy(Of T)(System.Linq.IQueryable(Of T), Hybrid.Filter.SortCondition)
  name.vb: OrderBy(Of T)(IQueryable(Of T), SortCondition)
- uid: Hybrid.Extensions.QueryableExtensions.OrderBy``1(System.Linq.IQueryable{``0},Hybrid.Filter.SortCondition{``0})
  commentId: M:Hybrid.Extensions.QueryableExtensions.OrderBy``1(System.Linq.IQueryable{``0},Hybrid.Filter.SortCondition{``0})
  id: OrderBy``1(System.Linq.IQueryable{``0},Hybrid.Filter.SortCondition{``0})
  isExtensionMethod: true
  parent: Hybrid.Extensions.QueryableExtensions
  langs:
  - csharp
  - vb
  name: OrderBy<T>(IQueryable<T>, SortCondition<T>)
  nameWithType: QueryableExtensions.OrderBy<T>(IQueryable<T>, SortCondition<T>)
  fullName: Hybrid.Extensions.QueryableExtensions.OrderBy<T>(System.Linq.IQueryable<T>, Hybrid.Filter.SortCondition<T>)
  type: Method
  source:
    remote:
      path: src/Hybrid/Extensions/QueryableExtensions.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: OrderBy
    path: ../src/Hybrid/Extensions/QueryableExtensions.cs
    startLine: 114
  assemblies:
  - Hybrid
  namespace: Hybrid.Extensions
  summary: "\n把<xref href=\"System.Linq.IQueryable%601\" data-throw-if-not-resolved=\"false\"></xref>集合按指定字段排序条件进行排序\n"
  example: []
  syntax:
    content: public static IOrderedQueryable<T> OrderBy<T>(this IQueryable<T> source, SortCondition<T> sortCondition)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{T}}
      description: 要排序的数据集
    - id: sortCondition
      type: Hybrid.Filter.SortCondition{{T}}
      description: 列表字段排序条件
    typeParameters:
    - id: T
      description: 动态类型
    return:
      type: System.Linq.IOrderedQueryable{{T}}
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function OrderBy(Of T)(source As IQueryable(Of T), sortCondition As SortCondition(Of T)) As IOrderedQueryable(Of T)
  overload: Hybrid.Extensions.QueryableExtensions.OrderBy*
  nameWithType.vb: QueryableExtensions.OrderBy(Of T)(IQueryable(Of T), SortCondition(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Hybrid.Extensions.QueryableExtensions.OrderBy(Of T)(System.Linq.IQueryable(Of T), Hybrid.Filter.SortCondition(Of T))
  name.vb: OrderBy(Of T)(IQueryable(Of T), SortCondition(Of T))
- uid: Hybrid.Extensions.QueryableExtensions.ThenBy``1(System.Linq.IOrderedQueryable{``0},System.String,System.ComponentModel.ListSortDirection)
  commentId: M:Hybrid.Extensions.QueryableExtensions.ThenBy``1(System.Linq.IOrderedQueryable{``0},System.String,System.ComponentModel.ListSortDirection)
  id: ThenBy``1(System.Linq.IOrderedQueryable{``0},System.String,System.ComponentModel.ListSortDirection)
  isExtensionMethod: true
  parent: Hybrid.Extensions.QueryableExtensions
  langs:
  - csharp
  - vb
  name: ThenBy<T>(IOrderedQueryable<T>, String, ListSortDirection)
  nameWithType: QueryableExtensions.ThenBy<T>(IOrderedQueryable<T>, String, ListSortDirection)
  fullName: Hybrid.Extensions.QueryableExtensions.ThenBy<T>(System.Linq.IOrderedQueryable<T>, System.String, System.ComponentModel.ListSortDirection)
  type: Method
  source:
    remote:
      path: src/Hybrid/Extensions/QueryableExtensions.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: ThenBy
    path: ../src/Hybrid/Extensions/QueryableExtensions.cs
    startLine: 129
  assemblies:
  - Hybrid
  namespace: Hybrid.Extensions
  summary: "\n把<xref href=\"System.Linq.IOrderedQueryable%601\" data-throw-if-not-resolved=\"false\"></xref>集合继续按指定字段排序方式进行排序\n"
  example: []
  syntax:
    content: public static IOrderedQueryable<T> ThenBy<T>(this IOrderedQueryable<T> source, string propertyName, ListSortDirection sortDirection = ListSortDirection.Ascending)
    parameters:
    - id: source
      type: System.Linq.IOrderedQueryable{{T}}
      description: 要排序的数据集
    - id: propertyName
      type: System.String
      description: 排序属性名
    - id: sortDirection
      type: System.ComponentModel.ListSortDirection
      description: 排序方向
    typeParameters:
    - id: T
      description: 动态类型
    return:
      type: System.Linq.IOrderedQueryable{{T}}
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ThenBy(Of T)(source As IOrderedQueryable(Of T), propertyName As String, sortDirection As ListSortDirection = ListSortDirection.Ascending) As IOrderedQueryable(Of T)
  overload: Hybrid.Extensions.QueryableExtensions.ThenBy*
  nameWithType.vb: QueryableExtensions.ThenBy(Of T)(IOrderedQueryable(Of T), String, ListSortDirection)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Hybrid.Extensions.QueryableExtensions.ThenBy(Of T)(System.Linq.IOrderedQueryable(Of T), System.String, System.ComponentModel.ListSortDirection)
  name.vb: ThenBy(Of T)(IOrderedQueryable(Of T), String, ListSortDirection)
- uid: Hybrid.Extensions.QueryableExtensions.ThenBy``1(System.Linq.IOrderedQueryable{``0},Hybrid.Filter.SortCondition)
  commentId: M:Hybrid.Extensions.QueryableExtensions.ThenBy``1(System.Linq.IOrderedQueryable{``0},Hybrid.Filter.SortCondition)
  id: ThenBy``1(System.Linq.IOrderedQueryable{``0},Hybrid.Filter.SortCondition)
  isExtensionMethod: true
  parent: Hybrid.Extensions.QueryableExtensions
  langs:
  - csharp
  - vb
  name: ThenBy<T>(IOrderedQueryable<T>, SortCondition)
  nameWithType: QueryableExtensions.ThenBy<T>(IOrderedQueryable<T>, SortCondition)
  fullName: Hybrid.Extensions.QueryableExtensions.ThenBy<T>(System.Linq.IOrderedQueryable<T>, Hybrid.Filter.SortCondition)
  type: Method
  source:
    remote:
      path: src/Hybrid/Extensions/QueryableExtensions.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: ThenBy
    path: ../src/Hybrid/Extensions/QueryableExtensions.cs
    startLine: 146
  assemblies:
  - Hybrid
  namespace: Hybrid.Extensions
  summary: "\n把<xref href=\"System.Linq.IOrderedQueryable%601\" data-throw-if-not-resolved=\"false\"></xref>集合继续指定字段排序方式进行排序\n"
  example: []
  syntax:
    content: public static IOrderedQueryable<T> ThenBy<T>(this IOrderedQueryable<T> source, SortCondition sortCondition)
    parameters:
    - id: source
      type: System.Linq.IOrderedQueryable{{T}}
      description: 要排序的数据集
    - id: sortCondition
      type: Hybrid.Filter.SortCondition
      description: 列表字段排序条件
    typeParameters:
    - id: T
      description: 动态类型
    return:
      type: System.Linq.IOrderedQueryable{{T}}
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ThenBy(Of T)(source As IOrderedQueryable(Of T), sortCondition As SortCondition) As IOrderedQueryable(Of T)
  overload: Hybrid.Extensions.QueryableExtensions.ThenBy*
  nameWithType.vb: QueryableExtensions.ThenBy(Of T)(IOrderedQueryable(Of T), SortCondition)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Hybrid.Extensions.QueryableExtensions.ThenBy(Of T)(System.Linq.IOrderedQueryable(Of T), Hybrid.Filter.SortCondition)
  name.vb: ThenBy(Of T)(IOrderedQueryable(Of T), SortCondition)
- uid: Hybrid.Extensions.QueryableExtensions.ToPage``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},Hybrid.Filter.PageCondition,System.Linq.Expressions.Expression{System.Func{``0,``1}})
  commentId: M:Hybrid.Extensions.QueryableExtensions.ToPage``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},Hybrid.Filter.PageCondition,System.Linq.Expressions.Expression{System.Func{``0,``1}})
  id: ToPage``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},Hybrid.Filter.PageCondition,System.Linq.Expressions.Expression{System.Func{``0,``1}})
  isExtensionMethod: true
  parent: Hybrid.Extensions.QueryableExtensions
  langs:
  - csharp
  - vb
  name: ToPage<TEntity, TResult>(IQueryable<TEntity>, Expression<Func<TEntity, Boolean>>, PageCondition, Expression<Func<TEntity, TResult>>)
  nameWithType: QueryableExtensions.ToPage<TEntity, TResult>(IQueryable<TEntity>, Expression<Func<TEntity, Boolean>>, PageCondition, Expression<Func<TEntity, TResult>>)
  fullName: Hybrid.Extensions.QueryableExtensions.ToPage<TEntity, TResult>(System.Linq.IQueryable<TEntity>, System.Linq.Expressions.Expression<System.Func<TEntity, System.Boolean>>, Hybrid.Filter.PageCondition, System.Linq.Expressions.Expression<System.Func<TEntity, TResult>>)
  type: Method
  source:
    remote:
      path: src/Hybrid/Extensions/QueryableExtensions.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: ToPage
    path: ../src/Hybrid/Extensions/QueryableExtensions.cs
    startLine: 164
  assemblies:
  - Hybrid
  namespace: Hybrid.Extensions
  summary: "\n从指定<xref href=\"System.Linq.IQueryable%601\" data-throw-if-not-resolved=\"false\"></xref>集合中查询指定数据筛选的分页信息\n"
  example: []
  syntax:
    content: public static PageResult<TResult> ToPage<TEntity, TResult>(this IQueryable<TEntity> source, Expression<Func<TEntity, bool>> predicate, PageCondition pageCondition, Expression<Func<TEntity, TResult>> selector)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TEntity}}
      description: 要查询的数据集
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}}
      description: 查询条件谓语表达式
    - id: pageCondition
      type: Hybrid.Filter.PageCondition
      description: 分页查询条件
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TEntity},{TResult}}}
      description: 数据筛选表达式
    typeParameters:
    - id: TEntity
      description: 实体类型
    - id: TResult
      description: 分页数据类型
    return:
      type: Hybrid.Filter.PageResult{{TResult}}
      description: 分页结果信息
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToPage(Of TEntity, TResult)(source As IQueryable(Of TEntity), predicate As Expression(Of Func(Of TEntity, Boolean)), pageCondition As PageCondition, selector As Expression(Of Func(Of TEntity, TResult))) As PageResult(Of TResult)
  overload: Hybrid.Extensions.QueryableExtensions.ToPage*
  nameWithType.vb: QueryableExtensions.ToPage(Of TEntity, TResult)(IQueryable(Of TEntity), Expression(Of Func(Of TEntity, Boolean)), PageCondition, Expression(Of Func(Of TEntity, TResult)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Hybrid.Extensions.QueryableExtensions.ToPage(Of TEntity, TResult)(System.Linq.IQueryable(Of TEntity), System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Boolean)), Hybrid.Filter.PageCondition, System.Linq.Expressions.Expression(Of System.Func(Of TEntity, TResult)))
  name.vb: ToPage(Of TEntity, TResult)(IQueryable(Of TEntity), Expression(Of Func(Of TEntity, Boolean)), PageCondition, Expression(Of Func(Of TEntity, TResult)))
- uid: Hybrid.Extensions.QueryableExtensions.ToPage``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Int32,System.Int32,Hybrid.Filter.SortCondition[],System.Linq.Expressions.Expression{System.Func{``0,``1}})
  commentId: M:Hybrid.Extensions.QueryableExtensions.ToPage``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Int32,System.Int32,Hybrid.Filter.SortCondition[],System.Linq.Expressions.Expression{System.Func{``0,``1}})
  id: ToPage``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Int32,System.Int32,Hybrid.Filter.SortCondition[],System.Linq.Expressions.Expression{System.Func{``0,``1}})
  isExtensionMethod: true
  parent: Hybrid.Extensions.QueryableExtensions
  langs:
  - csharp
  - vb
  name: ToPage<TEntity, TResult>(IQueryable<TEntity>, Expression<Func<TEntity, Boolean>>, Int32, Int32, SortCondition[], Expression<Func<TEntity, TResult>>)
  nameWithType: QueryableExtensions.ToPage<TEntity, TResult>(IQueryable<TEntity>, Expression<Func<TEntity, Boolean>>, Int32, Int32, SortCondition[], Expression<Func<TEntity, TResult>>)
  fullName: Hybrid.Extensions.QueryableExtensions.ToPage<TEntity, TResult>(System.Linq.IQueryable<TEntity>, System.Linq.Expressions.Expression<System.Func<TEntity, System.Boolean>>, System.Int32, System.Int32, Hybrid.Filter.SortCondition[], System.Linq.Expressions.Expression<System.Func<TEntity, TResult>>)
  type: Method
  source:
    remote:
      path: src/Hybrid/Extensions/QueryableExtensions.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: ToPage
    path: ../src/Hybrid/Extensions/QueryableExtensions.cs
    startLine: 189
  assemblies:
  - Hybrid
  namespace: Hybrid.Extensions
  summary: "\n从指定<xref href=\"System.Linq.IQueryable%601\" data-throw-if-not-resolved=\"false\"></xref>集合中查询指定数据筛选的分页信息\n"
  example: []
  syntax:
    content: public static PageResult<TResult> ToPage<TEntity, TResult>(this IQueryable<TEntity> source, Expression<Func<TEntity, bool>> predicate, int pageIndex, int pageSize, SortCondition[] sortConditions, Expression<Func<TEntity, TResult>> selector)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TEntity}}
      description: 要查询的数据集
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}}
      description: 查询条件谓语表达式
    - id: pageIndex
      type: System.Int32
      description: 分页索引
    - id: pageSize
      type: System.Int32
      description: 分页大小
    - id: sortConditions
      type: Hybrid.Filter.SortCondition[]
      description: 排序条件集合
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TEntity},{TResult}}}
      description: 数据筛选表达式
    typeParameters:
    - id: TEntity
      description: 实体类型
    - id: TResult
      description: 分页数据类型
    return:
      type: Hybrid.Filter.PageResult{{TResult}}
      description: 分页结果信息
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToPage(Of TEntity, TResult)(source As IQueryable(Of TEntity), predicate As Expression(Of Func(Of TEntity, Boolean)), pageIndex As Integer, pageSize As Integer, sortConditions As SortCondition(), selector As Expression(Of Func(Of TEntity, TResult))) As PageResult(Of TResult)
  overload: Hybrid.Extensions.QueryableExtensions.ToPage*
  nameWithType.vb: QueryableExtensions.ToPage(Of TEntity, TResult)(IQueryable(Of TEntity), Expression(Of Func(Of TEntity, Boolean)), Int32, Int32, SortCondition(), Expression(Of Func(Of TEntity, TResult)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Hybrid.Extensions.QueryableExtensions.ToPage(Of TEntity, TResult)(System.Linq.IQueryable(Of TEntity), System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Boolean)), System.Int32, System.Int32, Hybrid.Filter.SortCondition(), System.Linq.Expressions.Expression(Of System.Func(Of TEntity, TResult)))
  name.vb: ToPage(Of TEntity, TResult)(IQueryable(Of TEntity), Expression(Of Func(Of TEntity, Boolean)), Int32, Int32, SortCondition(), Expression(Of Func(Of TEntity, TResult)))
- uid: Hybrid.Extensions.QueryableExtensions.ToPage``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},Hybrid.Filter.PageCondition)
  commentId: M:Hybrid.Extensions.QueryableExtensions.ToPage``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},Hybrid.Filter.PageCondition)
  id: ToPage``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},Hybrid.Filter.PageCondition)
  isExtensionMethod: true
  parent: Hybrid.Extensions.QueryableExtensions
  langs:
  - csharp
  - vb
  name: ToPage<TEntity, TOutputDto>(IQueryable<TEntity>, Expression<Func<TEntity, Boolean>>, PageCondition)
  nameWithType: QueryableExtensions.ToPage<TEntity, TOutputDto>(IQueryable<TEntity>, Expression<Func<TEntity, Boolean>>, PageCondition)
  fullName: Hybrid.Extensions.QueryableExtensions.ToPage<TEntity, TOutputDto>(System.Linq.IQueryable<TEntity>, System.Linq.Expressions.Expression<System.Func<TEntity, System.Boolean>>, Hybrid.Filter.PageCondition)
  type: Method
  source:
    remote:
      path: src/Hybrid/Extensions/QueryableExtensions.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: ToPage
    path: ../src/Hybrid/Extensions/QueryableExtensions.cs
    startLine: 215
  assemblies:
  - Hybrid
  namespace: Hybrid.Extensions
  summary: "\n从指定<xref href=\"System.Linq.IQueryable%601\" data-throw-if-not-resolved=\"false\"></xref>集合中查询指定输出DTO的分页信息\n"
  example: []
  syntax:
    content: >-
      public static PageResult<TOutputDto> ToPage<TEntity, TOutputDto>(this IQueryable<TEntity> source, Expression<Func<TEntity, bool>> predicate, PageCondition pageCondition)

          where TOutputDto : IOutputDto
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TEntity}}
      description: 要查询的数据集
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}}
      description: 查询条件谓语表达式
    - id: pageCondition
      type: Hybrid.Filter.PageCondition
      description: 分页查询条件
    typeParameters:
    - id: TEntity
      description: 实体类型
    - id: TOutputDto
      description: 输出DTO数据类型
    return:
      type: Hybrid.Filter.PageResult{{TOutputDto}}
      description: 分页结果信息
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToPage(Of TEntity, TOutputDto As IOutputDto)(source As IQueryable(Of TEntity), predicate As Expression(Of Func(Of TEntity, Boolean)), pageCondition As PageCondition) As PageResult(Of TOutputDto)
  overload: Hybrid.Extensions.QueryableExtensions.ToPage*
  nameWithType.vb: QueryableExtensions.ToPage(Of TEntity, TOutputDto)(IQueryable(Of TEntity), Expression(Of Func(Of TEntity, Boolean)), PageCondition)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Hybrid.Extensions.QueryableExtensions.ToPage(Of TEntity, TOutputDto)(System.Linq.IQueryable(Of TEntity), System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Boolean)), Hybrid.Filter.PageCondition)
  name.vb: ToPage(Of TEntity, TOutputDto)(IQueryable(Of TEntity), Expression(Of Func(Of TEntity, Boolean)), PageCondition)
- uid: Hybrid.Extensions.QueryableExtensions.ToPage``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Int32,System.Int32,Hybrid.Filter.SortCondition[])
  commentId: M:Hybrid.Extensions.QueryableExtensions.ToPage``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Int32,System.Int32,Hybrid.Filter.SortCondition[])
  id: ToPage``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Int32,System.Int32,Hybrid.Filter.SortCondition[])
  isExtensionMethod: true
  parent: Hybrid.Extensions.QueryableExtensions
  langs:
  - csharp
  - vb
  name: ToPage<TEntity, TOutputDto>(IQueryable<TEntity>, Expression<Func<TEntity, Boolean>>, Int32, Int32, SortCondition[])
  nameWithType: QueryableExtensions.ToPage<TEntity, TOutputDto>(IQueryable<TEntity>, Expression<Func<TEntity, Boolean>>, Int32, Int32, SortCondition[])
  fullName: Hybrid.Extensions.QueryableExtensions.ToPage<TEntity, TOutputDto>(System.Linq.IQueryable<TEntity>, System.Linq.Expressions.Expression<System.Func<TEntity, System.Boolean>>, System.Int32, System.Int32, Hybrid.Filter.SortCondition[])
  type: Method
  source:
    remote:
      path: src/Hybrid/Extensions/QueryableExtensions.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: ToPage
    path: ../src/Hybrid/Extensions/QueryableExtensions.cs
    startLine: 240
  assemblies:
  - Hybrid
  namespace: Hybrid.Extensions
  summary: "\n从指定<xref href=\"System.Linq.IQueryable%601\" data-throw-if-not-resolved=\"false\"></xref>集合中查询出指定输出DTO的分页信息\n"
  example: []
  syntax:
    content: >-
      public static PageResult<TOutputDto> ToPage<TEntity, TOutputDto>(this IQueryable<TEntity> source, Expression<Func<TEntity, bool>> predicate, int pageIndex, int pageSize, SortCondition[] sortConditions)

          where TOutputDto : IOutputDto
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TEntity}}
      description: 要查询的数据集
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}}
      description: 查询条件谓语表达式
    - id: pageIndex
      type: System.Int32
      description: 分页索引
    - id: pageSize
      type: System.Int32
      description: 分页大小
    - id: sortConditions
      type: Hybrid.Filter.SortCondition[]
      description: 排序条件集合
    typeParameters:
    - id: TEntity
      description: 实体类型
    - id: TOutputDto
      description: 输出DTO数据类型
    return:
      type: Hybrid.Filter.PageResult{{TOutputDto}}
      description: 分页结果信息
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToPage(Of TEntity, TOutputDto As IOutputDto)(source As IQueryable(Of TEntity), predicate As Expression(Of Func(Of TEntity, Boolean)), pageIndex As Integer, pageSize As Integer, sortConditions As SortCondition()) As PageResult(Of TOutputDto)
  overload: Hybrid.Extensions.QueryableExtensions.ToPage*
  nameWithType.vb: QueryableExtensions.ToPage(Of TEntity, TOutputDto)(IQueryable(Of TEntity), Expression(Of Func(Of TEntity, Boolean)), Int32, Int32, SortCondition())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Hybrid.Extensions.QueryableExtensions.ToPage(Of TEntity, TOutputDto)(System.Linq.IQueryable(Of TEntity), System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Boolean)), System.Int32, System.Int32, Hybrid.Filter.SortCondition())
  name.vb: ToPage(Of TEntity, TOutputDto)(IQueryable(Of TEntity), Expression(Of Func(Of TEntity, Boolean)), Int32, Int32, SortCondition())
- uid: Hybrid.Extensions.QueryableExtensions.ToOutput``2(System.Linq.IQueryable{``0},System.Boolean)
  commentId: M:Hybrid.Extensions.QueryableExtensions.ToOutput``2(System.Linq.IQueryable{``0},System.Boolean)
  id: ToOutput``2(System.Linq.IQueryable{``0},System.Boolean)
  isExtensionMethod: true
  parent: Hybrid.Extensions.QueryableExtensions
  langs:
  - csharp
  - vb
  name: ToOutput<TEntity, TOutputDto>(IQueryable<TEntity>, Boolean)
  nameWithType: QueryableExtensions.ToOutput<TEntity, TOutputDto>(IQueryable<TEntity>, Boolean)
  fullName: Hybrid.Extensions.QueryableExtensions.ToOutput<TEntity, TOutputDto>(System.Linq.IQueryable<TEntity>, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Hybrid/Extensions/QueryableExtensions.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: ToOutput
    path: ../src/Hybrid/Extensions/QueryableExtensions.cs
    startLine: 262
  assemblies:
  - Hybrid
  namespace: Hybrid.Extensions
  summary: "\n将数据源映射为指定<code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TOutputDto</code>的集合，\n并验证数据的<xref href=\"Hybrid.Authorization.DataAuthOperation.Update\" data-throw-if-not-resolved=\"false\"></xref>,<xref href=\"Hybrid.Authorization.DataAuthOperation.Delete\" data-throw-if-not-resolved=\"false\"></xref>数据权限状态\n"
  example: []
  syntax:
    content: public static IQueryable<TOutputDto> ToOutput<TEntity, TOutputDto>(this IQueryable<TEntity> source, bool getKey = false)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TEntity}}
      description: 数据源
    - id: getKey
      type: System.Boolean
      description: 是否应用于获取缓存键时
    typeParameters:
    - id: TEntity
    - id: TOutputDto
    return:
      type: System.Linq.IQueryable{{TOutputDto}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToOutput(Of TEntity, TOutputDto)(source As IQueryable(Of TEntity), getKey As Boolean = False) As IQueryable(Of TOutputDto)
  overload: Hybrid.Extensions.QueryableExtensions.ToOutput*
  nameWithType.vb: QueryableExtensions.ToOutput(Of TEntity, TOutputDto)(IQueryable(Of TEntity), Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Hybrid.Extensions.QueryableExtensions.ToOutput(Of TEntity, TOutputDto)(System.Linq.IQueryable(Of TEntity), System.Boolean)
  name.vb: ToOutput(Of TEntity, TOutputDto)(IQueryable(Of TEntity), Boolean)
- uid: Hybrid.Extensions.QueryableExtensions.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},Hybrid.Filter.PageCondition,System.Int32@)
  commentId: M:Hybrid.Extensions.QueryableExtensions.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},Hybrid.Filter.PageCondition,System.Int32@)
  id: Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},Hybrid.Filter.PageCondition,System.Int32@)
  isExtensionMethod: true
  parent: Hybrid.Extensions.QueryableExtensions
  langs:
  - csharp
  - vb
  name: Where<TEntity>(IQueryable<TEntity>, Expression<Func<TEntity, Boolean>>, PageCondition, out Int32)
  nameWithType: QueryableExtensions.Where<TEntity>(IQueryable<TEntity>, Expression<Func<TEntity, Boolean>>, PageCondition, out Int32)
  fullName: Hybrid.Extensions.QueryableExtensions.Where<TEntity>(System.Linq.IQueryable<TEntity>, System.Linq.Expressions.Expression<System.Func<TEntity, System.Boolean>>, Hybrid.Filter.PageCondition, out System.Int32)
  type: Method
  source:
    remote:
      path: src/Hybrid/Extensions/QueryableExtensions.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: Where
    path: ../src/Hybrid/Extensions/QueryableExtensions.cs
    startLine: 293
  assemblies:
  - Hybrid
  namespace: Hybrid.Extensions
  summary: "\n从指定<xref href=\"System.Linq.IQueryable%601\" data-throw-if-not-resolved=\"false\"></xref>集合中查询指定分页条件的子数据集\n"
  example: []
  syntax:
    content: public static IQueryable<TEntity> Where<TEntity>(this IQueryable<TEntity> source, Expression<Func<TEntity, bool>> predicate, PageCondition pageCondition, out int total)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TEntity}}
      description: 要查询的数据集
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}}
      description: 查询条件谓语表达式
    - id: pageCondition
      type: Hybrid.Filter.PageCondition
      description: 分页查询条件
    - id: total
      type: System.Int32
      description: 输出符合条件的总记录数
    typeParameters:
    - id: TEntity
      description: 实体类型
    return:
      type: System.Linq.IQueryable{{TEntity}}
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Where(Of TEntity)(source As IQueryable(Of TEntity), predicate As Expression(Of Func(Of TEntity, Boolean)), pageCondition As PageCondition, ByRef total As Integer) As IQueryable(Of TEntity)
  overload: Hybrid.Extensions.QueryableExtensions.Where*
  nameWithType.vb: QueryableExtensions.Where(Of TEntity)(IQueryable(Of TEntity), Expression(Of Func(Of TEntity, Boolean)), PageCondition, ByRef Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Hybrid.Extensions.QueryableExtensions.Where(Of TEntity)(System.Linq.IQueryable(Of TEntity), System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Boolean)), Hybrid.Filter.PageCondition, ByRef System.Int32)
  name.vb: Where(Of TEntity)(IQueryable(Of TEntity), Expression(Of Func(Of TEntity, Boolean)), PageCondition, ByRef Int32)
- uid: Hybrid.Extensions.QueryableExtensions.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Int32,System.Int32,System.Int32@,Hybrid.Filter.SortCondition[])
  commentId: M:Hybrid.Extensions.QueryableExtensions.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Int32,System.Int32,System.Int32@,Hybrid.Filter.SortCondition[])
  id: Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Int32,System.Int32,System.Int32@,Hybrid.Filter.SortCondition[])
  isExtensionMethod: true
  parent: Hybrid.Extensions.QueryableExtensions
  langs:
  - csharp
  - vb
  name: Where<TEntity>(IQueryable<TEntity>, Expression<Func<TEntity, Boolean>>, Int32, Int32, out Int32, SortCondition[])
  nameWithType: QueryableExtensions.Where<TEntity>(IQueryable<TEntity>, Expression<Func<TEntity, Boolean>>, Int32, Int32, out Int32, SortCondition[])
  fullName: Hybrid.Extensions.QueryableExtensions.Where<TEntity>(System.Linq.IQueryable<TEntity>, System.Linq.Expressions.Expression<System.Func<TEntity, System.Boolean>>, System.Int32, System.Int32, out System.Int32, Hybrid.Filter.SortCondition[])
  type: Method
  source:
    remote:
      path: src/Hybrid/Extensions/QueryableExtensions.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: Where
    path: ../src/Hybrid/Extensions/QueryableExtensions.cs
    startLine: 316
  assemblies:
  - Hybrid
  namespace: Hybrid.Extensions
  summary: "\n从指定<xref href=\"System.Linq.IQueryable%601\" data-throw-if-not-resolved=\"false\"></xref>集合中查询指定分页条件的子数据集\n"
  example: []
  syntax:
    content: public static IQueryable<TEntity> Where<TEntity>(this IQueryable<TEntity> source, Expression<Func<TEntity, bool>> predicate, int pageIndex, int pageSize, out int total, SortCondition[] sortConditions = null)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TEntity}}
      description: 要查询的数据集
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}}
      description: 查询条件谓语表达式
    - id: pageIndex
      type: System.Int32
      description: 分页索引
    - id: pageSize
      type: System.Int32
      description: 分页大小
    - id: total
      type: System.Int32
      description: 输出符合条件的总记录数
    - id: sortConditions
      type: Hybrid.Filter.SortCondition[]
      description: 排序条件集合
    typeParameters:
    - id: TEntity
      description: 动态实体类型
    return:
      type: System.Linq.IQueryable{{TEntity}}
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Where(Of TEntity)(source As IQueryable(Of TEntity), predicate As Expression(Of Func(Of TEntity, Boolean)), pageIndex As Integer, pageSize As Integer, ByRef total As Integer, sortConditions As SortCondition() = Nothing) As IQueryable(Of TEntity)
  overload: Hybrid.Extensions.QueryableExtensions.Where*
  nameWithType.vb: QueryableExtensions.Where(Of TEntity)(IQueryable(Of TEntity), Expression(Of Func(Of TEntity, Boolean)), Int32, Int32, ByRef Int32, SortCondition())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Hybrid.Extensions.QueryableExtensions.Where(Of TEntity)(System.Linq.IQueryable(Of TEntity), System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Boolean)), System.Int32, System.Int32, ByRef System.Int32, Hybrid.Filter.SortCondition())
  name.vb: Where(Of TEntity)(IQueryable(Of TEntity), Expression(Of Func(Of TEntity, Boolean)), Int32, Int32, ByRef Int32, SortCondition())
- uid: Hybrid.Extensions.QueryableExtensions.Unexpired``1(System.Linq.IQueryable{``0})
  commentId: M:Hybrid.Extensions.QueryableExtensions.Unexpired``1(System.Linq.IQueryable{``0})
  id: Unexpired``1(System.Linq.IQueryable{``0})
  isExtensionMethod: true
  parent: Hybrid.Extensions.QueryableExtensions
  langs:
  - csharp
  - vb
  name: Unexpired<TEntity>(IQueryable<TEntity>)
  nameWithType: QueryableExtensions.Unexpired<TEntity>(IQueryable<TEntity>)
  fullName: Hybrid.Extensions.QueryableExtensions.Unexpired<TEntity>(System.Linq.IQueryable<TEntity>)
  type: Method
  source:
    remote:
      path: src/Hybrid/Extensions/QueryableExtensions.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: Unexpired
    path: ../src/Hybrid/Extensions/QueryableExtensions.cs
    startLine: 366
  assemblies:
  - Hybrid
  namespace: Hybrid.Extensions
  summary: "\n从指定<xref href=\"System.Linq.IQueryable%601\" data-throw-if-not-resolved=\"false\"></xref>集合中查询未过期的子数据集，用于筛选实现了<xref href=\"Hybrid.Domain.Entities.IExpirable\" data-throw-if-not-resolved=\"false\"></xref>接口的数据集\n"
  example: []
  syntax:
    content: >-
      public static IQueryable<TEntity> Unexpired<TEntity>(this IQueryable<TEntity> source)

          where TEntity : class, IExpirable
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TEntity}}
    typeParameters:
    - id: TEntity
    return:
      type: System.Linq.IQueryable{{TEntity}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Unexpired(Of TEntity As {Class, IExpirable})(source As IQueryable(Of TEntity)) As IQueryable(Of TEntity)
  overload: Hybrid.Extensions.QueryableExtensions.Unexpired*
  nameWithType.vb: QueryableExtensions.Unexpired(Of TEntity)(IQueryable(Of TEntity))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Hybrid.Extensions.QueryableExtensions.Unexpired(Of TEntity)(System.Linq.IQueryable(Of TEntity))
  name.vb: Unexpired(Of TEntity)(IQueryable(Of TEntity))
- uid: Hybrid.Extensions.QueryableExtensions.Unexpired``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:Hybrid.Extensions.QueryableExtensions.Unexpired``1(System.Collections.Generic.IEnumerable{``0})
  id: Unexpired``1(System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: Hybrid.Extensions.QueryableExtensions
  langs:
  - csharp
  - vb
  name: Unexpired<TEntity>(IEnumerable<TEntity>)
  nameWithType: QueryableExtensions.Unexpired<TEntity>(IEnumerable<TEntity>)
  fullName: Hybrid.Extensions.QueryableExtensions.Unexpired<TEntity>(System.Collections.Generic.IEnumerable<TEntity>)
  type: Method
  source:
    remote:
      path: src/Hybrid/Extensions/QueryableExtensions.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: Unexpired
    path: ../src/Hybrid/Extensions/QueryableExtensions.cs
    startLine: 378
  assemblies:
  - Hybrid
  namespace: Hybrid.Extensions
  summary: "\n从指定<xref href=\"System.Collections.Generic.IEnumerable%601\" data-throw-if-not-resolved=\"false\"></xref>集合中查询未过期的子数据集，用于筛选实现了<xref href=\"Hybrid.Domain.Entities.IExpirable\" data-throw-if-not-resolved=\"false\"></xref>接口的数据集\n"
  example: []
  syntax:
    content: >-
      public static IEnumerable<TEntity> Unexpired<TEntity>(this IEnumerable<TEntity> source)

          where TEntity : IExpirable
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TEntity}}
    typeParameters:
    - id: TEntity
    return:
      type: System.Collections.Generic.IEnumerable{{TEntity}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Unexpired(Of TEntity As IExpirable)(source As IEnumerable(Of TEntity)) As IEnumerable(Of TEntity)
  overload: Hybrid.Extensions.QueryableExtensions.Unexpired*
  nameWithType.vb: QueryableExtensions.Unexpired(Of TEntity)(IEnumerable(Of TEntity))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Hybrid.Extensions.QueryableExtensions.Unexpired(Of TEntity)(System.Collections.Generic.IEnumerable(Of TEntity))
  name.vb: Unexpired(Of TEntity)(IEnumerable(Of TEntity))
- uid: Hybrid.Extensions.QueryableExtensions.Expired``1(System.Linq.IQueryable{``0})
  commentId: M:Hybrid.Extensions.QueryableExtensions.Expired``1(System.Linq.IQueryable{``0})
  id: Expired``1(System.Linq.IQueryable{``0})
  isExtensionMethod: true
  parent: Hybrid.Extensions.QueryableExtensions
  langs:
  - csharp
  - vb
  name: Expired<TEntity>(IQueryable<TEntity>)
  nameWithType: QueryableExtensions.Expired<TEntity>(IQueryable<TEntity>)
  fullName: Hybrid.Extensions.QueryableExtensions.Expired<TEntity>(System.Linq.IQueryable<TEntity>)
  type: Method
  source:
    remote:
      path: src/Hybrid/Extensions/QueryableExtensions.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: Expired
    path: ../src/Hybrid/Extensions/QueryableExtensions.cs
    startLine: 389
  assemblies:
  - Hybrid
  namespace: Hybrid.Extensions
  summary: "\n从指定<xref href=\"System.Linq.IQueryable%601\" data-throw-if-not-resolved=\"false\"></xref>集合中查询已过期的子数据集，用于筛选实现了<xref href=\"Hybrid.Domain.Entities.IExpirable\" data-throw-if-not-resolved=\"false\"></xref>接口的数据集\n"
  example: []
  syntax:
    content: >-
      public static IQueryable<TEntity> Expired<TEntity>(this IQueryable<TEntity> source)

          where TEntity : class, IExpirable
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TEntity}}
    typeParameters:
    - id: TEntity
    return:
      type: System.Linq.IQueryable{{TEntity}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Expired(Of TEntity As {Class, IExpirable})(source As IQueryable(Of TEntity)) As IQueryable(Of TEntity)
  overload: Hybrid.Extensions.QueryableExtensions.Expired*
  nameWithType.vb: QueryableExtensions.Expired(Of TEntity)(IQueryable(Of TEntity))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Hybrid.Extensions.QueryableExtensions.Expired(Of TEntity)(System.Linq.IQueryable(Of TEntity))
  name.vb: Expired(Of TEntity)(IQueryable(Of TEntity))
- uid: Hybrid.Extensions.QueryableExtensions.Expired``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:Hybrid.Extensions.QueryableExtensions.Expired``1(System.Collections.Generic.IEnumerable{``0})
  id: Expired``1(System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: Hybrid.Extensions.QueryableExtensions
  langs:
  - csharp
  - vb
  name: Expired<TEntity>(IEnumerable<TEntity>)
  nameWithType: QueryableExtensions.Expired<TEntity>(IEnumerable<TEntity>)
  fullName: Hybrid.Extensions.QueryableExtensions.Expired<TEntity>(System.Collections.Generic.IEnumerable<TEntity>)
  type: Method
  source:
    remote:
      path: src/Hybrid/Extensions/QueryableExtensions.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: Expired
    path: ../src/Hybrid/Extensions/QueryableExtensions.cs
    startLine: 400
  assemblies:
  - Hybrid
  namespace: Hybrid.Extensions
  summary: "\n从指定<xref href=\"System.Collections.Generic.IEnumerable%601\" data-throw-if-not-resolved=\"false\"></xref>集合中查询已过期的子数据集，用于筛选实现了<xref href=\"Hybrid.Domain.Entities.IExpirable\" data-throw-if-not-resolved=\"false\"></xref>接口的数据集\n"
  example: []
  syntax:
    content: >-
      public static IEnumerable<TEntity> Expired<TEntity>(this IEnumerable<TEntity> source)

          where TEntity : IExpirable
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TEntity}}
    typeParameters:
    - id: TEntity
    return:
      type: System.Collections.Generic.IEnumerable{{TEntity}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Expired(Of TEntity As IExpirable)(source As IEnumerable(Of TEntity)) As IEnumerable(Of TEntity)
  overload: Hybrid.Extensions.QueryableExtensions.Expired*
  nameWithType.vb: QueryableExtensions.Expired(Of TEntity)(IEnumerable(Of TEntity))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Hybrid.Extensions.QueryableExtensions.Expired(Of TEntity)(System.Collections.Generic.IEnumerable(Of TEntity))
  name.vb: Expired(Of TEntity)(IEnumerable(Of TEntity))
- uid: Hybrid.Extensions.QueryableExtensions.Unlocked``1(System.Linq.IQueryable{``0})
  commentId: M:Hybrid.Extensions.QueryableExtensions.Unlocked``1(System.Linq.IQueryable{``0})
  id: Unlocked``1(System.Linq.IQueryable{``0})
  isExtensionMethod: true
  parent: Hybrid.Extensions.QueryableExtensions
  langs:
  - csharp
  - vb
  name: Unlocked<TEntity>(IQueryable<TEntity>)
  nameWithType: QueryableExtensions.Unlocked<TEntity>(IQueryable<TEntity>)
  fullName: Hybrid.Extensions.QueryableExtensions.Unlocked<TEntity>(System.Linq.IQueryable<TEntity>)
  type: Method
  source:
    remote:
      path: src/Hybrid/Extensions/QueryableExtensions.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: Unlocked
    path: ../src/Hybrid/Extensions/QueryableExtensions.cs
    startLine: 449
  assemblies:
  - Hybrid
  namespace: Hybrid.Extensions
  summary: "\n从指定<xref href=\"System.Linq.IQueryable%601\" data-throw-if-not-resolved=\"false\"></xref>数据集中查询未锁定的子数据集，用于筛选实现了<xref href=\"Hybrid.Domain.Entities.ILockable\" data-throw-if-not-resolved=\"false\"></xref>接口的数据集\n"
  example: []
  syntax:
    content: >-
      public static IQueryable<TEntity> Unlocked<TEntity>(this IQueryable<TEntity> source)

          where TEntity : class, ILockable
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TEntity}}
    typeParameters:
    - id: TEntity
    return:
      type: System.Linq.IQueryable{{TEntity}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Unlocked(Of TEntity As {Class, ILockable})(source As IQueryable(Of TEntity)) As IQueryable(Of TEntity)
  overload: Hybrid.Extensions.QueryableExtensions.Unlocked*
  nameWithType.vb: QueryableExtensions.Unlocked(Of TEntity)(IQueryable(Of TEntity))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Hybrid.Extensions.QueryableExtensions.Unlocked(Of TEntity)(System.Linq.IQueryable(Of TEntity))
  name.vb: Unlocked(Of TEntity)(IQueryable(Of TEntity))
- uid: Hybrid.Extensions.QueryableExtensions.Unlocked``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:Hybrid.Extensions.QueryableExtensions.Unlocked``1(System.Collections.Generic.IEnumerable{``0})
  id: Unlocked``1(System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: Hybrid.Extensions.QueryableExtensions
  langs:
  - csharp
  - vb
  name: Unlocked<TEntity>(IEnumerable<TEntity>)
  nameWithType: QueryableExtensions.Unlocked<TEntity>(IEnumerable<TEntity>)
  fullName: Hybrid.Extensions.QueryableExtensions.Unlocked<TEntity>(System.Collections.Generic.IEnumerable<TEntity>)
  type: Method
  source:
    remote:
      path: src/Hybrid/Extensions/QueryableExtensions.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: Unlocked
    path: ../src/Hybrid/Extensions/QueryableExtensions.cs
    startLine: 458
  assemblies:
  - Hybrid
  namespace: Hybrid.Extensions
  summary: "\n从指定<xref href=\"System.Collections.Generic.IEnumerable%601\" data-throw-if-not-resolved=\"false\"></xref>数据集中查询未锁定的子数据集，用于筛选实现了<xref href=\"Hybrid.Domain.Entities.ILockable\" data-throw-if-not-resolved=\"false\"></xref>接口的数据集\n"
  example: []
  syntax:
    content: >-
      public static IEnumerable<TEntity> Unlocked<TEntity>(this IEnumerable<TEntity> source)

          where TEntity : ILockable
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TEntity}}
    typeParameters:
    - id: TEntity
    return:
      type: System.Collections.Generic.IEnumerable{{TEntity}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Unlocked(Of TEntity As ILockable)(source As IEnumerable(Of TEntity)) As IEnumerable(Of TEntity)
  overload: Hybrid.Extensions.QueryableExtensions.Unlocked*
  nameWithType.vb: QueryableExtensions.Unlocked(Of TEntity)(IEnumerable(Of TEntity))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Hybrid.Extensions.QueryableExtensions.Unlocked(Of TEntity)(System.Collections.Generic.IEnumerable(Of TEntity))
  name.vb: Unlocked(Of TEntity)(IEnumerable(Of TEntity))
- uid: Hybrid.Extensions.QueryableExtensions.Locked``1(System.Linq.IQueryable{``0})
  commentId: M:Hybrid.Extensions.QueryableExtensions.Locked``1(System.Linq.IQueryable{``0})
  id: Locked``1(System.Linq.IQueryable{``0})
  isExtensionMethod: true
  parent: Hybrid.Extensions.QueryableExtensions
  langs:
  - csharp
  - vb
  name: Locked<TEntity>(IQueryable<TEntity>)
  nameWithType: QueryableExtensions.Locked<TEntity>(IQueryable<TEntity>)
  fullName: Hybrid.Extensions.QueryableExtensions.Locked<TEntity>(System.Linq.IQueryable<TEntity>)
  type: Method
  source:
    remote:
      path: src/Hybrid/Extensions/QueryableExtensions.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: Locked
    path: ../src/Hybrid/Extensions/QueryableExtensions.cs
    startLine: 467
  assemblies:
  - Hybrid
  namespace: Hybrid.Extensions
  summary: "\n从指定<xref href=\"System.Linq.IQueryable%601\" data-throw-if-not-resolved=\"false\"></xref>数据集中查询已锁定的子数据集，用于筛选实现了<xref href=\"Hybrid.Domain.Entities.ILockable\" data-throw-if-not-resolved=\"false\"></xref>接口的数据集\n"
  example: []
  syntax:
    content: >-
      public static IQueryable<TEntity> Locked<TEntity>(this IQueryable<TEntity> source)

          where TEntity : class, ILockable
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TEntity}}
    typeParameters:
    - id: TEntity
    return:
      type: System.Linq.IQueryable{{TEntity}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Locked(Of TEntity As {Class, ILockable})(source As IQueryable(Of TEntity)) As IQueryable(Of TEntity)
  overload: Hybrid.Extensions.QueryableExtensions.Locked*
  nameWithType.vb: QueryableExtensions.Locked(Of TEntity)(IQueryable(Of TEntity))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Hybrid.Extensions.QueryableExtensions.Locked(Of TEntity)(System.Linq.IQueryable(Of TEntity))
  name.vb: Locked(Of TEntity)(IQueryable(Of TEntity))
- uid: Hybrid.Extensions.QueryableExtensions.Locked``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:Hybrid.Extensions.QueryableExtensions.Locked``1(System.Collections.Generic.IEnumerable{``0})
  id: Locked``1(System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: Hybrid.Extensions.QueryableExtensions
  langs:
  - csharp
  - vb
  name: Locked<TEntity>(IEnumerable<TEntity>)
  nameWithType: QueryableExtensions.Locked<TEntity>(IEnumerable<TEntity>)
  fullName: Hybrid.Extensions.QueryableExtensions.Locked<TEntity>(System.Collections.Generic.IEnumerable<TEntity>)
  type: Method
  source:
    remote:
      path: src/Hybrid/Extensions/QueryableExtensions.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: Locked
    path: ../src/Hybrid/Extensions/QueryableExtensions.cs
    startLine: 476
  assemblies:
  - Hybrid
  namespace: Hybrid.Extensions
  summary: "\n从指定<xref href=\"System.Collections.Generic.IEnumerable%601\" data-throw-if-not-resolved=\"false\"></xref>数据集中查询已锁定的子数据集，用于筛选实现了<xref href=\"Hybrid.Domain.Entities.ILockable\" data-throw-if-not-resolved=\"false\"></xref>接口的数据集\n"
  example: []
  syntax:
    content: >-
      public static IEnumerable<TEntity> Locked<TEntity>(this IEnumerable<TEntity> source)

          where TEntity : ILockable
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TEntity}}
    typeParameters:
    - id: TEntity
    return:
      type: System.Collections.Generic.IEnumerable{{TEntity}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Locked(Of TEntity As ILockable)(source As IEnumerable(Of TEntity)) As IEnumerable(Of TEntity)
  overload: Hybrid.Extensions.QueryableExtensions.Locked*
  nameWithType.vb: QueryableExtensions.Locked(Of TEntity)(IEnumerable(Of TEntity))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Hybrid.Extensions.QueryableExtensions.Locked(Of TEntity)(System.Collections.Generic.IEnumerable(Of TEntity))
  name.vb: Locked(Of TEntity)(IEnumerable(Of TEntity))
- uid: Hybrid.Extensions.QueryableExtensions.MultiOrderBy``1(System.Linq.IQueryable{``0},System.String)
  commentId: M:Hybrid.Extensions.QueryableExtensions.MultiOrderBy``1(System.Linq.IQueryable{``0},System.String)
  id: MultiOrderBy``1(System.Linq.IQueryable{``0},System.String)
  isExtensionMethod: true
  parent: Hybrid.Extensions.QueryableExtensions
  langs:
  - csharp
  - vb
  name: MultiOrderBy<T>(IQueryable<T>, String)
  nameWithType: QueryableExtensions.MultiOrderBy<T>(IQueryable<T>, String)
  fullName: Hybrid.Extensions.QueryableExtensions.MultiOrderBy<T>(System.Linq.IQueryable<T>, System.String)
  type: Method
  source:
    remote:
      path: src/Hybrid/Extensions/QueryableExtensions.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: MultiOrderBy
    path: ../src/Hybrid/Extensions/QueryableExtensions.cs
    startLine: 489
  assemblies:
  - Hybrid
  namespace: Hybrid.Extensions
  summary: "\n多属性排序\n"
  example: []
  syntax:
    content: public static IOrderedQueryable<T> MultiOrderBy<T>(this IQueryable<T> query, string condition)
    parameters:
    - id: query
      type: System.Linq.IQueryable{{T}}
      description: ''
    - id: condition
      type: System.String
      description: eg:Id asc,Age desc
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Linq.IOrderedQueryable{{T}}
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MultiOrderBy(Of T)(query As IQueryable(Of T), condition As String) As IOrderedQueryable(Of T)
  overload: Hybrid.Extensions.QueryableExtensions.MultiOrderBy*
  nameWithType.vb: QueryableExtensions.MultiOrderBy(Of T)(IQueryable(Of T), String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Hybrid.Extensions.QueryableExtensions.MultiOrderBy(Of T)(System.Linq.IQueryable(Of T), System.String)
  name.vb: MultiOrderBy(Of T)(IQueryable(Of T), String)
references:
- uid: Hybrid.Extensions
  commentId: N:Hybrid.Extensions
  name: Hybrid.Extensions
  nameWithType: Hybrid.Extensions
  fullName: Hybrid.Extensions
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Hybrid.Extensions.QueryableExtensions.WhereIf*
  commentId: Overload:Hybrid.Extensions.QueryableExtensions.WhereIf
  name: WhereIf
  nameWithType: QueryableExtensions.WhereIf
  fullName: Hybrid.Extensions.QueryableExtensions.WhereIf
- uid: System.Linq.IQueryable{{T}}
  commentId: T:System.Linq.IQueryable{``0}
  parent: System.Linq
  definition: System.Linq.IQueryable`1
  name: IQueryable<T>
  nameWithType: IQueryable<T>
  fullName: System.Linq.IQueryable<T>
  nameWithType.vb: IQueryable(Of T)
  fullName.vb: System.Linq.IQueryable(Of T)
  name.vb: IQueryable(Of T)
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<T, Boolean>>
  nameWithType: Expression<Func<T, Boolean>>
  fullName: System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>
  nameWithType.vb: Expression(Of Func(Of T, Boolean))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean))
  name.vb: Expression(Of Func(Of T, Boolean))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Linq.IQueryable`1
  commentId: T:System.Linq.IQueryable`1
  isExternal: true
  name: IQueryable<T>
  nameWithType: IQueryable<T>
  fullName: System.Linq.IQueryable<T>
  nameWithType.vb: IQueryable(Of T)
  fullName.vb: System.Linq.IQueryable(Of T)
  name.vb: IQueryable(Of T)
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq
  commentId: N:System.Linq
  isExternal: true
  name: System.Linq
  nameWithType: System.Linq
  fullName: System.Linq
- uid: System.Linq.Expressions.Expression`1
  commentId: T:System.Linq.Expressions.Expression`1
  isExternal: true
  name: Expression<TDelegate>
  nameWithType: Expression<TDelegate>
  fullName: System.Linq.Expressions.Expression<TDelegate>
  nameWithType.vb: Expression(Of TDelegate)
  fullName.vb: System.Linq.Expressions.Expression(Of TDelegate)
  name.vb: Expression(Of TDelegate)
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TDelegate
    nameWithType: TDelegate
    fullName: TDelegate
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TDelegate
    nameWithType: TDelegate
    fullName: TDelegate
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions
  commentId: N:System.Linq.Expressions
  isExternal: true
  name: System.Linq.Expressions
  nameWithType: System.Linq.Expressions
  fullName: System.Linq.Expressions
- uid: System.Linq.Expressions.Expression{System.Func{{T},System.Int32,System.Boolean}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<T, Int32, Boolean>>
  nameWithType: Expression<Func<T, Int32, Boolean>>
  fullName: System.Linq.Expressions.Expression<System.Func<T, System.Int32, System.Boolean>>
  nameWithType.vb: Expression(Of Func(Of T, Int32, Boolean))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T, System.Int32, System.Boolean))
  name.vb: Expression(Of Func(Of T, Int32, Boolean))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.QueryableExtensions.OrderBy*
  commentId: Overload:Hybrid.Extensions.QueryableExtensions.OrderBy
  name: OrderBy
  nameWithType: QueryableExtensions.OrderBy
  fullName: Hybrid.Extensions.QueryableExtensions.OrderBy
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.ComponentModel.ListSortDirection
  commentId: T:System.ComponentModel.ListSortDirection
  parent: System.ComponentModel
  isExternal: true
  name: ListSortDirection
  nameWithType: ListSortDirection
  fullName: System.ComponentModel.ListSortDirection
- uid: System.Linq.IOrderedQueryable{{T}}
  commentId: T:System.Linq.IOrderedQueryable{``0}
  parent: System.Linq
  definition: System.Linq.IOrderedQueryable`1
  name: IOrderedQueryable<T>
  nameWithType: IOrderedQueryable<T>
  fullName: System.Linq.IOrderedQueryable<T>
  nameWithType.vb: IOrderedQueryable(Of T)
  fullName.vb: System.Linq.IOrderedQueryable(Of T)
  name.vb: IOrderedQueryable(Of T)
  spec.csharp:
  - uid: System.Linq.IOrderedQueryable`1
    name: IOrderedQueryable
    nameWithType: IOrderedQueryable
    fullName: System.Linq.IOrderedQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IOrderedQueryable`1
    name: IOrderedQueryable
    nameWithType: IOrderedQueryable
    fullName: System.Linq.IOrderedQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ComponentModel
  commentId: N:System.ComponentModel
  isExternal: true
  name: System.ComponentModel
  nameWithType: System.ComponentModel
  fullName: System.ComponentModel
- uid: System.Linq.IOrderedQueryable`1
  commentId: T:System.Linq.IOrderedQueryable`1
  isExternal: true
  name: IOrderedQueryable<T>
  nameWithType: IOrderedQueryable<T>
  fullName: System.Linq.IOrderedQueryable<T>
  nameWithType.vb: IOrderedQueryable(Of T)
  fullName.vb: System.Linq.IOrderedQueryable(Of T)
  name.vb: IOrderedQueryable(Of T)
  spec.csharp:
  - uid: System.Linq.IOrderedQueryable`1
    name: IOrderedQueryable
    nameWithType: IOrderedQueryable
    fullName: System.Linq.IOrderedQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IOrderedQueryable`1
    name: IOrderedQueryable
    nameWithType: IOrderedQueryable
    fullName: System.Linq.IOrderedQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Filter.SortCondition
  commentId: T:Hybrid.Filter.SortCondition
  parent: Hybrid.Filter
  name: SortCondition
  nameWithType: SortCondition
  fullName: Hybrid.Filter.SortCondition
- uid: Hybrid.Filter
  commentId: N:Hybrid.Filter
  name: Hybrid.Filter
  nameWithType: Hybrid.Filter
  fullName: Hybrid.Filter
- uid: Hybrid.Filter.SortCondition{{T}}
  commentId: T:Hybrid.Filter.SortCondition{``0}
  parent: Hybrid.Filter
  definition: Hybrid.Filter.SortCondition`1
  name: SortCondition<T>
  nameWithType: SortCondition<T>
  fullName: Hybrid.Filter.SortCondition<T>
  nameWithType.vb: SortCondition(Of T)
  fullName.vb: Hybrid.Filter.SortCondition(Of T)
  name.vb: SortCondition(Of T)
  spec.csharp:
  - uid: Hybrid.Filter.SortCondition`1
    name: SortCondition
    nameWithType: SortCondition
    fullName: Hybrid.Filter.SortCondition
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Hybrid.Filter.SortCondition`1
    name: SortCondition
    nameWithType: SortCondition
    fullName: Hybrid.Filter.SortCondition
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Filter.SortCondition`1
  commentId: T:Hybrid.Filter.SortCondition`1
  name: SortCondition<T>
  nameWithType: SortCondition<T>
  fullName: Hybrid.Filter.SortCondition<T>
  nameWithType.vb: SortCondition(Of T)
  fullName.vb: Hybrid.Filter.SortCondition(Of T)
  name.vb: SortCondition(Of T)
  spec.csharp:
  - uid: Hybrid.Filter.SortCondition`1
    name: SortCondition
    nameWithType: SortCondition
    fullName: Hybrid.Filter.SortCondition
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Hybrid.Filter.SortCondition`1
    name: SortCondition
    nameWithType: SortCondition
    fullName: Hybrid.Filter.SortCondition
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.QueryableExtensions.ThenBy*
  commentId: Overload:Hybrid.Extensions.QueryableExtensions.ThenBy
  name: ThenBy
  nameWithType: QueryableExtensions.ThenBy
  fullName: Hybrid.Extensions.QueryableExtensions.ThenBy
- uid: Hybrid.Extensions.QueryableExtensions.ToPage*
  commentId: Overload:Hybrid.Extensions.QueryableExtensions.ToPage
  name: ToPage
  nameWithType: QueryableExtensions.ToPage
  fullName: Hybrid.Extensions.QueryableExtensions.ToPage
- uid: System.Linq.IQueryable{{TEntity}}
  commentId: T:System.Linq.IQueryable{``0}
  parent: System.Linq
  definition: System.Linq.IQueryable`1
  name: IQueryable<TEntity>
  nameWithType: IQueryable<TEntity>
  fullName: System.Linq.IQueryable<TEntity>
  nameWithType.vb: IQueryable(Of TEntity)
  fullName.vb: System.Linq.IQueryable(Of TEntity)
  name.vb: IQueryable(Of TEntity)
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TEntity, Boolean>>
  nameWithType: Expression<Func<TEntity, Boolean>>
  fullName: System.Linq.Expressions.Expression<System.Func<TEntity, System.Boolean>>
  nameWithType.vb: Expression(Of Func(Of TEntity, Boolean))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Boolean))
  name.vb: Expression(Of Func(Of TEntity, Boolean))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Filter.PageCondition
  commentId: T:Hybrid.Filter.PageCondition
  parent: Hybrid.Filter
  name: PageCondition
  nameWithType: PageCondition
  fullName: Hybrid.Filter.PageCondition
- uid: System.Linq.Expressions.Expression{System.Func{{TEntity},{TResult}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{``0,``1}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TEntity, TResult>>
  nameWithType: Expression<Func<TEntity, TResult>>
  fullName: System.Linq.Expressions.Expression<System.Func<TEntity, TResult>>
  nameWithType.vb: Expression(Of Func(Of TEntity, TResult))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TEntity, TResult))
  name.vb: Expression(Of Func(Of TEntity, TResult))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Filter.PageResult{{TResult}}
  commentId: T:Hybrid.Filter.PageResult{``1}
  parent: Hybrid.Filter
  definition: Hybrid.Filter.PageResult`1
  name: PageResult<TResult>
  nameWithType: PageResult<TResult>
  fullName: Hybrid.Filter.PageResult<TResult>
  nameWithType.vb: PageResult(Of TResult)
  fullName.vb: Hybrid.Filter.PageResult(Of TResult)
  name.vb: PageResult(Of TResult)
  spec.csharp:
  - uid: Hybrid.Filter.PageResult`1
    name: PageResult
    nameWithType: PageResult
    fullName: Hybrid.Filter.PageResult
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Hybrid.Filter.PageResult`1
    name: PageResult
    nameWithType: PageResult
    fullName: Hybrid.Filter.PageResult
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Filter.PageResult`1
  commentId: T:Hybrid.Filter.PageResult`1
  name: PageResult<T>
  nameWithType: PageResult<T>
  fullName: Hybrid.Filter.PageResult<T>
  nameWithType.vb: PageResult(Of T)
  fullName.vb: Hybrid.Filter.PageResult(Of T)
  name.vb: PageResult(Of T)
  spec.csharp:
  - uid: Hybrid.Filter.PageResult`1
    name: PageResult
    nameWithType: PageResult
    fullName: Hybrid.Filter.PageResult
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Hybrid.Filter.PageResult`1
    name: PageResult
    nameWithType: PageResult
    fullName: Hybrid.Filter.PageResult
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Hybrid.Filter.SortCondition[]
  isExternal: true
  name: SortCondition[]
  nameWithType: SortCondition[]
  fullName: Hybrid.Filter.SortCondition[]
  nameWithType.vb: SortCondition()
  fullName.vb: Hybrid.Filter.SortCondition()
  name.vb: SortCondition()
  spec.csharp:
  - uid: Hybrid.Filter.SortCondition
    name: SortCondition
    nameWithType: SortCondition
    fullName: Hybrid.Filter.SortCondition
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: Hybrid.Filter.SortCondition
    name: SortCondition
    nameWithType: SortCondition
    fullName: Hybrid.Filter.SortCondition
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Hybrid.Filter.PageResult{{TOutputDto}}
  commentId: T:Hybrid.Filter.PageResult{``1}
  parent: Hybrid.Filter
  definition: Hybrid.Filter.PageResult`1
  name: PageResult<TOutputDto>
  nameWithType: PageResult<TOutputDto>
  fullName: Hybrid.Filter.PageResult<TOutputDto>
  nameWithType.vb: PageResult(Of TOutputDto)
  fullName.vb: Hybrid.Filter.PageResult(Of TOutputDto)
  name.vb: PageResult(Of TOutputDto)
  spec.csharp:
  - uid: Hybrid.Filter.PageResult`1
    name: PageResult
    nameWithType: PageResult
    fullName: Hybrid.Filter.PageResult
  - name: <
    nameWithType: <
    fullName: <
  - name: TOutputDto
    nameWithType: TOutputDto
    fullName: TOutputDto
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Hybrid.Filter.PageResult`1
    name: PageResult
    nameWithType: PageResult
    fullName: Hybrid.Filter.PageResult
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOutputDto
    nameWithType: TOutputDto
    fullName: TOutputDto
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Authorization.DataAuthOperation.Update
  commentId: F:Hybrid.Authorization.DataAuthOperation.Update
  isExternal: true
- uid: Hybrid.Authorization.DataAuthOperation.Delete
  commentId: F:Hybrid.Authorization.DataAuthOperation.Delete
  isExternal: true
- uid: Hybrid.Extensions.QueryableExtensions.ToOutput*
  commentId: Overload:Hybrid.Extensions.QueryableExtensions.ToOutput
  name: ToOutput
  nameWithType: QueryableExtensions.ToOutput
  fullName: Hybrid.Extensions.QueryableExtensions.ToOutput
- uid: System.Linq.IQueryable{{TOutputDto}}
  commentId: T:System.Linq.IQueryable{``1}
  parent: System.Linq
  definition: System.Linq.IQueryable`1
  name: IQueryable<TOutputDto>
  nameWithType: IQueryable<TOutputDto>
  fullName: System.Linq.IQueryable<TOutputDto>
  nameWithType.vb: IQueryable(Of TOutputDto)
  fullName.vb: System.Linq.IQueryable(Of TOutputDto)
  name.vb: IQueryable(Of TOutputDto)
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOutputDto
    nameWithType: TOutputDto
    fullName: TOutputDto
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOutputDto
    nameWithType: TOutputDto
    fullName: TOutputDto
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.QueryableExtensions.Where*
  commentId: Overload:Hybrid.Extensions.QueryableExtensions.Where
  name: Where
  nameWithType: QueryableExtensions.Where
  fullName: Hybrid.Extensions.QueryableExtensions.Where
- uid: Hybrid.Domain.Entities.IExpirable
  commentId: T:Hybrid.Domain.Entities.IExpirable
  parent: Hybrid.Domain.Entities
  name: IExpirable
  nameWithType: IExpirable
  fullName: Hybrid.Domain.Entities.IExpirable
- uid: Hybrid.Extensions.QueryableExtensions.Unexpired*
  commentId: Overload:Hybrid.Extensions.QueryableExtensions.Unexpired
  name: Unexpired
  nameWithType: QueryableExtensions.Unexpired
  fullName: Hybrid.Extensions.QueryableExtensions.Unexpired
- uid: Hybrid.Domain.Entities
  commentId: N:Hybrid.Domain.Entities
  name: Hybrid.Domain.Entities
  nameWithType: Hybrid.Domain.Entities
  fullName: Hybrid.Domain.Entities
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{{TEntity}}
  commentId: T:System.Collections.Generic.IEnumerable{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TEntity>
  nameWithType: IEnumerable<TEntity>
  fullName: System.Collections.Generic.IEnumerable<TEntity>
  nameWithType.vb: IEnumerable(Of TEntity)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TEntity)
  name.vb: IEnumerable(Of TEntity)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Hybrid.Extensions.QueryableExtensions.Expired*
  commentId: Overload:Hybrid.Extensions.QueryableExtensions.Expired
  name: Expired
  nameWithType: QueryableExtensions.Expired
  fullName: Hybrid.Extensions.QueryableExtensions.Expired
- uid: Hybrid.Domain.Entities.ILockable
  commentId: T:Hybrid.Domain.Entities.ILockable
  parent: Hybrid.Domain.Entities
  name: ILockable
  nameWithType: ILockable
  fullName: Hybrid.Domain.Entities.ILockable
- uid: Hybrid.Extensions.QueryableExtensions.Unlocked*
  commentId: Overload:Hybrid.Extensions.QueryableExtensions.Unlocked
  name: Unlocked
  nameWithType: QueryableExtensions.Unlocked
  fullName: Hybrid.Extensions.QueryableExtensions.Unlocked
- uid: Hybrid.Extensions.QueryableExtensions.Locked*
  commentId: Overload:Hybrid.Extensions.QueryableExtensions.Locked
  name: Locked
  nameWithType: QueryableExtensions.Locked
  fullName: Hybrid.Extensions.QueryableExtensions.Locked
- uid: Hybrid.Extensions.QueryableExtensions.MultiOrderBy*
  commentId: Overload:Hybrid.Extensions.QueryableExtensions.MultiOrderBy
  name: MultiOrderBy
  nameWithType: QueryableExtensions.MultiOrderBy
  fullName: Hybrid.Extensions.QueryableExtensions.MultiOrderBy
