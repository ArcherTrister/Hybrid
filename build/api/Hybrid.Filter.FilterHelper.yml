### YamlMime:ManagedReference
items:
- uid: Hybrid.Filter.FilterHelper
  commentId: T:Hybrid.Filter.FilterHelper
  id: FilterHelper
  parent: Hybrid.Filter
  children:
  - Hybrid.Filter.FilterHelper.CheckFilterGroup(Hybrid.Filter.FilterGroup,System.Type)
  - Hybrid.Filter.FilterHelper.GetDataFilterExpression``1(Hybrid.Filter.FilterGroup,Hybrid.Authorization.DataAuthOperation)
  - Hybrid.Filter.FilterHelper.GetExpression``1(Hybrid.Filter.FilterGroup)
  - Hybrid.Filter.FilterHelper.GetExpression``1(Hybrid.Filter.FilterRule)
  - Hybrid.Filter.FilterHelper.GetFilterOperate(System.String)
  - Hybrid.Filter.FilterHelper.ToOperateCode(Hybrid.Filter.FilterOperate)
  langs:
  - csharp
  - vb
  name: FilterHelper
  nameWithType: FilterHelper
  fullName: Hybrid.Filter.FilterHelper
  type: Class
  source:
    remote:
      path: src/Hybrid/Filter/FilterHelper.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: FilterHelper
    path: ../src/Hybrid/Filter/FilterHelper.cs
    startLine: 31
  assemblies:
  - Hybrid
  namespace: Hybrid.Filter
  summary: "\n查询表达式辅助操作类\n"
  example: []
  syntax:
    content: public static class FilterHelper
    content.vb: Public Module FilterHelper
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Hybrid.Filter.FilterHelper.GetExpression``1(Hybrid.Filter.FilterGroup)
  commentId: M:Hybrid.Filter.FilterHelper.GetExpression``1(Hybrid.Filter.FilterGroup)
  id: GetExpression``1(Hybrid.Filter.FilterGroup)
  parent: Hybrid.Filter.FilterHelper
  langs:
  - csharp
  - vb
  name: GetExpression<T>(FilterGroup)
  nameWithType: FilterHelper.GetExpression<T>(FilterGroup)
  fullName: Hybrid.Filter.FilterHelper.GetExpression<T>(Hybrid.Filter.FilterGroup)
  type: Method
  source:
    remote:
      path: src/Hybrid/Filter/FilterHelper.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: GetExpression
    path: ../src/Hybrid/Filter/FilterHelper.cs
    startLine: 135
  assemblies:
  - Hybrid
  namespace: Hybrid.Filter
  summary: "\n获取指定查询条件组的查询表达式\n"
  example: []
  syntax:
    content: public static Expression<Func<T, bool>> GetExpression<T>(FilterGroup group)
    parameters:
    - id: group
      type: Hybrid.Filter.FilterGroup
      description: 查询条件组，如果为null，则直接返回 true 表达式
    typeParameters:
    - id: T
      description: 表达式实体类型
    return:
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}}
      description: 查询表达式
    content.vb: Public Shared Function GetExpression(Of T)(group As FilterGroup) As Expression(Of Func(Of T, Boolean))
  overload: Hybrid.Filter.FilterHelper.GetExpression*
  nameWithType.vb: FilterHelper.GetExpression(Of T)(FilterGroup)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Hybrid.Filter.FilterHelper.GetExpression(Of T)(Hybrid.Filter.FilterGroup)
  name.vb: GetExpression(Of T)(FilterGroup)
- uid: Hybrid.Filter.FilterHelper.GetExpression``1(Hybrid.Filter.FilterRule)
  commentId: M:Hybrid.Filter.FilterHelper.GetExpression``1(Hybrid.Filter.FilterRule)
  id: GetExpression``1(Hybrid.Filter.FilterRule)
  parent: Hybrid.Filter.FilterHelper
  langs:
  - csharp
  - vb
  name: GetExpression<T>(FilterRule)
  nameWithType: FilterHelper.GetExpression<T>(FilterRule)
  fullName: Hybrid.Filter.FilterHelper.GetExpression<T>(Hybrid.Filter.FilterRule)
  type: Method
  source:
    remote:
      path: src/Hybrid/Filter/FilterHelper.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: GetExpression
    path: ../src/Hybrid/Filter/FilterHelper.cs
    startLine: 150
  assemblies:
  - Hybrid
  namespace: Hybrid.Filter
  summary: "\n获取指定查询条件的查询表达式\n"
  example: []
  syntax:
    content: public static Expression<Func<T, bool>> GetExpression<T>(FilterRule rule)
    parameters:
    - id: rule
      type: Hybrid.Filter.FilterRule
      description: 查询条件，如果为null，则直接返回 true 表达式
    typeParameters:
    - id: T
      description: 表达式实体类型
    return:
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}}
      description: 查询表达式
    content.vb: Public Shared Function GetExpression(Of T)(rule As FilterRule) As Expression(Of Func(Of T, Boolean))
  overload: Hybrid.Filter.FilterHelper.GetExpression*
  nameWithType.vb: FilterHelper.GetExpression(Of T)(FilterRule)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Hybrid.Filter.FilterHelper.GetExpression(Of T)(Hybrid.Filter.FilterRule)
  name.vb: GetExpression(Of T)(FilterRule)
- uid: Hybrid.Filter.FilterHelper.GetDataFilterExpression``1(Hybrid.Filter.FilterGroup,Hybrid.Authorization.DataAuthOperation)
  commentId: M:Hybrid.Filter.FilterHelper.GetDataFilterExpression``1(Hybrid.Filter.FilterGroup,Hybrid.Authorization.DataAuthOperation)
  id: GetDataFilterExpression``1(Hybrid.Filter.FilterGroup,Hybrid.Authorization.DataAuthOperation)
  parent: Hybrid.Filter.FilterHelper
  langs:
  - csharp
  - vb
  name: GetDataFilterExpression<T>(FilterGroup, DataAuthOperation)
  nameWithType: FilterHelper.GetDataFilterExpression<T>(FilterGroup, DataAuthOperation)
  fullName: Hybrid.Filter.FilterHelper.GetDataFilterExpression<T>(Hybrid.Filter.FilterGroup, Hybrid.Authorization.DataAuthOperation)
  type: Method
  source:
    remote:
      path: src/Hybrid/Filter/FilterHelper.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: GetDataFilterExpression
    path: ../src/Hybrid/Filter/FilterHelper.cs
    startLine: 165
  assemblies:
  - Hybrid
  namespace: Hybrid.Filter
  summary: "\n获取指定查询条件组的查询表达式，并综合数据权限\n"
  example: []
  syntax:
    content: public static Expression<Func<T, bool>> GetDataFilterExpression<T>(FilterGroup group = null, DataAuthOperation operation = DataAuthOperation.Read)
    parameters:
    - id: group
      type: Hybrid.Filter.FilterGroup
      description: 传入的查询条件组，为空时则只返回数据权限过滤器
    - id: operation
      type: Hybrid.Authorization.DataAuthOperation
      description: 数据权限操作
    typeParameters:
    - id: T
      description: 实体类型
    return:
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}}
      description: 综合之后的表达式
    content.vb: Public Shared Function GetDataFilterExpression(Of T)(group As FilterGroup = Nothing, operation As DataAuthOperation = DataAuthOperation.Read) As Expression(Of Func(Of T, Boolean))
  overload: Hybrid.Filter.FilterHelper.GetDataFilterExpression*
  nameWithType.vb: FilterHelper.GetDataFilterExpression(Of T)(FilterGroup, DataAuthOperation)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Hybrid.Filter.FilterHelper.GetDataFilterExpression(Of T)(Hybrid.Filter.FilterGroup, Hybrid.Authorization.DataAuthOperation)
  name.vb: GetDataFilterExpression(Of T)(FilterGroup, DataAuthOperation)
- uid: Hybrid.Filter.FilterHelper.CheckFilterGroup(Hybrid.Filter.FilterGroup,System.Type)
  commentId: M:Hybrid.Filter.FilterHelper.CheckFilterGroup(Hybrid.Filter.FilterGroup,System.Type)
  id: CheckFilterGroup(Hybrid.Filter.FilterGroup,System.Type)
  parent: Hybrid.Filter.FilterHelper
  langs:
  - csharp
  - vb
  name: CheckFilterGroup(FilterGroup, Type)
  nameWithType: FilterHelper.CheckFilterGroup(FilterGroup, Type)
  fullName: Hybrid.Filter.FilterHelper.CheckFilterGroup(Hybrid.Filter.FilterGroup, System.Type)
  type: Method
  source:
    remote:
      path: src/Hybrid/Filter/FilterHelper.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: CheckFilterGroup
    path: ../src/Hybrid/Filter/FilterHelper.cs
    startLine: 224
  assemblies:
  - Hybrid
  namespace: Hybrid.Filter
  summary: "\n验证指定查询条件组是否能正常转换为表达式\n"
  example: []
  syntax:
    content: public static OperationResult CheckFilterGroup(FilterGroup group, Type type)
    parameters:
    - id: group
      type: Hybrid.Filter.FilterGroup
      description: 查询条件组
    - id: type
      type: System.Type
      description: 实体类型
    return:
      type: Hybrid.Data.OperationResult
      description: 验证操作结果
    content.vb: Public Shared Function CheckFilterGroup(group As FilterGroup, type As Type) As OperationResult
  overload: Hybrid.Filter.FilterHelper.CheckFilterGroup*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Hybrid.Filter.FilterHelper.ToOperateCode(Hybrid.Filter.FilterOperate)
  commentId: M:Hybrid.Filter.FilterHelper.ToOperateCode(Hybrid.Filter.FilterOperate)
  id: ToOperateCode(Hybrid.Filter.FilterOperate)
  isExtensionMethod: true
  parent: Hybrid.Filter.FilterHelper
  langs:
  - csharp
  - vb
  name: ToOperateCode(FilterOperate)
  nameWithType: FilterHelper.ToOperateCode(FilterOperate)
  fullName: Hybrid.Filter.FilterHelper.ToOperateCode(Hybrid.Filter.FilterOperate)
  type: Method
  source:
    remote:
      path: src/Hybrid/Filter/FilterHelper.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: ToOperateCode
    path: ../src/Hybrid/Filter/FilterHelper.cs
    startLine: 242
  assemblies:
  - Hybrid
  namespace: Hybrid.Filter
  summary: "\n把查询操作的枚举表示转换为操作码\n"
  example: []
  syntax:
    content: public static string ToOperateCode(this FilterOperate operate)
    parameters:
    - id: operate
      type: Hybrid.Filter.FilterOperate
      description: 查询操作的枚举表示
    return:
      type: System.String
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToOperateCode(operate As FilterOperate) As String
  overload: Hybrid.Filter.FilterHelper.ToOperateCode*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Hybrid.Filter.FilterHelper.GetFilterOperate(System.String)
  commentId: M:Hybrid.Filter.FilterHelper.GetFilterOperate(System.String)
  id: GetFilterOperate(System.String)
  parent: Hybrid.Filter.FilterHelper
  langs:
  - csharp
  - vb
  name: GetFilterOperate(String)
  nameWithType: FilterHelper.GetFilterOperate(String)
  fullName: Hybrid.Filter.FilterHelper.GetFilterOperate(System.String)
  type: Method
  source:
    remote:
      path: src/Hybrid/Filter/FilterHelper.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: GetFilterOperate
    path: ../src/Hybrid/Filter/FilterHelper.cs
    startLine: 260
  assemblies:
  - Hybrid
  namespace: Hybrid.Filter
  summary: "\n获取操作码的查询操作枚举表示\n"
  example: []
  syntax:
    content: public static FilterOperate GetFilterOperate(string code)
    parameters:
    - id: code
      type: System.String
      description: 操作码
    return:
      type: Hybrid.Filter.FilterOperate
      description: ''
    content.vb: Public Shared Function GetFilterOperate(code As String) As FilterOperate
  overload: Hybrid.Filter.FilterHelper.GetFilterOperate*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Hybrid.Filter
  commentId: N:Hybrid.Filter
  name: Hybrid.Filter
  nameWithType: Hybrid.Filter
  fullName: Hybrid.Filter
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Hybrid.Filter.FilterHelper.GetExpression*
  commentId: Overload:Hybrid.Filter.FilterHelper.GetExpression
  name: GetExpression
  nameWithType: FilterHelper.GetExpression
  fullName: Hybrid.Filter.FilterHelper.GetExpression
- uid: Hybrid.Filter.FilterGroup
  commentId: T:Hybrid.Filter.FilterGroup
  parent: Hybrid.Filter
  name: FilterGroup
  nameWithType: FilterGroup
  fullName: Hybrid.Filter.FilterGroup
- uid: System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<T, Boolean>>
  nameWithType: Expression<Func<T, Boolean>>
  fullName: System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>
  nameWithType.vb: Expression(Of Func(Of T, Boolean))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean))
  name.vb: Expression(Of Func(Of T, Boolean))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression`1
  commentId: T:System.Linq.Expressions.Expression`1
  isExternal: true
  name: Expression<TDelegate>
  nameWithType: Expression<TDelegate>
  fullName: System.Linq.Expressions.Expression<TDelegate>
  nameWithType.vb: Expression(Of TDelegate)
  fullName.vb: System.Linq.Expressions.Expression(Of TDelegate)
  name.vb: Expression(Of TDelegate)
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TDelegate
    nameWithType: TDelegate
    fullName: TDelegate
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TDelegate
    nameWithType: TDelegate
    fullName: TDelegate
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions
  commentId: N:System.Linq.Expressions
  isExternal: true
  name: System.Linq.Expressions
  nameWithType: System.Linq.Expressions
  fullName: System.Linq.Expressions
- uid: Hybrid.Filter.FilterRule
  commentId: T:Hybrid.Filter.FilterRule
  parent: Hybrid.Filter
  name: FilterRule
  nameWithType: FilterRule
  fullName: Hybrid.Filter.FilterRule
- uid: Hybrid.Filter.FilterHelper.GetDataFilterExpression*
  commentId: Overload:Hybrid.Filter.FilterHelper.GetDataFilterExpression
  name: GetDataFilterExpression
  nameWithType: FilterHelper.GetDataFilterExpression
  fullName: Hybrid.Filter.FilterHelper.GetDataFilterExpression
- uid: Hybrid.Authorization.DataAuthOperation
  commentId: T:Hybrid.Authorization.DataAuthOperation
  parent: Hybrid.Authorization
  name: DataAuthOperation
  nameWithType: DataAuthOperation
  fullName: Hybrid.Authorization.DataAuthOperation
- uid: Hybrid.Authorization
  commentId: N:Hybrid.Authorization
  name: Hybrid.Authorization
  nameWithType: Hybrid.Authorization
  fullName: Hybrid.Authorization
- uid: Hybrid.Filter.FilterHelper.CheckFilterGroup*
  commentId: Overload:Hybrid.Filter.FilterHelper.CheckFilterGroup
  name: CheckFilterGroup
  nameWithType: FilterHelper.CheckFilterGroup
  fullName: Hybrid.Filter.FilterHelper.CheckFilterGroup
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: Hybrid.Data.OperationResult
  commentId: T:Hybrid.Data.OperationResult
  parent: Hybrid.Data
  name: OperationResult
  nameWithType: OperationResult
  fullName: Hybrid.Data.OperationResult
- uid: Hybrid.Data
  commentId: N:Hybrid.Data
  name: Hybrid.Data
  nameWithType: Hybrid.Data
  fullName: Hybrid.Data
- uid: Hybrid.Filter.FilterHelper.ToOperateCode*
  commentId: Overload:Hybrid.Filter.FilterHelper.ToOperateCode
  name: ToOperateCode
  nameWithType: FilterHelper.ToOperateCode
  fullName: Hybrid.Filter.FilterHelper.ToOperateCode
- uid: Hybrid.Filter.FilterOperate
  commentId: T:Hybrid.Filter.FilterOperate
  parent: Hybrid.Filter
  name: FilterOperate
  nameWithType: FilterOperate
  fullName: Hybrid.Filter.FilterOperate
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Hybrid.Filter.FilterHelper.GetFilterOperate*
  commentId: Overload:Hybrid.Filter.FilterHelper.GetFilterOperate
  name: GetFilterOperate
  nameWithType: FilterHelper.GetFilterOperate
  fullName: Hybrid.Filter.FilterHelper.GetFilterOperate
