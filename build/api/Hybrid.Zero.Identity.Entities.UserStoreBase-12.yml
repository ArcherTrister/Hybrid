### YamlMime:ManagedReference
items:
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12
  commentId: T:Hybrid.Zero.Identity.Entities.UserStoreBase`12
  id: UserStoreBase`12
  parent: Hybrid.Zero.Identity.Entities
  children:
  - Hybrid.Zero.Identity.Entities.UserStoreBase`12.#ctor(Hybrid.Domain.Repositories.IRepository{`0,`1},Hybrid.Domain.Repositories.IRepository{`4,`5},Hybrid.Domain.Repositories.IRepository{`2,`3},Hybrid.Domain.Repositories.IRepository{`6,`7},Hybrid.Domain.Repositories.IRepository{`8,`9},Hybrid.Domain.Repositories.IRepository{`10,`11},Hybrid.EventBuses.IEventBus)
  - Hybrid.Zero.Identity.Entities.UserStoreBase`12.AddClaimsAsync(`0,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.Threading.CancellationToken)
  - Hybrid.Zero.Identity.Entities.UserStoreBase`12.AddLoginAsync(`0,Microsoft.AspNetCore.Identity.UserLoginInfo,System.Threading.CancellationToken)
  - Hybrid.Zero.Identity.Entities.UserStoreBase`12.AddToRoleAsync(`0,System.String,System.Threading.CancellationToken)
  - Hybrid.Zero.Identity.Entities.UserStoreBase`12.ConvertIdFromString(System.String)
  - Hybrid.Zero.Identity.Entities.UserStoreBase`12.ConvertIdToString(`1)
  - Hybrid.Zero.Identity.Entities.UserStoreBase`12.CountCodesAsync(`0,System.Threading.CancellationToken)
  - Hybrid.Zero.Identity.Entities.UserStoreBase`12.CreateAsync(`0,System.Threading.CancellationToken)
  - Hybrid.Zero.Identity.Entities.UserStoreBase`12.DeleteAsync(`0,System.Threading.CancellationToken)
  - Hybrid.Zero.Identity.Entities.UserStoreBase`12.Dispose
  - Hybrid.Zero.Identity.Entities.UserStoreBase`12.FindByEmailAsync(System.String,System.Threading.CancellationToken)
  - Hybrid.Zero.Identity.Entities.UserStoreBase`12.FindByIdAsync(System.String,System.Threading.CancellationToken)
  - Hybrid.Zero.Identity.Entities.UserStoreBase`12.FindByLoginAsync(System.String,System.String,System.Threading.CancellationToken)
  - Hybrid.Zero.Identity.Entities.UserStoreBase`12.FindByNameAsync(System.String,System.Threading.CancellationToken)
  - Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetAccessFailedCountAsync(`0,System.Threading.CancellationToken)
  - Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetAuthenticatorKeyAsync(`0,System.Threading.CancellationToken)
  - Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetClaimsAsync(`0,System.Threading.CancellationToken)
  - Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetEmailAsync(`0,System.Threading.CancellationToken)
  - Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetEmailConfirmedAsync(`0,System.Threading.CancellationToken)
  - Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetLockoutEnabledAsync(`0,System.Threading.CancellationToken)
  - Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetLockoutEndDateAsync(`0,System.Threading.CancellationToken)
  - Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetLoginsAsync(`0,System.Threading.CancellationToken)
  - Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetNormalizedEmailAsync(`0,System.Threading.CancellationToken)
  - Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetNormalizedUserNameAsync(`0,System.Threading.CancellationToken)
  - Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetPasswordHashAsync(`0,System.Threading.CancellationToken)
  - Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetPhoneNumberAsync(`0,System.Threading.CancellationToken)
  - Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetPhoneNumberConfirmedAsync(`0,System.Threading.CancellationToken)
  - Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetRolesAsync(`0,System.Threading.CancellationToken)
  - Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetSecurityStampAsync(`0,System.Threading.CancellationToken)
  - Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetTokenAsync(`0,System.String,System.String,System.Threading.CancellationToken)
  - Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetTokensAsync(`0,System.String,System.Threading.CancellationToken)
  - Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetTwoFactorEnabledAsync(`0,System.Threading.CancellationToken)
  - Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetUserIdAsync(`0,System.Threading.CancellationToken)
  - Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetUserNameAsync(`0,System.Threading.CancellationToken)
  - Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetUsersForClaimAsync(System.Security.Claims.Claim,System.Threading.CancellationToken)
  - Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetUsersInRoleAsync(System.String,System.Threading.CancellationToken)
  - Hybrid.Zero.Identity.Entities.UserStoreBase`12.HasPasswordAsync(`0,System.Threading.CancellationToken)
  - Hybrid.Zero.Identity.Entities.UserStoreBase`12.IncrementAccessFailedCountAsync(`0,System.Threading.CancellationToken)
  - Hybrid.Zero.Identity.Entities.UserStoreBase`12.IsInRoleAsync(`0,System.String,System.Threading.CancellationToken)
  - Hybrid.Zero.Identity.Entities.UserStoreBase`12.RedeemCodeAsync(`0,System.String,System.Threading.CancellationToken)
  - Hybrid.Zero.Identity.Entities.UserStoreBase`12.RemoveClaimsAsync(`0,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.Threading.CancellationToken)
  - Hybrid.Zero.Identity.Entities.UserStoreBase`12.RemoveFromRoleAsync(`0,System.String,System.Threading.CancellationToken)
  - Hybrid.Zero.Identity.Entities.UserStoreBase`12.RemoveLoginAsync(`0,System.String,System.String,System.Threading.CancellationToken)
  - Hybrid.Zero.Identity.Entities.UserStoreBase`12.RemoveTokenAsync(`0,System.String,System.String,System.Threading.CancellationToken)
  - Hybrid.Zero.Identity.Entities.UserStoreBase`12.ReplaceClaimAsync(`0,System.Security.Claims.Claim,System.Security.Claims.Claim,System.Threading.CancellationToken)
  - Hybrid.Zero.Identity.Entities.UserStoreBase`12.ReplaceCodesAsync(`0,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)
  - Hybrid.Zero.Identity.Entities.UserStoreBase`12.ResetAccessFailedCountAsync(`0,System.Threading.CancellationToken)
  - Hybrid.Zero.Identity.Entities.UserStoreBase`12.SetAuthenticatorKeyAsync(`0,System.String,System.Threading.CancellationToken)
  - Hybrid.Zero.Identity.Entities.UserStoreBase`12.SetEmailAsync(`0,System.String,System.Threading.CancellationToken)
  - Hybrid.Zero.Identity.Entities.UserStoreBase`12.SetEmailConfirmedAsync(`0,System.Boolean,System.Threading.CancellationToken)
  - Hybrid.Zero.Identity.Entities.UserStoreBase`12.SetLockoutEnabledAsync(`0,System.Boolean,System.Threading.CancellationToken)
  - Hybrid.Zero.Identity.Entities.UserStoreBase`12.SetLockoutEndDateAsync(`0,System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)
  - Hybrid.Zero.Identity.Entities.UserStoreBase`12.SetNormalizedEmailAsync(`0,System.String,System.Threading.CancellationToken)
  - Hybrid.Zero.Identity.Entities.UserStoreBase`12.SetNormalizedUserNameAsync(`0,System.String,System.Threading.CancellationToken)
  - Hybrid.Zero.Identity.Entities.UserStoreBase`12.SetPasswordHashAsync(`0,System.String,System.Threading.CancellationToken)
  - Hybrid.Zero.Identity.Entities.UserStoreBase`12.SetPhoneNumberAsync(`0,System.String,System.Threading.CancellationToken)
  - Hybrid.Zero.Identity.Entities.UserStoreBase`12.SetPhoneNumberConfirmedAsync(`0,System.Boolean,System.Threading.CancellationToken)
  - Hybrid.Zero.Identity.Entities.UserStoreBase`12.SetSecurityStampAsync(`0,System.String,System.Threading.CancellationToken)
  - Hybrid.Zero.Identity.Entities.UserStoreBase`12.SetTokenAsync(`0,System.String,System.String,System.String,System.Threading.CancellationToken)
  - Hybrid.Zero.Identity.Entities.UserStoreBase`12.SetTwoFactorEnabledAsync(`0,System.Boolean,System.Threading.CancellationToken)
  - Hybrid.Zero.Identity.Entities.UserStoreBase`12.SetUserNameAsync(`0,System.String,System.Threading.CancellationToken)
  - Hybrid.Zero.Identity.Entities.UserStoreBase`12.ThrowIfDisposed
  - Hybrid.Zero.Identity.Entities.UserStoreBase`12.UpdateAsync(`0,System.Threading.CancellationToken)
  - Hybrid.Zero.Identity.Entities.UserStoreBase`12.Users
  langs:
  - csharp
  - vb
  name: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>
  type: Class
  source:
    remote:
      path: src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: UserStoreBase
    path: ../src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
    startLine: 42
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Zero.Identity.Entities
  summary: "\n用户仓储基类\n"
  example: []
  syntax:
    content: >-
      public abstract class UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey> : IQueryableUserStore<TUser>, IUserLoginStore<TUser>, IUserClaimStore<TUser>, IUserPasswordStore<TUser>, IUserSecurityStampStore<TUser>, IUserEmailStore<TUser>, IUserLockoutStore<TUser>, IUserPhoneNumberStore<TUser>, IUserTwoFactorStore<TUser>, IHybridUserAuthenticationTokenStore<TUser>, IUserAuthenticationTokenStore<TUser>, IUserAuthenticatorKeyStore<TUser>, IUserTwoFactorRecoveryCodeStore<TUser>, IUserRoleStore<TUser>, IUserStore<TUser>, IDisposable where TUser : UserBase<TUserKey> where TUserKey : IEquatable<TUserKey> where TUserClaim : UserClaimBase<TUserClaimKey, TUserKey>, new()
          where TUserClaimKey : IEquatable<TUserClaimKey> where TUserLogin : UserLoginBase<TUserLoginKey, TUserKey>, new()
          where TUserLoginKey : IEquatable<TUserLoginKey> where TUserToken : UserTokenBase<TUserTokenKey, TUserKey>, new()
          where TUserTokenKey : IEquatable<TUserTokenKey> where TRole : RoleBase<TRoleKey> where TRoleKey : IEquatable<TRoleKey> where TUserRole : UserRoleBase<TUserRoleKey, TUserKey, TRoleKey>, new()
          where TUserRoleKey : IEquatable<TUserRoleKey>
    typeParameters:
    - id: TUser
      description: 用户类型
    - id: TUserKey
      description: 用户编号类型
    - id: TUserClaim
      description: 用户声明类型
    - id: TUserClaimKey
      description: 用户声明编号类型
    - id: TUserLogin
      description: 用户登录类型
    - id: TUserLoginKey
      description: 用户登录编号类型
    - id: TUserToken
      description: 用户令牌类型
    - id: TUserTokenKey
      description: 用户令牌编号类型
    - id: TRole
      description: 角色类型
    - id: TRoleKey
      description: 角色编号类型
    - id: TUserRole
      description: 用户角色类型
    - id: TUserRoleKey
      description: 用户角色编号类型
    content.vb: >-
      Public MustInherit Class UserStoreBase(Of TUser As UserBase(Of TUserKey), TUserKey As IEquatable(Of TUserKey), TUserClaim As {UserClaimBase(Of TUserClaimKey, TUserKey), New}, TUserClaimKey As IEquatable(Of TUserClaimKey), TUserLogin As {UserLoginBase(Of TUserLoginKey, TUserKey), New}, TUserLoginKey As IEquatable(Of TUserLoginKey), TUserToken As {UserTokenBase(Of TUserTokenKey, TUserKey), New}, TUserTokenKey As IEquatable(Of TUserTokenKey), TRole As RoleBase(Of TRoleKey), TRoleKey As IEquatable(Of TRoleKey), TUserRole As {UserRoleBase(Of TUserRoleKey, TUserKey, TRoleKey), New}, TUserRoleKey As IEquatable(Of TUserRoleKey))
          Implements IQueryableUserStore(Of TUser), IUserLoginStore(Of TUser), IUserClaimStore(Of TUser), IUserPasswordStore(Of TUser), IUserSecurityStampStore(Of TUser), IUserEmailStore(Of TUser), IUserLockoutStore(Of TUser), IUserPhoneNumberStore(Of TUser), IUserTwoFactorStore(Of TUser), IHybridUserAuthenticationTokenStore(Of TUser), IUserAuthenticationTokenStore(Of TUser), IUserAuthenticatorKeyStore(Of TUser), IUserTwoFactorRecoveryCodeStore(Of TUser), IUserRoleStore(Of TUser), IUserStore(Of TUser), IDisposable
  inheritance:
  - System.Object
  implements:
  - Microsoft.AspNetCore.Identity.IQueryableUserStore{{TUser}}
  - Microsoft.AspNetCore.Identity.IUserLoginStore{{TUser}}
  - Microsoft.AspNetCore.Identity.IUserClaimStore{{TUser}}
  - Microsoft.AspNetCore.Identity.IUserPasswordStore{{TUser}}
  - Microsoft.AspNetCore.Identity.IUserSecurityStampStore{{TUser}}
  - Microsoft.AspNetCore.Identity.IUserEmailStore{{TUser}}
  - Microsoft.AspNetCore.Identity.IUserLockoutStore{{TUser}}
  - Microsoft.AspNetCore.Identity.IUserPhoneNumberStore{{TUser}}
  - Microsoft.AspNetCore.Identity.IUserTwoFactorStore{{TUser}}
  - Hybrid.Zero.Identity.IHybridUserAuthenticationTokenStore{{TUser}}
  - Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore{{TUser}}
  - Microsoft.AspNetCore.Identity.IUserAuthenticatorKeyStore{{TUser}}
  - Microsoft.AspNetCore.Identity.IUserTwoFactorRecoveryCodeStore{{TUser}}
  - Microsoft.AspNetCore.Identity.IUserRoleStore{{TUser}}
  - Microsoft.AspNetCore.Identity.IUserStore{{TUser}}
  - System.IDisposable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - System.Object.Hybrid.Extensions.ObjectExtensions.CastTo(System.Type)
  - System.Object.Hybrid.Extensions.ObjectExtensions.CastTo``1
  - System.Object.Hybrid.Extensions.ObjectExtensions.CastTo``1({T})
  - Hybrid.Zero.Identity.Entities.UserStoreBase`12.Hybrid.Extensions.ObjectExtensions.IsIn``1(Hybrid.Zero.Identity.Entities.UserStoreBase{{TUser},{TUserKey},{TUserClaim},{TUserClaimKey},{TUserLogin},{TUserLoginKey},{TUserToken},{TUserTokenKey},{TRole},{TRoleKey},{TUserRole},{TUserRoleKey}}[])
  - System.Object.Hybrid.Extensions.ObjectExtensions.ToDynamic
  - Hybrid.Zero.Identity.Entities.UserStoreBase`12.Hybrid.Extensions.ObjectExtensions.DeepClone``1
  - Hybrid.Zero.Identity.Entities.UserStoreBase`12.Hybrid.Extensions.ParameterCheckExtensions.Required``1(System.Func{Hybrid.Zero.Identity.Entities.UserStoreBase{{TUser},{TUserKey},{TUserClaim},{TUserClaimKey},{TUserLogin},{TUserLoginKey},{TUserToken},{TUserTokenKey},{TRole},{TRoleKey},{TUserRole},{TUserRoleKey}},System.Boolean},System.String)
  - Hybrid.Zero.Identity.Entities.UserStoreBase`12.Hybrid.Extensions.ParameterCheckExtensions.Required``2(System.Func{Hybrid.Zero.Identity.Entities.UserStoreBase{{TUser},{TUserKey},{TUserClaim},{TUserClaimKey},{TUserLogin},{TUserLoginKey},{TUserToken},{TUserTokenKey},{TRole},{TRoleKey},{TUserRole},{TUserRoleKey}},System.Boolean},System.String)
  - Hybrid.Zero.Identity.Entities.UserStoreBase`12.Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(System.String)
  - Hybrid.Zero.Identity.Entities.UserStoreBase`12.Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{Hybrid.Zero.Identity.Entities.UserStoreBase{{TUser},{TUserKey},{TUserClaim},{TUserClaimKey},{TUserLogin},{TUserLoginKey},{TUserToken},{TUserTokenKey},{TRole},{TRoleKey},{TUserRole},{TUserRoleKey}}},System.Action{System.Exception},System.Action{Hybrid.Zero.Identity.Entities.UserStoreBase{{TUser},{TUserKey},{TUserClaim},{TUserClaimKey},{TUserLogin},{TUserLoginKey},{TUserToken},{TUserTokenKey},{TRole},{TRoleKey},{TUserRole},{TUserRoleKey}}})
  - Hybrid.Zero.Identity.Entities.UserStoreBase`12.Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{Hybrid.Zero.Identity.Entities.UserStoreBase{{TUser},{TUserKey},{TUserClaim},{TUserClaimKey},{TUserLogin},{TUserLoginKey},{TUserToken},{TUserTokenKey},{TRole},{TRoleKey},{TUserRole},{TUserRoleKey}}},System.Action{System.Exception})
  - Hybrid.Zero.Identity.Entities.UserStoreBase`12.Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{Hybrid.Zero.Identity.Entities.UserStoreBase{{TUser},{TUserKey},{TUserClaim},{TUserClaimKey},{TUserLogin},{TUserLoginKey},{TUserToken},{TUserTokenKey},{TRole},{TRoleKey},{TUserRole},{TUserRoleKey}},{TResult}},System.Action{System.Exception},System.Action{Hybrid.Zero.Identity.Entities.UserStoreBase{{TUser},{TUserKey},{TUserClaim},{TUserClaimKey},{TUserLogin},{TUserLoginKey},{TUserToken},{TUserTokenKey},{TRole},{TRoleKey},{TUserRole},{TUserRoleKey}}})
  - Hybrid.Zero.Identity.Entities.UserStoreBase`12.Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{Hybrid.Zero.Identity.Entities.UserStoreBase{{TUser},{TUserKey},{TUserClaim},{TUserClaimKey},{TUserLogin},{TUserLoginKey},{TUserToken},{TUserTokenKey},{TRole},{TRoleKey},{TUserRole},{TUserRoleKey}},{TResult}},System.Action{System.Exception})
  - Hybrid.Zero.Identity.Entities.UserStoreBase`12.Hybrid.Extensions.TryCatchExtensions.TryFinally``1(System.Action{Hybrid.Zero.Identity.Entities.UserStoreBase{{TUser},{TUserKey},{TUserClaim},{TUserClaimKey},{TUserLogin},{TUserLoginKey},{TUserToken},{TUserTokenKey},{TRole},{TRoleKey},{TUserRole},{TUserRoleKey}}},System.Action{Hybrid.Zero.Identity.Entities.UserStoreBase{{TUser},{TUserKey},{TUserClaim},{TUserClaimKey},{TUserLogin},{TUserLoginKey},{TUserToken},{TUserTokenKey},{TRole},{TRoleKey},{TUserRole},{TUserRoleKey}}})
  - System.Object.Hybrid.Json.JsonExtensions.ToJsonString(System.Boolean,System.Boolean)
  - System.Object.Hybrid.Mapping.MapperExtensions.MapTo``1
  - Hybrid.Zero.Identity.Entities.UserStoreBase`12.Hybrid.Mapping.MapperExtensions.MapTo``2({TTarget})
  - System.Object.Hybrid.Reflection.LockExtensions.Locking(System.Action)
  - Hybrid.Zero.Identity.Entities.UserStoreBase`12.Hybrid.Reflection.LockExtensions.Locking``1(System.Action{Hybrid.Zero.Identity.Entities.UserStoreBase{{TUser},{TUserKey},{TUserClaim},{TUserClaimKey},{TUserLogin},{TUserLoginKey},{TUserToken},{TUserTokenKey},{TRole},{TRoleKey},{TUserRole},{TUserRoleKey}}})
  - System.Object.Hybrid.Reflection.LockExtensions.Locking``1(System.Func{{TResult}})
  - Hybrid.Zero.Identity.Entities.UserStoreBase`12.Hybrid.Reflection.LockExtensions.Locking``2(System.Func{Hybrid.Zero.Identity.Entities.UserStoreBase{{TUser},{TUserKey},{TUserClaim},{TUserClaimKey},{TUserLogin},{TUserLoginKey},{TUserToken},{TUserTokenKey},{TRole},{TRoleKey},{TUserRole},{TUserRoleKey}},{TResult}})
  - Hybrid.Zero.Identity.Entities.UserStoreBase`12.Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2
  - Hybrid.Zero.Identity.Entities.UserStoreBase`12.Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(System.Security.Principal.IPrincipal)
  - Hybrid.Zero.Identity.Entities.UserStoreBase`12.Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(System.Security.Principal.IPrincipal)
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey)
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey)
  name.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey)
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.#ctor(Hybrid.Domain.Repositories.IRepository{`0,`1},Hybrid.Domain.Repositories.IRepository{`4,`5},Hybrid.Domain.Repositories.IRepository{`2,`3},Hybrid.Domain.Repositories.IRepository{`6,`7},Hybrid.Domain.Repositories.IRepository{`8,`9},Hybrid.Domain.Repositories.IRepository{`10,`11},Hybrid.EventBuses.IEventBus)
  commentId: M:Hybrid.Zero.Identity.Entities.UserStoreBase`12.#ctor(Hybrid.Domain.Repositories.IRepository{`0,`1},Hybrid.Domain.Repositories.IRepository{`4,`5},Hybrid.Domain.Repositories.IRepository{`2,`3},Hybrid.Domain.Repositories.IRepository{`6,`7},Hybrid.Domain.Repositories.IRepository{`8,`9},Hybrid.Domain.Repositories.IRepository{`10,`11},Hybrid.EventBuses.IEventBus)
  id: '#ctor(Hybrid.Domain.Repositories.IRepository{`0,`1},Hybrid.Domain.Repositories.IRepository{`4,`5},Hybrid.Domain.Repositories.IRepository{`2,`3},Hybrid.Domain.Repositories.IRepository{`6,`7},Hybrid.Domain.Repositories.IRepository{`8,`9},Hybrid.Domain.Repositories.IRepository{`10,`11},Hybrid.EventBuses.IEventBus)'
  parent: Hybrid.Zero.Identity.Entities.UserStoreBase`12
  langs:
  - csharp
  - vb
  name: UserStoreBase(IRepository<TUser, TUserKey>, IRepository<TUserLogin, TUserLoginKey>, IRepository<TUserClaim, TUserClaimKey>, IRepository<TUserToken, TUserTokenKey>, IRepository<TRole, TRoleKey>, IRepository<TUserRole, TUserRoleKey>, IEventBus)
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.UserStoreBase(IRepository<TUser, TUserKey>, IRepository<TUserLogin, TUserLoginKey>, IRepository<TUserClaim, TUserClaimKey>, IRepository<TUserToken, TUserTokenKey>, IRepository<TRole, TRoleKey>, IRepository<TUserRole, TUserRoleKey>, IEventBus)
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.UserStoreBase(Hybrid.Domain.Repositories.IRepository<TUser, TUserKey>, Hybrid.Domain.Repositories.IRepository<TUserLogin, TUserLoginKey>, Hybrid.Domain.Repositories.IRepository<TUserClaim, TUserClaimKey>, Hybrid.Domain.Repositories.IRepository<TUserToken, TUserTokenKey>, Hybrid.Domain.Repositories.IRepository<TRole, TRoleKey>, Hybrid.Domain.Repositories.IRepository<TUserRole, TUserRoleKey>, Hybrid.EventBuses.IEventBus)
  type: Constructor
  source:
    remote:
      path: src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: .ctor
    path: ../src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
    startLine: 88
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Zero.Identity.Entities
  summary: "\n初始化一个<xref href=\"Hybrid.Zero.Identity.Entities.UserStoreBase%6012\" data-throw-if-not-resolved=\"false\"></xref>类型的新实例\n"
  example: []
  syntax:
    content: protected UserStoreBase(IRepository<TUser, TUserKey> userRepository, IRepository<TUserLogin, TUserLoginKey> userLoginRepository, IRepository<TUserClaim, TUserClaimKey> userClaimRepository, IRepository<TUserToken, TUserTokenKey> userTokenRepository, IRepository<TRole, TRoleKey> roleRepository, IRepository<TUserRole, TUserRoleKey> userRoleRepository, IEventBus eventBus)
    parameters:
    - id: userRepository
      type: Hybrid.Domain.Repositories.IRepository{{TUser},{TUserKey}}
      description: 用户仓储
    - id: userLoginRepository
      type: Hybrid.Domain.Repositories.IRepository{{TUserLogin},{TUserLoginKey}}
      description: 用户登录仓储
    - id: userClaimRepository
      type: Hybrid.Domain.Repositories.IRepository{{TUserClaim},{TUserClaimKey}}
      description: 用户声明仓储
    - id: userTokenRepository
      type: Hybrid.Domain.Repositories.IRepository{{TUserToken},{TUserTokenKey}}
      description: 用户令牌仓储
    - id: roleRepository
      type: Hybrid.Domain.Repositories.IRepository{{TRole},{TRoleKey}}
      description: 角色仓储
    - id: userRoleRepository
      type: Hybrid.Domain.Repositories.IRepository{{TUserRole},{TUserRoleKey}}
      description: 用户角色仓储
    - id: eventBus
      type: Hybrid.EventBuses.IEventBus
      description: 事件总线
    content.vb: Protected Sub New(userRepository As IRepository(Of TUser, TUserKey), userLoginRepository As IRepository(Of TUserLogin, TUserLoginKey), userClaimRepository As IRepository(Of TUserClaim, TUserClaimKey), userTokenRepository As IRepository(Of TUserToken, TUserTokenKey), roleRepository As IRepository(Of TRole, TRoleKey), userRoleRepository As IRepository(Of TUserRole, TUserRoleKey), eventBus As IEventBus)
  overload: Hybrid.Zero.Identity.Entities.UserStoreBase`12.#ctor*
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).UserStoreBase(IRepository(Of TUser, TUserKey), IRepository(Of TUserLogin, TUserLoginKey), IRepository(Of TUserClaim, TUserClaimKey), IRepository(Of TUserToken, TUserTokenKey), IRepository(Of TRole, TRoleKey), IRepository(Of TUserRole, TUserRoleKey), IEventBus)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).UserStoreBase(Hybrid.Domain.Repositories.IRepository(Of TUser, TUserKey), Hybrid.Domain.Repositories.IRepository(Of TUserLogin, TUserLoginKey), Hybrid.Domain.Repositories.IRepository(Of TUserClaim, TUserClaimKey), Hybrid.Domain.Repositories.IRepository(Of TUserToken, TUserTokenKey), Hybrid.Domain.Repositories.IRepository(Of TRole, TRoleKey), Hybrid.Domain.Repositories.IRepository(Of TUserRole, TUserRoleKey), Hybrid.EventBuses.IEventBus)
  name.vb: UserStoreBase(IRepository(Of TUser, TUserKey), IRepository(Of TUserLogin, TUserLoginKey), IRepository(Of TUserClaim, TUserClaimKey), IRepository(Of TUserToken, TUserTokenKey), IRepository(Of TRole, TRoleKey), IRepository(Of TUserRole, TUserRoleKey), IEventBus)
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.Users
  commentId: P:Hybrid.Zero.Identity.Entities.UserStoreBase`12.Users
  id: Users
  parent: Hybrid.Zero.Identity.Entities.UserStoreBase`12
  langs:
  - csharp
  - vb
  name: Users
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.Users
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.Users
  type: Property
  source:
    remote:
      path: src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: Users
    path: ../src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
    startLine: 113
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Zero.Identity.Entities
  summary: "\nReturns an <xref href=\"System.Linq.IQueryable%601\" data-throw-if-not-resolved=\"false\"></xref> collection of users.\n"
  example: []
  syntax:
    content: public IQueryable<TUser> Users { get; }
    parameters: []
    return:
      type: System.Linq.IQueryable{{TUser}}
      description: An <xref href="System.Linq.IQueryable%601" data-throw-if-not-resolved="false"></xref> collection of users.
    content.vb: Public ReadOnly Property Users As IQueryable(Of TUser)
  overload: Hybrid.Zero.Identity.Entities.UserStoreBase`12.Users*
  implements:
  - Microsoft.AspNetCore.Identity.IQueryableUserStore{{TUser}}.Users
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).Users
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).Users
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.Dispose
  commentId: M:Hybrid.Zero.Identity.Entities.UserStoreBase`12.Dispose
  id: Dispose
  parent: Hybrid.Zero.Identity.Entities.UserStoreBase`12
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.Dispose()
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.Dispose()
  type: Method
  source:
    remote:
      path: src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: Dispose
    path: ../src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
    startLine: 120
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Zero.Identity.Entities
  summary: Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
  example: []
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  overload: Hybrid.Zero.Identity.Entities.UserStoreBase`12.Dispose*
  implements:
  - System.IDisposable.Dispose
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).Dispose()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).Dispose()
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetUserIdAsync(`0,System.Threading.CancellationToken)
  commentId: M:Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetUserIdAsync(`0,System.Threading.CancellationToken)
  id: GetUserIdAsync(`0,System.Threading.CancellationToken)
  parent: Hybrid.Zero.Identity.Entities.UserStoreBase`12
  langs:
  - csharp
  - vb
  name: GetUserIdAsync(TUser, CancellationToken)
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.GetUserIdAsync(TUser, CancellationToken)
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.GetUserIdAsync(TUser, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: GetUserIdAsync
    path: ../src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
    startLine: 135
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Zero.Identity.Entities
  summary: "\nGets the user identifier for the specified <code data-dev-comment-type=\"paramref\" class=\"paramref\">user</code>.\n"
  example: []
  syntax:
    content: public Task<string> GetUserIdAsync(TUser user, CancellationToken cancellationToken)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose identifier should be retrieved.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation, containing the identifier for the specified <code data-dev-comment-type="paramref" class="paramref">user</code>.
    content.vb: Public Function GetUserIdAsync(user As TUser, cancellationToken As CancellationToken) As Task(Of String)
  overload: Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetUserIdAsync*
  implements:
  - Microsoft.AspNetCore.Identity.IUserStore{{TUser}}.GetUserIdAsync({TUser},System.Threading.CancellationToken)
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).GetUserIdAsync(TUser, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).GetUserIdAsync(TUser, System.Threading.CancellationToken)
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetUserNameAsync(`0,System.Threading.CancellationToken)
  commentId: M:Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetUserNameAsync(`0,System.Threading.CancellationToken)
  id: GetUserNameAsync(`0,System.Threading.CancellationToken)
  parent: Hybrid.Zero.Identity.Entities.UserStoreBase`12
  langs:
  - csharp
  - vb
  name: GetUserNameAsync(TUser, CancellationToken)
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.GetUserNameAsync(TUser, CancellationToken)
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.GetUserNameAsync(TUser, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: GetUserNameAsync
    path: ../src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
    startLine: 150
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Zero.Identity.Entities
  summary: "\nGets the user name for the specified <code data-dev-comment-type=\"paramref\" class=\"paramref\">user</code>.\n"
  example: []
  syntax:
    content: public Task<string> GetUserNameAsync(TUser user, CancellationToken cancellationToken)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose name should be retrieved.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation, containing the name for the specified <code data-dev-comment-type="paramref" class="paramref">user</code>.
    content.vb: Public Function GetUserNameAsync(user As TUser, cancellationToken As CancellationToken) As Task(Of String)
  overload: Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetUserNameAsync*
  implements:
  - Microsoft.AspNetCore.Identity.IUserStore{{TUser}}.GetUserNameAsync({TUser},System.Threading.CancellationToken)
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).GetUserNameAsync(TUser, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).GetUserNameAsync(TUser, System.Threading.CancellationToken)
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.SetUserNameAsync(`0,System.String,System.Threading.CancellationToken)
  commentId: M:Hybrid.Zero.Identity.Entities.UserStoreBase`12.SetUserNameAsync(`0,System.String,System.Threading.CancellationToken)
  id: SetUserNameAsync(`0,System.String,System.Threading.CancellationToken)
  parent: Hybrid.Zero.Identity.Entities.UserStoreBase`12
  langs:
  - csharp
  - vb
  name: SetUserNameAsync(TUser, String, CancellationToken)
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.SetUserNameAsync(TUser, String, CancellationToken)
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.SetUserNameAsync(TUser, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: SetUserNameAsync
    path: ../src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
    startLine: 166
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Zero.Identity.Entities
  summary: "\nSets the given <code data-dev-comment-type=\"paramref\" class=\"paramref\">userName</code> for the specified <code data-dev-comment-type=\"paramref\" class=\"paramref\">user</code>.\n"
  example: []
  syntax:
    content: public Task SetUserNameAsync(TUser user, string userName, CancellationToken cancellationToken)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose name should be set.
    - id: userName
      type: System.String
      description: The user name to set.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task
      description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
    content.vb: Public Function SetUserNameAsync(user As TUser, userName As String, cancellationToken As CancellationToken) As Task
  overload: Hybrid.Zero.Identity.Entities.UserStoreBase`12.SetUserNameAsync*
  implements:
  - Microsoft.AspNetCore.Identity.IUserStore{{TUser}}.SetUserNameAsync({TUser},System.String,System.Threading.CancellationToken)
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).SetUserNameAsync(TUser, String, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).SetUserNameAsync(TUser, System.String, System.Threading.CancellationToken)
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetNormalizedUserNameAsync(`0,System.Threading.CancellationToken)
  commentId: M:Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetNormalizedUserNameAsync(`0,System.Threading.CancellationToken)
  id: GetNormalizedUserNameAsync(`0,System.Threading.CancellationToken)
  parent: Hybrid.Zero.Identity.Entities.UserStoreBase`12
  langs:
  - csharp
  - vb
  name: GetNormalizedUserNameAsync(TUser, CancellationToken)
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.GetNormalizedUserNameAsync(TUser, CancellationToken)
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.GetNormalizedUserNameAsync(TUser, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: GetNormalizedUserNameAsync
    path: ../src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
    startLine: 182
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Zero.Identity.Entities
  summary: "\nGets the normalized user name for the specified <code data-dev-comment-type=\"paramref\" class=\"paramref\">user</code>.\n"
  example: []
  syntax:
    content: public Task<string> GetNormalizedUserNameAsync(TUser user, CancellationToken cancellationToken)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose normalized name should be retrieved.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation, containing the normalized user name for the specified <code data-dev-comment-type="paramref" class="paramref">user</code>.
    content.vb: Public Function GetNormalizedUserNameAsync(user As TUser, cancellationToken As CancellationToken) As Task(Of String)
  overload: Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetNormalizedUserNameAsync*
  implements:
  - Microsoft.AspNetCore.Identity.IUserStore{{TUser}}.GetNormalizedUserNameAsync({TUser},System.Threading.CancellationToken)
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).GetNormalizedUserNameAsync(TUser, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).GetNormalizedUserNameAsync(TUser, System.Threading.CancellationToken)
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.SetNormalizedUserNameAsync(`0,System.String,System.Threading.CancellationToken)
  commentId: M:Hybrid.Zero.Identity.Entities.UserStoreBase`12.SetNormalizedUserNameAsync(`0,System.String,System.Threading.CancellationToken)
  id: SetNormalizedUserNameAsync(`0,System.String,System.Threading.CancellationToken)
  parent: Hybrid.Zero.Identity.Entities.UserStoreBase`12
  langs:
  - csharp
  - vb
  name: SetNormalizedUserNameAsync(TUser, String, CancellationToken)
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.SetNormalizedUserNameAsync(TUser, String, CancellationToken)
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.SetNormalizedUserNameAsync(TUser, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: SetNormalizedUserNameAsync
    path: ../src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
    startLine: 198
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Zero.Identity.Entities
  summary: "\nSets the given normalized name for the specified <code data-dev-comment-type=\"paramref\" class=\"paramref\">user</code>.\n"
  example: []
  syntax:
    content: public Task SetNormalizedUserNameAsync(TUser user, string normalizedName, CancellationToken cancellationToken)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose name should be set.
    - id: normalizedName
      type: System.String
      description: The normalized name to set.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task
      description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
    content.vb: Public Function SetNormalizedUserNameAsync(user As TUser, normalizedName As String, cancellationToken As CancellationToken) As Task
  overload: Hybrid.Zero.Identity.Entities.UserStoreBase`12.SetNormalizedUserNameAsync*
  implements:
  - Microsoft.AspNetCore.Identity.IUserStore{{TUser}}.SetNormalizedUserNameAsync({TUser},System.String,System.Threading.CancellationToken)
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).SetNormalizedUserNameAsync(TUser, String, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).SetNormalizedUserNameAsync(TUser, System.String, System.Threading.CancellationToken)
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.CreateAsync(`0,System.Threading.CancellationToken)
  commentId: M:Hybrid.Zero.Identity.Entities.UserStoreBase`12.CreateAsync(`0,System.Threading.CancellationToken)
  id: CreateAsync(`0,System.Threading.CancellationToken)
  parent: Hybrid.Zero.Identity.Entities.UserStoreBase`12
  langs:
  - csharp
  - vb
  name: CreateAsync(TUser, CancellationToken)
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.CreateAsync(TUser, CancellationToken)
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.CreateAsync(TUser, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: CreateAsync
    path: ../src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
    startLine: 214
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Zero.Identity.Entities
  summary: "\nCreates the specified <code data-dev-comment-type=\"paramref\" class=\"paramref\">user</code> in the user store.\n"
  example: []
  syntax:
    content: public Task<IdentityResult> CreateAsync(TUser user, CancellationToken cancellationToken)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user to create.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task{Microsoft.AspNetCore.Identity.IdentityResult}
      description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation, containing the <xref href="Microsoft.AspNetCore.Identity.IdentityResult" data-throw-if-not-resolved="false"></xref> of the creation operation.
    content.vb: Public Function CreateAsync(user As TUser, cancellationToken As CancellationToken) As Task(Of IdentityResult)
  overload: Hybrid.Zero.Identity.Entities.UserStoreBase`12.CreateAsync*
  implements:
  - Microsoft.AspNetCore.Identity.IUserStore{{TUser}}.CreateAsync({TUser},System.Threading.CancellationToken)
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).CreateAsync(TUser, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).CreateAsync(TUser, System.Threading.CancellationToken)
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.UpdateAsync(`0,System.Threading.CancellationToken)
  commentId: M:Hybrid.Zero.Identity.Entities.UserStoreBase`12.UpdateAsync(`0,System.Threading.CancellationToken)
  id: UpdateAsync(`0,System.Threading.CancellationToken)
  parent: Hybrid.Zero.Identity.Entities.UserStoreBase`12
  langs:
  - csharp
  - vb
  name: UpdateAsync(TUser, CancellationToken)
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.UpdateAsync(TUser, CancellationToken)
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.UpdateAsync(TUser, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: UpdateAsync
    path: ../src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
    startLine: 254
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Zero.Identity.Entities
  summary: "\nUpdates the specified <code data-dev-comment-type=\"paramref\" class=\"paramref\">user</code> in the user store.\n"
  example: []
  syntax:
    content: public Task<IdentityResult> UpdateAsync(TUser user, CancellationToken cancellationToken)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user to update.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task{Microsoft.AspNetCore.Identity.IdentityResult}
      description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation, containing the <xref href="Microsoft.AspNetCore.Identity.IdentityResult" data-throw-if-not-resolved="false"></xref> of the update operation.
    content.vb: Public Function UpdateAsync(user As TUser, cancellationToken As CancellationToken) As Task(Of IdentityResult)
  overload: Hybrid.Zero.Identity.Entities.UserStoreBase`12.UpdateAsync*
  implements:
  - Microsoft.AspNetCore.Identity.IUserStore{{TUser}}.UpdateAsync({TUser},System.Threading.CancellationToken)
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).UpdateAsync(TUser, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).UpdateAsync(TUser, System.Threading.CancellationToken)
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.DeleteAsync(`0,System.Threading.CancellationToken)
  commentId: M:Hybrid.Zero.Identity.Entities.UserStoreBase`12.DeleteAsync(`0,System.Threading.CancellationToken)
  id: DeleteAsync(`0,System.Threading.CancellationToken)
  parent: Hybrid.Zero.Identity.Entities.UserStoreBase`12
  langs:
  - csharp
  - vb
  name: DeleteAsync(TUser, CancellationToken)
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.DeleteAsync(TUser, CancellationToken)
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.DeleteAsync(TUser, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: DeleteAsync
    path: ../src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
    startLine: 283
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Zero.Identity.Entities
  summary: "\nDeletes the specified <code data-dev-comment-type=\"paramref\" class=\"paramref\">user</code> from the user store.\n"
  example: []
  syntax:
    content: public Task<IdentityResult> DeleteAsync(TUser user, CancellationToken cancellationToken)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user to delete.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task{Microsoft.AspNetCore.Identity.IdentityResult}
      description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation, containing the <xref href="Microsoft.AspNetCore.Identity.IdentityResult" data-throw-if-not-resolved="false"></xref> of the update operation.
    content.vb: Public Function DeleteAsync(user As TUser, cancellationToken As CancellationToken) As Task(Of IdentityResult)
  overload: Hybrid.Zero.Identity.Entities.UserStoreBase`12.DeleteAsync*
  implements:
  - Microsoft.AspNetCore.Identity.IUserStore{{TUser}}.DeleteAsync({TUser},System.Threading.CancellationToken)
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).DeleteAsync(TUser, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).DeleteAsync(TUser, System.Threading.CancellationToken)
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.FindByIdAsync(System.String,System.Threading.CancellationToken)
  commentId: M:Hybrid.Zero.Identity.Entities.UserStoreBase`12.FindByIdAsync(System.String,System.Threading.CancellationToken)
  id: FindByIdAsync(System.String,System.Threading.CancellationToken)
  parent: Hybrid.Zero.Identity.Entities.UserStoreBase`12
  langs:
  - csharp
  - vb
  name: FindByIdAsync(String, CancellationToken)
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.FindByIdAsync(String, CancellationToken)
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.FindByIdAsync(System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: FindByIdAsync
    path: ../src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
    startLine: 305
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Zero.Identity.Entities
  summary: "\nFinds and returns a user, if any, who has the specified <code data-dev-comment-type=\"paramref\" class=\"paramref\">userId</code>.\n"
  example: []
  syntax:
    content: public Task<TUser> FindByIdAsync(string userId, CancellationToken cancellationToken)
    parameters:
    - id: userId
      type: System.String
      description: The user ID to search for.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task{{TUser}}
      description: "\nThe <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents the asynchronous operation, containing the user matching the specified <code data-dev-comment-type=\"paramref\" class=\"paramref\">userId</code> if it exists.\n"
    content.vb: Public Function FindByIdAsync(userId As String, cancellationToken As CancellationToken) As Task(Of TUser)
  overload: Hybrid.Zero.Identity.Entities.UserStoreBase`12.FindByIdAsync*
  implements:
  - Microsoft.AspNetCore.Identity.IUserStore{{TUser}}.FindByIdAsync(System.String,System.Threading.CancellationToken)
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).FindByIdAsync(String, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).FindByIdAsync(System.String, System.Threading.CancellationToken)
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.FindByNameAsync(System.String,System.Threading.CancellationToken)
  commentId: M:Hybrid.Zero.Identity.Entities.UserStoreBase`12.FindByNameAsync(System.String,System.Threading.CancellationToken)
  id: FindByNameAsync(System.String,System.Threading.CancellationToken)
  parent: Hybrid.Zero.Identity.Entities.UserStoreBase`12
  langs:
  - csharp
  - vb
  name: FindByNameAsync(String, CancellationToken)
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.FindByNameAsync(String, CancellationToken)
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.FindByNameAsync(System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: FindByNameAsync
    path: ../src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
    startLine: 322
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Zero.Identity.Entities
  summary: "\nFinds and returns a user, if any, who has the specified normalized user name.\n"
  example: []
  syntax:
    content: public Task<TUser> FindByNameAsync(string normalizedUserName, CancellationToken cancellationToken)
    parameters:
    - id: normalizedUserName
      type: System.String
      description: The normalized user name to search for.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task{{TUser}}
      description: "\nThe <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents the asynchronous operation, containing the user matching the specified <code data-dev-comment-type=\"paramref\" class=\"paramref\">normalizedUserName</code> if it exists.\n"
    content.vb: Public Function FindByNameAsync(normalizedUserName As String, cancellationToken As CancellationToken) As Task(Of TUser)
  overload: Hybrid.Zero.Identity.Entities.UserStoreBase`12.FindByNameAsync*
  implements:
  - Microsoft.AspNetCore.Identity.IUserStore{{TUser}}.FindByNameAsync(System.String,System.Threading.CancellationToken)
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).FindByNameAsync(String, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).FindByNameAsync(System.String, System.Threading.CancellationToken)
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.AddLoginAsync(`0,Microsoft.AspNetCore.Identity.UserLoginInfo,System.Threading.CancellationToken)
  commentId: M:Hybrid.Zero.Identity.Entities.UserStoreBase`12.AddLoginAsync(`0,Microsoft.AspNetCore.Identity.UserLoginInfo,System.Threading.CancellationToken)
  id: AddLoginAsync(`0,Microsoft.AspNetCore.Identity.UserLoginInfo,System.Threading.CancellationToken)
  parent: Hybrid.Zero.Identity.Entities.UserStoreBase`12
  langs:
  - csharp
  - vb
  name: AddLoginAsync(TUser, UserLoginInfo, CancellationToken)
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.AddLoginAsync(TUser, UserLoginInfo, CancellationToken)
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.AddLoginAsync(TUser, Microsoft.AspNetCore.Identity.UserLoginInfo, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: AddLoginAsync
    path: ../src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
    startLine: 341
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Zero.Identity.Entities
  summary: "\nAdds an external <xref href=\"Microsoft.AspNetCore.Identity.UserLoginInfo\" data-throw-if-not-resolved=\"false\"></xref> to the specified <code data-dev-comment-type=\"paramref\" class=\"paramref\">user</code>.\n"
  example: []
  syntax:
    content: public Task AddLoginAsync(TUser user, UserLoginInfo login, CancellationToken cancellationToken)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user to add the login to.
    - id: login
      type: Microsoft.AspNetCore.Identity.UserLoginInfo
      description: The external <xref href="Microsoft.AspNetCore.Identity.UserLoginInfo" data-throw-if-not-resolved="false"></xref> to add to the specified <code data-dev-comment-type="paramref" class="paramref">user</code>.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task
      description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
    content.vb: Public Function AddLoginAsync(user As TUser, login As UserLoginInfo, cancellationToken As CancellationToken) As Task
  overload: Hybrid.Zero.Identity.Entities.UserStoreBase`12.AddLoginAsync*
  implements:
  - Microsoft.AspNetCore.Identity.IUserLoginStore{{TUser}}.AddLoginAsync({TUser},Microsoft.AspNetCore.Identity.UserLoginInfo,System.Threading.CancellationToken)
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).AddLoginAsync(TUser, UserLoginInfo, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).AddLoginAsync(TUser, Microsoft.AspNetCore.Identity.UserLoginInfo, System.Threading.CancellationToken)
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.RemoveLoginAsync(`0,System.String,System.String,System.Threading.CancellationToken)
  commentId: M:Hybrid.Zero.Identity.Entities.UserStoreBase`12.RemoveLoginAsync(`0,System.String,System.String,System.Threading.CancellationToken)
  id: RemoveLoginAsync(`0,System.String,System.String,System.Threading.CancellationToken)
  parent: Hybrid.Zero.Identity.Entities.UserStoreBase`12
  langs:
  - csharp
  - vb
  name: RemoveLoginAsync(TUser, String, String, CancellationToken)
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.RemoveLoginAsync(TUser, String, String, CancellationToken)
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.RemoveLoginAsync(TUser, System.String, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: RemoveLoginAsync
    path: ../src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
    startLine: 367
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Zero.Identity.Entities
  summary: "\nAttempts to remove the provided login information from the specified <code data-dev-comment-type=\"paramref\" class=\"paramref\">user</code>.\nand returns a flag indicating whether the removal succeed or not.\n"
  example: []
  syntax:
    content: public Task RemoveLoginAsync(TUser user, string loginProvider, string providerKey, CancellationToken cancellationToken)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user to remove the login information from.
    - id: loginProvider
      type: System.String
      description: The login provide whose information should be removed.
    - id: providerKey
      type: System.String
      description: The key given by the external login provider for the specified user.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task
      description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
    content.vb: Public Function RemoveLoginAsync(user As TUser, loginProvider As String, providerKey As String, cancellationToken As CancellationToken) As Task
  overload: Hybrid.Zero.Identity.Entities.UserStoreBase`12.RemoveLoginAsync*
  implements:
  - Microsoft.AspNetCore.Identity.IUserLoginStore{{TUser}}.RemoveLoginAsync({TUser},System.String,System.String,System.Threading.CancellationToken)
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).RemoveLoginAsync(TUser, String, String, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).RemoveLoginAsync(TUser, System.String, System.String, System.Threading.CancellationToken)
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetLoginsAsync(`0,System.Threading.CancellationToken)
  commentId: M:Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetLoginsAsync(`0,System.Threading.CancellationToken)
  id: GetLoginsAsync(`0,System.Threading.CancellationToken)
  parent: Hybrid.Zero.Identity.Entities.UserStoreBase`12
  langs:
  - csharp
  - vb
  name: GetLoginsAsync(TUser, CancellationToken)
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.GetLoginsAsync(TUser, CancellationToken)
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.GetLoginsAsync(TUser, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: GetLoginsAsync
    path: ../src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
    startLine: 386
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Zero.Identity.Entities
  summary: "\nRetrieves the associated logins for the specified <param ref=\"user\" />.\n"
  example: []
  syntax:
    content: public Task<IList<UserLoginInfo>> GetLoginsAsync(TUser user, CancellationToken cancellationToken)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose associated logins to retrieve.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IList{Microsoft.AspNetCore.Identity.UserLoginInfo}}
      description: "\nThe <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> for the asynchronous operation, containing a list of <xref href=\"Microsoft.AspNetCore.Identity.UserLoginInfo\" data-throw-if-not-resolved=\"false\"></xref> for the specified <code data-dev-comment-type=\"paramref\" class=\"paramref\">user</code>, if any.\n"
    content.vb: Public Function GetLoginsAsync(user As TUser, cancellationToken As CancellationToken) As Task(Of IList(Of UserLoginInfo))
  overload: Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetLoginsAsync*
  implements:
  - Microsoft.AspNetCore.Identity.IUserLoginStore{{TUser}}.GetLoginsAsync({TUser},System.Threading.CancellationToken)
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).GetLoginsAsync(TUser, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).GetLoginsAsync(TUser, System.Threading.CancellationToken)
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.FindByLoginAsync(System.String,System.String,System.Threading.CancellationToken)
  commentId: M:Hybrid.Zero.Identity.Entities.UserStoreBase`12.FindByLoginAsync(System.String,System.String,System.Threading.CancellationToken)
  id: FindByLoginAsync(System.String,System.String,System.Threading.CancellationToken)
  parent: Hybrid.Zero.Identity.Entities.UserStoreBase`12
  langs:
  - csharp
  - vb
  name: FindByLoginAsync(String, String, CancellationToken)
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.FindByLoginAsync(String, String, CancellationToken)
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.FindByLoginAsync(System.String, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: FindByLoginAsync
    path: ../src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
    startLine: 406
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Zero.Identity.Entities
  summary: "\nRetrieves the user associated with the specified login provider and login provider key.\n"
  example: []
  syntax:
    content: public Task<TUser> FindByLoginAsync(string loginProvider, string providerKey, CancellationToken cancellationToken)
    parameters:
    - id: loginProvider
      type: System.String
      description: The login provider who provided the <code data-dev-comment-type="paramref" class="paramref">providerKey</code>.
    - id: providerKey
      type: System.String
      description: The key provided by the <code data-dev-comment-type="paramref" class="paramref">loginProvider</code> to identify a user.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task{{TUser}}
      description: "\nThe <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> for the asynchronous operation, containing the user, if any which matched the specified login provider and key.\n"
    content.vb: Public Function FindByLoginAsync(loginProvider As String, providerKey As String, cancellationToken As CancellationToken) As Task(Of TUser)
  overload: Hybrid.Zero.Identity.Entities.UserStoreBase`12.FindByLoginAsync*
  implements:
  - Microsoft.AspNetCore.Identity.IUserLoginStore{{TUser}}.FindByLoginAsync(System.String,System.String,System.Threading.CancellationToken)
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).FindByLoginAsync(String, String, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).FindByLoginAsync(System.String, System.String, System.Threading.CancellationToken)
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetClaimsAsync(`0,System.Threading.CancellationToken)
  commentId: M:Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetClaimsAsync(`0,System.Threading.CancellationToken)
  id: GetClaimsAsync(`0,System.Threading.CancellationToken)
  parent: Hybrid.Zero.Identity.Entities.UserStoreBase`12
  langs:
  - csharp
  - vb
  name: GetClaimsAsync(TUser, CancellationToken)
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.GetClaimsAsync(TUser, CancellationToken)
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.GetClaimsAsync(TUser, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: GetClaimsAsync
    path: ../src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
    startLine: 435
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Zero.Identity.Entities
  summary: "\nGets a list of <xref href=\"System.Security.Claims.Claim\" data-throw-if-not-resolved=\"false\"></xref>s to be belonging to the specified <code data-dev-comment-type=\"paramref\" class=\"paramref\">user</code> as an asynchronous operation.\n"
  example: []
  syntax:
    content: public Task<IList<Claim>> GetClaimsAsync(TUser user, CancellationToken cancellationToken)
    parameters:
    - id: user
      type: '{TUser}'
      description: The role whose claims to retrieve.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IList{System.Security.Claims.Claim}}
      description: "\nA <xref href=\"System.Threading.Tasks.Task%601\" data-throw-if-not-resolved=\"false\"></xref> that represents the result of the asynchronous query, a list of <xref href=\"System.Security.Claims.Claim\" data-throw-if-not-resolved=\"false\"></xref>s.\n"
    content.vb: Public Function GetClaimsAsync(user As TUser, cancellationToken As CancellationToken) As Task(Of IList(Of Claim))
  overload: Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetClaimsAsync*
  implements:
  - Microsoft.AspNetCore.Identity.IUserClaimStore{{TUser}}.GetClaimsAsync({TUser},System.Threading.CancellationToken)
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).GetClaimsAsync(TUser, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).GetClaimsAsync(TUser, System.Threading.CancellationToken)
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.AddClaimsAsync(`0,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.Threading.CancellationToken)
  commentId: M:Hybrid.Zero.Identity.Entities.UserStoreBase`12.AddClaimsAsync(`0,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.Threading.CancellationToken)
  id: AddClaimsAsync(`0,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.Threading.CancellationToken)
  parent: Hybrid.Zero.Identity.Entities.UserStoreBase`12
  langs:
  - csharp
  - vb
  name: AddClaimsAsync(TUser, IEnumerable<Claim>, CancellationToken)
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.AddClaimsAsync(TUser, IEnumerable<Claim>, CancellationToken)
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.AddClaimsAsync(TUser, System.Collections.Generic.IEnumerable<System.Security.Claims.Claim>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: AddClaimsAsync
    path: ../src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
    startLine: 451
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Zero.Identity.Entities
  summary: Add claims to a user as an asynchronous operation.
  example: []
  syntax:
    content: public Task AddClaimsAsync(TUser user, IEnumerable<Claim> claims, CancellationToken cancellationToken)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user to add the claim to.
    - id: claims
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
      description: The collection of <xref href="System.Security.Claims.Claim" data-throw-if-not-resolved="false"></xref>s to add.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task
      description: The task object representing the asynchronous operation.
    content.vb: Public Function AddClaimsAsync(user As TUser, claims As IEnumerable(Of Claim), cancellationToken As CancellationToken) As Task
  overload: Hybrid.Zero.Identity.Entities.UserStoreBase`12.AddClaimsAsync*
  implements:
  - Microsoft.AspNetCore.Identity.IUserClaimStore{{TUser}}.AddClaimsAsync({TUser},System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.Threading.CancellationToken)
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).AddClaimsAsync(TUser, IEnumerable(Of Claim), CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).AddClaimsAsync(TUser, System.Collections.Generic.IEnumerable(Of System.Security.Claims.Claim), System.Threading.CancellationToken)
  name.vb: AddClaimsAsync(TUser, IEnumerable(Of Claim), CancellationToken)
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.ReplaceClaimAsync(`0,System.Security.Claims.Claim,System.Security.Claims.Claim,System.Threading.CancellationToken)
  commentId: M:Hybrid.Zero.Identity.Entities.UserStoreBase`12.ReplaceClaimAsync(`0,System.Security.Claims.Claim,System.Security.Claims.Claim,System.Threading.CancellationToken)
  id: ReplaceClaimAsync(`0,System.Security.Claims.Claim,System.Security.Claims.Claim,System.Threading.CancellationToken)
  parent: Hybrid.Zero.Identity.Entities.UserStoreBase`12
  langs:
  - csharp
  - vb
  name: ReplaceClaimAsync(TUser, Claim, Claim, CancellationToken)
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.ReplaceClaimAsync(TUser, Claim, Claim, CancellationToken)
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.ReplaceClaimAsync(TUser, System.Security.Claims.Claim, System.Security.Claims.Claim, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: ReplaceClaimAsync
    path: ../src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
    startLine: 469
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Zero.Identity.Entities
  summary: "\nReplaces the given <code data-dev-comment-type=\"paramref\" class=\"paramref\">claim</code> on the specified <code data-dev-comment-type=\"paramref\" class=\"paramref\">user</code> with the <code data-dev-comment-type=\"paramref\" class=\"paramref\">newClaim</code>\n"
  example: []
  syntax:
    content: public Task ReplaceClaimAsync(TUser user, Claim claim, Claim newClaim, CancellationToken cancellationToken)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user to replace the claim on.
    - id: claim
      type: System.Security.Claims.Claim
      description: The claim to replace.
    - id: newClaim
      type: System.Security.Claims.Claim
      description: The new claim to replace the existing <code data-dev-comment-type="paramref" class="paramref">claim</code> with.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task
      description: The task object representing the asynchronous operation.
    content.vb: Public Function ReplaceClaimAsync(user As TUser, claim As Claim, newClaim As Claim, cancellationToken As CancellationToken) As Task
  overload: Hybrid.Zero.Identity.Entities.UserStoreBase`12.ReplaceClaimAsync*
  implements:
  - Microsoft.AspNetCore.Identity.IUserClaimStore{{TUser}}.ReplaceClaimAsync({TUser},System.Security.Claims.Claim,System.Security.Claims.Claim,System.Threading.CancellationToken)
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).ReplaceClaimAsync(TUser, Claim, Claim, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).ReplaceClaimAsync(TUser, System.Security.Claims.Claim, System.Security.Claims.Claim, System.Threading.CancellationToken)
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.RemoveClaimsAsync(`0,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.Threading.CancellationToken)
  commentId: M:Hybrid.Zero.Identity.Entities.UserStoreBase`12.RemoveClaimsAsync(`0,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.Threading.CancellationToken)
  id: RemoveClaimsAsync(`0,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.Threading.CancellationToken)
  parent: Hybrid.Zero.Identity.Entities.UserStoreBase`12
  langs:
  - csharp
  - vb
  name: RemoveClaimsAsync(TUser, IEnumerable<Claim>, CancellationToken)
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.RemoveClaimsAsync(TUser, IEnumerable<Claim>, CancellationToken)
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.RemoveClaimsAsync(TUser, System.Collections.Generic.IEnumerable<System.Security.Claims.Claim>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: RemoveClaimsAsync
    path: ../src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
    startLine: 491
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Zero.Identity.Entities
  summary: "\nRemoves the specified <code data-dev-comment-type=\"paramref\" class=\"paramref\">claims</code> from the given <code data-dev-comment-type=\"paramref\" class=\"paramref\">user</code>.\n"
  example: []
  syntax:
    content: public Task RemoveClaimsAsync(TUser user, IEnumerable<Claim> claims, CancellationToken cancellationToken)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user to remove the specified <code data-dev-comment-type="paramref" class="paramref">claims</code> from.
    - id: claims
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
      description: A collection of <xref href="System.Security.Claims.Claim" data-throw-if-not-resolved="false"></xref>s to remove.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task
      description: The task object representing the asynchronous operation.
    content.vb: Public Function RemoveClaimsAsync(user As TUser, claims As IEnumerable(Of Claim), cancellationToken As CancellationToken) As Task
  overload: Hybrid.Zero.Identity.Entities.UserStoreBase`12.RemoveClaimsAsync*
  implements:
  - Microsoft.AspNetCore.Identity.IUserClaimStore{{TUser}}.RemoveClaimsAsync({TUser},System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.Threading.CancellationToken)
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).RemoveClaimsAsync(TUser, IEnumerable(Of Claim), CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).RemoveClaimsAsync(TUser, System.Collections.Generic.IEnumerable(Of System.Security.Claims.Claim), System.Threading.CancellationToken)
  name.vb: RemoveClaimsAsync(TUser, IEnumerable(Of Claim), CancellationToken)
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetUsersForClaimAsync(System.Security.Claims.Claim,System.Threading.CancellationToken)
  commentId: M:Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetUsersForClaimAsync(System.Security.Claims.Claim,System.Threading.CancellationToken)
  id: GetUsersForClaimAsync(System.Security.Claims.Claim,System.Threading.CancellationToken)
  parent: Hybrid.Zero.Identity.Entities.UserStoreBase`12
  langs:
  - csharp
  - vb
  name: GetUsersForClaimAsync(Claim, CancellationToken)
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.GetUsersForClaimAsync(Claim, CancellationToken)
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.GetUsersForClaimAsync(System.Security.Claims.Claim, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: GetUsersForClaimAsync
    path: ../src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
    startLine: 510
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Zero.Identity.Entities
  summary: "\nReturns a list of users who contain the specified <xref href=\"System.Security.Claims.Claim\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public Task<IList<TUser>> GetUsersForClaimAsync(Claim claim, CancellationToken cancellationToken)
    parameters:
    - id: claim
      type: System.Security.Claims.Claim
      description: The claim to look for.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IList{{TUser}}}
      description: "\nA <xref href=\"System.Threading.Tasks.Task%601\" data-throw-if-not-resolved=\"false\"></xref> that represents the result of the asynchronous query, a list of <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TUser</code> who\ncontain the specified claim.\n"
    content.vb: Public Function GetUsersForClaimAsync(claim As Claim, cancellationToken As CancellationToken) As Task(Of IList(Of TUser))
  overload: Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetUsersForClaimAsync*
  implements:
  - Microsoft.AspNetCore.Identity.IUserClaimStore{{TUser}}.GetUsersForClaimAsync(System.Security.Claims.Claim,System.Threading.CancellationToken)
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).GetUsersForClaimAsync(Claim, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).GetUsersForClaimAsync(System.Security.Claims.Claim, System.Threading.CancellationToken)
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.SetPasswordHashAsync(`0,System.String,System.Threading.CancellationToken)
  commentId: M:Hybrid.Zero.Identity.Entities.UserStoreBase`12.SetPasswordHashAsync(`0,System.String,System.Threading.CancellationToken)
  id: SetPasswordHashAsync(`0,System.String,System.Threading.CancellationToken)
  parent: Hybrid.Zero.Identity.Entities.UserStoreBase`12
  langs:
  - csharp
  - vb
  name: SetPasswordHashAsync(TUser, String, CancellationToken)
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.SetPasswordHashAsync(TUser, String, CancellationToken)
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.SetPasswordHashAsync(TUser, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: SetPasswordHashAsync
    path: ../src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
    startLine: 533
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Zero.Identity.Entities
  summary: "\nSets the password hash for the specified <code data-dev-comment-type=\"paramref\" class=\"paramref\">user</code>.\n"
  example: []
  syntax:
    content: public Task SetPasswordHashAsync(TUser user, string passwordHash, CancellationToken cancellationToken)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose password hash to set.
    - id: passwordHash
      type: System.String
      description: The password hash to set.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task
      description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
    content.vb: Public Function SetPasswordHashAsync(user As TUser, passwordHash As String, cancellationToken As CancellationToken) As Task
  overload: Hybrid.Zero.Identity.Entities.UserStoreBase`12.SetPasswordHashAsync*
  implements:
  - Microsoft.AspNetCore.Identity.IUserPasswordStore{{TUser}}.SetPasswordHashAsync({TUser},System.String,System.Threading.CancellationToken)
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).SetPasswordHashAsync(TUser, String, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).SetPasswordHashAsync(TUser, System.String, System.Threading.CancellationToken)
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetPasswordHashAsync(`0,System.Threading.CancellationToken)
  commentId: M:Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetPasswordHashAsync(`0,System.Threading.CancellationToken)
  id: GetPasswordHashAsync(`0,System.Threading.CancellationToken)
  parent: Hybrid.Zero.Identity.Entities.UserStoreBase`12
  langs:
  - csharp
  - vb
  name: GetPasswordHashAsync(TUser, CancellationToken)
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.GetPasswordHashAsync(TUser, CancellationToken)
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.GetPasswordHashAsync(TUser, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: GetPasswordHashAsync
    path: ../src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
    startLine: 549
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Zero.Identity.Entities
  summary: "\nGets the password hash for the specified <code data-dev-comment-type=\"paramref\" class=\"paramref\">user</code>.\n"
  example: []
  syntax:
    content: public Task<string> GetPasswordHashAsync(TUser user, CancellationToken cancellationToken)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose password hash to retrieve.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation, returning the password hash for the specified <code data-dev-comment-type="paramref" class="paramref">user</code>.
    content.vb: Public Function GetPasswordHashAsync(user As TUser, cancellationToken As CancellationToken) As Task(Of String)
  overload: Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetPasswordHashAsync*
  implements:
  - Microsoft.AspNetCore.Identity.IUserPasswordStore{{TUser}}.GetPasswordHashAsync({TUser},System.Threading.CancellationToken)
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).GetPasswordHashAsync(TUser, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).GetPasswordHashAsync(TUser, System.Threading.CancellationToken)
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.HasPasswordAsync(`0,System.Threading.CancellationToken)
  commentId: M:Hybrid.Zero.Identity.Entities.UserStoreBase`12.HasPasswordAsync(`0,System.Threading.CancellationToken)
  id: HasPasswordAsync(`0,System.Threading.CancellationToken)
  parent: Hybrid.Zero.Identity.Entities.UserStoreBase`12
  langs:
  - csharp
  - vb
  name: HasPasswordAsync(TUser, CancellationToken)
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.HasPasswordAsync(TUser, CancellationToken)
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.HasPasswordAsync(TUser, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: HasPasswordAsync
    path: ../src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
    startLine: 567
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Zero.Identity.Entities
  summary: "\nGets a flag indicating whether the specified <code data-dev-comment-type=\"paramref\" class=\"paramref\">user</code> has a password.\n"
  example: []
  syntax:
    content: public Task<bool> HasPasswordAsync(TUser user, CancellationToken cancellationToken)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user to return a flag for, indicating whether they have a password or not.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: "\nThe <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents the asynchronous operation, returning true if the specified <code data-dev-comment-type=\"paramref\" class=\"paramref\">user</code> has a password\notherwise false.\n"
    content.vb: Public Function HasPasswordAsync(user As TUser, cancellationToken As CancellationToken) As Task(Of Boolean)
  overload: Hybrid.Zero.Identity.Entities.UserStoreBase`12.HasPasswordAsync*
  implements:
  - Microsoft.AspNetCore.Identity.IUserPasswordStore{{TUser}}.HasPasswordAsync({TUser},System.Threading.CancellationToken)
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).HasPasswordAsync(TUser, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).HasPasswordAsync(TUser, System.Threading.CancellationToken)
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.SetSecurityStampAsync(`0,System.String,System.Threading.CancellationToken)
  commentId: M:Hybrid.Zero.Identity.Entities.UserStoreBase`12.SetSecurityStampAsync(`0,System.String,System.Threading.CancellationToken)
  id: SetSecurityStampAsync(`0,System.String,System.Threading.CancellationToken)
  parent: Hybrid.Zero.Identity.Entities.UserStoreBase`12
  langs:
  - csharp
  - vb
  name: SetSecurityStampAsync(TUser, String, CancellationToken)
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.SetSecurityStampAsync(TUser, String, CancellationToken)
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.SetSecurityStampAsync(TUser, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: SetSecurityStampAsync
    path: ../src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
    startLine: 587
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Zero.Identity.Entities
  summary: "\nSets the provided security <code data-dev-comment-type=\"paramref\" class=\"paramref\">stamp</code> for the specified <code data-dev-comment-type=\"paramref\" class=\"paramref\">user</code>.\n"
  example: []
  syntax:
    content: public Task SetSecurityStampAsync(TUser user, string stamp, CancellationToken cancellationToken)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose security stamp should be set.
    - id: stamp
      type: System.String
      description: The security stamp to set.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task
      description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
    content.vb: Public Function SetSecurityStampAsync(user As TUser, stamp As String, cancellationToken As CancellationToken) As Task
  overload: Hybrid.Zero.Identity.Entities.UserStoreBase`12.SetSecurityStampAsync*
  implements:
  - Microsoft.AspNetCore.Identity.IUserSecurityStampStore{{TUser}}.SetSecurityStampAsync({TUser},System.String,System.Threading.CancellationToken)
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).SetSecurityStampAsync(TUser, String, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).SetSecurityStampAsync(TUser, System.String, System.Threading.CancellationToken)
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetSecurityStampAsync(`0,System.Threading.CancellationToken)
  commentId: M:Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetSecurityStampAsync(`0,System.Threading.CancellationToken)
  id: GetSecurityStampAsync(`0,System.Threading.CancellationToken)
  parent: Hybrid.Zero.Identity.Entities.UserStoreBase`12
  langs:
  - csharp
  - vb
  name: GetSecurityStampAsync(TUser, CancellationToken)
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.GetSecurityStampAsync(TUser, CancellationToken)
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.GetSecurityStampAsync(TUser, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: GetSecurityStampAsync
    path: ../src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
    startLine: 604
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Zero.Identity.Entities
  summary: "\nGet the security stamp for the specified <code data-dev-comment-type=\"paramref\" class=\"paramref\">user</code>.\n"
  example: []
  syntax:
    content: public Task<string> GetSecurityStampAsync(TUser user, CancellationToken cancellationToken)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose security stamp should be set.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation, containing the security stamp for the specified <code data-dev-comment-type="paramref" class="paramref">user</code>.
    content.vb: Public Function GetSecurityStampAsync(user As TUser, cancellationToken As CancellationToken) As Task(Of String)
  overload: Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetSecurityStampAsync*
  implements:
  - Microsoft.AspNetCore.Identity.IUserSecurityStampStore{{TUser}}.GetSecurityStampAsync({TUser},System.Threading.CancellationToken)
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).GetSecurityStampAsync(TUser, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).GetSecurityStampAsync(TUser, System.Threading.CancellationToken)
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.SetEmailAsync(`0,System.String,System.Threading.CancellationToken)
  commentId: M:Hybrid.Zero.Identity.Entities.UserStoreBase`12.SetEmailAsync(`0,System.String,System.Threading.CancellationToken)
  id: SetEmailAsync(`0,System.String,System.Threading.CancellationToken)
  parent: Hybrid.Zero.Identity.Entities.UserStoreBase`12
  langs:
  - csharp
  - vb
  name: SetEmailAsync(TUser, String, CancellationToken)
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.SetEmailAsync(TUser, String, CancellationToken)
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.SetEmailAsync(TUser, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: SetEmailAsync
    path: ../src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
    startLine: 624
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Zero.Identity.Entities
  summary: "\nSets the <code data-dev-comment-type=\"paramref\" class=\"paramref\">email</code> address for a <code data-dev-comment-type=\"paramref\" class=\"paramref\">user</code>.\n"
  example: []
  syntax:
    content: public Task SetEmailAsync(TUser user, string email, CancellationToken cancellationToken)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose email should be set.
    - id: email
      type: System.String
      description: The email to set.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task
      description: The task object representing the asynchronous operation.
    content.vb: Public Function SetEmailAsync(user As TUser, email As String, cancellationToken As CancellationToken) As Task
  overload: Hybrid.Zero.Identity.Entities.UserStoreBase`12.SetEmailAsync*
  implements:
  - Microsoft.AspNetCore.Identity.IUserEmailStore{{TUser}}.SetEmailAsync({TUser},System.String,System.Threading.CancellationToken)
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).SetEmailAsync(TUser, String, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).SetEmailAsync(TUser, System.String, System.Threading.CancellationToken)
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetEmailAsync(`0,System.Threading.CancellationToken)
  commentId: M:Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetEmailAsync(`0,System.Threading.CancellationToken)
  id: GetEmailAsync(`0,System.Threading.CancellationToken)
  parent: Hybrid.Zero.Identity.Entities.UserStoreBase`12
  langs:
  - csharp
  - vb
  name: GetEmailAsync(TUser, CancellationToken)
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.GetEmailAsync(TUser, CancellationToken)
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.GetEmailAsync(TUser, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: GetEmailAsync
    path: ../src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
    startLine: 641
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Zero.Identity.Entities
  summary: "\nGets the email address for the specified <code data-dev-comment-type=\"paramref\" class=\"paramref\">user</code>.\n"
  example: []
  syntax:
    content: public Task<string> GetEmailAsync(TUser user, CancellationToken cancellationToken)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose email should be returned.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: The task object containing the results of the asynchronous operation, the email address for the specified <code data-dev-comment-type="paramref" class="paramref">user</code>.
    content.vb: Public Function GetEmailAsync(user As TUser, cancellationToken As CancellationToken) As Task(Of String)
  overload: Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetEmailAsync*
  implements:
  - Microsoft.AspNetCore.Identity.IUserEmailStore{{TUser}}.GetEmailAsync({TUser},System.Threading.CancellationToken)
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).GetEmailAsync(TUser, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).GetEmailAsync(TUser, System.Threading.CancellationToken)
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetEmailConfirmedAsync(`0,System.Threading.CancellationToken)
  commentId: M:Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetEmailConfirmedAsync(`0,System.Threading.CancellationToken)
  id: GetEmailConfirmedAsync(`0,System.Threading.CancellationToken)
  parent: Hybrid.Zero.Identity.Entities.UserStoreBase`12
  langs:
  - csharp
  - vb
  name: GetEmailConfirmedAsync(TUser, CancellationToken)
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.GetEmailConfirmedAsync(TUser, CancellationToken)
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.GetEmailConfirmedAsync(TUser, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: GetEmailConfirmedAsync
    path: ../src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
    startLine: 660
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Zero.Identity.Entities
  summary: "\nGets a flag indicating whether the email address for the specified <code data-dev-comment-type=\"paramref\" class=\"paramref\">user</code> has been verified, true if the email address is verified otherwise\nfalse.\n"
  example: []
  syntax:
    content: public Task<bool> GetEmailConfirmedAsync(TUser user, CancellationToken cancellationToken)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose email confirmation status should be returned.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: "\nThe task object containing the results of the asynchronous operation, a flag indicating whether the email address for the specified <code data-dev-comment-type=\"paramref\" class=\"paramref\">user</code>\nhas been confirmed or not.\n"
    content.vb: Public Function GetEmailConfirmedAsync(user As TUser, cancellationToken As CancellationToken) As Task(Of Boolean)
  overload: Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetEmailConfirmedAsync*
  implements:
  - Microsoft.AspNetCore.Identity.IUserEmailStore{{TUser}}.GetEmailConfirmedAsync({TUser},System.Threading.CancellationToken)
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).GetEmailConfirmedAsync(TUser, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).GetEmailConfirmedAsync(TUser, System.Threading.CancellationToken)
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.SetEmailConfirmedAsync(`0,System.Boolean,System.Threading.CancellationToken)
  commentId: M:Hybrid.Zero.Identity.Entities.UserStoreBase`12.SetEmailConfirmedAsync(`0,System.Boolean,System.Threading.CancellationToken)
  id: SetEmailConfirmedAsync(`0,System.Boolean,System.Threading.CancellationToken)
  parent: Hybrid.Zero.Identity.Entities.UserStoreBase`12
  langs:
  - csharp
  - vb
  name: SetEmailConfirmedAsync(TUser, Boolean, CancellationToken)
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.SetEmailConfirmedAsync(TUser, Boolean, CancellationToken)
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.SetEmailConfirmedAsync(TUser, System.Boolean, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: SetEmailConfirmedAsync
    path: ../src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
    startLine: 676
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Zero.Identity.Entities
  summary: "\nSets the flag indicating whether the specified <code data-dev-comment-type=\"paramref\" class=\"paramref\">user</code>&apos;s email address has been confirmed or not.\n"
  example: []
  syntax:
    content: public Task SetEmailConfirmedAsync(TUser user, bool confirmed, CancellationToken cancellationToken)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose email confirmation status should be set.
    - id: confirmed
      type: System.Boolean
      description: A flag indicating if the email address has been confirmed, true if the address is confirmed otherwise false.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task
      description: The task object representing the asynchronous operation.
    content.vb: Public Function SetEmailConfirmedAsync(user As TUser, confirmed As Boolean, cancellationToken As CancellationToken) As Task
  overload: Hybrid.Zero.Identity.Entities.UserStoreBase`12.SetEmailConfirmedAsync*
  implements:
  - Microsoft.AspNetCore.Identity.IUserEmailStore{{TUser}}.SetEmailConfirmedAsync({TUser},System.Boolean,System.Threading.CancellationToken)
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).SetEmailConfirmedAsync(TUser, Boolean, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).SetEmailConfirmedAsync(TUser, System.Boolean, System.Threading.CancellationToken)
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.FindByEmailAsync(System.String,System.Threading.CancellationToken)
  commentId: M:Hybrid.Zero.Identity.Entities.UserStoreBase`12.FindByEmailAsync(System.String,System.Threading.CancellationToken)
  id: FindByEmailAsync(System.String,System.Threading.CancellationToken)
  parent: Hybrid.Zero.Identity.Entities.UserStoreBase`12
  langs:
  - csharp
  - vb
  name: FindByEmailAsync(String, CancellationToken)
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.FindByEmailAsync(String, CancellationToken)
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.FindByEmailAsync(System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: FindByEmailAsync
    path: ../src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
    startLine: 694
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Zero.Identity.Entities
  summary: "\nGets the user, if any, associated with the specified, normalized email address.\n"
  example: []
  syntax:
    content: public Task<TUser> FindByEmailAsync(string normalizedEmail, CancellationToken cancellationToken)
    parameters:
    - id: normalizedEmail
      type: System.String
      description: The normalized email address to return the user for.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task{{TUser}}
      description: "\nThe task object containing the results of the asynchronous lookup operation, the user if any associated with the specified normalized email address.\n"
    content.vb: Public Function FindByEmailAsync(normalizedEmail As String, cancellationToken As CancellationToken) As Task(Of TUser)
  overload: Hybrid.Zero.Identity.Entities.UserStoreBase`12.FindByEmailAsync*
  implements:
  - Microsoft.AspNetCore.Identity.IUserEmailStore{{TUser}}.FindByEmailAsync(System.String,System.Threading.CancellationToken)
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).FindByEmailAsync(String, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).FindByEmailAsync(System.String, System.Threading.CancellationToken)
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetNormalizedEmailAsync(`0,System.Threading.CancellationToken)
  commentId: M:Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetNormalizedEmailAsync(`0,System.Threading.CancellationToken)
  id: GetNormalizedEmailAsync(`0,System.Threading.CancellationToken)
  parent: Hybrid.Zero.Identity.Entities.UserStoreBase`12
  langs:
  - csharp
  - vb
  name: GetNormalizedEmailAsync(TUser, CancellationToken)
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.GetNormalizedEmailAsync(TUser, CancellationToken)
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.GetNormalizedEmailAsync(TUser, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: GetNormalizedEmailAsync
    path: ../src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
    startLine: 711
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Zero.Identity.Entities
  summary: "\nReturns the normalized email for the specified <code data-dev-comment-type=\"paramref\" class=\"paramref\">user</code>.\n"
  example: []
  syntax:
    content: public Task<string> GetNormalizedEmailAsync(TUser user, CancellationToken cancellationToken)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose email address to retrieve.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: "\nThe task object containing the results of the asynchronous lookup operation, the normalized email address if any associated with the specified user.\n"
    content.vb: Public Function GetNormalizedEmailAsync(user As TUser, cancellationToken As CancellationToken) As Task(Of String)
  overload: Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetNormalizedEmailAsync*
  implements:
  - Microsoft.AspNetCore.Identity.IUserEmailStore{{TUser}}.GetNormalizedEmailAsync({TUser},System.Threading.CancellationToken)
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).GetNormalizedEmailAsync(TUser, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).GetNormalizedEmailAsync(TUser, System.Threading.CancellationToken)
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.SetNormalizedEmailAsync(`0,System.String,System.Threading.CancellationToken)
  commentId: M:Hybrid.Zero.Identity.Entities.UserStoreBase`12.SetNormalizedEmailAsync(`0,System.String,System.Threading.CancellationToken)
  id: SetNormalizedEmailAsync(`0,System.String,System.Threading.CancellationToken)
  parent: Hybrid.Zero.Identity.Entities.UserStoreBase`12
  langs:
  - csharp
  - vb
  name: SetNormalizedEmailAsync(TUser, String, CancellationToken)
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.SetNormalizedEmailAsync(TUser, String, CancellationToken)
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.SetNormalizedEmailAsync(TUser, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: SetNormalizedEmailAsync
    path: ../src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
    startLine: 727
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Zero.Identity.Entities
  summary: "\nSets the normalized email for the specified <code data-dev-comment-type=\"paramref\" class=\"paramref\">user</code>.\n"
  example: []
  syntax:
    content: public Task SetNormalizedEmailAsync(TUser user, string normalizedEmail, CancellationToken cancellationToken)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose email address to set.
    - id: normalizedEmail
      type: System.String
      description: The normalized email to set for the specified <code data-dev-comment-type="paramref" class="paramref">user</code>.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task
      description: The task object representing the asynchronous operation.
    content.vb: Public Function SetNormalizedEmailAsync(user As TUser, normalizedEmail As String, cancellationToken As CancellationToken) As Task
  overload: Hybrid.Zero.Identity.Entities.UserStoreBase`12.SetNormalizedEmailAsync*
  implements:
  - Microsoft.AspNetCore.Identity.IUserEmailStore{{TUser}}.SetNormalizedEmailAsync({TUser},System.String,System.Threading.CancellationToken)
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).SetNormalizedEmailAsync(TUser, String, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).SetNormalizedEmailAsync(TUser, System.String, System.Threading.CancellationToken)
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetLockoutEndDateAsync(`0,System.Threading.CancellationToken)
  commentId: M:Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetLockoutEndDateAsync(`0,System.Threading.CancellationToken)
  id: GetLockoutEndDateAsync(`0,System.Threading.CancellationToken)
  parent: Hybrid.Zero.Identity.Entities.UserStoreBase`12
  langs:
  - csharp
  - vb
  name: GetLockoutEndDateAsync(TUser, CancellationToken)
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.GetLockoutEndDateAsync(TUser, CancellationToken)
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.GetLockoutEndDateAsync(TUser, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: GetLockoutEndDateAsync
    path: ../src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
    startLine: 751
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Zero.Identity.Entities
  summary: "\nGets the last <xref href=\"System.DateTimeOffset\" data-throw-if-not-resolved=\"false\"></xref> a user&apos;s last lockout expired, if any.\nAny time in the past should be indicates a user is not locked out.\n"
  example: []
  syntax:
    content: public Task<DateTimeOffset?> GetLockoutEndDateAsync(TUser user, CancellationToken cancellationToken)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose lockout date should be retrieved.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task{System.Nullable{System.DateTimeOffset}}
      description: "\nA <xref href=\"System.Threading.Tasks.Task%601\" data-throw-if-not-resolved=\"false\"></xref> that represents the result of the asynchronous query, a <xref href=\"System.DateTimeOffset\" data-throw-if-not-resolved=\"false\"></xref> containing the last time\na user&apos;s lockout expired, if any.\n"
    content.vb: Public Function GetLockoutEndDateAsync(user As TUser, cancellationToken As CancellationToken) As Task(Of DateTimeOffset?)
  overload: Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetLockoutEndDateAsync*
  implements:
  - Microsoft.AspNetCore.Identity.IUserLockoutStore{{TUser}}.GetLockoutEndDateAsync({TUser},System.Threading.CancellationToken)
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).GetLockoutEndDateAsync(TUser, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).GetLockoutEndDateAsync(TUser, System.Threading.CancellationToken)
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.SetLockoutEndDateAsync(`0,System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)
  commentId: M:Hybrid.Zero.Identity.Entities.UserStoreBase`12.SetLockoutEndDateAsync(`0,System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)
  id: SetLockoutEndDateAsync(`0,System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)
  parent: Hybrid.Zero.Identity.Entities.UserStoreBase`12
  langs:
  - csharp
  - vb
  name: SetLockoutEndDateAsync(TUser, Nullable<DateTimeOffset>, CancellationToken)
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.SetLockoutEndDateAsync(TUser, Nullable<DateTimeOffset>, CancellationToken)
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.SetLockoutEndDateAsync(TUser, System.Nullable<System.DateTimeOffset>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: SetLockoutEndDateAsync
    path: ../src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
    startLine: 767
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Zero.Identity.Entities
  summary: "\nLocks out a user until the specified end date has passed. Setting a end date in the past immediately unlocks a user.\n"
  example: []
  syntax:
    content: public Task SetLockoutEndDateAsync(TUser user, DateTimeOffset? lockoutEnd, CancellationToken cancellationToken)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose lockout date should be set.
    - id: lockoutEnd
      type: System.Nullable{System.DateTimeOffset}
      description: The <xref href="System.DateTimeOffset" data-throw-if-not-resolved="false"></xref> after which the <code data-dev-comment-type="paramref" class="paramref">user</code>&apos;s lockout should end.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task
      description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
    content.vb: Public Function SetLockoutEndDateAsync(user As TUser, lockoutEnd As DateTimeOffset?, cancellationToken As CancellationToken) As Task
  overload: Hybrid.Zero.Identity.Entities.UserStoreBase`12.SetLockoutEndDateAsync*
  implements:
  - Microsoft.AspNetCore.Identity.IUserLockoutStore{{TUser}}.SetLockoutEndDateAsync({TUser},System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).SetLockoutEndDateAsync(TUser, Nullable(Of DateTimeOffset), CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).SetLockoutEndDateAsync(TUser, System.Nullable(Of System.DateTimeOffset), System.Threading.CancellationToken)
  name.vb: SetLockoutEndDateAsync(TUser, Nullable(Of DateTimeOffset), CancellationToken)
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.IncrementAccessFailedCountAsync(`0,System.Threading.CancellationToken)
  commentId: M:Hybrid.Zero.Identity.Entities.UserStoreBase`12.IncrementAccessFailedCountAsync(`0,System.Threading.CancellationToken)
  id: IncrementAccessFailedCountAsync(`0,System.Threading.CancellationToken)
  parent: Hybrid.Zero.Identity.Entities.UserStoreBase`12
  langs:
  - csharp
  - vb
  name: IncrementAccessFailedCountAsync(TUser, CancellationToken)
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.IncrementAccessFailedCountAsync(TUser, CancellationToken)
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.IncrementAccessFailedCountAsync(TUser, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: IncrementAccessFailedCountAsync
    path: ../src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
    startLine: 783
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Zero.Identity.Entities
  summary: "\nRecords that a failed access has occurred, incrementing the failed access count.\n"
  example: []
  syntax:
    content: public Task<int> IncrementAccessFailedCountAsync(TUser user, CancellationToken cancellationToken)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose cancellation count should be incremented.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation, containing the incremented failed access count.
    content.vb: Public Function IncrementAccessFailedCountAsync(user As TUser, cancellationToken As CancellationToken) As Task(Of Integer)
  overload: Hybrid.Zero.Identity.Entities.UserStoreBase`12.IncrementAccessFailedCountAsync*
  implements:
  - Microsoft.AspNetCore.Identity.IUserLockoutStore{{TUser}}.IncrementAccessFailedCountAsync({TUser},System.Threading.CancellationToken)
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).IncrementAccessFailedCountAsync(TUser, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).IncrementAccessFailedCountAsync(TUser, System.Threading.CancellationToken)
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.ResetAccessFailedCountAsync(`0,System.Threading.CancellationToken)
  commentId: M:Hybrid.Zero.Identity.Entities.UserStoreBase`12.ResetAccessFailedCountAsync(`0,System.Threading.CancellationToken)
  id: ResetAccessFailedCountAsync(`0,System.Threading.CancellationToken)
  parent: Hybrid.Zero.Identity.Entities.UserStoreBase`12
  langs:
  - csharp
  - vb
  name: ResetAccessFailedCountAsync(TUser, CancellationToken)
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.ResetAccessFailedCountAsync(TUser, CancellationToken)
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.ResetAccessFailedCountAsync(TUser, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: ResetAccessFailedCountAsync
    path: ../src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
    startLine: 798
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Zero.Identity.Entities
  summary: Resets a user&apos;s failed access count.
  remarks: This is typically called after the account is successfully accessed.
  example: []
  syntax:
    content: public Task ResetAccessFailedCountAsync(TUser user, CancellationToken cancellationToken)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose failed access count should be reset.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task
      description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
    content.vb: Public Function ResetAccessFailedCountAsync(user As TUser, cancellationToken As CancellationToken) As Task
  overload: Hybrid.Zero.Identity.Entities.UserStoreBase`12.ResetAccessFailedCountAsync*
  implements:
  - Microsoft.AspNetCore.Identity.IUserLockoutStore{{TUser}}.ResetAccessFailedCountAsync({TUser},System.Threading.CancellationToken)
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).ResetAccessFailedCountAsync(TUser, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).ResetAccessFailedCountAsync(TUser, System.Threading.CancellationToken)
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetAccessFailedCountAsync(`0,System.Threading.CancellationToken)
  commentId: M:Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetAccessFailedCountAsync(`0,System.Threading.CancellationToken)
  id: GetAccessFailedCountAsync(`0,System.Threading.CancellationToken)
  parent: Hybrid.Zero.Identity.Entities.UserStoreBase`12
  langs:
  - csharp
  - vb
  name: GetAccessFailedCountAsync(TUser, CancellationToken)
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.GetAccessFailedCountAsync(TUser, CancellationToken)
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.GetAccessFailedCountAsync(TUser, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: GetAccessFailedCountAsync
    path: ../src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
    startLine: 814
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Zero.Identity.Entities
  summary: "\nRetrieves the current failed access count for the specified <code data-dev-comment-type=\"paramref\" class=\"paramref\">user</code>.\n"
  example: []
  syntax:
    content: public Task<int> GetAccessFailedCountAsync(TUser user, CancellationToken cancellationToken)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose failed access count should be retrieved.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation, containing the failed access count.
    content.vb: Public Function GetAccessFailedCountAsync(user As TUser, cancellationToken As CancellationToken) As Task(Of Integer)
  overload: Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetAccessFailedCountAsync*
  implements:
  - Microsoft.AspNetCore.Identity.IUserLockoutStore{{TUser}}.GetAccessFailedCountAsync({TUser},System.Threading.CancellationToken)
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).GetAccessFailedCountAsync(TUser, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).GetAccessFailedCountAsync(TUser, System.Threading.CancellationToken)
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetLockoutEnabledAsync(`0,System.Threading.CancellationToken)
  commentId: M:Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetLockoutEnabledAsync(`0,System.Threading.CancellationToken)
  id: GetLockoutEnabledAsync(`0,System.Threading.CancellationToken)
  parent: Hybrid.Zero.Identity.Entities.UserStoreBase`12
  langs:
  - csharp
  - vb
  name: GetLockoutEnabledAsync(TUser, CancellationToken)
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.GetLockoutEnabledAsync(TUser, CancellationToken)
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.GetLockoutEnabledAsync(TUser, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: GetLockoutEnabledAsync
    path: ../src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
    startLine: 831
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Zero.Identity.Entities
  summary: "\nRetrieves a flag indicating whether user lockout can enabled for the specified user.\n"
  example: []
  syntax:
    content: public Task<bool> GetLockoutEnabledAsync(TUser user, CancellationToken cancellationToken)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose ability to be locked out should be returned.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: "\nThe <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents the asynchronous operation, true if a user can be locked out, otherwise false.\n"
    content.vb: Public Function GetLockoutEnabledAsync(user As TUser, cancellationToken As CancellationToken) As Task(Of Boolean)
  overload: Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetLockoutEnabledAsync*
  implements:
  - Microsoft.AspNetCore.Identity.IUserLockoutStore{{TUser}}.GetLockoutEnabledAsync({TUser},System.Threading.CancellationToken)
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).GetLockoutEnabledAsync(TUser, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).GetLockoutEnabledAsync(TUser, System.Threading.CancellationToken)
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.SetLockoutEnabledAsync(`0,System.Boolean,System.Threading.CancellationToken)
  commentId: M:Hybrid.Zero.Identity.Entities.UserStoreBase`12.SetLockoutEnabledAsync(`0,System.Boolean,System.Threading.CancellationToken)
  id: SetLockoutEnabledAsync(`0,System.Boolean,System.Threading.CancellationToken)
  parent: Hybrid.Zero.Identity.Entities.UserStoreBase`12
  langs:
  - csharp
  - vb
  name: SetLockoutEnabledAsync(TUser, Boolean, CancellationToken)
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.SetLockoutEnabledAsync(TUser, Boolean, CancellationToken)
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.SetLockoutEnabledAsync(TUser, System.Boolean, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: SetLockoutEnabledAsync
    path: ../src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
    startLine: 847
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Zero.Identity.Entities
  summary: "\nSet the flag indicating if the specified <code data-dev-comment-type=\"paramref\" class=\"paramref\">user</code> can be locked out.\n"
  example: []
  syntax:
    content: public Task SetLockoutEnabledAsync(TUser user, bool enabled, CancellationToken cancellationToken)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose ability to be locked out should be set.
    - id: enabled
      type: System.Boolean
      description: A flag indicating if lock out can be enabled for the specified <code data-dev-comment-type="paramref" class="paramref">user</code>.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task
      description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
    content.vb: Public Function SetLockoutEnabledAsync(user As TUser, enabled As Boolean, cancellationToken As CancellationToken) As Task
  overload: Hybrid.Zero.Identity.Entities.UserStoreBase`12.SetLockoutEnabledAsync*
  implements:
  - Microsoft.AspNetCore.Identity.IUserLockoutStore{{TUser}}.SetLockoutEnabledAsync({TUser},System.Boolean,System.Threading.CancellationToken)
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).SetLockoutEnabledAsync(TUser, Boolean, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).SetLockoutEnabledAsync(TUser, System.Boolean, System.Threading.CancellationToken)
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.SetPhoneNumberAsync(`0,System.String,System.Threading.CancellationToken)
  commentId: M:Hybrid.Zero.Identity.Entities.UserStoreBase`12.SetPhoneNumberAsync(`0,System.String,System.Threading.CancellationToken)
  id: SetPhoneNumberAsync(`0,System.String,System.Threading.CancellationToken)
  parent: Hybrid.Zero.Identity.Entities.UserStoreBase`12
  langs:
  - csharp
  - vb
  name: SetPhoneNumberAsync(TUser, String, CancellationToken)
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.SetPhoneNumberAsync(TUser, String, CancellationToken)
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.SetPhoneNumberAsync(TUser, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: SetPhoneNumberAsync
    path: ../src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
    startLine: 868
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Zero.Identity.Entities
  summary: "\nSets the telephone number for the specified <code data-dev-comment-type=\"paramref\" class=\"paramref\">user</code>.\n"
  example: []
  syntax:
    content: public Task SetPhoneNumberAsync(TUser user, string phoneNumber, CancellationToken cancellationToken)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose telephone number should be set.
    - id: phoneNumber
      type: System.String
      description: The telephone number to set.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task
      description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
    content.vb: Public Function SetPhoneNumberAsync(user As TUser, phoneNumber As String, cancellationToken As CancellationToken) As Task
  overload: Hybrid.Zero.Identity.Entities.UserStoreBase`12.SetPhoneNumberAsync*
  implements:
  - Microsoft.AspNetCore.Identity.IUserPhoneNumberStore{{TUser}}.SetPhoneNumberAsync({TUser},System.String,System.Threading.CancellationToken)
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).SetPhoneNumberAsync(TUser, String, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).SetPhoneNumberAsync(TUser, System.String, System.Threading.CancellationToken)
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetPhoneNumberAsync(`0,System.Threading.CancellationToken)
  commentId: M:Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetPhoneNumberAsync(`0,System.Threading.CancellationToken)
  id: GetPhoneNumberAsync(`0,System.Threading.CancellationToken)
  parent: Hybrid.Zero.Identity.Entities.UserStoreBase`12
  langs:
  - csharp
  - vb
  name: GetPhoneNumberAsync(TUser, CancellationToken)
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.GetPhoneNumberAsync(TUser, CancellationToken)
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.GetPhoneNumberAsync(TUser, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: GetPhoneNumberAsync
    path: ../src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
    startLine: 884
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Zero.Identity.Entities
  summary: "\nGets the telephone number, if any, for the specified <code data-dev-comment-type=\"paramref\" class=\"paramref\">user</code>.\n"
  example: []
  syntax:
    content: public Task<string> GetPhoneNumberAsync(TUser user, CancellationToken cancellationToken)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose telephone number should be retrieved.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation, containing the user&apos;s telephone number, if any.
    content.vb: Public Function GetPhoneNumberAsync(user As TUser, cancellationToken As CancellationToken) As Task(Of String)
  overload: Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetPhoneNumberAsync*
  implements:
  - Microsoft.AspNetCore.Identity.IUserPhoneNumberStore{{TUser}}.GetPhoneNumberAsync({TUser},System.Threading.CancellationToken)
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).GetPhoneNumberAsync(TUser, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).GetPhoneNumberAsync(TUser, System.Threading.CancellationToken)
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetPhoneNumberConfirmedAsync(`0,System.Threading.CancellationToken)
  commentId: M:Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetPhoneNumberConfirmedAsync(`0,System.Threading.CancellationToken)
  id: GetPhoneNumberConfirmedAsync(`0,System.Threading.CancellationToken)
  parent: Hybrid.Zero.Identity.Entities.UserStoreBase`12
  langs:
  - csharp
  - vb
  name: GetPhoneNumberConfirmedAsync(TUser, CancellationToken)
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.GetPhoneNumberConfirmedAsync(TUser, CancellationToken)
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.GetPhoneNumberConfirmedAsync(TUser, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: GetPhoneNumberConfirmedAsync
    path: ../src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
    startLine: 902
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Zero.Identity.Entities
  summary: "\nGets a flag indicating whether the specified <code data-dev-comment-type=\"paramref\" class=\"paramref\">user</code>&apos;s telephone number has been confirmed.\n"
  example: []
  syntax:
    content: public Task<bool> GetPhoneNumberConfirmedAsync(TUser user, CancellationToken cancellationToken)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user to return a flag for, indicating whether their telephone number is confirmed.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: "\nThe <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents the asynchronous operation, returning true if the specified <code data-dev-comment-type=\"paramref\" class=\"paramref\">user</code> has a confirmed\ntelephone number otherwise false.\n"
    content.vb: Public Function GetPhoneNumberConfirmedAsync(user As TUser, cancellationToken As CancellationToken) As Task(Of Boolean)
  overload: Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetPhoneNumberConfirmedAsync*
  implements:
  - Microsoft.AspNetCore.Identity.IUserPhoneNumberStore{{TUser}}.GetPhoneNumberConfirmedAsync({TUser},System.Threading.CancellationToken)
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).GetPhoneNumberConfirmedAsync(TUser, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).GetPhoneNumberConfirmedAsync(TUser, System.Threading.CancellationToken)
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.SetPhoneNumberConfirmedAsync(`0,System.Boolean,System.Threading.CancellationToken)
  commentId: M:Hybrid.Zero.Identity.Entities.UserStoreBase`12.SetPhoneNumberConfirmedAsync(`0,System.Boolean,System.Threading.CancellationToken)
  id: SetPhoneNumberConfirmedAsync(`0,System.Boolean,System.Threading.CancellationToken)
  parent: Hybrid.Zero.Identity.Entities.UserStoreBase`12
  langs:
  - csharp
  - vb
  name: SetPhoneNumberConfirmedAsync(TUser, Boolean, CancellationToken)
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.SetPhoneNumberConfirmedAsync(TUser, Boolean, CancellationToken)
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.SetPhoneNumberConfirmedAsync(TUser, System.Boolean, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: SetPhoneNumberConfirmedAsync
    path: ../src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
    startLine: 918
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Zero.Identity.Entities
  summary: "\nSets a flag indicating if the specified <code data-dev-comment-type=\"paramref\" class=\"paramref\">user</code>&apos;s phone number has been confirmed.\n"
  example: []
  syntax:
    content: public Task SetPhoneNumberConfirmedAsync(TUser user, bool confirmed, CancellationToken cancellationToken)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose telephone number confirmation status should be set.
    - id: confirmed
      type: System.Boolean
      description: A flag indicating whether the user&apos;s telephone number has been confirmed.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task
      description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
    content.vb: Public Function SetPhoneNumberConfirmedAsync(user As TUser, confirmed As Boolean, cancellationToken As CancellationToken) As Task
  overload: Hybrid.Zero.Identity.Entities.UserStoreBase`12.SetPhoneNumberConfirmedAsync*
  implements:
  - Microsoft.AspNetCore.Identity.IUserPhoneNumberStore{{TUser}}.SetPhoneNumberConfirmedAsync({TUser},System.Boolean,System.Threading.CancellationToken)
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).SetPhoneNumberConfirmedAsync(TUser, Boolean, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).SetPhoneNumberConfirmedAsync(TUser, System.Boolean, System.Threading.CancellationToken)
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.SetTwoFactorEnabledAsync(`0,System.Boolean,System.Threading.CancellationToken)
  commentId: M:Hybrid.Zero.Identity.Entities.UserStoreBase`12.SetTwoFactorEnabledAsync(`0,System.Boolean,System.Threading.CancellationToken)
  id: SetTwoFactorEnabledAsync(`0,System.Boolean,System.Threading.CancellationToken)
  parent: Hybrid.Zero.Identity.Entities.UserStoreBase`12
  langs:
  - csharp
  - vb
  name: SetTwoFactorEnabledAsync(TUser, Boolean, CancellationToken)
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.SetTwoFactorEnabledAsync(TUser, Boolean, CancellationToken)
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.SetTwoFactorEnabledAsync(TUser, System.Boolean, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: SetTwoFactorEnabledAsync
    path: ../src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
    startLine: 940
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Zero.Identity.Entities
  summary: "\nSets a flag indicating whether the specified <code data-dev-comment-type=\"paramref\" class=\"paramref\">user</code> has two factor authentication enabled or not,\nas an asynchronous operation.\n"
  example: []
  syntax:
    content: public Task SetTwoFactorEnabledAsync(TUser user, bool enabled, CancellationToken cancellationToken)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose two factor authentication enabled status should be set.
    - id: enabled
      type: System.Boolean
      description: A flag indicating whether the specified <code data-dev-comment-type="paramref" class="paramref">user</code> has two factor authentication enabled.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task
      description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
    content.vb: Public Function SetTwoFactorEnabledAsync(user As TUser, enabled As Boolean, cancellationToken As CancellationToken) As Task
  overload: Hybrid.Zero.Identity.Entities.UserStoreBase`12.SetTwoFactorEnabledAsync*
  implements:
  - Microsoft.AspNetCore.Identity.IUserTwoFactorStore{{TUser}}.SetTwoFactorEnabledAsync({TUser},System.Boolean,System.Threading.CancellationToken)
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).SetTwoFactorEnabledAsync(TUser, Boolean, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).SetTwoFactorEnabledAsync(TUser, System.Boolean, System.Threading.CancellationToken)
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetTwoFactorEnabledAsync(`0,System.Threading.CancellationToken)
  commentId: M:Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetTwoFactorEnabledAsync(`0,System.Threading.CancellationToken)
  id: GetTwoFactorEnabledAsync(`0,System.Threading.CancellationToken)
  parent: Hybrid.Zero.Identity.Entities.UserStoreBase`12
  langs:
  - csharp
  - vb
  name: GetTwoFactorEnabledAsync(TUser, CancellationToken)
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.GetTwoFactorEnabledAsync(TUser, CancellationToken)
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.GetTwoFactorEnabledAsync(TUser, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: GetTwoFactorEnabledAsync
    path: ../src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
    startLine: 960
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Zero.Identity.Entities
  summary: "\nReturns a flag indicating whether the specified <code data-dev-comment-type=\"paramref\" class=\"paramref\">user</code> has two factor authentication enabled or not,\nas an asynchronous operation.\n"
  example: []
  syntax:
    content: public Task<bool> GetTwoFactorEnabledAsync(TUser user, CancellationToken cancellationToken)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose two factor authentication enabled status should be set.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: "\nThe <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents the asynchronous operation, containing a flag indicating whether the specified\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">user</code> has two factor authentication enabled or not.\n"
    content.vb: Public Function GetTwoFactorEnabledAsync(user As TUser, cancellationToken As CancellationToken) As Task(Of Boolean)
  overload: Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetTwoFactorEnabledAsync*
  implements:
  - Microsoft.AspNetCore.Identity.IUserTwoFactorStore{{TUser}}.GetTwoFactorEnabledAsync({TUser},System.Threading.CancellationToken)
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).GetTwoFactorEnabledAsync(TUser, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).GetTwoFactorEnabledAsync(TUser, System.Threading.CancellationToken)
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.SetTokenAsync(`0,System.String,System.String,System.String,System.Threading.CancellationToken)
  commentId: M:Hybrid.Zero.Identity.Entities.UserStoreBase`12.SetTokenAsync(`0,System.String,System.String,System.String,System.Threading.CancellationToken)
  id: SetTokenAsync(`0,System.String,System.String,System.String,System.Threading.CancellationToken)
  parent: Hybrid.Zero.Identity.Entities.UserStoreBase`12
  langs:
  - csharp
  - vb
  name: SetTokenAsync(TUser, String, String, String, CancellationToken)
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.SetTokenAsync(TUser, String, String, String, CancellationToken)
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.SetTokenAsync(TUser, System.String, System.String, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: SetTokenAsync
    path: ../src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
    startLine: 980
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Zero.Identity.Entities
  summary: Sets the token value for a particular user.
  example: []
  syntax:
    content: public Task SetTokenAsync(TUser user, string loginProvider, string name, string value, CancellationToken cancellationToken)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user.
    - id: loginProvider
      type: System.String
      description: The authentication provider for the token.
    - id: name
      type: System.String
      description: The name of the token.
    - id: value
      type: System.String
      description: The value of the token.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task
      description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
    content.vb: Public Function SetTokenAsync(user As TUser, loginProvider As String, name As String, value As String, cancellationToken As CancellationToken) As Task
  overload: Hybrid.Zero.Identity.Entities.UserStoreBase`12.SetTokenAsync*
  implements:
  - Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore{{TUser}}.SetTokenAsync({TUser},System.String,System.String,System.String,System.Threading.CancellationToken)
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).SetTokenAsync(TUser, String, String, String, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).SetTokenAsync(TUser, System.String, System.String, System.String, System.Threading.CancellationToken)
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.RemoveTokenAsync(`0,System.String,System.String,System.Threading.CancellationToken)
  commentId: M:Hybrid.Zero.Identity.Entities.UserStoreBase`12.RemoveTokenAsync(`0,System.String,System.String,System.Threading.CancellationToken)
  id: RemoveTokenAsync(`0,System.String,System.String,System.Threading.CancellationToken)
  parent: Hybrid.Zero.Identity.Entities.UserStoreBase`12
  langs:
  - csharp
  - vb
  name: RemoveTokenAsync(TUser, String, String, CancellationToken)
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.RemoveTokenAsync(TUser, String, String, CancellationToken)
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.RemoveTokenAsync(TUser, System.String, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: RemoveTokenAsync
    path: ../src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
    startLine: 1005
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Zero.Identity.Entities
  summary: Deletes a token for a user.
  example: []
  syntax:
    content: public Task RemoveTokenAsync(TUser user, string loginProvider, string name, CancellationToken cancellationToken)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user.
    - id: loginProvider
      type: System.String
      description: The authentication provider for the token.
    - id: name
      type: System.String
      description: The name of the token.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task
      description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
    content.vb: Public Function RemoveTokenAsync(user As TUser, loginProvider As String, name As String, cancellationToken As CancellationToken) As Task
  overload: Hybrid.Zero.Identity.Entities.UserStoreBase`12.RemoveTokenAsync*
  implements:
  - Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore{{TUser}}.RemoveTokenAsync({TUser},System.String,System.String,System.Threading.CancellationToken)
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).RemoveTokenAsync(TUser, String, String, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).RemoveTokenAsync(TUser, System.String, System.String, System.Threading.CancellationToken)
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetTokenAsync(`0,System.String,System.String,System.Threading.CancellationToken)
  commentId: M:Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetTokenAsync(`0,System.String,System.String,System.Threading.CancellationToken)
  id: GetTokenAsync(`0,System.String,System.String,System.Threading.CancellationToken)
  parent: Hybrid.Zero.Identity.Entities.UserStoreBase`12
  langs:
  - csharp
  - vb
  name: GetTokenAsync(TUser, String, String, CancellationToken)
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.GetTokenAsync(TUser, String, String, CancellationToken)
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.GetTokenAsync(TUser, System.String, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: GetTokenAsync
    path: ../src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
    startLine: 1020
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Zero.Identity.Entities
  summary: Returns the token value.
  example: []
  syntax:
    content: public Task<string> GetTokenAsync(TUser user, string loginProvider, string name, CancellationToken cancellationToken)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user.
    - id: loginProvider
      type: System.String
      description: The authentication provider for the token.
    - id: name
      type: System.String
      description: The name of the token.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
    content.vb: Public Function GetTokenAsync(user As TUser, loginProvider As String, name As String, cancellationToken As CancellationToken) As Task(Of String)
  overload: Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetTokenAsync*
  implements:
  - Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore{{TUser}}.GetTokenAsync({TUser},System.String,System.String,System.Threading.CancellationToken)
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).GetTokenAsync(TUser, String, String, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).GetTokenAsync(TUser, System.String, System.String, System.Threading.CancellationToken)
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetTokensAsync(`0,System.String,System.Threading.CancellationToken)
  commentId: M:Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetTokensAsync(`0,System.String,System.Threading.CancellationToken)
  id: GetTokensAsync(`0,System.String,System.Threading.CancellationToken)
  parent: Hybrid.Zero.Identity.Entities.UserStoreBase`12
  langs:
  - csharp
  - vb
  name: GetTokensAsync(TUser, String, CancellationToken)
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.GetTokensAsync(TUser, String, CancellationToken)
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.GetTokensAsync(TUser, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: GetTokensAsync
    path: ../src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
    startLine: 1038
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Zero.Identity.Entities
  summary: "\n获取某个用户的所有指定登录提供者的权限标识\n"
  example: []
  syntax:
    content: public Task<string[]> GetTokensAsync(TUser user, string loginProvider, CancellationToken cancellationToken)
    parameters:
    - id: user
      type: '{TUser}'
      description: 用户信息
    - id: loginProvider
      type: System.String
      description: 登录提供者
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: 任务取消标识
    return:
      type: System.Threading.Tasks.Task{System.String[]}
      description: 权限标识集合
    content.vb: Public Function GetTokensAsync(user As TUser, loginProvider As String, cancellationToken As CancellationToken) As Task(Of String())
  overload: Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetTokensAsync*
  implements:
  - Hybrid.Zero.Identity.IHybridUserAuthenticationTokenStore{{TUser}}.GetTokensAsync({TUser},System.String,System.Threading.CancellationToken)
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).GetTokensAsync(TUser, String, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).GetTokensAsync(TUser, System.String, System.Threading.CancellationToken)
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.SetAuthenticatorKeyAsync(`0,System.String,System.Threading.CancellationToken)
  commentId: M:Hybrid.Zero.Identity.Entities.UserStoreBase`12.SetAuthenticatorKeyAsync(`0,System.String,System.Threading.CancellationToken)
  id: SetAuthenticatorKeyAsync(`0,System.String,System.Threading.CancellationToken)
  parent: Hybrid.Zero.Identity.Entities.UserStoreBase`12
  langs:
  - csharp
  - vb
  name: SetAuthenticatorKeyAsync(TUser, String, CancellationToken)
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.SetAuthenticatorKeyAsync(TUser, String, CancellationToken)
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.SetAuthenticatorKeyAsync(TUser, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: SetAuthenticatorKeyAsync
    path: ../src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
    startLine: 1063
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Zero.Identity.Entities
  summary: "\nSets the authenticator key for the specified <code data-dev-comment-type=\"paramref\" class=\"paramref\">user</code>.\n"
  example: []
  syntax:
    content: public Task SetAuthenticatorKeyAsync(TUser user, string key, CancellationToken cancellationToken)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose authenticator key should be set.
    - id: key
      type: System.String
      description: The authenticator key to set.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task
      description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
    content.vb: Public Function SetAuthenticatorKeyAsync(user As TUser, key As String, cancellationToken As CancellationToken) As Task
  overload: Hybrid.Zero.Identity.Entities.UserStoreBase`12.SetAuthenticatorKeyAsync*
  implements:
  - Microsoft.AspNetCore.Identity.IUserAuthenticatorKeyStore{{TUser}}.SetAuthenticatorKeyAsync({TUser},System.String,System.Threading.CancellationToken)
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).SetAuthenticatorKeyAsync(TUser, String, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).SetAuthenticatorKeyAsync(TUser, System.String, System.Threading.CancellationToken)
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetAuthenticatorKeyAsync(`0,System.Threading.CancellationToken)
  commentId: M:Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetAuthenticatorKeyAsync(`0,System.Threading.CancellationToken)
  id: GetAuthenticatorKeyAsync(`0,System.Threading.CancellationToken)
  parent: Hybrid.Zero.Identity.Entities.UserStoreBase`12
  langs:
  - csharp
  - vb
  name: GetAuthenticatorKeyAsync(TUser, CancellationToken)
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.GetAuthenticatorKeyAsync(TUser, CancellationToken)
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.GetAuthenticatorKeyAsync(TUser, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: GetAuthenticatorKeyAsync
    path: ../src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
    startLine: 1074
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Zero.Identity.Entities
  summary: "\nGet the authenticator key for the specified <code data-dev-comment-type=\"paramref\" class=\"paramref\">user</code>.\n"
  example: []
  syntax:
    content: public Task<string> GetAuthenticatorKeyAsync(TUser user, CancellationToken cancellationToken)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose security stamp should be set.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation, containing the security stamp for the specified <code data-dev-comment-type="paramref" class="paramref">user</code>.
    content.vb: Public Function GetAuthenticatorKeyAsync(user As TUser, cancellationToken As CancellationToken) As Task(Of String)
  overload: Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetAuthenticatorKeyAsync*
  implements:
  - Microsoft.AspNetCore.Identity.IUserAuthenticatorKeyStore{{TUser}}.GetAuthenticatorKeyAsync({TUser},System.Threading.CancellationToken)
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).GetAuthenticatorKeyAsync(TUser, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).GetAuthenticatorKeyAsync(TUser, System.Threading.CancellationToken)
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.ReplaceCodesAsync(`0,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)
  commentId: M:Hybrid.Zero.Identity.Entities.UserStoreBase`12.ReplaceCodesAsync(`0,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)
  id: ReplaceCodesAsync(`0,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)
  parent: Hybrid.Zero.Identity.Entities.UserStoreBase`12
  langs:
  - csharp
  - vb
  name: ReplaceCodesAsync(TUser, IEnumerable<String>, CancellationToken)
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.ReplaceCodesAsync(TUser, IEnumerable<String>, CancellationToken)
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.ReplaceCodesAsync(TUser, System.Collections.Generic.IEnumerable<System.String>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: ReplaceCodesAsync
    path: ../src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
    startLine: 1090
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Zero.Identity.Entities
  summary: "\nUpdates the recovery codes for the user while invalidating any previous recovery codes.\n"
  example: []
  syntax:
    content: public Task ReplaceCodesAsync(TUser user, IEnumerable<string> recoveryCodes, CancellationToken cancellationToken)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user to store new recovery codes for.
    - id: recoveryCodes
      type: System.Collections.Generic.IEnumerable{System.String}
      description: The new recovery codes for the user.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task
      description: The new recovery codes for the user.
    content.vb: Public Function ReplaceCodesAsync(user As TUser, recoveryCodes As IEnumerable(Of String), cancellationToken As CancellationToken) As Task
  overload: Hybrid.Zero.Identity.Entities.UserStoreBase`12.ReplaceCodesAsync*
  implements:
  - Microsoft.AspNetCore.Identity.IUserTwoFactorRecoveryCodeStore{{TUser}}.ReplaceCodesAsync({TUser},System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).ReplaceCodesAsync(TUser, IEnumerable(Of String), CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).ReplaceCodesAsync(TUser, System.Collections.Generic.IEnumerable(Of System.String), System.Threading.CancellationToken)
  name.vb: ReplaceCodesAsync(TUser, IEnumerable(Of String), CancellationToken)
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.RedeemCodeAsync(`0,System.String,System.Threading.CancellationToken)
  commentId: M:Hybrid.Zero.Identity.Entities.UserStoreBase`12.RedeemCodeAsync(`0,System.String,System.Threading.CancellationToken)
  id: RedeemCodeAsync(`0,System.String,System.Threading.CancellationToken)
  parent: Hybrid.Zero.Identity.Entities.UserStoreBase`12
  langs:
  - csharp
  - vb
  name: RedeemCodeAsync(TUser, String, CancellationToken)
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.RedeemCodeAsync(TUser, String, CancellationToken)
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.RedeemCodeAsync(TUser, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: RedeemCodeAsync
    path: ../src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
    startLine: 1104
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Zero.Identity.Entities
  summary: "\nReturns whether a recovery code is valid for a user. Note: recovery codes are only valid\nonce, and will be invalid after use.\n"
  example: []
  syntax:
    content: public Task<bool> RedeemCodeAsync(TUser user, string code, CancellationToken cancellationToken)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user who owns the recovery code.
    - id: code
      type: System.String
      description: The recovery code to use.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: True if the recovery code was found for the user.
    content.vb: Public Function RedeemCodeAsync(user As TUser, code As String, cancellationToken As CancellationToken) As Task(Of Boolean)
  overload: Hybrid.Zero.Identity.Entities.UserStoreBase`12.RedeemCodeAsync*
  implements:
  - Microsoft.AspNetCore.Identity.IUserTwoFactorRecoveryCodeStore{{TUser}}.RedeemCodeAsync({TUser},System.String,System.Threading.CancellationToken)
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).RedeemCodeAsync(TUser, String, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).RedeemCodeAsync(TUser, System.String, System.Threading.CancellationToken)
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.CountCodesAsync(`0,System.Threading.CancellationToken)
  commentId: M:Hybrid.Zero.Identity.Entities.UserStoreBase`12.CountCodesAsync(`0,System.Threading.CancellationToken)
  id: CountCodesAsync(`0,System.Threading.CancellationToken)
  parent: Hybrid.Zero.Identity.Entities.UserStoreBase`12
  langs:
  - csharp
  - vb
  name: CountCodesAsync(TUser, CancellationToken)
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.CountCodesAsync(TUser, CancellationToken)
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.CountCodesAsync(TUser, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: CountCodesAsync
    path: ../src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
    startLine: 1128
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Zero.Identity.Entities
  summary: "\nReturns how many recovery code are still valid for a user.\n"
  example: []
  syntax:
    content: public Task<int> CountCodesAsync(TUser user, CancellationToken cancellationToken)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user who owns the recovery code.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: The number of valid recovery codes for the user..
    content.vb: Public Function CountCodesAsync(user As TUser, cancellationToken As CancellationToken) As Task(Of Integer)
  overload: Hybrid.Zero.Identity.Entities.UserStoreBase`12.CountCodesAsync*
  implements:
  - Microsoft.AspNetCore.Identity.IUserTwoFactorRecoveryCodeStore{{TUser}}.CountCodesAsync({TUser},System.Threading.CancellationToken)
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).CountCodesAsync(TUser, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).CountCodesAsync(TUser, System.Threading.CancellationToken)
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.AddToRoleAsync(`0,System.String,System.Threading.CancellationToken)
  commentId: M:Hybrid.Zero.Identity.Entities.UserStoreBase`12.AddToRoleAsync(`0,System.String,System.Threading.CancellationToken)
  id: AddToRoleAsync(`0,System.String,System.Threading.CancellationToken)
  parent: Hybrid.Zero.Identity.Entities.UserStoreBase`12
  langs:
  - csharp
  - vb
  name: AddToRoleAsync(TUser, String, CancellationToken)
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.AddToRoleAsync(TUser, String, CancellationToken)
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.AddToRoleAsync(TUser, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: AddToRoleAsync
    path: ../src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
    startLine: 1153
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Zero.Identity.Entities
  summary: "\nAdd a the specified <code data-dev-comment-type=\"paramref\" class=\"paramref\">user</code> to the named role.\n"
  example: []
  syntax:
    content: public Task AddToRoleAsync(TUser user, string normalizedRoleName, CancellationToken cancellationToken)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user to add to the named role.
    - id: normalizedRoleName
      type: System.String
      description: The name of the role to add the user to.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task
      description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
    content.vb: Public Function AddToRoleAsync(user As TUser, normalizedRoleName As String, cancellationToken As CancellationToken) As Task
  overload: Hybrid.Zero.Identity.Entities.UserStoreBase`12.AddToRoleAsync*
  implements:
  - Microsoft.AspNetCore.Identity.IUserRoleStore{{TUser}}.AddToRoleAsync({TUser},System.String,System.Threading.CancellationToken)
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).AddToRoleAsync(TUser, String, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).AddToRoleAsync(TUser, System.String, System.Threading.CancellationToken)
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.RemoveFromRoleAsync(`0,System.String,System.Threading.CancellationToken)
  commentId: M:Hybrid.Zero.Identity.Entities.UserStoreBase`12.RemoveFromRoleAsync(`0,System.String,System.Threading.CancellationToken)
  id: RemoveFromRoleAsync(`0,System.String,System.Threading.CancellationToken)
  parent: Hybrid.Zero.Identity.Entities.UserStoreBase`12
  langs:
  - csharp
  - vb
  name: RemoveFromRoleAsync(TUser, String, CancellationToken)
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.RemoveFromRoleAsync(TUser, String, CancellationToken)
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.RemoveFromRoleAsync(TUser, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: RemoveFromRoleAsync
    path: ../src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
    startLine: 1176
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Zero.Identity.Entities
  summary: "\nAdd a the specified <code data-dev-comment-type=\"paramref\" class=\"paramref\">user</code> from the named role.\n"
  example: []
  syntax:
    content: public Task RemoveFromRoleAsync(TUser user, string normalizedRoleName, CancellationToken cancellationToken)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user to remove the named role from.
    - id: normalizedRoleName
      type: System.String
      description: The name of the role to remove.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task
      description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
    content.vb: Public Function RemoveFromRoleAsync(user As TUser, normalizedRoleName As String, cancellationToken As CancellationToken) As Task
  overload: Hybrid.Zero.Identity.Entities.UserStoreBase`12.RemoveFromRoleAsync*
  implements:
  - Microsoft.AspNetCore.Identity.IUserRoleStore{{TUser}}.RemoveFromRoleAsync({TUser},System.String,System.Threading.CancellationToken)
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).RemoveFromRoleAsync(TUser, String, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).RemoveFromRoleAsync(TUser, System.String, System.Threading.CancellationToken)
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetRolesAsync(`0,System.Threading.CancellationToken)
  commentId: M:Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetRolesAsync(`0,System.Threading.CancellationToken)
  id: GetRolesAsync(`0,System.Threading.CancellationToken)
  parent: Hybrid.Zero.Identity.Entities.UserStoreBase`12
  langs:
  - csharp
  - vb
  name: GetRolesAsync(TUser, CancellationToken)
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.GetRolesAsync(TUser, CancellationToken)
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.GetRolesAsync(TUser, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: GetRolesAsync
    path: ../src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
    startLine: 1201
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Zero.Identity.Entities
  summary: "\nGets a list of role names the specified <code data-dev-comment-type=\"paramref\" class=\"paramref\">user</code> belongs to.\n"
  example: []
  syntax:
    content: public Task<IList<string>> GetRolesAsync(TUser user, CancellationToken cancellationToken)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose role names to retrieve.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IList{System.String}}
      description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation, containing a list of role names.
    content.vb: Public Function GetRolesAsync(user As TUser, cancellationToken As CancellationToken) As Task(Of IList(Of String))
  overload: Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetRolesAsync*
  implements:
  - Microsoft.AspNetCore.Identity.IUserRoleStore{{TUser}}.GetRolesAsync({TUser},System.Threading.CancellationToken)
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).GetRolesAsync(TUser, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).GetRolesAsync(TUser, System.Threading.CancellationToken)
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.IsInRoleAsync(`0,System.String,System.Threading.CancellationToken)
  commentId: M:Hybrid.Zero.Identity.Entities.UserStoreBase`12.IsInRoleAsync(`0,System.String,System.Threading.CancellationToken)
  id: IsInRoleAsync(`0,System.String,System.Threading.CancellationToken)
  parent: Hybrid.Zero.Identity.Entities.UserStoreBase`12
  langs:
  - csharp
  - vb
  name: IsInRoleAsync(TUser, String, CancellationToken)
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.IsInRoleAsync(TUser, String, CancellationToken)
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.IsInRoleAsync(TUser, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: IsInRoleAsync
    path: ../src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
    startLine: 1227
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Zero.Identity.Entities
  summary: "\nReturns a flag indicating whether the specified <code data-dev-comment-type=\"paramref\" class=\"paramref\">user</code> is a member of the give named role.\n"
  example: []
  syntax:
    content: public Task<bool> IsInRoleAsync(TUser user, string roleName, CancellationToken cancellationToken)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose role membership should be checked.
    - id: roleName
      type: System.String
      description: The name of the role to be checked.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: "\nThe <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents the asynchronous operation, containing a flag indicating whether the specified <code data-dev-comment-type=\"paramref\" class=\"paramref\">user</code> is\na member of the named role.\n"
    content.vb: Public Function IsInRoleAsync(user As TUser, roleName As String, cancellationToken As CancellationToken) As Task(Of Boolean)
  overload: Hybrid.Zero.Identity.Entities.UserStoreBase`12.IsInRoleAsync*
  implements:
  - Microsoft.AspNetCore.Identity.IUserRoleStore{{TUser}}.IsInRoleAsync({TUser},System.String,System.Threading.CancellationToken)
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).IsInRoleAsync(TUser, String, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).IsInRoleAsync(TUser, System.String, System.Threading.CancellationToken)
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetUsersInRoleAsync(System.String,System.Threading.CancellationToken)
  commentId: M:Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetUsersInRoleAsync(System.String,System.Threading.CancellationToken)
  id: GetUsersInRoleAsync(System.String,System.Threading.CancellationToken)
  parent: Hybrid.Zero.Identity.Entities.UserStoreBase`12
  langs:
  - csharp
  - vb
  name: GetUsersInRoleAsync(String, CancellationToken)
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.GetUsersInRoleAsync(String, CancellationToken)
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.GetUsersInRoleAsync(System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: GetUsersInRoleAsync
    path: ../src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
    startLine: 1250
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Zero.Identity.Entities
  summary: "\nReturns a list of Users who are members of the named role.\n"
  example: []
  syntax:
    content: public Task<IList<TUser>> GetUsersInRoleAsync(string roleName, CancellationToken cancellationToken)
    parameters:
    - id: roleName
      type: System.String
      description: The name of the role whose membership should be returned.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IList{{TUser}}}
      description: "\nThe <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents the asynchronous operation, containing a list of users who are in the named role.\n"
    content.vb: Public Function GetUsersInRoleAsync(roleName As String, cancellationToken As CancellationToken) As Task(Of IList(Of TUser))
  overload: Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetUsersInRoleAsync*
  implements:
  - Microsoft.AspNetCore.Identity.IUserRoleStore{{TUser}}.GetUsersInRoleAsync(System.String,System.Threading.CancellationToken)
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).GetUsersInRoleAsync(String, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).GetUsersInRoleAsync(System.String, System.Threading.CancellationToken)
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.ConvertIdFromString(System.String)
  commentId: M:Hybrid.Zero.Identity.Entities.UserStoreBase`12.ConvertIdFromString(System.String)
  id: ConvertIdFromString(System.String)
  parent: Hybrid.Zero.Identity.Entities.UserStoreBase`12
  langs:
  - csharp
  - vb
  name: ConvertIdFromString(String)
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.ConvertIdFromString(String)
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.ConvertIdFromString(System.String)
  type: Method
  source:
    remote:
      path: src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: ConvertIdFromString
    path: ../src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
    startLine: 1275
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Zero.Identity.Entities
  summary: "\nConverts the provided <code data-dev-comment-type=\"paramref\" class=\"paramref\">id</code> to a strongly typed key object.\n"
  example: []
  syntax:
    content: public virtual TUserKey ConvertIdFromString(string id)
    parameters:
    - id: id
      type: System.String
      description: The id to convert.
    return:
      type: '{TUserKey}'
      description: An instance of <code data-dev-comment-type="typeparamref" class="typeparamref">TUserKey</code> representing the provided <code data-dev-comment-type="paramref" class="paramref">id</code>.
    content.vb: Public Overridable Function ConvertIdFromString(id As String) As TUserKey
  overload: Hybrid.Zero.Identity.Entities.UserStoreBase`12.ConvertIdFromString*
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).ConvertIdFromString(String)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).ConvertIdFromString(System.String)
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.ConvertIdToString(`1)
  commentId: M:Hybrid.Zero.Identity.Entities.UserStoreBase`12.ConvertIdToString(`1)
  id: ConvertIdToString(`1)
  parent: Hybrid.Zero.Identity.Entities.UserStoreBase`12
  langs:
  - csharp
  - vb
  name: ConvertIdToString(TUserKey)
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.ConvertIdToString(TUserKey)
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.ConvertIdToString(TUserKey)
  type: Method
  source:
    remote:
      path: src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: ConvertIdToString
    path: ../src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
    startLine: 1289
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Zero.Identity.Entities
  summary: "\nConverts the provided <code data-dev-comment-type=\"paramref\" class=\"paramref\">id</code> to its string representation.\n"
  example: []
  syntax:
    content: public virtual string ConvertIdToString(TUserKey id)
    parameters:
    - id: id
      type: '{TUserKey}'
      description: The id to convert.
    return:
      type: System.String
      description: An <xref href="System.String" data-throw-if-not-resolved="false"></xref> representation of the provided <code data-dev-comment-type="paramref" class="paramref">id</code>.
    content.vb: Public Overridable Function ConvertIdToString(id As TUserKey) As String
  overload: Hybrid.Zero.Identity.Entities.UserStoreBase`12.ConvertIdToString*
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).ConvertIdToString(TUserKey)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).ConvertIdToString(TUserKey)
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.ThrowIfDisposed
  commentId: M:Hybrid.Zero.Identity.Entities.UserStoreBase`12.ThrowIfDisposed
  id: ThrowIfDisposed
  parent: Hybrid.Zero.Identity.Entities.UserStoreBase`12
  langs:
  - csharp
  - vb
  name: ThrowIfDisposed()
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.ThrowIfDisposed()
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.ThrowIfDisposed()
  type: Method
  source:
    remote:
      path: src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: ThrowIfDisposed
    path: ../src/Hybrid.Zero/Identity/Entities/UserStoreBase.cs
    startLine: 1301
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Zero.Identity.Entities
  summary: "\n如果已释放，则抛出异常\n"
  example: []
  syntax:
    content: protected void ThrowIfDisposed()
    content.vb: Protected Sub ThrowIfDisposed
  overload: Hybrid.Zero.Identity.Entities.UserStoreBase`12.ThrowIfDisposed*
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).ThrowIfDisposed()
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).ThrowIfDisposed()
references:
- uid: Hybrid.Zero.Identity.Entities
  commentId: N:Hybrid.Zero.Identity.Entities
  name: Hybrid.Zero.Identity.Entities
  nameWithType: Hybrid.Zero.Identity.Entities
  fullName: Hybrid.Zero.Identity.Entities
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.AspNetCore.Identity.IQueryableUserStore{{TUser}}
  commentId: T:Microsoft.AspNetCore.Identity.IQueryableUserStore{`0}
  parent: Microsoft.AspNetCore.Identity
  definition: Microsoft.AspNetCore.Identity.IQueryableUserStore`1
  name: IQueryableUserStore<TUser>
  nameWithType: IQueryableUserStore<TUser>
  fullName: Microsoft.AspNetCore.Identity.IQueryableUserStore<TUser>
  nameWithType.vb: IQueryableUserStore(Of TUser)
  fullName.vb: Microsoft.AspNetCore.Identity.IQueryableUserStore(Of TUser)
  name.vb: IQueryableUserStore(Of TUser)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IQueryableUserStore`1
    name: IQueryableUserStore
    nameWithType: IQueryableUserStore
    fullName: Microsoft.AspNetCore.Identity.IQueryableUserStore
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IQueryableUserStore`1
    name: IQueryableUserStore
    nameWithType: IQueryableUserStore
    fullName: Microsoft.AspNetCore.Identity.IQueryableUserStore
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserLoginStore{{TUser}}
  commentId: T:Microsoft.AspNetCore.Identity.IUserLoginStore{`0}
  parent: Microsoft.AspNetCore.Identity
  definition: Microsoft.AspNetCore.Identity.IUserLoginStore`1
  name: IUserLoginStore<TUser>
  nameWithType: IUserLoginStore<TUser>
  fullName: Microsoft.AspNetCore.Identity.IUserLoginStore<TUser>
  nameWithType.vb: IUserLoginStore(Of TUser)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserLoginStore(Of TUser)
  name.vb: IUserLoginStore(Of TUser)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserLoginStore`1
    name: IUserLoginStore
    nameWithType: IUserLoginStore
    fullName: Microsoft.AspNetCore.Identity.IUserLoginStore
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserLoginStore`1
    name: IUserLoginStore
    nameWithType: IUserLoginStore
    fullName: Microsoft.AspNetCore.Identity.IUserLoginStore
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserClaimStore{{TUser}}
  commentId: T:Microsoft.AspNetCore.Identity.IUserClaimStore{`0}
  parent: Microsoft.AspNetCore.Identity
  definition: Microsoft.AspNetCore.Identity.IUserClaimStore`1
  name: IUserClaimStore<TUser>
  nameWithType: IUserClaimStore<TUser>
  fullName: Microsoft.AspNetCore.Identity.IUserClaimStore<TUser>
  nameWithType.vb: IUserClaimStore(Of TUser)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserClaimStore(Of TUser)
  name.vb: IUserClaimStore(Of TUser)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserClaimStore`1
    name: IUserClaimStore
    nameWithType: IUserClaimStore
    fullName: Microsoft.AspNetCore.Identity.IUserClaimStore
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserClaimStore`1
    name: IUserClaimStore
    nameWithType: IUserClaimStore
    fullName: Microsoft.AspNetCore.Identity.IUserClaimStore
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserPasswordStore{{TUser}}
  commentId: T:Microsoft.AspNetCore.Identity.IUserPasswordStore{`0}
  parent: Microsoft.AspNetCore.Identity
  definition: Microsoft.AspNetCore.Identity.IUserPasswordStore`1
  name: IUserPasswordStore<TUser>
  nameWithType: IUserPasswordStore<TUser>
  fullName: Microsoft.AspNetCore.Identity.IUserPasswordStore<TUser>
  nameWithType.vb: IUserPasswordStore(Of TUser)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserPasswordStore(Of TUser)
  name.vb: IUserPasswordStore(Of TUser)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserPasswordStore`1
    name: IUserPasswordStore
    nameWithType: IUserPasswordStore
    fullName: Microsoft.AspNetCore.Identity.IUserPasswordStore
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserPasswordStore`1
    name: IUserPasswordStore
    nameWithType: IUserPasswordStore
    fullName: Microsoft.AspNetCore.Identity.IUserPasswordStore
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserSecurityStampStore{{TUser}}
  commentId: T:Microsoft.AspNetCore.Identity.IUserSecurityStampStore{`0}
  parent: Microsoft.AspNetCore.Identity
  definition: Microsoft.AspNetCore.Identity.IUserSecurityStampStore`1
  name: IUserSecurityStampStore<TUser>
  nameWithType: IUserSecurityStampStore<TUser>
  fullName: Microsoft.AspNetCore.Identity.IUserSecurityStampStore<TUser>
  nameWithType.vb: IUserSecurityStampStore(Of TUser)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserSecurityStampStore(Of TUser)
  name.vb: IUserSecurityStampStore(Of TUser)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserSecurityStampStore`1
    name: IUserSecurityStampStore
    nameWithType: IUserSecurityStampStore
    fullName: Microsoft.AspNetCore.Identity.IUserSecurityStampStore
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserSecurityStampStore`1
    name: IUserSecurityStampStore
    nameWithType: IUserSecurityStampStore
    fullName: Microsoft.AspNetCore.Identity.IUserSecurityStampStore
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserEmailStore{{TUser}}
  commentId: T:Microsoft.AspNetCore.Identity.IUserEmailStore{`0}
  parent: Microsoft.AspNetCore.Identity
  definition: Microsoft.AspNetCore.Identity.IUserEmailStore`1
  name: IUserEmailStore<TUser>
  nameWithType: IUserEmailStore<TUser>
  fullName: Microsoft.AspNetCore.Identity.IUserEmailStore<TUser>
  nameWithType.vb: IUserEmailStore(Of TUser)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserEmailStore(Of TUser)
  name.vb: IUserEmailStore(Of TUser)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserEmailStore`1
    name: IUserEmailStore
    nameWithType: IUserEmailStore
    fullName: Microsoft.AspNetCore.Identity.IUserEmailStore
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserEmailStore`1
    name: IUserEmailStore
    nameWithType: IUserEmailStore
    fullName: Microsoft.AspNetCore.Identity.IUserEmailStore
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserLockoutStore{{TUser}}
  commentId: T:Microsoft.AspNetCore.Identity.IUserLockoutStore{`0}
  parent: Microsoft.AspNetCore.Identity
  definition: Microsoft.AspNetCore.Identity.IUserLockoutStore`1
  name: IUserLockoutStore<TUser>
  nameWithType: IUserLockoutStore<TUser>
  fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore<TUser>
  nameWithType.vb: IUserLockoutStore(Of TUser)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserLockoutStore(Of TUser)
  name.vb: IUserLockoutStore(Of TUser)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserLockoutStore`1
    name: IUserLockoutStore
    nameWithType: IUserLockoutStore
    fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserLockoutStore`1
    name: IUserLockoutStore
    nameWithType: IUserLockoutStore
    fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore{{TUser}}
  commentId: T:Microsoft.AspNetCore.Identity.IUserPhoneNumberStore{`0}
  parent: Microsoft.AspNetCore.Identity
  definition: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore`1
  name: IUserPhoneNumberStore<TUser>
  nameWithType: IUserPhoneNumberStore<TUser>
  fullName: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore<TUser>
  nameWithType.vb: IUserPhoneNumberStore(Of TUser)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore(Of TUser)
  name.vb: IUserPhoneNumberStore(Of TUser)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore`1
    name: IUserPhoneNumberStore
    nameWithType: IUserPhoneNumberStore
    fullName: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore`1
    name: IUserPhoneNumberStore
    nameWithType: IUserPhoneNumberStore
    fullName: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserTwoFactorStore{{TUser}}
  commentId: T:Microsoft.AspNetCore.Identity.IUserTwoFactorStore{`0}
  parent: Microsoft.AspNetCore.Identity
  definition: Microsoft.AspNetCore.Identity.IUserTwoFactorStore`1
  name: IUserTwoFactorStore<TUser>
  nameWithType: IUserTwoFactorStore<TUser>
  fullName: Microsoft.AspNetCore.Identity.IUserTwoFactorStore<TUser>
  nameWithType.vb: IUserTwoFactorStore(Of TUser)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserTwoFactorStore(Of TUser)
  name.vb: IUserTwoFactorStore(Of TUser)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserTwoFactorStore`1
    name: IUserTwoFactorStore
    nameWithType: IUserTwoFactorStore
    fullName: Microsoft.AspNetCore.Identity.IUserTwoFactorStore
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserTwoFactorStore`1
    name: IUserTwoFactorStore
    nameWithType: IUserTwoFactorStore
    fullName: Microsoft.AspNetCore.Identity.IUserTwoFactorStore
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Identity.IHybridUserAuthenticationTokenStore{{TUser}}
  commentId: T:Hybrid.Zero.Identity.IHybridUserAuthenticationTokenStore{`0}
  parent: Hybrid.Zero.Identity
  definition: Hybrid.Zero.Identity.IHybridUserAuthenticationTokenStore`1
  name: IHybridUserAuthenticationTokenStore<TUser>
  nameWithType: IHybridUserAuthenticationTokenStore<TUser>
  fullName: Hybrid.Zero.Identity.IHybridUserAuthenticationTokenStore<TUser>
  nameWithType.vb: IHybridUserAuthenticationTokenStore(Of TUser)
  fullName.vb: Hybrid.Zero.Identity.IHybridUserAuthenticationTokenStore(Of TUser)
  name.vb: IHybridUserAuthenticationTokenStore(Of TUser)
  spec.csharp:
  - uid: Hybrid.Zero.Identity.IHybridUserAuthenticationTokenStore`1
    name: IHybridUserAuthenticationTokenStore
    nameWithType: IHybridUserAuthenticationTokenStore
    fullName: Hybrid.Zero.Identity.IHybridUserAuthenticationTokenStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Hybrid.Zero.Identity.IHybridUserAuthenticationTokenStore`1
    name: IHybridUserAuthenticationTokenStore
    nameWithType: IHybridUserAuthenticationTokenStore
    fullName: Hybrid.Zero.Identity.IHybridUserAuthenticationTokenStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore{{TUser}}
  commentId: T:Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore{`0}
  parent: Microsoft.AspNetCore.Identity
  definition: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore`1
  name: IUserAuthenticationTokenStore<TUser>
  nameWithType: IUserAuthenticationTokenStore<TUser>
  fullName: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore<TUser>
  nameWithType.vb: IUserAuthenticationTokenStore(Of TUser)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore(Of TUser)
  name.vb: IUserAuthenticationTokenStore(Of TUser)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore`1
    name: IUserAuthenticationTokenStore
    nameWithType: IUserAuthenticationTokenStore
    fullName: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore`1
    name: IUserAuthenticationTokenStore
    nameWithType: IUserAuthenticationTokenStore
    fullName: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserAuthenticatorKeyStore{{TUser}}
  commentId: T:Microsoft.AspNetCore.Identity.IUserAuthenticatorKeyStore{`0}
  parent: Microsoft.AspNetCore.Identity
  definition: Microsoft.AspNetCore.Identity.IUserAuthenticatorKeyStore`1
  name: IUserAuthenticatorKeyStore<TUser>
  nameWithType: IUserAuthenticatorKeyStore<TUser>
  fullName: Microsoft.AspNetCore.Identity.IUserAuthenticatorKeyStore<TUser>
  nameWithType.vb: IUserAuthenticatorKeyStore(Of TUser)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserAuthenticatorKeyStore(Of TUser)
  name.vb: IUserAuthenticatorKeyStore(Of TUser)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserAuthenticatorKeyStore`1
    name: IUserAuthenticatorKeyStore
    nameWithType: IUserAuthenticatorKeyStore
    fullName: Microsoft.AspNetCore.Identity.IUserAuthenticatorKeyStore
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserAuthenticatorKeyStore`1
    name: IUserAuthenticatorKeyStore
    nameWithType: IUserAuthenticatorKeyStore
    fullName: Microsoft.AspNetCore.Identity.IUserAuthenticatorKeyStore
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserTwoFactorRecoveryCodeStore{{TUser}}
  commentId: T:Microsoft.AspNetCore.Identity.IUserTwoFactorRecoveryCodeStore{`0}
  parent: Microsoft.AspNetCore.Identity
  definition: Microsoft.AspNetCore.Identity.IUserTwoFactorRecoveryCodeStore`1
  name: IUserTwoFactorRecoveryCodeStore<TUser>
  nameWithType: IUserTwoFactorRecoveryCodeStore<TUser>
  fullName: Microsoft.AspNetCore.Identity.IUserTwoFactorRecoveryCodeStore<TUser>
  nameWithType.vb: IUserTwoFactorRecoveryCodeStore(Of TUser)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserTwoFactorRecoveryCodeStore(Of TUser)
  name.vb: IUserTwoFactorRecoveryCodeStore(Of TUser)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserTwoFactorRecoveryCodeStore`1
    name: IUserTwoFactorRecoveryCodeStore
    nameWithType: IUserTwoFactorRecoveryCodeStore
    fullName: Microsoft.AspNetCore.Identity.IUserTwoFactorRecoveryCodeStore
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserTwoFactorRecoveryCodeStore`1
    name: IUserTwoFactorRecoveryCodeStore
    nameWithType: IUserTwoFactorRecoveryCodeStore
    fullName: Microsoft.AspNetCore.Identity.IUserTwoFactorRecoveryCodeStore
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserRoleStore{{TUser}}
  commentId: T:Microsoft.AspNetCore.Identity.IUserRoleStore{`0}
  parent: Microsoft.AspNetCore.Identity
  definition: Microsoft.AspNetCore.Identity.IUserRoleStore`1
  name: IUserRoleStore<TUser>
  nameWithType: IUserRoleStore<TUser>
  fullName: Microsoft.AspNetCore.Identity.IUserRoleStore<TUser>
  nameWithType.vb: IUserRoleStore(Of TUser)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserRoleStore(Of TUser)
  name.vb: IUserRoleStore(Of TUser)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserRoleStore`1
    name: IUserRoleStore
    nameWithType: IUserRoleStore
    fullName: Microsoft.AspNetCore.Identity.IUserRoleStore
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserRoleStore`1
    name: IUserRoleStore
    nameWithType: IUserRoleStore
    fullName: Microsoft.AspNetCore.Identity.IUserRoleStore
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserStore{{TUser}}
  commentId: T:Microsoft.AspNetCore.Identity.IUserStore{`0}
  parent: Microsoft.AspNetCore.Identity
  definition: Microsoft.AspNetCore.Identity.IUserStore`1
  name: IUserStore<TUser>
  nameWithType: IUserStore<TUser>
  fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>
  nameWithType.vb: IUserStore(Of TUser)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserStore(Of TUser)
  name.vb: IUserStore(Of TUser)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1
    name: IUserStore
    nameWithType: IUserStore
    fullName: Microsoft.AspNetCore.Identity.IUserStore
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1
    name: IUserStore
    nameWithType: IUserStore
    fullName: Microsoft.AspNetCore.Identity.IUserStore
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Extensions.ObjectExtensions.CastTo(System.Type)
  commentId: M:Hybrid.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
  parent: Hybrid.Extensions.ObjectExtensions
  definition: Hybrid.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
  name: CastTo(Type)
  nameWithType: ObjectExtensions.CastTo(Type)
  fullName: Hybrid.Extensions.ObjectExtensions.CastTo(System.Type)
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo(System.Type)
    name: CastTo
    nameWithType: ObjectExtensions.CastTo
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo(System.Type)
    name: CastTo
    nameWithType: ObjectExtensions.CastTo
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Extensions.ObjectExtensions.CastTo``1
  commentId: M:Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object)
  parent: Hybrid.Extensions.ObjectExtensions
  definition: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object)
  name: CastTo<T>()
  nameWithType: ObjectExtensions.CastTo<T>()
  fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>()
  nameWithType.vb: ObjectExtensions.CastTo(Of T)()
  fullName.vb: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)()
  name.vb: CastTo(Of T)()
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1
    name: CastTo<T>
    nameWithType: ObjectExtensions.CastTo<T>
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1
    name: CastTo(Of T)
    nameWithType: ObjectExtensions.CastTo(Of T)
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Extensions.ObjectExtensions.CastTo``1({T})
  commentId: M:Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
  parent: Hybrid.Extensions.ObjectExtensions
  definition: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
  name: CastTo<T>(T)
  nameWithType: ObjectExtensions.CastTo<T>(T)
  fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>(T)
  nameWithType.vb: ObjectExtensions.CastTo(Of T)(T)
  fullName.vb: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)(T)
  name.vb: CastTo(Of T)(T)
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(``0)
    name: CastTo<T>
    nameWithType: ObjectExtensions.CastTo<T>
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(``0)
    name: CastTo(Of T)
    nameWithType: ObjectExtensions.CastTo(Of T)
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.Hybrid.Extensions.ObjectExtensions.IsIn``1(Hybrid.Zero.Identity.Entities.UserStoreBase{{TUser},{TUserKey},{TUserClaim},{TUserClaimKey},{TUserLogin},{TUserLoginKey},{TUserToken},{TUserTokenKey},{TRole},{TRoleKey},{TUserRole},{TUserRoleKey}}[])
  commentId: M:Hybrid.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
  parent: Hybrid.Extensions.ObjectExtensions
  definition: Hybrid.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
  name: IsIn<UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>>(UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>[])
  nameWithType: ObjectExtensions.IsIn<UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>>(UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>[])
  fullName: Hybrid.Extensions.ObjectExtensions.IsIn<Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>>(Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>[])
  nameWithType.vb: ObjectExtensions.IsIn(Of UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey))(UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey)())
  fullName.vb: Hybrid.Extensions.ObjectExtensions.IsIn(Of Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey))(Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey)())
  name.vb: IsIn(Of UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey))(UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey)())
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.IsIn``1(``0[])
    name: IsIn<UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>>
    nameWithType: ObjectExtensions.IsIn<UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>>
    fullName: Hybrid.Extensions.ObjectExtensions.IsIn<Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12
    name: UserStoreBase
    nameWithType: UserStoreBase
    fullName: Hybrid.Zero.Identity.Entities.UserStoreBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserKey
    nameWithType: TUserKey
    fullName: TUserKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserClaim
    nameWithType: TUserClaim
    fullName: TUserClaim
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserClaimKey
    nameWithType: TUserClaimKey
    fullName: TUserClaimKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserLogin
    nameWithType: TUserLogin
    fullName: TUserLogin
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserLoginKey
    nameWithType: TUserLoginKey
    fullName: TUserLoginKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserToken
    nameWithType: TUserToken
    fullName: TUserToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserTokenKey
    nameWithType: TUserTokenKey
    fullName: TUserTokenKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserRole
    nameWithType: TUserRole
    fullName: TUserRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserRoleKey
    nameWithType: TUserRoleKey
    fullName: TUserRoleKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.IsIn``1(``0[])
    name: IsIn(Of UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey))
    nameWithType: ObjectExtensions.IsIn(Of UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey))
    fullName: Hybrid.Extensions.ObjectExtensions.IsIn(Of Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey))
  - name: (
    nameWithType: (
    fullName: (
  - uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12
    name: UserStoreBase
    nameWithType: UserStoreBase
    fullName: Hybrid.Zero.Identity.Entities.UserStoreBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserKey
    nameWithType: TUserKey
    fullName: TUserKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserClaim
    nameWithType: TUserClaim
    fullName: TUserClaim
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserClaimKey
    nameWithType: TUserClaimKey
    fullName: TUserClaimKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserLogin
    nameWithType: TUserLogin
    fullName: TUserLogin
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserLoginKey
    nameWithType: TUserLoginKey
    fullName: TUserLoginKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserToken
    nameWithType: TUserToken
    fullName: TUserToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserTokenKey
    nameWithType: TUserTokenKey
    fullName: TUserTokenKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserRole
    nameWithType: TUserRole
    fullName: TUserRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserRoleKey
    nameWithType: TUserRoleKey
    fullName: TUserRoleKey
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Extensions.ObjectExtensions.ToDynamic
  commentId: M:Hybrid.Extensions.ObjectExtensions.ToDynamic(System.Object)
  parent: Hybrid.Extensions.ObjectExtensions
  definition: Hybrid.Extensions.ObjectExtensions.ToDynamic(System.Object)
  name: ToDynamic()
  nameWithType: ObjectExtensions.ToDynamic()
  fullName: Hybrid.Extensions.ObjectExtensions.ToDynamic()
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.ToDynamic
    name: ToDynamic
    nameWithType: ObjectExtensions.ToDynamic
    fullName: Hybrid.Extensions.ObjectExtensions.ToDynamic
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.ToDynamic
    name: ToDynamic
    nameWithType: ObjectExtensions.ToDynamic
    fullName: Hybrid.Extensions.ObjectExtensions.ToDynamic
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.Hybrid.Extensions.ObjectExtensions.DeepClone``1
  commentId: M:Hybrid.Extensions.ObjectExtensions.DeepClone``1(``0)
  parent: Hybrid.Extensions.ObjectExtensions
  definition: Hybrid.Extensions.ObjectExtensions.DeepClone``1(``0)
  name: DeepClone<UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>>()
  nameWithType: ObjectExtensions.DeepClone<UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>>()
  fullName: Hybrid.Extensions.ObjectExtensions.DeepClone<Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>>()
  nameWithType.vb: ObjectExtensions.DeepClone(Of UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey))()
  fullName.vb: Hybrid.Extensions.ObjectExtensions.DeepClone(Of Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey))()
  name.vb: DeepClone(Of UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey))()
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.DeepClone``1
    name: DeepClone<UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>>
    nameWithType: ObjectExtensions.DeepClone<UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>>
    fullName: Hybrid.Extensions.ObjectExtensions.DeepClone<Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.DeepClone``1
    name: DeepClone(Of UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey))
    nameWithType: ObjectExtensions.DeepClone(Of UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey))
    fullName: Hybrid.Extensions.ObjectExtensions.DeepClone(Of Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey))
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.Hybrid.Extensions.ParameterCheckExtensions.Required``1(System.Func{Hybrid.Zero.Identity.Entities.UserStoreBase{{TUser},{TUserKey},{TUserClaim},{TUserClaimKey},{TUserLogin},{TUserLoginKey},{TUserToken},{TUserTokenKey},{TRole},{TRoleKey},{TUserRole},{TUserRoleKey}},System.Boolean},System.String)
  commentId: M:Hybrid.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
  parent: Hybrid.Extensions.ParameterCheckExtensions
  definition: Hybrid.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
  name: Required<UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>>(Func<UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>, Boolean>, String)
  nameWithType: ParameterCheckExtensions.Required<UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>>(Func<UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>, Boolean>, String)
  fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>>(System.Func<Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>, System.Boolean>, System.String)
  nameWithType.vb: ParameterCheckExtensions.Required(Of UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey))(Func(Of UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey), Boolean), String)
  fullName.vb: Hybrid.Extensions.ParameterCheckExtensions.Required(Of Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey))(System.Func(Of Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey), System.Boolean), System.String)
  name.vb: Required(Of UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey))(Func(Of UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey), Boolean), String)
  spec.csharp:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``1(System.Func{``0,System.Boolean},System.String)
    name: Required<UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>>
    nameWithType: ParameterCheckExtensions.Required<UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>>
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12
    name: UserStoreBase
    nameWithType: UserStoreBase
    fullName: Hybrid.Zero.Identity.Entities.UserStoreBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserKey
    nameWithType: TUserKey
    fullName: TUserKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserClaim
    nameWithType: TUserClaim
    fullName: TUserClaim
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserClaimKey
    nameWithType: TUserClaimKey
    fullName: TUserClaimKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserLogin
    nameWithType: TUserLogin
    fullName: TUserLogin
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserLoginKey
    nameWithType: TUserLoginKey
    fullName: TUserLoginKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserToken
    nameWithType: TUserToken
    fullName: TUserToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserTokenKey
    nameWithType: TUserTokenKey
    fullName: TUserTokenKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserRole
    nameWithType: TUserRole
    fullName: TUserRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserRoleKey
    nameWithType: TUserRoleKey
    fullName: TUserRoleKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``1(System.Func{``0,System.Boolean},System.String)
    name: Required(Of UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey))
    nameWithType: ParameterCheckExtensions.Required(Of UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey))
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required(Of Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey))
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12
    name: UserStoreBase
    nameWithType: UserStoreBase
    fullName: Hybrid.Zero.Identity.Entities.UserStoreBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserKey
    nameWithType: TUserKey
    fullName: TUserKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserClaim
    nameWithType: TUserClaim
    fullName: TUserClaim
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserClaimKey
    nameWithType: TUserClaimKey
    fullName: TUserClaimKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserLogin
    nameWithType: TUserLogin
    fullName: TUserLogin
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserLoginKey
    nameWithType: TUserLoginKey
    fullName: TUserLoginKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserToken
    nameWithType: TUserToken
    fullName: TUserToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserTokenKey
    nameWithType: TUserTokenKey
    fullName: TUserTokenKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserRole
    nameWithType: TUserRole
    fullName: TUserRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserRoleKey
    nameWithType: TUserRoleKey
    fullName: TUserRoleKey
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.Hybrid.Extensions.ParameterCheckExtensions.Required``2(System.Func{Hybrid.Zero.Identity.Entities.UserStoreBase{{TUser},{TUserKey},{TUserClaim},{TUserClaimKey},{TUserLogin},{TUserLoginKey},{TUserToken},{TUserTokenKey},{TRole},{TRoleKey},{TUserRole},{TUserRoleKey}},System.Boolean},System.String)
  commentId: M:Hybrid.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
  parent: Hybrid.Extensions.ParameterCheckExtensions
  definition: Hybrid.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
  name: Required<UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>, TException>(Func<UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>, Boolean>, String)
  nameWithType: ParameterCheckExtensions.Required<UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>, TException>(Func<UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>, Boolean>, String)
  fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>, TException>(System.Func<Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>, System.Boolean>, System.String)
  nameWithType.vb: ParameterCheckExtensions.Required(Of UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey), TException)(Func(Of UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey), Boolean), String)
  fullName.vb: Hybrid.Extensions.ParameterCheckExtensions.Required(Of Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey), TException)(System.Func(Of Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey), System.Boolean), System.String)
  name.vb: Required(Of UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey), TException)(Func(Of UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey), Boolean), String)
  spec.csharp:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``2(System.Func{``0,System.Boolean},System.String)
    name: Required<UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>, TException>
    nameWithType: ParameterCheckExtensions.Required<UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>, TException>
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>, TException>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12
    name: UserStoreBase
    nameWithType: UserStoreBase
    fullName: Hybrid.Zero.Identity.Entities.UserStoreBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserKey
    nameWithType: TUserKey
    fullName: TUserKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserClaim
    nameWithType: TUserClaim
    fullName: TUserClaim
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserClaimKey
    nameWithType: TUserClaimKey
    fullName: TUserClaimKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserLogin
    nameWithType: TUserLogin
    fullName: TUserLogin
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserLoginKey
    nameWithType: TUserLoginKey
    fullName: TUserLoginKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserToken
    nameWithType: TUserToken
    fullName: TUserToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserTokenKey
    nameWithType: TUserTokenKey
    fullName: TUserTokenKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserRole
    nameWithType: TUserRole
    fullName: TUserRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserRoleKey
    nameWithType: TUserRoleKey
    fullName: TUserRoleKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``2(System.Func{``0,System.Boolean},System.String)
    name: Required(Of UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey), TException)
    nameWithType: ParameterCheckExtensions.Required(Of UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey), TException)
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required(Of Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey), TException)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12
    name: UserStoreBase
    nameWithType: UserStoreBase
    fullName: Hybrid.Zero.Identity.Entities.UserStoreBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserKey
    nameWithType: TUserKey
    fullName: TUserKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserClaim
    nameWithType: TUserClaim
    fullName: TUserClaim
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserClaimKey
    nameWithType: TUserClaimKey
    fullName: TUserClaimKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserLogin
    nameWithType: TUserLogin
    fullName: TUserLogin
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserLoginKey
    nameWithType: TUserLoginKey
    fullName: TUserLoginKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserToken
    nameWithType: TUserToken
    fullName: TUserToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserTokenKey
    nameWithType: TUserTokenKey
    fullName: TUserTokenKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserRole
    nameWithType: TUserRole
    fullName: TUserRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserRoleKey
    nameWithType: TUserRoleKey
    fullName: TUserRoleKey
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(System.String)
  commentId: M:Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
  parent: Hybrid.Extensions.ParameterCheckExtensions
  definition: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
  name: CheckNotNull<UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>>(String)
  nameWithType: ParameterCheckExtensions.CheckNotNull<UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>>(String)
  fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull<Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>>(System.String)
  nameWithType.vb: ParameterCheckExtensions.CheckNotNull(Of UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey))(String)
  fullName.vb: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull(Of Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey))(System.String)
  name.vb: CheckNotNull(Of UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey))(String)
  spec.csharp:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(System.String)
    name: CheckNotNull<UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>>
    nameWithType: ParameterCheckExtensions.CheckNotNull<UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>>
    fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull<Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(System.String)
    name: CheckNotNull(Of UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey))
    nameWithType: ParameterCheckExtensions.CheckNotNull(Of UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey))
    fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull(Of Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey))
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{Hybrid.Zero.Identity.Entities.UserStoreBase{{TUser},{TUserKey},{TUserClaim},{TUserClaimKey},{TUserLogin},{TUserLoginKey},{TUserToken},{TUserTokenKey},{TRole},{TRoleKey},{TUserRole},{TUserRoleKey}}},System.Action{System.Exception},System.Action{Hybrid.Zero.Identity.Entities.UserStoreBase{{TUser},{TUserKey},{TUserClaim},{TUserClaimKey},{TUserLogin},{TUserLoginKey},{TUserToken},{TUserTokenKey},{TRole},{TRoleKey},{TUserRole},{TUserRoleKey}}})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
  parent: Hybrid.Extensions.TryCatchExtensions
  definition: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
  name: TryCatch<UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>>(Action<UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>>, Action<Exception>, Action<UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>>)
  nameWithType: TryCatchExtensions.TryCatch<UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>>(Action<UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>>, Action<Exception>, Action<UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>>(System.Action<Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>>, System.Action<System.Exception>, System.Action<Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey))(Action(Of UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey)), Action(Of Exception), Action(Of UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey)))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey))(System.Action(Of Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey)), System.Action(Of System.Exception), System.Action(Of Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey)))
  name.vb: TryCatch(Of UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey))(Action(Of UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey)), Action(Of Exception), Action(Of UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey)))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{``0},System.Action{System.Exception},System.Action{``0})
    name: TryCatch<UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>>
    nameWithType: TryCatchExtensions.TryCatch<UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12
    name: UserStoreBase
    nameWithType: UserStoreBase
    fullName: Hybrid.Zero.Identity.Entities.UserStoreBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserKey
    nameWithType: TUserKey
    fullName: TUserKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserClaim
    nameWithType: TUserClaim
    fullName: TUserClaim
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserClaimKey
    nameWithType: TUserClaimKey
    fullName: TUserClaimKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserLogin
    nameWithType: TUserLogin
    fullName: TUserLogin
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserLoginKey
    nameWithType: TUserLoginKey
    fullName: TUserLoginKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserToken
    nameWithType: TUserToken
    fullName: TUserToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserTokenKey
    nameWithType: TUserTokenKey
    fullName: TUserTokenKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserRole
    nameWithType: TUserRole
    fullName: TUserRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserRoleKey
    nameWithType: TUserRoleKey
    fullName: TUserRoleKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12
    name: UserStoreBase
    nameWithType: UserStoreBase
    fullName: Hybrid.Zero.Identity.Entities.UserStoreBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserKey
    nameWithType: TUserKey
    fullName: TUserKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserClaim
    nameWithType: TUserClaim
    fullName: TUserClaim
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserClaimKey
    nameWithType: TUserClaimKey
    fullName: TUserClaimKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserLogin
    nameWithType: TUserLogin
    fullName: TUserLogin
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserLoginKey
    nameWithType: TUserLoginKey
    fullName: TUserLoginKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserToken
    nameWithType: TUserToken
    fullName: TUserToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserTokenKey
    nameWithType: TUserTokenKey
    fullName: TUserTokenKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserRole
    nameWithType: TUserRole
    fullName: TUserRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserRoleKey
    nameWithType: TUserRoleKey
    fullName: TUserRoleKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{``0},System.Action{System.Exception},System.Action{``0})
    name: TryCatch(Of UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey))
    nameWithType: TryCatchExtensions.TryCatch(Of UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey))
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey))
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12
    name: UserStoreBase
    nameWithType: UserStoreBase
    fullName: Hybrid.Zero.Identity.Entities.UserStoreBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserKey
    nameWithType: TUserKey
    fullName: TUserKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserClaim
    nameWithType: TUserClaim
    fullName: TUserClaim
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserClaimKey
    nameWithType: TUserClaimKey
    fullName: TUserClaimKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserLogin
    nameWithType: TUserLogin
    fullName: TUserLogin
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserLoginKey
    nameWithType: TUserLoginKey
    fullName: TUserLoginKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserToken
    nameWithType: TUserToken
    fullName: TUserToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserTokenKey
    nameWithType: TUserTokenKey
    fullName: TUserTokenKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserRole
    nameWithType: TUserRole
    fullName: TUserRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserRoleKey
    nameWithType: TUserRoleKey
    fullName: TUserRoleKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12
    name: UserStoreBase
    nameWithType: UserStoreBase
    fullName: Hybrid.Zero.Identity.Entities.UserStoreBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserKey
    nameWithType: TUserKey
    fullName: TUserKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserClaim
    nameWithType: TUserClaim
    fullName: TUserClaim
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserClaimKey
    nameWithType: TUserClaimKey
    fullName: TUserClaimKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserLogin
    nameWithType: TUserLogin
    fullName: TUserLogin
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserLoginKey
    nameWithType: TUserLoginKey
    fullName: TUserLoginKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserToken
    nameWithType: TUserToken
    fullName: TUserToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserTokenKey
    nameWithType: TUserTokenKey
    fullName: TUserTokenKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserRole
    nameWithType: TUserRole
    fullName: TUserRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserRoleKey
    nameWithType: TUserRoleKey
    fullName: TUserRoleKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{Hybrid.Zero.Identity.Entities.UserStoreBase{{TUser},{TUserKey},{TUserClaim},{TUserClaimKey},{TUserLogin},{TUserLoginKey},{TUserToken},{TUserTokenKey},{TRole},{TRoleKey},{TUserRole},{TUserRoleKey}}},System.Action{System.Exception})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
  parent: Hybrid.Extensions.TryCatchExtensions
  definition: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
  name: TryCatch<UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>>(Action<UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>>, Action<Exception>)
  nameWithType: TryCatchExtensions.TryCatch<UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>>(Action<UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>>, Action<Exception>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>>(System.Action<Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>>, System.Action<System.Exception>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey))(Action(Of UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey)), Action(Of Exception))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey))(System.Action(Of Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey)), System.Action(Of System.Exception))
  name.vb: TryCatch(Of UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey))(Action(Of UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey)), Action(Of Exception))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{``0},System.Action{System.Exception})
    name: TryCatch<UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>>
    nameWithType: TryCatchExtensions.TryCatch<UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12
    name: UserStoreBase
    nameWithType: UserStoreBase
    fullName: Hybrid.Zero.Identity.Entities.UserStoreBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserKey
    nameWithType: TUserKey
    fullName: TUserKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserClaim
    nameWithType: TUserClaim
    fullName: TUserClaim
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserClaimKey
    nameWithType: TUserClaimKey
    fullName: TUserClaimKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserLogin
    nameWithType: TUserLogin
    fullName: TUserLogin
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserLoginKey
    nameWithType: TUserLoginKey
    fullName: TUserLoginKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserToken
    nameWithType: TUserToken
    fullName: TUserToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserTokenKey
    nameWithType: TUserTokenKey
    fullName: TUserTokenKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserRole
    nameWithType: TUserRole
    fullName: TUserRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserRoleKey
    nameWithType: TUserRoleKey
    fullName: TUserRoleKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{``0},System.Action{System.Exception})
    name: TryCatch(Of UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey))
    nameWithType: TryCatchExtensions.TryCatch(Of UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey))
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey))
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12
    name: UserStoreBase
    nameWithType: UserStoreBase
    fullName: Hybrid.Zero.Identity.Entities.UserStoreBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserKey
    nameWithType: TUserKey
    fullName: TUserKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserClaim
    nameWithType: TUserClaim
    fullName: TUserClaim
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserClaimKey
    nameWithType: TUserClaimKey
    fullName: TUserClaimKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserLogin
    nameWithType: TUserLogin
    fullName: TUserLogin
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserLoginKey
    nameWithType: TUserLoginKey
    fullName: TUserLoginKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserToken
    nameWithType: TUserToken
    fullName: TUserToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserTokenKey
    nameWithType: TUserTokenKey
    fullName: TUserTokenKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserRole
    nameWithType: TUserRole
    fullName: TUserRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserRoleKey
    nameWithType: TUserRoleKey
    fullName: TUserRoleKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{Hybrid.Zero.Identity.Entities.UserStoreBase{{TUser},{TUserKey},{TUserClaim},{TUserClaimKey},{TUserLogin},{TUserLoginKey},{TUserToken},{TUserTokenKey},{TRole},{TRoleKey},{TUserRole},{TUserRoleKey}},{TResult}},System.Action{System.Exception},System.Action{Hybrid.Zero.Identity.Entities.UserStoreBase{{TUser},{TUserKey},{TUserClaim},{TUserClaimKey},{TUserLogin},{TUserLoginKey},{TUserToken},{TUserTokenKey},{TRole},{TRoleKey},{TUserRole},{TUserRoleKey}}})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
  parent: Hybrid.Extensions.TryCatchExtensions
  definition: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
  name: TryCatch<UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>, TResult>(Func<UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>, TResult>, Action<Exception>, Action<UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>>)
  nameWithType: TryCatchExtensions.TryCatch<UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>, TResult>(Func<UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>, TResult>, Action<Exception>, Action<UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>, TResult>(System.Func<Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>, TResult>, System.Action<System.Exception>, System.Action<Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey), TResult)(Func(Of UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey), TResult), Action(Of Exception), Action(Of UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey)))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey), TResult)(System.Func(Of Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey), TResult), System.Action(Of System.Exception), System.Action(Of Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey)))
  name.vb: TryCatch(Of UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey), TResult)(Func(Of UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey), TResult), Action(Of Exception), Action(Of UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey)))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
    name: TryCatch<UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>, TResult>
    nameWithType: TryCatchExtensions.TryCatch<UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>, TResult>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12
    name: UserStoreBase
    nameWithType: UserStoreBase
    fullName: Hybrid.Zero.Identity.Entities.UserStoreBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserKey
    nameWithType: TUserKey
    fullName: TUserKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserClaim
    nameWithType: TUserClaim
    fullName: TUserClaim
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserClaimKey
    nameWithType: TUserClaimKey
    fullName: TUserClaimKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserLogin
    nameWithType: TUserLogin
    fullName: TUserLogin
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserLoginKey
    nameWithType: TUserLoginKey
    fullName: TUserLoginKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserToken
    nameWithType: TUserToken
    fullName: TUserToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserTokenKey
    nameWithType: TUserTokenKey
    fullName: TUserTokenKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserRole
    nameWithType: TUserRole
    fullName: TUserRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserRoleKey
    nameWithType: TUserRoleKey
    fullName: TUserRoleKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12
    name: UserStoreBase
    nameWithType: UserStoreBase
    fullName: Hybrid.Zero.Identity.Entities.UserStoreBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserKey
    nameWithType: TUserKey
    fullName: TUserKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserClaim
    nameWithType: TUserClaim
    fullName: TUserClaim
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserClaimKey
    nameWithType: TUserClaimKey
    fullName: TUserClaimKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserLogin
    nameWithType: TUserLogin
    fullName: TUserLogin
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserLoginKey
    nameWithType: TUserLoginKey
    fullName: TUserLoginKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserToken
    nameWithType: TUserToken
    fullName: TUserToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserTokenKey
    nameWithType: TUserTokenKey
    fullName: TUserTokenKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserRole
    nameWithType: TUserRole
    fullName: TUserRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserRoleKey
    nameWithType: TUserRoleKey
    fullName: TUserRoleKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
    name: TryCatch(Of UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey), TResult)
    nameWithType: TryCatchExtensions.TryCatch(Of UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey), TResult)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey), TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12
    name: UserStoreBase
    nameWithType: UserStoreBase
    fullName: Hybrid.Zero.Identity.Entities.UserStoreBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserKey
    nameWithType: TUserKey
    fullName: TUserKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserClaim
    nameWithType: TUserClaim
    fullName: TUserClaim
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserClaimKey
    nameWithType: TUserClaimKey
    fullName: TUserClaimKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserLogin
    nameWithType: TUserLogin
    fullName: TUserLogin
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserLoginKey
    nameWithType: TUserLoginKey
    fullName: TUserLoginKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserToken
    nameWithType: TUserToken
    fullName: TUserToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserTokenKey
    nameWithType: TUserTokenKey
    fullName: TUserTokenKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserRole
    nameWithType: TUserRole
    fullName: TUserRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserRoleKey
    nameWithType: TUserRoleKey
    fullName: TUserRoleKey
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12
    name: UserStoreBase
    nameWithType: UserStoreBase
    fullName: Hybrid.Zero.Identity.Entities.UserStoreBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserKey
    nameWithType: TUserKey
    fullName: TUserKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserClaim
    nameWithType: TUserClaim
    fullName: TUserClaim
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserClaimKey
    nameWithType: TUserClaimKey
    fullName: TUserClaimKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserLogin
    nameWithType: TUserLogin
    fullName: TUserLogin
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserLoginKey
    nameWithType: TUserLoginKey
    fullName: TUserLoginKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserToken
    nameWithType: TUserToken
    fullName: TUserToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserTokenKey
    nameWithType: TUserTokenKey
    fullName: TUserTokenKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserRole
    nameWithType: TUserRole
    fullName: TUserRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserRoleKey
    nameWithType: TUserRoleKey
    fullName: TUserRoleKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{Hybrid.Zero.Identity.Entities.UserStoreBase{{TUser},{TUserKey},{TUserClaim},{TUserClaimKey},{TUserLogin},{TUserLoginKey},{TUserToken},{TUserTokenKey},{TRole},{TRoleKey},{TUserRole},{TUserRoleKey}},{TResult}},System.Action{System.Exception})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
  parent: Hybrid.Extensions.TryCatchExtensions
  definition: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
  name: TryCatch<UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>, TResult>(Func<UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>, TResult>, Action<Exception>)
  nameWithType: TryCatchExtensions.TryCatch<UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>, TResult>(Func<UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>, TResult>, Action<Exception>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>, TResult>(System.Func<Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>, TResult>, System.Action<System.Exception>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey), TResult)(Func(Of UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey), TResult), Action(Of Exception))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey), TResult)(System.Func(Of Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey), TResult), System.Action(Of System.Exception))
  name.vb: TryCatch(Of UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey), TResult)(Func(Of UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey), TResult), Action(Of Exception))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{``0,``1},System.Action{System.Exception})
    name: TryCatch<UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>, TResult>
    nameWithType: TryCatchExtensions.TryCatch<UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>, TResult>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12
    name: UserStoreBase
    nameWithType: UserStoreBase
    fullName: Hybrid.Zero.Identity.Entities.UserStoreBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserKey
    nameWithType: TUserKey
    fullName: TUserKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserClaim
    nameWithType: TUserClaim
    fullName: TUserClaim
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserClaimKey
    nameWithType: TUserClaimKey
    fullName: TUserClaimKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserLogin
    nameWithType: TUserLogin
    fullName: TUserLogin
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserLoginKey
    nameWithType: TUserLoginKey
    fullName: TUserLoginKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserToken
    nameWithType: TUserToken
    fullName: TUserToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserTokenKey
    nameWithType: TUserTokenKey
    fullName: TUserTokenKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserRole
    nameWithType: TUserRole
    fullName: TUserRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserRoleKey
    nameWithType: TUserRoleKey
    fullName: TUserRoleKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{``0,``1},System.Action{System.Exception})
    name: TryCatch(Of UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey), TResult)
    nameWithType: TryCatchExtensions.TryCatch(Of UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey), TResult)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey), TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12
    name: UserStoreBase
    nameWithType: UserStoreBase
    fullName: Hybrid.Zero.Identity.Entities.UserStoreBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserKey
    nameWithType: TUserKey
    fullName: TUserKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserClaim
    nameWithType: TUserClaim
    fullName: TUserClaim
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserClaimKey
    nameWithType: TUserClaimKey
    fullName: TUserClaimKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserLogin
    nameWithType: TUserLogin
    fullName: TUserLogin
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserLoginKey
    nameWithType: TUserLoginKey
    fullName: TUserLoginKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserToken
    nameWithType: TUserToken
    fullName: TUserToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserTokenKey
    nameWithType: TUserTokenKey
    fullName: TUserTokenKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserRole
    nameWithType: TUserRole
    fullName: TUserRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserRoleKey
    nameWithType: TUserRoleKey
    fullName: TUserRoleKey
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.Hybrid.Extensions.TryCatchExtensions.TryFinally``1(System.Action{Hybrid.Zero.Identity.Entities.UserStoreBase{{TUser},{TUserKey},{TUserClaim},{TUserClaimKey},{TUserLogin},{TUserLoginKey},{TUserToken},{TUserTokenKey},{TRole},{TRoleKey},{TUserRole},{TUserRoleKey}}},System.Action{Hybrid.Zero.Identity.Entities.UserStoreBase{{TUser},{TUserKey},{TUserClaim},{TUserClaimKey},{TUserLogin},{TUserLoginKey},{TUserToken},{TUserTokenKey},{TRole},{TRoleKey},{TUserRole},{TUserRoleKey}}})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
  parent: Hybrid.Extensions.TryCatchExtensions
  definition: Hybrid.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
  name: TryFinally<UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>>(Action<UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>>, Action<UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>>)
  nameWithType: TryCatchExtensions.TryFinally<UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>>(Action<UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>>, Action<UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryFinally<Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>>(System.Action<Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>>, System.Action<Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>>)
  nameWithType.vb: TryCatchExtensions.TryFinally(Of UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey))(Action(Of UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey)), Action(Of UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey)))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryFinally(Of Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey))(System.Action(Of Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey)), System.Action(Of Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey)))
  name.vb: TryFinally(Of UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey))(Action(Of UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey)), Action(Of UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey)))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryFinally``1(System.Action{``0},System.Action{``0})
    name: TryFinally<UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>>
    nameWithType: TryCatchExtensions.TryFinally<UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryFinally<Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12
    name: UserStoreBase
    nameWithType: UserStoreBase
    fullName: Hybrid.Zero.Identity.Entities.UserStoreBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserKey
    nameWithType: TUserKey
    fullName: TUserKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserClaim
    nameWithType: TUserClaim
    fullName: TUserClaim
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserClaimKey
    nameWithType: TUserClaimKey
    fullName: TUserClaimKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserLogin
    nameWithType: TUserLogin
    fullName: TUserLogin
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserLoginKey
    nameWithType: TUserLoginKey
    fullName: TUserLoginKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserToken
    nameWithType: TUserToken
    fullName: TUserToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserTokenKey
    nameWithType: TUserTokenKey
    fullName: TUserTokenKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserRole
    nameWithType: TUserRole
    fullName: TUserRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserRoleKey
    nameWithType: TUserRoleKey
    fullName: TUserRoleKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12
    name: UserStoreBase
    nameWithType: UserStoreBase
    fullName: Hybrid.Zero.Identity.Entities.UserStoreBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserKey
    nameWithType: TUserKey
    fullName: TUserKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserClaim
    nameWithType: TUserClaim
    fullName: TUserClaim
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserClaimKey
    nameWithType: TUserClaimKey
    fullName: TUserClaimKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserLogin
    nameWithType: TUserLogin
    fullName: TUserLogin
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserLoginKey
    nameWithType: TUserLoginKey
    fullName: TUserLoginKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserToken
    nameWithType: TUserToken
    fullName: TUserToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserTokenKey
    nameWithType: TUserTokenKey
    fullName: TUserTokenKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserRole
    nameWithType: TUserRole
    fullName: TUserRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserRoleKey
    nameWithType: TUserRoleKey
    fullName: TUserRoleKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryFinally``1(System.Action{``0},System.Action{``0})
    name: TryFinally(Of UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey))
    nameWithType: TryCatchExtensions.TryFinally(Of UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey))
    fullName: Hybrid.Extensions.TryCatchExtensions.TryFinally(Of Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey))
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12
    name: UserStoreBase
    nameWithType: UserStoreBase
    fullName: Hybrid.Zero.Identity.Entities.UserStoreBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserKey
    nameWithType: TUserKey
    fullName: TUserKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserClaim
    nameWithType: TUserClaim
    fullName: TUserClaim
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserClaimKey
    nameWithType: TUserClaimKey
    fullName: TUserClaimKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserLogin
    nameWithType: TUserLogin
    fullName: TUserLogin
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserLoginKey
    nameWithType: TUserLoginKey
    fullName: TUserLoginKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserToken
    nameWithType: TUserToken
    fullName: TUserToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserTokenKey
    nameWithType: TUserTokenKey
    fullName: TUserTokenKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserRole
    nameWithType: TUserRole
    fullName: TUserRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserRoleKey
    nameWithType: TUserRoleKey
    fullName: TUserRoleKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12
    name: UserStoreBase
    nameWithType: UserStoreBase
    fullName: Hybrid.Zero.Identity.Entities.UserStoreBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserKey
    nameWithType: TUserKey
    fullName: TUserKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserClaim
    nameWithType: TUserClaim
    fullName: TUserClaim
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserClaimKey
    nameWithType: TUserClaimKey
    fullName: TUserClaimKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserLogin
    nameWithType: TUserLogin
    fullName: TUserLogin
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserLoginKey
    nameWithType: TUserLoginKey
    fullName: TUserLoginKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserToken
    nameWithType: TUserToken
    fullName: TUserToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserTokenKey
    nameWithType: TUserTokenKey
    fullName: TUserTokenKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserRole
    nameWithType: TUserRole
    fullName: TUserRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserRoleKey
    nameWithType: TUserRoleKey
    fullName: TUserRoleKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Json.JsonExtensions.ToJsonString(System.Boolean,System.Boolean)
  commentId: M:Hybrid.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
  parent: Hybrid.Json.JsonExtensions
  definition: Hybrid.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
  name: ToJsonString(Boolean, Boolean)
  nameWithType: JsonExtensions.ToJsonString(Boolean, Boolean)
  fullName: Hybrid.Json.JsonExtensions.ToJsonString(System.Boolean, System.Boolean)
  spec.csharp:
  - uid: Hybrid.Json.JsonExtensions.ToJsonString(System.Boolean,System.Boolean)
    name: ToJsonString
    nameWithType: JsonExtensions.ToJsonString
    fullName: Hybrid.Json.JsonExtensions.ToJsonString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Json.JsonExtensions.ToJsonString(System.Boolean,System.Boolean)
    name: ToJsonString
    nameWithType: JsonExtensions.ToJsonString
    fullName: Hybrid.Json.JsonExtensions.ToJsonString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Mapping.MapperExtensions.MapTo``1
  commentId: M:Hybrid.Mapping.MapperExtensions.MapTo``1(System.Object)
  parent: Hybrid.Mapping.MapperExtensions
  definition: Hybrid.Mapping.MapperExtensions.MapTo``1(System.Object)
  name: MapTo<TTarget>()
  nameWithType: MapperExtensions.MapTo<TTarget>()
  fullName: Hybrid.Mapping.MapperExtensions.MapTo<TTarget>()
  nameWithType.vb: MapperExtensions.MapTo(Of TTarget)()
  fullName.vb: Hybrid.Mapping.MapperExtensions.MapTo(Of TTarget)()
  name.vb: MapTo(Of TTarget)()
  spec.csharp:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``1
    name: MapTo<TTarget>
    nameWithType: MapperExtensions.MapTo<TTarget>
    fullName: Hybrid.Mapping.MapperExtensions.MapTo<TTarget>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``1
    name: MapTo(Of TTarget)
    nameWithType: MapperExtensions.MapTo(Of TTarget)
    fullName: Hybrid.Mapping.MapperExtensions.MapTo(Of TTarget)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.Hybrid.Mapping.MapperExtensions.MapTo``2({TTarget})
  commentId: M:Hybrid.Mapping.MapperExtensions.MapTo``2(``0,``1)
  parent: Hybrid.Mapping.MapperExtensions
  definition: Hybrid.Mapping.MapperExtensions.MapTo``2(``0,``1)
  name: MapTo<UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>, TTarget>(TTarget)
  nameWithType: MapperExtensions.MapTo<UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>, TTarget>(TTarget)
  fullName: Hybrid.Mapping.MapperExtensions.MapTo<Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>, TTarget>(TTarget)
  nameWithType.vb: MapperExtensions.MapTo(Of UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey), TTarget)(TTarget)
  fullName.vb: Hybrid.Mapping.MapperExtensions.MapTo(Of Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey), TTarget)(TTarget)
  name.vb: MapTo(Of UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey), TTarget)(TTarget)
  spec.csharp:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``2(``1)
    name: MapTo<UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>, TTarget>
    nameWithType: MapperExtensions.MapTo<UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>, TTarget>
    fullName: Hybrid.Mapping.MapperExtensions.MapTo<Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>, TTarget>
  - name: (
    nameWithType: (
    fullName: (
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``2(``1)
    name: MapTo(Of UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey), TTarget)
    nameWithType: MapperExtensions.MapTo(Of UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey), TTarget)
    fullName: Hybrid.Mapping.MapperExtensions.MapTo(Of Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey), TTarget)
  - name: (
    nameWithType: (
    fullName: (
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Reflection.LockExtensions.Locking(System.Action)
  commentId: M:Hybrid.Reflection.LockExtensions.Locking(System.Object,System.Action)
  parent: Hybrid.Reflection.LockExtensions
  definition: Hybrid.Reflection.LockExtensions.Locking(System.Object,System.Action)
  name: Locking(Action)
  nameWithType: LockExtensions.Locking(Action)
  fullName: Hybrid.Reflection.LockExtensions.Locking(System.Action)
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking(System.Action)
    name: Locking
    nameWithType: LockExtensions.Locking
    fullName: Hybrid.Reflection.LockExtensions.Locking
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking(System.Action)
    name: Locking
    nameWithType: LockExtensions.Locking
    fullName: Hybrid.Reflection.LockExtensions.Locking
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.Hybrid.Reflection.LockExtensions.Locking``1(System.Action{Hybrid.Zero.Identity.Entities.UserStoreBase{{TUser},{TUserKey},{TUserClaim},{TUserClaimKey},{TUserLogin},{TUserLoginKey},{TUserToken},{TUserTokenKey},{TRole},{TRoleKey},{TUserRole},{TUserRoleKey}}})
  commentId: M:Hybrid.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
  parent: Hybrid.Reflection.LockExtensions
  definition: Hybrid.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
  name: Locking<UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>>(Action<UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>>)
  nameWithType: LockExtensions.Locking<UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>>(Action<UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>>)
  fullName: Hybrid.Reflection.LockExtensions.Locking<Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>>(System.Action<Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>>)
  nameWithType.vb: LockExtensions.Locking(Of UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey))(Action(Of UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey)))
  fullName.vb: Hybrid.Reflection.LockExtensions.Locking(Of Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey))(System.Action(Of Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey)))
  name.vb: Locking(Of UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey))(Action(Of UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey)))
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(System.Action{``0})
    name: Locking<UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>>
    nameWithType: LockExtensions.Locking<UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>>
    fullName: Hybrid.Reflection.LockExtensions.Locking<Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12
    name: UserStoreBase
    nameWithType: UserStoreBase
    fullName: Hybrid.Zero.Identity.Entities.UserStoreBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserKey
    nameWithType: TUserKey
    fullName: TUserKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserClaim
    nameWithType: TUserClaim
    fullName: TUserClaim
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserClaimKey
    nameWithType: TUserClaimKey
    fullName: TUserClaimKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserLogin
    nameWithType: TUserLogin
    fullName: TUserLogin
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserLoginKey
    nameWithType: TUserLoginKey
    fullName: TUserLoginKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserToken
    nameWithType: TUserToken
    fullName: TUserToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserTokenKey
    nameWithType: TUserTokenKey
    fullName: TUserTokenKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserRole
    nameWithType: TUserRole
    fullName: TUserRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserRoleKey
    nameWithType: TUserRoleKey
    fullName: TUserRoleKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(System.Action{``0})
    name: Locking(Of UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey))
    nameWithType: LockExtensions.Locking(Of UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey))
    fullName: Hybrid.Reflection.LockExtensions.Locking(Of Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey))
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12
    name: UserStoreBase
    nameWithType: UserStoreBase
    fullName: Hybrid.Zero.Identity.Entities.UserStoreBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserKey
    nameWithType: TUserKey
    fullName: TUserKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserClaim
    nameWithType: TUserClaim
    fullName: TUserClaim
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserClaimKey
    nameWithType: TUserClaimKey
    fullName: TUserClaimKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserLogin
    nameWithType: TUserLogin
    fullName: TUserLogin
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserLoginKey
    nameWithType: TUserLoginKey
    fullName: TUserLoginKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserToken
    nameWithType: TUserToken
    fullName: TUserToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserTokenKey
    nameWithType: TUserTokenKey
    fullName: TUserTokenKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserRole
    nameWithType: TUserRole
    fullName: TUserRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserRoleKey
    nameWithType: TUserRoleKey
    fullName: TUserRoleKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Reflection.LockExtensions.Locking``1(System.Func{{TResult}})
  commentId: M:Hybrid.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
  parent: Hybrid.Reflection.LockExtensions
  definition: Hybrid.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
  name: Locking<TResult>(Func<TResult>)
  nameWithType: LockExtensions.Locking<TResult>(Func<TResult>)
  fullName: Hybrid.Reflection.LockExtensions.Locking<TResult>(System.Func<TResult>)
  nameWithType.vb: LockExtensions.Locking(Of TResult)(Func(Of TResult))
  fullName.vb: Hybrid.Reflection.LockExtensions.Locking(Of TResult)(System.Func(Of TResult))
  name.vb: Locking(Of TResult)(Func(Of TResult))
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(System.Func{``0})
    name: Locking<TResult>
    nameWithType: LockExtensions.Locking<TResult>
    fullName: Hybrid.Reflection.LockExtensions.Locking<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(System.Func{``0})
    name: Locking(Of TResult)
    nameWithType: LockExtensions.Locking(Of TResult)
    fullName: Hybrid.Reflection.LockExtensions.Locking(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.Hybrid.Reflection.LockExtensions.Locking``2(System.Func{Hybrid.Zero.Identity.Entities.UserStoreBase{{TUser},{TUserKey},{TUserClaim},{TUserClaimKey},{TUserLogin},{TUserLoginKey},{TUserToken},{TUserTokenKey},{TRole},{TRoleKey},{TUserRole},{TUserRoleKey}},{TResult}})
  commentId: M:Hybrid.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
  parent: Hybrid.Reflection.LockExtensions
  definition: Hybrid.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
  name: Locking<UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>, TResult>(Func<UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>, TResult>)
  nameWithType: LockExtensions.Locking<UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>, TResult>(Func<UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>, TResult>)
  fullName: Hybrid.Reflection.LockExtensions.Locking<Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>, TResult>(System.Func<Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>, TResult>)
  nameWithType.vb: LockExtensions.Locking(Of UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey), TResult)(Func(Of UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey), TResult))
  fullName.vb: Hybrid.Reflection.LockExtensions.Locking(Of Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey), TResult)(System.Func(Of Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey), TResult))
  name.vb: Locking(Of UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey), TResult)(Func(Of UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey), TResult))
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking``2(System.Func{``0,``1})
    name: Locking<UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>, TResult>
    nameWithType: LockExtensions.Locking<UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>, TResult>
    fullName: Hybrid.Reflection.LockExtensions.Locking<Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12
    name: UserStoreBase
    nameWithType: UserStoreBase
    fullName: Hybrid.Zero.Identity.Entities.UserStoreBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserKey
    nameWithType: TUserKey
    fullName: TUserKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserClaim
    nameWithType: TUserClaim
    fullName: TUserClaim
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserClaimKey
    nameWithType: TUserClaimKey
    fullName: TUserClaimKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserLogin
    nameWithType: TUserLogin
    fullName: TUserLogin
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserLoginKey
    nameWithType: TUserLoginKey
    fullName: TUserLoginKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserToken
    nameWithType: TUserToken
    fullName: TUserToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserTokenKey
    nameWithType: TUserTokenKey
    fullName: TUserTokenKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserRole
    nameWithType: TUserRole
    fullName: TUserRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserRoleKey
    nameWithType: TUserRoleKey
    fullName: TUserRoleKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking``2(System.Func{``0,``1})
    name: Locking(Of UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey), TResult)
    nameWithType: LockExtensions.Locking(Of UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey), TResult)
    fullName: Hybrid.Reflection.LockExtensions.Locking(Of Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey), TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12
    name: UserStoreBase
    nameWithType: UserStoreBase
    fullName: Hybrid.Zero.Identity.Entities.UserStoreBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserKey
    nameWithType: TUserKey
    fullName: TUserKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserClaim
    nameWithType: TUserClaim
    fullName: TUserClaim
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserClaimKey
    nameWithType: TUserClaimKey
    fullName: TUserClaimKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserLogin
    nameWithType: TUserLogin
    fullName: TUserLogin
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserLoginKey
    nameWithType: TUserLoginKey
    fullName: TUserLoginKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserToken
    nameWithType: TUserToken
    fullName: TUserToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserTokenKey
    nameWithType: TUserTokenKey
    fullName: TUserTokenKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserRole
    nameWithType: TUserRole
    fullName: TUserRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserRoleKey
    nameWithType: TUserRoleKey
    fullName: TUserRoleKey
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2
  commentId: M:Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2(``0)
  parent: Hybrid.Domain.Entities.EntityExtensions
  definition: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2(``0)
  name: CheckICreatedTime<UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>, TKey>()
  nameWithType: EntityExtensions.CheckICreatedTime<UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>, TKey>()
  fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime<Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>, TKey>()
  nameWithType.vb: EntityExtensions.CheckICreatedTime(Of UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey), TKey)()
  fullName.vb: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime(Of Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey), TKey)()
  name.vb: CheckICreatedTime(Of UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey), TKey)()
  spec.csharp:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2
    name: CheckICreatedTime<UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>, TKey>
    nameWithType: EntityExtensions.CheckICreatedTime<UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>, TKey>
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime<Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2
    name: CheckICreatedTime(Of UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey), TKey)
    nameWithType: EntityExtensions.CheckICreatedTime(Of UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey), TKey)
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime(Of Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey), TKey)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(System.Security.Principal.IPrincipal)
  commentId: M:Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
  parent: Hybrid.Domain.Entities.EntityExtensions
  definition: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
  name: CheckICreationAudited<UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>, TKey, TUserKey>(IPrincipal)
  nameWithType: EntityExtensions.CheckICreationAudited<UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>, TKey, TUserKey>(IPrincipal)
  fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited<Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>, TKey, TUserKey>(System.Security.Principal.IPrincipal)
  nameWithType.vb: EntityExtensions.CheckICreationAudited(Of UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey), TKey, TUserKey)(IPrincipal)
  fullName.vb: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited(Of Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey), TKey, TUserKey)(System.Security.Principal.IPrincipal)
  name.vb: CheckICreationAudited(Of UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey), TKey, TUserKey)(IPrincipal)
  spec.csharp:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(System.Security.Principal.IPrincipal)
    name: CheckICreationAudited<UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>, TKey, TUserKey>
    nameWithType: EntityExtensions.CheckICreationAudited<UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>, TKey, TUserKey>
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited<Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>, TKey, TUserKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(System.Security.Principal.IPrincipal)
    name: CheckICreationAudited(Of UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey), TKey, TUserKey)
    nameWithType: EntityExtensions.CheckICreationAudited(Of UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey), TKey, TUserKey)
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited(Of Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey), TKey, TUserKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(System.Security.Principal.IPrincipal)
  commentId: M:Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
  parent: Hybrid.Domain.Entities.EntityExtensions
  definition: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
  name: CheckIUpdateAudited<UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>, TKey, TUserKey>(IPrincipal)
  nameWithType: EntityExtensions.CheckIUpdateAudited<UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>, TKey, TUserKey>(IPrincipal)
  fullName: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited<Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>, TKey, TUserKey>(System.Security.Principal.IPrincipal)
  nameWithType.vb: EntityExtensions.CheckIUpdateAudited(Of UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey), TKey, TUserKey)(IPrincipal)
  fullName.vb: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited(Of Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey), TKey, TUserKey)(System.Security.Principal.IPrincipal)
  name.vb: CheckIUpdateAudited(Of UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey), TKey, TUserKey)(IPrincipal)
  spec.csharp:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(System.Security.Principal.IPrincipal)
    name: CheckIUpdateAudited<UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>, TKey, TUserKey>
    nameWithType: EntityExtensions.CheckIUpdateAudited<UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>, TKey, TUserKey>
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited<Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>, TKey, TUserKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(System.Security.Principal.IPrincipal)
    name: CheckIUpdateAudited(Of UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey), TKey, TUserKey)
    nameWithType: EntityExtensions.CheckIUpdateAudited(Of UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey), TKey, TUserKey)
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited(Of Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey), TKey, TUserKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.AspNetCore.Identity.IQueryableUserStore`1
  commentId: T:Microsoft.AspNetCore.Identity.IQueryableUserStore`1
  isExternal: true
  name: IQueryableUserStore<TUser>
  nameWithType: IQueryableUserStore<TUser>
  fullName: Microsoft.AspNetCore.Identity.IQueryableUserStore<TUser>
  nameWithType.vb: IQueryableUserStore(Of TUser)
  fullName.vb: Microsoft.AspNetCore.Identity.IQueryableUserStore(Of TUser)
  name.vb: IQueryableUserStore(Of TUser)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IQueryableUserStore`1
    name: IQueryableUserStore
    nameWithType: IQueryableUserStore
    fullName: Microsoft.AspNetCore.Identity.IQueryableUserStore
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IQueryableUserStore`1
    name: IQueryableUserStore
    nameWithType: IQueryableUserStore
    fullName: Microsoft.AspNetCore.Identity.IQueryableUserStore
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity
  commentId: N:Microsoft.AspNetCore.Identity
  isExternal: true
  name: Microsoft.AspNetCore.Identity
  nameWithType: Microsoft.AspNetCore.Identity
  fullName: Microsoft.AspNetCore.Identity
- uid: Microsoft.AspNetCore.Identity.IUserLoginStore`1
  commentId: T:Microsoft.AspNetCore.Identity.IUserLoginStore`1
  isExternal: true
  name: IUserLoginStore<TUser>
  nameWithType: IUserLoginStore<TUser>
  fullName: Microsoft.AspNetCore.Identity.IUserLoginStore<TUser>
  nameWithType.vb: IUserLoginStore(Of TUser)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserLoginStore(Of TUser)
  name.vb: IUserLoginStore(Of TUser)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserLoginStore`1
    name: IUserLoginStore
    nameWithType: IUserLoginStore
    fullName: Microsoft.AspNetCore.Identity.IUserLoginStore
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserLoginStore`1
    name: IUserLoginStore
    nameWithType: IUserLoginStore
    fullName: Microsoft.AspNetCore.Identity.IUserLoginStore
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserClaimStore`1
  commentId: T:Microsoft.AspNetCore.Identity.IUserClaimStore`1
  isExternal: true
  name: IUserClaimStore<TUser>
  nameWithType: IUserClaimStore<TUser>
  fullName: Microsoft.AspNetCore.Identity.IUserClaimStore<TUser>
  nameWithType.vb: IUserClaimStore(Of TUser)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserClaimStore(Of TUser)
  name.vb: IUserClaimStore(Of TUser)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserClaimStore`1
    name: IUserClaimStore
    nameWithType: IUserClaimStore
    fullName: Microsoft.AspNetCore.Identity.IUserClaimStore
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserClaimStore`1
    name: IUserClaimStore
    nameWithType: IUserClaimStore
    fullName: Microsoft.AspNetCore.Identity.IUserClaimStore
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserPasswordStore`1
  commentId: T:Microsoft.AspNetCore.Identity.IUserPasswordStore`1
  isExternal: true
  name: IUserPasswordStore<TUser>
  nameWithType: IUserPasswordStore<TUser>
  fullName: Microsoft.AspNetCore.Identity.IUserPasswordStore<TUser>
  nameWithType.vb: IUserPasswordStore(Of TUser)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserPasswordStore(Of TUser)
  name.vb: IUserPasswordStore(Of TUser)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserPasswordStore`1
    name: IUserPasswordStore
    nameWithType: IUserPasswordStore
    fullName: Microsoft.AspNetCore.Identity.IUserPasswordStore
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserPasswordStore`1
    name: IUserPasswordStore
    nameWithType: IUserPasswordStore
    fullName: Microsoft.AspNetCore.Identity.IUserPasswordStore
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserSecurityStampStore`1
  commentId: T:Microsoft.AspNetCore.Identity.IUserSecurityStampStore`1
  isExternal: true
  name: IUserSecurityStampStore<TUser>
  nameWithType: IUserSecurityStampStore<TUser>
  fullName: Microsoft.AspNetCore.Identity.IUserSecurityStampStore<TUser>
  nameWithType.vb: IUserSecurityStampStore(Of TUser)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserSecurityStampStore(Of TUser)
  name.vb: IUserSecurityStampStore(Of TUser)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserSecurityStampStore`1
    name: IUserSecurityStampStore
    nameWithType: IUserSecurityStampStore
    fullName: Microsoft.AspNetCore.Identity.IUserSecurityStampStore
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserSecurityStampStore`1
    name: IUserSecurityStampStore
    nameWithType: IUserSecurityStampStore
    fullName: Microsoft.AspNetCore.Identity.IUserSecurityStampStore
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserEmailStore`1
  commentId: T:Microsoft.AspNetCore.Identity.IUserEmailStore`1
  isExternal: true
  name: IUserEmailStore<TUser>
  nameWithType: IUserEmailStore<TUser>
  fullName: Microsoft.AspNetCore.Identity.IUserEmailStore<TUser>
  nameWithType.vb: IUserEmailStore(Of TUser)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserEmailStore(Of TUser)
  name.vb: IUserEmailStore(Of TUser)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserEmailStore`1
    name: IUserEmailStore
    nameWithType: IUserEmailStore
    fullName: Microsoft.AspNetCore.Identity.IUserEmailStore
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserEmailStore`1
    name: IUserEmailStore
    nameWithType: IUserEmailStore
    fullName: Microsoft.AspNetCore.Identity.IUserEmailStore
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserLockoutStore`1
  commentId: T:Microsoft.AspNetCore.Identity.IUserLockoutStore`1
  isExternal: true
  name: IUserLockoutStore<TUser>
  nameWithType: IUserLockoutStore<TUser>
  fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore<TUser>
  nameWithType.vb: IUserLockoutStore(Of TUser)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserLockoutStore(Of TUser)
  name.vb: IUserLockoutStore(Of TUser)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserLockoutStore`1
    name: IUserLockoutStore
    nameWithType: IUserLockoutStore
    fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserLockoutStore`1
    name: IUserLockoutStore
    nameWithType: IUserLockoutStore
    fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore`1
  commentId: T:Microsoft.AspNetCore.Identity.IUserPhoneNumberStore`1
  isExternal: true
  name: IUserPhoneNumberStore<TUser>
  nameWithType: IUserPhoneNumberStore<TUser>
  fullName: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore<TUser>
  nameWithType.vb: IUserPhoneNumberStore(Of TUser)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore(Of TUser)
  name.vb: IUserPhoneNumberStore(Of TUser)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore`1
    name: IUserPhoneNumberStore
    nameWithType: IUserPhoneNumberStore
    fullName: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore`1
    name: IUserPhoneNumberStore
    nameWithType: IUserPhoneNumberStore
    fullName: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserTwoFactorStore`1
  commentId: T:Microsoft.AspNetCore.Identity.IUserTwoFactorStore`1
  isExternal: true
  name: IUserTwoFactorStore<TUser>
  nameWithType: IUserTwoFactorStore<TUser>
  fullName: Microsoft.AspNetCore.Identity.IUserTwoFactorStore<TUser>
  nameWithType.vb: IUserTwoFactorStore(Of TUser)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserTwoFactorStore(Of TUser)
  name.vb: IUserTwoFactorStore(Of TUser)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserTwoFactorStore`1
    name: IUserTwoFactorStore
    nameWithType: IUserTwoFactorStore
    fullName: Microsoft.AspNetCore.Identity.IUserTwoFactorStore
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserTwoFactorStore`1
    name: IUserTwoFactorStore
    nameWithType: IUserTwoFactorStore
    fullName: Microsoft.AspNetCore.Identity.IUserTwoFactorStore
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Identity.IHybridUserAuthenticationTokenStore`1
  commentId: T:Hybrid.Zero.Identity.IHybridUserAuthenticationTokenStore`1
  name: IHybridUserAuthenticationTokenStore<TUser>
  nameWithType: IHybridUserAuthenticationTokenStore<TUser>
  fullName: Hybrid.Zero.Identity.IHybridUserAuthenticationTokenStore<TUser>
  nameWithType.vb: IHybridUserAuthenticationTokenStore(Of TUser)
  fullName.vb: Hybrid.Zero.Identity.IHybridUserAuthenticationTokenStore(Of TUser)
  name.vb: IHybridUserAuthenticationTokenStore(Of TUser)
  spec.csharp:
  - uid: Hybrid.Zero.Identity.IHybridUserAuthenticationTokenStore`1
    name: IHybridUserAuthenticationTokenStore
    nameWithType: IHybridUserAuthenticationTokenStore
    fullName: Hybrid.Zero.Identity.IHybridUserAuthenticationTokenStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Hybrid.Zero.Identity.IHybridUserAuthenticationTokenStore`1
    name: IHybridUserAuthenticationTokenStore
    nameWithType: IHybridUserAuthenticationTokenStore
    fullName: Hybrid.Zero.Identity.IHybridUserAuthenticationTokenStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Identity
  commentId: N:Hybrid.Zero.Identity
  name: Hybrid.Zero.Identity
  nameWithType: Hybrid.Zero.Identity
  fullName: Hybrid.Zero.Identity
- uid: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore`1
  commentId: T:Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore`1
  isExternal: true
  name: IUserAuthenticationTokenStore<TUser>
  nameWithType: IUserAuthenticationTokenStore<TUser>
  fullName: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore<TUser>
  nameWithType.vb: IUserAuthenticationTokenStore(Of TUser)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore(Of TUser)
  name.vb: IUserAuthenticationTokenStore(Of TUser)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore`1
    name: IUserAuthenticationTokenStore
    nameWithType: IUserAuthenticationTokenStore
    fullName: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore`1
    name: IUserAuthenticationTokenStore
    nameWithType: IUserAuthenticationTokenStore
    fullName: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserAuthenticatorKeyStore`1
  commentId: T:Microsoft.AspNetCore.Identity.IUserAuthenticatorKeyStore`1
  isExternal: true
  name: IUserAuthenticatorKeyStore<TUser>
  nameWithType: IUserAuthenticatorKeyStore<TUser>
  fullName: Microsoft.AspNetCore.Identity.IUserAuthenticatorKeyStore<TUser>
  nameWithType.vb: IUserAuthenticatorKeyStore(Of TUser)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserAuthenticatorKeyStore(Of TUser)
  name.vb: IUserAuthenticatorKeyStore(Of TUser)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserAuthenticatorKeyStore`1
    name: IUserAuthenticatorKeyStore
    nameWithType: IUserAuthenticatorKeyStore
    fullName: Microsoft.AspNetCore.Identity.IUserAuthenticatorKeyStore
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserAuthenticatorKeyStore`1
    name: IUserAuthenticatorKeyStore
    nameWithType: IUserAuthenticatorKeyStore
    fullName: Microsoft.AspNetCore.Identity.IUserAuthenticatorKeyStore
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserTwoFactorRecoveryCodeStore`1
  commentId: T:Microsoft.AspNetCore.Identity.IUserTwoFactorRecoveryCodeStore`1
  isExternal: true
  name: IUserTwoFactorRecoveryCodeStore<TUser>
  nameWithType: IUserTwoFactorRecoveryCodeStore<TUser>
  fullName: Microsoft.AspNetCore.Identity.IUserTwoFactorRecoveryCodeStore<TUser>
  nameWithType.vb: IUserTwoFactorRecoveryCodeStore(Of TUser)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserTwoFactorRecoveryCodeStore(Of TUser)
  name.vb: IUserTwoFactorRecoveryCodeStore(Of TUser)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserTwoFactorRecoveryCodeStore`1
    name: IUserTwoFactorRecoveryCodeStore
    nameWithType: IUserTwoFactorRecoveryCodeStore
    fullName: Microsoft.AspNetCore.Identity.IUserTwoFactorRecoveryCodeStore
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserTwoFactorRecoveryCodeStore`1
    name: IUserTwoFactorRecoveryCodeStore
    nameWithType: IUserTwoFactorRecoveryCodeStore
    fullName: Microsoft.AspNetCore.Identity.IUserTwoFactorRecoveryCodeStore
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserRoleStore`1
  commentId: T:Microsoft.AspNetCore.Identity.IUserRoleStore`1
  isExternal: true
  name: IUserRoleStore<TUser>
  nameWithType: IUserRoleStore<TUser>
  fullName: Microsoft.AspNetCore.Identity.IUserRoleStore<TUser>
  nameWithType.vb: IUserRoleStore(Of TUser)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserRoleStore(Of TUser)
  name.vb: IUserRoleStore(Of TUser)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserRoleStore`1
    name: IUserRoleStore
    nameWithType: IUserRoleStore
    fullName: Microsoft.AspNetCore.Identity.IUserRoleStore
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserRoleStore`1
    name: IUserRoleStore
    nameWithType: IUserRoleStore
    fullName: Microsoft.AspNetCore.Identity.IUserRoleStore
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserStore`1
  commentId: T:Microsoft.AspNetCore.Identity.IUserStore`1
  isExternal: true
  name: IUserStore<TUser>
  nameWithType: IUserStore<TUser>
  fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>
  nameWithType.vb: IUserStore(Of TUser)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserStore(Of TUser)
  name.vb: IUserStore(Of TUser)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1
    name: IUserStore
    nameWithType: IUserStore
    fullName: Microsoft.AspNetCore.Identity.IUserStore
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1
    name: IUserStore
    nameWithType: IUserStore
    fullName: Microsoft.AspNetCore.Identity.IUserStore
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
  commentId: M:Hybrid.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
  isExternal: true
  name: CastTo(Object, Type)
  nameWithType: ObjectExtensions.CastTo(Object, Type)
  fullName: Hybrid.Extensions.ObjectExtensions.CastTo(System.Object, System.Type)
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
    name: CastTo
    nameWithType: ObjectExtensions.CastTo
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
    name: CastTo
    nameWithType: ObjectExtensions.CastTo
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ObjectExtensions
  commentId: T:Hybrid.Extensions.ObjectExtensions
  parent: Hybrid.Extensions
  name: ObjectExtensions
  nameWithType: ObjectExtensions
  fullName: Hybrid.Extensions.ObjectExtensions
- uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object)
  commentId: M:Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object)
  isExternal: true
  name: CastTo<T>(Object)
  nameWithType: ObjectExtensions.CastTo<T>(Object)
  fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>(System.Object)
  nameWithType.vb: ObjectExtensions.CastTo(Of T)(Object)
  fullName.vb: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)(System.Object)
  name.vb: CastTo(Of T)(Object)
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object)
    name: CastTo<T>
    nameWithType: ObjectExtensions.CastTo<T>
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object)
    name: CastTo(Of T)
    nameWithType: ObjectExtensions.CastTo(Of T)
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
  commentId: M:Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
  isExternal: true
  name: CastTo<T>(Object, T)
  nameWithType: ObjectExtensions.CastTo<T>(Object, T)
  fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>(System.Object, T)
  nameWithType.vb: ObjectExtensions.CastTo(Of T)(Object, T)
  fullName.vb: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)(System.Object, T)
  name.vb: CastTo(Of T)(Object, T)
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
    name: CastTo<T>
    nameWithType: ObjectExtensions.CastTo<T>
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
    name: CastTo(Of T)
    nameWithType: ObjectExtensions.CastTo(Of T)
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
  commentId: M:Hybrid.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
  name: IsIn<T>(T, T[])
  nameWithType: ObjectExtensions.IsIn<T>(T, T[])
  fullName: Hybrid.Extensions.ObjectExtensions.IsIn<T>(T, T[])
  nameWithType.vb: ObjectExtensions.IsIn(Of T)(T, T())
  fullName.vb: Hybrid.Extensions.ObjectExtensions.IsIn(Of T)(T, T())
  name.vb: IsIn(Of T)(T, T())
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
    name: IsIn<T>
    nameWithType: ObjectExtensions.IsIn<T>
    fullName: Hybrid.Extensions.ObjectExtensions.IsIn<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
    name: IsIn(Of T)
    nameWithType: ObjectExtensions.IsIn(Of T)
    fullName: Hybrid.Extensions.ObjectExtensions.IsIn(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ObjectExtensions.ToDynamic(System.Object)
  commentId: M:Hybrid.Extensions.ObjectExtensions.ToDynamic(System.Object)
  isExternal: true
  name: ToDynamic(Object)
  nameWithType: ObjectExtensions.ToDynamic(Object)
  fullName: Hybrid.Extensions.ObjectExtensions.ToDynamic(System.Object)
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.ToDynamic(System.Object)
    name: ToDynamic
    nameWithType: ObjectExtensions.ToDynamic
    fullName: Hybrid.Extensions.ObjectExtensions.ToDynamic
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.ToDynamic(System.Object)
    name: ToDynamic
    nameWithType: ObjectExtensions.ToDynamic
    fullName: Hybrid.Extensions.ObjectExtensions.ToDynamic
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ObjectExtensions.DeepClone``1(``0)
  commentId: M:Hybrid.Extensions.ObjectExtensions.DeepClone``1(``0)
  name: DeepClone<T>(T)
  nameWithType: ObjectExtensions.DeepClone<T>(T)
  fullName: Hybrid.Extensions.ObjectExtensions.DeepClone<T>(T)
  nameWithType.vb: ObjectExtensions.DeepClone(Of T)(T)
  fullName.vb: Hybrid.Extensions.ObjectExtensions.DeepClone(Of T)(T)
  name.vb: DeepClone(Of T)(T)
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.DeepClone``1(``0)
    name: DeepClone<T>
    nameWithType: ObjectExtensions.DeepClone<T>
    fullName: Hybrid.Extensions.ObjectExtensions.DeepClone<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.DeepClone``1(``0)
    name: DeepClone(Of T)
    nameWithType: ObjectExtensions.DeepClone(Of T)
    fullName: Hybrid.Extensions.ObjectExtensions.DeepClone(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
  commentId: M:Hybrid.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
  isExternal: true
  name: Required<T>(T, Func<T, Boolean>, String)
  nameWithType: ParameterCheckExtensions.Required<T>(T, Func<T, Boolean>, String)
  fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<T>(T, System.Func<T, System.Boolean>, System.String)
  nameWithType.vb: ParameterCheckExtensions.Required(Of T)(T, Func(Of T, Boolean), String)
  fullName.vb: Hybrid.Extensions.ParameterCheckExtensions.Required(Of T)(T, System.Func(Of T, System.Boolean), System.String)
  name.vb: Required(Of T)(T, Func(Of T, Boolean), String)
  spec.csharp:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
    name: Required<T>
    nameWithType: ParameterCheckExtensions.Required<T>
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
    name: Required(Of T)
    nameWithType: ParameterCheckExtensions.Required(Of T)
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ParameterCheckExtensions
  commentId: T:Hybrid.Extensions.ParameterCheckExtensions
  parent: Hybrid.Extensions
  name: ParameterCheckExtensions
  nameWithType: ParameterCheckExtensions
  fullName: Hybrid.Extensions.ParameterCheckExtensions
- uid: Hybrid.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
  commentId: M:Hybrid.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
  isExternal: true
  name: Required<T, TException>(T, Func<T, Boolean>, String)
  nameWithType: ParameterCheckExtensions.Required<T, TException>(T, Func<T, Boolean>, String)
  fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<T, TException>(T, System.Func<T, System.Boolean>, System.String)
  nameWithType.vb: ParameterCheckExtensions.Required(Of T, TException)(T, Func(Of T, Boolean), String)
  fullName.vb: Hybrid.Extensions.ParameterCheckExtensions.Required(Of T, TException)(T, System.Func(Of T, System.Boolean), System.String)
  name.vb: Required(Of T, TException)(T, Func(Of T, Boolean), String)
  spec.csharp:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
    name: Required<T, TException>
    nameWithType: ParameterCheckExtensions.Required<T, TException>
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<T, TException>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
    name: Required(Of T, TException)
    nameWithType: ParameterCheckExtensions.Required(Of T, TException)
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required(Of T, TException)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
  commentId: M:Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
  isExternal: true
  name: CheckNotNull<T>(T, String)
  nameWithType: ParameterCheckExtensions.CheckNotNull<T>(T, String)
  fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull<T>(T, System.String)
  nameWithType.vb: ParameterCheckExtensions.CheckNotNull(Of T)(T, String)
  fullName.vb: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull(Of T)(T, System.String)
  name.vb: CheckNotNull(Of T)(T, String)
  spec.csharp:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
    name: CheckNotNull<T>
    nameWithType: ParameterCheckExtensions.CheckNotNull<T>
    fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
    name: CheckNotNull(Of T)
    nameWithType: ParameterCheckExtensions.CheckNotNull(Of T)
    fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
  isExternal: true
  name: TryCatch<T>(T, Action<T>, Action<Exception>, Action<T>)
  nameWithType: TryCatchExtensions.TryCatch<T>(T, Action<T>, Action<Exception>, Action<T>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T>(T, System.Action<T>, System.Action<System.Exception>, System.Action<T>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of T)(T, Action(Of T), Action(Of Exception), Action(Of T))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T)(T, System.Action(Of T), System.Action(Of System.Exception), System.Action(Of T))
  name.vb: TryCatch(Of T)(T, Action(Of T), Action(Of Exception), Action(Of T))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
    name: TryCatch<T>
    nameWithType: TryCatchExtensions.TryCatch<T>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
    name: TryCatch(Of T)
    nameWithType: TryCatchExtensions.TryCatch(Of T)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.TryCatchExtensions
  commentId: T:Hybrid.Extensions.TryCatchExtensions
  parent: Hybrid.Extensions
  name: TryCatchExtensions
  nameWithType: TryCatchExtensions
  fullName: Hybrid.Extensions.TryCatchExtensions
- uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
  isExternal: true
  name: TryCatch<T>(T, Action<T>, Action<Exception>)
  nameWithType: TryCatchExtensions.TryCatch<T>(T, Action<T>, Action<Exception>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T>(T, System.Action<T>, System.Action<System.Exception>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of T)(T, Action(Of T), Action(Of Exception))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T)(T, System.Action(Of T), System.Action(Of System.Exception))
  name.vb: TryCatch(Of T)(T, Action(Of T), Action(Of Exception))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
    name: TryCatch<T>
    nameWithType: TryCatchExtensions.TryCatch<T>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
    name: TryCatch(Of T)
    nameWithType: TryCatchExtensions.TryCatch(Of T)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
  isExternal: true
  name: TryCatch<T, TResult>(T, Func<T, TResult>, Action<Exception>, Action<T>)
  nameWithType: TryCatchExtensions.TryCatch<T, TResult>(T, Func<T, TResult>, Action<Exception>, Action<T>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T, TResult>(T, System.Func<T, TResult>, System.Action<System.Exception>, System.Action<T>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of T, TResult)(T, Func(Of T, TResult), Action(Of Exception), Action(Of T))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T, TResult)(T, System.Func(Of T, TResult), System.Action(Of System.Exception), System.Action(Of T))
  name.vb: TryCatch(Of T, TResult)(T, Func(Of T, TResult), Action(Of Exception), Action(Of T))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
    name: TryCatch<T, TResult>
    nameWithType: TryCatchExtensions.TryCatch<T, TResult>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
    name: TryCatch(Of T, TResult)
    nameWithType: TryCatchExtensions.TryCatch(Of T, TResult)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
  isExternal: true
  name: TryCatch<T, TResult>(T, Func<T, TResult>, Action<Exception>)
  nameWithType: TryCatchExtensions.TryCatch<T, TResult>(T, Func<T, TResult>, Action<Exception>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T, TResult>(T, System.Func<T, TResult>, System.Action<System.Exception>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of T, TResult)(T, Func(Of T, TResult), Action(Of Exception))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T, TResult)(T, System.Func(Of T, TResult), System.Action(Of System.Exception))
  name.vb: TryCatch(Of T, TResult)(T, Func(Of T, TResult), Action(Of Exception))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
    name: TryCatch<T, TResult>
    nameWithType: TryCatchExtensions.TryCatch<T, TResult>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
    name: TryCatch(Of T, TResult)
    nameWithType: TryCatchExtensions.TryCatch(Of T, TResult)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
  isExternal: true
  name: TryFinally<T>(T, Action<T>, Action<T>)
  nameWithType: TryCatchExtensions.TryFinally<T>(T, Action<T>, Action<T>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryFinally<T>(T, System.Action<T>, System.Action<T>)
  nameWithType.vb: TryCatchExtensions.TryFinally(Of T)(T, Action(Of T), Action(Of T))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryFinally(Of T)(T, System.Action(Of T), System.Action(Of T))
  name.vb: TryFinally(Of T)(T, Action(Of T), Action(Of T))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
    name: TryFinally<T>
    nameWithType: TryCatchExtensions.TryFinally<T>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryFinally<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
    name: TryFinally(Of T)
    nameWithType: TryCatchExtensions.TryFinally(Of T)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryFinally(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
  commentId: M:Hybrid.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
  isExternal: true
  name: ToJsonString(Object, Boolean, Boolean)
  nameWithType: JsonExtensions.ToJsonString(Object, Boolean, Boolean)
  fullName: Hybrid.Json.JsonExtensions.ToJsonString(System.Object, System.Boolean, System.Boolean)
  spec.csharp:
  - uid: Hybrid.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
    name: ToJsonString
    nameWithType: JsonExtensions.ToJsonString
    fullName: Hybrid.Json.JsonExtensions.ToJsonString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
    name: ToJsonString
    nameWithType: JsonExtensions.ToJsonString
    fullName: Hybrid.Json.JsonExtensions.ToJsonString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Json.JsonExtensions
  commentId: T:Hybrid.Json.JsonExtensions
  parent: Hybrid.Json
  name: JsonExtensions
  nameWithType: JsonExtensions
  fullName: Hybrid.Json.JsonExtensions
- uid: Hybrid.Mapping.MapperExtensions.MapTo``1(System.Object)
  commentId: M:Hybrid.Mapping.MapperExtensions.MapTo``1(System.Object)
  isExternal: true
  name: MapTo<TTarget>(Object)
  nameWithType: MapperExtensions.MapTo<TTarget>(Object)
  fullName: Hybrid.Mapping.MapperExtensions.MapTo<TTarget>(System.Object)
  nameWithType.vb: MapperExtensions.MapTo(Of TTarget)(Object)
  fullName.vb: Hybrid.Mapping.MapperExtensions.MapTo(Of TTarget)(System.Object)
  name.vb: MapTo(Of TTarget)(Object)
  spec.csharp:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``1(System.Object)
    name: MapTo<TTarget>
    nameWithType: MapperExtensions.MapTo<TTarget>
    fullName: Hybrid.Mapping.MapperExtensions.MapTo<TTarget>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``1(System.Object)
    name: MapTo(Of TTarget)
    nameWithType: MapperExtensions.MapTo(Of TTarget)
    fullName: Hybrid.Mapping.MapperExtensions.MapTo(Of TTarget)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Mapping.MapperExtensions
  commentId: T:Hybrid.Mapping.MapperExtensions
  parent: Hybrid.Mapping
  name: MapperExtensions
  nameWithType: MapperExtensions
  fullName: Hybrid.Mapping.MapperExtensions
- uid: Hybrid.Mapping.MapperExtensions.MapTo``2(``0,``1)
  commentId: M:Hybrid.Mapping.MapperExtensions.MapTo``2(``0,``1)
  name: MapTo<TSource, TTarget>(TSource, TTarget)
  nameWithType: MapperExtensions.MapTo<TSource, TTarget>(TSource, TTarget)
  fullName: Hybrid.Mapping.MapperExtensions.MapTo<TSource, TTarget>(TSource, TTarget)
  nameWithType.vb: MapperExtensions.MapTo(Of TSource, TTarget)(TSource, TTarget)
  fullName.vb: Hybrid.Mapping.MapperExtensions.MapTo(Of TSource, TTarget)(TSource, TTarget)
  name.vb: MapTo(Of TSource, TTarget)(TSource, TTarget)
  spec.csharp:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``2(``0,``1)
    name: MapTo<TSource, TTarget>
    nameWithType: MapperExtensions.MapTo<TSource, TTarget>
    fullName: Hybrid.Mapping.MapperExtensions.MapTo<TSource, TTarget>
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``2(``0,``1)
    name: MapTo(Of TSource, TTarget)
    nameWithType: MapperExtensions.MapTo(Of TSource, TTarget)
    fullName: Hybrid.Mapping.MapperExtensions.MapTo(Of TSource, TTarget)
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Reflection.LockExtensions.Locking(System.Object,System.Action)
  commentId: M:Hybrid.Reflection.LockExtensions.Locking(System.Object,System.Action)
  isExternal: true
  name: Locking(Object, Action)
  nameWithType: LockExtensions.Locking(Object, Action)
  fullName: Hybrid.Reflection.LockExtensions.Locking(System.Object, System.Action)
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking(System.Object,System.Action)
    name: Locking
    nameWithType: LockExtensions.Locking
    fullName: Hybrid.Reflection.LockExtensions.Locking
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking(System.Object,System.Action)
    name: Locking
    nameWithType: LockExtensions.Locking
    fullName: Hybrid.Reflection.LockExtensions.Locking
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Reflection.LockExtensions
  commentId: T:Hybrid.Reflection.LockExtensions
  parent: Hybrid.Reflection
  name: LockExtensions
  nameWithType: LockExtensions
  fullName: Hybrid.Reflection.LockExtensions
- uid: Hybrid.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
  commentId: M:Hybrid.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
  isExternal: true
  name: Locking<T>(T, Action<T>)
  nameWithType: LockExtensions.Locking<T>(T, Action<T>)
  fullName: Hybrid.Reflection.LockExtensions.Locking<T>(T, System.Action<T>)
  nameWithType.vb: LockExtensions.Locking(Of T)(T, Action(Of T))
  fullName.vb: Hybrid.Reflection.LockExtensions.Locking(Of T)(T, System.Action(Of T))
  name.vb: Locking(Of T)(T, Action(Of T))
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
    name: Locking<T>
    nameWithType: LockExtensions.Locking<T>
    fullName: Hybrid.Reflection.LockExtensions.Locking<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
    name: Locking(Of T)
    nameWithType: LockExtensions.Locking(Of T)
    fullName: Hybrid.Reflection.LockExtensions.Locking(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
  commentId: M:Hybrid.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
  isExternal: true
  name: Locking<TResult>(Object, Func<TResult>)
  nameWithType: LockExtensions.Locking<TResult>(Object, Func<TResult>)
  fullName: Hybrid.Reflection.LockExtensions.Locking<TResult>(System.Object, System.Func<TResult>)
  nameWithType.vb: LockExtensions.Locking(Of TResult)(Object, Func(Of TResult))
  fullName.vb: Hybrid.Reflection.LockExtensions.Locking(Of TResult)(System.Object, System.Func(Of TResult))
  name.vb: Locking(Of TResult)(Object, Func(Of TResult))
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
    name: Locking<TResult>
    nameWithType: LockExtensions.Locking<TResult>
    fullName: Hybrid.Reflection.LockExtensions.Locking<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
    name: Locking(Of TResult)
    nameWithType: LockExtensions.Locking(Of TResult)
    fullName: Hybrid.Reflection.LockExtensions.Locking(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
  commentId: M:Hybrid.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
  isExternal: true
  name: Locking<TSource, TResult>(TSource, Func<TSource, TResult>)
  nameWithType: LockExtensions.Locking<TSource, TResult>(TSource, Func<TSource, TResult>)
  fullName: Hybrid.Reflection.LockExtensions.Locking<TSource, TResult>(TSource, System.Func<TSource, TResult>)
  nameWithType.vb: LockExtensions.Locking(Of TSource, TResult)(TSource, Func(Of TSource, TResult))
  fullName.vb: Hybrid.Reflection.LockExtensions.Locking(Of TSource, TResult)(TSource, System.Func(Of TSource, TResult))
  name.vb: Locking(Of TSource, TResult)(TSource, Func(Of TSource, TResult))
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
    name: Locking<TSource, TResult>
    nameWithType: LockExtensions.Locking<TSource, TResult>
    fullName: Hybrid.Reflection.LockExtensions.Locking<TSource, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
    name: Locking(Of TSource, TResult)
    nameWithType: LockExtensions.Locking(Of TSource, TResult)
    fullName: Hybrid.Reflection.LockExtensions.Locking(Of TSource, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2(``0)
  commentId: M:Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2(``0)
  name: CheckICreatedTime<TEntity, TKey>(TEntity)
  nameWithType: EntityExtensions.CheckICreatedTime<TEntity, TKey>(TEntity)
  fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime<TEntity, TKey>(TEntity)
  nameWithType.vb: EntityExtensions.CheckICreatedTime(Of TEntity, TKey)(TEntity)
  fullName.vb: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime(Of TEntity, TKey)(TEntity)
  name.vb: CheckICreatedTime(Of TEntity, TKey)(TEntity)
  spec.csharp:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2(``0)
    name: CheckICreatedTime<TEntity, TKey>
    nameWithType: EntityExtensions.CheckICreatedTime<TEntity, TKey>
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime<TEntity, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2(``0)
    name: CheckICreatedTime(Of TEntity, TKey)
    nameWithType: EntityExtensions.CheckICreatedTime(Of TEntity, TKey)
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime(Of TEntity, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Domain.Entities.EntityExtensions
  commentId: T:Hybrid.Domain.Entities.EntityExtensions
  parent: Hybrid.Domain.Entities
  name: EntityExtensions
  nameWithType: EntityExtensions
  fullName: Hybrid.Domain.Entities.EntityExtensions
- uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
  commentId: M:Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
  isExternal: true
  name: CheckICreationAudited<TEntity, TKey, TUserKey>(TEntity, IPrincipal)
  nameWithType: EntityExtensions.CheckICreationAudited<TEntity, TKey, TUserKey>(TEntity, IPrincipal)
  fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited<TEntity, TKey, TUserKey>(TEntity, System.Security.Principal.IPrincipal)
  nameWithType.vb: EntityExtensions.CheckICreationAudited(Of TEntity, TKey, TUserKey)(TEntity, IPrincipal)
  fullName.vb: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited(Of TEntity, TKey, TUserKey)(TEntity, System.Security.Principal.IPrincipal)
  name.vb: CheckICreationAudited(Of TEntity, TKey, TUserKey)(TEntity, IPrincipal)
  spec.csharp:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
    name: CheckICreationAudited<TEntity, TKey, TUserKey>
    nameWithType: EntityExtensions.CheckICreationAudited<TEntity, TKey, TUserKey>
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited<TEntity, TKey, TUserKey>
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
    name: CheckICreationAudited(Of TEntity, TKey, TUserKey)
    nameWithType: EntityExtensions.CheckICreationAudited(Of TEntity, TKey, TUserKey)
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited(Of TEntity, TKey, TUserKey)
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
  commentId: M:Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
  isExternal: true
  name: CheckIUpdateAudited<TEntity, TKey, TUserKey>(TEntity, IPrincipal)
  nameWithType: EntityExtensions.CheckIUpdateAudited<TEntity, TKey, TUserKey>(TEntity, IPrincipal)
  fullName: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited<TEntity, TKey, TUserKey>(TEntity, System.Security.Principal.IPrincipal)
  nameWithType.vb: EntityExtensions.CheckIUpdateAudited(Of TEntity, TKey, TUserKey)(TEntity, IPrincipal)
  fullName.vb: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited(Of TEntity, TKey, TUserKey)(TEntity, System.Security.Principal.IPrincipal)
  name.vb: CheckIUpdateAudited(Of TEntity, TKey, TUserKey)(TEntity, IPrincipal)
  spec.csharp:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
    name: CheckIUpdateAudited<TEntity, TKey, TUserKey>
    nameWithType: EntityExtensions.CheckIUpdateAudited<TEntity, TKey, TUserKey>
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited<TEntity, TKey, TUserKey>
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
    name: CheckIUpdateAudited(Of TEntity, TKey, TUserKey)
    nameWithType: EntityExtensions.CheckIUpdateAudited(Of TEntity, TKey, TUserKey)
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited(Of TEntity, TKey, TUserKey)
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions
  commentId: N:Hybrid.Extensions
  name: Hybrid.Extensions
  nameWithType: Hybrid.Extensions
  fullName: Hybrid.Extensions
- uid: Hybrid.Json
  commentId: N:Hybrid.Json
  name: Hybrid.Json
  nameWithType: Hybrid.Json
  fullName: Hybrid.Json
- uid: Hybrid.Mapping
  commentId: N:Hybrid.Mapping
  name: Hybrid.Mapping
  nameWithType: Hybrid.Mapping
  fullName: Hybrid.Mapping
- uid: Hybrid.Reflection
  commentId: N:Hybrid.Reflection
  name: Hybrid.Reflection
  nameWithType: Hybrid.Reflection
  fullName: Hybrid.Reflection
- uid: Hybrid.Domain.Entities
  commentId: N:Hybrid.Domain.Entities
  name: Hybrid.Domain.Entities
  nameWithType: Hybrid.Domain.Entities
  fullName: Hybrid.Domain.Entities
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12
  commentId: T:Hybrid.Zero.Identity.Entities.UserStoreBase`12
  name: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey)
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey)
  name.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey)
  spec.csharp:
  - uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12
    name: UserStoreBase
    nameWithType: UserStoreBase
    fullName: Hybrid.Zero.Identity.Entities.UserStoreBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserKey
    nameWithType: TUserKey
    fullName: TUserKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserClaim
    nameWithType: TUserClaim
    fullName: TUserClaim
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserClaimKey
    nameWithType: TUserClaimKey
    fullName: TUserClaimKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserLogin
    nameWithType: TUserLogin
    fullName: TUserLogin
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserLoginKey
    nameWithType: TUserLoginKey
    fullName: TUserLoginKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserToken
    nameWithType: TUserToken
    fullName: TUserToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserTokenKey
    nameWithType: TUserTokenKey
    fullName: TUserTokenKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserRole
    nameWithType: TUserRole
    fullName: TUserRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserRoleKey
    nameWithType: TUserRoleKey
    fullName: TUserRoleKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12
    name: UserStoreBase
    nameWithType: UserStoreBase
    fullName: Hybrid.Zero.Identity.Entities.UserStoreBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserKey
    nameWithType: TUserKey
    fullName: TUserKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserClaim
    nameWithType: TUserClaim
    fullName: TUserClaim
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserClaimKey
    nameWithType: TUserClaimKey
    fullName: TUserClaimKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserLogin
    nameWithType: TUserLogin
    fullName: TUserLogin
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserLoginKey
    nameWithType: TUserLoginKey
    fullName: TUserLoginKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserToken
    nameWithType: TUserToken
    fullName: TUserToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserTokenKey
    nameWithType: TUserTokenKey
    fullName: TUserTokenKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserRole
    nameWithType: TUserRole
    fullName: TUserRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserRoleKey
    nameWithType: TUserRoleKey
    fullName: TUserRoleKey
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.#ctor*
  commentId: Overload:Hybrid.Zero.Identity.Entities.UserStoreBase`12.#ctor
  name: UserStoreBase
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.UserStoreBase
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.UserStoreBase
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).UserStoreBase
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).UserStoreBase
- uid: Hybrid.Domain.Repositories.IRepository{{TUser},{TUserKey}}
  commentId: T:Hybrid.Domain.Repositories.IRepository{`16,`17}
  parent: Hybrid.Domain.Repositories
  definition: Hybrid.Domain.Repositories.IRepository`2
  name: IRepository<TUser, TUserKey>
  nameWithType: IRepository<TUser, TUserKey>
  fullName: Hybrid.Domain.Repositories.IRepository<TUser, TUserKey>
  nameWithType.vb: IRepository(Of TUser, TUserKey)
  fullName.vb: Hybrid.Domain.Repositories.IRepository(Of TUser, TUserKey)
  name.vb: IRepository(Of TUser, TUserKey)
  spec.csharp:
  - uid: Hybrid.Domain.Repositories.IRepository`2
    name: IRepository
    nameWithType: IRepository
    fullName: Hybrid.Domain.Repositories.IRepository
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserKey
    nameWithType: TUserKey
    fullName: TUserKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Hybrid.Domain.Repositories.IRepository`2
    name: IRepository
    nameWithType: IRepository
    fullName: Hybrid.Domain.Repositories.IRepository
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserKey
    nameWithType: TUserKey
    fullName: TUserKey
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Domain.Repositories.IRepository{{TUserLogin},{TUserLoginKey}}
  commentId: T:Hybrid.Domain.Repositories.IRepository{`4,`5}
  parent: Hybrid.Domain.Repositories
  definition: Hybrid.Domain.Repositories.IRepository`2
  name: IRepository<TUserLogin, TUserLoginKey>
  nameWithType: IRepository<TUserLogin, TUserLoginKey>
  fullName: Hybrid.Domain.Repositories.IRepository<TUserLogin, TUserLoginKey>
  nameWithType.vb: IRepository(Of TUserLogin, TUserLoginKey)
  fullName.vb: Hybrid.Domain.Repositories.IRepository(Of TUserLogin, TUserLoginKey)
  name.vb: IRepository(Of TUserLogin, TUserLoginKey)
  spec.csharp:
  - uid: Hybrid.Domain.Repositories.IRepository`2
    name: IRepository
    nameWithType: IRepository
    fullName: Hybrid.Domain.Repositories.IRepository
  - name: <
    nameWithType: <
    fullName: <
  - name: TUserLogin
    nameWithType: TUserLogin
    fullName: TUserLogin
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserLoginKey
    nameWithType: TUserLoginKey
    fullName: TUserLoginKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Hybrid.Domain.Repositories.IRepository`2
    name: IRepository
    nameWithType: IRepository
    fullName: Hybrid.Domain.Repositories.IRepository
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUserLogin
    nameWithType: TUserLogin
    fullName: TUserLogin
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserLoginKey
    nameWithType: TUserLoginKey
    fullName: TUserLoginKey
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Domain.Repositories.IRepository{{TUserClaim},{TUserClaimKey}}
  commentId: T:Hybrid.Domain.Repositories.IRepository{`2,`3}
  parent: Hybrid.Domain.Repositories
  definition: Hybrid.Domain.Repositories.IRepository`2
  name: IRepository<TUserClaim, TUserClaimKey>
  nameWithType: IRepository<TUserClaim, TUserClaimKey>
  fullName: Hybrid.Domain.Repositories.IRepository<TUserClaim, TUserClaimKey>
  nameWithType.vb: IRepository(Of TUserClaim, TUserClaimKey)
  fullName.vb: Hybrid.Domain.Repositories.IRepository(Of TUserClaim, TUserClaimKey)
  name.vb: IRepository(Of TUserClaim, TUserClaimKey)
  spec.csharp:
  - uid: Hybrid.Domain.Repositories.IRepository`2
    name: IRepository
    nameWithType: IRepository
    fullName: Hybrid.Domain.Repositories.IRepository
  - name: <
    nameWithType: <
    fullName: <
  - name: TUserClaim
    nameWithType: TUserClaim
    fullName: TUserClaim
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserClaimKey
    nameWithType: TUserClaimKey
    fullName: TUserClaimKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Hybrid.Domain.Repositories.IRepository`2
    name: IRepository
    nameWithType: IRepository
    fullName: Hybrid.Domain.Repositories.IRepository
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUserClaim
    nameWithType: TUserClaim
    fullName: TUserClaim
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserClaimKey
    nameWithType: TUserClaimKey
    fullName: TUserClaimKey
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Domain.Repositories.IRepository{{TUserToken},{TUserTokenKey}}
  commentId: T:Hybrid.Domain.Repositories.IRepository{`6,`7}
  parent: Hybrid.Domain.Repositories
  definition: Hybrid.Domain.Repositories.IRepository`2
  name: IRepository<TUserToken, TUserTokenKey>
  nameWithType: IRepository<TUserToken, TUserTokenKey>
  fullName: Hybrid.Domain.Repositories.IRepository<TUserToken, TUserTokenKey>
  nameWithType.vb: IRepository(Of TUserToken, TUserTokenKey)
  fullName.vb: Hybrid.Domain.Repositories.IRepository(Of TUserToken, TUserTokenKey)
  name.vb: IRepository(Of TUserToken, TUserTokenKey)
  spec.csharp:
  - uid: Hybrid.Domain.Repositories.IRepository`2
    name: IRepository
    nameWithType: IRepository
    fullName: Hybrid.Domain.Repositories.IRepository
  - name: <
    nameWithType: <
    fullName: <
  - name: TUserToken
    nameWithType: TUserToken
    fullName: TUserToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserTokenKey
    nameWithType: TUserTokenKey
    fullName: TUserTokenKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Hybrid.Domain.Repositories.IRepository`2
    name: IRepository
    nameWithType: IRepository
    fullName: Hybrid.Domain.Repositories.IRepository
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUserToken
    nameWithType: TUserToken
    fullName: TUserToken
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserTokenKey
    nameWithType: TUserTokenKey
    fullName: TUserTokenKey
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Domain.Repositories.IRepository{{TRole},{TRoleKey}}
  commentId: T:Hybrid.Domain.Repositories.IRepository{`14,`15}
  parent: Hybrid.Domain.Repositories
  definition: Hybrid.Domain.Repositories.IRepository`2
  name: IRepository<TRole, TRoleKey>
  nameWithType: IRepository<TRole, TRoleKey>
  fullName: Hybrid.Domain.Repositories.IRepository<TRole, TRoleKey>
  nameWithType.vb: IRepository(Of TRole, TRoleKey)
  fullName.vb: Hybrid.Domain.Repositories.IRepository(Of TRole, TRoleKey)
  name.vb: IRepository(Of TRole, TRoleKey)
  spec.csharp:
  - uid: Hybrid.Domain.Repositories.IRepository`2
    name: IRepository
    nameWithType: IRepository
    fullName: Hybrid.Domain.Repositories.IRepository
  - name: <
    nameWithType: <
    fullName: <
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Hybrid.Domain.Repositories.IRepository`2
    name: IRepository
    nameWithType: IRepository
    fullName: Hybrid.Domain.Repositories.IRepository
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Domain.Repositories.IRepository{{TUserRole},{TUserRoleKey}}
  commentId: T:Hybrid.Domain.Repositories.IRepository{`12,`13}
  parent: Hybrid.Domain.Repositories
  definition: Hybrid.Domain.Repositories.IRepository`2
  name: IRepository<TUserRole, TUserRoleKey>
  nameWithType: IRepository<TUserRole, TUserRoleKey>
  fullName: Hybrid.Domain.Repositories.IRepository<TUserRole, TUserRoleKey>
  nameWithType.vb: IRepository(Of TUserRole, TUserRoleKey)
  fullName.vb: Hybrid.Domain.Repositories.IRepository(Of TUserRole, TUserRoleKey)
  name.vb: IRepository(Of TUserRole, TUserRoleKey)
  spec.csharp:
  - uid: Hybrid.Domain.Repositories.IRepository`2
    name: IRepository
    nameWithType: IRepository
    fullName: Hybrid.Domain.Repositories.IRepository
  - name: <
    nameWithType: <
    fullName: <
  - name: TUserRole
    nameWithType: TUserRole
    fullName: TUserRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserRoleKey
    nameWithType: TUserRoleKey
    fullName: TUserRoleKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Hybrid.Domain.Repositories.IRepository`2
    name: IRepository
    nameWithType: IRepository
    fullName: Hybrid.Domain.Repositories.IRepository
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUserRole
    nameWithType: TUserRole
    fullName: TUserRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserRoleKey
    nameWithType: TUserRoleKey
    fullName: TUserRoleKey
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EventBuses.IEventBus
  commentId: T:Hybrid.EventBuses.IEventBus
  parent: Hybrid.EventBuses
  name: IEventBus
  nameWithType: IEventBus
  fullName: Hybrid.EventBuses.IEventBus
- uid: Hybrid.Domain.Repositories.IRepository`2
  commentId: T:Hybrid.Domain.Repositories.IRepository`2
  name: IRepository<TEntity, TKey>
  nameWithType: IRepository<TEntity, TKey>
  fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>
  nameWithType.vb: IRepository(Of TEntity, TKey)
  fullName.vb: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey)
  name.vb: IRepository(Of TEntity, TKey)
  spec.csharp:
  - uid: Hybrid.Domain.Repositories.IRepository`2
    name: IRepository
    nameWithType: IRepository
    fullName: Hybrid.Domain.Repositories.IRepository
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Hybrid.Domain.Repositories.IRepository`2
    name: IRepository
    nameWithType: IRepository
    fullName: Hybrid.Domain.Repositories.IRepository
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Domain.Repositories
  commentId: N:Hybrid.Domain.Repositories
  name: Hybrid.Domain.Repositories
  nameWithType: Hybrid.Domain.Repositories
  fullName: Hybrid.Domain.Repositories
- uid: Hybrid.EventBuses
  commentId: N:Hybrid.EventBuses
  name: Hybrid.EventBuses
  nameWithType: Hybrid.EventBuses
  fullName: Hybrid.EventBuses
- uid: System.Linq.IQueryable`1
  commentId: T:System.Linq.IQueryable`1
  isExternal: true
  name: IQueryable<T>
  nameWithType: IQueryable<T>
  fullName: System.Linq.IQueryable<T>
  nameWithType.vb: IQueryable(Of T)
  fullName.vb: System.Linq.IQueryable(Of T)
  name.vb: IQueryable(Of T)
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.Users*
  commentId: Overload:Hybrid.Zero.Identity.Entities.UserStoreBase`12.Users
  name: Users
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.Users
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.Users
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).Users
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).Users
- uid: Microsoft.AspNetCore.Identity.IQueryableUserStore{{TUser}}.Users
  commentId: P:Microsoft.AspNetCore.Identity.IQueryableUserStore{`0}.Users
  parent: Microsoft.AspNetCore.Identity.IQueryableUserStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IQueryableUserStore`1.Users
  name: Users
  nameWithType: IQueryableUserStore<TUser>.Users
  fullName: Microsoft.AspNetCore.Identity.IQueryableUserStore<TUser>.Users
  nameWithType.vb: IQueryableUserStore(Of TUser).Users
  fullName.vb: Microsoft.AspNetCore.Identity.IQueryableUserStore(Of TUser).Users
- uid: System.Linq.IQueryable{{TUser}}
  commentId: T:System.Linq.IQueryable{`0}
  parent: System.Linq
  definition: System.Linq.IQueryable`1
  name: IQueryable<TUser>
  nameWithType: IQueryable<TUser>
  fullName: System.Linq.IQueryable<TUser>
  nameWithType.vb: IQueryable(Of TUser)
  fullName.vb: System.Linq.IQueryable(Of TUser)
  name.vb: IQueryable(Of TUser)
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IQueryableUserStore`1.Users
  commentId: P:Microsoft.AspNetCore.Identity.IQueryableUserStore`1.Users
  isExternal: true
  name: Users
  nameWithType: IQueryableUserStore<TUser>.Users
  fullName: Microsoft.AspNetCore.Identity.IQueryableUserStore<TUser>.Users
  nameWithType.vb: IQueryableUserStore(Of TUser).Users
  fullName.vb: Microsoft.AspNetCore.Identity.IQueryableUserStore(Of TUser).Users
- uid: System.Linq
  commentId: N:System.Linq
  isExternal: true
  name: System.Linq
  nameWithType: System.Linq
  fullName: System.Linq
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.Dispose*
  commentId: Overload:Hybrid.Zero.Identity.Entities.UserStoreBase`12.Dispose
  name: Dispose
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.Dispose
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.Dispose
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).Dispose
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).Dispose
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetUserIdAsync*
  commentId: Overload:Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetUserIdAsync
  name: GetUserIdAsync
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.GetUserIdAsync
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.GetUserIdAsync
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).GetUserIdAsync
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).GetUserIdAsync
- uid: Microsoft.AspNetCore.Identity.IUserStore{{TUser}}.GetUserIdAsync({TUser},System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserStore{`0}.GetUserIdAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserStore`1.GetUserIdAsync(`0,System.Threading.CancellationToken)
  name: GetUserIdAsync(TUser, CancellationToken)
  nameWithType: IUserStore<TUser>.GetUserIdAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.GetUserIdAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserStore(Of TUser).GetUserIdAsync(TUser, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).GetUserIdAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1.GetUserIdAsync(`0,System.Threading.CancellationToken)
    name: GetUserIdAsync
    nameWithType: IUserStore<TUser>.GetUserIdAsync
    fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.GetUserIdAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1.GetUserIdAsync(`0,System.Threading.CancellationToken)
    name: GetUserIdAsync
    nameWithType: IUserStore(Of TUser).GetUserIdAsync
    fullName: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).GetUserIdAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TUser}'
  commentId: '!:TUser'
  definition: TUser
  name: TUser
  nameWithType: TUser
  fullName: TUser
- uid: System.Threading.Tasks.Task{System.String}
  commentId: T:System.Threading.Tasks.Task{System.String}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<String>
  nameWithType: Task<String>
  fullName: System.Threading.Tasks.Task<System.String>
  nameWithType.vb: Task(Of String)
  fullName.vb: System.Threading.Tasks.Task(Of System.String)
  name.vb: Task(Of String)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: true
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Microsoft.AspNetCore.Identity.IUserStore`1.GetUserIdAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserStore`1.GetUserIdAsync(`0,System.Threading.CancellationToken)
  isExternal: true
  name: GetUserIdAsync(TUser, CancellationToken)
  nameWithType: IUserStore<TUser>.GetUserIdAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.GetUserIdAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserStore(Of TUser).GetUserIdAsync(TUser, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).GetUserIdAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1.GetUserIdAsync(`0,System.Threading.CancellationToken)
    name: GetUserIdAsync
    nameWithType: IUserStore<TUser>.GetUserIdAsync
    fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.GetUserIdAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1.GetUserIdAsync(`0,System.Threading.CancellationToken)
    name: GetUserIdAsync
    nameWithType: IUserStore(Of TUser).GetUserIdAsync
    fullName: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).GetUserIdAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TUser
  name: TUser
  nameWithType: TUser
  fullName: TUser
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetUserNameAsync*
  commentId: Overload:Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetUserNameAsync
  name: GetUserNameAsync
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.GetUserNameAsync
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.GetUserNameAsync
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).GetUserNameAsync
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).GetUserNameAsync
- uid: Microsoft.AspNetCore.Identity.IUserStore{{TUser}}.GetUserNameAsync({TUser},System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserStore{`0}.GetUserNameAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserStore`1.GetUserNameAsync(`0,System.Threading.CancellationToken)
  name: GetUserNameAsync(TUser, CancellationToken)
  nameWithType: IUserStore<TUser>.GetUserNameAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.GetUserNameAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserStore(Of TUser).GetUserNameAsync(TUser, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).GetUserNameAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1.GetUserNameAsync(`0,System.Threading.CancellationToken)
    name: GetUserNameAsync
    nameWithType: IUserStore<TUser>.GetUserNameAsync
    fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.GetUserNameAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1.GetUserNameAsync(`0,System.Threading.CancellationToken)
    name: GetUserNameAsync
    nameWithType: IUserStore(Of TUser).GetUserNameAsync
    fullName: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).GetUserNameAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserStore`1.GetUserNameAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserStore`1.GetUserNameAsync(`0,System.Threading.CancellationToken)
  isExternal: true
  name: GetUserNameAsync(TUser, CancellationToken)
  nameWithType: IUserStore<TUser>.GetUserNameAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.GetUserNameAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserStore(Of TUser).GetUserNameAsync(TUser, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).GetUserNameAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1.GetUserNameAsync(`0,System.Threading.CancellationToken)
    name: GetUserNameAsync
    nameWithType: IUserStore<TUser>.GetUserNameAsync
    fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.GetUserNameAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1.GetUserNameAsync(`0,System.Threading.CancellationToken)
    name: GetUserNameAsync
    nameWithType: IUserStore(Of TUser).GetUserNameAsync
    fullName: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).GetUserNameAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.SetUserNameAsync*
  commentId: Overload:Hybrid.Zero.Identity.Entities.UserStoreBase`12.SetUserNameAsync
  name: SetUserNameAsync
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.SetUserNameAsync
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.SetUserNameAsync
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).SetUserNameAsync
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).SetUserNameAsync
- uid: Microsoft.AspNetCore.Identity.IUserStore{{TUser}}.SetUserNameAsync({TUser},System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserStore{`0}.SetUserNameAsync(`0,System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserStore`1.SetUserNameAsync(`0,System.String,System.Threading.CancellationToken)
  name: SetUserNameAsync(TUser, String, CancellationToken)
  nameWithType: IUserStore<TUser>.SetUserNameAsync(TUser, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.SetUserNameAsync(TUser, System.String, System.Threading.CancellationToken)
  nameWithType.vb: IUserStore(Of TUser).SetUserNameAsync(TUser, String, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).SetUserNameAsync(TUser, System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1.SetUserNameAsync(`0,System.String,System.Threading.CancellationToken)
    name: SetUserNameAsync
    nameWithType: IUserStore<TUser>.SetUserNameAsync
    fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.SetUserNameAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1.SetUserNameAsync(`0,System.String,System.Threading.CancellationToken)
    name: SetUserNameAsync
    nameWithType: IUserStore(Of TUser).SetUserNameAsync
    fullName: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).SetUserNameAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.AspNetCore.Identity.IUserStore`1.SetUserNameAsync(`0,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserStore`1.SetUserNameAsync(`0,System.String,System.Threading.CancellationToken)
  isExternal: true
  name: SetUserNameAsync(TUser, String, CancellationToken)
  nameWithType: IUserStore<TUser>.SetUserNameAsync(TUser, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.SetUserNameAsync(TUser, System.String, System.Threading.CancellationToken)
  nameWithType.vb: IUserStore(Of TUser).SetUserNameAsync(TUser, String, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).SetUserNameAsync(TUser, System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1.SetUserNameAsync(`0,System.String,System.Threading.CancellationToken)
    name: SetUserNameAsync
    nameWithType: IUserStore<TUser>.SetUserNameAsync
    fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.SetUserNameAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1.SetUserNameAsync(`0,System.String,System.Threading.CancellationToken)
    name: SetUserNameAsync
    nameWithType: IUserStore(Of TUser).SetUserNameAsync
    fullName: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).SetUserNameAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetNormalizedUserNameAsync*
  commentId: Overload:Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetNormalizedUserNameAsync
  name: GetNormalizedUserNameAsync
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.GetNormalizedUserNameAsync
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.GetNormalizedUserNameAsync
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).GetNormalizedUserNameAsync
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).GetNormalizedUserNameAsync
- uid: Microsoft.AspNetCore.Identity.IUserStore{{TUser}}.GetNormalizedUserNameAsync({TUser},System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserStore{`0}.GetNormalizedUserNameAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserStore`1.GetNormalizedUserNameAsync(`0,System.Threading.CancellationToken)
  name: GetNormalizedUserNameAsync(TUser, CancellationToken)
  nameWithType: IUserStore<TUser>.GetNormalizedUserNameAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.GetNormalizedUserNameAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserStore(Of TUser).GetNormalizedUserNameAsync(TUser, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).GetNormalizedUserNameAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1.GetNormalizedUserNameAsync(`0,System.Threading.CancellationToken)
    name: GetNormalizedUserNameAsync
    nameWithType: IUserStore<TUser>.GetNormalizedUserNameAsync
    fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.GetNormalizedUserNameAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1.GetNormalizedUserNameAsync(`0,System.Threading.CancellationToken)
    name: GetNormalizedUserNameAsync
    nameWithType: IUserStore(Of TUser).GetNormalizedUserNameAsync
    fullName: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).GetNormalizedUserNameAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserStore`1.GetNormalizedUserNameAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserStore`1.GetNormalizedUserNameAsync(`0,System.Threading.CancellationToken)
  isExternal: true
  name: GetNormalizedUserNameAsync(TUser, CancellationToken)
  nameWithType: IUserStore<TUser>.GetNormalizedUserNameAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.GetNormalizedUserNameAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserStore(Of TUser).GetNormalizedUserNameAsync(TUser, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).GetNormalizedUserNameAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1.GetNormalizedUserNameAsync(`0,System.Threading.CancellationToken)
    name: GetNormalizedUserNameAsync
    nameWithType: IUserStore<TUser>.GetNormalizedUserNameAsync
    fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.GetNormalizedUserNameAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1.GetNormalizedUserNameAsync(`0,System.Threading.CancellationToken)
    name: GetNormalizedUserNameAsync
    nameWithType: IUserStore(Of TUser).GetNormalizedUserNameAsync
    fullName: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).GetNormalizedUserNameAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.SetNormalizedUserNameAsync*
  commentId: Overload:Hybrid.Zero.Identity.Entities.UserStoreBase`12.SetNormalizedUserNameAsync
  name: SetNormalizedUserNameAsync
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.SetNormalizedUserNameAsync
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.SetNormalizedUserNameAsync
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).SetNormalizedUserNameAsync
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).SetNormalizedUserNameAsync
- uid: Microsoft.AspNetCore.Identity.IUserStore{{TUser}}.SetNormalizedUserNameAsync({TUser},System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserStore{`0}.SetNormalizedUserNameAsync(`0,System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserStore`1.SetNormalizedUserNameAsync(`0,System.String,System.Threading.CancellationToken)
  name: SetNormalizedUserNameAsync(TUser, String, CancellationToken)
  nameWithType: IUserStore<TUser>.SetNormalizedUserNameAsync(TUser, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.SetNormalizedUserNameAsync(TUser, System.String, System.Threading.CancellationToken)
  nameWithType.vb: IUserStore(Of TUser).SetNormalizedUserNameAsync(TUser, String, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).SetNormalizedUserNameAsync(TUser, System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1.SetNormalizedUserNameAsync(`0,System.String,System.Threading.CancellationToken)
    name: SetNormalizedUserNameAsync
    nameWithType: IUserStore<TUser>.SetNormalizedUserNameAsync
    fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.SetNormalizedUserNameAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1.SetNormalizedUserNameAsync(`0,System.String,System.Threading.CancellationToken)
    name: SetNormalizedUserNameAsync
    nameWithType: IUserStore(Of TUser).SetNormalizedUserNameAsync
    fullName: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).SetNormalizedUserNameAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserStore`1.SetNormalizedUserNameAsync(`0,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserStore`1.SetNormalizedUserNameAsync(`0,System.String,System.Threading.CancellationToken)
  isExternal: true
  name: SetNormalizedUserNameAsync(TUser, String, CancellationToken)
  nameWithType: IUserStore<TUser>.SetNormalizedUserNameAsync(TUser, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.SetNormalizedUserNameAsync(TUser, System.String, System.Threading.CancellationToken)
  nameWithType.vb: IUserStore(Of TUser).SetNormalizedUserNameAsync(TUser, String, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).SetNormalizedUserNameAsync(TUser, System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1.SetNormalizedUserNameAsync(`0,System.String,System.Threading.CancellationToken)
    name: SetNormalizedUserNameAsync
    nameWithType: IUserStore<TUser>.SetNormalizedUserNameAsync
    fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.SetNormalizedUserNameAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1.SetNormalizedUserNameAsync(`0,System.String,System.Threading.CancellationToken)
    name: SetNormalizedUserNameAsync
    nameWithType: IUserStore(Of TUser).SetNormalizedUserNameAsync
    fullName: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).SetNormalizedUserNameAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IdentityResult
  commentId: T:Microsoft.AspNetCore.Identity.IdentityResult
  parent: Microsoft.AspNetCore.Identity
  isExternal: true
  name: IdentityResult
  nameWithType: IdentityResult
  fullName: Microsoft.AspNetCore.Identity.IdentityResult
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.CreateAsync*
  commentId: Overload:Hybrid.Zero.Identity.Entities.UserStoreBase`12.CreateAsync
  name: CreateAsync
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.CreateAsync
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.CreateAsync
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).CreateAsync
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).CreateAsync
- uid: Microsoft.AspNetCore.Identity.IUserStore{{TUser}}.CreateAsync({TUser},System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserStore{`0}.CreateAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserStore`1.CreateAsync(`0,System.Threading.CancellationToken)
  name: CreateAsync(TUser, CancellationToken)
  nameWithType: IUserStore<TUser>.CreateAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.CreateAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserStore(Of TUser).CreateAsync(TUser, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).CreateAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1.CreateAsync(`0,System.Threading.CancellationToken)
    name: CreateAsync
    nameWithType: IUserStore<TUser>.CreateAsync
    fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.CreateAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1.CreateAsync(`0,System.Threading.CancellationToken)
    name: CreateAsync
    nameWithType: IUserStore(Of TUser).CreateAsync
    fullName: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).CreateAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{Microsoft.AspNetCore.Identity.IdentityResult}
  commentId: T:System.Threading.Tasks.Task{Microsoft.AspNetCore.Identity.IdentityResult}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IdentityResult>
  nameWithType: Task<IdentityResult>
  fullName: System.Threading.Tasks.Task<Microsoft.AspNetCore.Identity.IdentityResult>
  nameWithType.vb: Task(Of IdentityResult)
  fullName.vb: System.Threading.Tasks.Task(Of Microsoft.AspNetCore.Identity.IdentityResult)
  name.vb: Task(Of IdentityResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.AspNetCore.Identity.IdentityResult
    name: IdentityResult
    nameWithType: IdentityResult
    fullName: Microsoft.AspNetCore.Identity.IdentityResult
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.AspNetCore.Identity.IdentityResult
    name: IdentityResult
    nameWithType: IdentityResult
    fullName: Microsoft.AspNetCore.Identity.IdentityResult
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserStore`1.CreateAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserStore`1.CreateAsync(`0,System.Threading.CancellationToken)
  isExternal: true
  name: CreateAsync(TUser, CancellationToken)
  nameWithType: IUserStore<TUser>.CreateAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.CreateAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserStore(Of TUser).CreateAsync(TUser, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).CreateAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1.CreateAsync(`0,System.Threading.CancellationToken)
    name: CreateAsync
    nameWithType: IUserStore<TUser>.CreateAsync
    fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.CreateAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1.CreateAsync(`0,System.Threading.CancellationToken)
    name: CreateAsync
    nameWithType: IUserStore(Of TUser).CreateAsync
    fullName: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).CreateAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.UpdateAsync*
  commentId: Overload:Hybrid.Zero.Identity.Entities.UserStoreBase`12.UpdateAsync
  name: UpdateAsync
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.UpdateAsync
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.UpdateAsync
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).UpdateAsync
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).UpdateAsync
- uid: Microsoft.AspNetCore.Identity.IUserStore{{TUser}}.UpdateAsync({TUser},System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserStore{`0}.UpdateAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserStore`1.UpdateAsync(`0,System.Threading.CancellationToken)
  name: UpdateAsync(TUser, CancellationToken)
  nameWithType: IUserStore<TUser>.UpdateAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.UpdateAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserStore(Of TUser).UpdateAsync(TUser, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).UpdateAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1.UpdateAsync(`0,System.Threading.CancellationToken)
    name: UpdateAsync
    nameWithType: IUserStore<TUser>.UpdateAsync
    fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.UpdateAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1.UpdateAsync(`0,System.Threading.CancellationToken)
    name: UpdateAsync
    nameWithType: IUserStore(Of TUser).UpdateAsync
    fullName: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).UpdateAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserStore`1.UpdateAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserStore`1.UpdateAsync(`0,System.Threading.CancellationToken)
  isExternal: true
  name: UpdateAsync(TUser, CancellationToken)
  nameWithType: IUserStore<TUser>.UpdateAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.UpdateAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserStore(Of TUser).UpdateAsync(TUser, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).UpdateAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1.UpdateAsync(`0,System.Threading.CancellationToken)
    name: UpdateAsync
    nameWithType: IUserStore<TUser>.UpdateAsync
    fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.UpdateAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1.UpdateAsync(`0,System.Threading.CancellationToken)
    name: UpdateAsync
    nameWithType: IUserStore(Of TUser).UpdateAsync
    fullName: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).UpdateAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.DeleteAsync*
  commentId: Overload:Hybrid.Zero.Identity.Entities.UserStoreBase`12.DeleteAsync
  name: DeleteAsync
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.DeleteAsync
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.DeleteAsync
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).DeleteAsync
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).DeleteAsync
- uid: Microsoft.AspNetCore.Identity.IUserStore{{TUser}}.DeleteAsync({TUser},System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserStore{`0}.DeleteAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserStore`1.DeleteAsync(`0,System.Threading.CancellationToken)
  name: DeleteAsync(TUser, CancellationToken)
  nameWithType: IUserStore<TUser>.DeleteAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.DeleteAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserStore(Of TUser).DeleteAsync(TUser, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).DeleteAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1.DeleteAsync(`0,System.Threading.CancellationToken)
    name: DeleteAsync
    nameWithType: IUserStore<TUser>.DeleteAsync
    fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.DeleteAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1.DeleteAsync(`0,System.Threading.CancellationToken)
    name: DeleteAsync
    nameWithType: IUserStore(Of TUser).DeleteAsync
    fullName: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).DeleteAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserStore`1.DeleteAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserStore`1.DeleteAsync(`0,System.Threading.CancellationToken)
  isExternal: true
  name: DeleteAsync(TUser, CancellationToken)
  nameWithType: IUserStore<TUser>.DeleteAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.DeleteAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserStore(Of TUser).DeleteAsync(TUser, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).DeleteAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1.DeleteAsync(`0,System.Threading.CancellationToken)
    name: DeleteAsync
    nameWithType: IUserStore<TUser>.DeleteAsync
    fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.DeleteAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1.DeleteAsync(`0,System.Threading.CancellationToken)
    name: DeleteAsync
    nameWithType: IUserStore(Of TUser).DeleteAsync
    fullName: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).DeleteAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.FindByIdAsync*
  commentId: Overload:Hybrid.Zero.Identity.Entities.UserStoreBase`12.FindByIdAsync
  name: FindByIdAsync
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.FindByIdAsync
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.FindByIdAsync
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).FindByIdAsync
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).FindByIdAsync
- uid: Microsoft.AspNetCore.Identity.IUserStore{{TUser}}.FindByIdAsync(System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserStore{`0}.FindByIdAsync(System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserStore`1.FindByIdAsync(System.String,System.Threading.CancellationToken)
  name: FindByIdAsync(String, CancellationToken)
  nameWithType: IUserStore<TUser>.FindByIdAsync(String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.FindByIdAsync(System.String, System.Threading.CancellationToken)
  nameWithType.vb: IUserStore(Of TUser).FindByIdAsync(String, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).FindByIdAsync(System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1.FindByIdAsync(System.String,System.Threading.CancellationToken)
    name: FindByIdAsync
    nameWithType: IUserStore<TUser>.FindByIdAsync
    fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.FindByIdAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1.FindByIdAsync(System.String,System.Threading.CancellationToken)
    name: FindByIdAsync
    nameWithType: IUserStore(Of TUser).FindByIdAsync
    fullName: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).FindByIdAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{{TUser}}
  commentId: T:System.Threading.Tasks.Task{`0}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<TUser>
  nameWithType: Task<TUser>
  fullName: System.Threading.Tasks.Task<TUser>
  nameWithType.vb: Task(Of TUser)
  fullName.vb: System.Threading.Tasks.Task(Of TUser)
  name.vb: Task(Of TUser)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserStore`1.FindByIdAsync(System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserStore`1.FindByIdAsync(System.String,System.Threading.CancellationToken)
  isExternal: true
  name: FindByIdAsync(String, CancellationToken)
  nameWithType: IUserStore<TUser>.FindByIdAsync(String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.FindByIdAsync(System.String, System.Threading.CancellationToken)
  nameWithType.vb: IUserStore(Of TUser).FindByIdAsync(String, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).FindByIdAsync(System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1.FindByIdAsync(System.String,System.Threading.CancellationToken)
    name: FindByIdAsync
    nameWithType: IUserStore<TUser>.FindByIdAsync
    fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.FindByIdAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1.FindByIdAsync(System.String,System.Threading.CancellationToken)
    name: FindByIdAsync
    nameWithType: IUserStore(Of TUser).FindByIdAsync
    fullName: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).FindByIdAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.FindByNameAsync*
  commentId: Overload:Hybrid.Zero.Identity.Entities.UserStoreBase`12.FindByNameAsync
  name: FindByNameAsync
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.FindByNameAsync
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.FindByNameAsync
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).FindByNameAsync
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).FindByNameAsync
- uid: Microsoft.AspNetCore.Identity.IUserStore{{TUser}}.FindByNameAsync(System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserStore{`0}.FindByNameAsync(System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserStore`1.FindByNameAsync(System.String,System.Threading.CancellationToken)
  name: FindByNameAsync(String, CancellationToken)
  nameWithType: IUserStore<TUser>.FindByNameAsync(String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.FindByNameAsync(System.String, System.Threading.CancellationToken)
  nameWithType.vb: IUserStore(Of TUser).FindByNameAsync(String, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).FindByNameAsync(System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1.FindByNameAsync(System.String,System.Threading.CancellationToken)
    name: FindByNameAsync
    nameWithType: IUserStore<TUser>.FindByNameAsync
    fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.FindByNameAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1.FindByNameAsync(System.String,System.Threading.CancellationToken)
    name: FindByNameAsync
    nameWithType: IUserStore(Of TUser).FindByNameAsync
    fullName: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).FindByNameAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserStore`1.FindByNameAsync(System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserStore`1.FindByNameAsync(System.String,System.Threading.CancellationToken)
  isExternal: true
  name: FindByNameAsync(String, CancellationToken)
  nameWithType: IUserStore<TUser>.FindByNameAsync(String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.FindByNameAsync(System.String, System.Threading.CancellationToken)
  nameWithType.vb: IUserStore(Of TUser).FindByNameAsync(String, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).FindByNameAsync(System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1.FindByNameAsync(System.String,System.Threading.CancellationToken)
    name: FindByNameAsync
    nameWithType: IUserStore<TUser>.FindByNameAsync
    fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.FindByNameAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1.FindByNameAsync(System.String,System.Threading.CancellationToken)
    name: FindByNameAsync
    nameWithType: IUserStore(Of TUser).FindByNameAsync
    fullName: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).FindByNameAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.UserLoginInfo
  commentId: T:Microsoft.AspNetCore.Identity.UserLoginInfo
  parent: Microsoft.AspNetCore.Identity
  isExternal: true
  name: UserLoginInfo
  nameWithType: UserLoginInfo
  fullName: Microsoft.AspNetCore.Identity.UserLoginInfo
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.AddLoginAsync*
  commentId: Overload:Hybrid.Zero.Identity.Entities.UserStoreBase`12.AddLoginAsync
  name: AddLoginAsync
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.AddLoginAsync
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.AddLoginAsync
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).AddLoginAsync
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).AddLoginAsync
- uid: Microsoft.AspNetCore.Identity.IUserLoginStore{{TUser}}.AddLoginAsync({TUser},Microsoft.AspNetCore.Identity.UserLoginInfo,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserLoginStore{`0}.AddLoginAsync(`0,Microsoft.AspNetCore.Identity.UserLoginInfo,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserLoginStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserLoginStore`1.AddLoginAsync(`0,Microsoft.AspNetCore.Identity.UserLoginInfo,System.Threading.CancellationToken)
  name: AddLoginAsync(TUser, UserLoginInfo, CancellationToken)
  nameWithType: IUserLoginStore<TUser>.AddLoginAsync(TUser, UserLoginInfo, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserLoginStore<TUser>.AddLoginAsync(TUser, Microsoft.AspNetCore.Identity.UserLoginInfo, System.Threading.CancellationToken)
  nameWithType.vb: IUserLoginStore(Of TUser).AddLoginAsync(TUser, UserLoginInfo, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserLoginStore(Of TUser).AddLoginAsync(TUser, Microsoft.AspNetCore.Identity.UserLoginInfo, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserLoginStore`1.AddLoginAsync(`0,Microsoft.AspNetCore.Identity.UserLoginInfo,System.Threading.CancellationToken)
    name: AddLoginAsync
    nameWithType: IUserLoginStore<TUser>.AddLoginAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLoginStore<TUser>.AddLoginAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.AspNetCore.Identity.UserLoginInfo
    name: UserLoginInfo
    nameWithType: UserLoginInfo
    fullName: Microsoft.AspNetCore.Identity.UserLoginInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserLoginStore`1.AddLoginAsync(`0,Microsoft.AspNetCore.Identity.UserLoginInfo,System.Threading.CancellationToken)
    name: AddLoginAsync
    nameWithType: IUserLoginStore(Of TUser).AddLoginAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLoginStore(Of TUser).AddLoginAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.AspNetCore.Identity.UserLoginInfo
    name: UserLoginInfo
    nameWithType: UserLoginInfo
    fullName: Microsoft.AspNetCore.Identity.UserLoginInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserLoginStore`1.AddLoginAsync(`0,Microsoft.AspNetCore.Identity.UserLoginInfo,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserLoginStore`1.AddLoginAsync(`0,Microsoft.AspNetCore.Identity.UserLoginInfo,System.Threading.CancellationToken)
  isExternal: true
  name: AddLoginAsync(TUser, UserLoginInfo, CancellationToken)
  nameWithType: IUserLoginStore<TUser>.AddLoginAsync(TUser, UserLoginInfo, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserLoginStore<TUser>.AddLoginAsync(TUser, Microsoft.AspNetCore.Identity.UserLoginInfo, System.Threading.CancellationToken)
  nameWithType.vb: IUserLoginStore(Of TUser).AddLoginAsync(TUser, UserLoginInfo, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserLoginStore(Of TUser).AddLoginAsync(TUser, Microsoft.AspNetCore.Identity.UserLoginInfo, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserLoginStore`1.AddLoginAsync(`0,Microsoft.AspNetCore.Identity.UserLoginInfo,System.Threading.CancellationToken)
    name: AddLoginAsync
    nameWithType: IUserLoginStore<TUser>.AddLoginAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLoginStore<TUser>.AddLoginAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.AspNetCore.Identity.UserLoginInfo
    name: UserLoginInfo
    nameWithType: UserLoginInfo
    fullName: Microsoft.AspNetCore.Identity.UserLoginInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserLoginStore`1.AddLoginAsync(`0,Microsoft.AspNetCore.Identity.UserLoginInfo,System.Threading.CancellationToken)
    name: AddLoginAsync
    nameWithType: IUserLoginStore(Of TUser).AddLoginAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLoginStore(Of TUser).AddLoginAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.AspNetCore.Identity.UserLoginInfo
    name: UserLoginInfo
    nameWithType: UserLoginInfo
    fullName: Microsoft.AspNetCore.Identity.UserLoginInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.RemoveLoginAsync*
  commentId: Overload:Hybrid.Zero.Identity.Entities.UserStoreBase`12.RemoveLoginAsync
  name: RemoveLoginAsync
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.RemoveLoginAsync
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.RemoveLoginAsync
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).RemoveLoginAsync
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).RemoveLoginAsync
- uid: Microsoft.AspNetCore.Identity.IUserLoginStore{{TUser}}.RemoveLoginAsync({TUser},System.String,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserLoginStore{`0}.RemoveLoginAsync(`0,System.String,System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserLoginStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserLoginStore`1.RemoveLoginAsync(`0,System.String,System.String,System.Threading.CancellationToken)
  name: RemoveLoginAsync(TUser, String, String, CancellationToken)
  nameWithType: IUserLoginStore<TUser>.RemoveLoginAsync(TUser, String, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserLoginStore<TUser>.RemoveLoginAsync(TUser, System.String, System.String, System.Threading.CancellationToken)
  nameWithType.vb: IUserLoginStore(Of TUser).RemoveLoginAsync(TUser, String, String, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserLoginStore(Of TUser).RemoveLoginAsync(TUser, System.String, System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserLoginStore`1.RemoveLoginAsync(`0,System.String,System.String,System.Threading.CancellationToken)
    name: RemoveLoginAsync
    nameWithType: IUserLoginStore<TUser>.RemoveLoginAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLoginStore<TUser>.RemoveLoginAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserLoginStore`1.RemoveLoginAsync(`0,System.String,System.String,System.Threading.CancellationToken)
    name: RemoveLoginAsync
    nameWithType: IUserLoginStore(Of TUser).RemoveLoginAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLoginStore(Of TUser).RemoveLoginAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserLoginStore`1.RemoveLoginAsync(`0,System.String,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserLoginStore`1.RemoveLoginAsync(`0,System.String,System.String,System.Threading.CancellationToken)
  isExternal: true
  name: RemoveLoginAsync(TUser, String, String, CancellationToken)
  nameWithType: IUserLoginStore<TUser>.RemoveLoginAsync(TUser, String, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserLoginStore<TUser>.RemoveLoginAsync(TUser, System.String, System.String, System.Threading.CancellationToken)
  nameWithType.vb: IUserLoginStore(Of TUser).RemoveLoginAsync(TUser, String, String, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserLoginStore(Of TUser).RemoveLoginAsync(TUser, System.String, System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserLoginStore`1.RemoveLoginAsync(`0,System.String,System.String,System.Threading.CancellationToken)
    name: RemoveLoginAsync
    nameWithType: IUserLoginStore<TUser>.RemoveLoginAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLoginStore<TUser>.RemoveLoginAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserLoginStore`1.RemoveLoginAsync(`0,System.String,System.String,System.Threading.CancellationToken)
    name: RemoveLoginAsync
    nameWithType: IUserLoginStore(Of TUser).RemoveLoginAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLoginStore(Of TUser).RemoveLoginAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetLoginsAsync*
  commentId: Overload:Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetLoginsAsync
  name: GetLoginsAsync
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.GetLoginsAsync
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.GetLoginsAsync
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).GetLoginsAsync
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).GetLoginsAsync
- uid: Microsoft.AspNetCore.Identity.IUserLoginStore{{TUser}}.GetLoginsAsync({TUser},System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserLoginStore{`0}.GetLoginsAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserLoginStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserLoginStore`1.GetLoginsAsync(`0,System.Threading.CancellationToken)
  name: GetLoginsAsync(TUser, CancellationToken)
  nameWithType: IUserLoginStore<TUser>.GetLoginsAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserLoginStore<TUser>.GetLoginsAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserLoginStore(Of TUser).GetLoginsAsync(TUser, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserLoginStore(Of TUser).GetLoginsAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserLoginStore`1.GetLoginsAsync(`0,System.Threading.CancellationToken)
    name: GetLoginsAsync
    nameWithType: IUserLoginStore<TUser>.GetLoginsAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLoginStore<TUser>.GetLoginsAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserLoginStore`1.GetLoginsAsync(`0,System.Threading.CancellationToken)
    name: GetLoginsAsync
    nameWithType: IUserLoginStore(Of TUser).GetLoginsAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLoginStore(Of TUser).GetLoginsAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IList{Microsoft.AspNetCore.Identity.UserLoginInfo}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IList{Microsoft.AspNetCore.Identity.UserLoginInfo}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IList<UserLoginInfo>>
  nameWithType: Task<IList<UserLoginInfo>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IList<Microsoft.AspNetCore.Identity.UserLoginInfo>>
  nameWithType.vb: Task(Of IList(Of UserLoginInfo))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IList(Of Microsoft.AspNetCore.Identity.UserLoginInfo))
  name.vb: Task(Of IList(Of UserLoginInfo))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.AspNetCore.Identity.UserLoginInfo
    name: UserLoginInfo
    nameWithType: UserLoginInfo
    fullName: Microsoft.AspNetCore.Identity.UserLoginInfo
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.AspNetCore.Identity.UserLoginInfo
    name: UserLoginInfo
    nameWithType: UserLoginInfo
    fullName: Microsoft.AspNetCore.Identity.UserLoginInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserLoginStore`1.GetLoginsAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserLoginStore`1.GetLoginsAsync(`0,System.Threading.CancellationToken)
  isExternal: true
  name: GetLoginsAsync(TUser, CancellationToken)
  nameWithType: IUserLoginStore<TUser>.GetLoginsAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserLoginStore<TUser>.GetLoginsAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserLoginStore(Of TUser).GetLoginsAsync(TUser, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserLoginStore(Of TUser).GetLoginsAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserLoginStore`1.GetLoginsAsync(`0,System.Threading.CancellationToken)
    name: GetLoginsAsync
    nameWithType: IUserLoginStore<TUser>.GetLoginsAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLoginStore<TUser>.GetLoginsAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserLoginStore`1.GetLoginsAsync(`0,System.Threading.CancellationToken)
    name: GetLoginsAsync
    nameWithType: IUserLoginStore(Of TUser).GetLoginsAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLoginStore(Of TUser).GetLoginsAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.FindByLoginAsync*
  commentId: Overload:Hybrid.Zero.Identity.Entities.UserStoreBase`12.FindByLoginAsync
  name: FindByLoginAsync
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.FindByLoginAsync
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.FindByLoginAsync
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).FindByLoginAsync
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).FindByLoginAsync
- uid: Microsoft.AspNetCore.Identity.IUserLoginStore{{TUser}}.FindByLoginAsync(System.String,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserLoginStore{`0}.FindByLoginAsync(System.String,System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserLoginStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserLoginStore`1.FindByLoginAsync(System.String,System.String,System.Threading.CancellationToken)
  name: FindByLoginAsync(String, String, CancellationToken)
  nameWithType: IUserLoginStore<TUser>.FindByLoginAsync(String, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserLoginStore<TUser>.FindByLoginAsync(System.String, System.String, System.Threading.CancellationToken)
  nameWithType.vb: IUserLoginStore(Of TUser).FindByLoginAsync(String, String, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserLoginStore(Of TUser).FindByLoginAsync(System.String, System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserLoginStore`1.FindByLoginAsync(System.String,System.String,System.Threading.CancellationToken)
    name: FindByLoginAsync
    nameWithType: IUserLoginStore<TUser>.FindByLoginAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLoginStore<TUser>.FindByLoginAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserLoginStore`1.FindByLoginAsync(System.String,System.String,System.Threading.CancellationToken)
    name: FindByLoginAsync
    nameWithType: IUserLoginStore(Of TUser).FindByLoginAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLoginStore(Of TUser).FindByLoginAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserLoginStore`1.FindByLoginAsync(System.String,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserLoginStore`1.FindByLoginAsync(System.String,System.String,System.Threading.CancellationToken)
  isExternal: true
  name: FindByLoginAsync(String, String, CancellationToken)
  nameWithType: IUserLoginStore<TUser>.FindByLoginAsync(String, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserLoginStore<TUser>.FindByLoginAsync(System.String, System.String, System.Threading.CancellationToken)
  nameWithType.vb: IUserLoginStore(Of TUser).FindByLoginAsync(String, String, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserLoginStore(Of TUser).FindByLoginAsync(System.String, System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserLoginStore`1.FindByLoginAsync(System.String,System.String,System.Threading.CancellationToken)
    name: FindByLoginAsync
    nameWithType: IUserLoginStore<TUser>.FindByLoginAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLoginStore<TUser>.FindByLoginAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserLoginStore`1.FindByLoginAsync(System.String,System.String,System.Threading.CancellationToken)
    name: FindByLoginAsync
    nameWithType: IUserLoginStore(Of TUser).FindByLoginAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLoginStore(Of TUser).FindByLoginAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Security.Claims.Claim
  commentId: T:System.Security.Claims.Claim
  parent: System.Security.Claims
  isExternal: true
  name: Claim
  nameWithType: Claim
  fullName: System.Security.Claims.Claim
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetClaimsAsync*
  commentId: Overload:Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetClaimsAsync
  name: GetClaimsAsync
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.GetClaimsAsync
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.GetClaimsAsync
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).GetClaimsAsync
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).GetClaimsAsync
- uid: Microsoft.AspNetCore.Identity.IUserClaimStore{{TUser}}.GetClaimsAsync({TUser},System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserClaimStore{`0}.GetClaimsAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserClaimStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserClaimStore`1.GetClaimsAsync(`0,System.Threading.CancellationToken)
  name: GetClaimsAsync(TUser, CancellationToken)
  nameWithType: IUserClaimStore<TUser>.GetClaimsAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserClaimStore<TUser>.GetClaimsAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserClaimStore(Of TUser).GetClaimsAsync(TUser, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserClaimStore(Of TUser).GetClaimsAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserClaimStore`1.GetClaimsAsync(`0,System.Threading.CancellationToken)
    name: GetClaimsAsync
    nameWithType: IUserClaimStore<TUser>.GetClaimsAsync
    fullName: Microsoft.AspNetCore.Identity.IUserClaimStore<TUser>.GetClaimsAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserClaimStore`1.GetClaimsAsync(`0,System.Threading.CancellationToken)
    name: GetClaimsAsync
    nameWithType: IUserClaimStore(Of TUser).GetClaimsAsync
    fullName: Microsoft.AspNetCore.Identity.IUserClaimStore(Of TUser).GetClaimsAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IList{System.Security.Claims.Claim}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IList{System.Security.Claims.Claim}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IList<Claim>>
  nameWithType: Task<IList<Claim>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IList<System.Security.Claims.Claim>>
  nameWithType.vb: Task(Of IList(Of Claim))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IList(Of System.Security.Claims.Claim))
  name.vb: Task(Of IList(Of Claim))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Security.Claims
  commentId: N:System.Security.Claims
  isExternal: true
  name: System.Security.Claims
  nameWithType: System.Security.Claims
  fullName: System.Security.Claims
- uid: Microsoft.AspNetCore.Identity.IUserClaimStore`1.GetClaimsAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserClaimStore`1.GetClaimsAsync(`0,System.Threading.CancellationToken)
  isExternal: true
  name: GetClaimsAsync(TUser, CancellationToken)
  nameWithType: IUserClaimStore<TUser>.GetClaimsAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserClaimStore<TUser>.GetClaimsAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserClaimStore(Of TUser).GetClaimsAsync(TUser, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserClaimStore(Of TUser).GetClaimsAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserClaimStore`1.GetClaimsAsync(`0,System.Threading.CancellationToken)
    name: GetClaimsAsync
    nameWithType: IUserClaimStore<TUser>.GetClaimsAsync
    fullName: Microsoft.AspNetCore.Identity.IUserClaimStore<TUser>.GetClaimsAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserClaimStore`1.GetClaimsAsync(`0,System.Threading.CancellationToken)
    name: GetClaimsAsync
    nameWithType: IUserClaimStore(Of TUser).GetClaimsAsync
    fullName: Microsoft.AspNetCore.Identity.IUserClaimStore(Of TUser).GetClaimsAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.AddClaimsAsync*
  commentId: Overload:Hybrid.Zero.Identity.Entities.UserStoreBase`12.AddClaimsAsync
  name: AddClaimsAsync
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.AddClaimsAsync
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.AddClaimsAsync
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).AddClaimsAsync
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).AddClaimsAsync
- uid: Microsoft.AspNetCore.Identity.IUserClaimStore{{TUser}}.AddClaimsAsync({TUser},System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserClaimStore{`0}.AddClaimsAsync(`0,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserClaimStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserClaimStore`1.AddClaimsAsync(`0,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.Threading.CancellationToken)
  name: AddClaimsAsync(TUser, IEnumerable<Claim>, CancellationToken)
  nameWithType: IUserClaimStore<TUser>.AddClaimsAsync(TUser, IEnumerable<Claim>, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserClaimStore<TUser>.AddClaimsAsync(TUser, System.Collections.Generic.IEnumerable<System.Security.Claims.Claim>, System.Threading.CancellationToken)
  nameWithType.vb: IUserClaimStore(Of TUser).AddClaimsAsync(TUser, IEnumerable(Of Claim), CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserClaimStore(Of TUser).AddClaimsAsync(TUser, System.Collections.Generic.IEnumerable(Of System.Security.Claims.Claim), System.Threading.CancellationToken)
  name.vb: AddClaimsAsync(TUser, IEnumerable(Of Claim), CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserClaimStore`1.AddClaimsAsync(`0,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.Threading.CancellationToken)
    name: AddClaimsAsync
    nameWithType: IUserClaimStore<TUser>.AddClaimsAsync
    fullName: Microsoft.AspNetCore.Identity.IUserClaimStore<TUser>.AddClaimsAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserClaimStore`1.AddClaimsAsync(`0,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.Threading.CancellationToken)
    name: AddClaimsAsync
    nameWithType: IUserClaimStore(Of TUser).AddClaimsAsync
    fullName: Microsoft.AspNetCore.Identity.IUserClaimStore(Of TUser).AddClaimsAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
  commentId: T:System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Claim>
  nameWithType: IEnumerable<Claim>
  fullName: System.Collections.Generic.IEnumerable<System.Security.Claims.Claim>
  nameWithType.vb: IEnumerable(Of Claim)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Security.Claims.Claim)
  name.vb: IEnumerable(Of Claim)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserClaimStore`1.AddClaimsAsync(`0,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserClaimStore`1.AddClaimsAsync(`0,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.Threading.CancellationToken)
  isExternal: true
  name: AddClaimsAsync(TUser, IEnumerable<Claim>, CancellationToken)
  nameWithType: IUserClaimStore<TUser>.AddClaimsAsync(TUser, IEnumerable<Claim>, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserClaimStore<TUser>.AddClaimsAsync(TUser, System.Collections.Generic.IEnumerable<System.Security.Claims.Claim>, System.Threading.CancellationToken)
  nameWithType.vb: IUserClaimStore(Of TUser).AddClaimsAsync(TUser, IEnumerable(Of Claim), CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserClaimStore(Of TUser).AddClaimsAsync(TUser, System.Collections.Generic.IEnumerable(Of System.Security.Claims.Claim), System.Threading.CancellationToken)
  name.vb: AddClaimsAsync(TUser, IEnumerable(Of Claim), CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserClaimStore`1.AddClaimsAsync(`0,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.Threading.CancellationToken)
    name: AddClaimsAsync
    nameWithType: IUserClaimStore<TUser>.AddClaimsAsync
    fullName: Microsoft.AspNetCore.Identity.IUserClaimStore<TUser>.AddClaimsAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserClaimStore`1.AddClaimsAsync(`0,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.Threading.CancellationToken)
    name: AddClaimsAsync
    nameWithType: IUserClaimStore(Of TUser).AddClaimsAsync
    fullName: Microsoft.AspNetCore.Identity.IUserClaimStore(Of TUser).AddClaimsAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.ReplaceClaimAsync*
  commentId: Overload:Hybrid.Zero.Identity.Entities.UserStoreBase`12.ReplaceClaimAsync
  name: ReplaceClaimAsync
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.ReplaceClaimAsync
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.ReplaceClaimAsync
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).ReplaceClaimAsync
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).ReplaceClaimAsync
- uid: Microsoft.AspNetCore.Identity.IUserClaimStore{{TUser}}.ReplaceClaimAsync({TUser},System.Security.Claims.Claim,System.Security.Claims.Claim,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserClaimStore{`0}.ReplaceClaimAsync(`0,System.Security.Claims.Claim,System.Security.Claims.Claim,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserClaimStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserClaimStore`1.ReplaceClaimAsync(`0,System.Security.Claims.Claim,System.Security.Claims.Claim,System.Threading.CancellationToken)
  name: ReplaceClaimAsync(TUser, Claim, Claim, CancellationToken)
  nameWithType: IUserClaimStore<TUser>.ReplaceClaimAsync(TUser, Claim, Claim, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserClaimStore<TUser>.ReplaceClaimAsync(TUser, System.Security.Claims.Claim, System.Security.Claims.Claim, System.Threading.CancellationToken)
  nameWithType.vb: IUserClaimStore(Of TUser).ReplaceClaimAsync(TUser, Claim, Claim, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserClaimStore(Of TUser).ReplaceClaimAsync(TUser, System.Security.Claims.Claim, System.Security.Claims.Claim, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserClaimStore`1.ReplaceClaimAsync(`0,System.Security.Claims.Claim,System.Security.Claims.Claim,System.Threading.CancellationToken)
    name: ReplaceClaimAsync
    nameWithType: IUserClaimStore<TUser>.ReplaceClaimAsync
    fullName: Microsoft.AspNetCore.Identity.IUserClaimStore<TUser>.ReplaceClaimAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserClaimStore`1.ReplaceClaimAsync(`0,System.Security.Claims.Claim,System.Security.Claims.Claim,System.Threading.CancellationToken)
    name: ReplaceClaimAsync
    nameWithType: IUserClaimStore(Of TUser).ReplaceClaimAsync
    fullName: Microsoft.AspNetCore.Identity.IUserClaimStore(Of TUser).ReplaceClaimAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserClaimStore`1.ReplaceClaimAsync(`0,System.Security.Claims.Claim,System.Security.Claims.Claim,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserClaimStore`1.ReplaceClaimAsync(`0,System.Security.Claims.Claim,System.Security.Claims.Claim,System.Threading.CancellationToken)
  isExternal: true
  name: ReplaceClaimAsync(TUser, Claim, Claim, CancellationToken)
  nameWithType: IUserClaimStore<TUser>.ReplaceClaimAsync(TUser, Claim, Claim, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserClaimStore<TUser>.ReplaceClaimAsync(TUser, System.Security.Claims.Claim, System.Security.Claims.Claim, System.Threading.CancellationToken)
  nameWithType.vb: IUserClaimStore(Of TUser).ReplaceClaimAsync(TUser, Claim, Claim, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserClaimStore(Of TUser).ReplaceClaimAsync(TUser, System.Security.Claims.Claim, System.Security.Claims.Claim, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserClaimStore`1.ReplaceClaimAsync(`0,System.Security.Claims.Claim,System.Security.Claims.Claim,System.Threading.CancellationToken)
    name: ReplaceClaimAsync
    nameWithType: IUserClaimStore<TUser>.ReplaceClaimAsync
    fullName: Microsoft.AspNetCore.Identity.IUserClaimStore<TUser>.ReplaceClaimAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserClaimStore`1.ReplaceClaimAsync(`0,System.Security.Claims.Claim,System.Security.Claims.Claim,System.Threading.CancellationToken)
    name: ReplaceClaimAsync
    nameWithType: IUserClaimStore(Of TUser).ReplaceClaimAsync
    fullName: Microsoft.AspNetCore.Identity.IUserClaimStore(Of TUser).ReplaceClaimAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.RemoveClaimsAsync*
  commentId: Overload:Hybrid.Zero.Identity.Entities.UserStoreBase`12.RemoveClaimsAsync
  name: RemoveClaimsAsync
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.RemoveClaimsAsync
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.RemoveClaimsAsync
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).RemoveClaimsAsync
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).RemoveClaimsAsync
- uid: Microsoft.AspNetCore.Identity.IUserClaimStore{{TUser}}.RemoveClaimsAsync({TUser},System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserClaimStore{`0}.RemoveClaimsAsync(`0,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserClaimStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserClaimStore`1.RemoveClaimsAsync(`0,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.Threading.CancellationToken)
  name: RemoveClaimsAsync(TUser, IEnumerable<Claim>, CancellationToken)
  nameWithType: IUserClaimStore<TUser>.RemoveClaimsAsync(TUser, IEnumerable<Claim>, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserClaimStore<TUser>.RemoveClaimsAsync(TUser, System.Collections.Generic.IEnumerable<System.Security.Claims.Claim>, System.Threading.CancellationToken)
  nameWithType.vb: IUserClaimStore(Of TUser).RemoveClaimsAsync(TUser, IEnumerable(Of Claim), CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserClaimStore(Of TUser).RemoveClaimsAsync(TUser, System.Collections.Generic.IEnumerable(Of System.Security.Claims.Claim), System.Threading.CancellationToken)
  name.vb: RemoveClaimsAsync(TUser, IEnumerable(Of Claim), CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserClaimStore`1.RemoveClaimsAsync(`0,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.Threading.CancellationToken)
    name: RemoveClaimsAsync
    nameWithType: IUserClaimStore<TUser>.RemoveClaimsAsync
    fullName: Microsoft.AspNetCore.Identity.IUserClaimStore<TUser>.RemoveClaimsAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserClaimStore`1.RemoveClaimsAsync(`0,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.Threading.CancellationToken)
    name: RemoveClaimsAsync
    nameWithType: IUserClaimStore(Of TUser).RemoveClaimsAsync
    fullName: Microsoft.AspNetCore.Identity.IUserClaimStore(Of TUser).RemoveClaimsAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserClaimStore`1.RemoveClaimsAsync(`0,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserClaimStore`1.RemoveClaimsAsync(`0,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.Threading.CancellationToken)
  isExternal: true
  name: RemoveClaimsAsync(TUser, IEnumerable<Claim>, CancellationToken)
  nameWithType: IUserClaimStore<TUser>.RemoveClaimsAsync(TUser, IEnumerable<Claim>, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserClaimStore<TUser>.RemoveClaimsAsync(TUser, System.Collections.Generic.IEnumerable<System.Security.Claims.Claim>, System.Threading.CancellationToken)
  nameWithType.vb: IUserClaimStore(Of TUser).RemoveClaimsAsync(TUser, IEnumerable(Of Claim), CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserClaimStore(Of TUser).RemoveClaimsAsync(TUser, System.Collections.Generic.IEnumerable(Of System.Security.Claims.Claim), System.Threading.CancellationToken)
  name.vb: RemoveClaimsAsync(TUser, IEnumerable(Of Claim), CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserClaimStore`1.RemoveClaimsAsync(`0,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.Threading.CancellationToken)
    name: RemoveClaimsAsync
    nameWithType: IUserClaimStore<TUser>.RemoveClaimsAsync
    fullName: Microsoft.AspNetCore.Identity.IUserClaimStore<TUser>.RemoveClaimsAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserClaimStore`1.RemoveClaimsAsync(`0,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.Threading.CancellationToken)
    name: RemoveClaimsAsync
    nameWithType: IUserClaimStore(Of TUser).RemoveClaimsAsync
    fullName: Microsoft.AspNetCore.Identity.IUserClaimStore(Of TUser).RemoveClaimsAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetUsersForClaimAsync*
  commentId: Overload:Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetUsersForClaimAsync
  name: GetUsersForClaimAsync
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.GetUsersForClaimAsync
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.GetUsersForClaimAsync
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).GetUsersForClaimAsync
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).GetUsersForClaimAsync
- uid: Microsoft.AspNetCore.Identity.IUserClaimStore{{TUser}}.GetUsersForClaimAsync(System.Security.Claims.Claim,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserClaimStore{`0}.GetUsersForClaimAsync(System.Security.Claims.Claim,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserClaimStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserClaimStore`1.GetUsersForClaimAsync(System.Security.Claims.Claim,System.Threading.CancellationToken)
  name: GetUsersForClaimAsync(Claim, CancellationToken)
  nameWithType: IUserClaimStore<TUser>.GetUsersForClaimAsync(Claim, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserClaimStore<TUser>.GetUsersForClaimAsync(System.Security.Claims.Claim, System.Threading.CancellationToken)
  nameWithType.vb: IUserClaimStore(Of TUser).GetUsersForClaimAsync(Claim, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserClaimStore(Of TUser).GetUsersForClaimAsync(System.Security.Claims.Claim, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserClaimStore`1.GetUsersForClaimAsync(System.Security.Claims.Claim,System.Threading.CancellationToken)
    name: GetUsersForClaimAsync
    nameWithType: IUserClaimStore<TUser>.GetUsersForClaimAsync
    fullName: Microsoft.AspNetCore.Identity.IUserClaimStore<TUser>.GetUsersForClaimAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserClaimStore`1.GetUsersForClaimAsync(System.Security.Claims.Claim,System.Threading.CancellationToken)
    name: GetUsersForClaimAsync
    nameWithType: IUserClaimStore(Of TUser).GetUsersForClaimAsync
    fullName: Microsoft.AspNetCore.Identity.IUserClaimStore(Of TUser).GetUsersForClaimAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IList{{TUser}}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IList{`0}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IList<TUser>>
  nameWithType: Task<IList<TUser>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IList<TUser>>
  nameWithType.vb: Task(Of IList(Of TUser))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IList(Of TUser))
  name.vb: Task(Of IList(Of TUser))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserClaimStore`1.GetUsersForClaimAsync(System.Security.Claims.Claim,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserClaimStore`1.GetUsersForClaimAsync(System.Security.Claims.Claim,System.Threading.CancellationToken)
  isExternal: true
  name: GetUsersForClaimAsync(Claim, CancellationToken)
  nameWithType: IUserClaimStore<TUser>.GetUsersForClaimAsync(Claim, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserClaimStore<TUser>.GetUsersForClaimAsync(System.Security.Claims.Claim, System.Threading.CancellationToken)
  nameWithType.vb: IUserClaimStore(Of TUser).GetUsersForClaimAsync(Claim, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserClaimStore(Of TUser).GetUsersForClaimAsync(System.Security.Claims.Claim, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserClaimStore`1.GetUsersForClaimAsync(System.Security.Claims.Claim,System.Threading.CancellationToken)
    name: GetUsersForClaimAsync
    nameWithType: IUserClaimStore<TUser>.GetUsersForClaimAsync
    fullName: Microsoft.AspNetCore.Identity.IUserClaimStore<TUser>.GetUsersForClaimAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserClaimStore`1.GetUsersForClaimAsync(System.Security.Claims.Claim,System.Threading.CancellationToken)
    name: GetUsersForClaimAsync
    nameWithType: IUserClaimStore(Of TUser).GetUsersForClaimAsync
    fullName: Microsoft.AspNetCore.Identity.IUserClaimStore(Of TUser).GetUsersForClaimAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.SetPasswordHashAsync*
  commentId: Overload:Hybrid.Zero.Identity.Entities.UserStoreBase`12.SetPasswordHashAsync
  name: SetPasswordHashAsync
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.SetPasswordHashAsync
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.SetPasswordHashAsync
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).SetPasswordHashAsync
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).SetPasswordHashAsync
- uid: Microsoft.AspNetCore.Identity.IUserPasswordStore{{TUser}}.SetPasswordHashAsync({TUser},System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserPasswordStore{`0}.SetPasswordHashAsync(`0,System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserPasswordStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserPasswordStore`1.SetPasswordHashAsync(`0,System.String,System.Threading.CancellationToken)
  name: SetPasswordHashAsync(TUser, String, CancellationToken)
  nameWithType: IUserPasswordStore<TUser>.SetPasswordHashAsync(TUser, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserPasswordStore<TUser>.SetPasswordHashAsync(TUser, System.String, System.Threading.CancellationToken)
  nameWithType.vb: IUserPasswordStore(Of TUser).SetPasswordHashAsync(TUser, String, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserPasswordStore(Of TUser).SetPasswordHashAsync(TUser, System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserPasswordStore`1.SetPasswordHashAsync(`0,System.String,System.Threading.CancellationToken)
    name: SetPasswordHashAsync
    nameWithType: IUserPasswordStore<TUser>.SetPasswordHashAsync
    fullName: Microsoft.AspNetCore.Identity.IUserPasswordStore<TUser>.SetPasswordHashAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserPasswordStore`1.SetPasswordHashAsync(`0,System.String,System.Threading.CancellationToken)
    name: SetPasswordHashAsync
    nameWithType: IUserPasswordStore(Of TUser).SetPasswordHashAsync
    fullName: Microsoft.AspNetCore.Identity.IUserPasswordStore(Of TUser).SetPasswordHashAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserPasswordStore`1.SetPasswordHashAsync(`0,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserPasswordStore`1.SetPasswordHashAsync(`0,System.String,System.Threading.CancellationToken)
  isExternal: true
  name: SetPasswordHashAsync(TUser, String, CancellationToken)
  nameWithType: IUserPasswordStore<TUser>.SetPasswordHashAsync(TUser, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserPasswordStore<TUser>.SetPasswordHashAsync(TUser, System.String, System.Threading.CancellationToken)
  nameWithType.vb: IUserPasswordStore(Of TUser).SetPasswordHashAsync(TUser, String, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserPasswordStore(Of TUser).SetPasswordHashAsync(TUser, System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserPasswordStore`1.SetPasswordHashAsync(`0,System.String,System.Threading.CancellationToken)
    name: SetPasswordHashAsync
    nameWithType: IUserPasswordStore<TUser>.SetPasswordHashAsync
    fullName: Microsoft.AspNetCore.Identity.IUserPasswordStore<TUser>.SetPasswordHashAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserPasswordStore`1.SetPasswordHashAsync(`0,System.String,System.Threading.CancellationToken)
    name: SetPasswordHashAsync
    nameWithType: IUserPasswordStore(Of TUser).SetPasswordHashAsync
    fullName: Microsoft.AspNetCore.Identity.IUserPasswordStore(Of TUser).SetPasswordHashAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetPasswordHashAsync*
  commentId: Overload:Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetPasswordHashAsync
  name: GetPasswordHashAsync
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.GetPasswordHashAsync
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.GetPasswordHashAsync
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).GetPasswordHashAsync
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).GetPasswordHashAsync
- uid: Microsoft.AspNetCore.Identity.IUserPasswordStore{{TUser}}.GetPasswordHashAsync({TUser},System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserPasswordStore{`0}.GetPasswordHashAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserPasswordStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserPasswordStore`1.GetPasswordHashAsync(`0,System.Threading.CancellationToken)
  name: GetPasswordHashAsync(TUser, CancellationToken)
  nameWithType: IUserPasswordStore<TUser>.GetPasswordHashAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserPasswordStore<TUser>.GetPasswordHashAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserPasswordStore(Of TUser).GetPasswordHashAsync(TUser, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserPasswordStore(Of TUser).GetPasswordHashAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserPasswordStore`1.GetPasswordHashAsync(`0,System.Threading.CancellationToken)
    name: GetPasswordHashAsync
    nameWithType: IUserPasswordStore<TUser>.GetPasswordHashAsync
    fullName: Microsoft.AspNetCore.Identity.IUserPasswordStore<TUser>.GetPasswordHashAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserPasswordStore`1.GetPasswordHashAsync(`0,System.Threading.CancellationToken)
    name: GetPasswordHashAsync
    nameWithType: IUserPasswordStore(Of TUser).GetPasswordHashAsync
    fullName: Microsoft.AspNetCore.Identity.IUserPasswordStore(Of TUser).GetPasswordHashAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserPasswordStore`1.GetPasswordHashAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserPasswordStore`1.GetPasswordHashAsync(`0,System.Threading.CancellationToken)
  isExternal: true
  name: GetPasswordHashAsync(TUser, CancellationToken)
  nameWithType: IUserPasswordStore<TUser>.GetPasswordHashAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserPasswordStore<TUser>.GetPasswordHashAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserPasswordStore(Of TUser).GetPasswordHashAsync(TUser, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserPasswordStore(Of TUser).GetPasswordHashAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserPasswordStore`1.GetPasswordHashAsync(`0,System.Threading.CancellationToken)
    name: GetPasswordHashAsync
    nameWithType: IUserPasswordStore<TUser>.GetPasswordHashAsync
    fullName: Microsoft.AspNetCore.Identity.IUserPasswordStore<TUser>.GetPasswordHashAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserPasswordStore`1.GetPasswordHashAsync(`0,System.Threading.CancellationToken)
    name: GetPasswordHashAsync
    nameWithType: IUserPasswordStore(Of TUser).GetPasswordHashAsync
    fullName: Microsoft.AspNetCore.Identity.IUserPasswordStore(Of TUser).GetPasswordHashAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.HasPasswordAsync*
  commentId: Overload:Hybrid.Zero.Identity.Entities.UserStoreBase`12.HasPasswordAsync
  name: HasPasswordAsync
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.HasPasswordAsync
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.HasPasswordAsync
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).HasPasswordAsync
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).HasPasswordAsync
- uid: Microsoft.AspNetCore.Identity.IUserPasswordStore{{TUser}}.HasPasswordAsync({TUser},System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserPasswordStore{`0}.HasPasswordAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserPasswordStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserPasswordStore`1.HasPasswordAsync(`0,System.Threading.CancellationToken)
  name: HasPasswordAsync(TUser, CancellationToken)
  nameWithType: IUserPasswordStore<TUser>.HasPasswordAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserPasswordStore<TUser>.HasPasswordAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserPasswordStore(Of TUser).HasPasswordAsync(TUser, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserPasswordStore(Of TUser).HasPasswordAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserPasswordStore`1.HasPasswordAsync(`0,System.Threading.CancellationToken)
    name: HasPasswordAsync
    nameWithType: IUserPasswordStore<TUser>.HasPasswordAsync
    fullName: Microsoft.AspNetCore.Identity.IUserPasswordStore<TUser>.HasPasswordAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserPasswordStore`1.HasPasswordAsync(`0,System.Threading.CancellationToken)
    name: HasPasswordAsync
    nameWithType: IUserPasswordStore(Of TUser).HasPasswordAsync
    fullName: Microsoft.AspNetCore.Identity.IUserPasswordStore(Of TUser).HasPasswordAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.Boolean}
  commentId: T:System.Threading.Tasks.Task{System.Boolean}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Boolean>
  nameWithType: Task<Boolean>
  fullName: System.Threading.Tasks.Task<System.Boolean>
  nameWithType.vb: Task(Of Boolean)
  fullName.vb: System.Threading.Tasks.Task(Of System.Boolean)
  name.vb: Task(Of Boolean)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserPasswordStore`1.HasPasswordAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserPasswordStore`1.HasPasswordAsync(`0,System.Threading.CancellationToken)
  isExternal: true
  name: HasPasswordAsync(TUser, CancellationToken)
  nameWithType: IUserPasswordStore<TUser>.HasPasswordAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserPasswordStore<TUser>.HasPasswordAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserPasswordStore(Of TUser).HasPasswordAsync(TUser, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserPasswordStore(Of TUser).HasPasswordAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserPasswordStore`1.HasPasswordAsync(`0,System.Threading.CancellationToken)
    name: HasPasswordAsync
    nameWithType: IUserPasswordStore<TUser>.HasPasswordAsync
    fullName: Microsoft.AspNetCore.Identity.IUserPasswordStore<TUser>.HasPasswordAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserPasswordStore`1.HasPasswordAsync(`0,System.Threading.CancellationToken)
    name: HasPasswordAsync
    nameWithType: IUserPasswordStore(Of TUser).HasPasswordAsync
    fullName: Microsoft.AspNetCore.Identity.IUserPasswordStore(Of TUser).HasPasswordAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.SetSecurityStampAsync*
  commentId: Overload:Hybrid.Zero.Identity.Entities.UserStoreBase`12.SetSecurityStampAsync
  name: SetSecurityStampAsync
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.SetSecurityStampAsync
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.SetSecurityStampAsync
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).SetSecurityStampAsync
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).SetSecurityStampAsync
- uid: Microsoft.AspNetCore.Identity.IUserSecurityStampStore{{TUser}}.SetSecurityStampAsync({TUser},System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserSecurityStampStore{`0}.SetSecurityStampAsync(`0,System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserSecurityStampStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserSecurityStampStore`1.SetSecurityStampAsync(`0,System.String,System.Threading.CancellationToken)
  name: SetSecurityStampAsync(TUser, String, CancellationToken)
  nameWithType: IUserSecurityStampStore<TUser>.SetSecurityStampAsync(TUser, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserSecurityStampStore<TUser>.SetSecurityStampAsync(TUser, System.String, System.Threading.CancellationToken)
  nameWithType.vb: IUserSecurityStampStore(Of TUser).SetSecurityStampAsync(TUser, String, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserSecurityStampStore(Of TUser).SetSecurityStampAsync(TUser, System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserSecurityStampStore`1.SetSecurityStampAsync(`0,System.String,System.Threading.CancellationToken)
    name: SetSecurityStampAsync
    nameWithType: IUserSecurityStampStore<TUser>.SetSecurityStampAsync
    fullName: Microsoft.AspNetCore.Identity.IUserSecurityStampStore<TUser>.SetSecurityStampAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserSecurityStampStore`1.SetSecurityStampAsync(`0,System.String,System.Threading.CancellationToken)
    name: SetSecurityStampAsync
    nameWithType: IUserSecurityStampStore(Of TUser).SetSecurityStampAsync
    fullName: Microsoft.AspNetCore.Identity.IUserSecurityStampStore(Of TUser).SetSecurityStampAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserSecurityStampStore`1.SetSecurityStampAsync(`0,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserSecurityStampStore`1.SetSecurityStampAsync(`0,System.String,System.Threading.CancellationToken)
  isExternal: true
  name: SetSecurityStampAsync(TUser, String, CancellationToken)
  nameWithType: IUserSecurityStampStore<TUser>.SetSecurityStampAsync(TUser, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserSecurityStampStore<TUser>.SetSecurityStampAsync(TUser, System.String, System.Threading.CancellationToken)
  nameWithType.vb: IUserSecurityStampStore(Of TUser).SetSecurityStampAsync(TUser, String, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserSecurityStampStore(Of TUser).SetSecurityStampAsync(TUser, System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserSecurityStampStore`1.SetSecurityStampAsync(`0,System.String,System.Threading.CancellationToken)
    name: SetSecurityStampAsync
    nameWithType: IUserSecurityStampStore<TUser>.SetSecurityStampAsync
    fullName: Microsoft.AspNetCore.Identity.IUserSecurityStampStore<TUser>.SetSecurityStampAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserSecurityStampStore`1.SetSecurityStampAsync(`0,System.String,System.Threading.CancellationToken)
    name: SetSecurityStampAsync
    nameWithType: IUserSecurityStampStore(Of TUser).SetSecurityStampAsync
    fullName: Microsoft.AspNetCore.Identity.IUserSecurityStampStore(Of TUser).SetSecurityStampAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetSecurityStampAsync*
  commentId: Overload:Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetSecurityStampAsync
  name: GetSecurityStampAsync
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.GetSecurityStampAsync
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.GetSecurityStampAsync
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).GetSecurityStampAsync
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).GetSecurityStampAsync
- uid: Microsoft.AspNetCore.Identity.IUserSecurityStampStore{{TUser}}.GetSecurityStampAsync({TUser},System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserSecurityStampStore{`0}.GetSecurityStampAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserSecurityStampStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserSecurityStampStore`1.GetSecurityStampAsync(`0,System.Threading.CancellationToken)
  name: GetSecurityStampAsync(TUser, CancellationToken)
  nameWithType: IUserSecurityStampStore<TUser>.GetSecurityStampAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserSecurityStampStore<TUser>.GetSecurityStampAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserSecurityStampStore(Of TUser).GetSecurityStampAsync(TUser, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserSecurityStampStore(Of TUser).GetSecurityStampAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserSecurityStampStore`1.GetSecurityStampAsync(`0,System.Threading.CancellationToken)
    name: GetSecurityStampAsync
    nameWithType: IUserSecurityStampStore<TUser>.GetSecurityStampAsync
    fullName: Microsoft.AspNetCore.Identity.IUserSecurityStampStore<TUser>.GetSecurityStampAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserSecurityStampStore`1.GetSecurityStampAsync(`0,System.Threading.CancellationToken)
    name: GetSecurityStampAsync
    nameWithType: IUserSecurityStampStore(Of TUser).GetSecurityStampAsync
    fullName: Microsoft.AspNetCore.Identity.IUserSecurityStampStore(Of TUser).GetSecurityStampAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserSecurityStampStore`1.GetSecurityStampAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserSecurityStampStore`1.GetSecurityStampAsync(`0,System.Threading.CancellationToken)
  isExternal: true
  name: GetSecurityStampAsync(TUser, CancellationToken)
  nameWithType: IUserSecurityStampStore<TUser>.GetSecurityStampAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserSecurityStampStore<TUser>.GetSecurityStampAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserSecurityStampStore(Of TUser).GetSecurityStampAsync(TUser, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserSecurityStampStore(Of TUser).GetSecurityStampAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserSecurityStampStore`1.GetSecurityStampAsync(`0,System.Threading.CancellationToken)
    name: GetSecurityStampAsync
    nameWithType: IUserSecurityStampStore<TUser>.GetSecurityStampAsync
    fullName: Microsoft.AspNetCore.Identity.IUserSecurityStampStore<TUser>.GetSecurityStampAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserSecurityStampStore`1.GetSecurityStampAsync(`0,System.Threading.CancellationToken)
    name: GetSecurityStampAsync
    nameWithType: IUserSecurityStampStore(Of TUser).GetSecurityStampAsync
    fullName: Microsoft.AspNetCore.Identity.IUserSecurityStampStore(Of TUser).GetSecurityStampAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.SetEmailAsync*
  commentId: Overload:Hybrid.Zero.Identity.Entities.UserStoreBase`12.SetEmailAsync
  name: SetEmailAsync
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.SetEmailAsync
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.SetEmailAsync
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).SetEmailAsync
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).SetEmailAsync
- uid: Microsoft.AspNetCore.Identity.IUserEmailStore{{TUser}}.SetEmailAsync({TUser},System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserEmailStore{`0}.SetEmailAsync(`0,System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserEmailStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserEmailStore`1.SetEmailAsync(`0,System.String,System.Threading.CancellationToken)
  name: SetEmailAsync(TUser, String, CancellationToken)
  nameWithType: IUserEmailStore<TUser>.SetEmailAsync(TUser, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserEmailStore<TUser>.SetEmailAsync(TUser, System.String, System.Threading.CancellationToken)
  nameWithType.vb: IUserEmailStore(Of TUser).SetEmailAsync(TUser, String, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserEmailStore(Of TUser).SetEmailAsync(TUser, System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserEmailStore`1.SetEmailAsync(`0,System.String,System.Threading.CancellationToken)
    name: SetEmailAsync
    nameWithType: IUserEmailStore<TUser>.SetEmailAsync
    fullName: Microsoft.AspNetCore.Identity.IUserEmailStore<TUser>.SetEmailAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserEmailStore`1.SetEmailAsync(`0,System.String,System.Threading.CancellationToken)
    name: SetEmailAsync
    nameWithType: IUserEmailStore(Of TUser).SetEmailAsync
    fullName: Microsoft.AspNetCore.Identity.IUserEmailStore(Of TUser).SetEmailAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserEmailStore`1.SetEmailAsync(`0,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserEmailStore`1.SetEmailAsync(`0,System.String,System.Threading.CancellationToken)
  isExternal: true
  name: SetEmailAsync(TUser, String, CancellationToken)
  nameWithType: IUserEmailStore<TUser>.SetEmailAsync(TUser, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserEmailStore<TUser>.SetEmailAsync(TUser, System.String, System.Threading.CancellationToken)
  nameWithType.vb: IUserEmailStore(Of TUser).SetEmailAsync(TUser, String, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserEmailStore(Of TUser).SetEmailAsync(TUser, System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserEmailStore`1.SetEmailAsync(`0,System.String,System.Threading.CancellationToken)
    name: SetEmailAsync
    nameWithType: IUserEmailStore<TUser>.SetEmailAsync
    fullName: Microsoft.AspNetCore.Identity.IUserEmailStore<TUser>.SetEmailAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserEmailStore`1.SetEmailAsync(`0,System.String,System.Threading.CancellationToken)
    name: SetEmailAsync
    nameWithType: IUserEmailStore(Of TUser).SetEmailAsync
    fullName: Microsoft.AspNetCore.Identity.IUserEmailStore(Of TUser).SetEmailAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetEmailAsync*
  commentId: Overload:Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetEmailAsync
  name: GetEmailAsync
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.GetEmailAsync
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.GetEmailAsync
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).GetEmailAsync
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).GetEmailAsync
- uid: Microsoft.AspNetCore.Identity.IUserEmailStore{{TUser}}.GetEmailAsync({TUser},System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserEmailStore{`0}.GetEmailAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserEmailStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserEmailStore`1.GetEmailAsync(`0,System.Threading.CancellationToken)
  name: GetEmailAsync(TUser, CancellationToken)
  nameWithType: IUserEmailStore<TUser>.GetEmailAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserEmailStore<TUser>.GetEmailAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserEmailStore(Of TUser).GetEmailAsync(TUser, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserEmailStore(Of TUser).GetEmailAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserEmailStore`1.GetEmailAsync(`0,System.Threading.CancellationToken)
    name: GetEmailAsync
    nameWithType: IUserEmailStore<TUser>.GetEmailAsync
    fullName: Microsoft.AspNetCore.Identity.IUserEmailStore<TUser>.GetEmailAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserEmailStore`1.GetEmailAsync(`0,System.Threading.CancellationToken)
    name: GetEmailAsync
    nameWithType: IUserEmailStore(Of TUser).GetEmailAsync
    fullName: Microsoft.AspNetCore.Identity.IUserEmailStore(Of TUser).GetEmailAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserEmailStore`1.GetEmailAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserEmailStore`1.GetEmailAsync(`0,System.Threading.CancellationToken)
  isExternal: true
  name: GetEmailAsync(TUser, CancellationToken)
  nameWithType: IUserEmailStore<TUser>.GetEmailAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserEmailStore<TUser>.GetEmailAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserEmailStore(Of TUser).GetEmailAsync(TUser, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserEmailStore(Of TUser).GetEmailAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserEmailStore`1.GetEmailAsync(`0,System.Threading.CancellationToken)
    name: GetEmailAsync
    nameWithType: IUserEmailStore<TUser>.GetEmailAsync
    fullName: Microsoft.AspNetCore.Identity.IUserEmailStore<TUser>.GetEmailAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserEmailStore`1.GetEmailAsync(`0,System.Threading.CancellationToken)
    name: GetEmailAsync
    nameWithType: IUserEmailStore(Of TUser).GetEmailAsync
    fullName: Microsoft.AspNetCore.Identity.IUserEmailStore(Of TUser).GetEmailAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetEmailConfirmedAsync*
  commentId: Overload:Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetEmailConfirmedAsync
  name: GetEmailConfirmedAsync
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.GetEmailConfirmedAsync
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.GetEmailConfirmedAsync
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).GetEmailConfirmedAsync
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).GetEmailConfirmedAsync
- uid: Microsoft.AspNetCore.Identity.IUserEmailStore{{TUser}}.GetEmailConfirmedAsync({TUser},System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserEmailStore{`0}.GetEmailConfirmedAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserEmailStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserEmailStore`1.GetEmailConfirmedAsync(`0,System.Threading.CancellationToken)
  name: GetEmailConfirmedAsync(TUser, CancellationToken)
  nameWithType: IUserEmailStore<TUser>.GetEmailConfirmedAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserEmailStore<TUser>.GetEmailConfirmedAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserEmailStore(Of TUser).GetEmailConfirmedAsync(TUser, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserEmailStore(Of TUser).GetEmailConfirmedAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserEmailStore`1.GetEmailConfirmedAsync(`0,System.Threading.CancellationToken)
    name: GetEmailConfirmedAsync
    nameWithType: IUserEmailStore<TUser>.GetEmailConfirmedAsync
    fullName: Microsoft.AspNetCore.Identity.IUserEmailStore<TUser>.GetEmailConfirmedAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserEmailStore`1.GetEmailConfirmedAsync(`0,System.Threading.CancellationToken)
    name: GetEmailConfirmedAsync
    nameWithType: IUserEmailStore(Of TUser).GetEmailConfirmedAsync
    fullName: Microsoft.AspNetCore.Identity.IUserEmailStore(Of TUser).GetEmailConfirmedAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserEmailStore`1.GetEmailConfirmedAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserEmailStore`1.GetEmailConfirmedAsync(`0,System.Threading.CancellationToken)
  isExternal: true
  name: GetEmailConfirmedAsync(TUser, CancellationToken)
  nameWithType: IUserEmailStore<TUser>.GetEmailConfirmedAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserEmailStore<TUser>.GetEmailConfirmedAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserEmailStore(Of TUser).GetEmailConfirmedAsync(TUser, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserEmailStore(Of TUser).GetEmailConfirmedAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserEmailStore`1.GetEmailConfirmedAsync(`0,System.Threading.CancellationToken)
    name: GetEmailConfirmedAsync
    nameWithType: IUserEmailStore<TUser>.GetEmailConfirmedAsync
    fullName: Microsoft.AspNetCore.Identity.IUserEmailStore<TUser>.GetEmailConfirmedAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserEmailStore`1.GetEmailConfirmedAsync(`0,System.Threading.CancellationToken)
    name: GetEmailConfirmedAsync
    nameWithType: IUserEmailStore(Of TUser).GetEmailConfirmedAsync
    fullName: Microsoft.AspNetCore.Identity.IUserEmailStore(Of TUser).GetEmailConfirmedAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.SetEmailConfirmedAsync*
  commentId: Overload:Hybrid.Zero.Identity.Entities.UserStoreBase`12.SetEmailConfirmedAsync
  name: SetEmailConfirmedAsync
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.SetEmailConfirmedAsync
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.SetEmailConfirmedAsync
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).SetEmailConfirmedAsync
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).SetEmailConfirmedAsync
- uid: Microsoft.AspNetCore.Identity.IUserEmailStore{{TUser}}.SetEmailConfirmedAsync({TUser},System.Boolean,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserEmailStore{`0}.SetEmailConfirmedAsync(`0,System.Boolean,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserEmailStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserEmailStore`1.SetEmailConfirmedAsync(`0,System.Boolean,System.Threading.CancellationToken)
  name: SetEmailConfirmedAsync(TUser, Boolean, CancellationToken)
  nameWithType: IUserEmailStore<TUser>.SetEmailConfirmedAsync(TUser, Boolean, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserEmailStore<TUser>.SetEmailConfirmedAsync(TUser, System.Boolean, System.Threading.CancellationToken)
  nameWithType.vb: IUserEmailStore(Of TUser).SetEmailConfirmedAsync(TUser, Boolean, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserEmailStore(Of TUser).SetEmailConfirmedAsync(TUser, System.Boolean, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserEmailStore`1.SetEmailConfirmedAsync(`0,System.Boolean,System.Threading.CancellationToken)
    name: SetEmailConfirmedAsync
    nameWithType: IUserEmailStore<TUser>.SetEmailConfirmedAsync
    fullName: Microsoft.AspNetCore.Identity.IUserEmailStore<TUser>.SetEmailConfirmedAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserEmailStore`1.SetEmailConfirmedAsync(`0,System.Boolean,System.Threading.CancellationToken)
    name: SetEmailConfirmedAsync
    nameWithType: IUserEmailStore(Of TUser).SetEmailConfirmedAsync
    fullName: Microsoft.AspNetCore.Identity.IUserEmailStore(Of TUser).SetEmailConfirmedAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.AspNetCore.Identity.IUserEmailStore`1.SetEmailConfirmedAsync(`0,System.Boolean,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserEmailStore`1.SetEmailConfirmedAsync(`0,System.Boolean,System.Threading.CancellationToken)
  isExternal: true
  name: SetEmailConfirmedAsync(TUser, Boolean, CancellationToken)
  nameWithType: IUserEmailStore<TUser>.SetEmailConfirmedAsync(TUser, Boolean, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserEmailStore<TUser>.SetEmailConfirmedAsync(TUser, System.Boolean, System.Threading.CancellationToken)
  nameWithType.vb: IUserEmailStore(Of TUser).SetEmailConfirmedAsync(TUser, Boolean, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserEmailStore(Of TUser).SetEmailConfirmedAsync(TUser, System.Boolean, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserEmailStore`1.SetEmailConfirmedAsync(`0,System.Boolean,System.Threading.CancellationToken)
    name: SetEmailConfirmedAsync
    nameWithType: IUserEmailStore<TUser>.SetEmailConfirmedAsync
    fullName: Microsoft.AspNetCore.Identity.IUserEmailStore<TUser>.SetEmailConfirmedAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserEmailStore`1.SetEmailConfirmedAsync(`0,System.Boolean,System.Threading.CancellationToken)
    name: SetEmailConfirmedAsync
    nameWithType: IUserEmailStore(Of TUser).SetEmailConfirmedAsync
    fullName: Microsoft.AspNetCore.Identity.IUserEmailStore(Of TUser).SetEmailConfirmedAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.FindByEmailAsync*
  commentId: Overload:Hybrid.Zero.Identity.Entities.UserStoreBase`12.FindByEmailAsync
  name: FindByEmailAsync
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.FindByEmailAsync
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.FindByEmailAsync
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).FindByEmailAsync
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).FindByEmailAsync
- uid: Microsoft.AspNetCore.Identity.IUserEmailStore{{TUser}}.FindByEmailAsync(System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserEmailStore{`0}.FindByEmailAsync(System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserEmailStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserEmailStore`1.FindByEmailAsync(System.String,System.Threading.CancellationToken)
  name: FindByEmailAsync(String, CancellationToken)
  nameWithType: IUserEmailStore<TUser>.FindByEmailAsync(String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserEmailStore<TUser>.FindByEmailAsync(System.String, System.Threading.CancellationToken)
  nameWithType.vb: IUserEmailStore(Of TUser).FindByEmailAsync(String, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserEmailStore(Of TUser).FindByEmailAsync(System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserEmailStore`1.FindByEmailAsync(System.String,System.Threading.CancellationToken)
    name: FindByEmailAsync
    nameWithType: IUserEmailStore<TUser>.FindByEmailAsync
    fullName: Microsoft.AspNetCore.Identity.IUserEmailStore<TUser>.FindByEmailAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserEmailStore`1.FindByEmailAsync(System.String,System.Threading.CancellationToken)
    name: FindByEmailAsync
    nameWithType: IUserEmailStore(Of TUser).FindByEmailAsync
    fullName: Microsoft.AspNetCore.Identity.IUserEmailStore(Of TUser).FindByEmailAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserEmailStore`1.FindByEmailAsync(System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserEmailStore`1.FindByEmailAsync(System.String,System.Threading.CancellationToken)
  isExternal: true
  name: FindByEmailAsync(String, CancellationToken)
  nameWithType: IUserEmailStore<TUser>.FindByEmailAsync(String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserEmailStore<TUser>.FindByEmailAsync(System.String, System.Threading.CancellationToken)
  nameWithType.vb: IUserEmailStore(Of TUser).FindByEmailAsync(String, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserEmailStore(Of TUser).FindByEmailAsync(System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserEmailStore`1.FindByEmailAsync(System.String,System.Threading.CancellationToken)
    name: FindByEmailAsync
    nameWithType: IUserEmailStore<TUser>.FindByEmailAsync
    fullName: Microsoft.AspNetCore.Identity.IUserEmailStore<TUser>.FindByEmailAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserEmailStore`1.FindByEmailAsync(System.String,System.Threading.CancellationToken)
    name: FindByEmailAsync
    nameWithType: IUserEmailStore(Of TUser).FindByEmailAsync
    fullName: Microsoft.AspNetCore.Identity.IUserEmailStore(Of TUser).FindByEmailAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetNormalizedEmailAsync*
  commentId: Overload:Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetNormalizedEmailAsync
  name: GetNormalizedEmailAsync
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.GetNormalizedEmailAsync
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.GetNormalizedEmailAsync
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).GetNormalizedEmailAsync
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).GetNormalizedEmailAsync
- uid: Microsoft.AspNetCore.Identity.IUserEmailStore{{TUser}}.GetNormalizedEmailAsync({TUser},System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserEmailStore{`0}.GetNormalizedEmailAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserEmailStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserEmailStore`1.GetNormalizedEmailAsync(`0,System.Threading.CancellationToken)
  name: GetNormalizedEmailAsync(TUser, CancellationToken)
  nameWithType: IUserEmailStore<TUser>.GetNormalizedEmailAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserEmailStore<TUser>.GetNormalizedEmailAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserEmailStore(Of TUser).GetNormalizedEmailAsync(TUser, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserEmailStore(Of TUser).GetNormalizedEmailAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserEmailStore`1.GetNormalizedEmailAsync(`0,System.Threading.CancellationToken)
    name: GetNormalizedEmailAsync
    nameWithType: IUserEmailStore<TUser>.GetNormalizedEmailAsync
    fullName: Microsoft.AspNetCore.Identity.IUserEmailStore<TUser>.GetNormalizedEmailAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserEmailStore`1.GetNormalizedEmailAsync(`0,System.Threading.CancellationToken)
    name: GetNormalizedEmailAsync
    nameWithType: IUserEmailStore(Of TUser).GetNormalizedEmailAsync
    fullName: Microsoft.AspNetCore.Identity.IUserEmailStore(Of TUser).GetNormalizedEmailAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserEmailStore`1.GetNormalizedEmailAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserEmailStore`1.GetNormalizedEmailAsync(`0,System.Threading.CancellationToken)
  isExternal: true
  name: GetNormalizedEmailAsync(TUser, CancellationToken)
  nameWithType: IUserEmailStore<TUser>.GetNormalizedEmailAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserEmailStore<TUser>.GetNormalizedEmailAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserEmailStore(Of TUser).GetNormalizedEmailAsync(TUser, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserEmailStore(Of TUser).GetNormalizedEmailAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserEmailStore`1.GetNormalizedEmailAsync(`0,System.Threading.CancellationToken)
    name: GetNormalizedEmailAsync
    nameWithType: IUserEmailStore<TUser>.GetNormalizedEmailAsync
    fullName: Microsoft.AspNetCore.Identity.IUserEmailStore<TUser>.GetNormalizedEmailAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserEmailStore`1.GetNormalizedEmailAsync(`0,System.Threading.CancellationToken)
    name: GetNormalizedEmailAsync
    nameWithType: IUserEmailStore(Of TUser).GetNormalizedEmailAsync
    fullName: Microsoft.AspNetCore.Identity.IUserEmailStore(Of TUser).GetNormalizedEmailAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.SetNormalizedEmailAsync*
  commentId: Overload:Hybrid.Zero.Identity.Entities.UserStoreBase`12.SetNormalizedEmailAsync
  name: SetNormalizedEmailAsync
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.SetNormalizedEmailAsync
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.SetNormalizedEmailAsync
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).SetNormalizedEmailAsync
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).SetNormalizedEmailAsync
- uid: Microsoft.AspNetCore.Identity.IUserEmailStore{{TUser}}.SetNormalizedEmailAsync({TUser},System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserEmailStore{`0}.SetNormalizedEmailAsync(`0,System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserEmailStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserEmailStore`1.SetNormalizedEmailAsync(`0,System.String,System.Threading.CancellationToken)
  name: SetNormalizedEmailAsync(TUser, String, CancellationToken)
  nameWithType: IUserEmailStore<TUser>.SetNormalizedEmailAsync(TUser, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserEmailStore<TUser>.SetNormalizedEmailAsync(TUser, System.String, System.Threading.CancellationToken)
  nameWithType.vb: IUserEmailStore(Of TUser).SetNormalizedEmailAsync(TUser, String, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserEmailStore(Of TUser).SetNormalizedEmailAsync(TUser, System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserEmailStore`1.SetNormalizedEmailAsync(`0,System.String,System.Threading.CancellationToken)
    name: SetNormalizedEmailAsync
    nameWithType: IUserEmailStore<TUser>.SetNormalizedEmailAsync
    fullName: Microsoft.AspNetCore.Identity.IUserEmailStore<TUser>.SetNormalizedEmailAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserEmailStore`1.SetNormalizedEmailAsync(`0,System.String,System.Threading.CancellationToken)
    name: SetNormalizedEmailAsync
    nameWithType: IUserEmailStore(Of TUser).SetNormalizedEmailAsync
    fullName: Microsoft.AspNetCore.Identity.IUserEmailStore(Of TUser).SetNormalizedEmailAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserEmailStore`1.SetNormalizedEmailAsync(`0,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserEmailStore`1.SetNormalizedEmailAsync(`0,System.String,System.Threading.CancellationToken)
  isExternal: true
  name: SetNormalizedEmailAsync(TUser, String, CancellationToken)
  nameWithType: IUserEmailStore<TUser>.SetNormalizedEmailAsync(TUser, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserEmailStore<TUser>.SetNormalizedEmailAsync(TUser, System.String, System.Threading.CancellationToken)
  nameWithType.vb: IUserEmailStore(Of TUser).SetNormalizedEmailAsync(TUser, String, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserEmailStore(Of TUser).SetNormalizedEmailAsync(TUser, System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserEmailStore`1.SetNormalizedEmailAsync(`0,System.String,System.Threading.CancellationToken)
    name: SetNormalizedEmailAsync
    nameWithType: IUserEmailStore<TUser>.SetNormalizedEmailAsync
    fullName: Microsoft.AspNetCore.Identity.IUserEmailStore<TUser>.SetNormalizedEmailAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserEmailStore`1.SetNormalizedEmailAsync(`0,System.String,System.Threading.CancellationToken)
    name: SetNormalizedEmailAsync
    nameWithType: IUserEmailStore(Of TUser).SetNormalizedEmailAsync
    fullName: Microsoft.AspNetCore.Identity.IUserEmailStore(Of TUser).SetNormalizedEmailAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.DateTimeOffset
  commentId: T:System.DateTimeOffset
  parent: System
  isExternal: true
  name: DateTimeOffset
  nameWithType: DateTimeOffset
  fullName: System.DateTimeOffset
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetLockoutEndDateAsync*
  commentId: Overload:Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetLockoutEndDateAsync
  name: GetLockoutEndDateAsync
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.GetLockoutEndDateAsync
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.GetLockoutEndDateAsync
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).GetLockoutEndDateAsync
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).GetLockoutEndDateAsync
- uid: Microsoft.AspNetCore.Identity.IUserLockoutStore{{TUser}}.GetLockoutEndDateAsync({TUser},System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserLockoutStore{`0}.GetLockoutEndDateAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserLockoutStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserLockoutStore`1.GetLockoutEndDateAsync(`0,System.Threading.CancellationToken)
  name: GetLockoutEndDateAsync(TUser, CancellationToken)
  nameWithType: IUserLockoutStore<TUser>.GetLockoutEndDateAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore<TUser>.GetLockoutEndDateAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserLockoutStore(Of TUser).GetLockoutEndDateAsync(TUser, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserLockoutStore(Of TUser).GetLockoutEndDateAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserLockoutStore`1.GetLockoutEndDateAsync(`0,System.Threading.CancellationToken)
    name: GetLockoutEndDateAsync
    nameWithType: IUserLockoutStore<TUser>.GetLockoutEndDateAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore<TUser>.GetLockoutEndDateAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserLockoutStore`1.GetLockoutEndDateAsync(`0,System.Threading.CancellationToken)
    name: GetLockoutEndDateAsync
    nameWithType: IUserLockoutStore(Of TUser).GetLockoutEndDateAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore(Of TUser).GetLockoutEndDateAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.Nullable{System.DateTimeOffset}}
  commentId: T:System.Threading.Tasks.Task{System.Nullable{System.DateTimeOffset}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Nullable<DateTimeOffset>>
  nameWithType: Task<Nullable<DateTimeOffset>>
  fullName: System.Threading.Tasks.Task<System.Nullable<System.DateTimeOffset>>
  nameWithType.vb: Task(Of Nullable(Of DateTimeOffset))
  fullName.vb: System.Threading.Tasks.Task(Of System.Nullable(Of System.DateTimeOffset))
  name.vb: Task(Of Nullable(Of DateTimeOffset))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.DateTimeOffset
    name: DateTimeOffset
    nameWithType: DateTimeOffset
    fullName: System.DateTimeOffset
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.DateTimeOffset
    name: DateTimeOffset
    nameWithType: DateTimeOffset
    fullName: System.DateTimeOffset
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserLockoutStore`1.GetLockoutEndDateAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserLockoutStore`1.GetLockoutEndDateAsync(`0,System.Threading.CancellationToken)
  isExternal: true
  name: GetLockoutEndDateAsync(TUser, CancellationToken)
  nameWithType: IUserLockoutStore<TUser>.GetLockoutEndDateAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore<TUser>.GetLockoutEndDateAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserLockoutStore(Of TUser).GetLockoutEndDateAsync(TUser, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserLockoutStore(Of TUser).GetLockoutEndDateAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserLockoutStore`1.GetLockoutEndDateAsync(`0,System.Threading.CancellationToken)
    name: GetLockoutEndDateAsync
    nameWithType: IUserLockoutStore<TUser>.GetLockoutEndDateAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore<TUser>.GetLockoutEndDateAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserLockoutStore`1.GetLockoutEndDateAsync(`0,System.Threading.CancellationToken)
    name: GetLockoutEndDateAsync
    nameWithType: IUserLockoutStore(Of TUser).GetLockoutEndDateAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore(Of TUser).GetLockoutEndDateAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.SetLockoutEndDateAsync*
  commentId: Overload:Hybrid.Zero.Identity.Entities.UserStoreBase`12.SetLockoutEndDateAsync
  name: SetLockoutEndDateAsync
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.SetLockoutEndDateAsync
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.SetLockoutEndDateAsync
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).SetLockoutEndDateAsync
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).SetLockoutEndDateAsync
- uid: Microsoft.AspNetCore.Identity.IUserLockoutStore{{TUser}}.SetLockoutEndDateAsync({TUser},System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserLockoutStore{`0}.SetLockoutEndDateAsync(`0,System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserLockoutStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserLockoutStore`1.SetLockoutEndDateAsync(`0,System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)
  name: SetLockoutEndDateAsync(TUser, Nullable<DateTimeOffset>, CancellationToken)
  nameWithType: IUserLockoutStore<TUser>.SetLockoutEndDateAsync(TUser, Nullable<DateTimeOffset>, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore<TUser>.SetLockoutEndDateAsync(TUser, System.Nullable<System.DateTimeOffset>, System.Threading.CancellationToken)
  nameWithType.vb: IUserLockoutStore(Of TUser).SetLockoutEndDateAsync(TUser, Nullable(Of DateTimeOffset), CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserLockoutStore(Of TUser).SetLockoutEndDateAsync(TUser, System.Nullable(Of System.DateTimeOffset), System.Threading.CancellationToken)
  name.vb: SetLockoutEndDateAsync(TUser, Nullable(Of DateTimeOffset), CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserLockoutStore`1.SetLockoutEndDateAsync(`0,System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)
    name: SetLockoutEndDateAsync
    nameWithType: IUserLockoutStore<TUser>.SetLockoutEndDateAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore<TUser>.SetLockoutEndDateAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.DateTimeOffset
    name: DateTimeOffset
    nameWithType: DateTimeOffset
    fullName: System.DateTimeOffset
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserLockoutStore`1.SetLockoutEndDateAsync(`0,System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)
    name: SetLockoutEndDateAsync
    nameWithType: IUserLockoutStore(Of TUser).SetLockoutEndDateAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore(Of TUser).SetLockoutEndDateAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.DateTimeOffset
    name: DateTimeOffset
    nameWithType: DateTimeOffset
    fullName: System.DateTimeOffset
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable{System.DateTimeOffset}
  commentId: T:System.Nullable{System.DateTimeOffset}
  parent: System
  definition: System.Nullable`1
  name: Nullable<DateTimeOffset>
  nameWithType: Nullable<DateTimeOffset>
  fullName: System.Nullable<System.DateTimeOffset>
  nameWithType.vb: Nullable(Of DateTimeOffset)
  fullName.vb: System.Nullable(Of System.DateTimeOffset)
  name.vb: Nullable(Of DateTimeOffset)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.DateTimeOffset
    name: DateTimeOffset
    nameWithType: DateTimeOffset
    fullName: System.DateTimeOffset
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.DateTimeOffset
    name: DateTimeOffset
    nameWithType: DateTimeOffset
    fullName: System.DateTimeOffset
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserLockoutStore`1.SetLockoutEndDateAsync(`0,System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserLockoutStore`1.SetLockoutEndDateAsync(`0,System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)
  isExternal: true
  name: SetLockoutEndDateAsync(TUser, Nullable<DateTimeOffset>, CancellationToken)
  nameWithType: IUserLockoutStore<TUser>.SetLockoutEndDateAsync(TUser, Nullable<DateTimeOffset>, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore<TUser>.SetLockoutEndDateAsync(TUser, System.Nullable<System.DateTimeOffset>, System.Threading.CancellationToken)
  nameWithType.vb: IUserLockoutStore(Of TUser).SetLockoutEndDateAsync(TUser, Nullable(Of DateTimeOffset), CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserLockoutStore(Of TUser).SetLockoutEndDateAsync(TUser, System.Nullable(Of System.DateTimeOffset), System.Threading.CancellationToken)
  name.vb: SetLockoutEndDateAsync(TUser, Nullable(Of DateTimeOffset), CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserLockoutStore`1.SetLockoutEndDateAsync(`0,System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)
    name: SetLockoutEndDateAsync
    nameWithType: IUserLockoutStore<TUser>.SetLockoutEndDateAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore<TUser>.SetLockoutEndDateAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.DateTimeOffset
    name: DateTimeOffset
    nameWithType: DateTimeOffset
    fullName: System.DateTimeOffset
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserLockoutStore`1.SetLockoutEndDateAsync(`0,System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)
    name: SetLockoutEndDateAsync
    nameWithType: IUserLockoutStore(Of TUser).SetLockoutEndDateAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore(Of TUser).SetLockoutEndDateAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.DateTimeOffset
    name: DateTimeOffset
    nameWithType: DateTimeOffset
    fullName: System.DateTimeOffset
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.IncrementAccessFailedCountAsync*
  commentId: Overload:Hybrid.Zero.Identity.Entities.UserStoreBase`12.IncrementAccessFailedCountAsync
  name: IncrementAccessFailedCountAsync
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.IncrementAccessFailedCountAsync
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.IncrementAccessFailedCountAsync
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).IncrementAccessFailedCountAsync
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).IncrementAccessFailedCountAsync
- uid: Microsoft.AspNetCore.Identity.IUserLockoutStore{{TUser}}.IncrementAccessFailedCountAsync({TUser},System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserLockoutStore{`0}.IncrementAccessFailedCountAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserLockoutStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserLockoutStore`1.IncrementAccessFailedCountAsync(`0,System.Threading.CancellationToken)
  name: IncrementAccessFailedCountAsync(TUser, CancellationToken)
  nameWithType: IUserLockoutStore<TUser>.IncrementAccessFailedCountAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore<TUser>.IncrementAccessFailedCountAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserLockoutStore(Of TUser).IncrementAccessFailedCountAsync(TUser, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserLockoutStore(Of TUser).IncrementAccessFailedCountAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserLockoutStore`1.IncrementAccessFailedCountAsync(`0,System.Threading.CancellationToken)
    name: IncrementAccessFailedCountAsync
    nameWithType: IUserLockoutStore<TUser>.IncrementAccessFailedCountAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore<TUser>.IncrementAccessFailedCountAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserLockoutStore`1.IncrementAccessFailedCountAsync(`0,System.Threading.CancellationToken)
    name: IncrementAccessFailedCountAsync
    nameWithType: IUserLockoutStore(Of TUser).IncrementAccessFailedCountAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore(Of TUser).IncrementAccessFailedCountAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.Int32}
  commentId: T:System.Threading.Tasks.Task{System.Int32}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Int32>
  nameWithType: Task<Int32>
  fullName: System.Threading.Tasks.Task<System.Int32>
  nameWithType.vb: Task(Of Int32)
  fullName.vb: System.Threading.Tasks.Task(Of System.Int32)
  name.vb: Task(Of Int32)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserLockoutStore`1.IncrementAccessFailedCountAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserLockoutStore`1.IncrementAccessFailedCountAsync(`0,System.Threading.CancellationToken)
  isExternal: true
  name: IncrementAccessFailedCountAsync(TUser, CancellationToken)
  nameWithType: IUserLockoutStore<TUser>.IncrementAccessFailedCountAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore<TUser>.IncrementAccessFailedCountAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserLockoutStore(Of TUser).IncrementAccessFailedCountAsync(TUser, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserLockoutStore(Of TUser).IncrementAccessFailedCountAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserLockoutStore`1.IncrementAccessFailedCountAsync(`0,System.Threading.CancellationToken)
    name: IncrementAccessFailedCountAsync
    nameWithType: IUserLockoutStore<TUser>.IncrementAccessFailedCountAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore<TUser>.IncrementAccessFailedCountAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserLockoutStore`1.IncrementAccessFailedCountAsync(`0,System.Threading.CancellationToken)
    name: IncrementAccessFailedCountAsync
    nameWithType: IUserLockoutStore(Of TUser).IncrementAccessFailedCountAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore(Of TUser).IncrementAccessFailedCountAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.ResetAccessFailedCountAsync*
  commentId: Overload:Hybrid.Zero.Identity.Entities.UserStoreBase`12.ResetAccessFailedCountAsync
  name: ResetAccessFailedCountAsync
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.ResetAccessFailedCountAsync
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.ResetAccessFailedCountAsync
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).ResetAccessFailedCountAsync
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).ResetAccessFailedCountAsync
- uid: Microsoft.AspNetCore.Identity.IUserLockoutStore{{TUser}}.ResetAccessFailedCountAsync({TUser},System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserLockoutStore{`0}.ResetAccessFailedCountAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserLockoutStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserLockoutStore`1.ResetAccessFailedCountAsync(`0,System.Threading.CancellationToken)
  name: ResetAccessFailedCountAsync(TUser, CancellationToken)
  nameWithType: IUserLockoutStore<TUser>.ResetAccessFailedCountAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore<TUser>.ResetAccessFailedCountAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserLockoutStore(Of TUser).ResetAccessFailedCountAsync(TUser, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserLockoutStore(Of TUser).ResetAccessFailedCountAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserLockoutStore`1.ResetAccessFailedCountAsync(`0,System.Threading.CancellationToken)
    name: ResetAccessFailedCountAsync
    nameWithType: IUserLockoutStore<TUser>.ResetAccessFailedCountAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore<TUser>.ResetAccessFailedCountAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserLockoutStore`1.ResetAccessFailedCountAsync(`0,System.Threading.CancellationToken)
    name: ResetAccessFailedCountAsync
    nameWithType: IUserLockoutStore(Of TUser).ResetAccessFailedCountAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore(Of TUser).ResetAccessFailedCountAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserLockoutStore`1.ResetAccessFailedCountAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserLockoutStore`1.ResetAccessFailedCountAsync(`0,System.Threading.CancellationToken)
  isExternal: true
  name: ResetAccessFailedCountAsync(TUser, CancellationToken)
  nameWithType: IUserLockoutStore<TUser>.ResetAccessFailedCountAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore<TUser>.ResetAccessFailedCountAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserLockoutStore(Of TUser).ResetAccessFailedCountAsync(TUser, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserLockoutStore(Of TUser).ResetAccessFailedCountAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserLockoutStore`1.ResetAccessFailedCountAsync(`0,System.Threading.CancellationToken)
    name: ResetAccessFailedCountAsync
    nameWithType: IUserLockoutStore<TUser>.ResetAccessFailedCountAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore<TUser>.ResetAccessFailedCountAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserLockoutStore`1.ResetAccessFailedCountAsync(`0,System.Threading.CancellationToken)
    name: ResetAccessFailedCountAsync
    nameWithType: IUserLockoutStore(Of TUser).ResetAccessFailedCountAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore(Of TUser).ResetAccessFailedCountAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetAccessFailedCountAsync*
  commentId: Overload:Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetAccessFailedCountAsync
  name: GetAccessFailedCountAsync
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.GetAccessFailedCountAsync
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.GetAccessFailedCountAsync
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).GetAccessFailedCountAsync
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).GetAccessFailedCountAsync
- uid: Microsoft.AspNetCore.Identity.IUserLockoutStore{{TUser}}.GetAccessFailedCountAsync({TUser},System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserLockoutStore{`0}.GetAccessFailedCountAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserLockoutStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserLockoutStore`1.GetAccessFailedCountAsync(`0,System.Threading.CancellationToken)
  name: GetAccessFailedCountAsync(TUser, CancellationToken)
  nameWithType: IUserLockoutStore<TUser>.GetAccessFailedCountAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore<TUser>.GetAccessFailedCountAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserLockoutStore(Of TUser).GetAccessFailedCountAsync(TUser, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserLockoutStore(Of TUser).GetAccessFailedCountAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserLockoutStore`1.GetAccessFailedCountAsync(`0,System.Threading.CancellationToken)
    name: GetAccessFailedCountAsync
    nameWithType: IUserLockoutStore<TUser>.GetAccessFailedCountAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore<TUser>.GetAccessFailedCountAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserLockoutStore`1.GetAccessFailedCountAsync(`0,System.Threading.CancellationToken)
    name: GetAccessFailedCountAsync
    nameWithType: IUserLockoutStore(Of TUser).GetAccessFailedCountAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore(Of TUser).GetAccessFailedCountAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserLockoutStore`1.GetAccessFailedCountAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserLockoutStore`1.GetAccessFailedCountAsync(`0,System.Threading.CancellationToken)
  isExternal: true
  name: GetAccessFailedCountAsync(TUser, CancellationToken)
  nameWithType: IUserLockoutStore<TUser>.GetAccessFailedCountAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore<TUser>.GetAccessFailedCountAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserLockoutStore(Of TUser).GetAccessFailedCountAsync(TUser, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserLockoutStore(Of TUser).GetAccessFailedCountAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserLockoutStore`1.GetAccessFailedCountAsync(`0,System.Threading.CancellationToken)
    name: GetAccessFailedCountAsync
    nameWithType: IUserLockoutStore<TUser>.GetAccessFailedCountAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore<TUser>.GetAccessFailedCountAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserLockoutStore`1.GetAccessFailedCountAsync(`0,System.Threading.CancellationToken)
    name: GetAccessFailedCountAsync
    nameWithType: IUserLockoutStore(Of TUser).GetAccessFailedCountAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore(Of TUser).GetAccessFailedCountAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetLockoutEnabledAsync*
  commentId: Overload:Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetLockoutEnabledAsync
  name: GetLockoutEnabledAsync
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.GetLockoutEnabledAsync
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.GetLockoutEnabledAsync
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).GetLockoutEnabledAsync
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).GetLockoutEnabledAsync
- uid: Microsoft.AspNetCore.Identity.IUserLockoutStore{{TUser}}.GetLockoutEnabledAsync({TUser},System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserLockoutStore{`0}.GetLockoutEnabledAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserLockoutStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserLockoutStore`1.GetLockoutEnabledAsync(`0,System.Threading.CancellationToken)
  name: GetLockoutEnabledAsync(TUser, CancellationToken)
  nameWithType: IUserLockoutStore<TUser>.GetLockoutEnabledAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore<TUser>.GetLockoutEnabledAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserLockoutStore(Of TUser).GetLockoutEnabledAsync(TUser, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserLockoutStore(Of TUser).GetLockoutEnabledAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserLockoutStore`1.GetLockoutEnabledAsync(`0,System.Threading.CancellationToken)
    name: GetLockoutEnabledAsync
    nameWithType: IUserLockoutStore<TUser>.GetLockoutEnabledAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore<TUser>.GetLockoutEnabledAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserLockoutStore`1.GetLockoutEnabledAsync(`0,System.Threading.CancellationToken)
    name: GetLockoutEnabledAsync
    nameWithType: IUserLockoutStore(Of TUser).GetLockoutEnabledAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore(Of TUser).GetLockoutEnabledAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserLockoutStore`1.GetLockoutEnabledAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserLockoutStore`1.GetLockoutEnabledAsync(`0,System.Threading.CancellationToken)
  isExternal: true
  name: GetLockoutEnabledAsync(TUser, CancellationToken)
  nameWithType: IUserLockoutStore<TUser>.GetLockoutEnabledAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore<TUser>.GetLockoutEnabledAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserLockoutStore(Of TUser).GetLockoutEnabledAsync(TUser, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserLockoutStore(Of TUser).GetLockoutEnabledAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserLockoutStore`1.GetLockoutEnabledAsync(`0,System.Threading.CancellationToken)
    name: GetLockoutEnabledAsync
    nameWithType: IUserLockoutStore<TUser>.GetLockoutEnabledAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore<TUser>.GetLockoutEnabledAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserLockoutStore`1.GetLockoutEnabledAsync(`0,System.Threading.CancellationToken)
    name: GetLockoutEnabledAsync
    nameWithType: IUserLockoutStore(Of TUser).GetLockoutEnabledAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore(Of TUser).GetLockoutEnabledAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.SetLockoutEnabledAsync*
  commentId: Overload:Hybrid.Zero.Identity.Entities.UserStoreBase`12.SetLockoutEnabledAsync
  name: SetLockoutEnabledAsync
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.SetLockoutEnabledAsync
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.SetLockoutEnabledAsync
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).SetLockoutEnabledAsync
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).SetLockoutEnabledAsync
- uid: Microsoft.AspNetCore.Identity.IUserLockoutStore{{TUser}}.SetLockoutEnabledAsync({TUser},System.Boolean,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserLockoutStore{`0}.SetLockoutEnabledAsync(`0,System.Boolean,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserLockoutStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserLockoutStore`1.SetLockoutEnabledAsync(`0,System.Boolean,System.Threading.CancellationToken)
  name: SetLockoutEnabledAsync(TUser, Boolean, CancellationToken)
  nameWithType: IUserLockoutStore<TUser>.SetLockoutEnabledAsync(TUser, Boolean, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore<TUser>.SetLockoutEnabledAsync(TUser, System.Boolean, System.Threading.CancellationToken)
  nameWithType.vb: IUserLockoutStore(Of TUser).SetLockoutEnabledAsync(TUser, Boolean, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserLockoutStore(Of TUser).SetLockoutEnabledAsync(TUser, System.Boolean, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserLockoutStore`1.SetLockoutEnabledAsync(`0,System.Boolean,System.Threading.CancellationToken)
    name: SetLockoutEnabledAsync
    nameWithType: IUserLockoutStore<TUser>.SetLockoutEnabledAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore<TUser>.SetLockoutEnabledAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserLockoutStore`1.SetLockoutEnabledAsync(`0,System.Boolean,System.Threading.CancellationToken)
    name: SetLockoutEnabledAsync
    nameWithType: IUserLockoutStore(Of TUser).SetLockoutEnabledAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore(Of TUser).SetLockoutEnabledAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserLockoutStore`1.SetLockoutEnabledAsync(`0,System.Boolean,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserLockoutStore`1.SetLockoutEnabledAsync(`0,System.Boolean,System.Threading.CancellationToken)
  isExternal: true
  name: SetLockoutEnabledAsync(TUser, Boolean, CancellationToken)
  nameWithType: IUserLockoutStore<TUser>.SetLockoutEnabledAsync(TUser, Boolean, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore<TUser>.SetLockoutEnabledAsync(TUser, System.Boolean, System.Threading.CancellationToken)
  nameWithType.vb: IUserLockoutStore(Of TUser).SetLockoutEnabledAsync(TUser, Boolean, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserLockoutStore(Of TUser).SetLockoutEnabledAsync(TUser, System.Boolean, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserLockoutStore`1.SetLockoutEnabledAsync(`0,System.Boolean,System.Threading.CancellationToken)
    name: SetLockoutEnabledAsync
    nameWithType: IUserLockoutStore<TUser>.SetLockoutEnabledAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore<TUser>.SetLockoutEnabledAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserLockoutStore`1.SetLockoutEnabledAsync(`0,System.Boolean,System.Threading.CancellationToken)
    name: SetLockoutEnabledAsync
    nameWithType: IUserLockoutStore(Of TUser).SetLockoutEnabledAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore(Of TUser).SetLockoutEnabledAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.SetPhoneNumberAsync*
  commentId: Overload:Hybrid.Zero.Identity.Entities.UserStoreBase`12.SetPhoneNumberAsync
  name: SetPhoneNumberAsync
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.SetPhoneNumberAsync
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.SetPhoneNumberAsync
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).SetPhoneNumberAsync
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).SetPhoneNumberAsync
- uid: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore{{TUser}}.SetPhoneNumberAsync({TUser},System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserPhoneNumberStore{`0}.SetPhoneNumberAsync(`0,System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore`1.SetPhoneNumberAsync(`0,System.String,System.Threading.CancellationToken)
  name: SetPhoneNumberAsync(TUser, String, CancellationToken)
  nameWithType: IUserPhoneNumberStore<TUser>.SetPhoneNumberAsync(TUser, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore<TUser>.SetPhoneNumberAsync(TUser, System.String, System.Threading.CancellationToken)
  nameWithType.vb: IUserPhoneNumberStore(Of TUser).SetPhoneNumberAsync(TUser, String, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore(Of TUser).SetPhoneNumberAsync(TUser, System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore`1.SetPhoneNumberAsync(`0,System.String,System.Threading.CancellationToken)
    name: SetPhoneNumberAsync
    nameWithType: IUserPhoneNumberStore<TUser>.SetPhoneNumberAsync
    fullName: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore<TUser>.SetPhoneNumberAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore`1.SetPhoneNumberAsync(`0,System.String,System.Threading.CancellationToken)
    name: SetPhoneNumberAsync
    nameWithType: IUserPhoneNumberStore(Of TUser).SetPhoneNumberAsync
    fullName: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore(Of TUser).SetPhoneNumberAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore`1.SetPhoneNumberAsync(`0,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserPhoneNumberStore`1.SetPhoneNumberAsync(`0,System.String,System.Threading.CancellationToken)
  isExternal: true
  name: SetPhoneNumberAsync(TUser, String, CancellationToken)
  nameWithType: IUserPhoneNumberStore<TUser>.SetPhoneNumberAsync(TUser, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore<TUser>.SetPhoneNumberAsync(TUser, System.String, System.Threading.CancellationToken)
  nameWithType.vb: IUserPhoneNumberStore(Of TUser).SetPhoneNumberAsync(TUser, String, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore(Of TUser).SetPhoneNumberAsync(TUser, System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore`1.SetPhoneNumberAsync(`0,System.String,System.Threading.CancellationToken)
    name: SetPhoneNumberAsync
    nameWithType: IUserPhoneNumberStore<TUser>.SetPhoneNumberAsync
    fullName: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore<TUser>.SetPhoneNumberAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore`1.SetPhoneNumberAsync(`0,System.String,System.Threading.CancellationToken)
    name: SetPhoneNumberAsync
    nameWithType: IUserPhoneNumberStore(Of TUser).SetPhoneNumberAsync
    fullName: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore(Of TUser).SetPhoneNumberAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetPhoneNumberAsync*
  commentId: Overload:Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetPhoneNumberAsync
  name: GetPhoneNumberAsync
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.GetPhoneNumberAsync
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.GetPhoneNumberAsync
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).GetPhoneNumberAsync
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).GetPhoneNumberAsync
- uid: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore{{TUser}}.GetPhoneNumberAsync({TUser},System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserPhoneNumberStore{`0}.GetPhoneNumberAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore`1.GetPhoneNumberAsync(`0,System.Threading.CancellationToken)
  name: GetPhoneNumberAsync(TUser, CancellationToken)
  nameWithType: IUserPhoneNumberStore<TUser>.GetPhoneNumberAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore<TUser>.GetPhoneNumberAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserPhoneNumberStore(Of TUser).GetPhoneNumberAsync(TUser, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore(Of TUser).GetPhoneNumberAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore`1.GetPhoneNumberAsync(`0,System.Threading.CancellationToken)
    name: GetPhoneNumberAsync
    nameWithType: IUserPhoneNumberStore<TUser>.GetPhoneNumberAsync
    fullName: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore<TUser>.GetPhoneNumberAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore`1.GetPhoneNumberAsync(`0,System.Threading.CancellationToken)
    name: GetPhoneNumberAsync
    nameWithType: IUserPhoneNumberStore(Of TUser).GetPhoneNumberAsync
    fullName: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore(Of TUser).GetPhoneNumberAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore`1.GetPhoneNumberAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserPhoneNumberStore`1.GetPhoneNumberAsync(`0,System.Threading.CancellationToken)
  isExternal: true
  name: GetPhoneNumberAsync(TUser, CancellationToken)
  nameWithType: IUserPhoneNumberStore<TUser>.GetPhoneNumberAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore<TUser>.GetPhoneNumberAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserPhoneNumberStore(Of TUser).GetPhoneNumberAsync(TUser, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore(Of TUser).GetPhoneNumberAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore`1.GetPhoneNumberAsync(`0,System.Threading.CancellationToken)
    name: GetPhoneNumberAsync
    nameWithType: IUserPhoneNumberStore<TUser>.GetPhoneNumberAsync
    fullName: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore<TUser>.GetPhoneNumberAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore`1.GetPhoneNumberAsync(`0,System.Threading.CancellationToken)
    name: GetPhoneNumberAsync
    nameWithType: IUserPhoneNumberStore(Of TUser).GetPhoneNumberAsync
    fullName: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore(Of TUser).GetPhoneNumberAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetPhoneNumberConfirmedAsync*
  commentId: Overload:Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetPhoneNumberConfirmedAsync
  name: GetPhoneNumberConfirmedAsync
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.GetPhoneNumberConfirmedAsync
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.GetPhoneNumberConfirmedAsync
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).GetPhoneNumberConfirmedAsync
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).GetPhoneNumberConfirmedAsync
- uid: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore{{TUser}}.GetPhoneNumberConfirmedAsync({TUser},System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserPhoneNumberStore{`0}.GetPhoneNumberConfirmedAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore`1.GetPhoneNumberConfirmedAsync(`0,System.Threading.CancellationToken)
  name: GetPhoneNumberConfirmedAsync(TUser, CancellationToken)
  nameWithType: IUserPhoneNumberStore<TUser>.GetPhoneNumberConfirmedAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore<TUser>.GetPhoneNumberConfirmedAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserPhoneNumberStore(Of TUser).GetPhoneNumberConfirmedAsync(TUser, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore(Of TUser).GetPhoneNumberConfirmedAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore`1.GetPhoneNumberConfirmedAsync(`0,System.Threading.CancellationToken)
    name: GetPhoneNumberConfirmedAsync
    nameWithType: IUserPhoneNumberStore<TUser>.GetPhoneNumberConfirmedAsync
    fullName: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore<TUser>.GetPhoneNumberConfirmedAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore`1.GetPhoneNumberConfirmedAsync(`0,System.Threading.CancellationToken)
    name: GetPhoneNumberConfirmedAsync
    nameWithType: IUserPhoneNumberStore(Of TUser).GetPhoneNumberConfirmedAsync
    fullName: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore(Of TUser).GetPhoneNumberConfirmedAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore`1.GetPhoneNumberConfirmedAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserPhoneNumberStore`1.GetPhoneNumberConfirmedAsync(`0,System.Threading.CancellationToken)
  isExternal: true
  name: GetPhoneNumberConfirmedAsync(TUser, CancellationToken)
  nameWithType: IUserPhoneNumberStore<TUser>.GetPhoneNumberConfirmedAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore<TUser>.GetPhoneNumberConfirmedAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserPhoneNumberStore(Of TUser).GetPhoneNumberConfirmedAsync(TUser, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore(Of TUser).GetPhoneNumberConfirmedAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore`1.GetPhoneNumberConfirmedAsync(`0,System.Threading.CancellationToken)
    name: GetPhoneNumberConfirmedAsync
    nameWithType: IUserPhoneNumberStore<TUser>.GetPhoneNumberConfirmedAsync
    fullName: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore<TUser>.GetPhoneNumberConfirmedAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore`1.GetPhoneNumberConfirmedAsync(`0,System.Threading.CancellationToken)
    name: GetPhoneNumberConfirmedAsync
    nameWithType: IUserPhoneNumberStore(Of TUser).GetPhoneNumberConfirmedAsync
    fullName: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore(Of TUser).GetPhoneNumberConfirmedAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.SetPhoneNumberConfirmedAsync*
  commentId: Overload:Hybrid.Zero.Identity.Entities.UserStoreBase`12.SetPhoneNumberConfirmedAsync
  name: SetPhoneNumberConfirmedAsync
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.SetPhoneNumberConfirmedAsync
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.SetPhoneNumberConfirmedAsync
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).SetPhoneNumberConfirmedAsync
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).SetPhoneNumberConfirmedAsync
- uid: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore{{TUser}}.SetPhoneNumberConfirmedAsync({TUser},System.Boolean,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserPhoneNumberStore{`0}.SetPhoneNumberConfirmedAsync(`0,System.Boolean,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore`1.SetPhoneNumberConfirmedAsync(`0,System.Boolean,System.Threading.CancellationToken)
  name: SetPhoneNumberConfirmedAsync(TUser, Boolean, CancellationToken)
  nameWithType: IUserPhoneNumberStore<TUser>.SetPhoneNumberConfirmedAsync(TUser, Boolean, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore<TUser>.SetPhoneNumberConfirmedAsync(TUser, System.Boolean, System.Threading.CancellationToken)
  nameWithType.vb: IUserPhoneNumberStore(Of TUser).SetPhoneNumberConfirmedAsync(TUser, Boolean, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore(Of TUser).SetPhoneNumberConfirmedAsync(TUser, System.Boolean, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore`1.SetPhoneNumberConfirmedAsync(`0,System.Boolean,System.Threading.CancellationToken)
    name: SetPhoneNumberConfirmedAsync
    nameWithType: IUserPhoneNumberStore<TUser>.SetPhoneNumberConfirmedAsync
    fullName: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore<TUser>.SetPhoneNumberConfirmedAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore`1.SetPhoneNumberConfirmedAsync(`0,System.Boolean,System.Threading.CancellationToken)
    name: SetPhoneNumberConfirmedAsync
    nameWithType: IUserPhoneNumberStore(Of TUser).SetPhoneNumberConfirmedAsync
    fullName: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore(Of TUser).SetPhoneNumberConfirmedAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore`1.SetPhoneNumberConfirmedAsync(`0,System.Boolean,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserPhoneNumberStore`1.SetPhoneNumberConfirmedAsync(`0,System.Boolean,System.Threading.CancellationToken)
  isExternal: true
  name: SetPhoneNumberConfirmedAsync(TUser, Boolean, CancellationToken)
  nameWithType: IUserPhoneNumberStore<TUser>.SetPhoneNumberConfirmedAsync(TUser, Boolean, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore<TUser>.SetPhoneNumberConfirmedAsync(TUser, System.Boolean, System.Threading.CancellationToken)
  nameWithType.vb: IUserPhoneNumberStore(Of TUser).SetPhoneNumberConfirmedAsync(TUser, Boolean, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore(Of TUser).SetPhoneNumberConfirmedAsync(TUser, System.Boolean, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore`1.SetPhoneNumberConfirmedAsync(`0,System.Boolean,System.Threading.CancellationToken)
    name: SetPhoneNumberConfirmedAsync
    nameWithType: IUserPhoneNumberStore<TUser>.SetPhoneNumberConfirmedAsync
    fullName: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore<TUser>.SetPhoneNumberConfirmedAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore`1.SetPhoneNumberConfirmedAsync(`0,System.Boolean,System.Threading.CancellationToken)
    name: SetPhoneNumberConfirmedAsync
    nameWithType: IUserPhoneNumberStore(Of TUser).SetPhoneNumberConfirmedAsync
    fullName: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore(Of TUser).SetPhoneNumberConfirmedAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.SetTwoFactorEnabledAsync*
  commentId: Overload:Hybrid.Zero.Identity.Entities.UserStoreBase`12.SetTwoFactorEnabledAsync
  name: SetTwoFactorEnabledAsync
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.SetTwoFactorEnabledAsync
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.SetTwoFactorEnabledAsync
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).SetTwoFactorEnabledAsync
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).SetTwoFactorEnabledAsync
- uid: Microsoft.AspNetCore.Identity.IUserTwoFactorStore{{TUser}}.SetTwoFactorEnabledAsync({TUser},System.Boolean,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserTwoFactorStore{`0}.SetTwoFactorEnabledAsync(`0,System.Boolean,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserTwoFactorStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserTwoFactorStore`1.SetTwoFactorEnabledAsync(`0,System.Boolean,System.Threading.CancellationToken)
  name: SetTwoFactorEnabledAsync(TUser, Boolean, CancellationToken)
  nameWithType: IUserTwoFactorStore<TUser>.SetTwoFactorEnabledAsync(TUser, Boolean, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserTwoFactorStore<TUser>.SetTwoFactorEnabledAsync(TUser, System.Boolean, System.Threading.CancellationToken)
  nameWithType.vb: IUserTwoFactorStore(Of TUser).SetTwoFactorEnabledAsync(TUser, Boolean, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserTwoFactorStore(Of TUser).SetTwoFactorEnabledAsync(TUser, System.Boolean, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserTwoFactorStore`1.SetTwoFactorEnabledAsync(`0,System.Boolean,System.Threading.CancellationToken)
    name: SetTwoFactorEnabledAsync
    nameWithType: IUserTwoFactorStore<TUser>.SetTwoFactorEnabledAsync
    fullName: Microsoft.AspNetCore.Identity.IUserTwoFactorStore<TUser>.SetTwoFactorEnabledAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserTwoFactorStore`1.SetTwoFactorEnabledAsync(`0,System.Boolean,System.Threading.CancellationToken)
    name: SetTwoFactorEnabledAsync
    nameWithType: IUserTwoFactorStore(Of TUser).SetTwoFactorEnabledAsync
    fullName: Microsoft.AspNetCore.Identity.IUserTwoFactorStore(Of TUser).SetTwoFactorEnabledAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserTwoFactorStore`1.SetTwoFactorEnabledAsync(`0,System.Boolean,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserTwoFactorStore`1.SetTwoFactorEnabledAsync(`0,System.Boolean,System.Threading.CancellationToken)
  isExternal: true
  name: SetTwoFactorEnabledAsync(TUser, Boolean, CancellationToken)
  nameWithType: IUserTwoFactorStore<TUser>.SetTwoFactorEnabledAsync(TUser, Boolean, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserTwoFactorStore<TUser>.SetTwoFactorEnabledAsync(TUser, System.Boolean, System.Threading.CancellationToken)
  nameWithType.vb: IUserTwoFactorStore(Of TUser).SetTwoFactorEnabledAsync(TUser, Boolean, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserTwoFactorStore(Of TUser).SetTwoFactorEnabledAsync(TUser, System.Boolean, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserTwoFactorStore`1.SetTwoFactorEnabledAsync(`0,System.Boolean,System.Threading.CancellationToken)
    name: SetTwoFactorEnabledAsync
    nameWithType: IUserTwoFactorStore<TUser>.SetTwoFactorEnabledAsync
    fullName: Microsoft.AspNetCore.Identity.IUserTwoFactorStore<TUser>.SetTwoFactorEnabledAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserTwoFactorStore`1.SetTwoFactorEnabledAsync(`0,System.Boolean,System.Threading.CancellationToken)
    name: SetTwoFactorEnabledAsync
    nameWithType: IUserTwoFactorStore(Of TUser).SetTwoFactorEnabledAsync
    fullName: Microsoft.AspNetCore.Identity.IUserTwoFactorStore(Of TUser).SetTwoFactorEnabledAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetTwoFactorEnabledAsync*
  commentId: Overload:Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetTwoFactorEnabledAsync
  name: GetTwoFactorEnabledAsync
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.GetTwoFactorEnabledAsync
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.GetTwoFactorEnabledAsync
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).GetTwoFactorEnabledAsync
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).GetTwoFactorEnabledAsync
- uid: Microsoft.AspNetCore.Identity.IUserTwoFactorStore{{TUser}}.GetTwoFactorEnabledAsync({TUser},System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserTwoFactorStore{`0}.GetTwoFactorEnabledAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserTwoFactorStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserTwoFactorStore`1.GetTwoFactorEnabledAsync(`0,System.Threading.CancellationToken)
  name: GetTwoFactorEnabledAsync(TUser, CancellationToken)
  nameWithType: IUserTwoFactorStore<TUser>.GetTwoFactorEnabledAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserTwoFactorStore<TUser>.GetTwoFactorEnabledAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserTwoFactorStore(Of TUser).GetTwoFactorEnabledAsync(TUser, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserTwoFactorStore(Of TUser).GetTwoFactorEnabledAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserTwoFactorStore`1.GetTwoFactorEnabledAsync(`0,System.Threading.CancellationToken)
    name: GetTwoFactorEnabledAsync
    nameWithType: IUserTwoFactorStore<TUser>.GetTwoFactorEnabledAsync
    fullName: Microsoft.AspNetCore.Identity.IUserTwoFactorStore<TUser>.GetTwoFactorEnabledAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserTwoFactorStore`1.GetTwoFactorEnabledAsync(`0,System.Threading.CancellationToken)
    name: GetTwoFactorEnabledAsync
    nameWithType: IUserTwoFactorStore(Of TUser).GetTwoFactorEnabledAsync
    fullName: Microsoft.AspNetCore.Identity.IUserTwoFactorStore(Of TUser).GetTwoFactorEnabledAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserTwoFactorStore`1.GetTwoFactorEnabledAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserTwoFactorStore`1.GetTwoFactorEnabledAsync(`0,System.Threading.CancellationToken)
  isExternal: true
  name: GetTwoFactorEnabledAsync(TUser, CancellationToken)
  nameWithType: IUserTwoFactorStore<TUser>.GetTwoFactorEnabledAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserTwoFactorStore<TUser>.GetTwoFactorEnabledAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserTwoFactorStore(Of TUser).GetTwoFactorEnabledAsync(TUser, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserTwoFactorStore(Of TUser).GetTwoFactorEnabledAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserTwoFactorStore`1.GetTwoFactorEnabledAsync(`0,System.Threading.CancellationToken)
    name: GetTwoFactorEnabledAsync
    nameWithType: IUserTwoFactorStore<TUser>.GetTwoFactorEnabledAsync
    fullName: Microsoft.AspNetCore.Identity.IUserTwoFactorStore<TUser>.GetTwoFactorEnabledAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserTwoFactorStore`1.GetTwoFactorEnabledAsync(`0,System.Threading.CancellationToken)
    name: GetTwoFactorEnabledAsync
    nameWithType: IUserTwoFactorStore(Of TUser).GetTwoFactorEnabledAsync
    fullName: Microsoft.AspNetCore.Identity.IUserTwoFactorStore(Of TUser).GetTwoFactorEnabledAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.SetTokenAsync*
  commentId: Overload:Hybrid.Zero.Identity.Entities.UserStoreBase`12.SetTokenAsync
  name: SetTokenAsync
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.SetTokenAsync
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.SetTokenAsync
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).SetTokenAsync
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).SetTokenAsync
- uid: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore{{TUser}}.SetTokenAsync({TUser},System.String,System.String,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore{`0}.SetTokenAsync(`0,System.String,System.String,System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore`1.SetTokenAsync(`0,System.String,System.String,System.String,System.Threading.CancellationToken)
  name: SetTokenAsync(TUser, String, String, String, CancellationToken)
  nameWithType: IUserAuthenticationTokenStore<TUser>.SetTokenAsync(TUser, String, String, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore<TUser>.SetTokenAsync(TUser, System.String, System.String, System.String, System.Threading.CancellationToken)
  nameWithType.vb: IUserAuthenticationTokenStore(Of TUser).SetTokenAsync(TUser, String, String, String, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore(Of TUser).SetTokenAsync(TUser, System.String, System.String, System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore`1.SetTokenAsync(`0,System.String,System.String,System.String,System.Threading.CancellationToken)
    name: SetTokenAsync
    nameWithType: IUserAuthenticationTokenStore<TUser>.SetTokenAsync
    fullName: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore<TUser>.SetTokenAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore`1.SetTokenAsync(`0,System.String,System.String,System.String,System.Threading.CancellationToken)
    name: SetTokenAsync
    nameWithType: IUserAuthenticationTokenStore(Of TUser).SetTokenAsync
    fullName: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore(Of TUser).SetTokenAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore`1.SetTokenAsync(`0,System.String,System.String,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore`1.SetTokenAsync(`0,System.String,System.String,System.String,System.Threading.CancellationToken)
  isExternal: true
  name: SetTokenAsync(TUser, String, String, String, CancellationToken)
  nameWithType: IUserAuthenticationTokenStore<TUser>.SetTokenAsync(TUser, String, String, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore<TUser>.SetTokenAsync(TUser, System.String, System.String, System.String, System.Threading.CancellationToken)
  nameWithType.vb: IUserAuthenticationTokenStore(Of TUser).SetTokenAsync(TUser, String, String, String, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore(Of TUser).SetTokenAsync(TUser, System.String, System.String, System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore`1.SetTokenAsync(`0,System.String,System.String,System.String,System.Threading.CancellationToken)
    name: SetTokenAsync
    nameWithType: IUserAuthenticationTokenStore<TUser>.SetTokenAsync
    fullName: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore<TUser>.SetTokenAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore`1.SetTokenAsync(`0,System.String,System.String,System.String,System.Threading.CancellationToken)
    name: SetTokenAsync
    nameWithType: IUserAuthenticationTokenStore(Of TUser).SetTokenAsync
    fullName: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore(Of TUser).SetTokenAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.RemoveTokenAsync*
  commentId: Overload:Hybrid.Zero.Identity.Entities.UserStoreBase`12.RemoveTokenAsync
  name: RemoveTokenAsync
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.RemoveTokenAsync
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.RemoveTokenAsync
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).RemoveTokenAsync
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).RemoveTokenAsync
- uid: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore{{TUser}}.RemoveTokenAsync({TUser},System.String,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore{`0}.RemoveTokenAsync(`0,System.String,System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore`1.RemoveTokenAsync(`0,System.String,System.String,System.Threading.CancellationToken)
  name: RemoveTokenAsync(TUser, String, String, CancellationToken)
  nameWithType: IUserAuthenticationTokenStore<TUser>.RemoveTokenAsync(TUser, String, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore<TUser>.RemoveTokenAsync(TUser, System.String, System.String, System.Threading.CancellationToken)
  nameWithType.vb: IUserAuthenticationTokenStore(Of TUser).RemoveTokenAsync(TUser, String, String, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore(Of TUser).RemoveTokenAsync(TUser, System.String, System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore`1.RemoveTokenAsync(`0,System.String,System.String,System.Threading.CancellationToken)
    name: RemoveTokenAsync
    nameWithType: IUserAuthenticationTokenStore<TUser>.RemoveTokenAsync
    fullName: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore<TUser>.RemoveTokenAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore`1.RemoveTokenAsync(`0,System.String,System.String,System.Threading.CancellationToken)
    name: RemoveTokenAsync
    nameWithType: IUserAuthenticationTokenStore(Of TUser).RemoveTokenAsync
    fullName: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore(Of TUser).RemoveTokenAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore`1.RemoveTokenAsync(`0,System.String,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore`1.RemoveTokenAsync(`0,System.String,System.String,System.Threading.CancellationToken)
  isExternal: true
  name: RemoveTokenAsync(TUser, String, String, CancellationToken)
  nameWithType: IUserAuthenticationTokenStore<TUser>.RemoveTokenAsync(TUser, String, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore<TUser>.RemoveTokenAsync(TUser, System.String, System.String, System.Threading.CancellationToken)
  nameWithType.vb: IUserAuthenticationTokenStore(Of TUser).RemoveTokenAsync(TUser, String, String, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore(Of TUser).RemoveTokenAsync(TUser, System.String, System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore`1.RemoveTokenAsync(`0,System.String,System.String,System.Threading.CancellationToken)
    name: RemoveTokenAsync
    nameWithType: IUserAuthenticationTokenStore<TUser>.RemoveTokenAsync
    fullName: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore<TUser>.RemoveTokenAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore`1.RemoveTokenAsync(`0,System.String,System.String,System.Threading.CancellationToken)
    name: RemoveTokenAsync
    nameWithType: IUserAuthenticationTokenStore(Of TUser).RemoveTokenAsync
    fullName: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore(Of TUser).RemoveTokenAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetTokenAsync*
  commentId: Overload:Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetTokenAsync
  name: GetTokenAsync
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.GetTokenAsync
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.GetTokenAsync
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).GetTokenAsync
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).GetTokenAsync
- uid: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore{{TUser}}.GetTokenAsync({TUser},System.String,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore{`0}.GetTokenAsync(`0,System.String,System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore`1.GetTokenAsync(`0,System.String,System.String,System.Threading.CancellationToken)
  name: GetTokenAsync(TUser, String, String, CancellationToken)
  nameWithType: IUserAuthenticationTokenStore<TUser>.GetTokenAsync(TUser, String, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore<TUser>.GetTokenAsync(TUser, System.String, System.String, System.Threading.CancellationToken)
  nameWithType.vb: IUserAuthenticationTokenStore(Of TUser).GetTokenAsync(TUser, String, String, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore(Of TUser).GetTokenAsync(TUser, System.String, System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore`1.GetTokenAsync(`0,System.String,System.String,System.Threading.CancellationToken)
    name: GetTokenAsync
    nameWithType: IUserAuthenticationTokenStore<TUser>.GetTokenAsync
    fullName: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore<TUser>.GetTokenAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore`1.GetTokenAsync(`0,System.String,System.String,System.Threading.CancellationToken)
    name: GetTokenAsync
    nameWithType: IUserAuthenticationTokenStore(Of TUser).GetTokenAsync
    fullName: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore(Of TUser).GetTokenAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore`1.GetTokenAsync(`0,System.String,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore`1.GetTokenAsync(`0,System.String,System.String,System.Threading.CancellationToken)
  isExternal: true
  name: GetTokenAsync(TUser, String, String, CancellationToken)
  nameWithType: IUserAuthenticationTokenStore<TUser>.GetTokenAsync(TUser, String, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore<TUser>.GetTokenAsync(TUser, System.String, System.String, System.Threading.CancellationToken)
  nameWithType.vb: IUserAuthenticationTokenStore(Of TUser).GetTokenAsync(TUser, String, String, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore(Of TUser).GetTokenAsync(TUser, System.String, System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore`1.GetTokenAsync(`0,System.String,System.String,System.Threading.CancellationToken)
    name: GetTokenAsync
    nameWithType: IUserAuthenticationTokenStore<TUser>.GetTokenAsync
    fullName: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore<TUser>.GetTokenAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore`1.GetTokenAsync(`0,System.String,System.String,System.Threading.CancellationToken)
    name: GetTokenAsync
    nameWithType: IUserAuthenticationTokenStore(Of TUser).GetTokenAsync
    fullName: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore(Of TUser).GetTokenAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetTokensAsync*
  commentId: Overload:Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetTokensAsync
  name: GetTokensAsync
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.GetTokensAsync
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.GetTokensAsync
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).GetTokensAsync
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).GetTokensAsync
- uid: Hybrid.Zero.Identity.IHybridUserAuthenticationTokenStore{{TUser}}.GetTokensAsync({TUser},System.String,System.Threading.CancellationToken)
  commentId: M:Hybrid.Zero.Identity.IHybridUserAuthenticationTokenStore{`0}.GetTokensAsync(`0,System.String,System.Threading.CancellationToken)
  parent: Hybrid.Zero.Identity.IHybridUserAuthenticationTokenStore{{TUser}}
  definition: Hybrid.Zero.Identity.IHybridUserAuthenticationTokenStore`1.GetTokensAsync(`0,System.String,System.Threading.CancellationToken)
  name: GetTokensAsync(TUser, String, CancellationToken)
  nameWithType: IHybridUserAuthenticationTokenStore<TUser>.GetTokensAsync(TUser, String, CancellationToken)
  fullName: Hybrid.Zero.Identity.IHybridUserAuthenticationTokenStore<TUser>.GetTokensAsync(TUser, System.String, System.Threading.CancellationToken)
  nameWithType.vb: IHybridUserAuthenticationTokenStore(Of TUser).GetTokensAsync(TUser, String, CancellationToken)
  fullName.vb: Hybrid.Zero.Identity.IHybridUserAuthenticationTokenStore(Of TUser).GetTokensAsync(TUser, System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Hybrid.Zero.Identity.IHybridUserAuthenticationTokenStore`1.GetTokensAsync(`0,System.String,System.Threading.CancellationToken)
    name: GetTokensAsync
    nameWithType: IHybridUserAuthenticationTokenStore<TUser>.GetTokensAsync
    fullName: Hybrid.Zero.Identity.IHybridUserAuthenticationTokenStore<TUser>.GetTokensAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Zero.Identity.IHybridUserAuthenticationTokenStore`1.GetTokensAsync(`0,System.String,System.Threading.CancellationToken)
    name: GetTokensAsync
    nameWithType: IHybridUserAuthenticationTokenStore(Of TUser).GetTokensAsync
    fullName: Hybrid.Zero.Identity.IHybridUserAuthenticationTokenStore(Of TUser).GetTokensAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.String[]}
  commentId: T:System.Threading.Tasks.Task{System.String[]}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<String[]>
  nameWithType: Task<String[]>
  fullName: System.Threading.Tasks.Task<System.String[]>
  nameWithType.vb: Task(Of String())
  fullName.vb: System.Threading.Tasks.Task(Of System.String())
  name.vb: Task(Of String())
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Identity.IHybridUserAuthenticationTokenStore`1.GetTokensAsync(`0,System.String,System.Threading.CancellationToken)
  commentId: M:Hybrid.Zero.Identity.IHybridUserAuthenticationTokenStore`1.GetTokensAsync(`0,System.String,System.Threading.CancellationToken)
  isExternal: true
  name: GetTokensAsync(TUser, String, CancellationToken)
  nameWithType: IHybridUserAuthenticationTokenStore<TUser>.GetTokensAsync(TUser, String, CancellationToken)
  fullName: Hybrid.Zero.Identity.IHybridUserAuthenticationTokenStore<TUser>.GetTokensAsync(TUser, System.String, System.Threading.CancellationToken)
  nameWithType.vb: IHybridUserAuthenticationTokenStore(Of TUser).GetTokensAsync(TUser, String, CancellationToken)
  fullName.vb: Hybrid.Zero.Identity.IHybridUserAuthenticationTokenStore(Of TUser).GetTokensAsync(TUser, System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Hybrid.Zero.Identity.IHybridUserAuthenticationTokenStore`1.GetTokensAsync(`0,System.String,System.Threading.CancellationToken)
    name: GetTokensAsync
    nameWithType: IHybridUserAuthenticationTokenStore<TUser>.GetTokensAsync
    fullName: Hybrid.Zero.Identity.IHybridUserAuthenticationTokenStore<TUser>.GetTokensAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Zero.Identity.IHybridUserAuthenticationTokenStore`1.GetTokensAsync(`0,System.String,System.Threading.CancellationToken)
    name: GetTokensAsync
    nameWithType: IHybridUserAuthenticationTokenStore(Of TUser).GetTokensAsync
    fullName: Hybrid.Zero.Identity.IHybridUserAuthenticationTokenStore(Of TUser).GetTokensAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.SetAuthenticatorKeyAsync*
  commentId: Overload:Hybrid.Zero.Identity.Entities.UserStoreBase`12.SetAuthenticatorKeyAsync
  name: SetAuthenticatorKeyAsync
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.SetAuthenticatorKeyAsync
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.SetAuthenticatorKeyAsync
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).SetAuthenticatorKeyAsync
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).SetAuthenticatorKeyAsync
- uid: Microsoft.AspNetCore.Identity.IUserAuthenticatorKeyStore{{TUser}}.SetAuthenticatorKeyAsync({TUser},System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserAuthenticatorKeyStore{`0}.SetAuthenticatorKeyAsync(`0,System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserAuthenticatorKeyStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserAuthenticatorKeyStore`1.SetAuthenticatorKeyAsync(`0,System.String,System.Threading.CancellationToken)
  name: SetAuthenticatorKeyAsync(TUser, String, CancellationToken)
  nameWithType: IUserAuthenticatorKeyStore<TUser>.SetAuthenticatorKeyAsync(TUser, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserAuthenticatorKeyStore<TUser>.SetAuthenticatorKeyAsync(TUser, System.String, System.Threading.CancellationToken)
  nameWithType.vb: IUserAuthenticatorKeyStore(Of TUser).SetAuthenticatorKeyAsync(TUser, String, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserAuthenticatorKeyStore(Of TUser).SetAuthenticatorKeyAsync(TUser, System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserAuthenticatorKeyStore`1.SetAuthenticatorKeyAsync(`0,System.String,System.Threading.CancellationToken)
    name: SetAuthenticatorKeyAsync
    nameWithType: IUserAuthenticatorKeyStore<TUser>.SetAuthenticatorKeyAsync
    fullName: Microsoft.AspNetCore.Identity.IUserAuthenticatorKeyStore<TUser>.SetAuthenticatorKeyAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserAuthenticatorKeyStore`1.SetAuthenticatorKeyAsync(`0,System.String,System.Threading.CancellationToken)
    name: SetAuthenticatorKeyAsync
    nameWithType: IUserAuthenticatorKeyStore(Of TUser).SetAuthenticatorKeyAsync
    fullName: Microsoft.AspNetCore.Identity.IUserAuthenticatorKeyStore(Of TUser).SetAuthenticatorKeyAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserAuthenticatorKeyStore`1.SetAuthenticatorKeyAsync(`0,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserAuthenticatorKeyStore`1.SetAuthenticatorKeyAsync(`0,System.String,System.Threading.CancellationToken)
  isExternal: true
  name: SetAuthenticatorKeyAsync(TUser, String, CancellationToken)
  nameWithType: IUserAuthenticatorKeyStore<TUser>.SetAuthenticatorKeyAsync(TUser, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserAuthenticatorKeyStore<TUser>.SetAuthenticatorKeyAsync(TUser, System.String, System.Threading.CancellationToken)
  nameWithType.vb: IUserAuthenticatorKeyStore(Of TUser).SetAuthenticatorKeyAsync(TUser, String, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserAuthenticatorKeyStore(Of TUser).SetAuthenticatorKeyAsync(TUser, System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserAuthenticatorKeyStore`1.SetAuthenticatorKeyAsync(`0,System.String,System.Threading.CancellationToken)
    name: SetAuthenticatorKeyAsync
    nameWithType: IUserAuthenticatorKeyStore<TUser>.SetAuthenticatorKeyAsync
    fullName: Microsoft.AspNetCore.Identity.IUserAuthenticatorKeyStore<TUser>.SetAuthenticatorKeyAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserAuthenticatorKeyStore`1.SetAuthenticatorKeyAsync(`0,System.String,System.Threading.CancellationToken)
    name: SetAuthenticatorKeyAsync
    nameWithType: IUserAuthenticatorKeyStore(Of TUser).SetAuthenticatorKeyAsync
    fullName: Microsoft.AspNetCore.Identity.IUserAuthenticatorKeyStore(Of TUser).SetAuthenticatorKeyAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetAuthenticatorKeyAsync*
  commentId: Overload:Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetAuthenticatorKeyAsync
  name: GetAuthenticatorKeyAsync
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.GetAuthenticatorKeyAsync
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.GetAuthenticatorKeyAsync
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).GetAuthenticatorKeyAsync
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).GetAuthenticatorKeyAsync
- uid: Microsoft.AspNetCore.Identity.IUserAuthenticatorKeyStore{{TUser}}.GetAuthenticatorKeyAsync({TUser},System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserAuthenticatorKeyStore{`0}.GetAuthenticatorKeyAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserAuthenticatorKeyStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserAuthenticatorKeyStore`1.GetAuthenticatorKeyAsync(`0,System.Threading.CancellationToken)
  name: GetAuthenticatorKeyAsync(TUser, CancellationToken)
  nameWithType: IUserAuthenticatorKeyStore<TUser>.GetAuthenticatorKeyAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserAuthenticatorKeyStore<TUser>.GetAuthenticatorKeyAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserAuthenticatorKeyStore(Of TUser).GetAuthenticatorKeyAsync(TUser, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserAuthenticatorKeyStore(Of TUser).GetAuthenticatorKeyAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserAuthenticatorKeyStore`1.GetAuthenticatorKeyAsync(`0,System.Threading.CancellationToken)
    name: GetAuthenticatorKeyAsync
    nameWithType: IUserAuthenticatorKeyStore<TUser>.GetAuthenticatorKeyAsync
    fullName: Microsoft.AspNetCore.Identity.IUserAuthenticatorKeyStore<TUser>.GetAuthenticatorKeyAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserAuthenticatorKeyStore`1.GetAuthenticatorKeyAsync(`0,System.Threading.CancellationToken)
    name: GetAuthenticatorKeyAsync
    nameWithType: IUserAuthenticatorKeyStore(Of TUser).GetAuthenticatorKeyAsync
    fullName: Microsoft.AspNetCore.Identity.IUserAuthenticatorKeyStore(Of TUser).GetAuthenticatorKeyAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserAuthenticatorKeyStore`1.GetAuthenticatorKeyAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserAuthenticatorKeyStore`1.GetAuthenticatorKeyAsync(`0,System.Threading.CancellationToken)
  isExternal: true
  name: GetAuthenticatorKeyAsync(TUser, CancellationToken)
  nameWithType: IUserAuthenticatorKeyStore<TUser>.GetAuthenticatorKeyAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserAuthenticatorKeyStore<TUser>.GetAuthenticatorKeyAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserAuthenticatorKeyStore(Of TUser).GetAuthenticatorKeyAsync(TUser, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserAuthenticatorKeyStore(Of TUser).GetAuthenticatorKeyAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserAuthenticatorKeyStore`1.GetAuthenticatorKeyAsync(`0,System.Threading.CancellationToken)
    name: GetAuthenticatorKeyAsync
    nameWithType: IUserAuthenticatorKeyStore<TUser>.GetAuthenticatorKeyAsync
    fullName: Microsoft.AspNetCore.Identity.IUserAuthenticatorKeyStore<TUser>.GetAuthenticatorKeyAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserAuthenticatorKeyStore`1.GetAuthenticatorKeyAsync(`0,System.Threading.CancellationToken)
    name: GetAuthenticatorKeyAsync
    nameWithType: IUserAuthenticatorKeyStore(Of TUser).GetAuthenticatorKeyAsync
    fullName: Microsoft.AspNetCore.Identity.IUserAuthenticatorKeyStore(Of TUser).GetAuthenticatorKeyAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.ReplaceCodesAsync*
  commentId: Overload:Hybrid.Zero.Identity.Entities.UserStoreBase`12.ReplaceCodesAsync
  name: ReplaceCodesAsync
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.ReplaceCodesAsync
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.ReplaceCodesAsync
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).ReplaceCodesAsync
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).ReplaceCodesAsync
- uid: Microsoft.AspNetCore.Identity.IUserTwoFactorRecoveryCodeStore{{TUser}}.ReplaceCodesAsync({TUser},System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserTwoFactorRecoveryCodeStore{`0}.ReplaceCodesAsync(`0,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserTwoFactorRecoveryCodeStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserTwoFactorRecoveryCodeStore`1.ReplaceCodesAsync(`0,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)
  name: ReplaceCodesAsync(TUser, IEnumerable<String>, CancellationToken)
  nameWithType: IUserTwoFactorRecoveryCodeStore<TUser>.ReplaceCodesAsync(TUser, IEnumerable<String>, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserTwoFactorRecoveryCodeStore<TUser>.ReplaceCodesAsync(TUser, System.Collections.Generic.IEnumerable<System.String>, System.Threading.CancellationToken)
  nameWithType.vb: IUserTwoFactorRecoveryCodeStore(Of TUser).ReplaceCodesAsync(TUser, IEnumerable(Of String), CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserTwoFactorRecoveryCodeStore(Of TUser).ReplaceCodesAsync(TUser, System.Collections.Generic.IEnumerable(Of System.String), System.Threading.CancellationToken)
  name.vb: ReplaceCodesAsync(TUser, IEnumerable(Of String), CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserTwoFactorRecoveryCodeStore`1.ReplaceCodesAsync(`0,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)
    name: ReplaceCodesAsync
    nameWithType: IUserTwoFactorRecoveryCodeStore<TUser>.ReplaceCodesAsync
    fullName: Microsoft.AspNetCore.Identity.IUserTwoFactorRecoveryCodeStore<TUser>.ReplaceCodesAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserTwoFactorRecoveryCodeStore`1.ReplaceCodesAsync(`0,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)
    name: ReplaceCodesAsync
    nameWithType: IUserTwoFactorRecoveryCodeStore(Of TUser).ReplaceCodesAsync
    fullName: Microsoft.AspNetCore.Identity.IUserTwoFactorRecoveryCodeStore(Of TUser).ReplaceCodesAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.String}
  commentId: T:System.Collections.Generic.IEnumerable{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<String>
  nameWithType: IEnumerable<String>
  fullName: System.Collections.Generic.IEnumerable<System.String>
  nameWithType.vb: IEnumerable(Of String)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.String)
  name.vb: IEnumerable(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserTwoFactorRecoveryCodeStore`1.ReplaceCodesAsync(`0,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserTwoFactorRecoveryCodeStore`1.ReplaceCodesAsync(`0,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)
  isExternal: true
  name: ReplaceCodesAsync(TUser, IEnumerable<String>, CancellationToken)
  nameWithType: IUserTwoFactorRecoveryCodeStore<TUser>.ReplaceCodesAsync(TUser, IEnumerable<String>, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserTwoFactorRecoveryCodeStore<TUser>.ReplaceCodesAsync(TUser, System.Collections.Generic.IEnumerable<System.String>, System.Threading.CancellationToken)
  nameWithType.vb: IUserTwoFactorRecoveryCodeStore(Of TUser).ReplaceCodesAsync(TUser, IEnumerable(Of String), CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserTwoFactorRecoveryCodeStore(Of TUser).ReplaceCodesAsync(TUser, System.Collections.Generic.IEnumerable(Of System.String), System.Threading.CancellationToken)
  name.vb: ReplaceCodesAsync(TUser, IEnumerable(Of String), CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserTwoFactorRecoveryCodeStore`1.ReplaceCodesAsync(`0,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)
    name: ReplaceCodesAsync
    nameWithType: IUserTwoFactorRecoveryCodeStore<TUser>.ReplaceCodesAsync
    fullName: Microsoft.AspNetCore.Identity.IUserTwoFactorRecoveryCodeStore<TUser>.ReplaceCodesAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserTwoFactorRecoveryCodeStore`1.ReplaceCodesAsync(`0,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)
    name: ReplaceCodesAsync
    nameWithType: IUserTwoFactorRecoveryCodeStore(Of TUser).ReplaceCodesAsync
    fullName: Microsoft.AspNetCore.Identity.IUserTwoFactorRecoveryCodeStore(Of TUser).ReplaceCodesAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.RedeemCodeAsync*
  commentId: Overload:Hybrid.Zero.Identity.Entities.UserStoreBase`12.RedeemCodeAsync
  name: RedeemCodeAsync
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.RedeemCodeAsync
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.RedeemCodeAsync
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).RedeemCodeAsync
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).RedeemCodeAsync
- uid: Microsoft.AspNetCore.Identity.IUserTwoFactorRecoveryCodeStore{{TUser}}.RedeemCodeAsync({TUser},System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserTwoFactorRecoveryCodeStore{`0}.RedeemCodeAsync(`0,System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserTwoFactorRecoveryCodeStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserTwoFactorRecoveryCodeStore`1.RedeemCodeAsync(`0,System.String,System.Threading.CancellationToken)
  name: RedeemCodeAsync(TUser, String, CancellationToken)
  nameWithType: IUserTwoFactorRecoveryCodeStore<TUser>.RedeemCodeAsync(TUser, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserTwoFactorRecoveryCodeStore<TUser>.RedeemCodeAsync(TUser, System.String, System.Threading.CancellationToken)
  nameWithType.vb: IUserTwoFactorRecoveryCodeStore(Of TUser).RedeemCodeAsync(TUser, String, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserTwoFactorRecoveryCodeStore(Of TUser).RedeemCodeAsync(TUser, System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserTwoFactorRecoveryCodeStore`1.RedeemCodeAsync(`0,System.String,System.Threading.CancellationToken)
    name: RedeemCodeAsync
    nameWithType: IUserTwoFactorRecoveryCodeStore<TUser>.RedeemCodeAsync
    fullName: Microsoft.AspNetCore.Identity.IUserTwoFactorRecoveryCodeStore<TUser>.RedeemCodeAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserTwoFactorRecoveryCodeStore`1.RedeemCodeAsync(`0,System.String,System.Threading.CancellationToken)
    name: RedeemCodeAsync
    nameWithType: IUserTwoFactorRecoveryCodeStore(Of TUser).RedeemCodeAsync
    fullName: Microsoft.AspNetCore.Identity.IUserTwoFactorRecoveryCodeStore(Of TUser).RedeemCodeAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserTwoFactorRecoveryCodeStore`1.RedeemCodeAsync(`0,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserTwoFactorRecoveryCodeStore`1.RedeemCodeAsync(`0,System.String,System.Threading.CancellationToken)
  isExternal: true
  name: RedeemCodeAsync(TUser, String, CancellationToken)
  nameWithType: IUserTwoFactorRecoveryCodeStore<TUser>.RedeemCodeAsync(TUser, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserTwoFactorRecoveryCodeStore<TUser>.RedeemCodeAsync(TUser, System.String, System.Threading.CancellationToken)
  nameWithType.vb: IUserTwoFactorRecoveryCodeStore(Of TUser).RedeemCodeAsync(TUser, String, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserTwoFactorRecoveryCodeStore(Of TUser).RedeemCodeAsync(TUser, System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserTwoFactorRecoveryCodeStore`1.RedeemCodeAsync(`0,System.String,System.Threading.CancellationToken)
    name: RedeemCodeAsync
    nameWithType: IUserTwoFactorRecoveryCodeStore<TUser>.RedeemCodeAsync
    fullName: Microsoft.AspNetCore.Identity.IUserTwoFactorRecoveryCodeStore<TUser>.RedeemCodeAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserTwoFactorRecoveryCodeStore`1.RedeemCodeAsync(`0,System.String,System.Threading.CancellationToken)
    name: RedeemCodeAsync
    nameWithType: IUserTwoFactorRecoveryCodeStore(Of TUser).RedeemCodeAsync
    fullName: Microsoft.AspNetCore.Identity.IUserTwoFactorRecoveryCodeStore(Of TUser).RedeemCodeAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.CountCodesAsync*
  commentId: Overload:Hybrid.Zero.Identity.Entities.UserStoreBase`12.CountCodesAsync
  name: CountCodesAsync
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.CountCodesAsync
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.CountCodesAsync
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).CountCodesAsync
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).CountCodesAsync
- uid: Microsoft.AspNetCore.Identity.IUserTwoFactorRecoveryCodeStore{{TUser}}.CountCodesAsync({TUser},System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserTwoFactorRecoveryCodeStore{`0}.CountCodesAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserTwoFactorRecoveryCodeStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserTwoFactorRecoveryCodeStore`1.CountCodesAsync(`0,System.Threading.CancellationToken)
  name: CountCodesAsync(TUser, CancellationToken)
  nameWithType: IUserTwoFactorRecoveryCodeStore<TUser>.CountCodesAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserTwoFactorRecoveryCodeStore<TUser>.CountCodesAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserTwoFactorRecoveryCodeStore(Of TUser).CountCodesAsync(TUser, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserTwoFactorRecoveryCodeStore(Of TUser).CountCodesAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserTwoFactorRecoveryCodeStore`1.CountCodesAsync(`0,System.Threading.CancellationToken)
    name: CountCodesAsync
    nameWithType: IUserTwoFactorRecoveryCodeStore<TUser>.CountCodesAsync
    fullName: Microsoft.AspNetCore.Identity.IUserTwoFactorRecoveryCodeStore<TUser>.CountCodesAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserTwoFactorRecoveryCodeStore`1.CountCodesAsync(`0,System.Threading.CancellationToken)
    name: CountCodesAsync
    nameWithType: IUserTwoFactorRecoveryCodeStore(Of TUser).CountCodesAsync
    fullName: Microsoft.AspNetCore.Identity.IUserTwoFactorRecoveryCodeStore(Of TUser).CountCodesAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserTwoFactorRecoveryCodeStore`1.CountCodesAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserTwoFactorRecoveryCodeStore`1.CountCodesAsync(`0,System.Threading.CancellationToken)
  isExternal: true
  name: CountCodesAsync(TUser, CancellationToken)
  nameWithType: IUserTwoFactorRecoveryCodeStore<TUser>.CountCodesAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserTwoFactorRecoveryCodeStore<TUser>.CountCodesAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserTwoFactorRecoveryCodeStore(Of TUser).CountCodesAsync(TUser, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserTwoFactorRecoveryCodeStore(Of TUser).CountCodesAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserTwoFactorRecoveryCodeStore`1.CountCodesAsync(`0,System.Threading.CancellationToken)
    name: CountCodesAsync
    nameWithType: IUserTwoFactorRecoveryCodeStore<TUser>.CountCodesAsync
    fullName: Microsoft.AspNetCore.Identity.IUserTwoFactorRecoveryCodeStore<TUser>.CountCodesAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserTwoFactorRecoveryCodeStore`1.CountCodesAsync(`0,System.Threading.CancellationToken)
    name: CountCodesAsync
    nameWithType: IUserTwoFactorRecoveryCodeStore(Of TUser).CountCodesAsync
    fullName: Microsoft.AspNetCore.Identity.IUserTwoFactorRecoveryCodeStore(Of TUser).CountCodesAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.AddToRoleAsync*
  commentId: Overload:Hybrid.Zero.Identity.Entities.UserStoreBase`12.AddToRoleAsync
  name: AddToRoleAsync
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.AddToRoleAsync
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.AddToRoleAsync
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).AddToRoleAsync
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).AddToRoleAsync
- uid: Microsoft.AspNetCore.Identity.IUserRoleStore{{TUser}}.AddToRoleAsync({TUser},System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserRoleStore{`0}.AddToRoleAsync(`0,System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserRoleStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserRoleStore`1.AddToRoleAsync(`0,System.String,System.Threading.CancellationToken)
  name: AddToRoleAsync(TUser, String, CancellationToken)
  nameWithType: IUserRoleStore<TUser>.AddToRoleAsync(TUser, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserRoleStore<TUser>.AddToRoleAsync(TUser, System.String, System.Threading.CancellationToken)
  nameWithType.vb: IUserRoleStore(Of TUser).AddToRoleAsync(TUser, String, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserRoleStore(Of TUser).AddToRoleAsync(TUser, System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserRoleStore`1.AddToRoleAsync(`0,System.String,System.Threading.CancellationToken)
    name: AddToRoleAsync
    nameWithType: IUserRoleStore<TUser>.AddToRoleAsync
    fullName: Microsoft.AspNetCore.Identity.IUserRoleStore<TUser>.AddToRoleAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserRoleStore`1.AddToRoleAsync(`0,System.String,System.Threading.CancellationToken)
    name: AddToRoleAsync
    nameWithType: IUserRoleStore(Of TUser).AddToRoleAsync
    fullName: Microsoft.AspNetCore.Identity.IUserRoleStore(Of TUser).AddToRoleAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserRoleStore`1.AddToRoleAsync(`0,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserRoleStore`1.AddToRoleAsync(`0,System.String,System.Threading.CancellationToken)
  isExternal: true
  name: AddToRoleAsync(TUser, String, CancellationToken)
  nameWithType: IUserRoleStore<TUser>.AddToRoleAsync(TUser, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserRoleStore<TUser>.AddToRoleAsync(TUser, System.String, System.Threading.CancellationToken)
  nameWithType.vb: IUserRoleStore(Of TUser).AddToRoleAsync(TUser, String, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserRoleStore(Of TUser).AddToRoleAsync(TUser, System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserRoleStore`1.AddToRoleAsync(`0,System.String,System.Threading.CancellationToken)
    name: AddToRoleAsync
    nameWithType: IUserRoleStore<TUser>.AddToRoleAsync
    fullName: Microsoft.AspNetCore.Identity.IUserRoleStore<TUser>.AddToRoleAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserRoleStore`1.AddToRoleAsync(`0,System.String,System.Threading.CancellationToken)
    name: AddToRoleAsync
    nameWithType: IUserRoleStore(Of TUser).AddToRoleAsync
    fullName: Microsoft.AspNetCore.Identity.IUserRoleStore(Of TUser).AddToRoleAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.RemoveFromRoleAsync*
  commentId: Overload:Hybrid.Zero.Identity.Entities.UserStoreBase`12.RemoveFromRoleAsync
  name: RemoveFromRoleAsync
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.RemoveFromRoleAsync
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.RemoveFromRoleAsync
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).RemoveFromRoleAsync
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).RemoveFromRoleAsync
- uid: Microsoft.AspNetCore.Identity.IUserRoleStore{{TUser}}.RemoveFromRoleAsync({TUser},System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserRoleStore{`0}.RemoveFromRoleAsync(`0,System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserRoleStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserRoleStore`1.RemoveFromRoleAsync(`0,System.String,System.Threading.CancellationToken)
  name: RemoveFromRoleAsync(TUser, String, CancellationToken)
  nameWithType: IUserRoleStore<TUser>.RemoveFromRoleAsync(TUser, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserRoleStore<TUser>.RemoveFromRoleAsync(TUser, System.String, System.Threading.CancellationToken)
  nameWithType.vb: IUserRoleStore(Of TUser).RemoveFromRoleAsync(TUser, String, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserRoleStore(Of TUser).RemoveFromRoleAsync(TUser, System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserRoleStore`1.RemoveFromRoleAsync(`0,System.String,System.Threading.CancellationToken)
    name: RemoveFromRoleAsync
    nameWithType: IUserRoleStore<TUser>.RemoveFromRoleAsync
    fullName: Microsoft.AspNetCore.Identity.IUserRoleStore<TUser>.RemoveFromRoleAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserRoleStore`1.RemoveFromRoleAsync(`0,System.String,System.Threading.CancellationToken)
    name: RemoveFromRoleAsync
    nameWithType: IUserRoleStore(Of TUser).RemoveFromRoleAsync
    fullName: Microsoft.AspNetCore.Identity.IUserRoleStore(Of TUser).RemoveFromRoleAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserRoleStore`1.RemoveFromRoleAsync(`0,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserRoleStore`1.RemoveFromRoleAsync(`0,System.String,System.Threading.CancellationToken)
  isExternal: true
  name: RemoveFromRoleAsync(TUser, String, CancellationToken)
  nameWithType: IUserRoleStore<TUser>.RemoveFromRoleAsync(TUser, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserRoleStore<TUser>.RemoveFromRoleAsync(TUser, System.String, System.Threading.CancellationToken)
  nameWithType.vb: IUserRoleStore(Of TUser).RemoveFromRoleAsync(TUser, String, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserRoleStore(Of TUser).RemoveFromRoleAsync(TUser, System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserRoleStore`1.RemoveFromRoleAsync(`0,System.String,System.Threading.CancellationToken)
    name: RemoveFromRoleAsync
    nameWithType: IUserRoleStore<TUser>.RemoveFromRoleAsync
    fullName: Microsoft.AspNetCore.Identity.IUserRoleStore<TUser>.RemoveFromRoleAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserRoleStore`1.RemoveFromRoleAsync(`0,System.String,System.Threading.CancellationToken)
    name: RemoveFromRoleAsync
    nameWithType: IUserRoleStore(Of TUser).RemoveFromRoleAsync
    fullName: Microsoft.AspNetCore.Identity.IUserRoleStore(Of TUser).RemoveFromRoleAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetRolesAsync*
  commentId: Overload:Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetRolesAsync
  name: GetRolesAsync
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.GetRolesAsync
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.GetRolesAsync
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).GetRolesAsync
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).GetRolesAsync
- uid: Microsoft.AspNetCore.Identity.IUserRoleStore{{TUser}}.GetRolesAsync({TUser},System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserRoleStore{`0}.GetRolesAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserRoleStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserRoleStore`1.GetRolesAsync(`0,System.Threading.CancellationToken)
  name: GetRolesAsync(TUser, CancellationToken)
  nameWithType: IUserRoleStore<TUser>.GetRolesAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserRoleStore<TUser>.GetRolesAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserRoleStore(Of TUser).GetRolesAsync(TUser, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserRoleStore(Of TUser).GetRolesAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserRoleStore`1.GetRolesAsync(`0,System.Threading.CancellationToken)
    name: GetRolesAsync
    nameWithType: IUserRoleStore<TUser>.GetRolesAsync
    fullName: Microsoft.AspNetCore.Identity.IUserRoleStore<TUser>.GetRolesAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserRoleStore`1.GetRolesAsync(`0,System.Threading.CancellationToken)
    name: GetRolesAsync
    nameWithType: IUserRoleStore(Of TUser).GetRolesAsync
    fullName: Microsoft.AspNetCore.Identity.IUserRoleStore(Of TUser).GetRolesAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IList{System.String}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IList{System.String}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IList<String>>
  nameWithType: Task<IList<String>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IList<System.String>>
  nameWithType.vb: Task(Of IList(Of String))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IList(Of System.String))
  name.vb: Task(Of IList(Of String))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserRoleStore`1.GetRolesAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserRoleStore`1.GetRolesAsync(`0,System.Threading.CancellationToken)
  isExternal: true
  name: GetRolesAsync(TUser, CancellationToken)
  nameWithType: IUserRoleStore<TUser>.GetRolesAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserRoleStore<TUser>.GetRolesAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserRoleStore(Of TUser).GetRolesAsync(TUser, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserRoleStore(Of TUser).GetRolesAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserRoleStore`1.GetRolesAsync(`0,System.Threading.CancellationToken)
    name: GetRolesAsync
    nameWithType: IUserRoleStore<TUser>.GetRolesAsync
    fullName: Microsoft.AspNetCore.Identity.IUserRoleStore<TUser>.GetRolesAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserRoleStore`1.GetRolesAsync(`0,System.Threading.CancellationToken)
    name: GetRolesAsync
    nameWithType: IUserRoleStore(Of TUser).GetRolesAsync
    fullName: Microsoft.AspNetCore.Identity.IUserRoleStore(Of TUser).GetRolesAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.IsInRoleAsync*
  commentId: Overload:Hybrid.Zero.Identity.Entities.UserStoreBase`12.IsInRoleAsync
  name: IsInRoleAsync
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.IsInRoleAsync
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.IsInRoleAsync
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).IsInRoleAsync
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).IsInRoleAsync
- uid: Microsoft.AspNetCore.Identity.IUserRoleStore{{TUser}}.IsInRoleAsync({TUser},System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserRoleStore{`0}.IsInRoleAsync(`0,System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserRoleStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserRoleStore`1.IsInRoleAsync(`0,System.String,System.Threading.CancellationToken)
  name: IsInRoleAsync(TUser, String, CancellationToken)
  nameWithType: IUserRoleStore<TUser>.IsInRoleAsync(TUser, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserRoleStore<TUser>.IsInRoleAsync(TUser, System.String, System.Threading.CancellationToken)
  nameWithType.vb: IUserRoleStore(Of TUser).IsInRoleAsync(TUser, String, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserRoleStore(Of TUser).IsInRoleAsync(TUser, System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserRoleStore`1.IsInRoleAsync(`0,System.String,System.Threading.CancellationToken)
    name: IsInRoleAsync
    nameWithType: IUserRoleStore<TUser>.IsInRoleAsync
    fullName: Microsoft.AspNetCore.Identity.IUserRoleStore<TUser>.IsInRoleAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserRoleStore`1.IsInRoleAsync(`0,System.String,System.Threading.CancellationToken)
    name: IsInRoleAsync
    nameWithType: IUserRoleStore(Of TUser).IsInRoleAsync
    fullName: Microsoft.AspNetCore.Identity.IUserRoleStore(Of TUser).IsInRoleAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserRoleStore`1.IsInRoleAsync(`0,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserRoleStore`1.IsInRoleAsync(`0,System.String,System.Threading.CancellationToken)
  isExternal: true
  name: IsInRoleAsync(TUser, String, CancellationToken)
  nameWithType: IUserRoleStore<TUser>.IsInRoleAsync(TUser, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserRoleStore<TUser>.IsInRoleAsync(TUser, System.String, System.Threading.CancellationToken)
  nameWithType.vb: IUserRoleStore(Of TUser).IsInRoleAsync(TUser, String, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserRoleStore(Of TUser).IsInRoleAsync(TUser, System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserRoleStore`1.IsInRoleAsync(`0,System.String,System.Threading.CancellationToken)
    name: IsInRoleAsync
    nameWithType: IUserRoleStore<TUser>.IsInRoleAsync
    fullName: Microsoft.AspNetCore.Identity.IUserRoleStore<TUser>.IsInRoleAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserRoleStore`1.IsInRoleAsync(`0,System.String,System.Threading.CancellationToken)
    name: IsInRoleAsync
    nameWithType: IUserRoleStore(Of TUser).IsInRoleAsync
    fullName: Microsoft.AspNetCore.Identity.IUserRoleStore(Of TUser).IsInRoleAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetUsersInRoleAsync*
  commentId: Overload:Hybrid.Zero.Identity.Entities.UserStoreBase`12.GetUsersInRoleAsync
  name: GetUsersInRoleAsync
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.GetUsersInRoleAsync
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.GetUsersInRoleAsync
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).GetUsersInRoleAsync
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).GetUsersInRoleAsync
- uid: Microsoft.AspNetCore.Identity.IUserRoleStore{{TUser}}.GetUsersInRoleAsync(System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserRoleStore{`0}.GetUsersInRoleAsync(System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserRoleStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserRoleStore`1.GetUsersInRoleAsync(System.String,System.Threading.CancellationToken)
  name: GetUsersInRoleAsync(String, CancellationToken)
  nameWithType: IUserRoleStore<TUser>.GetUsersInRoleAsync(String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserRoleStore<TUser>.GetUsersInRoleAsync(System.String, System.Threading.CancellationToken)
  nameWithType.vb: IUserRoleStore(Of TUser).GetUsersInRoleAsync(String, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserRoleStore(Of TUser).GetUsersInRoleAsync(System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserRoleStore`1.GetUsersInRoleAsync(System.String,System.Threading.CancellationToken)
    name: GetUsersInRoleAsync
    nameWithType: IUserRoleStore<TUser>.GetUsersInRoleAsync
    fullName: Microsoft.AspNetCore.Identity.IUserRoleStore<TUser>.GetUsersInRoleAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserRoleStore`1.GetUsersInRoleAsync(System.String,System.Threading.CancellationToken)
    name: GetUsersInRoleAsync
    nameWithType: IUserRoleStore(Of TUser).GetUsersInRoleAsync
    fullName: Microsoft.AspNetCore.Identity.IUserRoleStore(Of TUser).GetUsersInRoleAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserRoleStore`1.GetUsersInRoleAsync(System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserRoleStore`1.GetUsersInRoleAsync(System.String,System.Threading.CancellationToken)
  isExternal: true
  name: GetUsersInRoleAsync(String, CancellationToken)
  nameWithType: IUserRoleStore<TUser>.GetUsersInRoleAsync(String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserRoleStore<TUser>.GetUsersInRoleAsync(System.String, System.Threading.CancellationToken)
  nameWithType.vb: IUserRoleStore(Of TUser).GetUsersInRoleAsync(String, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserRoleStore(Of TUser).GetUsersInRoleAsync(System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserRoleStore`1.GetUsersInRoleAsync(System.String,System.Threading.CancellationToken)
    name: GetUsersInRoleAsync
    nameWithType: IUserRoleStore<TUser>.GetUsersInRoleAsync
    fullName: Microsoft.AspNetCore.Identity.IUserRoleStore<TUser>.GetUsersInRoleAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserRoleStore`1.GetUsersInRoleAsync(System.String,System.Threading.CancellationToken)
    name: GetUsersInRoleAsync
    nameWithType: IUserRoleStore(Of TUser).GetUsersInRoleAsync
    fullName: Microsoft.AspNetCore.Identity.IUserRoleStore(Of TUser).GetUsersInRoleAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.ConvertIdFromString*
  commentId: Overload:Hybrid.Zero.Identity.Entities.UserStoreBase`12.ConvertIdFromString
  name: ConvertIdFromString
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.ConvertIdFromString
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.ConvertIdFromString
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).ConvertIdFromString
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).ConvertIdFromString
- uid: '{TUserKey}'
  commentId: '!:TUserKey'
  definition: TUserKey
  name: TUserKey
  nameWithType: TUserKey
  fullName: TUserKey
- uid: TUserKey
  name: TUserKey
  nameWithType: TUserKey
  fullName: TUserKey
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.ConvertIdToString*
  commentId: Overload:Hybrid.Zero.Identity.Entities.UserStoreBase`12.ConvertIdToString
  name: ConvertIdToString
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.ConvertIdToString
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.ConvertIdToString
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).ConvertIdToString
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).ConvertIdToString
- uid: Hybrid.Zero.Identity.Entities.UserStoreBase`12.ThrowIfDisposed*
  commentId: Overload:Hybrid.Zero.Identity.Entities.UserStoreBase`12.ThrowIfDisposed
  name: ThrowIfDisposed
  nameWithType: UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.ThrowIfDisposed
  fullName: Hybrid.Zero.Identity.Entities.UserStoreBase<TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey>.ThrowIfDisposed
  nameWithType.vb: UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).ThrowIfDisposed
  fullName.vb: Hybrid.Zero.Identity.Entities.UserStoreBase(Of TUser, TUserKey, TUserClaim, TUserClaimKey, TUserLogin, TUserLoginKey, TUserToken, TUserTokenKey, TRole, TRoleKey, TUserRole, TUserRoleKey).ThrowIfDisposed
