### YamlMime:ManagedReference
items:
- uid: Hybrid.AspNetCore.Http.HttpExtensions
  commentId: T:Hybrid.AspNetCore.Http.HttpExtensions
  id: HttpExtensions
  parent: Hybrid.AspNetCore.Http
  children:
  - Hybrid.AspNetCore.Http.HttpExtensions.IsSuccessStatusCode(Microsoft.AspNetCore.Http.HttpResponse)
  - Hybrid.AspNetCore.Http.HttpExtensions.ReadAsStringAsync(Microsoft.AspNetCore.Http.HttpRequest)
  - Hybrid.AspNetCore.Http.HttpExtensions.ReadAsStringAsync(Microsoft.AspNetCore.Http.HttpResponse)
  - Hybrid.AspNetCore.Http.HttpExtensions.WriteBodyAsync(Microsoft.AspNetCore.Http.HttpRequest,System.String)
  - Hybrid.AspNetCore.Http.HttpExtensions.WriteBodyAsync(Microsoft.AspNetCore.Http.HttpResponse,System.String)
  langs:
  - csharp
  - vb
  name: HttpExtensions
  nameWithType: HttpExtensions
  fullName: Hybrid.AspNetCore.Http.HttpExtensions
  type: Class
  source:
    remote:
      path: src/Hybrid.AspNetCore/Http/HttpExtensions.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: HttpExtensions
    path: ../src/Hybrid.AspNetCore/Http/HttpExtensions.cs
    startLine: 13
  assemblies:
  - Hybrid.AspNetCore
  namespace: Hybrid.AspNetCore.Http
  summary: "\nHTTP 扩展方法\n"
  example: []
  syntax:
    content: public static class HttpExtensions
    content.vb: Public Module HttpExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Hybrid.AspNetCore.Http.HttpExtensions.ReadAsStringAsync(Microsoft.AspNetCore.Http.HttpRequest)
  commentId: M:Hybrid.AspNetCore.Http.HttpExtensions.ReadAsStringAsync(Microsoft.AspNetCore.Http.HttpRequest)
  id: ReadAsStringAsync(Microsoft.AspNetCore.Http.HttpRequest)
  isExtensionMethod: true
  parent: Hybrid.AspNetCore.Http.HttpExtensions
  langs:
  - csharp
  - vb
  name: ReadAsStringAsync(HttpRequest)
  nameWithType: HttpExtensions.ReadAsStringAsync(HttpRequest)
  fullName: Hybrid.AspNetCore.Http.HttpExtensions.ReadAsStringAsync(Microsoft.AspNetCore.Http.HttpRequest)
  type: Method
  source:
    remote:
      path: src/Hybrid.AspNetCore/Http/HttpExtensions.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: ReadAsStringAsync
    path: ../src/Hybrid.AspNetCore/Http/HttpExtensions.cs
    startLine: 18
  assemblies:
  - Hybrid.AspNetCore
  namespace: Hybrid.AspNetCore.Http
  summary: "\n读取<xref href=\"Microsoft.AspNetCore.Http.HttpRequest\" data-throw-if-not-resolved=\"false\"></xref>的Body为字符串\n"
  example: []
  syntax:
    content: public static Task<string> ReadAsStringAsync(this HttpRequest request)
    parameters:
    - id: request
      type: Microsoft.AspNetCore.Http.HttpRequest
    return:
      type: System.Threading.Tasks.Task{System.String}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ReadAsStringAsync(request As HttpRequest) As Task(Of String)
  overload: Hybrid.AspNetCore.Http.HttpExtensions.ReadAsStringAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Hybrid.AspNetCore.Http.HttpExtensions.ReadAsStringAsync(Microsoft.AspNetCore.Http.HttpResponse)
  commentId: M:Hybrid.AspNetCore.Http.HttpExtensions.ReadAsStringAsync(Microsoft.AspNetCore.Http.HttpResponse)
  id: ReadAsStringAsync(Microsoft.AspNetCore.Http.HttpResponse)
  isExtensionMethod: true
  parent: Hybrid.AspNetCore.Http.HttpExtensions
  langs:
  - csharp
  - vb
  name: ReadAsStringAsync(HttpResponse)
  nameWithType: HttpExtensions.ReadAsStringAsync(HttpResponse)
  fullName: Hybrid.AspNetCore.Http.HttpExtensions.ReadAsStringAsync(Microsoft.AspNetCore.Http.HttpResponse)
  type: Method
  source:
    remote:
      path: src/Hybrid.AspNetCore/Http/HttpExtensions.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: ReadAsStringAsync
    path: ../src/Hybrid.AspNetCore/Http/HttpExtensions.cs
    startLine: 33
  assemblies:
  - Hybrid.AspNetCore
  namespace: Hybrid.AspNetCore.Http
  summary: "\n读取<xref href=\"Microsoft.AspNetCore.Http.HttpResponse\" data-throw-if-not-resolved=\"false\"></xref>的Body为字符串\n"
  example: []
  syntax:
    content: public static Task<string> ReadAsStringAsync(this HttpResponse response)
    parameters:
    - id: response
      type: Microsoft.AspNetCore.Http.HttpResponse
    return:
      type: System.Threading.Tasks.Task{System.String}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ReadAsStringAsync(response As HttpResponse) As Task(Of String)
  overload: Hybrid.AspNetCore.Http.HttpExtensions.ReadAsStringAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Hybrid.AspNetCore.Http.HttpExtensions.WriteBodyAsync(Microsoft.AspNetCore.Http.HttpRequest,System.String)
  commentId: M:Hybrid.AspNetCore.Http.HttpExtensions.WriteBodyAsync(Microsoft.AspNetCore.Http.HttpRequest,System.String)
  id: WriteBodyAsync(Microsoft.AspNetCore.Http.HttpRequest,System.String)
  isExtensionMethod: true
  parent: Hybrid.AspNetCore.Http.HttpExtensions
  langs:
  - csharp
  - vb
  name: WriteBodyAsync(HttpRequest, String)
  nameWithType: HttpExtensions.WriteBodyAsync(HttpRequest, String)
  fullName: Hybrid.AspNetCore.Http.HttpExtensions.WriteBodyAsync(Microsoft.AspNetCore.Http.HttpRequest, System.String)
  type: Method
  source:
    remote:
      path: src/Hybrid.AspNetCore/Http/HttpExtensions.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: WriteBodyAsync
    path: ../src/Hybrid.AspNetCore/Http/HttpExtensions.cs
    startLine: 45
  assemblies:
  - Hybrid.AspNetCore
  namespace: Hybrid.AspNetCore.Http
  summary: "\n设置<xref href=\"Microsoft.AspNetCore.Http.HttpRequest\" data-throw-if-not-resolved=\"false\"></xref>的Body为指定字符串\n"
  example: []
  syntax:
    content: public static Task<HttpRequest> WriteBodyAsync(this HttpRequest request, string data)
    parameters:
    - id: request
      type: Microsoft.AspNetCore.Http.HttpRequest
    - id: data
      type: System.String
    return:
      type: System.Threading.Tasks.Task{Microsoft.AspNetCore.Http.HttpRequest}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function WriteBodyAsync(request As HttpRequest, data As String) As Task(Of HttpRequest)
  overload: Hybrid.AspNetCore.Http.HttpExtensions.WriteBodyAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Hybrid.AspNetCore.Http.HttpExtensions.WriteBodyAsync(Microsoft.AspNetCore.Http.HttpResponse,System.String)
  commentId: M:Hybrid.AspNetCore.Http.HttpExtensions.WriteBodyAsync(Microsoft.AspNetCore.Http.HttpResponse,System.String)
  id: WriteBodyAsync(Microsoft.AspNetCore.Http.HttpResponse,System.String)
  isExtensionMethod: true
  parent: Hybrid.AspNetCore.Http.HttpExtensions
  langs:
  - csharp
  - vb
  name: WriteBodyAsync(HttpResponse, String)
  nameWithType: HttpExtensions.WriteBodyAsync(HttpResponse, String)
  fullName: Hybrid.AspNetCore.Http.HttpExtensions.WriteBodyAsync(Microsoft.AspNetCore.Http.HttpResponse, System.String)
  type: Method
  source:
    remote:
      path: src/Hybrid.AspNetCore/Http/HttpExtensions.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: WriteBodyAsync
    path: ../src/Hybrid.AspNetCore/Http/HttpExtensions.cs
    startLine: 60
  assemblies:
  - Hybrid.AspNetCore
  namespace: Hybrid.AspNetCore.Http
  summary: "\n设置<xref href=\"Microsoft.AspNetCore.Http.HttpResponse\" data-throw-if-not-resolved=\"false\"></xref>的Body为指定字符串\n"
  example: []
  syntax:
    content: public static Task<HttpResponse> WriteBodyAsync(this HttpResponse response, string data)
    parameters:
    - id: response
      type: Microsoft.AspNetCore.Http.HttpResponse
    - id: data
      type: System.String
    return:
      type: System.Threading.Tasks.Task{Microsoft.AspNetCore.Http.HttpResponse}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function WriteBodyAsync(response As HttpResponse, data As String) As Task(Of HttpResponse)
  overload: Hybrid.AspNetCore.Http.HttpExtensions.WriteBodyAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Hybrid.AspNetCore.Http.HttpExtensions.IsSuccessStatusCode(Microsoft.AspNetCore.Http.HttpResponse)
  commentId: M:Hybrid.AspNetCore.Http.HttpExtensions.IsSuccessStatusCode(Microsoft.AspNetCore.Http.HttpResponse)
  id: IsSuccessStatusCode(Microsoft.AspNetCore.Http.HttpResponse)
  isExtensionMethod: true
  parent: Hybrid.AspNetCore.Http.HttpExtensions
  langs:
  - csharp
  - vb
  name: IsSuccessStatusCode(HttpResponse)
  nameWithType: HttpExtensions.IsSuccessStatusCode(HttpResponse)
  fullName: Hybrid.AspNetCore.Http.HttpExtensions.IsSuccessStatusCode(Microsoft.AspNetCore.Http.HttpResponse)
  type: Method
  source:
    remote:
      path: src/Hybrid.AspNetCore/Http/HttpExtensions.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: IsSuccessStatusCode
    path: ../src/Hybrid.AspNetCore/Http/HttpExtensions.cs
    startLine: 76
  assemblies:
  - Hybrid.AspNetCore
  namespace: Hybrid.AspNetCore.Http
  summary: "\n获取一个值，该值指示 HTTP 响应是否成功。\n"
  example: []
  syntax:
    content: public static bool IsSuccessStatusCode(this HttpResponse response)
    parameters:
    - id: response
      type: Microsoft.AspNetCore.Http.HttpResponse
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsSuccessStatusCode(response As HttpResponse) As Boolean
  overload: Hybrid.AspNetCore.Http.HttpExtensions.IsSuccessStatusCode*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Hybrid.AspNetCore.Http
  commentId: N:Hybrid.AspNetCore.Http
  name: Hybrid.AspNetCore.Http
  nameWithType: Hybrid.AspNetCore.Http
  fullName: Hybrid.AspNetCore.Http
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.AspNetCore.Http.HttpRequest
  commentId: T:Microsoft.AspNetCore.Http.HttpRequest
  parent: Microsoft.AspNetCore.Http
  isExternal: true
  name: HttpRequest
  nameWithType: HttpRequest
  fullName: Microsoft.AspNetCore.Http.HttpRequest
- uid: Hybrid.AspNetCore.Http.HttpExtensions.ReadAsStringAsync*
  commentId: Overload:Hybrid.AspNetCore.Http.HttpExtensions.ReadAsStringAsync
  name: ReadAsStringAsync
  nameWithType: HttpExtensions.ReadAsStringAsync
  fullName: Hybrid.AspNetCore.Http.HttpExtensions.ReadAsStringAsync
- uid: System.Threading.Tasks.Task{System.String}
  commentId: T:System.Threading.Tasks.Task{System.String}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<String>
  nameWithType: Task<String>
  fullName: System.Threading.Tasks.Task<System.String>
  nameWithType.vb: Task(Of String)
  fullName.vb: System.Threading.Tasks.Task(Of System.String)
  name.vb: Task(Of String)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Http
  commentId: N:Microsoft.AspNetCore.Http
  isExternal: true
  name: Microsoft.AspNetCore.Http
  nameWithType: Microsoft.AspNetCore.Http
  fullName: Microsoft.AspNetCore.Http
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Microsoft.AspNetCore.Http.HttpResponse
  commentId: T:Microsoft.AspNetCore.Http.HttpResponse
  parent: Microsoft.AspNetCore.Http
  isExternal: true
  name: HttpResponse
  nameWithType: HttpResponse
  fullName: Microsoft.AspNetCore.Http.HttpResponse
- uid: Hybrid.AspNetCore.Http.HttpExtensions.WriteBodyAsync*
  commentId: Overload:Hybrid.AspNetCore.Http.HttpExtensions.WriteBodyAsync
  name: WriteBodyAsync
  nameWithType: HttpExtensions.WriteBodyAsync
  fullName: Hybrid.AspNetCore.Http.HttpExtensions.WriteBodyAsync
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Threading.Tasks.Task{Microsoft.AspNetCore.Http.HttpRequest}
  commentId: T:System.Threading.Tasks.Task{Microsoft.AspNetCore.Http.HttpRequest}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<HttpRequest>
  nameWithType: Task<HttpRequest>
  fullName: System.Threading.Tasks.Task<Microsoft.AspNetCore.Http.HttpRequest>
  nameWithType.vb: Task(Of HttpRequest)
  fullName.vb: System.Threading.Tasks.Task(Of Microsoft.AspNetCore.Http.HttpRequest)
  name.vb: Task(Of HttpRequest)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.AspNetCore.Http.HttpRequest
    name: HttpRequest
    nameWithType: HttpRequest
    fullName: Microsoft.AspNetCore.Http.HttpRequest
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.AspNetCore.Http.HttpRequest
    name: HttpRequest
    nameWithType: HttpRequest
    fullName: Microsoft.AspNetCore.Http.HttpRequest
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{Microsoft.AspNetCore.Http.HttpResponse}
  commentId: T:System.Threading.Tasks.Task{Microsoft.AspNetCore.Http.HttpResponse}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<HttpResponse>
  nameWithType: Task<HttpResponse>
  fullName: System.Threading.Tasks.Task<Microsoft.AspNetCore.Http.HttpResponse>
  nameWithType.vb: Task(Of HttpResponse)
  fullName.vb: System.Threading.Tasks.Task(Of Microsoft.AspNetCore.Http.HttpResponse)
  name.vb: Task(Of HttpResponse)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.AspNetCore.Http.HttpResponse
    name: HttpResponse
    nameWithType: HttpResponse
    fullName: Microsoft.AspNetCore.Http.HttpResponse
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.AspNetCore.Http.HttpResponse
    name: HttpResponse
    nameWithType: HttpResponse
    fullName: Microsoft.AspNetCore.Http.HttpResponse
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.AspNetCore.Http.HttpExtensions.IsSuccessStatusCode*
  commentId: Overload:Hybrid.AspNetCore.Http.HttpExtensions.IsSuccessStatusCode
  name: IsSuccessStatusCode
  nameWithType: HttpExtensions.IsSuccessStatusCode
  fullName: Hybrid.AspNetCore.Http.HttpExtensions.IsSuccessStatusCode
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
