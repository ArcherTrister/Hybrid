### YamlMime:ManagedReference
items:
- uid: Hybrid.AspNetCore.Mvc.MvcFunctionHandler
  commentId: T:Hybrid.AspNetCore.Mvc.MvcFunctionHandler
  id: MvcFunctionHandler
  parent: Hybrid.AspNetCore.Mvc
  children:
  - Hybrid.AspNetCore.Mvc.MvcFunctionHandler.#ctor(System.IServiceProvider)
  - Hybrid.AspNetCore.Mvc.MvcFunctionHandler.FunctionTypeFinder
  - Hybrid.AspNetCore.Mvc.MvcFunctionHandler.GetFunction(Hybrid.Authorization.Functions.Function,System.Reflection.MethodInfo)
  - Hybrid.AspNetCore.Mvc.MvcFunctionHandler.GetFunction(System.Type)
  - Hybrid.AspNetCore.Mvc.MvcFunctionHandler.IsIgnoreMethod(Hybrid.Authorization.Functions.Function,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{Hybrid.Authorization.Functions.Function})
  - Hybrid.AspNetCore.Mvc.MvcFunctionHandler.MethodInfoFinder
  langs:
  - csharp
  - vb
  name: MvcFunctionHandler
  nameWithType: MvcFunctionHandler
  fullName: Hybrid.AspNetCore.Mvc.MvcFunctionHandler
  type: Class
  source:
    remote:
      path: src/Hybrid.AspNetCore/Mvc/MvcFunctionHandler.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: MvcFunctionHandler
    path: ../src/Hybrid.AspNetCore/Mvc/MvcFunctionHandler.cs
    startLine: 29
  assemblies:
  - Hybrid.AspNetCore
  namespace: Hybrid.AspNetCore.Mvc
  summary: "\nMVC 功能处理器\n"
  example: []
  syntax:
    content: 'public class MvcFunctionHandler : FunctionHandlerBase<Function>, IFunctionHandler'
    content.vb: >-
      Public Class MvcFunctionHandler
          Inherits FunctionHandlerBase(Of  Function)
          Implements IFunctionHandler
  inheritance:
  - System.Object
  - Hybrid.Authorization.Functions.FunctionHandlerBase{Hybrid.Authorization.Functions.Function}
  implements:
  - Hybrid.Authorization.Functions.IFunctionHandler
  inheritedMembers:
  - Hybrid.Authorization.Functions.FunctionHandlerBase{Hybrid.Authorization.Functions.Function}.Logger
  - Hybrid.Authorization.Functions.FunctionHandlerBase{Hybrid.Authorization.Functions.Function}.Initialize
  - Hybrid.Authorization.Functions.FunctionHandlerBase{Hybrid.Authorization.Functions.Function}.GetFunction(System.String,System.String,System.String)
  - Hybrid.Authorization.Functions.FunctionHandlerBase{Hybrid.Authorization.Functions.Function}.RefreshCache
  - Hybrid.Authorization.Functions.FunctionHandlerBase{Hybrid.Authorization.Functions.Function}.ClearCache
  - Hybrid.Authorization.Functions.FunctionHandlerBase{Hybrid.Authorization.Functions.Function}.GetFunctions(System.Type[])
  - Hybrid.Authorization.Functions.FunctionHandlerBase{Hybrid.Authorization.Functions.Function}.HasPickup(System.Collections.Generic.List{Hybrid.Authorization.Functions.Function},Hybrid.Authorization.Functions.Function)
  - Hybrid.Authorization.Functions.FunctionHandlerBase{Hybrid.Authorization.Functions.Function}.GetFunction(System.Collections.Generic.IEnumerable{Hybrid.Authorization.Functions.Function},System.String,System.String,System.String,System.String)
  - Hybrid.Authorization.Functions.FunctionHandlerBase{Hybrid.Authorization.Functions.Function}.SyncToDatabase(System.IServiceProvider,Hybrid.Authorization.Functions.Function[])
  - Hybrid.Authorization.Functions.FunctionHandlerBase{Hybrid.Authorization.Functions.Function}.GetFromDatabase(System.IServiceProvider)
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - System.Object.Hybrid.Extensions.ObjectExtensions.CastTo(System.Type)
  - System.Object.Hybrid.Extensions.ObjectExtensions.CastTo``1
  - System.Object.Hybrid.Extensions.ObjectExtensions.CastTo``1({T})
  - Hybrid.AspNetCore.Mvc.MvcFunctionHandler.Hybrid.Extensions.ObjectExtensions.IsIn``1(Hybrid.AspNetCore.Mvc.MvcFunctionHandler[])
  - System.Object.Hybrid.Extensions.ObjectExtensions.ToDynamic
  - Hybrid.AspNetCore.Mvc.MvcFunctionHandler.Hybrid.Extensions.ObjectExtensions.DeepClone``1
  - Hybrid.AspNetCore.Mvc.MvcFunctionHandler.Hybrid.Extensions.ParameterCheckExtensions.Required``1(System.Func{Hybrid.AspNetCore.Mvc.MvcFunctionHandler,System.Boolean},System.String)
  - Hybrid.AspNetCore.Mvc.MvcFunctionHandler.Hybrid.Extensions.ParameterCheckExtensions.Required``2(System.Func{Hybrid.AspNetCore.Mvc.MvcFunctionHandler,System.Boolean},System.String)
  - Hybrid.AspNetCore.Mvc.MvcFunctionHandler.Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(System.String)
  - Hybrid.AspNetCore.Mvc.MvcFunctionHandler.Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{Hybrid.AspNetCore.Mvc.MvcFunctionHandler},System.Action{System.Exception},System.Action{Hybrid.AspNetCore.Mvc.MvcFunctionHandler})
  - Hybrid.AspNetCore.Mvc.MvcFunctionHandler.Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{Hybrid.AspNetCore.Mvc.MvcFunctionHandler},System.Action{System.Exception})
  - Hybrid.AspNetCore.Mvc.MvcFunctionHandler.Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{Hybrid.AspNetCore.Mvc.MvcFunctionHandler,{TResult}},System.Action{System.Exception},System.Action{Hybrid.AspNetCore.Mvc.MvcFunctionHandler})
  - Hybrid.AspNetCore.Mvc.MvcFunctionHandler.Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{Hybrid.AspNetCore.Mvc.MvcFunctionHandler,{TResult}},System.Action{System.Exception})
  - Hybrid.AspNetCore.Mvc.MvcFunctionHandler.Hybrid.Extensions.TryCatchExtensions.TryFinally``1(System.Action{Hybrid.AspNetCore.Mvc.MvcFunctionHandler},System.Action{Hybrid.AspNetCore.Mvc.MvcFunctionHandler})
  - System.Object.Hybrid.Json.JsonExtensions.ToJsonString(System.Boolean,System.Boolean)
  - System.Object.Hybrid.Mapping.MapperExtensions.MapTo``1
  - Hybrid.AspNetCore.Mvc.MvcFunctionHandler.Hybrid.Mapping.MapperExtensions.MapTo``2({TTarget})
  - System.Object.Hybrid.Reflection.LockExtensions.Locking(System.Action)
  - Hybrid.AspNetCore.Mvc.MvcFunctionHandler.Hybrid.Reflection.LockExtensions.Locking``1(System.Action{Hybrid.AspNetCore.Mvc.MvcFunctionHandler})
  - System.Object.Hybrid.Reflection.LockExtensions.Locking``1(System.Func{{TResult}})
  - Hybrid.AspNetCore.Mvc.MvcFunctionHandler.Hybrid.Reflection.LockExtensions.Locking``2(System.Func{Hybrid.AspNetCore.Mvc.MvcFunctionHandler,{TResult}})
  - Hybrid.AspNetCore.Mvc.MvcFunctionHandler.Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2
  - Hybrid.AspNetCore.Mvc.MvcFunctionHandler.Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(System.Security.Principal.IPrincipal)
  - Hybrid.AspNetCore.Mvc.MvcFunctionHandler.Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(System.Security.Principal.IPrincipal)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Hybrid.AspNetCore.Mvc.MvcFunctionHandler.#ctor(System.IServiceProvider)
  commentId: M:Hybrid.AspNetCore.Mvc.MvcFunctionHandler.#ctor(System.IServiceProvider)
  id: '#ctor(System.IServiceProvider)'
  parent: Hybrid.AspNetCore.Mvc.MvcFunctionHandler
  langs:
  - csharp
  - vb
  name: MvcFunctionHandler(IServiceProvider)
  nameWithType: MvcFunctionHandler.MvcFunctionHandler(IServiceProvider)
  fullName: Hybrid.AspNetCore.Mvc.MvcFunctionHandler.MvcFunctionHandler(System.IServiceProvider)
  type: Constructor
  source:
    remote:
      path: src/Hybrid.AspNetCore/Mvc/MvcFunctionHandler.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: .ctor
    path: ../src/Hybrid.AspNetCore/Mvc/MvcFunctionHandler.cs
    startLine: 34
  assemblies:
  - Hybrid.AspNetCore
  namespace: Hybrid.AspNetCore.Mvc
  summary: "\n初始化一个<xref href=\"Hybrid.Authorization.Functions.FunctionHandlerBase%601\" data-throw-if-not-resolved=\"false\"></xref>类型的新实例\n"
  example: []
  syntax:
    content: public MvcFunctionHandler(IServiceProvider serviceProvider)
    parameters:
    - id: serviceProvider
      type: System.IServiceProvider
    content.vb: Public Sub New(serviceProvider As IServiceProvider)
  overload: Hybrid.AspNetCore.Mvc.MvcFunctionHandler.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Hybrid.AspNetCore.Mvc.MvcFunctionHandler.FunctionTypeFinder
  commentId: P:Hybrid.AspNetCore.Mvc.MvcFunctionHandler.FunctionTypeFinder
  id: FunctionTypeFinder
  parent: Hybrid.AspNetCore.Mvc.MvcFunctionHandler
  langs:
  - csharp
  - vb
  name: FunctionTypeFinder
  nameWithType: MvcFunctionHandler.FunctionTypeFinder
  fullName: Hybrid.AspNetCore.Mvc.MvcFunctionHandler.FunctionTypeFinder
  type: Property
  source:
    remote:
      path: src/Hybrid.AspNetCore/Mvc/MvcFunctionHandler.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: FunctionTypeFinder
    path: ../src/Hybrid.AspNetCore/Mvc/MvcFunctionHandler.cs
    startLine: 44
  assemblies:
  - Hybrid.AspNetCore
  namespace: Hybrid.AspNetCore.Mvc
  summary: "\n获取 功能类型查找器\n"
  example: []
  syntax:
    content: public override IFunctionTypeFinder FunctionTypeFinder { get; }
    parameters: []
    return:
      type: Hybrid.Authorization.Functions.IFunctionTypeFinder
    content.vb: Public Overrides ReadOnly Property FunctionTypeFinder As IFunctionTypeFinder
  overridden: Hybrid.Authorization.Functions.FunctionHandlerBase{Hybrid.Authorization.Functions.Function}.FunctionTypeFinder
  overload: Hybrid.AspNetCore.Mvc.MvcFunctionHandler.FunctionTypeFinder*
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: Hybrid.AspNetCore.Mvc.MvcFunctionHandler.MethodInfoFinder
  commentId: P:Hybrid.AspNetCore.Mvc.MvcFunctionHandler.MethodInfoFinder
  id: MethodInfoFinder
  parent: Hybrid.AspNetCore.Mvc.MvcFunctionHandler
  langs:
  - csharp
  - vb
  name: MethodInfoFinder
  nameWithType: MvcFunctionHandler.MethodInfoFinder
  fullName: Hybrid.AspNetCore.Mvc.MvcFunctionHandler.MethodInfoFinder
  type: Property
  source:
    remote:
      path: src/Hybrid.AspNetCore/Mvc/MvcFunctionHandler.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: MethodInfoFinder
    path: ../src/Hybrid.AspNetCore/Mvc/MvcFunctionHandler.cs
    startLine: 49
  assemblies:
  - Hybrid.AspNetCore
  namespace: Hybrid.AspNetCore.Mvc
  summary: "\n获取 功能方法查找器\n"
  example: []
  syntax:
    content: public override IMethodInfoFinder MethodInfoFinder { get; }
    parameters: []
    return:
      type: Hybrid.Reflection.IMethodInfoFinder
    content.vb: Public Overrides ReadOnly Property MethodInfoFinder As IMethodInfoFinder
  overridden: Hybrid.Authorization.Functions.FunctionHandlerBase{Hybrid.Authorization.Functions.Function}.MethodInfoFinder
  overload: Hybrid.AspNetCore.Mvc.MvcFunctionHandler.MethodInfoFinder*
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: Hybrid.AspNetCore.Mvc.MvcFunctionHandler.GetFunction(System.Type)
  commentId: M:Hybrid.AspNetCore.Mvc.MvcFunctionHandler.GetFunction(System.Type)
  id: GetFunction(System.Type)
  parent: Hybrid.AspNetCore.Mvc.MvcFunctionHandler
  langs:
  - csharp
  - vb
  name: GetFunction(Type)
  nameWithType: MvcFunctionHandler.GetFunction(Type)
  fullName: Hybrid.AspNetCore.Mvc.MvcFunctionHandler.GetFunction(System.Type)
  type: Method
  source:
    remote:
      path: src/Hybrid.AspNetCore/Mvc/MvcFunctionHandler.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: GetFunction
    path: ../src/Hybrid.AspNetCore/Mvc/MvcFunctionHandler.cs
    startLine: 56
  assemblies:
  - Hybrid.AspNetCore
  namespace: Hybrid.AspNetCore.Mvc
  summary: "\n重写以实现从功能类型创建功能信息\n"
  example: []
  syntax:
    content: protected override Function GetFunction(Type controllerType)
    parameters:
    - id: controllerType
      type: System.Type
      description: 功能类型
    return:
      type: Hybrid.Authorization.Functions.Function
      description: ''
    content.vb: 'Protected Overrides Function GetFunction(controllerType As Type) As '
  overridden: Hybrid.Authorization.Functions.FunctionHandlerBase{Hybrid.Authorization.Functions.Function}.GetFunction(System.Type)
  overload: Hybrid.AspNetCore.Mvc.MvcFunctionHandler.GetFunction*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: Hybrid.AspNetCore.Mvc.MvcFunctionHandler.GetFunction(Hybrid.Authorization.Functions.Function,System.Reflection.MethodInfo)
  commentId: M:Hybrid.AspNetCore.Mvc.MvcFunctionHandler.GetFunction(Hybrid.Authorization.Functions.Function,System.Reflection.MethodInfo)
  id: GetFunction(Hybrid.Authorization.Functions.Function,System.Reflection.MethodInfo)
  parent: Hybrid.AspNetCore.Mvc.MvcFunctionHandler
  langs:
  - csharp
  - vb
  name: GetFunction(Function, MethodInfo)
  nameWithType: MvcFunctionHandler.GetFunction(Function, MethodInfo)
  fullName: Hybrid.AspNetCore.Mvc.MvcFunctionHandler.GetFunction(Hybrid.Authorization.Functions.Function, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/Hybrid.AspNetCore/Mvc/MvcFunctionHandler.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: GetFunction
    path: ../src/Hybrid.AspNetCore/Mvc/MvcFunctionHandler.cs
    startLine: 92
  assemblies:
  - Hybrid.AspNetCore
  namespace: Hybrid.AspNetCore.Mvc
  summary: "\n重写以实现从方法信息中创建功能信息\n"
  example: []
  syntax:
    content: protected override Function GetFunction(Function typeFunction, MethodInfo method)
    parameters:
    - id: typeFunction
      type: Hybrid.Authorization.Functions.Function
      description: 类功能信息
    - id: method
      type: System.Reflection.MethodInfo
      description: 方法信息
    return:
      type: Hybrid.Authorization.Functions.Function
      description: ''
    content.vb: 'Protected Overrides Function GetFunction(typeFunction As  Function, method As MethodInfo) As '
  overridden: Hybrid.Authorization.Functions.FunctionHandlerBase{Hybrid.Authorization.Functions.Function}.GetFunction(Hybrid.Authorization.Functions.Function,System.Reflection.MethodInfo)
  overload: Hybrid.AspNetCore.Mvc.MvcFunctionHandler.GetFunction*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: Hybrid.AspNetCore.Mvc.MvcFunctionHandler.IsIgnoreMethod(Hybrid.Authorization.Functions.Function,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{Hybrid.Authorization.Functions.Function})
  commentId: M:Hybrid.AspNetCore.Mvc.MvcFunctionHandler.IsIgnoreMethod(Hybrid.Authorization.Functions.Function,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{Hybrid.Authorization.Functions.Function})
  id: IsIgnoreMethod(Hybrid.Authorization.Functions.Function,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{Hybrid.Authorization.Functions.Function})
  parent: Hybrid.AspNetCore.Mvc.MvcFunctionHandler
  langs:
  - csharp
  - vb
  name: IsIgnoreMethod(Function, MethodInfo, IEnumerable<Function>)
  nameWithType: MvcFunctionHandler.IsIgnoreMethod(Function, MethodInfo, IEnumerable<Function>)
  fullName: Hybrid.AspNetCore.Mvc.MvcFunctionHandler.IsIgnoreMethod(Hybrid.Authorization.Functions.Function, System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable<Hybrid.Authorization.Functions.Function>)
  type: Method
  source:
    remote:
      path: src/Hybrid.AspNetCore/Mvc/MvcFunctionHandler.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: IsIgnoreMethod
    path: ../src/Hybrid.AspNetCore/Mvc/MvcFunctionHandler.cs
    startLine: 122
  assemblies:
  - Hybrid.AspNetCore
  namespace: Hybrid.AspNetCore.Mvc
  summary: "\n重写以实现是否忽略指定方法的功能信息\n"
  example: []
  syntax:
    content: protected override bool IsIgnoreMethod(Function action, MethodInfo method, IEnumerable<Function> functions)
    parameters:
    - id: action
      type: Hybrid.Authorization.Functions.Function
      description: 要判断的功能信息
    - id: method
      type: System.Reflection.MethodInfo
      description: 功能相关的方法信息
    - id: functions
      type: System.Collections.Generic.IEnumerable{Hybrid.Authorization.Functions.Function}
      description: 已存在的功能信息集合
    return:
      type: System.Boolean
      description: ''
    content.vb: Protected Overrides Function IsIgnoreMethod(action As  Function, method As MethodInfo, functions As IEnumerable(Of  Function)) As Boolean
  overridden: Hybrid.Authorization.Functions.FunctionHandlerBase{Hybrid.Authorization.Functions.Function}.IsIgnoreMethod(Hybrid.Authorization.Functions.Function,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{Hybrid.Authorization.Functions.Function})
  overload: Hybrid.AspNetCore.Mvc.MvcFunctionHandler.IsIgnoreMethod*
  nameWithType.vb: MvcFunctionHandler.IsIgnoreMethod(Function, MethodInfo, IEnumerable(Of Function))
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
  fullName.vb: Hybrid.AspNetCore.Mvc.MvcFunctionHandler.IsIgnoreMethod(Hybrid.Authorization.Functions.Function, System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable(Of Hybrid.Authorization.Functions.Function))
  name.vb: IsIgnoreMethod(Function, MethodInfo, IEnumerable(Of Function))
references:
- uid: Hybrid.AspNetCore.Mvc
  commentId: N:Hybrid.AspNetCore.Mvc
  name: Hybrid.AspNetCore.Mvc
  nameWithType: Hybrid.AspNetCore.Mvc
  fullName: Hybrid.AspNetCore.Mvc
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Hybrid.Authorization.Functions.FunctionHandlerBase{Hybrid.Authorization.Functions.Function}
  commentId: T:Hybrid.Authorization.Functions.FunctionHandlerBase{Hybrid.Authorization.Functions.Function}
  parent: Hybrid.Authorization.Functions
  definition: Hybrid.Authorization.Functions.FunctionHandlerBase`1
  name: FunctionHandlerBase<Function>
  nameWithType: FunctionHandlerBase<Function>
  fullName: Hybrid.Authorization.Functions.FunctionHandlerBase<Hybrid.Authorization.Functions.Function>
  nameWithType.vb: FunctionHandlerBase(Of Function)
  fullName.vb: Hybrid.Authorization.Functions.FunctionHandlerBase(Of Hybrid.Authorization.Functions.Function)
  name.vb: FunctionHandlerBase(Of Function)
  spec.csharp:
  - uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1
    name: FunctionHandlerBase
    nameWithType: FunctionHandlerBase
    fullName: Hybrid.Authorization.Functions.FunctionHandlerBase
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Authorization.Functions.Function
    name: Function
    nameWithType: Function
    fullName: Hybrid.Authorization.Functions.Function
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1
    name: FunctionHandlerBase
    nameWithType: FunctionHandlerBase
    fullName: Hybrid.Authorization.Functions.FunctionHandlerBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Authorization.Functions.Function
    name: Function
    nameWithType: Function
    fullName: Hybrid.Authorization.Functions.Function
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Authorization.Functions.IFunctionHandler
  commentId: T:Hybrid.Authorization.Functions.IFunctionHandler
  parent: Hybrid.Authorization.Functions
  name: IFunctionHandler
  nameWithType: IFunctionHandler
  fullName: Hybrid.Authorization.Functions.IFunctionHandler
- uid: Hybrid.Authorization.Functions.FunctionHandlerBase{Hybrid.Authorization.Functions.Function}.Logger
  commentId: P:Hybrid.Authorization.Functions.FunctionHandlerBase{Hybrid.Authorization.Functions.Function}.Logger
  parent: Hybrid.Authorization.Functions.FunctionHandlerBase{Hybrid.Authorization.Functions.Function}
  definition: Hybrid.Authorization.Functions.FunctionHandlerBase`1.Logger
  name: Logger
  nameWithType: FunctionHandlerBase<Function>.Logger
  fullName: Hybrid.Authorization.Functions.FunctionHandlerBase<Hybrid.Authorization.Functions.Function>.Logger
  nameWithType.vb: FunctionHandlerBase(Of Function).Logger
  fullName.vb: Hybrid.Authorization.Functions.FunctionHandlerBase(Of Hybrid.Authorization.Functions.Function).Logger
- uid: Hybrid.Authorization.Functions.FunctionHandlerBase{Hybrid.Authorization.Functions.Function}.Initialize
  commentId: M:Hybrid.Authorization.Functions.FunctionHandlerBase{Hybrid.Authorization.Functions.Function}.Initialize
  parent: Hybrid.Authorization.Functions.FunctionHandlerBase{Hybrid.Authorization.Functions.Function}
  definition: Hybrid.Authorization.Functions.FunctionHandlerBase`1.Initialize
  name: Initialize()
  nameWithType: FunctionHandlerBase<Function>.Initialize()
  fullName: Hybrid.Authorization.Functions.FunctionHandlerBase<Hybrid.Authorization.Functions.Function>.Initialize()
  nameWithType.vb: FunctionHandlerBase(Of Function).Initialize()
  fullName.vb: Hybrid.Authorization.Functions.FunctionHandlerBase(Of Hybrid.Authorization.Functions.Function).Initialize()
  spec.csharp:
  - uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1.Initialize
    name: Initialize
    nameWithType: FunctionHandlerBase<Function>.Initialize
    fullName: Hybrid.Authorization.Functions.FunctionHandlerBase<Hybrid.Authorization.Functions.Function>.Initialize
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1.Initialize
    name: Initialize
    nameWithType: FunctionHandlerBase(Of Function).Initialize
    fullName: Hybrid.Authorization.Functions.FunctionHandlerBase(Of Hybrid.Authorization.Functions.Function).Initialize
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Authorization.Functions.FunctionHandlerBase{Hybrid.Authorization.Functions.Function}.GetFunction(System.String,System.String,System.String)
  commentId: M:Hybrid.Authorization.Functions.FunctionHandlerBase{Hybrid.Authorization.Functions.Function}.GetFunction(System.String,System.String,System.String)
  parent: Hybrid.Authorization.Functions.FunctionHandlerBase{Hybrid.Authorization.Functions.Function}
  definition: Hybrid.Authorization.Functions.FunctionHandlerBase`1.GetFunction(System.String,System.String,System.String)
  name: GetFunction(String, String, String)
  nameWithType: FunctionHandlerBase<Function>.GetFunction(String, String, String)
  fullName: Hybrid.Authorization.Functions.FunctionHandlerBase<Hybrid.Authorization.Functions.Function>.GetFunction(System.String, System.String, System.String)
  nameWithType.vb: FunctionHandlerBase(Of Function).GetFunction(String, String, String)
  fullName.vb: Hybrid.Authorization.Functions.FunctionHandlerBase(Of Hybrid.Authorization.Functions.Function).GetFunction(System.String, System.String, System.String)
  spec.csharp:
  - uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1.GetFunction(System.String,System.String,System.String)
    name: GetFunction
    nameWithType: FunctionHandlerBase<Function>.GetFunction
    fullName: Hybrid.Authorization.Functions.FunctionHandlerBase<Hybrid.Authorization.Functions.Function>.GetFunction
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1.GetFunction(System.String,System.String,System.String)
    name: GetFunction
    nameWithType: FunctionHandlerBase(Of Function).GetFunction
    fullName: Hybrid.Authorization.Functions.FunctionHandlerBase(Of Hybrid.Authorization.Functions.Function).GetFunction
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Authorization.Functions.FunctionHandlerBase{Hybrid.Authorization.Functions.Function}.RefreshCache
  commentId: M:Hybrid.Authorization.Functions.FunctionHandlerBase{Hybrid.Authorization.Functions.Function}.RefreshCache
  parent: Hybrid.Authorization.Functions.FunctionHandlerBase{Hybrid.Authorization.Functions.Function}
  definition: Hybrid.Authorization.Functions.FunctionHandlerBase`1.RefreshCache
  name: RefreshCache()
  nameWithType: FunctionHandlerBase<Function>.RefreshCache()
  fullName: Hybrid.Authorization.Functions.FunctionHandlerBase<Hybrid.Authorization.Functions.Function>.RefreshCache()
  nameWithType.vb: FunctionHandlerBase(Of Function).RefreshCache()
  fullName.vb: Hybrid.Authorization.Functions.FunctionHandlerBase(Of Hybrid.Authorization.Functions.Function).RefreshCache()
  spec.csharp:
  - uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1.RefreshCache
    name: RefreshCache
    nameWithType: FunctionHandlerBase<Function>.RefreshCache
    fullName: Hybrid.Authorization.Functions.FunctionHandlerBase<Hybrid.Authorization.Functions.Function>.RefreshCache
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1.RefreshCache
    name: RefreshCache
    nameWithType: FunctionHandlerBase(Of Function).RefreshCache
    fullName: Hybrid.Authorization.Functions.FunctionHandlerBase(Of Hybrid.Authorization.Functions.Function).RefreshCache
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Authorization.Functions.FunctionHandlerBase{Hybrid.Authorization.Functions.Function}.ClearCache
  commentId: M:Hybrid.Authorization.Functions.FunctionHandlerBase{Hybrid.Authorization.Functions.Function}.ClearCache
  parent: Hybrid.Authorization.Functions.FunctionHandlerBase{Hybrid.Authorization.Functions.Function}
  definition: Hybrid.Authorization.Functions.FunctionHandlerBase`1.ClearCache
  name: ClearCache()
  nameWithType: FunctionHandlerBase<Function>.ClearCache()
  fullName: Hybrid.Authorization.Functions.FunctionHandlerBase<Hybrid.Authorization.Functions.Function>.ClearCache()
  nameWithType.vb: FunctionHandlerBase(Of Function).ClearCache()
  fullName.vb: Hybrid.Authorization.Functions.FunctionHandlerBase(Of Hybrid.Authorization.Functions.Function).ClearCache()
  spec.csharp:
  - uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1.ClearCache
    name: ClearCache
    nameWithType: FunctionHandlerBase<Function>.ClearCache
    fullName: Hybrid.Authorization.Functions.FunctionHandlerBase<Hybrid.Authorization.Functions.Function>.ClearCache
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1.ClearCache
    name: ClearCache
    nameWithType: FunctionHandlerBase(Of Function).ClearCache
    fullName: Hybrid.Authorization.Functions.FunctionHandlerBase(Of Hybrid.Authorization.Functions.Function).ClearCache
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Authorization.Functions.FunctionHandlerBase{Hybrid.Authorization.Functions.Function}.GetFunctions(System.Type[])
  commentId: M:Hybrid.Authorization.Functions.FunctionHandlerBase{Hybrid.Authorization.Functions.Function}.GetFunctions(System.Type[])
  parent: Hybrid.Authorization.Functions.FunctionHandlerBase{Hybrid.Authorization.Functions.Function}
  definition: Hybrid.Authorization.Functions.FunctionHandlerBase`1.GetFunctions(System.Type[])
  name: GetFunctions(Type[])
  nameWithType: FunctionHandlerBase<Function>.GetFunctions(Type[])
  fullName: Hybrid.Authorization.Functions.FunctionHandlerBase<Hybrid.Authorization.Functions.Function>.GetFunctions(System.Type[])
  nameWithType.vb: FunctionHandlerBase(Of Function).GetFunctions(Type())
  fullName.vb: Hybrid.Authorization.Functions.FunctionHandlerBase(Of Hybrid.Authorization.Functions.Function).GetFunctions(System.Type())
  name.vb: GetFunctions(Type())
  spec.csharp:
  - uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1.GetFunctions(System.Type[])
    name: GetFunctions
    nameWithType: FunctionHandlerBase<Function>.GetFunctions
    fullName: Hybrid.Authorization.Functions.FunctionHandlerBase<Hybrid.Authorization.Functions.Function>.GetFunctions
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1.GetFunctions(System.Type[])
    name: GetFunctions
    nameWithType: FunctionHandlerBase(Of Function).GetFunctions
    fullName: Hybrid.Authorization.Functions.FunctionHandlerBase(Of Hybrid.Authorization.Functions.Function).GetFunctions
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Authorization.Functions.FunctionHandlerBase{Hybrid.Authorization.Functions.Function}.HasPickup(System.Collections.Generic.List{Hybrid.Authorization.Functions.Function},Hybrid.Authorization.Functions.Function)
  commentId: M:Hybrid.Authorization.Functions.FunctionHandlerBase{Hybrid.Authorization.Functions.Function}.HasPickup(System.Collections.Generic.List{Hybrid.Authorization.Functions.Function},Hybrid.Authorization.Functions.Function)
  parent: Hybrid.Authorization.Functions.FunctionHandlerBase{Hybrid.Authorization.Functions.Function}
  definition: Hybrid.Authorization.Functions.FunctionHandlerBase`1.HasPickup(System.Collections.Generic.List{`0},`0)
  name: HasPickup(List<Function>, Function)
  nameWithType: FunctionHandlerBase<Function>.HasPickup(List<Function>, Function)
  fullName: Hybrid.Authorization.Functions.FunctionHandlerBase<Hybrid.Authorization.Functions.Function>.HasPickup(System.Collections.Generic.List<Hybrid.Authorization.Functions.Function>, Hybrid.Authorization.Functions.Function)
  nameWithType.vb: FunctionHandlerBase(Of Function).HasPickup(List(Of Function), Function)
  fullName.vb: Hybrid.Authorization.Functions.FunctionHandlerBase(Of Hybrid.Authorization.Functions.Function).HasPickup(System.Collections.Generic.List(Of Hybrid.Authorization.Functions.Function), Hybrid.Authorization.Functions.Function)
  name.vb: HasPickup(List(Of Function), Function)
  spec.csharp:
  - uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1.HasPickup(System.Collections.Generic.List{`0},`0)
    name: HasPickup
    nameWithType: FunctionHandlerBase<Function>.HasPickup
    fullName: Hybrid.Authorization.Functions.FunctionHandlerBase<Hybrid.Authorization.Functions.Function>.HasPickup
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Authorization.Functions.Function
    name: Function
    nameWithType: Function
    fullName: Hybrid.Authorization.Functions.Function
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Hybrid.Authorization.Functions.Function
    name: Function
    nameWithType: Function
    fullName: Hybrid.Authorization.Functions.Function
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1.HasPickup(System.Collections.Generic.List{`0},`0)
    name: HasPickup
    nameWithType: FunctionHandlerBase(Of Function).HasPickup
    fullName: Hybrid.Authorization.Functions.FunctionHandlerBase(Of Hybrid.Authorization.Functions.Function).HasPickup
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Authorization.Functions.Function
    name: Function
    nameWithType: Function
    fullName: Hybrid.Authorization.Functions.Function
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Hybrid.Authorization.Functions.Function
    name: Function
    nameWithType: Function
    fullName: Hybrid.Authorization.Functions.Function
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Authorization.Functions.FunctionHandlerBase{Hybrid.Authorization.Functions.Function}.GetFunction(System.Collections.Generic.IEnumerable{Hybrid.Authorization.Functions.Function},System.String,System.String,System.String,System.String)
  commentId: M:Hybrid.Authorization.Functions.FunctionHandlerBase{Hybrid.Authorization.Functions.Function}.GetFunction(System.Collections.Generic.IEnumerable{Hybrid.Authorization.Functions.Function},System.String,System.String,System.String,System.String)
  parent: Hybrid.Authorization.Functions.FunctionHandlerBase{Hybrid.Authorization.Functions.Function}
  definition: Hybrid.Authorization.Functions.FunctionHandlerBase`1.GetFunction(System.Collections.Generic.IEnumerable{`0},System.String,System.String,System.String,System.String)
  name: GetFunction(IEnumerable<Function>, String, String, String, String)
  nameWithType: FunctionHandlerBase<Function>.GetFunction(IEnumerable<Function>, String, String, String, String)
  fullName: Hybrid.Authorization.Functions.FunctionHandlerBase<Hybrid.Authorization.Functions.Function>.GetFunction(System.Collections.Generic.IEnumerable<Hybrid.Authorization.Functions.Function>, System.String, System.String, System.String, System.String)
  nameWithType.vb: FunctionHandlerBase(Of Function).GetFunction(IEnumerable(Of Function), String, String, String, String)
  fullName.vb: Hybrid.Authorization.Functions.FunctionHandlerBase(Of Hybrid.Authorization.Functions.Function).GetFunction(System.Collections.Generic.IEnumerable(Of Hybrid.Authorization.Functions.Function), System.String, System.String, System.String, System.String)
  name.vb: GetFunction(IEnumerable(Of Function), String, String, String, String)
  spec.csharp:
  - uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1.GetFunction(System.Collections.Generic.IEnumerable{`0},System.String,System.String,System.String,System.String)
    name: GetFunction
    nameWithType: FunctionHandlerBase<Function>.GetFunction
    fullName: Hybrid.Authorization.Functions.FunctionHandlerBase<Hybrid.Authorization.Functions.Function>.GetFunction
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Authorization.Functions.Function
    name: Function
    nameWithType: Function
    fullName: Hybrid.Authorization.Functions.Function
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1.GetFunction(System.Collections.Generic.IEnumerable{`0},System.String,System.String,System.String,System.String)
    name: GetFunction
    nameWithType: FunctionHandlerBase(Of Function).GetFunction
    fullName: Hybrid.Authorization.Functions.FunctionHandlerBase(Of Hybrid.Authorization.Functions.Function).GetFunction
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Authorization.Functions.Function
    name: Function
    nameWithType: Function
    fullName: Hybrid.Authorization.Functions.Function
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Authorization.Functions.FunctionHandlerBase{Hybrid.Authorization.Functions.Function}.SyncToDatabase(System.IServiceProvider,Hybrid.Authorization.Functions.Function[])
  commentId: M:Hybrid.Authorization.Functions.FunctionHandlerBase{Hybrid.Authorization.Functions.Function}.SyncToDatabase(System.IServiceProvider,Hybrid.Authorization.Functions.Function[])
  parent: Hybrid.Authorization.Functions.FunctionHandlerBase{Hybrid.Authorization.Functions.Function}
  definition: Hybrid.Authorization.Functions.FunctionHandlerBase`1.SyncToDatabase(System.IServiceProvider,`0[])
  name: SyncToDatabase(IServiceProvider, Function[])
  nameWithType: FunctionHandlerBase<Function>.SyncToDatabase(IServiceProvider, Function[])
  fullName: Hybrid.Authorization.Functions.FunctionHandlerBase<Hybrid.Authorization.Functions.Function>.SyncToDatabase(System.IServiceProvider, Hybrid.Authorization.Functions.Function[])
  nameWithType.vb: FunctionHandlerBase(Of Function).SyncToDatabase(IServiceProvider, Function())
  fullName.vb: Hybrid.Authorization.Functions.FunctionHandlerBase(Of Hybrid.Authorization.Functions.Function).SyncToDatabase(System.IServiceProvider, Hybrid.Authorization.Functions.Function())
  name.vb: SyncToDatabase(IServiceProvider, Function())
  spec.csharp:
  - uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1.SyncToDatabase(System.IServiceProvider,`0[])
    name: SyncToDatabase
    nameWithType: FunctionHandlerBase<Function>.SyncToDatabase
    fullName: Hybrid.Authorization.Functions.FunctionHandlerBase<Hybrid.Authorization.Functions.Function>.SyncToDatabase
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IServiceProvider
    name: IServiceProvider
    nameWithType: IServiceProvider
    fullName: System.IServiceProvider
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Hybrid.Authorization.Functions.Function
    name: Function
    nameWithType: Function
    fullName: Hybrid.Authorization.Functions.Function
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1.SyncToDatabase(System.IServiceProvider,`0[])
    name: SyncToDatabase
    nameWithType: FunctionHandlerBase(Of Function).SyncToDatabase
    fullName: Hybrid.Authorization.Functions.FunctionHandlerBase(Of Hybrid.Authorization.Functions.Function).SyncToDatabase
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IServiceProvider
    name: IServiceProvider
    nameWithType: IServiceProvider
    fullName: System.IServiceProvider
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Hybrid.Authorization.Functions.Function
    name: Function
    nameWithType: Function
    fullName: Hybrid.Authorization.Functions.Function
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Authorization.Functions.FunctionHandlerBase{Hybrid.Authorization.Functions.Function}.GetFromDatabase(System.IServiceProvider)
  commentId: M:Hybrid.Authorization.Functions.FunctionHandlerBase{Hybrid.Authorization.Functions.Function}.GetFromDatabase(System.IServiceProvider)
  parent: Hybrid.Authorization.Functions.FunctionHandlerBase{Hybrid.Authorization.Functions.Function}
  definition: Hybrid.Authorization.Functions.FunctionHandlerBase`1.GetFromDatabase(System.IServiceProvider)
  name: GetFromDatabase(IServiceProvider)
  nameWithType: FunctionHandlerBase<Function>.GetFromDatabase(IServiceProvider)
  fullName: Hybrid.Authorization.Functions.FunctionHandlerBase<Hybrid.Authorization.Functions.Function>.GetFromDatabase(System.IServiceProvider)
  nameWithType.vb: FunctionHandlerBase(Of Function).GetFromDatabase(IServiceProvider)
  fullName.vb: Hybrid.Authorization.Functions.FunctionHandlerBase(Of Hybrid.Authorization.Functions.Function).GetFromDatabase(System.IServiceProvider)
  spec.csharp:
  - uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1.GetFromDatabase(System.IServiceProvider)
    name: GetFromDatabase
    nameWithType: FunctionHandlerBase<Function>.GetFromDatabase
    fullName: Hybrid.Authorization.Functions.FunctionHandlerBase<Hybrid.Authorization.Functions.Function>.GetFromDatabase
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IServiceProvider
    name: IServiceProvider
    nameWithType: IServiceProvider
    fullName: System.IServiceProvider
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1.GetFromDatabase(System.IServiceProvider)
    name: GetFromDatabase
    nameWithType: FunctionHandlerBase(Of Function).GetFromDatabase
    fullName: Hybrid.Authorization.Functions.FunctionHandlerBase(Of Hybrid.Authorization.Functions.Function).GetFromDatabase
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IServiceProvider
    name: IServiceProvider
    nameWithType: IServiceProvider
    fullName: System.IServiceProvider
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Extensions.ObjectExtensions.CastTo(System.Type)
  commentId: M:Hybrid.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
  parent: Hybrid.Extensions.ObjectExtensions
  definition: Hybrid.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
  name: CastTo(Type)
  nameWithType: ObjectExtensions.CastTo(Type)
  fullName: Hybrid.Extensions.ObjectExtensions.CastTo(System.Type)
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo(System.Type)
    name: CastTo
    nameWithType: ObjectExtensions.CastTo
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo(System.Type)
    name: CastTo
    nameWithType: ObjectExtensions.CastTo
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Extensions.ObjectExtensions.CastTo``1
  commentId: M:Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object)
  parent: Hybrid.Extensions.ObjectExtensions
  definition: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object)
  name: CastTo<T>()
  nameWithType: ObjectExtensions.CastTo<T>()
  fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>()
  nameWithType.vb: ObjectExtensions.CastTo(Of T)()
  fullName.vb: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)()
  name.vb: CastTo(Of T)()
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1
    name: CastTo<T>
    nameWithType: ObjectExtensions.CastTo<T>
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1
    name: CastTo(Of T)
    nameWithType: ObjectExtensions.CastTo(Of T)
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Extensions.ObjectExtensions.CastTo``1({T})
  commentId: M:Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
  parent: Hybrid.Extensions.ObjectExtensions
  definition: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
  name: CastTo<T>(T)
  nameWithType: ObjectExtensions.CastTo<T>(T)
  fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>(T)
  nameWithType.vb: ObjectExtensions.CastTo(Of T)(T)
  fullName.vb: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)(T)
  name.vb: CastTo(Of T)(T)
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(``0)
    name: CastTo<T>
    nameWithType: ObjectExtensions.CastTo<T>
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(``0)
    name: CastTo(Of T)
    nameWithType: ObjectExtensions.CastTo(Of T)
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.AspNetCore.Mvc.MvcFunctionHandler.Hybrid.Extensions.ObjectExtensions.IsIn``1(Hybrid.AspNetCore.Mvc.MvcFunctionHandler[])
  commentId: M:Hybrid.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
  parent: Hybrid.Extensions.ObjectExtensions
  definition: Hybrid.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
  name: IsIn<MvcFunctionHandler>(MvcFunctionHandler[])
  nameWithType: ObjectExtensions.IsIn<MvcFunctionHandler>(MvcFunctionHandler[])
  fullName: Hybrid.Extensions.ObjectExtensions.IsIn<Hybrid.AspNetCore.Mvc.MvcFunctionHandler>(Hybrid.AspNetCore.Mvc.MvcFunctionHandler[])
  nameWithType.vb: ObjectExtensions.IsIn(Of MvcFunctionHandler)(MvcFunctionHandler())
  fullName.vb: Hybrid.Extensions.ObjectExtensions.IsIn(Of Hybrid.AspNetCore.Mvc.MvcFunctionHandler)(Hybrid.AspNetCore.Mvc.MvcFunctionHandler())
  name.vb: IsIn(Of MvcFunctionHandler)(MvcFunctionHandler())
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.IsIn``1(``0[])
    name: IsIn<MvcFunctionHandler>
    nameWithType: ObjectExtensions.IsIn<MvcFunctionHandler>
    fullName: Hybrid.Extensions.ObjectExtensions.IsIn<Hybrid.AspNetCore.Mvc.MvcFunctionHandler>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Hybrid.AspNetCore.Mvc.MvcFunctionHandler
    name: MvcFunctionHandler
    nameWithType: MvcFunctionHandler
    fullName: Hybrid.AspNetCore.Mvc.MvcFunctionHandler
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.IsIn``1(``0[])
    name: IsIn(Of MvcFunctionHandler)
    nameWithType: ObjectExtensions.IsIn(Of MvcFunctionHandler)
    fullName: Hybrid.Extensions.ObjectExtensions.IsIn(Of Hybrid.AspNetCore.Mvc.MvcFunctionHandler)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Hybrid.AspNetCore.Mvc.MvcFunctionHandler
    name: MvcFunctionHandler
    nameWithType: MvcFunctionHandler
    fullName: Hybrid.AspNetCore.Mvc.MvcFunctionHandler
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Extensions.ObjectExtensions.ToDynamic
  commentId: M:Hybrid.Extensions.ObjectExtensions.ToDynamic(System.Object)
  parent: Hybrid.Extensions.ObjectExtensions
  definition: Hybrid.Extensions.ObjectExtensions.ToDynamic(System.Object)
  name: ToDynamic()
  nameWithType: ObjectExtensions.ToDynamic()
  fullName: Hybrid.Extensions.ObjectExtensions.ToDynamic()
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.ToDynamic
    name: ToDynamic
    nameWithType: ObjectExtensions.ToDynamic
    fullName: Hybrid.Extensions.ObjectExtensions.ToDynamic
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.ToDynamic
    name: ToDynamic
    nameWithType: ObjectExtensions.ToDynamic
    fullName: Hybrid.Extensions.ObjectExtensions.ToDynamic
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.AspNetCore.Mvc.MvcFunctionHandler.Hybrid.Extensions.ObjectExtensions.DeepClone``1
  commentId: M:Hybrid.Extensions.ObjectExtensions.DeepClone``1(``0)
  parent: Hybrid.Extensions.ObjectExtensions
  definition: Hybrid.Extensions.ObjectExtensions.DeepClone``1(``0)
  name: DeepClone<MvcFunctionHandler>()
  nameWithType: ObjectExtensions.DeepClone<MvcFunctionHandler>()
  fullName: Hybrid.Extensions.ObjectExtensions.DeepClone<Hybrid.AspNetCore.Mvc.MvcFunctionHandler>()
  nameWithType.vb: ObjectExtensions.DeepClone(Of MvcFunctionHandler)()
  fullName.vb: Hybrid.Extensions.ObjectExtensions.DeepClone(Of Hybrid.AspNetCore.Mvc.MvcFunctionHandler)()
  name.vb: DeepClone(Of MvcFunctionHandler)()
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.DeepClone``1
    name: DeepClone<MvcFunctionHandler>
    nameWithType: ObjectExtensions.DeepClone<MvcFunctionHandler>
    fullName: Hybrid.Extensions.ObjectExtensions.DeepClone<Hybrid.AspNetCore.Mvc.MvcFunctionHandler>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.DeepClone``1
    name: DeepClone(Of MvcFunctionHandler)
    nameWithType: ObjectExtensions.DeepClone(Of MvcFunctionHandler)
    fullName: Hybrid.Extensions.ObjectExtensions.DeepClone(Of Hybrid.AspNetCore.Mvc.MvcFunctionHandler)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.AspNetCore.Mvc.MvcFunctionHandler.Hybrid.Extensions.ParameterCheckExtensions.Required``1(System.Func{Hybrid.AspNetCore.Mvc.MvcFunctionHandler,System.Boolean},System.String)
  commentId: M:Hybrid.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
  parent: Hybrid.Extensions.ParameterCheckExtensions
  definition: Hybrid.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
  name: Required<MvcFunctionHandler>(Func<MvcFunctionHandler, Boolean>, String)
  nameWithType: ParameterCheckExtensions.Required<MvcFunctionHandler>(Func<MvcFunctionHandler, Boolean>, String)
  fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<Hybrid.AspNetCore.Mvc.MvcFunctionHandler>(System.Func<Hybrid.AspNetCore.Mvc.MvcFunctionHandler, System.Boolean>, System.String)
  nameWithType.vb: ParameterCheckExtensions.Required(Of MvcFunctionHandler)(Func(Of MvcFunctionHandler, Boolean), String)
  fullName.vb: Hybrid.Extensions.ParameterCheckExtensions.Required(Of Hybrid.AspNetCore.Mvc.MvcFunctionHandler)(System.Func(Of Hybrid.AspNetCore.Mvc.MvcFunctionHandler, System.Boolean), System.String)
  name.vb: Required(Of MvcFunctionHandler)(Func(Of MvcFunctionHandler, Boolean), String)
  spec.csharp:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``1(System.Func{``0,System.Boolean},System.String)
    name: Required<MvcFunctionHandler>
    nameWithType: ParameterCheckExtensions.Required<MvcFunctionHandler>
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<Hybrid.AspNetCore.Mvc.MvcFunctionHandler>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.AspNetCore.Mvc.MvcFunctionHandler
    name: MvcFunctionHandler
    nameWithType: MvcFunctionHandler
    fullName: Hybrid.AspNetCore.Mvc.MvcFunctionHandler
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``1(System.Func{``0,System.Boolean},System.String)
    name: Required(Of MvcFunctionHandler)
    nameWithType: ParameterCheckExtensions.Required(Of MvcFunctionHandler)
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required(Of Hybrid.AspNetCore.Mvc.MvcFunctionHandler)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.AspNetCore.Mvc.MvcFunctionHandler
    name: MvcFunctionHandler
    nameWithType: MvcFunctionHandler
    fullName: Hybrid.AspNetCore.Mvc.MvcFunctionHandler
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.AspNetCore.Mvc.MvcFunctionHandler.Hybrid.Extensions.ParameterCheckExtensions.Required``2(System.Func{Hybrid.AspNetCore.Mvc.MvcFunctionHandler,System.Boolean},System.String)
  commentId: M:Hybrid.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
  parent: Hybrid.Extensions.ParameterCheckExtensions
  definition: Hybrid.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
  name: Required<MvcFunctionHandler, TException>(Func<MvcFunctionHandler, Boolean>, String)
  nameWithType: ParameterCheckExtensions.Required<MvcFunctionHandler, TException>(Func<MvcFunctionHandler, Boolean>, String)
  fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<Hybrid.AspNetCore.Mvc.MvcFunctionHandler, TException>(System.Func<Hybrid.AspNetCore.Mvc.MvcFunctionHandler, System.Boolean>, System.String)
  nameWithType.vb: ParameterCheckExtensions.Required(Of MvcFunctionHandler, TException)(Func(Of MvcFunctionHandler, Boolean), String)
  fullName.vb: Hybrid.Extensions.ParameterCheckExtensions.Required(Of Hybrid.AspNetCore.Mvc.MvcFunctionHandler, TException)(System.Func(Of Hybrid.AspNetCore.Mvc.MvcFunctionHandler, System.Boolean), System.String)
  name.vb: Required(Of MvcFunctionHandler, TException)(Func(Of MvcFunctionHandler, Boolean), String)
  spec.csharp:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``2(System.Func{``0,System.Boolean},System.String)
    name: Required<MvcFunctionHandler, TException>
    nameWithType: ParameterCheckExtensions.Required<MvcFunctionHandler, TException>
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<Hybrid.AspNetCore.Mvc.MvcFunctionHandler, TException>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.AspNetCore.Mvc.MvcFunctionHandler
    name: MvcFunctionHandler
    nameWithType: MvcFunctionHandler
    fullName: Hybrid.AspNetCore.Mvc.MvcFunctionHandler
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``2(System.Func{``0,System.Boolean},System.String)
    name: Required(Of MvcFunctionHandler, TException)
    nameWithType: ParameterCheckExtensions.Required(Of MvcFunctionHandler, TException)
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required(Of Hybrid.AspNetCore.Mvc.MvcFunctionHandler, TException)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.AspNetCore.Mvc.MvcFunctionHandler
    name: MvcFunctionHandler
    nameWithType: MvcFunctionHandler
    fullName: Hybrid.AspNetCore.Mvc.MvcFunctionHandler
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.AspNetCore.Mvc.MvcFunctionHandler.Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(System.String)
  commentId: M:Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
  parent: Hybrid.Extensions.ParameterCheckExtensions
  definition: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
  name: CheckNotNull<MvcFunctionHandler>(String)
  nameWithType: ParameterCheckExtensions.CheckNotNull<MvcFunctionHandler>(String)
  fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull<Hybrid.AspNetCore.Mvc.MvcFunctionHandler>(System.String)
  nameWithType.vb: ParameterCheckExtensions.CheckNotNull(Of MvcFunctionHandler)(String)
  fullName.vb: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull(Of Hybrid.AspNetCore.Mvc.MvcFunctionHandler)(System.String)
  name.vb: CheckNotNull(Of MvcFunctionHandler)(String)
  spec.csharp:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(System.String)
    name: CheckNotNull<MvcFunctionHandler>
    nameWithType: ParameterCheckExtensions.CheckNotNull<MvcFunctionHandler>
    fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull<Hybrid.AspNetCore.Mvc.MvcFunctionHandler>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(System.String)
    name: CheckNotNull(Of MvcFunctionHandler)
    nameWithType: ParameterCheckExtensions.CheckNotNull(Of MvcFunctionHandler)
    fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull(Of Hybrid.AspNetCore.Mvc.MvcFunctionHandler)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.AspNetCore.Mvc.MvcFunctionHandler.Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{Hybrid.AspNetCore.Mvc.MvcFunctionHandler},System.Action{System.Exception},System.Action{Hybrid.AspNetCore.Mvc.MvcFunctionHandler})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
  parent: Hybrid.Extensions.TryCatchExtensions
  definition: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
  name: TryCatch<MvcFunctionHandler>(Action<MvcFunctionHandler>, Action<Exception>, Action<MvcFunctionHandler>)
  nameWithType: TryCatchExtensions.TryCatch<MvcFunctionHandler>(Action<MvcFunctionHandler>, Action<Exception>, Action<MvcFunctionHandler>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.AspNetCore.Mvc.MvcFunctionHandler>(System.Action<Hybrid.AspNetCore.Mvc.MvcFunctionHandler>, System.Action<System.Exception>, System.Action<Hybrid.AspNetCore.Mvc.MvcFunctionHandler>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of MvcFunctionHandler)(Action(Of MvcFunctionHandler), Action(Of Exception), Action(Of MvcFunctionHandler))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.AspNetCore.Mvc.MvcFunctionHandler)(System.Action(Of Hybrid.AspNetCore.Mvc.MvcFunctionHandler), System.Action(Of System.Exception), System.Action(Of Hybrid.AspNetCore.Mvc.MvcFunctionHandler))
  name.vb: TryCatch(Of MvcFunctionHandler)(Action(Of MvcFunctionHandler), Action(Of Exception), Action(Of MvcFunctionHandler))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{``0},System.Action{System.Exception},System.Action{``0})
    name: TryCatch<MvcFunctionHandler>
    nameWithType: TryCatchExtensions.TryCatch<MvcFunctionHandler>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.AspNetCore.Mvc.MvcFunctionHandler>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.AspNetCore.Mvc.MvcFunctionHandler
    name: MvcFunctionHandler
    nameWithType: MvcFunctionHandler
    fullName: Hybrid.AspNetCore.Mvc.MvcFunctionHandler
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.AspNetCore.Mvc.MvcFunctionHandler
    name: MvcFunctionHandler
    nameWithType: MvcFunctionHandler
    fullName: Hybrid.AspNetCore.Mvc.MvcFunctionHandler
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{``0},System.Action{System.Exception},System.Action{``0})
    name: TryCatch(Of MvcFunctionHandler)
    nameWithType: TryCatchExtensions.TryCatch(Of MvcFunctionHandler)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.AspNetCore.Mvc.MvcFunctionHandler)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.AspNetCore.Mvc.MvcFunctionHandler
    name: MvcFunctionHandler
    nameWithType: MvcFunctionHandler
    fullName: Hybrid.AspNetCore.Mvc.MvcFunctionHandler
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.AspNetCore.Mvc.MvcFunctionHandler
    name: MvcFunctionHandler
    nameWithType: MvcFunctionHandler
    fullName: Hybrid.AspNetCore.Mvc.MvcFunctionHandler
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.AspNetCore.Mvc.MvcFunctionHandler.Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{Hybrid.AspNetCore.Mvc.MvcFunctionHandler},System.Action{System.Exception})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
  parent: Hybrid.Extensions.TryCatchExtensions
  definition: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
  name: TryCatch<MvcFunctionHandler>(Action<MvcFunctionHandler>, Action<Exception>)
  nameWithType: TryCatchExtensions.TryCatch<MvcFunctionHandler>(Action<MvcFunctionHandler>, Action<Exception>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.AspNetCore.Mvc.MvcFunctionHandler>(System.Action<Hybrid.AspNetCore.Mvc.MvcFunctionHandler>, System.Action<System.Exception>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of MvcFunctionHandler)(Action(Of MvcFunctionHandler), Action(Of Exception))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.AspNetCore.Mvc.MvcFunctionHandler)(System.Action(Of Hybrid.AspNetCore.Mvc.MvcFunctionHandler), System.Action(Of System.Exception))
  name.vb: TryCatch(Of MvcFunctionHandler)(Action(Of MvcFunctionHandler), Action(Of Exception))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{``0},System.Action{System.Exception})
    name: TryCatch<MvcFunctionHandler>
    nameWithType: TryCatchExtensions.TryCatch<MvcFunctionHandler>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.AspNetCore.Mvc.MvcFunctionHandler>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.AspNetCore.Mvc.MvcFunctionHandler
    name: MvcFunctionHandler
    nameWithType: MvcFunctionHandler
    fullName: Hybrid.AspNetCore.Mvc.MvcFunctionHandler
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{``0},System.Action{System.Exception})
    name: TryCatch(Of MvcFunctionHandler)
    nameWithType: TryCatchExtensions.TryCatch(Of MvcFunctionHandler)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.AspNetCore.Mvc.MvcFunctionHandler)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.AspNetCore.Mvc.MvcFunctionHandler
    name: MvcFunctionHandler
    nameWithType: MvcFunctionHandler
    fullName: Hybrid.AspNetCore.Mvc.MvcFunctionHandler
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.AspNetCore.Mvc.MvcFunctionHandler.Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{Hybrid.AspNetCore.Mvc.MvcFunctionHandler,{TResult}},System.Action{System.Exception},System.Action{Hybrid.AspNetCore.Mvc.MvcFunctionHandler})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
  parent: Hybrid.Extensions.TryCatchExtensions
  definition: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
  name: TryCatch<MvcFunctionHandler, TResult>(Func<MvcFunctionHandler, TResult>, Action<Exception>, Action<MvcFunctionHandler>)
  nameWithType: TryCatchExtensions.TryCatch<MvcFunctionHandler, TResult>(Func<MvcFunctionHandler, TResult>, Action<Exception>, Action<MvcFunctionHandler>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.AspNetCore.Mvc.MvcFunctionHandler, TResult>(System.Func<Hybrid.AspNetCore.Mvc.MvcFunctionHandler, TResult>, System.Action<System.Exception>, System.Action<Hybrid.AspNetCore.Mvc.MvcFunctionHandler>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of MvcFunctionHandler, TResult)(Func(Of MvcFunctionHandler, TResult), Action(Of Exception), Action(Of MvcFunctionHandler))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.AspNetCore.Mvc.MvcFunctionHandler, TResult)(System.Func(Of Hybrid.AspNetCore.Mvc.MvcFunctionHandler, TResult), System.Action(Of System.Exception), System.Action(Of Hybrid.AspNetCore.Mvc.MvcFunctionHandler))
  name.vb: TryCatch(Of MvcFunctionHandler, TResult)(Func(Of MvcFunctionHandler, TResult), Action(Of Exception), Action(Of MvcFunctionHandler))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
    name: TryCatch<MvcFunctionHandler, TResult>
    nameWithType: TryCatchExtensions.TryCatch<MvcFunctionHandler, TResult>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.AspNetCore.Mvc.MvcFunctionHandler, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.AspNetCore.Mvc.MvcFunctionHandler
    name: MvcFunctionHandler
    nameWithType: MvcFunctionHandler
    fullName: Hybrid.AspNetCore.Mvc.MvcFunctionHandler
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.AspNetCore.Mvc.MvcFunctionHandler
    name: MvcFunctionHandler
    nameWithType: MvcFunctionHandler
    fullName: Hybrid.AspNetCore.Mvc.MvcFunctionHandler
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
    name: TryCatch(Of MvcFunctionHandler, TResult)
    nameWithType: TryCatchExtensions.TryCatch(Of MvcFunctionHandler, TResult)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.AspNetCore.Mvc.MvcFunctionHandler, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.AspNetCore.Mvc.MvcFunctionHandler
    name: MvcFunctionHandler
    nameWithType: MvcFunctionHandler
    fullName: Hybrid.AspNetCore.Mvc.MvcFunctionHandler
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.AspNetCore.Mvc.MvcFunctionHandler
    name: MvcFunctionHandler
    nameWithType: MvcFunctionHandler
    fullName: Hybrid.AspNetCore.Mvc.MvcFunctionHandler
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.AspNetCore.Mvc.MvcFunctionHandler.Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{Hybrid.AspNetCore.Mvc.MvcFunctionHandler,{TResult}},System.Action{System.Exception})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
  parent: Hybrid.Extensions.TryCatchExtensions
  definition: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
  name: TryCatch<MvcFunctionHandler, TResult>(Func<MvcFunctionHandler, TResult>, Action<Exception>)
  nameWithType: TryCatchExtensions.TryCatch<MvcFunctionHandler, TResult>(Func<MvcFunctionHandler, TResult>, Action<Exception>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.AspNetCore.Mvc.MvcFunctionHandler, TResult>(System.Func<Hybrid.AspNetCore.Mvc.MvcFunctionHandler, TResult>, System.Action<System.Exception>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of MvcFunctionHandler, TResult)(Func(Of MvcFunctionHandler, TResult), Action(Of Exception))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.AspNetCore.Mvc.MvcFunctionHandler, TResult)(System.Func(Of Hybrid.AspNetCore.Mvc.MvcFunctionHandler, TResult), System.Action(Of System.Exception))
  name.vb: TryCatch(Of MvcFunctionHandler, TResult)(Func(Of MvcFunctionHandler, TResult), Action(Of Exception))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{``0,``1},System.Action{System.Exception})
    name: TryCatch<MvcFunctionHandler, TResult>
    nameWithType: TryCatchExtensions.TryCatch<MvcFunctionHandler, TResult>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.AspNetCore.Mvc.MvcFunctionHandler, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.AspNetCore.Mvc.MvcFunctionHandler
    name: MvcFunctionHandler
    nameWithType: MvcFunctionHandler
    fullName: Hybrid.AspNetCore.Mvc.MvcFunctionHandler
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{``0,``1},System.Action{System.Exception})
    name: TryCatch(Of MvcFunctionHandler, TResult)
    nameWithType: TryCatchExtensions.TryCatch(Of MvcFunctionHandler, TResult)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.AspNetCore.Mvc.MvcFunctionHandler, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.AspNetCore.Mvc.MvcFunctionHandler
    name: MvcFunctionHandler
    nameWithType: MvcFunctionHandler
    fullName: Hybrid.AspNetCore.Mvc.MvcFunctionHandler
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.AspNetCore.Mvc.MvcFunctionHandler.Hybrid.Extensions.TryCatchExtensions.TryFinally``1(System.Action{Hybrid.AspNetCore.Mvc.MvcFunctionHandler},System.Action{Hybrid.AspNetCore.Mvc.MvcFunctionHandler})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
  parent: Hybrid.Extensions.TryCatchExtensions
  definition: Hybrid.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
  name: TryFinally<MvcFunctionHandler>(Action<MvcFunctionHandler>, Action<MvcFunctionHandler>)
  nameWithType: TryCatchExtensions.TryFinally<MvcFunctionHandler>(Action<MvcFunctionHandler>, Action<MvcFunctionHandler>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryFinally<Hybrid.AspNetCore.Mvc.MvcFunctionHandler>(System.Action<Hybrid.AspNetCore.Mvc.MvcFunctionHandler>, System.Action<Hybrid.AspNetCore.Mvc.MvcFunctionHandler>)
  nameWithType.vb: TryCatchExtensions.TryFinally(Of MvcFunctionHandler)(Action(Of MvcFunctionHandler), Action(Of MvcFunctionHandler))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryFinally(Of Hybrid.AspNetCore.Mvc.MvcFunctionHandler)(System.Action(Of Hybrid.AspNetCore.Mvc.MvcFunctionHandler), System.Action(Of Hybrid.AspNetCore.Mvc.MvcFunctionHandler))
  name.vb: TryFinally(Of MvcFunctionHandler)(Action(Of MvcFunctionHandler), Action(Of MvcFunctionHandler))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryFinally``1(System.Action{``0},System.Action{``0})
    name: TryFinally<MvcFunctionHandler>
    nameWithType: TryCatchExtensions.TryFinally<MvcFunctionHandler>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryFinally<Hybrid.AspNetCore.Mvc.MvcFunctionHandler>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.AspNetCore.Mvc.MvcFunctionHandler
    name: MvcFunctionHandler
    nameWithType: MvcFunctionHandler
    fullName: Hybrid.AspNetCore.Mvc.MvcFunctionHandler
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.AspNetCore.Mvc.MvcFunctionHandler
    name: MvcFunctionHandler
    nameWithType: MvcFunctionHandler
    fullName: Hybrid.AspNetCore.Mvc.MvcFunctionHandler
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryFinally``1(System.Action{``0},System.Action{``0})
    name: TryFinally(Of MvcFunctionHandler)
    nameWithType: TryCatchExtensions.TryFinally(Of MvcFunctionHandler)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryFinally(Of Hybrid.AspNetCore.Mvc.MvcFunctionHandler)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.AspNetCore.Mvc.MvcFunctionHandler
    name: MvcFunctionHandler
    nameWithType: MvcFunctionHandler
    fullName: Hybrid.AspNetCore.Mvc.MvcFunctionHandler
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.AspNetCore.Mvc.MvcFunctionHandler
    name: MvcFunctionHandler
    nameWithType: MvcFunctionHandler
    fullName: Hybrid.AspNetCore.Mvc.MvcFunctionHandler
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Json.JsonExtensions.ToJsonString(System.Boolean,System.Boolean)
  commentId: M:Hybrid.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
  parent: Hybrid.Json.JsonExtensions
  definition: Hybrid.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
  name: ToJsonString(Boolean, Boolean)
  nameWithType: JsonExtensions.ToJsonString(Boolean, Boolean)
  fullName: Hybrid.Json.JsonExtensions.ToJsonString(System.Boolean, System.Boolean)
  spec.csharp:
  - uid: Hybrid.Json.JsonExtensions.ToJsonString(System.Boolean,System.Boolean)
    name: ToJsonString
    nameWithType: JsonExtensions.ToJsonString
    fullName: Hybrid.Json.JsonExtensions.ToJsonString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Json.JsonExtensions.ToJsonString(System.Boolean,System.Boolean)
    name: ToJsonString
    nameWithType: JsonExtensions.ToJsonString
    fullName: Hybrid.Json.JsonExtensions.ToJsonString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Mapping.MapperExtensions.MapTo``1
  commentId: M:Hybrid.Mapping.MapperExtensions.MapTo``1(System.Object)
  parent: Hybrid.Mapping.MapperExtensions
  definition: Hybrid.Mapping.MapperExtensions.MapTo``1(System.Object)
  name: MapTo<TTarget>()
  nameWithType: MapperExtensions.MapTo<TTarget>()
  fullName: Hybrid.Mapping.MapperExtensions.MapTo<TTarget>()
  nameWithType.vb: MapperExtensions.MapTo(Of TTarget)()
  fullName.vb: Hybrid.Mapping.MapperExtensions.MapTo(Of TTarget)()
  name.vb: MapTo(Of TTarget)()
  spec.csharp:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``1
    name: MapTo<TTarget>
    nameWithType: MapperExtensions.MapTo<TTarget>
    fullName: Hybrid.Mapping.MapperExtensions.MapTo<TTarget>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``1
    name: MapTo(Of TTarget)
    nameWithType: MapperExtensions.MapTo(Of TTarget)
    fullName: Hybrid.Mapping.MapperExtensions.MapTo(Of TTarget)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.AspNetCore.Mvc.MvcFunctionHandler.Hybrid.Mapping.MapperExtensions.MapTo``2({TTarget})
  commentId: M:Hybrid.Mapping.MapperExtensions.MapTo``2(``0,``1)
  parent: Hybrid.Mapping.MapperExtensions
  definition: Hybrid.Mapping.MapperExtensions.MapTo``2(``0,``1)
  name: MapTo<MvcFunctionHandler, TTarget>(TTarget)
  nameWithType: MapperExtensions.MapTo<MvcFunctionHandler, TTarget>(TTarget)
  fullName: Hybrid.Mapping.MapperExtensions.MapTo<Hybrid.AspNetCore.Mvc.MvcFunctionHandler, TTarget>(TTarget)
  nameWithType.vb: MapperExtensions.MapTo(Of MvcFunctionHandler, TTarget)(TTarget)
  fullName.vb: Hybrid.Mapping.MapperExtensions.MapTo(Of Hybrid.AspNetCore.Mvc.MvcFunctionHandler, TTarget)(TTarget)
  name.vb: MapTo(Of MvcFunctionHandler, TTarget)(TTarget)
  spec.csharp:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``2(``1)
    name: MapTo<MvcFunctionHandler, TTarget>
    nameWithType: MapperExtensions.MapTo<MvcFunctionHandler, TTarget>
    fullName: Hybrid.Mapping.MapperExtensions.MapTo<Hybrid.AspNetCore.Mvc.MvcFunctionHandler, TTarget>
  - name: (
    nameWithType: (
    fullName: (
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``2(``1)
    name: MapTo(Of MvcFunctionHandler, TTarget)
    nameWithType: MapperExtensions.MapTo(Of MvcFunctionHandler, TTarget)
    fullName: Hybrid.Mapping.MapperExtensions.MapTo(Of Hybrid.AspNetCore.Mvc.MvcFunctionHandler, TTarget)
  - name: (
    nameWithType: (
    fullName: (
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Reflection.LockExtensions.Locking(System.Action)
  commentId: M:Hybrid.Reflection.LockExtensions.Locking(System.Object,System.Action)
  parent: Hybrid.Reflection.LockExtensions
  definition: Hybrid.Reflection.LockExtensions.Locking(System.Object,System.Action)
  name: Locking(Action)
  nameWithType: LockExtensions.Locking(Action)
  fullName: Hybrid.Reflection.LockExtensions.Locking(System.Action)
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking(System.Action)
    name: Locking
    nameWithType: LockExtensions.Locking
    fullName: Hybrid.Reflection.LockExtensions.Locking
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking(System.Action)
    name: Locking
    nameWithType: LockExtensions.Locking
    fullName: Hybrid.Reflection.LockExtensions.Locking
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.AspNetCore.Mvc.MvcFunctionHandler.Hybrid.Reflection.LockExtensions.Locking``1(System.Action{Hybrid.AspNetCore.Mvc.MvcFunctionHandler})
  commentId: M:Hybrid.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
  parent: Hybrid.Reflection.LockExtensions
  definition: Hybrid.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
  name: Locking<MvcFunctionHandler>(Action<MvcFunctionHandler>)
  nameWithType: LockExtensions.Locking<MvcFunctionHandler>(Action<MvcFunctionHandler>)
  fullName: Hybrid.Reflection.LockExtensions.Locking<Hybrid.AspNetCore.Mvc.MvcFunctionHandler>(System.Action<Hybrid.AspNetCore.Mvc.MvcFunctionHandler>)
  nameWithType.vb: LockExtensions.Locking(Of MvcFunctionHandler)(Action(Of MvcFunctionHandler))
  fullName.vb: Hybrid.Reflection.LockExtensions.Locking(Of Hybrid.AspNetCore.Mvc.MvcFunctionHandler)(System.Action(Of Hybrid.AspNetCore.Mvc.MvcFunctionHandler))
  name.vb: Locking(Of MvcFunctionHandler)(Action(Of MvcFunctionHandler))
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(System.Action{``0})
    name: Locking<MvcFunctionHandler>
    nameWithType: LockExtensions.Locking<MvcFunctionHandler>
    fullName: Hybrid.Reflection.LockExtensions.Locking<Hybrid.AspNetCore.Mvc.MvcFunctionHandler>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.AspNetCore.Mvc.MvcFunctionHandler
    name: MvcFunctionHandler
    nameWithType: MvcFunctionHandler
    fullName: Hybrid.AspNetCore.Mvc.MvcFunctionHandler
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(System.Action{``0})
    name: Locking(Of MvcFunctionHandler)
    nameWithType: LockExtensions.Locking(Of MvcFunctionHandler)
    fullName: Hybrid.Reflection.LockExtensions.Locking(Of Hybrid.AspNetCore.Mvc.MvcFunctionHandler)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.AspNetCore.Mvc.MvcFunctionHandler
    name: MvcFunctionHandler
    nameWithType: MvcFunctionHandler
    fullName: Hybrid.AspNetCore.Mvc.MvcFunctionHandler
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Reflection.LockExtensions.Locking``1(System.Func{{TResult}})
  commentId: M:Hybrid.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
  parent: Hybrid.Reflection.LockExtensions
  definition: Hybrid.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
  name: Locking<TResult>(Func<TResult>)
  nameWithType: LockExtensions.Locking<TResult>(Func<TResult>)
  fullName: Hybrid.Reflection.LockExtensions.Locking<TResult>(System.Func<TResult>)
  nameWithType.vb: LockExtensions.Locking(Of TResult)(Func(Of TResult))
  fullName.vb: Hybrid.Reflection.LockExtensions.Locking(Of TResult)(System.Func(Of TResult))
  name.vb: Locking(Of TResult)(Func(Of TResult))
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(System.Func{``0})
    name: Locking<TResult>
    nameWithType: LockExtensions.Locking<TResult>
    fullName: Hybrid.Reflection.LockExtensions.Locking<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(System.Func{``0})
    name: Locking(Of TResult)
    nameWithType: LockExtensions.Locking(Of TResult)
    fullName: Hybrid.Reflection.LockExtensions.Locking(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.AspNetCore.Mvc.MvcFunctionHandler.Hybrid.Reflection.LockExtensions.Locking``2(System.Func{Hybrid.AspNetCore.Mvc.MvcFunctionHandler,{TResult}})
  commentId: M:Hybrid.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
  parent: Hybrid.Reflection.LockExtensions
  definition: Hybrid.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
  name: Locking<MvcFunctionHandler, TResult>(Func<MvcFunctionHandler, TResult>)
  nameWithType: LockExtensions.Locking<MvcFunctionHandler, TResult>(Func<MvcFunctionHandler, TResult>)
  fullName: Hybrid.Reflection.LockExtensions.Locking<Hybrid.AspNetCore.Mvc.MvcFunctionHandler, TResult>(System.Func<Hybrid.AspNetCore.Mvc.MvcFunctionHandler, TResult>)
  nameWithType.vb: LockExtensions.Locking(Of MvcFunctionHandler, TResult)(Func(Of MvcFunctionHandler, TResult))
  fullName.vb: Hybrid.Reflection.LockExtensions.Locking(Of Hybrid.AspNetCore.Mvc.MvcFunctionHandler, TResult)(System.Func(Of Hybrid.AspNetCore.Mvc.MvcFunctionHandler, TResult))
  name.vb: Locking(Of MvcFunctionHandler, TResult)(Func(Of MvcFunctionHandler, TResult))
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking``2(System.Func{``0,``1})
    name: Locking<MvcFunctionHandler, TResult>
    nameWithType: LockExtensions.Locking<MvcFunctionHandler, TResult>
    fullName: Hybrid.Reflection.LockExtensions.Locking<Hybrid.AspNetCore.Mvc.MvcFunctionHandler, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.AspNetCore.Mvc.MvcFunctionHandler
    name: MvcFunctionHandler
    nameWithType: MvcFunctionHandler
    fullName: Hybrid.AspNetCore.Mvc.MvcFunctionHandler
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking``2(System.Func{``0,``1})
    name: Locking(Of MvcFunctionHandler, TResult)
    nameWithType: LockExtensions.Locking(Of MvcFunctionHandler, TResult)
    fullName: Hybrid.Reflection.LockExtensions.Locking(Of Hybrid.AspNetCore.Mvc.MvcFunctionHandler, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.AspNetCore.Mvc.MvcFunctionHandler
    name: MvcFunctionHandler
    nameWithType: MvcFunctionHandler
    fullName: Hybrid.AspNetCore.Mvc.MvcFunctionHandler
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.AspNetCore.Mvc.MvcFunctionHandler.Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2
  commentId: M:Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2(``0)
  parent: Hybrid.Domain.Entities.EntityExtensions
  definition: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2(``0)
  name: CheckICreatedTime<MvcFunctionHandler, TKey>()
  nameWithType: EntityExtensions.CheckICreatedTime<MvcFunctionHandler, TKey>()
  fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime<Hybrid.AspNetCore.Mvc.MvcFunctionHandler, TKey>()
  nameWithType.vb: EntityExtensions.CheckICreatedTime(Of MvcFunctionHandler, TKey)()
  fullName.vb: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime(Of Hybrid.AspNetCore.Mvc.MvcFunctionHandler, TKey)()
  name.vb: CheckICreatedTime(Of MvcFunctionHandler, TKey)()
  spec.csharp:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2
    name: CheckICreatedTime<MvcFunctionHandler, TKey>
    nameWithType: EntityExtensions.CheckICreatedTime<MvcFunctionHandler, TKey>
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime<Hybrid.AspNetCore.Mvc.MvcFunctionHandler, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2
    name: CheckICreatedTime(Of MvcFunctionHandler, TKey)
    nameWithType: EntityExtensions.CheckICreatedTime(Of MvcFunctionHandler, TKey)
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime(Of Hybrid.AspNetCore.Mvc.MvcFunctionHandler, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.AspNetCore.Mvc.MvcFunctionHandler.Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(System.Security.Principal.IPrincipal)
  commentId: M:Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
  parent: Hybrid.Domain.Entities.EntityExtensions
  definition: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
  name: CheckICreationAudited<MvcFunctionHandler, TKey, TUserKey>(IPrincipal)
  nameWithType: EntityExtensions.CheckICreationAudited<MvcFunctionHandler, TKey, TUserKey>(IPrincipal)
  fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited<Hybrid.AspNetCore.Mvc.MvcFunctionHandler, TKey, TUserKey>(System.Security.Principal.IPrincipal)
  nameWithType.vb: EntityExtensions.CheckICreationAudited(Of MvcFunctionHandler, TKey, TUserKey)(IPrincipal)
  fullName.vb: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited(Of Hybrid.AspNetCore.Mvc.MvcFunctionHandler, TKey, TUserKey)(System.Security.Principal.IPrincipal)
  name.vb: CheckICreationAudited(Of MvcFunctionHandler, TKey, TUserKey)(IPrincipal)
  spec.csharp:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(System.Security.Principal.IPrincipal)
    name: CheckICreationAudited<MvcFunctionHandler, TKey, TUserKey>
    nameWithType: EntityExtensions.CheckICreationAudited<MvcFunctionHandler, TKey, TUserKey>
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited<Hybrid.AspNetCore.Mvc.MvcFunctionHandler, TKey, TUserKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(System.Security.Principal.IPrincipal)
    name: CheckICreationAudited(Of MvcFunctionHandler, TKey, TUserKey)
    nameWithType: EntityExtensions.CheckICreationAudited(Of MvcFunctionHandler, TKey, TUserKey)
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited(Of Hybrid.AspNetCore.Mvc.MvcFunctionHandler, TKey, TUserKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.AspNetCore.Mvc.MvcFunctionHandler.Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(System.Security.Principal.IPrincipal)
  commentId: M:Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
  parent: Hybrid.Domain.Entities.EntityExtensions
  definition: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
  name: CheckIUpdateAudited<MvcFunctionHandler, TKey, TUserKey>(IPrincipal)
  nameWithType: EntityExtensions.CheckIUpdateAudited<MvcFunctionHandler, TKey, TUserKey>(IPrincipal)
  fullName: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited<Hybrid.AspNetCore.Mvc.MvcFunctionHandler, TKey, TUserKey>(System.Security.Principal.IPrincipal)
  nameWithType.vb: EntityExtensions.CheckIUpdateAudited(Of MvcFunctionHandler, TKey, TUserKey)(IPrincipal)
  fullName.vb: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited(Of Hybrid.AspNetCore.Mvc.MvcFunctionHandler, TKey, TUserKey)(System.Security.Principal.IPrincipal)
  name.vb: CheckIUpdateAudited(Of MvcFunctionHandler, TKey, TUserKey)(IPrincipal)
  spec.csharp:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(System.Security.Principal.IPrincipal)
    name: CheckIUpdateAudited<MvcFunctionHandler, TKey, TUserKey>
    nameWithType: EntityExtensions.CheckIUpdateAudited<MvcFunctionHandler, TKey, TUserKey>
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited<Hybrid.AspNetCore.Mvc.MvcFunctionHandler, TKey, TUserKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(System.Security.Principal.IPrincipal)
    name: CheckIUpdateAudited(Of MvcFunctionHandler, TKey, TUserKey)
    nameWithType: EntityExtensions.CheckIUpdateAudited(Of MvcFunctionHandler, TKey, TUserKey)
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited(Of Hybrid.AspNetCore.Mvc.MvcFunctionHandler, TKey, TUserKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1
  commentId: T:Hybrid.Authorization.Functions.FunctionHandlerBase`1
  name: FunctionHandlerBase<TFunction>
  nameWithType: FunctionHandlerBase<TFunction>
  fullName: Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>
  nameWithType.vb: FunctionHandlerBase(Of TFunction)
  fullName.vb: Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction)
  name.vb: FunctionHandlerBase(Of TFunction)
  spec.csharp:
  - uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1
    name: FunctionHandlerBase
    nameWithType: FunctionHandlerBase
    fullName: Hybrid.Authorization.Functions.FunctionHandlerBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1
    name: FunctionHandlerBase
    nameWithType: FunctionHandlerBase
    fullName: Hybrid.Authorization.Functions.FunctionHandlerBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Authorization.Functions
  commentId: N:Hybrid.Authorization.Functions
  name: Hybrid.Authorization.Functions
  nameWithType: Hybrid.Authorization.Functions
  fullName: Hybrid.Authorization.Functions
- uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1.Logger
  commentId: P:Hybrid.Authorization.Functions.FunctionHandlerBase`1.Logger
  name: Logger
  nameWithType: FunctionHandlerBase<TFunction>.Logger
  fullName: Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>.Logger
  nameWithType.vb: FunctionHandlerBase(Of TFunction).Logger
  fullName.vb: Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction).Logger
- uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1.Initialize
  commentId: M:Hybrid.Authorization.Functions.FunctionHandlerBase`1.Initialize
  name: Initialize()
  nameWithType: FunctionHandlerBase<TFunction>.Initialize()
  fullName: Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>.Initialize()
  nameWithType.vb: FunctionHandlerBase(Of TFunction).Initialize()
  fullName.vb: Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction).Initialize()
  spec.csharp:
  - uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1.Initialize
    name: Initialize
    nameWithType: FunctionHandlerBase<TFunction>.Initialize
    fullName: Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>.Initialize
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1.Initialize
    name: Initialize
    nameWithType: FunctionHandlerBase(Of TFunction).Initialize
    fullName: Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction).Initialize
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1.GetFunction(System.String,System.String,System.String)
  commentId: M:Hybrid.Authorization.Functions.FunctionHandlerBase`1.GetFunction(System.String,System.String,System.String)
  isExternal: true
  name: GetFunction(String, String, String)
  nameWithType: FunctionHandlerBase<TFunction>.GetFunction(String, String, String)
  fullName: Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>.GetFunction(System.String, System.String, System.String)
  nameWithType.vb: FunctionHandlerBase(Of TFunction).GetFunction(String, String, String)
  fullName.vb: Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction).GetFunction(System.String, System.String, System.String)
  spec.csharp:
  - uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1.GetFunction(System.String,System.String,System.String)
    name: GetFunction
    nameWithType: FunctionHandlerBase<TFunction>.GetFunction
    fullName: Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>.GetFunction
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1.GetFunction(System.String,System.String,System.String)
    name: GetFunction
    nameWithType: FunctionHandlerBase(Of TFunction).GetFunction
    fullName: Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction).GetFunction
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1.RefreshCache
  commentId: M:Hybrid.Authorization.Functions.FunctionHandlerBase`1.RefreshCache
  name: RefreshCache()
  nameWithType: FunctionHandlerBase<TFunction>.RefreshCache()
  fullName: Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>.RefreshCache()
  nameWithType.vb: FunctionHandlerBase(Of TFunction).RefreshCache()
  fullName.vb: Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction).RefreshCache()
  spec.csharp:
  - uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1.RefreshCache
    name: RefreshCache
    nameWithType: FunctionHandlerBase<TFunction>.RefreshCache
    fullName: Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>.RefreshCache
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1.RefreshCache
    name: RefreshCache
    nameWithType: FunctionHandlerBase(Of TFunction).RefreshCache
    fullName: Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction).RefreshCache
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1.ClearCache
  commentId: M:Hybrid.Authorization.Functions.FunctionHandlerBase`1.ClearCache
  name: ClearCache()
  nameWithType: FunctionHandlerBase<TFunction>.ClearCache()
  fullName: Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>.ClearCache()
  nameWithType.vb: FunctionHandlerBase(Of TFunction).ClearCache()
  fullName.vb: Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction).ClearCache()
  spec.csharp:
  - uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1.ClearCache
    name: ClearCache
    nameWithType: FunctionHandlerBase<TFunction>.ClearCache
    fullName: Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>.ClearCache
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1.ClearCache
    name: ClearCache
    nameWithType: FunctionHandlerBase(Of TFunction).ClearCache
    fullName: Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction).ClearCache
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1.GetFunctions(System.Type[])
  commentId: M:Hybrid.Authorization.Functions.FunctionHandlerBase`1.GetFunctions(System.Type[])
  isExternal: true
  name: GetFunctions(Type[])
  nameWithType: FunctionHandlerBase<TFunction>.GetFunctions(Type[])
  fullName: Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>.GetFunctions(System.Type[])
  nameWithType.vb: FunctionHandlerBase(Of TFunction).GetFunctions(Type())
  fullName.vb: Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction).GetFunctions(System.Type())
  name.vb: GetFunctions(Type())
  spec.csharp:
  - uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1.GetFunctions(System.Type[])
    name: GetFunctions
    nameWithType: FunctionHandlerBase<TFunction>.GetFunctions
    fullName: Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>.GetFunctions
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1.GetFunctions(System.Type[])
    name: GetFunctions
    nameWithType: FunctionHandlerBase(Of TFunction).GetFunctions
    fullName: Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction).GetFunctions
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1.HasPickup(System.Collections.Generic.List{`0},`0)
  commentId: M:Hybrid.Authorization.Functions.FunctionHandlerBase`1.HasPickup(System.Collections.Generic.List{`0},`0)
  isExternal: true
  name: HasPickup(List<TFunction>, TFunction)
  nameWithType: FunctionHandlerBase<TFunction>.HasPickup(List<TFunction>, TFunction)
  fullName: Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>.HasPickup(System.Collections.Generic.List<TFunction>, TFunction)
  nameWithType.vb: FunctionHandlerBase(Of TFunction).HasPickup(List(Of TFunction), TFunction)
  fullName.vb: Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction).HasPickup(System.Collections.Generic.List(Of TFunction), TFunction)
  name.vb: HasPickup(List(Of TFunction), TFunction)
  spec.csharp:
  - uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1.HasPickup(System.Collections.Generic.List{`0},`0)
    name: HasPickup
    nameWithType: FunctionHandlerBase<TFunction>.HasPickup
    fullName: Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>.HasPickup
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1.HasPickup(System.Collections.Generic.List{`0},`0)
    name: HasPickup
    nameWithType: FunctionHandlerBase(Of TFunction).HasPickup
    fullName: Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction).HasPickup
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1.GetFunction(System.Collections.Generic.IEnumerable{`0},System.String,System.String,System.String,System.String)
  commentId: M:Hybrid.Authorization.Functions.FunctionHandlerBase`1.GetFunction(System.Collections.Generic.IEnumerable{`0},System.String,System.String,System.String,System.String)
  isExternal: true
  name: GetFunction(IEnumerable<TFunction>, String, String, String, String)
  nameWithType: FunctionHandlerBase<TFunction>.GetFunction(IEnumerable<TFunction>, String, String, String, String)
  fullName: Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>.GetFunction(System.Collections.Generic.IEnumerable<TFunction>, System.String, System.String, System.String, System.String)
  nameWithType.vb: FunctionHandlerBase(Of TFunction).GetFunction(IEnumerable(Of TFunction), String, String, String, String)
  fullName.vb: Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction).GetFunction(System.Collections.Generic.IEnumerable(Of TFunction), System.String, System.String, System.String, System.String)
  name.vb: GetFunction(IEnumerable(Of TFunction), String, String, String, String)
  spec.csharp:
  - uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1.GetFunction(System.Collections.Generic.IEnumerable{`0},System.String,System.String,System.String,System.String)
    name: GetFunction
    nameWithType: FunctionHandlerBase<TFunction>.GetFunction
    fullName: Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>.GetFunction
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1.GetFunction(System.Collections.Generic.IEnumerable{`0},System.String,System.String,System.String,System.String)
    name: GetFunction
    nameWithType: FunctionHandlerBase(Of TFunction).GetFunction
    fullName: Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction).GetFunction
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1.SyncToDatabase(System.IServiceProvider,`0[])
  commentId: M:Hybrid.Authorization.Functions.FunctionHandlerBase`1.SyncToDatabase(System.IServiceProvider,`0[])
  isExternal: true
  name: SyncToDatabase(IServiceProvider, TFunction[])
  nameWithType: FunctionHandlerBase<TFunction>.SyncToDatabase(IServiceProvider, TFunction[])
  fullName: Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>.SyncToDatabase(System.IServiceProvider, TFunction[])
  nameWithType.vb: FunctionHandlerBase(Of TFunction).SyncToDatabase(IServiceProvider, TFunction())
  fullName.vb: Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction).SyncToDatabase(System.IServiceProvider, TFunction())
  name.vb: SyncToDatabase(IServiceProvider, TFunction())
  spec.csharp:
  - uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1.SyncToDatabase(System.IServiceProvider,`0[])
    name: SyncToDatabase
    nameWithType: FunctionHandlerBase<TFunction>.SyncToDatabase
    fullName: Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>.SyncToDatabase
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IServiceProvider
    name: IServiceProvider
    nameWithType: IServiceProvider
    fullName: System.IServiceProvider
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1.SyncToDatabase(System.IServiceProvider,`0[])
    name: SyncToDatabase
    nameWithType: FunctionHandlerBase(Of TFunction).SyncToDatabase
    fullName: Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction).SyncToDatabase
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IServiceProvider
    name: IServiceProvider
    nameWithType: IServiceProvider
    fullName: System.IServiceProvider
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1.GetFromDatabase(System.IServiceProvider)
  commentId: M:Hybrid.Authorization.Functions.FunctionHandlerBase`1.GetFromDatabase(System.IServiceProvider)
  isExternal: true
  name: GetFromDatabase(IServiceProvider)
  nameWithType: FunctionHandlerBase<TFunction>.GetFromDatabase(IServiceProvider)
  fullName: Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>.GetFromDatabase(System.IServiceProvider)
  nameWithType.vb: FunctionHandlerBase(Of TFunction).GetFromDatabase(IServiceProvider)
  fullName.vb: Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction).GetFromDatabase(System.IServiceProvider)
  spec.csharp:
  - uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1.GetFromDatabase(System.IServiceProvider)
    name: GetFromDatabase
    nameWithType: FunctionHandlerBase<TFunction>.GetFromDatabase
    fullName: Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>.GetFromDatabase
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IServiceProvider
    name: IServiceProvider
    nameWithType: IServiceProvider
    fullName: System.IServiceProvider
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1.GetFromDatabase(System.IServiceProvider)
    name: GetFromDatabase
    nameWithType: FunctionHandlerBase(Of TFunction).GetFromDatabase
    fullName: Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction).GetFromDatabase
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IServiceProvider
    name: IServiceProvider
    nameWithType: IServiceProvider
    fullName: System.IServiceProvider
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
  commentId: M:Hybrid.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
  isExternal: true
  name: CastTo(Object, Type)
  nameWithType: ObjectExtensions.CastTo(Object, Type)
  fullName: Hybrid.Extensions.ObjectExtensions.CastTo(System.Object, System.Type)
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
    name: CastTo
    nameWithType: ObjectExtensions.CastTo
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
    name: CastTo
    nameWithType: ObjectExtensions.CastTo
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ObjectExtensions
  commentId: T:Hybrid.Extensions.ObjectExtensions
  parent: Hybrid.Extensions
  name: ObjectExtensions
  nameWithType: ObjectExtensions
  fullName: Hybrid.Extensions.ObjectExtensions
- uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object)
  commentId: M:Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object)
  isExternal: true
  name: CastTo<T>(Object)
  nameWithType: ObjectExtensions.CastTo<T>(Object)
  fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>(System.Object)
  nameWithType.vb: ObjectExtensions.CastTo(Of T)(Object)
  fullName.vb: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)(System.Object)
  name.vb: CastTo(Of T)(Object)
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object)
    name: CastTo<T>
    nameWithType: ObjectExtensions.CastTo<T>
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object)
    name: CastTo(Of T)
    nameWithType: ObjectExtensions.CastTo(Of T)
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
  commentId: M:Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
  isExternal: true
  name: CastTo<T>(Object, T)
  nameWithType: ObjectExtensions.CastTo<T>(Object, T)
  fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>(System.Object, T)
  nameWithType.vb: ObjectExtensions.CastTo(Of T)(Object, T)
  fullName.vb: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)(System.Object, T)
  name.vb: CastTo(Of T)(Object, T)
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
    name: CastTo<T>
    nameWithType: ObjectExtensions.CastTo<T>
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
    name: CastTo(Of T)
    nameWithType: ObjectExtensions.CastTo(Of T)
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
  commentId: M:Hybrid.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
  name: IsIn<T>(T, T[])
  nameWithType: ObjectExtensions.IsIn<T>(T, T[])
  fullName: Hybrid.Extensions.ObjectExtensions.IsIn<T>(T, T[])
  nameWithType.vb: ObjectExtensions.IsIn(Of T)(T, T())
  fullName.vb: Hybrid.Extensions.ObjectExtensions.IsIn(Of T)(T, T())
  name.vb: IsIn(Of T)(T, T())
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
    name: IsIn<T>
    nameWithType: ObjectExtensions.IsIn<T>
    fullName: Hybrid.Extensions.ObjectExtensions.IsIn<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
    name: IsIn(Of T)
    nameWithType: ObjectExtensions.IsIn(Of T)
    fullName: Hybrid.Extensions.ObjectExtensions.IsIn(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ObjectExtensions.ToDynamic(System.Object)
  commentId: M:Hybrid.Extensions.ObjectExtensions.ToDynamic(System.Object)
  isExternal: true
  name: ToDynamic(Object)
  nameWithType: ObjectExtensions.ToDynamic(Object)
  fullName: Hybrid.Extensions.ObjectExtensions.ToDynamic(System.Object)
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.ToDynamic(System.Object)
    name: ToDynamic
    nameWithType: ObjectExtensions.ToDynamic
    fullName: Hybrid.Extensions.ObjectExtensions.ToDynamic
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.ToDynamic(System.Object)
    name: ToDynamic
    nameWithType: ObjectExtensions.ToDynamic
    fullName: Hybrid.Extensions.ObjectExtensions.ToDynamic
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ObjectExtensions.DeepClone``1(``0)
  commentId: M:Hybrid.Extensions.ObjectExtensions.DeepClone``1(``0)
  name: DeepClone<T>(T)
  nameWithType: ObjectExtensions.DeepClone<T>(T)
  fullName: Hybrid.Extensions.ObjectExtensions.DeepClone<T>(T)
  nameWithType.vb: ObjectExtensions.DeepClone(Of T)(T)
  fullName.vb: Hybrid.Extensions.ObjectExtensions.DeepClone(Of T)(T)
  name.vb: DeepClone(Of T)(T)
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.DeepClone``1(``0)
    name: DeepClone<T>
    nameWithType: ObjectExtensions.DeepClone<T>
    fullName: Hybrid.Extensions.ObjectExtensions.DeepClone<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.DeepClone``1(``0)
    name: DeepClone(Of T)
    nameWithType: ObjectExtensions.DeepClone(Of T)
    fullName: Hybrid.Extensions.ObjectExtensions.DeepClone(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
  commentId: M:Hybrid.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
  isExternal: true
  name: Required<T>(T, Func<T, Boolean>, String)
  nameWithType: ParameterCheckExtensions.Required<T>(T, Func<T, Boolean>, String)
  fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<T>(T, System.Func<T, System.Boolean>, System.String)
  nameWithType.vb: ParameterCheckExtensions.Required(Of T)(T, Func(Of T, Boolean), String)
  fullName.vb: Hybrid.Extensions.ParameterCheckExtensions.Required(Of T)(T, System.Func(Of T, System.Boolean), System.String)
  name.vb: Required(Of T)(T, Func(Of T, Boolean), String)
  spec.csharp:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
    name: Required<T>
    nameWithType: ParameterCheckExtensions.Required<T>
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
    name: Required(Of T)
    nameWithType: ParameterCheckExtensions.Required(Of T)
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ParameterCheckExtensions
  commentId: T:Hybrid.Extensions.ParameterCheckExtensions
  parent: Hybrid.Extensions
  name: ParameterCheckExtensions
  nameWithType: ParameterCheckExtensions
  fullName: Hybrid.Extensions.ParameterCheckExtensions
- uid: Hybrid.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
  commentId: M:Hybrid.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
  isExternal: true
  name: Required<T, TException>(T, Func<T, Boolean>, String)
  nameWithType: ParameterCheckExtensions.Required<T, TException>(T, Func<T, Boolean>, String)
  fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<T, TException>(T, System.Func<T, System.Boolean>, System.String)
  nameWithType.vb: ParameterCheckExtensions.Required(Of T, TException)(T, Func(Of T, Boolean), String)
  fullName.vb: Hybrid.Extensions.ParameterCheckExtensions.Required(Of T, TException)(T, System.Func(Of T, System.Boolean), System.String)
  name.vb: Required(Of T, TException)(T, Func(Of T, Boolean), String)
  spec.csharp:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
    name: Required<T, TException>
    nameWithType: ParameterCheckExtensions.Required<T, TException>
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<T, TException>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
    name: Required(Of T, TException)
    nameWithType: ParameterCheckExtensions.Required(Of T, TException)
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required(Of T, TException)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
  commentId: M:Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
  isExternal: true
  name: CheckNotNull<T>(T, String)
  nameWithType: ParameterCheckExtensions.CheckNotNull<T>(T, String)
  fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull<T>(T, System.String)
  nameWithType.vb: ParameterCheckExtensions.CheckNotNull(Of T)(T, String)
  fullName.vb: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull(Of T)(T, System.String)
  name.vb: CheckNotNull(Of T)(T, String)
  spec.csharp:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
    name: CheckNotNull<T>
    nameWithType: ParameterCheckExtensions.CheckNotNull<T>
    fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
    name: CheckNotNull(Of T)
    nameWithType: ParameterCheckExtensions.CheckNotNull(Of T)
    fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
  isExternal: true
  name: TryCatch<T>(T, Action<T>, Action<Exception>, Action<T>)
  nameWithType: TryCatchExtensions.TryCatch<T>(T, Action<T>, Action<Exception>, Action<T>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T>(T, System.Action<T>, System.Action<System.Exception>, System.Action<T>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of T)(T, Action(Of T), Action(Of Exception), Action(Of T))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T)(T, System.Action(Of T), System.Action(Of System.Exception), System.Action(Of T))
  name.vb: TryCatch(Of T)(T, Action(Of T), Action(Of Exception), Action(Of T))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
    name: TryCatch<T>
    nameWithType: TryCatchExtensions.TryCatch<T>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
    name: TryCatch(Of T)
    nameWithType: TryCatchExtensions.TryCatch(Of T)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.TryCatchExtensions
  commentId: T:Hybrid.Extensions.TryCatchExtensions
  parent: Hybrid.Extensions
  name: TryCatchExtensions
  nameWithType: TryCatchExtensions
  fullName: Hybrid.Extensions.TryCatchExtensions
- uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
  isExternal: true
  name: TryCatch<T>(T, Action<T>, Action<Exception>)
  nameWithType: TryCatchExtensions.TryCatch<T>(T, Action<T>, Action<Exception>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T>(T, System.Action<T>, System.Action<System.Exception>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of T)(T, Action(Of T), Action(Of Exception))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T)(T, System.Action(Of T), System.Action(Of System.Exception))
  name.vb: TryCatch(Of T)(T, Action(Of T), Action(Of Exception))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
    name: TryCatch<T>
    nameWithType: TryCatchExtensions.TryCatch<T>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
    name: TryCatch(Of T)
    nameWithType: TryCatchExtensions.TryCatch(Of T)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
  isExternal: true
  name: TryCatch<T, TResult>(T, Func<T, TResult>, Action<Exception>, Action<T>)
  nameWithType: TryCatchExtensions.TryCatch<T, TResult>(T, Func<T, TResult>, Action<Exception>, Action<T>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T, TResult>(T, System.Func<T, TResult>, System.Action<System.Exception>, System.Action<T>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of T, TResult)(T, Func(Of T, TResult), Action(Of Exception), Action(Of T))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T, TResult)(T, System.Func(Of T, TResult), System.Action(Of System.Exception), System.Action(Of T))
  name.vb: TryCatch(Of T, TResult)(T, Func(Of T, TResult), Action(Of Exception), Action(Of T))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
    name: TryCatch<T, TResult>
    nameWithType: TryCatchExtensions.TryCatch<T, TResult>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
    name: TryCatch(Of T, TResult)
    nameWithType: TryCatchExtensions.TryCatch(Of T, TResult)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
  isExternal: true
  name: TryCatch<T, TResult>(T, Func<T, TResult>, Action<Exception>)
  nameWithType: TryCatchExtensions.TryCatch<T, TResult>(T, Func<T, TResult>, Action<Exception>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T, TResult>(T, System.Func<T, TResult>, System.Action<System.Exception>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of T, TResult)(T, Func(Of T, TResult), Action(Of Exception))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T, TResult)(T, System.Func(Of T, TResult), System.Action(Of System.Exception))
  name.vb: TryCatch(Of T, TResult)(T, Func(Of T, TResult), Action(Of Exception))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
    name: TryCatch<T, TResult>
    nameWithType: TryCatchExtensions.TryCatch<T, TResult>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
    name: TryCatch(Of T, TResult)
    nameWithType: TryCatchExtensions.TryCatch(Of T, TResult)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
  isExternal: true
  name: TryFinally<T>(T, Action<T>, Action<T>)
  nameWithType: TryCatchExtensions.TryFinally<T>(T, Action<T>, Action<T>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryFinally<T>(T, System.Action<T>, System.Action<T>)
  nameWithType.vb: TryCatchExtensions.TryFinally(Of T)(T, Action(Of T), Action(Of T))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryFinally(Of T)(T, System.Action(Of T), System.Action(Of T))
  name.vb: TryFinally(Of T)(T, Action(Of T), Action(Of T))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
    name: TryFinally<T>
    nameWithType: TryCatchExtensions.TryFinally<T>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryFinally<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
    name: TryFinally(Of T)
    nameWithType: TryCatchExtensions.TryFinally(Of T)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryFinally(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
  commentId: M:Hybrid.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
  isExternal: true
  name: ToJsonString(Object, Boolean, Boolean)
  nameWithType: JsonExtensions.ToJsonString(Object, Boolean, Boolean)
  fullName: Hybrid.Json.JsonExtensions.ToJsonString(System.Object, System.Boolean, System.Boolean)
  spec.csharp:
  - uid: Hybrid.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
    name: ToJsonString
    nameWithType: JsonExtensions.ToJsonString
    fullName: Hybrid.Json.JsonExtensions.ToJsonString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
    name: ToJsonString
    nameWithType: JsonExtensions.ToJsonString
    fullName: Hybrid.Json.JsonExtensions.ToJsonString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Json.JsonExtensions
  commentId: T:Hybrid.Json.JsonExtensions
  parent: Hybrid.Json
  name: JsonExtensions
  nameWithType: JsonExtensions
  fullName: Hybrid.Json.JsonExtensions
- uid: Hybrid.Mapping.MapperExtensions.MapTo``1(System.Object)
  commentId: M:Hybrid.Mapping.MapperExtensions.MapTo``1(System.Object)
  isExternal: true
  name: MapTo<TTarget>(Object)
  nameWithType: MapperExtensions.MapTo<TTarget>(Object)
  fullName: Hybrid.Mapping.MapperExtensions.MapTo<TTarget>(System.Object)
  nameWithType.vb: MapperExtensions.MapTo(Of TTarget)(Object)
  fullName.vb: Hybrid.Mapping.MapperExtensions.MapTo(Of TTarget)(System.Object)
  name.vb: MapTo(Of TTarget)(Object)
  spec.csharp:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``1(System.Object)
    name: MapTo<TTarget>
    nameWithType: MapperExtensions.MapTo<TTarget>
    fullName: Hybrid.Mapping.MapperExtensions.MapTo<TTarget>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``1(System.Object)
    name: MapTo(Of TTarget)
    nameWithType: MapperExtensions.MapTo(Of TTarget)
    fullName: Hybrid.Mapping.MapperExtensions.MapTo(Of TTarget)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Mapping.MapperExtensions
  commentId: T:Hybrid.Mapping.MapperExtensions
  parent: Hybrid.Mapping
  name: MapperExtensions
  nameWithType: MapperExtensions
  fullName: Hybrid.Mapping.MapperExtensions
- uid: Hybrid.Mapping.MapperExtensions.MapTo``2(``0,``1)
  commentId: M:Hybrid.Mapping.MapperExtensions.MapTo``2(``0,``1)
  name: MapTo<TSource, TTarget>(TSource, TTarget)
  nameWithType: MapperExtensions.MapTo<TSource, TTarget>(TSource, TTarget)
  fullName: Hybrid.Mapping.MapperExtensions.MapTo<TSource, TTarget>(TSource, TTarget)
  nameWithType.vb: MapperExtensions.MapTo(Of TSource, TTarget)(TSource, TTarget)
  fullName.vb: Hybrid.Mapping.MapperExtensions.MapTo(Of TSource, TTarget)(TSource, TTarget)
  name.vb: MapTo(Of TSource, TTarget)(TSource, TTarget)
  spec.csharp:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``2(``0,``1)
    name: MapTo<TSource, TTarget>
    nameWithType: MapperExtensions.MapTo<TSource, TTarget>
    fullName: Hybrid.Mapping.MapperExtensions.MapTo<TSource, TTarget>
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``2(``0,``1)
    name: MapTo(Of TSource, TTarget)
    nameWithType: MapperExtensions.MapTo(Of TSource, TTarget)
    fullName: Hybrid.Mapping.MapperExtensions.MapTo(Of TSource, TTarget)
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Reflection.LockExtensions.Locking(System.Object,System.Action)
  commentId: M:Hybrid.Reflection.LockExtensions.Locking(System.Object,System.Action)
  isExternal: true
  name: Locking(Object, Action)
  nameWithType: LockExtensions.Locking(Object, Action)
  fullName: Hybrid.Reflection.LockExtensions.Locking(System.Object, System.Action)
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking(System.Object,System.Action)
    name: Locking
    nameWithType: LockExtensions.Locking
    fullName: Hybrid.Reflection.LockExtensions.Locking
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking(System.Object,System.Action)
    name: Locking
    nameWithType: LockExtensions.Locking
    fullName: Hybrid.Reflection.LockExtensions.Locking
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Reflection.LockExtensions
  commentId: T:Hybrid.Reflection.LockExtensions
  parent: Hybrid.Reflection
  name: LockExtensions
  nameWithType: LockExtensions
  fullName: Hybrid.Reflection.LockExtensions
- uid: Hybrid.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
  commentId: M:Hybrid.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
  isExternal: true
  name: Locking<T>(T, Action<T>)
  nameWithType: LockExtensions.Locking<T>(T, Action<T>)
  fullName: Hybrid.Reflection.LockExtensions.Locking<T>(T, System.Action<T>)
  nameWithType.vb: LockExtensions.Locking(Of T)(T, Action(Of T))
  fullName.vb: Hybrid.Reflection.LockExtensions.Locking(Of T)(T, System.Action(Of T))
  name.vb: Locking(Of T)(T, Action(Of T))
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
    name: Locking<T>
    nameWithType: LockExtensions.Locking<T>
    fullName: Hybrid.Reflection.LockExtensions.Locking<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
    name: Locking(Of T)
    nameWithType: LockExtensions.Locking(Of T)
    fullName: Hybrid.Reflection.LockExtensions.Locking(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
  commentId: M:Hybrid.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
  isExternal: true
  name: Locking<TResult>(Object, Func<TResult>)
  nameWithType: LockExtensions.Locking<TResult>(Object, Func<TResult>)
  fullName: Hybrid.Reflection.LockExtensions.Locking<TResult>(System.Object, System.Func<TResult>)
  nameWithType.vb: LockExtensions.Locking(Of TResult)(Object, Func(Of TResult))
  fullName.vb: Hybrid.Reflection.LockExtensions.Locking(Of TResult)(System.Object, System.Func(Of TResult))
  name.vb: Locking(Of TResult)(Object, Func(Of TResult))
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
    name: Locking<TResult>
    nameWithType: LockExtensions.Locking<TResult>
    fullName: Hybrid.Reflection.LockExtensions.Locking<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
    name: Locking(Of TResult)
    nameWithType: LockExtensions.Locking(Of TResult)
    fullName: Hybrid.Reflection.LockExtensions.Locking(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
  commentId: M:Hybrid.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
  isExternal: true
  name: Locking<TSource, TResult>(TSource, Func<TSource, TResult>)
  nameWithType: LockExtensions.Locking<TSource, TResult>(TSource, Func<TSource, TResult>)
  fullName: Hybrid.Reflection.LockExtensions.Locking<TSource, TResult>(TSource, System.Func<TSource, TResult>)
  nameWithType.vb: LockExtensions.Locking(Of TSource, TResult)(TSource, Func(Of TSource, TResult))
  fullName.vb: Hybrid.Reflection.LockExtensions.Locking(Of TSource, TResult)(TSource, System.Func(Of TSource, TResult))
  name.vb: Locking(Of TSource, TResult)(TSource, Func(Of TSource, TResult))
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
    name: Locking<TSource, TResult>
    nameWithType: LockExtensions.Locking<TSource, TResult>
    fullName: Hybrid.Reflection.LockExtensions.Locking<TSource, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
    name: Locking(Of TSource, TResult)
    nameWithType: LockExtensions.Locking(Of TSource, TResult)
    fullName: Hybrid.Reflection.LockExtensions.Locking(Of TSource, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2(``0)
  commentId: M:Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2(``0)
  name: CheckICreatedTime<TEntity, TKey>(TEntity)
  nameWithType: EntityExtensions.CheckICreatedTime<TEntity, TKey>(TEntity)
  fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime<TEntity, TKey>(TEntity)
  nameWithType.vb: EntityExtensions.CheckICreatedTime(Of TEntity, TKey)(TEntity)
  fullName.vb: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime(Of TEntity, TKey)(TEntity)
  name.vb: CheckICreatedTime(Of TEntity, TKey)(TEntity)
  spec.csharp:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2(``0)
    name: CheckICreatedTime<TEntity, TKey>
    nameWithType: EntityExtensions.CheckICreatedTime<TEntity, TKey>
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime<TEntity, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2(``0)
    name: CheckICreatedTime(Of TEntity, TKey)
    nameWithType: EntityExtensions.CheckICreatedTime(Of TEntity, TKey)
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime(Of TEntity, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Domain.Entities.EntityExtensions
  commentId: T:Hybrid.Domain.Entities.EntityExtensions
  parent: Hybrid.Domain.Entities
  name: EntityExtensions
  nameWithType: EntityExtensions
  fullName: Hybrid.Domain.Entities.EntityExtensions
- uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
  commentId: M:Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
  isExternal: true
  name: CheckICreationAudited<TEntity, TKey, TUserKey>(TEntity, IPrincipal)
  nameWithType: EntityExtensions.CheckICreationAudited<TEntity, TKey, TUserKey>(TEntity, IPrincipal)
  fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited<TEntity, TKey, TUserKey>(TEntity, System.Security.Principal.IPrincipal)
  nameWithType.vb: EntityExtensions.CheckICreationAudited(Of TEntity, TKey, TUserKey)(TEntity, IPrincipal)
  fullName.vb: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited(Of TEntity, TKey, TUserKey)(TEntity, System.Security.Principal.IPrincipal)
  name.vb: CheckICreationAudited(Of TEntity, TKey, TUserKey)(TEntity, IPrincipal)
  spec.csharp:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
    name: CheckICreationAudited<TEntity, TKey, TUserKey>
    nameWithType: EntityExtensions.CheckICreationAudited<TEntity, TKey, TUserKey>
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited<TEntity, TKey, TUserKey>
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
    name: CheckICreationAudited(Of TEntity, TKey, TUserKey)
    nameWithType: EntityExtensions.CheckICreationAudited(Of TEntity, TKey, TUserKey)
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited(Of TEntity, TKey, TUserKey)
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
  commentId: M:Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
  isExternal: true
  name: CheckIUpdateAudited<TEntity, TKey, TUserKey>(TEntity, IPrincipal)
  nameWithType: EntityExtensions.CheckIUpdateAudited<TEntity, TKey, TUserKey>(TEntity, IPrincipal)
  fullName: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited<TEntity, TKey, TUserKey>(TEntity, System.Security.Principal.IPrincipal)
  nameWithType.vb: EntityExtensions.CheckIUpdateAudited(Of TEntity, TKey, TUserKey)(TEntity, IPrincipal)
  fullName.vb: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited(Of TEntity, TKey, TUserKey)(TEntity, System.Security.Principal.IPrincipal)
  name.vb: CheckIUpdateAudited(Of TEntity, TKey, TUserKey)(TEntity, IPrincipal)
  spec.csharp:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
    name: CheckIUpdateAudited<TEntity, TKey, TUserKey>
    nameWithType: EntityExtensions.CheckIUpdateAudited<TEntity, TKey, TUserKey>
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited<TEntity, TKey, TUserKey>
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
    name: CheckIUpdateAudited(Of TEntity, TKey, TUserKey)
    nameWithType: EntityExtensions.CheckIUpdateAudited(Of TEntity, TKey, TUserKey)
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited(Of TEntity, TKey, TUserKey)
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions
  commentId: N:Hybrid.Extensions
  name: Hybrid.Extensions
  nameWithType: Hybrid.Extensions
  fullName: Hybrid.Extensions
- uid: Hybrid.Json
  commentId: N:Hybrid.Json
  name: Hybrid.Json
  nameWithType: Hybrid.Json
  fullName: Hybrid.Json
- uid: Hybrid.Mapping
  commentId: N:Hybrid.Mapping
  name: Hybrid.Mapping
  nameWithType: Hybrid.Mapping
  fullName: Hybrid.Mapping
- uid: Hybrid.Reflection
  commentId: N:Hybrid.Reflection
  name: Hybrid.Reflection
  nameWithType: Hybrid.Reflection
  fullName: Hybrid.Reflection
- uid: Hybrid.Domain.Entities
  commentId: N:Hybrid.Domain.Entities
  name: Hybrid.Domain.Entities
  nameWithType: Hybrid.Domain.Entities
  fullName: Hybrid.Domain.Entities
- uid: Hybrid.AspNetCore.Mvc.MvcFunctionHandler.#ctor*
  commentId: Overload:Hybrid.AspNetCore.Mvc.MvcFunctionHandler.#ctor
  name: MvcFunctionHandler
  nameWithType: MvcFunctionHandler.MvcFunctionHandler
  fullName: Hybrid.AspNetCore.Mvc.MvcFunctionHandler.MvcFunctionHandler
- uid: System.IServiceProvider
  commentId: T:System.IServiceProvider
  parent: System
  isExternal: true
  name: IServiceProvider
  nameWithType: IServiceProvider
  fullName: System.IServiceProvider
- uid: Hybrid.Authorization.Functions.FunctionHandlerBase{Hybrid.Authorization.Functions.Function}.FunctionTypeFinder
  commentId: P:Hybrid.Authorization.Functions.FunctionHandlerBase{Hybrid.Authorization.Functions.Function}.FunctionTypeFinder
  parent: Hybrid.Authorization.Functions.FunctionHandlerBase{Hybrid.Authorization.Functions.Function}
  definition: Hybrid.Authorization.Functions.FunctionHandlerBase`1.FunctionTypeFinder
  name: FunctionTypeFinder
  nameWithType: FunctionHandlerBase<Function>.FunctionTypeFinder
  fullName: Hybrid.Authorization.Functions.FunctionHandlerBase<Hybrid.Authorization.Functions.Function>.FunctionTypeFinder
  nameWithType.vb: FunctionHandlerBase(Of Function).FunctionTypeFinder
  fullName.vb: Hybrid.Authorization.Functions.FunctionHandlerBase(Of Hybrid.Authorization.Functions.Function).FunctionTypeFinder
- uid: Hybrid.AspNetCore.Mvc.MvcFunctionHandler.FunctionTypeFinder*
  commentId: Overload:Hybrid.AspNetCore.Mvc.MvcFunctionHandler.FunctionTypeFinder
  name: FunctionTypeFinder
  nameWithType: MvcFunctionHandler.FunctionTypeFinder
  fullName: Hybrid.AspNetCore.Mvc.MvcFunctionHandler.FunctionTypeFinder
- uid: Hybrid.Authorization.Functions.IFunctionTypeFinder
  commentId: T:Hybrid.Authorization.Functions.IFunctionTypeFinder
  parent: Hybrid.Authorization.Functions
  name: IFunctionTypeFinder
  nameWithType: IFunctionTypeFinder
  fullName: Hybrid.Authorization.Functions.IFunctionTypeFinder
- uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1.FunctionTypeFinder
  commentId: P:Hybrid.Authorization.Functions.FunctionHandlerBase`1.FunctionTypeFinder
  name: FunctionTypeFinder
  nameWithType: FunctionHandlerBase<TFunction>.FunctionTypeFinder
  fullName: Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>.FunctionTypeFinder
  nameWithType.vb: FunctionHandlerBase(Of TFunction).FunctionTypeFinder
  fullName.vb: Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction).FunctionTypeFinder
- uid: Hybrid.Authorization.Functions.FunctionHandlerBase{Hybrid.Authorization.Functions.Function}.MethodInfoFinder
  commentId: P:Hybrid.Authorization.Functions.FunctionHandlerBase{Hybrid.Authorization.Functions.Function}.MethodInfoFinder
  parent: Hybrid.Authorization.Functions.FunctionHandlerBase{Hybrid.Authorization.Functions.Function}
  definition: Hybrid.Authorization.Functions.FunctionHandlerBase`1.MethodInfoFinder
  name: MethodInfoFinder
  nameWithType: FunctionHandlerBase<Function>.MethodInfoFinder
  fullName: Hybrid.Authorization.Functions.FunctionHandlerBase<Hybrid.Authorization.Functions.Function>.MethodInfoFinder
  nameWithType.vb: FunctionHandlerBase(Of Function).MethodInfoFinder
  fullName.vb: Hybrid.Authorization.Functions.FunctionHandlerBase(Of Hybrid.Authorization.Functions.Function).MethodInfoFinder
- uid: Hybrid.AspNetCore.Mvc.MvcFunctionHandler.MethodInfoFinder*
  commentId: Overload:Hybrid.AspNetCore.Mvc.MvcFunctionHandler.MethodInfoFinder
  name: MethodInfoFinder
  nameWithType: MvcFunctionHandler.MethodInfoFinder
  fullName: Hybrid.AspNetCore.Mvc.MvcFunctionHandler.MethodInfoFinder
- uid: Hybrid.Reflection.IMethodInfoFinder
  commentId: T:Hybrid.Reflection.IMethodInfoFinder
  parent: Hybrid.Reflection
  name: IMethodInfoFinder
  nameWithType: IMethodInfoFinder
  fullName: Hybrid.Reflection.IMethodInfoFinder
- uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1.MethodInfoFinder
  commentId: P:Hybrid.Authorization.Functions.FunctionHandlerBase`1.MethodInfoFinder
  name: MethodInfoFinder
  nameWithType: FunctionHandlerBase<TFunction>.MethodInfoFinder
  fullName: Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>.MethodInfoFinder
  nameWithType.vb: FunctionHandlerBase(Of TFunction).MethodInfoFinder
  fullName.vb: Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction).MethodInfoFinder
- uid: Hybrid.Authorization.Functions.FunctionHandlerBase{Hybrid.Authorization.Functions.Function}.GetFunction(System.Type)
  commentId: M:Hybrid.Authorization.Functions.FunctionHandlerBase{Hybrid.Authorization.Functions.Function}.GetFunction(System.Type)
  parent: Hybrid.Authorization.Functions.FunctionHandlerBase{Hybrid.Authorization.Functions.Function}
  definition: Hybrid.Authorization.Functions.FunctionHandlerBase`1.GetFunction(System.Type)
  name: GetFunction(Type)
  nameWithType: FunctionHandlerBase<Function>.GetFunction(Type)
  fullName: Hybrid.Authorization.Functions.FunctionHandlerBase<Hybrid.Authorization.Functions.Function>.GetFunction(System.Type)
  nameWithType.vb: FunctionHandlerBase(Of Function).GetFunction(Type)
  fullName.vb: Hybrid.Authorization.Functions.FunctionHandlerBase(Of Hybrid.Authorization.Functions.Function).GetFunction(System.Type)
  spec.csharp:
  - uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1.GetFunction(System.Type)
    name: GetFunction
    nameWithType: FunctionHandlerBase<Function>.GetFunction
    fullName: Hybrid.Authorization.Functions.FunctionHandlerBase<Hybrid.Authorization.Functions.Function>.GetFunction
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1.GetFunction(System.Type)
    name: GetFunction
    nameWithType: FunctionHandlerBase(Of Function).GetFunction
    fullName: Hybrid.Authorization.Functions.FunctionHandlerBase(Of Hybrid.Authorization.Functions.Function).GetFunction
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.AspNetCore.Mvc.MvcFunctionHandler.GetFunction*
  commentId: Overload:Hybrid.AspNetCore.Mvc.MvcFunctionHandler.GetFunction
  name: GetFunction
  nameWithType: MvcFunctionHandler.GetFunction
  fullName: Hybrid.AspNetCore.Mvc.MvcFunctionHandler.GetFunction
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: Hybrid.Authorization.Functions.Function
  commentId: T:Hybrid.Authorization.Functions.Function
  parent: Hybrid.Authorization.Functions
  name: Function
  nameWithType: Function
  fullName: Hybrid.Authorization.Functions.Function
- uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1.GetFunction(System.Type)
  commentId: M:Hybrid.Authorization.Functions.FunctionHandlerBase`1.GetFunction(System.Type)
  isExternal: true
  name: GetFunction(Type)
  nameWithType: FunctionHandlerBase<TFunction>.GetFunction(Type)
  fullName: Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>.GetFunction(System.Type)
  nameWithType.vb: FunctionHandlerBase(Of TFunction).GetFunction(Type)
  fullName.vb: Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction).GetFunction(System.Type)
  spec.csharp:
  - uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1.GetFunction(System.Type)
    name: GetFunction
    nameWithType: FunctionHandlerBase<TFunction>.GetFunction
    fullName: Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>.GetFunction
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1.GetFunction(System.Type)
    name: GetFunction
    nameWithType: FunctionHandlerBase(Of TFunction).GetFunction
    fullName: Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction).GetFunction
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Authorization.Functions.FunctionHandlerBase{Hybrid.Authorization.Functions.Function}.GetFunction(Hybrid.Authorization.Functions.Function,System.Reflection.MethodInfo)
  commentId: M:Hybrid.Authorization.Functions.FunctionHandlerBase{Hybrid.Authorization.Functions.Function}.GetFunction(Hybrid.Authorization.Functions.Function,System.Reflection.MethodInfo)
  parent: Hybrid.Authorization.Functions.FunctionHandlerBase{Hybrid.Authorization.Functions.Function}
  definition: Hybrid.Authorization.Functions.FunctionHandlerBase`1.GetFunction(`0,System.Reflection.MethodInfo)
  name: GetFunction(Function, MethodInfo)
  nameWithType: FunctionHandlerBase<Function>.GetFunction(Function, MethodInfo)
  fullName: Hybrid.Authorization.Functions.FunctionHandlerBase<Hybrid.Authorization.Functions.Function>.GetFunction(Hybrid.Authorization.Functions.Function, System.Reflection.MethodInfo)
  nameWithType.vb: FunctionHandlerBase(Of Function).GetFunction(Function, MethodInfo)
  fullName.vb: Hybrid.Authorization.Functions.FunctionHandlerBase(Of Hybrid.Authorization.Functions.Function).GetFunction(Hybrid.Authorization.Functions.Function, System.Reflection.MethodInfo)
  spec.csharp:
  - uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1.GetFunction(`0,System.Reflection.MethodInfo)
    name: GetFunction
    nameWithType: FunctionHandlerBase<Function>.GetFunction
    fullName: Hybrid.Authorization.Functions.FunctionHandlerBase<Hybrid.Authorization.Functions.Function>.GetFunction
  - name: (
    nameWithType: (
    fullName: (
  - uid: Hybrid.Authorization.Functions.Function
    name: Function
    nameWithType: Function
    fullName: Hybrid.Authorization.Functions.Function
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Reflection.MethodInfo
    name: MethodInfo
    nameWithType: MethodInfo
    fullName: System.Reflection.MethodInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1.GetFunction(`0,System.Reflection.MethodInfo)
    name: GetFunction
    nameWithType: FunctionHandlerBase(Of Function).GetFunction
    fullName: Hybrid.Authorization.Functions.FunctionHandlerBase(Of Hybrid.Authorization.Functions.Function).GetFunction
  - name: (
    nameWithType: (
    fullName: (
  - uid: Hybrid.Authorization.Functions.Function
    name: Function
    nameWithType: Function
    fullName: Hybrid.Authorization.Functions.Function
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Reflection.MethodInfo
    name: MethodInfo
    nameWithType: MethodInfo
    fullName: System.Reflection.MethodInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.MethodInfo
  commentId: T:System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: true
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1.GetFunction(`0,System.Reflection.MethodInfo)
  commentId: M:Hybrid.Authorization.Functions.FunctionHandlerBase`1.GetFunction(`0,System.Reflection.MethodInfo)
  isExternal: true
  name: GetFunction(TFunction, MethodInfo)
  nameWithType: FunctionHandlerBase<TFunction>.GetFunction(TFunction, MethodInfo)
  fullName: Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>.GetFunction(TFunction, System.Reflection.MethodInfo)
  nameWithType.vb: FunctionHandlerBase(Of TFunction).GetFunction(TFunction, MethodInfo)
  fullName.vb: Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction).GetFunction(TFunction, System.Reflection.MethodInfo)
  spec.csharp:
  - uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1.GetFunction(`0,System.Reflection.MethodInfo)
    name: GetFunction
    nameWithType: FunctionHandlerBase<TFunction>.GetFunction
    fullName: Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>.GetFunction
  - name: (
    nameWithType: (
    fullName: (
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Reflection.MethodInfo
    name: MethodInfo
    nameWithType: MethodInfo
    fullName: System.Reflection.MethodInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1.GetFunction(`0,System.Reflection.MethodInfo)
    name: GetFunction
    nameWithType: FunctionHandlerBase(Of TFunction).GetFunction
    fullName: Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction).GetFunction
  - name: (
    nameWithType: (
    fullName: (
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Reflection.MethodInfo
    name: MethodInfo
    nameWithType: MethodInfo
    fullName: System.Reflection.MethodInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection
  commentId: N:System.Reflection
  isExternal: true
  name: System.Reflection
  nameWithType: System.Reflection
  fullName: System.Reflection
- uid: Hybrid.Authorization.Functions.FunctionHandlerBase{Hybrid.Authorization.Functions.Function}.IsIgnoreMethod(Hybrid.Authorization.Functions.Function,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{Hybrid.Authorization.Functions.Function})
  commentId: M:Hybrid.Authorization.Functions.FunctionHandlerBase{Hybrid.Authorization.Functions.Function}.IsIgnoreMethod(Hybrid.Authorization.Functions.Function,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{Hybrid.Authorization.Functions.Function})
  parent: Hybrid.Authorization.Functions.FunctionHandlerBase{Hybrid.Authorization.Functions.Function}
  definition: Hybrid.Authorization.Functions.FunctionHandlerBase`1.IsIgnoreMethod(`0,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{`0})
  name: IsIgnoreMethod(Function, MethodInfo, IEnumerable<Function>)
  nameWithType: FunctionHandlerBase<Function>.IsIgnoreMethod(Function, MethodInfo, IEnumerable<Function>)
  fullName: Hybrid.Authorization.Functions.FunctionHandlerBase<Hybrid.Authorization.Functions.Function>.IsIgnoreMethod(Hybrid.Authorization.Functions.Function, System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable<Hybrid.Authorization.Functions.Function>)
  nameWithType.vb: FunctionHandlerBase(Of Function).IsIgnoreMethod(Function, MethodInfo, IEnumerable(Of Function))
  fullName.vb: Hybrid.Authorization.Functions.FunctionHandlerBase(Of Hybrid.Authorization.Functions.Function).IsIgnoreMethod(Hybrid.Authorization.Functions.Function, System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable(Of Hybrid.Authorization.Functions.Function))
  name.vb: IsIgnoreMethod(Function, MethodInfo, IEnumerable(Of Function))
  spec.csharp:
  - uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1.IsIgnoreMethod(`0,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{`0})
    name: IsIgnoreMethod
    nameWithType: FunctionHandlerBase<Function>.IsIgnoreMethod
    fullName: Hybrid.Authorization.Functions.FunctionHandlerBase<Hybrid.Authorization.Functions.Function>.IsIgnoreMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: Hybrid.Authorization.Functions.Function
    name: Function
    nameWithType: Function
    fullName: Hybrid.Authorization.Functions.Function
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Reflection.MethodInfo
    name: MethodInfo
    nameWithType: MethodInfo
    fullName: System.Reflection.MethodInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Authorization.Functions.Function
    name: Function
    nameWithType: Function
    fullName: Hybrid.Authorization.Functions.Function
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1.IsIgnoreMethod(`0,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{`0})
    name: IsIgnoreMethod
    nameWithType: FunctionHandlerBase(Of Function).IsIgnoreMethod
    fullName: Hybrid.Authorization.Functions.FunctionHandlerBase(Of Hybrid.Authorization.Functions.Function).IsIgnoreMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: Hybrid.Authorization.Functions.Function
    name: Function
    nameWithType: Function
    fullName: Hybrid.Authorization.Functions.Function
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Reflection.MethodInfo
    name: MethodInfo
    nameWithType: MethodInfo
    fullName: System.Reflection.MethodInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Authorization.Functions.Function
    name: Function
    nameWithType: Function
    fullName: Hybrid.Authorization.Functions.Function
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.AspNetCore.Mvc.MvcFunctionHandler.IsIgnoreMethod*
  commentId: Overload:Hybrid.AspNetCore.Mvc.MvcFunctionHandler.IsIgnoreMethod
  name: IsIgnoreMethod
  nameWithType: MvcFunctionHandler.IsIgnoreMethod
  fullName: Hybrid.AspNetCore.Mvc.MvcFunctionHandler.IsIgnoreMethod
- uid: System.Collections.Generic.IEnumerable{Hybrid.Authorization.Functions.Function}
  commentId: T:System.Collections.Generic.IEnumerable{Hybrid.Authorization.Functions.Function}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Function>
  nameWithType: IEnumerable<Function>
  fullName: System.Collections.Generic.IEnumerable<Hybrid.Authorization.Functions.Function>
  nameWithType.vb: IEnumerable(Of Function)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Hybrid.Authorization.Functions.Function)
  name.vb: IEnumerable(Of Function)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Authorization.Functions.Function
    name: Function
    nameWithType: Function
    fullName: Hybrid.Authorization.Functions.Function
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Authorization.Functions.Function
    name: Function
    nameWithType: Function
    fullName: Hybrid.Authorization.Functions.Function
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1.IsIgnoreMethod(`0,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{`0})
  commentId: M:Hybrid.Authorization.Functions.FunctionHandlerBase`1.IsIgnoreMethod(`0,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{`0})
  isExternal: true
  name: IsIgnoreMethod(TFunction, MethodInfo, IEnumerable<TFunction>)
  nameWithType: FunctionHandlerBase<TFunction>.IsIgnoreMethod(TFunction, MethodInfo, IEnumerable<TFunction>)
  fullName: Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>.IsIgnoreMethod(TFunction, System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable<TFunction>)
  nameWithType.vb: FunctionHandlerBase(Of TFunction).IsIgnoreMethod(TFunction, MethodInfo, IEnumerable(Of TFunction))
  fullName.vb: Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction).IsIgnoreMethod(TFunction, System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable(Of TFunction))
  name.vb: IsIgnoreMethod(TFunction, MethodInfo, IEnumerable(Of TFunction))
  spec.csharp:
  - uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1.IsIgnoreMethod(`0,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{`0})
    name: IsIgnoreMethod
    nameWithType: FunctionHandlerBase<TFunction>.IsIgnoreMethod
    fullName: Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>.IsIgnoreMethod
  - name: (
    nameWithType: (
    fullName: (
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Reflection.MethodInfo
    name: MethodInfo
    nameWithType: MethodInfo
    fullName: System.Reflection.MethodInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1.IsIgnoreMethod(`0,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{`0})
    name: IsIgnoreMethod
    nameWithType: FunctionHandlerBase(Of TFunction).IsIgnoreMethod
    fullName: Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction).IsIgnoreMethod
  - name: (
    nameWithType: (
    fullName: (
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Reflection.MethodInfo
    name: MethodInfo
    nameWithType: MethodInfo
    fullName: System.Reflection.MethodInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
