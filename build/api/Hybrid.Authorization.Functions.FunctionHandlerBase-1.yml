### YamlMime:ManagedReference
items:
- uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1
  commentId: T:Hybrid.Authorization.Functions.FunctionHandlerBase`1
  id: FunctionHandlerBase`1
  parent: Hybrid.Authorization.Functions
  children:
  - Hybrid.Authorization.Functions.FunctionHandlerBase`1.#ctor(System.IServiceProvider)
  - Hybrid.Authorization.Functions.FunctionHandlerBase`1.ClearCache
  - Hybrid.Authorization.Functions.FunctionHandlerBase`1.FunctionTypeFinder
  - Hybrid.Authorization.Functions.FunctionHandlerBase`1.GetFromDatabase(System.IServiceProvider)
  - Hybrid.Authorization.Functions.FunctionHandlerBase`1.GetFunction(`0,System.Reflection.MethodInfo)
  - Hybrid.Authorization.Functions.FunctionHandlerBase`1.GetFunction(System.Collections.Generic.IEnumerable{`0},System.String,System.String,System.String,System.String)
  - Hybrid.Authorization.Functions.FunctionHandlerBase`1.GetFunction(System.String,System.String,System.String)
  - Hybrid.Authorization.Functions.FunctionHandlerBase`1.GetFunction(System.Type)
  - Hybrid.Authorization.Functions.FunctionHandlerBase`1.GetFunctions(System.Type[])
  - Hybrid.Authorization.Functions.FunctionHandlerBase`1.HasPickup(System.Collections.Generic.List{`0},`0)
  - Hybrid.Authorization.Functions.FunctionHandlerBase`1.Initialize
  - Hybrid.Authorization.Functions.FunctionHandlerBase`1.IsIgnoreMethod(`0,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{`0})
  - Hybrid.Authorization.Functions.FunctionHandlerBase`1.Logger
  - Hybrid.Authorization.Functions.FunctionHandlerBase`1.MethodInfoFinder
  - Hybrid.Authorization.Functions.FunctionHandlerBase`1.RefreshCache
  - Hybrid.Authorization.Functions.FunctionHandlerBase`1.SyncToDatabase(System.IServiceProvider,`0[])
  langs:
  - csharp
  - vb
  name: FunctionHandlerBase<TFunction>
  nameWithType: FunctionHandlerBase<TFunction>
  fullName: Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>
  type: Class
  source:
    remote:
      path: src/Hybrid/Authorization/Functions/FunctionHandlerBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: FunctionHandlerBase
    path: ../src/Hybrid/Authorization/Functions/FunctionHandlerBase.cs
    startLine: 31
  assemblies:
  - Hybrid
  namespace: Hybrid.Authorization.Functions
  summary: "\n功能信息处理基类\n"
  example: []
  syntax:
    content: 'public abstract class FunctionHandlerBase<TFunction> : IFunctionHandler where TFunction : class, IEntity<Guid>, IFunction, new()'
    typeParameters:
    - id: TFunction
    content.vb: >-
      Public MustInherit Class FunctionHandlerBase(Of TFunction As {Class, IEntity(Of Guid), IFunction, New})

          Implements IFunctionHandler
  inheritance:
  - System.Object
  derivedClasses:
  - Hybrid.AspNetCore.Mvc.MvcFunctionHandler
  implements:
  - Hybrid.Authorization.Functions.IFunctionHandler
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - Hybrid.Authorization.Functions.FunctionHandlerBase`1.OSharp.Entity.EntityExtensions.CheckICreatedTime``2
  - Hybrid.Authorization.Functions.FunctionHandlerBase`1.OSharp.Entity.EntityExtensions.CheckICreationAudited``3(System.Security.Principal.IPrincipal)
  - Hybrid.Authorization.Functions.FunctionHandlerBase`1.OSharp.Entity.EntityExtensions.CheckIUpdateAudited``3(System.Security.Principal.IPrincipal)
  - System.Object.OSharp.Extensions.ObjectExtensions.CastTo(System.Type)
  - System.Object.OSharp.Extensions.ObjectExtensions.CastTo``1
  - System.Object.OSharp.Extensions.ObjectExtensions.CastTo``1({T})
  - Hybrid.Authorization.Functions.FunctionHandlerBase`1.OSharp.Extensions.ObjectExtensions.IsIn``1(Hybrid.Authorization.Functions.FunctionHandlerBase{{TFunction}}[])
  - System.Object.OSharp.Extensions.ObjectExtensions.ToDynamic
  - Hybrid.Authorization.Functions.FunctionHandlerBase`1.OSharp.Extensions.ObjectExtensions.DeepClone``1
  - Hybrid.Authorization.Functions.FunctionHandlerBase`1.OSharp.Extensions.ParameterCheckExtensions.Required``1(System.Func{Hybrid.Authorization.Functions.FunctionHandlerBase{{TFunction}},System.Boolean},System.String)
  - Hybrid.Authorization.Functions.FunctionHandlerBase`1.OSharp.Extensions.ParameterCheckExtensions.Required``2(System.Func{Hybrid.Authorization.Functions.FunctionHandlerBase{{TFunction}},System.Boolean},System.String)
  - Hybrid.Authorization.Functions.FunctionHandlerBase`1.OSharp.Extensions.ParameterCheckExtensions.CheckNotNull``1(System.String)
  - Hybrid.Authorization.Functions.FunctionHandlerBase`1.OSharp.Extensions.TryCatchExtensions.TryCatch``1(System.Action{Hybrid.Authorization.Functions.FunctionHandlerBase{{TFunction}}},System.Action{System.Exception},System.Action{Hybrid.Authorization.Functions.FunctionHandlerBase{{TFunction}}})
  - Hybrid.Authorization.Functions.FunctionHandlerBase`1.OSharp.Extensions.TryCatchExtensions.TryCatch``1(System.Action{Hybrid.Authorization.Functions.FunctionHandlerBase{{TFunction}}},System.Action{System.Exception})
  - Hybrid.Authorization.Functions.FunctionHandlerBase`1.OSharp.Extensions.TryCatchExtensions.TryCatch``2(System.Func{Hybrid.Authorization.Functions.FunctionHandlerBase{{TFunction}},{TResult}},System.Action{System.Exception},System.Action{Hybrid.Authorization.Functions.FunctionHandlerBase{{TFunction}}})
  - Hybrid.Authorization.Functions.FunctionHandlerBase`1.OSharp.Extensions.TryCatchExtensions.TryCatch``2(System.Func{Hybrid.Authorization.Functions.FunctionHandlerBase{{TFunction}},{TResult}},System.Action{System.Exception})
  - Hybrid.Authorization.Functions.FunctionHandlerBase`1.OSharp.Extensions.TryCatchExtensions.TryFinally``1(System.Action{Hybrid.Authorization.Functions.FunctionHandlerBase{{TFunction}}},System.Action{Hybrid.Authorization.Functions.FunctionHandlerBase{{TFunction}}})
  - System.Object.OSharp.Json.JsonExtensions.ToJsonString(System.Boolean,System.Boolean)
  - System.Object.OSharp.Mapping.MapperExtensions.MapTo``1
  - Hybrid.Authorization.Functions.FunctionHandlerBase`1.OSharp.Mapping.MapperExtensions.MapTo``2({TTarget})
  - System.Object.OSharp.Reflection.LockExtensions.Locking(System.Action)
  - Hybrid.Authorization.Functions.FunctionHandlerBase`1.OSharp.Reflection.LockExtensions.Locking``1(System.Action{Hybrid.Authorization.Functions.FunctionHandlerBase{{TFunction}}})
  - System.Object.OSharp.Reflection.LockExtensions.Locking``1(System.Func{{TResult}})
  - Hybrid.Authorization.Functions.FunctionHandlerBase`1.OSharp.Reflection.LockExtensions.Locking``2(System.Func{Hybrid.Authorization.Functions.FunctionHandlerBase{{TFunction}},{TResult}})
  - System.Object.Hybrid.Extensions.ObjectExtensions.CastTo(System.Type)
  - System.Object.Hybrid.Extensions.ObjectExtensions.CastTo``1
  - System.Object.Hybrid.Extensions.ObjectExtensions.CastTo``1({T})
  - Hybrid.Authorization.Functions.FunctionHandlerBase`1.Hybrid.Extensions.ObjectExtensions.IsIn``1(Hybrid.Authorization.Functions.FunctionHandlerBase{{TFunction}}[])
  - System.Object.Hybrid.Extensions.ObjectExtensions.ToDynamic
  - Hybrid.Authorization.Functions.FunctionHandlerBase`1.Hybrid.Extensions.ObjectExtensions.DeepClone``1
  - Hybrid.Authorization.Functions.FunctionHandlerBase`1.Hybrid.Extensions.ParameterCheckExtensions.Required``1(System.Func{Hybrid.Authorization.Functions.FunctionHandlerBase{{TFunction}},System.Boolean},System.String)
  - Hybrid.Authorization.Functions.FunctionHandlerBase`1.Hybrid.Extensions.ParameterCheckExtensions.Required``2(System.Func{Hybrid.Authorization.Functions.FunctionHandlerBase{{TFunction}},System.Boolean},System.String)
  - Hybrid.Authorization.Functions.FunctionHandlerBase`1.Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(System.String)
  - Hybrid.Authorization.Functions.FunctionHandlerBase`1.Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{Hybrid.Authorization.Functions.FunctionHandlerBase{{TFunction}}},System.Action{System.Exception},System.Action{Hybrid.Authorization.Functions.FunctionHandlerBase{{TFunction}}})
  - Hybrid.Authorization.Functions.FunctionHandlerBase`1.Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{Hybrid.Authorization.Functions.FunctionHandlerBase{{TFunction}}},System.Action{System.Exception})
  - Hybrid.Authorization.Functions.FunctionHandlerBase`1.Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{Hybrid.Authorization.Functions.FunctionHandlerBase{{TFunction}},{TResult}},System.Action{System.Exception},System.Action{Hybrid.Authorization.Functions.FunctionHandlerBase{{TFunction}}})
  - Hybrid.Authorization.Functions.FunctionHandlerBase`1.Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{Hybrid.Authorization.Functions.FunctionHandlerBase{{TFunction}},{TResult}},System.Action{System.Exception})
  - Hybrid.Authorization.Functions.FunctionHandlerBase`1.Hybrid.Extensions.TryCatchExtensions.TryFinally``1(System.Action{Hybrid.Authorization.Functions.FunctionHandlerBase{{TFunction}}},System.Action{Hybrid.Authorization.Functions.FunctionHandlerBase{{TFunction}}})
  - System.Object.Hybrid.Json.JsonExtensions.ToJsonString(System.Boolean,System.Boolean)
  - System.Object.Hybrid.Mapping.MapperExtensions.MapTo``1
  - Hybrid.Authorization.Functions.FunctionHandlerBase`1.Hybrid.Mapping.MapperExtensions.MapTo``2({TTarget})
  - System.Object.Hybrid.Reflection.LockExtensions.Locking(System.Action)
  - Hybrid.Authorization.Functions.FunctionHandlerBase`1.Hybrid.Reflection.LockExtensions.Locking``1(System.Action{Hybrid.Authorization.Functions.FunctionHandlerBase{{TFunction}}})
  - System.Object.Hybrid.Reflection.LockExtensions.Locking``1(System.Func{{TResult}})
  - Hybrid.Authorization.Functions.FunctionHandlerBase`1.Hybrid.Reflection.LockExtensions.Locking``2(System.Func{Hybrid.Authorization.Functions.FunctionHandlerBase{{TFunction}},{TResult}})
  - Hybrid.Authorization.Functions.FunctionHandlerBase`1.Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2
  - Hybrid.Authorization.Functions.FunctionHandlerBase`1.Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(System.Security.Principal.IPrincipal)
  - Hybrid.Authorization.Functions.FunctionHandlerBase`1.Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(System.Security.Principal.IPrincipal)
  nameWithType.vb: FunctionHandlerBase(Of TFunction)
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  fullName.vb: Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction)
  name.vb: FunctionHandlerBase(Of TFunction)
- uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1.#ctor(System.IServiceProvider)
  commentId: M:Hybrid.Authorization.Functions.FunctionHandlerBase`1.#ctor(System.IServiceProvider)
  id: '#ctor(System.IServiceProvider)'
  parent: Hybrid.Authorization.Functions.FunctionHandlerBase`1
  langs:
  - csharp
  - vb
  name: FunctionHandlerBase(IServiceProvider)
  nameWithType: FunctionHandlerBase<TFunction>.FunctionHandlerBase(IServiceProvider)
  fullName: Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>.FunctionHandlerBase(System.IServiceProvider)
  type: Constructor
  source:
    remote:
      path: src/Hybrid/Authorization/Functions/FunctionHandlerBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: .ctor
    path: ../src/Hybrid/Authorization/Functions/FunctionHandlerBase.cs
    startLine: 40
  assemblies:
  - Hybrid
  namespace: Hybrid.Authorization.Functions
  summary: "\n初始化一个<xref href=\"Hybrid.Authorization.Functions.FunctionHandlerBase%601\" data-throw-if-not-resolved=\"false\"></xref>类型的新实例\n"
  example: []
  syntax:
    content: protected FunctionHandlerBase(IServiceProvider serviceProvider)
    parameters:
    - id: serviceProvider
      type: System.IServiceProvider
    content.vb: Protected Sub New(serviceProvider As IServiceProvider)
  overload: Hybrid.Authorization.Functions.FunctionHandlerBase`1.#ctor*
  nameWithType.vb: FunctionHandlerBase(Of TFunction).FunctionHandlerBase(IServiceProvider)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction).FunctionHandlerBase(System.IServiceProvider)
- uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1.Logger
  commentId: P:Hybrid.Authorization.Functions.FunctionHandlerBase`1.Logger
  id: Logger
  parent: Hybrid.Authorization.Functions.FunctionHandlerBase`1
  langs:
  - csharp
  - vb
  name: Logger
  nameWithType: FunctionHandlerBase<TFunction>.Logger
  fullName: Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>.Logger
  type: Property
  source:
    remote:
      path: src/Hybrid/Authorization/Functions/FunctionHandlerBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: Logger
    path: ../src/Hybrid/Authorization/Functions/FunctionHandlerBase.cs
    startLine: 49
  assemblies:
  - Hybrid
  namespace: Hybrid.Authorization.Functions
  summary: "\n获取 日志记录对象\n"
  example: []
  syntax:
    content: protected ILogger Logger { get; }
    parameters: []
    return:
      type: Microsoft.Extensions.Logging.ILogger
    content.vb: Protected ReadOnly Property Logger As ILogger
  overload: Hybrid.Authorization.Functions.FunctionHandlerBase`1.Logger*
  nameWithType.vb: FunctionHandlerBase(Of TFunction).Logger
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
  fullName.vb: Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction).Logger
- uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1.FunctionTypeFinder
  commentId: P:Hybrid.Authorization.Functions.FunctionHandlerBase`1.FunctionTypeFinder
  id: FunctionTypeFinder
  parent: Hybrid.Authorization.Functions.FunctionHandlerBase`1
  langs:
  - csharp
  - vb
  name: FunctionTypeFinder
  nameWithType: FunctionHandlerBase<TFunction>.FunctionTypeFinder
  fullName: Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>.FunctionTypeFinder
  type: Property
  source:
    remote:
      path: src/Hybrid/Authorization/Functions/FunctionHandlerBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: FunctionTypeFinder
    path: ../src/Hybrid/Authorization/Functions/FunctionHandlerBase.cs
    startLine: 54
  assemblies:
  - Hybrid
  namespace: Hybrid.Authorization.Functions
  summary: "\n获取 功能类型查找器\n"
  example: []
  syntax:
    content: public abstract IFunctionTypeFinder FunctionTypeFinder { get; }
    parameters: []
    return:
      type: Hybrid.Authorization.Functions.IFunctionTypeFinder
    content.vb: Public MustOverride ReadOnly Property FunctionTypeFinder As IFunctionTypeFinder
  overload: Hybrid.Authorization.Functions.FunctionHandlerBase`1.FunctionTypeFinder*
  implements:
  - Hybrid.Authorization.Functions.IFunctionHandler.FunctionTypeFinder
  nameWithType.vb: FunctionHandlerBase(Of TFunction).FunctionTypeFinder
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
  fullName.vb: Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction).FunctionTypeFinder
- uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1.MethodInfoFinder
  commentId: P:Hybrid.Authorization.Functions.FunctionHandlerBase`1.MethodInfoFinder
  id: MethodInfoFinder
  parent: Hybrid.Authorization.Functions.FunctionHandlerBase`1
  langs:
  - csharp
  - vb
  name: MethodInfoFinder
  nameWithType: FunctionHandlerBase<TFunction>.MethodInfoFinder
  fullName: Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>.MethodInfoFinder
  type: Property
  source:
    remote:
      path: src/Hybrid/Authorization/Functions/FunctionHandlerBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: MethodInfoFinder
    path: ../src/Hybrid/Authorization/Functions/FunctionHandlerBase.cs
    startLine: 59
  assemblies:
  - Hybrid
  namespace: Hybrid.Authorization.Functions
  summary: "\n获取 功能方法查找器\n"
  example: []
  syntax:
    content: public abstract IMethodInfoFinder MethodInfoFinder { get; }
    parameters: []
    return:
      type: Hybrid.Reflection.IMethodInfoFinder
    content.vb: Public MustOverride ReadOnly Property MethodInfoFinder As IMethodInfoFinder
  overload: Hybrid.Authorization.Functions.FunctionHandlerBase`1.MethodInfoFinder*
  implements:
  - Hybrid.Authorization.Functions.IFunctionHandler.MethodInfoFinder
  nameWithType.vb: FunctionHandlerBase(Of TFunction).MethodInfoFinder
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
  fullName.vb: Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction).MethodInfoFinder
- uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1.Initialize
  commentId: M:Hybrid.Authorization.Functions.FunctionHandlerBase`1.Initialize
  id: Initialize
  parent: Hybrid.Authorization.Functions.FunctionHandlerBase`1
  langs:
  - csharp
  - vb
  name: Initialize()
  nameWithType: FunctionHandlerBase<TFunction>.Initialize()
  fullName: Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>.Initialize()
  type: Method
  source:
    remote:
      path: src/Hybrid/Authorization/Functions/FunctionHandlerBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: Initialize
    path: ../src/Hybrid/Authorization/Functions/FunctionHandlerBase.cs
    startLine: 64
  assemblies:
  - Hybrid
  namespace: Hybrid.Authorization.Functions
  summary: "\n从程序集中获取功能信息（如MVC的Controller-Action）\n"
  example: []
  syntax:
    content: public void Initialize()
    content.vb: Public Sub Initialize
  overload: Hybrid.Authorization.Functions.FunctionHandlerBase`1.Initialize*
  implements:
  - Hybrid.Authorization.Functions.IFunctionHandler.Initialize
  nameWithType.vb: FunctionHandlerBase(Of TFunction).Initialize()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction).Initialize()
- uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1.GetFunction(System.String,System.String,System.String)
  commentId: M:Hybrid.Authorization.Functions.FunctionHandlerBase`1.GetFunction(System.String,System.String,System.String)
  id: GetFunction(System.String,System.String,System.String)
  parent: Hybrid.Authorization.Functions.FunctionHandlerBase`1
  langs:
  - csharp
  - vb
  name: GetFunction(String, String, String)
  nameWithType: FunctionHandlerBase<TFunction>.GetFunction(String, String, String)
  fullName: Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>.GetFunction(System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/Hybrid/Authorization/Functions/FunctionHandlerBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: GetFunction
    path: ../src/Hybrid/Authorization/Functions/FunctionHandlerBase.cs
    startLine: 87
  assemblies:
  - Hybrid
  namespace: Hybrid.Authorization.Functions
  summary: "\n查找指定条件的功能信息\n"
  example: []
  syntax:
    content: public IFunction GetFunction(string area, string controller, string action)
    parameters:
    - id: area
      type: System.String
      description: 区域
    - id: controller
      type: System.String
      description: 控制器
    - id: action
      type: System.String
      description: 功能方法
    return:
      type: Hybrid.Authorization.Functions.IFunction
      description: 功能信息
    content.vb: Public Function GetFunction(area As String, controller As String, action As String) As IFunction
  overload: Hybrid.Authorization.Functions.FunctionHandlerBase`1.GetFunction*
  implements:
  - Hybrid.Authorization.Functions.IFunctionHandler.GetFunction(System.String,System.String,System.String)
  nameWithType.vb: FunctionHandlerBase(Of TFunction).GetFunction(String, String, String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction).GetFunction(System.String, System.String, System.String)
- uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1.RefreshCache
  commentId: M:Hybrid.Authorization.Functions.FunctionHandlerBase`1.RefreshCache
  id: RefreshCache
  parent: Hybrid.Authorization.Functions.FunctionHandlerBase`1
  langs:
  - csharp
  - vb
  name: RefreshCache()
  nameWithType: FunctionHandlerBase<TFunction>.RefreshCache()
  fullName: Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>.RefreshCache()
  type: Method
  source:
    remote:
      path: src/Hybrid/Authorization/Functions/FunctionHandlerBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: RefreshCache
    path: ../src/Hybrid/Authorization/Functions/FunctionHandlerBase.cs
    startLine: 102
  assemblies:
  - Hybrid
  namespace: Hybrid.Authorization.Functions
  summary: "\n刷新功能信息缓存\n"
  example: []
  syntax:
    content: public void RefreshCache()
    content.vb: Public Sub RefreshCache
  overload: Hybrid.Authorization.Functions.FunctionHandlerBase`1.RefreshCache*
  implements:
  - Hybrid.Authorization.Functions.IFunctionHandler.RefreshCache
  nameWithType.vb: FunctionHandlerBase(Of TFunction).RefreshCache()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction).RefreshCache()
- uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1.ClearCache
  commentId: M:Hybrid.Authorization.Functions.FunctionHandlerBase`1.ClearCache
  id: ClearCache
  parent: Hybrid.Authorization.Functions.FunctionHandlerBase`1
  langs:
  - csharp
  - vb
  name: ClearCache()
  nameWithType: FunctionHandlerBase<TFunction>.ClearCache()
  fullName: Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>.ClearCache()
  type: Method
  source:
    remote:
      path: src/Hybrid/Authorization/Functions/FunctionHandlerBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: ClearCache
    path: ../src/Hybrid/Authorization/Functions/FunctionHandlerBase.cs
    startLine: 114
  assemblies:
  - Hybrid
  namespace: Hybrid.Authorization.Functions
  summary: "\n清空功能信息缓存\n"
  example: []
  syntax:
    content: public void ClearCache()
    content.vb: Public Sub ClearCache
  overload: Hybrid.Authorization.Functions.FunctionHandlerBase`1.ClearCache*
  implements:
  - Hybrid.Authorization.Functions.IFunctionHandler.ClearCache
  nameWithType.vb: FunctionHandlerBase(Of TFunction).ClearCache()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction).ClearCache()
- uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1.GetFunctions(System.Type[])
  commentId: M:Hybrid.Authorization.Functions.FunctionHandlerBase`1.GetFunctions(System.Type[])
  id: GetFunctions(System.Type[])
  parent: Hybrid.Authorization.Functions.FunctionHandlerBase`1
  langs:
  - csharp
  - vb
  name: GetFunctions(Type[])
  nameWithType: FunctionHandlerBase<TFunction>.GetFunctions(Type[])
  fullName: Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>.GetFunctions(System.Type[])
  type: Method
  source:
    remote:
      path: src/Hybrid/Authorization/Functions/FunctionHandlerBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: GetFunctions
    path: ../src/Hybrid/Authorization/Functions/FunctionHandlerBase.cs
    startLine: 124
  assemblies:
  - Hybrid
  namespace: Hybrid.Authorization.Functions
  summary: "\n从功能类型中获取功能信息\n"
  example: []
  syntax:
    content: protected virtual TFunction[] GetFunctions(Type[] functionTypes)
    parameters:
    - id: functionTypes
      type: System.Type[]
      description: 功能类型集合
    return:
      type: '{TFunction}[]'
      description: ''
    content.vb: Protected Overridable Function GetFunctions(functionTypes As Type()) As TFunction()
  overload: Hybrid.Authorization.Functions.FunctionHandlerBase`1.GetFunctions*
  nameWithType.vb: FunctionHandlerBase(Of TFunction).GetFunctions(Type())
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction).GetFunctions(System.Type())
  name.vb: GetFunctions(Type())
- uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1.GetFunction(System.Type)
  commentId: M:Hybrid.Authorization.Functions.FunctionHandlerBase`1.GetFunction(System.Type)
  id: GetFunction(System.Type)
  parent: Hybrid.Authorization.Functions.FunctionHandlerBase`1
  langs:
  - csharp
  - vb
  name: GetFunction(Type)
  nameWithType: FunctionHandlerBase<TFunction>.GetFunction(Type)
  fullName: Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>.GetFunction(System.Type)
  type: Method
  source:
    remote:
      path: src/Hybrid/Authorization/Functions/FunctionHandlerBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: GetFunction
    path: ../src/Hybrid/Authorization/Functions/FunctionHandlerBase.cs
    startLine: 174
  assemblies:
  - Hybrid
  namespace: Hybrid.Authorization.Functions
  summary: "\n重写以实现从功能类型创建功能信息\n"
  example: []
  syntax:
    content: protected abstract TFunction GetFunction(Type type)
    parameters:
    - id: type
      type: System.Type
      description: 功能类型
    return:
      type: '{TFunction}'
      description: ''
    content.vb: Protected MustOverride Function GetFunction(type As Type) As TFunction
  overload: Hybrid.Authorization.Functions.FunctionHandlerBase`1.GetFunction*
  nameWithType.vb: FunctionHandlerBase(Of TFunction).GetFunction(Type)
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
  fullName.vb: Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction).GetFunction(System.Type)
- uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1.GetFunction(`0,System.Reflection.MethodInfo)
  commentId: M:Hybrid.Authorization.Functions.FunctionHandlerBase`1.GetFunction(`0,System.Reflection.MethodInfo)
  id: GetFunction(`0,System.Reflection.MethodInfo)
  parent: Hybrid.Authorization.Functions.FunctionHandlerBase`1
  langs:
  - csharp
  - vb
  name: GetFunction(TFunction, MethodInfo)
  nameWithType: FunctionHandlerBase<TFunction>.GetFunction(TFunction, MethodInfo)
  fullName: Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>.GetFunction(TFunction, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/Hybrid/Authorization/Functions/FunctionHandlerBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: GetFunction
    path: ../src/Hybrid/Authorization/Functions/FunctionHandlerBase.cs
    startLine: 182
  assemblies:
  - Hybrid
  namespace: Hybrid.Authorization.Functions
  summary: "\n重写以实现从方法信息中创建功能信息\n"
  example: []
  syntax:
    content: protected abstract TFunction GetFunction(TFunction typeFunction, MethodInfo method)
    parameters:
    - id: typeFunction
      type: '{TFunction}'
      description: 类功能信息
    - id: method
      type: System.Reflection.MethodInfo
      description: 方法信息
    return:
      type: '{TFunction}'
      description: ''
    content.vb: Protected MustOverride Function GetFunction(typeFunction As TFunction, method As MethodInfo) As TFunction
  overload: Hybrid.Authorization.Functions.FunctionHandlerBase`1.GetFunction*
  nameWithType.vb: FunctionHandlerBase(Of TFunction).GetFunction(TFunction, MethodInfo)
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
  fullName.vb: Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction).GetFunction(TFunction, System.Reflection.MethodInfo)
- uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1.HasPickup(System.Collections.Generic.List{`0},`0)
  commentId: M:Hybrid.Authorization.Functions.FunctionHandlerBase`1.HasPickup(System.Collections.Generic.List{`0},`0)
  id: HasPickup(System.Collections.Generic.List{`0},`0)
  parent: Hybrid.Authorization.Functions.FunctionHandlerBase`1
  langs:
  - csharp
  - vb
  name: HasPickup(List<TFunction>, TFunction)
  nameWithType: FunctionHandlerBase<TFunction>.HasPickup(List<TFunction>, TFunction)
  fullName: Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>.HasPickup(System.Collections.Generic.List<TFunction>, TFunction)
  type: Method
  source:
    remote:
      path: src/Hybrid/Authorization/Functions/FunctionHandlerBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: HasPickup
    path: ../src/Hybrid/Authorization/Functions/FunctionHandlerBase.cs
    startLine: 190
  assemblies:
  - Hybrid
  namespace: Hybrid.Authorization.Functions
  summary: "\n重写以判断指定功能信息是否已提取过\n"
  example: []
  syntax:
    content: protected virtual bool HasPickup(List<TFunction> functions, TFunction function)
    parameters:
    - id: functions
      type: System.Collections.Generic.List{{TFunction}}
      description: 已提取功能信息集合
    - id: function
      type: '{TFunction}'
      description: 要判断的功能信息
    return:
      type: System.Boolean
      description: ''
    content.vb: Protected Overridable Function HasPickup(functions As List(Of TFunction), function As TFunction) As Boolean
  overload: Hybrid.Authorization.Functions.FunctionHandlerBase`1.HasPickup*
  nameWithType.vb: FunctionHandlerBase(Of TFunction).HasPickup(List(Of TFunction), TFunction)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction).HasPickup(System.Collections.Generic.List(Of TFunction), TFunction)
  name.vb: HasPickup(List(Of TFunction), TFunction)
- uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1.GetFunction(System.Collections.Generic.IEnumerable{`0},System.String,System.String,System.String,System.String)
  commentId: M:Hybrid.Authorization.Functions.FunctionHandlerBase`1.GetFunction(System.Collections.Generic.IEnumerable{`0},System.String,System.String,System.String,System.String)
  id: GetFunction(System.Collections.Generic.IEnumerable{`0},System.String,System.String,System.String,System.String)
  parent: Hybrid.Authorization.Functions.FunctionHandlerBase`1
  langs:
  - csharp
  - vb
  name: GetFunction(IEnumerable<TFunction>, String, String, String, String)
  nameWithType: FunctionHandlerBase<TFunction>.GetFunction(IEnumerable<TFunction>, String, String, String, String)
  fullName: Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>.GetFunction(System.Collections.Generic.IEnumerable<TFunction>, System.String, System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/Hybrid/Authorization/Functions/FunctionHandlerBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: GetFunction
    path: ../src/Hybrid/Authorization/Functions/FunctionHandlerBase.cs
    startLine: 208
  assemblies:
  - Hybrid
  namespace: Hybrid.Authorization.Functions
  summary: "\n重写以实现功能信息查找\n"
  example: []
  syntax:
    content: protected virtual TFunction GetFunction(IEnumerable<TFunction> functions, string area, string controller, string action, string name)
    parameters:
    - id: functions
      type: System.Collections.Generic.IEnumerable{{TFunction}}
      description: 功能信息集合
    - id: area
      type: System.String
      description: 区域名称
    - id: controller
      type: System.String
      description: 类型名称
    - id: action
      type: System.String
      description: 方法名称
    - id: name
      type: System.String
      description: 功能名称
    return:
      type: '{TFunction}'
      description: ''
    content.vb: Protected Overridable Function GetFunction(functions As IEnumerable(Of TFunction), area As String, controller As String, action As String, name As String) As TFunction
  overload: Hybrid.Authorization.Functions.FunctionHandlerBase`1.GetFunction*
  nameWithType.vb: FunctionHandlerBase(Of TFunction).GetFunction(IEnumerable(Of TFunction), String, String, String, String)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction).GetFunction(System.Collections.Generic.IEnumerable(Of TFunction), System.String, System.String, System.String, System.String)
  name.vb: GetFunction(IEnumerable(Of TFunction), String, String, String, String)
- uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1.IsIgnoreMethod(`0,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{`0})
  commentId: M:Hybrid.Authorization.Functions.FunctionHandlerBase`1.IsIgnoreMethod(`0,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{`0})
  id: IsIgnoreMethod(`0,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{`0})
  parent: Hybrid.Authorization.Functions.FunctionHandlerBase`1
  langs:
  - csharp
  - vb
  name: IsIgnoreMethod(TFunction, MethodInfo, IEnumerable<TFunction>)
  nameWithType: FunctionHandlerBase<TFunction>.IsIgnoreMethod(TFunction, MethodInfo, IEnumerable<TFunction>)
  fullName: Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>.IsIgnoreMethod(TFunction, System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable<TFunction>)
  type: Method
  source:
    remote:
      path: src/Hybrid/Authorization/Functions/FunctionHandlerBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: IsIgnoreMethod
    path: ../src/Hybrid/Authorization/Functions/FunctionHandlerBase.cs
    startLine: 224
  assemblies:
  - Hybrid
  namespace: Hybrid.Authorization.Functions
  summary: "\n重写以实现是否忽略指定方法的功能信息\n"
  example: []
  syntax:
    content: protected virtual bool IsIgnoreMethod(TFunction action, MethodInfo method, IEnumerable<TFunction> functions)
    parameters:
    - id: action
      type: '{TFunction}'
      description: 要判断的功能信息
    - id: method
      type: System.Reflection.MethodInfo
      description: 功能相关的方法信息
    - id: functions
      type: System.Collections.Generic.IEnumerable{{TFunction}}
      description: 已存在的功能信息集合
    return:
      type: System.Boolean
      description: ''
    content.vb: Protected Overridable Function IsIgnoreMethod(action As TFunction, method As MethodInfo, functions As IEnumerable(Of TFunction)) As Boolean
  overload: Hybrid.Authorization.Functions.FunctionHandlerBase`1.IsIgnoreMethod*
  nameWithType.vb: FunctionHandlerBase(Of TFunction).IsIgnoreMethod(TFunction, MethodInfo, IEnumerable(Of TFunction))
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction).IsIgnoreMethod(TFunction, System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable(Of TFunction))
  name.vb: IsIgnoreMethod(TFunction, MethodInfo, IEnumerable(Of TFunction))
- uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1.SyncToDatabase(System.IServiceProvider,`0[])
  commentId: M:Hybrid.Authorization.Functions.FunctionHandlerBase`1.SyncToDatabase(System.IServiceProvider,`0[])
  id: SyncToDatabase(System.IServiceProvider,`0[])
  parent: Hybrid.Authorization.Functions.FunctionHandlerBase`1
  langs:
  - csharp
  - vb
  name: SyncToDatabase(IServiceProvider, TFunction[])
  nameWithType: FunctionHandlerBase<TFunction>.SyncToDatabase(IServiceProvider, TFunction[])
  fullName: Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>.SyncToDatabase(System.IServiceProvider, TFunction[])
  type: Method
  source:
    remote:
      path: src/Hybrid/Authorization/Functions/FunctionHandlerBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: SyncToDatabase
    path: ../src/Hybrid/Authorization/Functions/FunctionHandlerBase.cs
    startLine: 235
  assemblies:
  - Hybrid
  namespace: Hybrid.Authorization.Functions
  summary: "\n将从程序集获取的功能信息同步到数据库中\n"
  example: []
  syntax:
    content: protected virtual void SyncToDatabase(IServiceProvider scopedProvider, TFunction[] functions)
    parameters:
    - id: scopedProvider
      type: System.IServiceProvider
      description: 局部服务程序提供者
    - id: functions
      type: '{TFunction}[]'
      description: 程序集获取的功能信息
    content.vb: Protected Overridable Sub SyncToDatabase(scopedProvider As IServiceProvider, functions As TFunction())
  overload: Hybrid.Authorization.Functions.FunctionHandlerBase`1.SyncToDatabase*
  nameWithType.vb: FunctionHandlerBase(Of TFunction).SyncToDatabase(IServiceProvider, TFunction())
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction).SyncToDatabase(System.IServiceProvider, TFunction())
  name.vb: SyncToDatabase(IServiceProvider, TFunction())
- uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1.GetFromDatabase(System.IServiceProvider)
  commentId: M:Hybrid.Authorization.Functions.FunctionHandlerBase`1.GetFromDatabase(System.IServiceProvider)
  id: GetFromDatabase(System.IServiceProvider)
  parent: Hybrid.Authorization.Functions.FunctionHandlerBase`1
  langs:
  - csharp
  - vb
  name: GetFromDatabase(IServiceProvider)
  nameWithType: FunctionHandlerBase<TFunction>.GetFromDatabase(IServiceProvider)
  fullName: Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>.GetFromDatabase(System.IServiceProvider)
  type: Method
  source:
    remote:
      path: src/Hybrid/Authorization/Functions/FunctionHandlerBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: GetFromDatabase
    path: ../src/Hybrid/Authorization/Functions/FunctionHandlerBase.cs
    startLine: 346
  assemblies:
  - Hybrid
  namespace: Hybrid.Authorization.Functions
  summary: "\n从数据库获取最新功能信息\n"
  example: []
  syntax:
    content: protected virtual TFunction[] GetFromDatabase(IServiceProvider scopedProvider)
    parameters:
    - id: scopedProvider
      type: System.IServiceProvider
    return:
      type: '{TFunction}[]'
      description: ''
    content.vb: Protected Overridable Function GetFromDatabase(scopedProvider As IServiceProvider) As TFunction()
  overload: Hybrid.Authorization.Functions.FunctionHandlerBase`1.GetFromDatabase*
  nameWithType.vb: FunctionHandlerBase(Of TFunction).GetFromDatabase(IServiceProvider)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction).GetFromDatabase(System.IServiceProvider)
references:
- uid: Hybrid.Authorization.Functions
  commentId: N:Hybrid.Authorization.Functions
  name: Hybrid.Authorization.Functions
  nameWithType: Hybrid.Authorization.Functions
  fullName: Hybrid.Authorization.Functions
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Hybrid.Authorization.Functions.IFunctionHandler
  commentId: T:Hybrid.Authorization.Functions.IFunctionHandler
  parent: Hybrid.Authorization.Functions
  name: IFunctionHandler
  nameWithType: IFunctionHandler
  fullName: Hybrid.Authorization.Functions.IFunctionHandler
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1.OSharp.Entity.EntityExtensions.CheckICreatedTime``2
  commentId: M:OSharp.Entity.EntityExtensions.CheckICreatedTime``2(``0)
  parent: OSharp.Entity.EntityExtensions
  definition: OSharp.Entity.EntityExtensions.CheckICreatedTime``2(``0)
  name: CheckICreatedTime<FunctionHandlerBase<TFunction>, TKey>()
  nameWithType: EntityExtensions.CheckICreatedTime<FunctionHandlerBase<TFunction>, TKey>()
  fullName: OSharp.Entity.EntityExtensions.CheckICreatedTime<Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>, TKey>()
  nameWithType.vb: EntityExtensions.CheckICreatedTime(Of FunctionHandlerBase(Of TFunction), TKey)()
  fullName.vb: OSharp.Entity.EntityExtensions.CheckICreatedTime(Of Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction), TKey)()
  name.vb: CheckICreatedTime(Of FunctionHandlerBase(Of TFunction), TKey)()
  spec.csharp:
  - uid: OSharp.Entity.EntityExtensions.CheckICreatedTime``2
    name: CheckICreatedTime<FunctionHandlerBase<TFunction>, TKey>
    nameWithType: EntityExtensions.CheckICreatedTime<FunctionHandlerBase<TFunction>, TKey>
    fullName: OSharp.Entity.EntityExtensions.CheckICreatedTime<Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Entity.EntityExtensions.CheckICreatedTime``2
    name: CheckICreatedTime(Of FunctionHandlerBase(Of TFunction), TKey)
    nameWithType: EntityExtensions.CheckICreatedTime(Of FunctionHandlerBase(Of TFunction), TKey)
    fullName: OSharp.Entity.EntityExtensions.CheckICreatedTime(Of Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction), TKey)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1.OSharp.Entity.EntityExtensions.CheckICreationAudited``3(System.Security.Principal.IPrincipal)
  commentId: M:OSharp.Entity.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
  parent: OSharp.Entity.EntityExtensions
  definition: OSharp.Entity.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
  name: CheckICreationAudited<FunctionHandlerBase<TFunction>, TKey, TUserKey>(IPrincipal)
  nameWithType: EntityExtensions.CheckICreationAudited<FunctionHandlerBase<TFunction>, TKey, TUserKey>(IPrincipal)
  fullName: OSharp.Entity.EntityExtensions.CheckICreationAudited<Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>, TKey, TUserKey>(System.Security.Principal.IPrincipal)
  nameWithType.vb: EntityExtensions.CheckICreationAudited(Of FunctionHandlerBase(Of TFunction), TKey, TUserKey)(IPrincipal)
  fullName.vb: OSharp.Entity.EntityExtensions.CheckICreationAudited(Of Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction), TKey, TUserKey)(System.Security.Principal.IPrincipal)
  name.vb: CheckICreationAudited(Of FunctionHandlerBase(Of TFunction), TKey, TUserKey)(IPrincipal)
  spec.csharp:
  - uid: OSharp.Entity.EntityExtensions.CheckICreationAudited``3(System.Security.Principal.IPrincipal)
    name: CheckICreationAudited<FunctionHandlerBase<TFunction>, TKey, TUserKey>
    nameWithType: EntityExtensions.CheckICreationAudited<FunctionHandlerBase<TFunction>, TKey, TUserKey>
    fullName: OSharp.Entity.EntityExtensions.CheckICreationAudited<Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>, TKey, TUserKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Entity.EntityExtensions.CheckICreationAudited``3(System.Security.Principal.IPrincipal)
    name: CheckICreationAudited(Of FunctionHandlerBase(Of TFunction), TKey, TUserKey)
    nameWithType: EntityExtensions.CheckICreationAudited(Of FunctionHandlerBase(Of TFunction), TKey, TUserKey)
    fullName: OSharp.Entity.EntityExtensions.CheckICreationAudited(Of Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction), TKey, TUserKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1.OSharp.Entity.EntityExtensions.CheckIUpdateAudited``3(System.Security.Principal.IPrincipal)
  commentId: M:OSharp.Entity.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
  parent: OSharp.Entity.EntityExtensions
  definition: OSharp.Entity.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
  name: CheckIUpdateAudited<FunctionHandlerBase<TFunction>, TKey, TUserKey>(IPrincipal)
  nameWithType: EntityExtensions.CheckIUpdateAudited<FunctionHandlerBase<TFunction>, TKey, TUserKey>(IPrincipal)
  fullName: OSharp.Entity.EntityExtensions.CheckIUpdateAudited<Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>, TKey, TUserKey>(System.Security.Principal.IPrincipal)
  nameWithType.vb: EntityExtensions.CheckIUpdateAudited(Of FunctionHandlerBase(Of TFunction), TKey, TUserKey)(IPrincipal)
  fullName.vb: OSharp.Entity.EntityExtensions.CheckIUpdateAudited(Of Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction), TKey, TUserKey)(System.Security.Principal.IPrincipal)
  name.vb: CheckIUpdateAudited(Of FunctionHandlerBase(Of TFunction), TKey, TUserKey)(IPrincipal)
  spec.csharp:
  - uid: OSharp.Entity.EntityExtensions.CheckIUpdateAudited``3(System.Security.Principal.IPrincipal)
    name: CheckIUpdateAudited<FunctionHandlerBase<TFunction>, TKey, TUserKey>
    nameWithType: EntityExtensions.CheckIUpdateAudited<FunctionHandlerBase<TFunction>, TKey, TUserKey>
    fullName: OSharp.Entity.EntityExtensions.CheckIUpdateAudited<Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>, TKey, TUserKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Entity.EntityExtensions.CheckIUpdateAudited``3(System.Security.Principal.IPrincipal)
    name: CheckIUpdateAudited(Of FunctionHandlerBase(Of TFunction), TKey, TUserKey)
    nameWithType: EntityExtensions.CheckIUpdateAudited(Of FunctionHandlerBase(Of TFunction), TKey, TUserKey)
    fullName: OSharp.Entity.EntityExtensions.CheckIUpdateAudited(Of Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction), TKey, TUserKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.OSharp.Extensions.ObjectExtensions.CastTo(System.Type)
  commentId: M:OSharp.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
  parent: OSharp.Extensions.ObjectExtensions
  definition: OSharp.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
  name: CastTo(Type)
  nameWithType: ObjectExtensions.CastTo(Type)
  fullName: OSharp.Extensions.ObjectExtensions.CastTo(System.Type)
  spec.csharp:
  - uid: OSharp.Extensions.ObjectExtensions.CastTo(System.Type)
    name: CastTo
    nameWithType: ObjectExtensions.CastTo
    fullName: OSharp.Extensions.ObjectExtensions.CastTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ObjectExtensions.CastTo(System.Type)
    name: CastTo
    nameWithType: ObjectExtensions.CastTo
    fullName: OSharp.Extensions.ObjectExtensions.CastTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.OSharp.Extensions.ObjectExtensions.CastTo``1
  commentId: M:OSharp.Extensions.ObjectExtensions.CastTo``1(System.Object)
  parent: OSharp.Extensions.ObjectExtensions
  definition: OSharp.Extensions.ObjectExtensions.CastTo``1(System.Object)
  name: CastTo<T>()
  nameWithType: ObjectExtensions.CastTo<T>()
  fullName: OSharp.Extensions.ObjectExtensions.CastTo<T>()
  nameWithType.vb: ObjectExtensions.CastTo(Of T)()
  fullName.vb: OSharp.Extensions.ObjectExtensions.CastTo(Of T)()
  name.vb: CastTo(Of T)()
  spec.csharp:
  - uid: OSharp.Extensions.ObjectExtensions.CastTo``1
    name: CastTo<T>
    nameWithType: ObjectExtensions.CastTo<T>
    fullName: OSharp.Extensions.ObjectExtensions.CastTo<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ObjectExtensions.CastTo``1
    name: CastTo(Of T)
    nameWithType: ObjectExtensions.CastTo(Of T)
    fullName: OSharp.Extensions.ObjectExtensions.CastTo(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.OSharp.Extensions.ObjectExtensions.CastTo``1({T})
  commentId: M:OSharp.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
  parent: OSharp.Extensions.ObjectExtensions
  definition: OSharp.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
  name: CastTo<T>(T)
  nameWithType: ObjectExtensions.CastTo<T>(T)
  fullName: OSharp.Extensions.ObjectExtensions.CastTo<T>(T)
  nameWithType.vb: ObjectExtensions.CastTo(Of T)(T)
  fullName.vb: OSharp.Extensions.ObjectExtensions.CastTo(Of T)(T)
  name.vb: CastTo(Of T)(T)
  spec.csharp:
  - uid: OSharp.Extensions.ObjectExtensions.CastTo``1(``0)
    name: CastTo<T>
    nameWithType: ObjectExtensions.CastTo<T>
    fullName: OSharp.Extensions.ObjectExtensions.CastTo<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ObjectExtensions.CastTo``1(``0)
    name: CastTo(Of T)
    nameWithType: ObjectExtensions.CastTo(Of T)
    fullName: OSharp.Extensions.ObjectExtensions.CastTo(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1.OSharp.Extensions.ObjectExtensions.IsIn``1(Hybrid.Authorization.Functions.FunctionHandlerBase{{TFunction}}[])
  commentId: M:OSharp.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
  parent: OSharp.Extensions.ObjectExtensions
  definition: OSharp.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
  name: IsIn<FunctionHandlerBase<TFunction>>(FunctionHandlerBase<TFunction>[])
  nameWithType: ObjectExtensions.IsIn<FunctionHandlerBase<TFunction>>(FunctionHandlerBase<TFunction>[])
  fullName: OSharp.Extensions.ObjectExtensions.IsIn<Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>>(Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>[])
  nameWithType.vb: ObjectExtensions.IsIn(Of FunctionHandlerBase(Of TFunction))(FunctionHandlerBase(Of TFunction)())
  fullName.vb: OSharp.Extensions.ObjectExtensions.IsIn(Of Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction))(Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction)())
  name.vb: IsIn(Of FunctionHandlerBase(Of TFunction))(FunctionHandlerBase(Of TFunction)())
  spec.csharp:
  - uid: OSharp.Extensions.ObjectExtensions.IsIn``1(``0[])
    name: IsIn<FunctionHandlerBase<TFunction>>
    nameWithType: ObjectExtensions.IsIn<FunctionHandlerBase<TFunction>>
    fullName: OSharp.Extensions.ObjectExtensions.IsIn<Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1
    name: FunctionHandlerBase
    nameWithType: FunctionHandlerBase
    fullName: Hybrid.Authorization.Functions.FunctionHandlerBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ObjectExtensions.IsIn``1(``0[])
    name: IsIn(Of FunctionHandlerBase(Of TFunction))
    nameWithType: ObjectExtensions.IsIn(Of FunctionHandlerBase(Of TFunction))
    fullName: OSharp.Extensions.ObjectExtensions.IsIn(Of Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction))
  - name: (
    nameWithType: (
    fullName: (
  - uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1
    name: FunctionHandlerBase
    nameWithType: FunctionHandlerBase
    fullName: Hybrid.Authorization.Functions.FunctionHandlerBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.OSharp.Extensions.ObjectExtensions.ToDynamic
  commentId: M:OSharp.Extensions.ObjectExtensions.ToDynamic(System.Object)
  parent: OSharp.Extensions.ObjectExtensions
  definition: OSharp.Extensions.ObjectExtensions.ToDynamic(System.Object)
  name: ToDynamic()
  nameWithType: ObjectExtensions.ToDynamic()
  fullName: OSharp.Extensions.ObjectExtensions.ToDynamic()
  spec.csharp:
  - uid: OSharp.Extensions.ObjectExtensions.ToDynamic
    name: ToDynamic
    nameWithType: ObjectExtensions.ToDynamic
    fullName: OSharp.Extensions.ObjectExtensions.ToDynamic
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ObjectExtensions.ToDynamic
    name: ToDynamic
    nameWithType: ObjectExtensions.ToDynamic
    fullName: OSharp.Extensions.ObjectExtensions.ToDynamic
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1.OSharp.Extensions.ObjectExtensions.DeepClone``1
  commentId: M:OSharp.Extensions.ObjectExtensions.DeepClone``1(``0)
  parent: OSharp.Extensions.ObjectExtensions
  definition: OSharp.Extensions.ObjectExtensions.DeepClone``1(``0)
  name: DeepClone<FunctionHandlerBase<TFunction>>()
  nameWithType: ObjectExtensions.DeepClone<FunctionHandlerBase<TFunction>>()
  fullName: OSharp.Extensions.ObjectExtensions.DeepClone<Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>>()
  nameWithType.vb: ObjectExtensions.DeepClone(Of FunctionHandlerBase(Of TFunction))()
  fullName.vb: OSharp.Extensions.ObjectExtensions.DeepClone(Of Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction))()
  name.vb: DeepClone(Of FunctionHandlerBase(Of TFunction))()
  spec.csharp:
  - uid: OSharp.Extensions.ObjectExtensions.DeepClone``1
    name: DeepClone<FunctionHandlerBase<TFunction>>
    nameWithType: ObjectExtensions.DeepClone<FunctionHandlerBase<TFunction>>
    fullName: OSharp.Extensions.ObjectExtensions.DeepClone<Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ObjectExtensions.DeepClone``1
    name: DeepClone(Of FunctionHandlerBase(Of TFunction))
    nameWithType: ObjectExtensions.DeepClone(Of FunctionHandlerBase(Of TFunction))
    fullName: OSharp.Extensions.ObjectExtensions.DeepClone(Of Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction))
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1.OSharp.Extensions.ParameterCheckExtensions.Required``1(System.Func{Hybrid.Authorization.Functions.FunctionHandlerBase{{TFunction}},System.Boolean},System.String)
  commentId: M:OSharp.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
  parent: OSharp.Extensions.ParameterCheckExtensions
  definition: OSharp.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
  name: Required<FunctionHandlerBase<TFunction>>(Func<FunctionHandlerBase<TFunction>, Boolean>, String)
  nameWithType: ParameterCheckExtensions.Required<FunctionHandlerBase<TFunction>>(Func<FunctionHandlerBase<TFunction>, Boolean>, String)
  fullName: OSharp.Extensions.ParameterCheckExtensions.Required<Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>>(System.Func<Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>, System.Boolean>, System.String)
  nameWithType.vb: ParameterCheckExtensions.Required(Of FunctionHandlerBase(Of TFunction))(Func(Of FunctionHandlerBase(Of TFunction), Boolean), String)
  fullName.vb: OSharp.Extensions.ParameterCheckExtensions.Required(Of Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction))(System.Func(Of Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction), System.Boolean), System.String)
  name.vb: Required(Of FunctionHandlerBase(Of TFunction))(Func(Of FunctionHandlerBase(Of TFunction), Boolean), String)
  spec.csharp:
  - uid: OSharp.Extensions.ParameterCheckExtensions.Required``1(System.Func{``0,System.Boolean},System.String)
    name: Required<FunctionHandlerBase<TFunction>>
    nameWithType: ParameterCheckExtensions.Required<FunctionHandlerBase<TFunction>>
    fullName: OSharp.Extensions.ParameterCheckExtensions.Required<Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1
    name: FunctionHandlerBase
    nameWithType: FunctionHandlerBase
    fullName: Hybrid.Authorization.Functions.FunctionHandlerBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ParameterCheckExtensions.Required``1(System.Func{``0,System.Boolean},System.String)
    name: Required(Of FunctionHandlerBase(Of TFunction))
    nameWithType: ParameterCheckExtensions.Required(Of FunctionHandlerBase(Of TFunction))
    fullName: OSharp.Extensions.ParameterCheckExtensions.Required(Of Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction))
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1
    name: FunctionHandlerBase
    nameWithType: FunctionHandlerBase
    fullName: Hybrid.Authorization.Functions.FunctionHandlerBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1.OSharp.Extensions.ParameterCheckExtensions.Required``2(System.Func{Hybrid.Authorization.Functions.FunctionHandlerBase{{TFunction}},System.Boolean},System.String)
  commentId: M:OSharp.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
  parent: OSharp.Extensions.ParameterCheckExtensions
  definition: OSharp.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
  name: Required<FunctionHandlerBase<TFunction>, TException>(Func<FunctionHandlerBase<TFunction>, Boolean>, String)
  nameWithType: ParameterCheckExtensions.Required<FunctionHandlerBase<TFunction>, TException>(Func<FunctionHandlerBase<TFunction>, Boolean>, String)
  fullName: OSharp.Extensions.ParameterCheckExtensions.Required<Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>, TException>(System.Func<Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>, System.Boolean>, System.String)
  nameWithType.vb: ParameterCheckExtensions.Required(Of FunctionHandlerBase(Of TFunction), TException)(Func(Of FunctionHandlerBase(Of TFunction), Boolean), String)
  fullName.vb: OSharp.Extensions.ParameterCheckExtensions.Required(Of Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction), TException)(System.Func(Of Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction), System.Boolean), System.String)
  name.vb: Required(Of FunctionHandlerBase(Of TFunction), TException)(Func(Of FunctionHandlerBase(Of TFunction), Boolean), String)
  spec.csharp:
  - uid: OSharp.Extensions.ParameterCheckExtensions.Required``2(System.Func{``0,System.Boolean},System.String)
    name: Required<FunctionHandlerBase<TFunction>, TException>
    nameWithType: ParameterCheckExtensions.Required<FunctionHandlerBase<TFunction>, TException>
    fullName: OSharp.Extensions.ParameterCheckExtensions.Required<Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>, TException>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1
    name: FunctionHandlerBase
    nameWithType: FunctionHandlerBase
    fullName: Hybrid.Authorization.Functions.FunctionHandlerBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ParameterCheckExtensions.Required``2(System.Func{``0,System.Boolean},System.String)
    name: Required(Of FunctionHandlerBase(Of TFunction), TException)
    nameWithType: ParameterCheckExtensions.Required(Of FunctionHandlerBase(Of TFunction), TException)
    fullName: OSharp.Extensions.ParameterCheckExtensions.Required(Of Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction), TException)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1
    name: FunctionHandlerBase
    nameWithType: FunctionHandlerBase
    fullName: Hybrid.Authorization.Functions.FunctionHandlerBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1.OSharp.Extensions.ParameterCheckExtensions.CheckNotNull``1(System.String)
  commentId: M:OSharp.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
  parent: OSharp.Extensions.ParameterCheckExtensions
  definition: OSharp.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
  name: CheckNotNull<FunctionHandlerBase<TFunction>>(String)
  nameWithType: ParameterCheckExtensions.CheckNotNull<FunctionHandlerBase<TFunction>>(String)
  fullName: OSharp.Extensions.ParameterCheckExtensions.CheckNotNull<Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>>(System.String)
  nameWithType.vb: ParameterCheckExtensions.CheckNotNull(Of FunctionHandlerBase(Of TFunction))(String)
  fullName.vb: OSharp.Extensions.ParameterCheckExtensions.CheckNotNull(Of Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction))(System.String)
  name.vb: CheckNotNull(Of FunctionHandlerBase(Of TFunction))(String)
  spec.csharp:
  - uid: OSharp.Extensions.ParameterCheckExtensions.CheckNotNull``1(System.String)
    name: CheckNotNull<FunctionHandlerBase<TFunction>>
    nameWithType: ParameterCheckExtensions.CheckNotNull<FunctionHandlerBase<TFunction>>
    fullName: OSharp.Extensions.ParameterCheckExtensions.CheckNotNull<Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ParameterCheckExtensions.CheckNotNull``1(System.String)
    name: CheckNotNull(Of FunctionHandlerBase(Of TFunction))
    nameWithType: ParameterCheckExtensions.CheckNotNull(Of FunctionHandlerBase(Of TFunction))
    fullName: OSharp.Extensions.ParameterCheckExtensions.CheckNotNull(Of Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction))
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1.OSharp.Extensions.TryCatchExtensions.TryCatch``1(System.Action{Hybrid.Authorization.Functions.FunctionHandlerBase{{TFunction}}},System.Action{System.Exception},System.Action{Hybrid.Authorization.Functions.FunctionHandlerBase{{TFunction}}})
  commentId: M:OSharp.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
  parent: OSharp.Extensions.TryCatchExtensions
  definition: OSharp.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
  name: TryCatch<FunctionHandlerBase<TFunction>>(Action<FunctionHandlerBase<TFunction>>, Action<Exception>, Action<FunctionHandlerBase<TFunction>>)
  nameWithType: TryCatchExtensions.TryCatch<FunctionHandlerBase<TFunction>>(Action<FunctionHandlerBase<TFunction>>, Action<Exception>, Action<FunctionHandlerBase<TFunction>>)
  fullName: OSharp.Extensions.TryCatchExtensions.TryCatch<Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>>(System.Action<Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>>, System.Action<System.Exception>, System.Action<Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of FunctionHandlerBase(Of TFunction))(Action(Of FunctionHandlerBase(Of TFunction)), Action(Of Exception), Action(Of FunctionHandlerBase(Of TFunction)))
  fullName.vb: OSharp.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction))(System.Action(Of Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction)), System.Action(Of System.Exception), System.Action(Of Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction)))
  name.vb: TryCatch(Of FunctionHandlerBase(Of TFunction))(Action(Of FunctionHandlerBase(Of TFunction)), Action(Of Exception), Action(Of FunctionHandlerBase(Of TFunction)))
  spec.csharp:
  - uid: OSharp.Extensions.TryCatchExtensions.TryCatch``1(System.Action{``0},System.Action{System.Exception},System.Action{``0})
    name: TryCatch<FunctionHandlerBase<TFunction>>
    nameWithType: TryCatchExtensions.TryCatch<FunctionHandlerBase<TFunction>>
    fullName: OSharp.Extensions.TryCatchExtensions.TryCatch<Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1
    name: FunctionHandlerBase
    nameWithType: FunctionHandlerBase
    fullName: Hybrid.Authorization.Functions.FunctionHandlerBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1
    name: FunctionHandlerBase
    nameWithType: FunctionHandlerBase
    fullName: Hybrid.Authorization.Functions.FunctionHandlerBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.TryCatchExtensions.TryCatch``1(System.Action{``0},System.Action{System.Exception},System.Action{``0})
    name: TryCatch(Of FunctionHandlerBase(Of TFunction))
    nameWithType: TryCatchExtensions.TryCatch(Of FunctionHandlerBase(Of TFunction))
    fullName: OSharp.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction))
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1
    name: FunctionHandlerBase
    nameWithType: FunctionHandlerBase
    fullName: Hybrid.Authorization.Functions.FunctionHandlerBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1
    name: FunctionHandlerBase
    nameWithType: FunctionHandlerBase
    fullName: Hybrid.Authorization.Functions.FunctionHandlerBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1.OSharp.Extensions.TryCatchExtensions.TryCatch``1(System.Action{Hybrid.Authorization.Functions.FunctionHandlerBase{{TFunction}}},System.Action{System.Exception})
  commentId: M:OSharp.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
  parent: OSharp.Extensions.TryCatchExtensions
  definition: OSharp.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
  name: TryCatch<FunctionHandlerBase<TFunction>>(Action<FunctionHandlerBase<TFunction>>, Action<Exception>)
  nameWithType: TryCatchExtensions.TryCatch<FunctionHandlerBase<TFunction>>(Action<FunctionHandlerBase<TFunction>>, Action<Exception>)
  fullName: OSharp.Extensions.TryCatchExtensions.TryCatch<Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>>(System.Action<Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>>, System.Action<System.Exception>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of FunctionHandlerBase(Of TFunction))(Action(Of FunctionHandlerBase(Of TFunction)), Action(Of Exception))
  fullName.vb: OSharp.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction))(System.Action(Of Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction)), System.Action(Of System.Exception))
  name.vb: TryCatch(Of FunctionHandlerBase(Of TFunction))(Action(Of FunctionHandlerBase(Of TFunction)), Action(Of Exception))
  spec.csharp:
  - uid: OSharp.Extensions.TryCatchExtensions.TryCatch``1(System.Action{``0},System.Action{System.Exception})
    name: TryCatch<FunctionHandlerBase<TFunction>>
    nameWithType: TryCatchExtensions.TryCatch<FunctionHandlerBase<TFunction>>
    fullName: OSharp.Extensions.TryCatchExtensions.TryCatch<Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1
    name: FunctionHandlerBase
    nameWithType: FunctionHandlerBase
    fullName: Hybrid.Authorization.Functions.FunctionHandlerBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.TryCatchExtensions.TryCatch``1(System.Action{``0},System.Action{System.Exception})
    name: TryCatch(Of FunctionHandlerBase(Of TFunction))
    nameWithType: TryCatchExtensions.TryCatch(Of FunctionHandlerBase(Of TFunction))
    fullName: OSharp.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction))
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1
    name: FunctionHandlerBase
    nameWithType: FunctionHandlerBase
    fullName: Hybrid.Authorization.Functions.FunctionHandlerBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1.OSharp.Extensions.TryCatchExtensions.TryCatch``2(System.Func{Hybrid.Authorization.Functions.FunctionHandlerBase{{TFunction}},{TResult}},System.Action{System.Exception},System.Action{Hybrid.Authorization.Functions.FunctionHandlerBase{{TFunction}}})
  commentId: M:OSharp.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
  parent: OSharp.Extensions.TryCatchExtensions
  definition: OSharp.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
  name: TryCatch<FunctionHandlerBase<TFunction>, TResult>(Func<FunctionHandlerBase<TFunction>, TResult>, Action<Exception>, Action<FunctionHandlerBase<TFunction>>)
  nameWithType: TryCatchExtensions.TryCatch<FunctionHandlerBase<TFunction>, TResult>(Func<FunctionHandlerBase<TFunction>, TResult>, Action<Exception>, Action<FunctionHandlerBase<TFunction>>)
  fullName: OSharp.Extensions.TryCatchExtensions.TryCatch<Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>, TResult>(System.Func<Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>, TResult>, System.Action<System.Exception>, System.Action<Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of FunctionHandlerBase(Of TFunction), TResult)(Func(Of FunctionHandlerBase(Of TFunction), TResult), Action(Of Exception), Action(Of FunctionHandlerBase(Of TFunction)))
  fullName.vb: OSharp.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction), TResult)(System.Func(Of Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction), TResult), System.Action(Of System.Exception), System.Action(Of Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction)))
  name.vb: TryCatch(Of FunctionHandlerBase(Of TFunction), TResult)(Func(Of FunctionHandlerBase(Of TFunction), TResult), Action(Of Exception), Action(Of FunctionHandlerBase(Of TFunction)))
  spec.csharp:
  - uid: OSharp.Extensions.TryCatchExtensions.TryCatch``2(System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
    name: TryCatch<FunctionHandlerBase<TFunction>, TResult>
    nameWithType: TryCatchExtensions.TryCatch<FunctionHandlerBase<TFunction>, TResult>
    fullName: OSharp.Extensions.TryCatchExtensions.TryCatch<Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1
    name: FunctionHandlerBase
    nameWithType: FunctionHandlerBase
    fullName: Hybrid.Authorization.Functions.FunctionHandlerBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1
    name: FunctionHandlerBase
    nameWithType: FunctionHandlerBase
    fullName: Hybrid.Authorization.Functions.FunctionHandlerBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.TryCatchExtensions.TryCatch``2(System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
    name: TryCatch(Of FunctionHandlerBase(Of TFunction), TResult)
    nameWithType: TryCatchExtensions.TryCatch(Of FunctionHandlerBase(Of TFunction), TResult)
    fullName: OSharp.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction), TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1
    name: FunctionHandlerBase
    nameWithType: FunctionHandlerBase
    fullName: Hybrid.Authorization.Functions.FunctionHandlerBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1
    name: FunctionHandlerBase
    nameWithType: FunctionHandlerBase
    fullName: Hybrid.Authorization.Functions.FunctionHandlerBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1.OSharp.Extensions.TryCatchExtensions.TryCatch``2(System.Func{Hybrid.Authorization.Functions.FunctionHandlerBase{{TFunction}},{TResult}},System.Action{System.Exception})
  commentId: M:OSharp.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
  parent: OSharp.Extensions.TryCatchExtensions
  definition: OSharp.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
  name: TryCatch<FunctionHandlerBase<TFunction>, TResult>(Func<FunctionHandlerBase<TFunction>, TResult>, Action<Exception>)
  nameWithType: TryCatchExtensions.TryCatch<FunctionHandlerBase<TFunction>, TResult>(Func<FunctionHandlerBase<TFunction>, TResult>, Action<Exception>)
  fullName: OSharp.Extensions.TryCatchExtensions.TryCatch<Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>, TResult>(System.Func<Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>, TResult>, System.Action<System.Exception>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of FunctionHandlerBase(Of TFunction), TResult)(Func(Of FunctionHandlerBase(Of TFunction), TResult), Action(Of Exception))
  fullName.vb: OSharp.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction), TResult)(System.Func(Of Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction), TResult), System.Action(Of System.Exception))
  name.vb: TryCatch(Of FunctionHandlerBase(Of TFunction), TResult)(Func(Of FunctionHandlerBase(Of TFunction), TResult), Action(Of Exception))
  spec.csharp:
  - uid: OSharp.Extensions.TryCatchExtensions.TryCatch``2(System.Func{``0,``1},System.Action{System.Exception})
    name: TryCatch<FunctionHandlerBase<TFunction>, TResult>
    nameWithType: TryCatchExtensions.TryCatch<FunctionHandlerBase<TFunction>, TResult>
    fullName: OSharp.Extensions.TryCatchExtensions.TryCatch<Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1
    name: FunctionHandlerBase
    nameWithType: FunctionHandlerBase
    fullName: Hybrid.Authorization.Functions.FunctionHandlerBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.TryCatchExtensions.TryCatch``2(System.Func{``0,``1},System.Action{System.Exception})
    name: TryCatch(Of FunctionHandlerBase(Of TFunction), TResult)
    nameWithType: TryCatchExtensions.TryCatch(Of FunctionHandlerBase(Of TFunction), TResult)
    fullName: OSharp.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction), TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1
    name: FunctionHandlerBase
    nameWithType: FunctionHandlerBase
    fullName: Hybrid.Authorization.Functions.FunctionHandlerBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1.OSharp.Extensions.TryCatchExtensions.TryFinally``1(System.Action{Hybrid.Authorization.Functions.FunctionHandlerBase{{TFunction}}},System.Action{Hybrid.Authorization.Functions.FunctionHandlerBase{{TFunction}}})
  commentId: M:OSharp.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
  parent: OSharp.Extensions.TryCatchExtensions
  definition: OSharp.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
  name: TryFinally<FunctionHandlerBase<TFunction>>(Action<FunctionHandlerBase<TFunction>>, Action<FunctionHandlerBase<TFunction>>)
  nameWithType: TryCatchExtensions.TryFinally<FunctionHandlerBase<TFunction>>(Action<FunctionHandlerBase<TFunction>>, Action<FunctionHandlerBase<TFunction>>)
  fullName: OSharp.Extensions.TryCatchExtensions.TryFinally<Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>>(System.Action<Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>>, System.Action<Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>>)
  nameWithType.vb: TryCatchExtensions.TryFinally(Of FunctionHandlerBase(Of TFunction))(Action(Of FunctionHandlerBase(Of TFunction)), Action(Of FunctionHandlerBase(Of TFunction)))
  fullName.vb: OSharp.Extensions.TryCatchExtensions.TryFinally(Of Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction))(System.Action(Of Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction)), System.Action(Of Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction)))
  name.vb: TryFinally(Of FunctionHandlerBase(Of TFunction))(Action(Of FunctionHandlerBase(Of TFunction)), Action(Of FunctionHandlerBase(Of TFunction)))
  spec.csharp:
  - uid: OSharp.Extensions.TryCatchExtensions.TryFinally``1(System.Action{``0},System.Action{``0})
    name: TryFinally<FunctionHandlerBase<TFunction>>
    nameWithType: TryCatchExtensions.TryFinally<FunctionHandlerBase<TFunction>>
    fullName: OSharp.Extensions.TryCatchExtensions.TryFinally<Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1
    name: FunctionHandlerBase
    nameWithType: FunctionHandlerBase
    fullName: Hybrid.Authorization.Functions.FunctionHandlerBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1
    name: FunctionHandlerBase
    nameWithType: FunctionHandlerBase
    fullName: Hybrid.Authorization.Functions.FunctionHandlerBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.TryCatchExtensions.TryFinally``1(System.Action{``0},System.Action{``0})
    name: TryFinally(Of FunctionHandlerBase(Of TFunction))
    nameWithType: TryCatchExtensions.TryFinally(Of FunctionHandlerBase(Of TFunction))
    fullName: OSharp.Extensions.TryCatchExtensions.TryFinally(Of Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction))
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1
    name: FunctionHandlerBase
    nameWithType: FunctionHandlerBase
    fullName: Hybrid.Authorization.Functions.FunctionHandlerBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1
    name: FunctionHandlerBase
    nameWithType: FunctionHandlerBase
    fullName: Hybrid.Authorization.Functions.FunctionHandlerBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.OSharp.Json.JsonExtensions.ToJsonString(System.Boolean,System.Boolean)
  commentId: M:OSharp.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
  parent: OSharp.Json.JsonExtensions
  definition: OSharp.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
  name: ToJsonString(Boolean, Boolean)
  nameWithType: JsonExtensions.ToJsonString(Boolean, Boolean)
  fullName: OSharp.Json.JsonExtensions.ToJsonString(System.Boolean, System.Boolean)
  spec.csharp:
  - uid: OSharp.Json.JsonExtensions.ToJsonString(System.Boolean,System.Boolean)
    name: ToJsonString
    nameWithType: JsonExtensions.ToJsonString
    fullName: OSharp.Json.JsonExtensions.ToJsonString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Json.JsonExtensions.ToJsonString(System.Boolean,System.Boolean)
    name: ToJsonString
    nameWithType: JsonExtensions.ToJsonString
    fullName: OSharp.Json.JsonExtensions.ToJsonString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.OSharp.Mapping.MapperExtensions.MapTo``1
  commentId: M:OSharp.Mapping.MapperExtensions.MapTo``1(System.Object)
  parent: OSharp.Mapping.MapperExtensions
  definition: OSharp.Mapping.MapperExtensions.MapTo``1(System.Object)
  name: MapTo<TTarget>()
  nameWithType: MapperExtensions.MapTo<TTarget>()
  fullName: OSharp.Mapping.MapperExtensions.MapTo<TTarget>()
  nameWithType.vb: MapperExtensions.MapTo(Of TTarget)()
  fullName.vb: OSharp.Mapping.MapperExtensions.MapTo(Of TTarget)()
  name.vb: MapTo(Of TTarget)()
  spec.csharp:
  - uid: OSharp.Mapping.MapperExtensions.MapTo``1
    name: MapTo<TTarget>
    nameWithType: MapperExtensions.MapTo<TTarget>
    fullName: OSharp.Mapping.MapperExtensions.MapTo<TTarget>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Mapping.MapperExtensions.MapTo``1
    name: MapTo(Of TTarget)
    nameWithType: MapperExtensions.MapTo(Of TTarget)
    fullName: OSharp.Mapping.MapperExtensions.MapTo(Of TTarget)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1.OSharp.Mapping.MapperExtensions.MapTo``2({TTarget})
  commentId: M:OSharp.Mapping.MapperExtensions.MapTo``2(``0,``1)
  parent: OSharp.Mapping.MapperExtensions
  definition: OSharp.Mapping.MapperExtensions.MapTo``2(``0,``1)
  name: MapTo<FunctionHandlerBase<TFunction>, TTarget>(TTarget)
  nameWithType: MapperExtensions.MapTo<FunctionHandlerBase<TFunction>, TTarget>(TTarget)
  fullName: OSharp.Mapping.MapperExtensions.MapTo<Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>, TTarget>(TTarget)
  nameWithType.vb: MapperExtensions.MapTo(Of FunctionHandlerBase(Of TFunction), TTarget)(TTarget)
  fullName.vb: OSharp.Mapping.MapperExtensions.MapTo(Of Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction), TTarget)(TTarget)
  name.vb: MapTo(Of FunctionHandlerBase(Of TFunction), TTarget)(TTarget)
  spec.csharp:
  - uid: OSharp.Mapping.MapperExtensions.MapTo``2(``1)
    name: MapTo<FunctionHandlerBase<TFunction>, TTarget>
    nameWithType: MapperExtensions.MapTo<FunctionHandlerBase<TFunction>, TTarget>
    fullName: OSharp.Mapping.MapperExtensions.MapTo<Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>, TTarget>
  - name: (
    nameWithType: (
    fullName: (
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Mapping.MapperExtensions.MapTo``2(``1)
    name: MapTo(Of FunctionHandlerBase(Of TFunction), TTarget)
    nameWithType: MapperExtensions.MapTo(Of FunctionHandlerBase(Of TFunction), TTarget)
    fullName: OSharp.Mapping.MapperExtensions.MapTo(Of Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction), TTarget)
  - name: (
    nameWithType: (
    fullName: (
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.OSharp.Reflection.LockExtensions.Locking(System.Action)
  commentId: M:OSharp.Reflection.LockExtensions.Locking(System.Object,System.Action)
  parent: OSharp.Reflection.LockExtensions
  definition: OSharp.Reflection.LockExtensions.Locking(System.Object,System.Action)
  name: Locking(Action)
  nameWithType: LockExtensions.Locking(Action)
  fullName: OSharp.Reflection.LockExtensions.Locking(System.Action)
  spec.csharp:
  - uid: OSharp.Reflection.LockExtensions.Locking(System.Action)
    name: Locking
    nameWithType: LockExtensions.Locking
    fullName: OSharp.Reflection.LockExtensions.Locking
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Reflection.LockExtensions.Locking(System.Action)
    name: Locking
    nameWithType: LockExtensions.Locking
    fullName: OSharp.Reflection.LockExtensions.Locking
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1.OSharp.Reflection.LockExtensions.Locking``1(System.Action{Hybrid.Authorization.Functions.FunctionHandlerBase{{TFunction}}})
  commentId: M:OSharp.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
  parent: OSharp.Reflection.LockExtensions
  definition: OSharp.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
  name: Locking<FunctionHandlerBase<TFunction>>(Action<FunctionHandlerBase<TFunction>>)
  nameWithType: LockExtensions.Locking<FunctionHandlerBase<TFunction>>(Action<FunctionHandlerBase<TFunction>>)
  fullName: OSharp.Reflection.LockExtensions.Locking<Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>>(System.Action<Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>>)
  nameWithType.vb: LockExtensions.Locking(Of FunctionHandlerBase(Of TFunction))(Action(Of FunctionHandlerBase(Of TFunction)))
  fullName.vb: OSharp.Reflection.LockExtensions.Locking(Of Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction))(System.Action(Of Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction)))
  name.vb: Locking(Of FunctionHandlerBase(Of TFunction))(Action(Of FunctionHandlerBase(Of TFunction)))
  spec.csharp:
  - uid: OSharp.Reflection.LockExtensions.Locking``1(System.Action{``0})
    name: Locking<FunctionHandlerBase<TFunction>>
    nameWithType: LockExtensions.Locking<FunctionHandlerBase<TFunction>>
    fullName: OSharp.Reflection.LockExtensions.Locking<Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1
    name: FunctionHandlerBase
    nameWithType: FunctionHandlerBase
    fullName: Hybrid.Authorization.Functions.FunctionHandlerBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Reflection.LockExtensions.Locking``1(System.Action{``0})
    name: Locking(Of FunctionHandlerBase(Of TFunction))
    nameWithType: LockExtensions.Locking(Of FunctionHandlerBase(Of TFunction))
    fullName: OSharp.Reflection.LockExtensions.Locking(Of Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction))
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1
    name: FunctionHandlerBase
    nameWithType: FunctionHandlerBase
    fullName: Hybrid.Authorization.Functions.FunctionHandlerBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.OSharp.Reflection.LockExtensions.Locking``1(System.Func{{TResult}})
  commentId: M:OSharp.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
  parent: OSharp.Reflection.LockExtensions
  definition: OSharp.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
  name: Locking<TResult>(Func<TResult>)
  nameWithType: LockExtensions.Locking<TResult>(Func<TResult>)
  fullName: OSharp.Reflection.LockExtensions.Locking<TResult>(System.Func<TResult>)
  nameWithType.vb: LockExtensions.Locking(Of TResult)(Func(Of TResult))
  fullName.vb: OSharp.Reflection.LockExtensions.Locking(Of TResult)(System.Func(Of TResult))
  name.vb: Locking(Of TResult)(Func(Of TResult))
  spec.csharp:
  - uid: OSharp.Reflection.LockExtensions.Locking``1(System.Func{``0})
    name: Locking<TResult>
    nameWithType: LockExtensions.Locking<TResult>
    fullName: OSharp.Reflection.LockExtensions.Locking<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Reflection.LockExtensions.Locking``1(System.Func{``0})
    name: Locking(Of TResult)
    nameWithType: LockExtensions.Locking(Of TResult)
    fullName: OSharp.Reflection.LockExtensions.Locking(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1.OSharp.Reflection.LockExtensions.Locking``2(System.Func{Hybrid.Authorization.Functions.FunctionHandlerBase{{TFunction}},{TResult}})
  commentId: M:OSharp.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
  parent: OSharp.Reflection.LockExtensions
  definition: OSharp.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
  name: Locking<FunctionHandlerBase<TFunction>, TResult>(Func<FunctionHandlerBase<TFunction>, TResult>)
  nameWithType: LockExtensions.Locking<FunctionHandlerBase<TFunction>, TResult>(Func<FunctionHandlerBase<TFunction>, TResult>)
  fullName: OSharp.Reflection.LockExtensions.Locking<Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>, TResult>(System.Func<Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>, TResult>)
  nameWithType.vb: LockExtensions.Locking(Of FunctionHandlerBase(Of TFunction), TResult)(Func(Of FunctionHandlerBase(Of TFunction), TResult))
  fullName.vb: OSharp.Reflection.LockExtensions.Locking(Of Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction), TResult)(System.Func(Of Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction), TResult))
  name.vb: Locking(Of FunctionHandlerBase(Of TFunction), TResult)(Func(Of FunctionHandlerBase(Of TFunction), TResult))
  spec.csharp:
  - uid: OSharp.Reflection.LockExtensions.Locking``2(System.Func{``0,``1})
    name: Locking<FunctionHandlerBase<TFunction>, TResult>
    nameWithType: LockExtensions.Locking<FunctionHandlerBase<TFunction>, TResult>
    fullName: OSharp.Reflection.LockExtensions.Locking<Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1
    name: FunctionHandlerBase
    nameWithType: FunctionHandlerBase
    fullName: Hybrid.Authorization.Functions.FunctionHandlerBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Reflection.LockExtensions.Locking``2(System.Func{``0,``1})
    name: Locking(Of FunctionHandlerBase(Of TFunction), TResult)
    nameWithType: LockExtensions.Locking(Of FunctionHandlerBase(Of TFunction), TResult)
    fullName: OSharp.Reflection.LockExtensions.Locking(Of Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction), TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1
    name: FunctionHandlerBase
    nameWithType: FunctionHandlerBase
    fullName: Hybrid.Authorization.Functions.FunctionHandlerBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Extensions.ObjectExtensions.CastTo(System.Type)
  commentId: M:Hybrid.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
  parent: Hybrid.Extensions.ObjectExtensions
  definition: Hybrid.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
  name: CastTo(Type)
  nameWithType: ObjectExtensions.CastTo(Type)
  fullName: Hybrid.Extensions.ObjectExtensions.CastTo(System.Type)
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo(System.Type)
    name: CastTo
    nameWithType: ObjectExtensions.CastTo
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo(System.Type)
    name: CastTo
    nameWithType: ObjectExtensions.CastTo
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Extensions.ObjectExtensions.CastTo``1
  commentId: M:Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object)
  parent: Hybrid.Extensions.ObjectExtensions
  definition: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object)
  name: CastTo<T>()
  nameWithType: ObjectExtensions.CastTo<T>()
  fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>()
  nameWithType.vb: ObjectExtensions.CastTo(Of T)()
  fullName.vb: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)()
  name.vb: CastTo(Of T)()
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1
    name: CastTo<T>
    nameWithType: ObjectExtensions.CastTo<T>
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1
    name: CastTo(Of T)
    nameWithType: ObjectExtensions.CastTo(Of T)
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Extensions.ObjectExtensions.CastTo``1({T})
  commentId: M:Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
  parent: Hybrid.Extensions.ObjectExtensions
  definition: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
  name: CastTo<T>(T)
  nameWithType: ObjectExtensions.CastTo<T>(T)
  fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>(T)
  nameWithType.vb: ObjectExtensions.CastTo(Of T)(T)
  fullName.vb: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)(T)
  name.vb: CastTo(Of T)(T)
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(``0)
    name: CastTo<T>
    nameWithType: ObjectExtensions.CastTo<T>
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(``0)
    name: CastTo(Of T)
    nameWithType: ObjectExtensions.CastTo(Of T)
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1.Hybrid.Extensions.ObjectExtensions.IsIn``1(Hybrid.Authorization.Functions.FunctionHandlerBase{{TFunction}}[])
  commentId: M:Hybrid.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
  parent: Hybrid.Extensions.ObjectExtensions
  definition: Hybrid.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
  name: IsIn<FunctionHandlerBase<TFunction>>(FunctionHandlerBase<TFunction>[])
  nameWithType: ObjectExtensions.IsIn<FunctionHandlerBase<TFunction>>(FunctionHandlerBase<TFunction>[])
  fullName: Hybrid.Extensions.ObjectExtensions.IsIn<Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>>(Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>[])
  nameWithType.vb: ObjectExtensions.IsIn(Of FunctionHandlerBase(Of TFunction))(FunctionHandlerBase(Of TFunction)())
  fullName.vb: Hybrid.Extensions.ObjectExtensions.IsIn(Of Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction))(Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction)())
  name.vb: IsIn(Of FunctionHandlerBase(Of TFunction))(FunctionHandlerBase(Of TFunction)())
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.IsIn``1(``0[])
    name: IsIn<FunctionHandlerBase<TFunction>>
    nameWithType: ObjectExtensions.IsIn<FunctionHandlerBase<TFunction>>
    fullName: Hybrid.Extensions.ObjectExtensions.IsIn<Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1
    name: FunctionHandlerBase
    nameWithType: FunctionHandlerBase
    fullName: Hybrid.Authorization.Functions.FunctionHandlerBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.IsIn``1(``0[])
    name: IsIn(Of FunctionHandlerBase(Of TFunction))
    nameWithType: ObjectExtensions.IsIn(Of FunctionHandlerBase(Of TFunction))
    fullName: Hybrid.Extensions.ObjectExtensions.IsIn(Of Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction))
  - name: (
    nameWithType: (
    fullName: (
  - uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1
    name: FunctionHandlerBase
    nameWithType: FunctionHandlerBase
    fullName: Hybrid.Authorization.Functions.FunctionHandlerBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Extensions.ObjectExtensions.ToDynamic
  commentId: M:Hybrid.Extensions.ObjectExtensions.ToDynamic(System.Object)
  parent: Hybrid.Extensions.ObjectExtensions
  definition: Hybrid.Extensions.ObjectExtensions.ToDynamic(System.Object)
  name: ToDynamic()
  nameWithType: ObjectExtensions.ToDynamic()
  fullName: Hybrid.Extensions.ObjectExtensions.ToDynamic()
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.ToDynamic
    name: ToDynamic
    nameWithType: ObjectExtensions.ToDynamic
    fullName: Hybrid.Extensions.ObjectExtensions.ToDynamic
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.ToDynamic
    name: ToDynamic
    nameWithType: ObjectExtensions.ToDynamic
    fullName: Hybrid.Extensions.ObjectExtensions.ToDynamic
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1.Hybrid.Extensions.ObjectExtensions.DeepClone``1
  commentId: M:Hybrid.Extensions.ObjectExtensions.DeepClone``1(``0)
  parent: Hybrid.Extensions.ObjectExtensions
  definition: Hybrid.Extensions.ObjectExtensions.DeepClone``1(``0)
  name: DeepClone<FunctionHandlerBase<TFunction>>()
  nameWithType: ObjectExtensions.DeepClone<FunctionHandlerBase<TFunction>>()
  fullName: Hybrid.Extensions.ObjectExtensions.DeepClone<Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>>()
  nameWithType.vb: ObjectExtensions.DeepClone(Of FunctionHandlerBase(Of TFunction))()
  fullName.vb: Hybrid.Extensions.ObjectExtensions.DeepClone(Of Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction))()
  name.vb: DeepClone(Of FunctionHandlerBase(Of TFunction))()
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.DeepClone``1
    name: DeepClone<FunctionHandlerBase<TFunction>>
    nameWithType: ObjectExtensions.DeepClone<FunctionHandlerBase<TFunction>>
    fullName: Hybrid.Extensions.ObjectExtensions.DeepClone<Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.DeepClone``1
    name: DeepClone(Of FunctionHandlerBase(Of TFunction))
    nameWithType: ObjectExtensions.DeepClone(Of FunctionHandlerBase(Of TFunction))
    fullName: Hybrid.Extensions.ObjectExtensions.DeepClone(Of Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction))
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1.Hybrid.Extensions.ParameterCheckExtensions.Required``1(System.Func{Hybrid.Authorization.Functions.FunctionHandlerBase{{TFunction}},System.Boolean},System.String)
  commentId: M:Hybrid.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
  parent: Hybrid.Extensions.ParameterCheckExtensions
  definition: Hybrid.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
  name: Required<FunctionHandlerBase<TFunction>>(Func<FunctionHandlerBase<TFunction>, Boolean>, String)
  nameWithType: ParameterCheckExtensions.Required<FunctionHandlerBase<TFunction>>(Func<FunctionHandlerBase<TFunction>, Boolean>, String)
  fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>>(System.Func<Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>, System.Boolean>, System.String)
  nameWithType.vb: ParameterCheckExtensions.Required(Of FunctionHandlerBase(Of TFunction))(Func(Of FunctionHandlerBase(Of TFunction), Boolean), String)
  fullName.vb: Hybrid.Extensions.ParameterCheckExtensions.Required(Of Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction))(System.Func(Of Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction), System.Boolean), System.String)
  name.vb: Required(Of FunctionHandlerBase(Of TFunction))(Func(Of FunctionHandlerBase(Of TFunction), Boolean), String)
  spec.csharp:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``1(System.Func{``0,System.Boolean},System.String)
    name: Required<FunctionHandlerBase<TFunction>>
    nameWithType: ParameterCheckExtensions.Required<FunctionHandlerBase<TFunction>>
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1
    name: FunctionHandlerBase
    nameWithType: FunctionHandlerBase
    fullName: Hybrid.Authorization.Functions.FunctionHandlerBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``1(System.Func{``0,System.Boolean},System.String)
    name: Required(Of FunctionHandlerBase(Of TFunction))
    nameWithType: ParameterCheckExtensions.Required(Of FunctionHandlerBase(Of TFunction))
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required(Of Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction))
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1
    name: FunctionHandlerBase
    nameWithType: FunctionHandlerBase
    fullName: Hybrid.Authorization.Functions.FunctionHandlerBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1.Hybrid.Extensions.ParameterCheckExtensions.Required``2(System.Func{Hybrid.Authorization.Functions.FunctionHandlerBase{{TFunction}},System.Boolean},System.String)
  commentId: M:Hybrid.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
  parent: Hybrid.Extensions.ParameterCheckExtensions
  definition: Hybrid.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
  name: Required<FunctionHandlerBase<TFunction>, TException>(Func<FunctionHandlerBase<TFunction>, Boolean>, String)
  nameWithType: ParameterCheckExtensions.Required<FunctionHandlerBase<TFunction>, TException>(Func<FunctionHandlerBase<TFunction>, Boolean>, String)
  fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>, TException>(System.Func<Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>, System.Boolean>, System.String)
  nameWithType.vb: ParameterCheckExtensions.Required(Of FunctionHandlerBase(Of TFunction), TException)(Func(Of FunctionHandlerBase(Of TFunction), Boolean), String)
  fullName.vb: Hybrid.Extensions.ParameterCheckExtensions.Required(Of Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction), TException)(System.Func(Of Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction), System.Boolean), System.String)
  name.vb: Required(Of FunctionHandlerBase(Of TFunction), TException)(Func(Of FunctionHandlerBase(Of TFunction), Boolean), String)
  spec.csharp:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``2(System.Func{``0,System.Boolean},System.String)
    name: Required<FunctionHandlerBase<TFunction>, TException>
    nameWithType: ParameterCheckExtensions.Required<FunctionHandlerBase<TFunction>, TException>
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>, TException>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1
    name: FunctionHandlerBase
    nameWithType: FunctionHandlerBase
    fullName: Hybrid.Authorization.Functions.FunctionHandlerBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``2(System.Func{``0,System.Boolean},System.String)
    name: Required(Of FunctionHandlerBase(Of TFunction), TException)
    nameWithType: ParameterCheckExtensions.Required(Of FunctionHandlerBase(Of TFunction), TException)
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required(Of Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction), TException)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1
    name: FunctionHandlerBase
    nameWithType: FunctionHandlerBase
    fullName: Hybrid.Authorization.Functions.FunctionHandlerBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1.Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(System.String)
  commentId: M:Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
  parent: Hybrid.Extensions.ParameterCheckExtensions
  definition: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
  name: CheckNotNull<FunctionHandlerBase<TFunction>>(String)
  nameWithType: ParameterCheckExtensions.CheckNotNull<FunctionHandlerBase<TFunction>>(String)
  fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull<Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>>(System.String)
  nameWithType.vb: ParameterCheckExtensions.CheckNotNull(Of FunctionHandlerBase(Of TFunction))(String)
  fullName.vb: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull(Of Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction))(System.String)
  name.vb: CheckNotNull(Of FunctionHandlerBase(Of TFunction))(String)
  spec.csharp:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(System.String)
    name: CheckNotNull<FunctionHandlerBase<TFunction>>
    nameWithType: ParameterCheckExtensions.CheckNotNull<FunctionHandlerBase<TFunction>>
    fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull<Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(System.String)
    name: CheckNotNull(Of FunctionHandlerBase(Of TFunction))
    nameWithType: ParameterCheckExtensions.CheckNotNull(Of FunctionHandlerBase(Of TFunction))
    fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull(Of Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction))
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1.Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{Hybrid.Authorization.Functions.FunctionHandlerBase{{TFunction}}},System.Action{System.Exception},System.Action{Hybrid.Authorization.Functions.FunctionHandlerBase{{TFunction}}})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
  parent: Hybrid.Extensions.TryCatchExtensions
  definition: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
  name: TryCatch<FunctionHandlerBase<TFunction>>(Action<FunctionHandlerBase<TFunction>>, Action<Exception>, Action<FunctionHandlerBase<TFunction>>)
  nameWithType: TryCatchExtensions.TryCatch<FunctionHandlerBase<TFunction>>(Action<FunctionHandlerBase<TFunction>>, Action<Exception>, Action<FunctionHandlerBase<TFunction>>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>>(System.Action<Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>>, System.Action<System.Exception>, System.Action<Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of FunctionHandlerBase(Of TFunction))(Action(Of FunctionHandlerBase(Of TFunction)), Action(Of Exception), Action(Of FunctionHandlerBase(Of TFunction)))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction))(System.Action(Of Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction)), System.Action(Of System.Exception), System.Action(Of Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction)))
  name.vb: TryCatch(Of FunctionHandlerBase(Of TFunction))(Action(Of FunctionHandlerBase(Of TFunction)), Action(Of Exception), Action(Of FunctionHandlerBase(Of TFunction)))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{``0},System.Action{System.Exception},System.Action{``0})
    name: TryCatch<FunctionHandlerBase<TFunction>>
    nameWithType: TryCatchExtensions.TryCatch<FunctionHandlerBase<TFunction>>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1
    name: FunctionHandlerBase
    nameWithType: FunctionHandlerBase
    fullName: Hybrid.Authorization.Functions.FunctionHandlerBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1
    name: FunctionHandlerBase
    nameWithType: FunctionHandlerBase
    fullName: Hybrid.Authorization.Functions.FunctionHandlerBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{``0},System.Action{System.Exception},System.Action{``0})
    name: TryCatch(Of FunctionHandlerBase(Of TFunction))
    nameWithType: TryCatchExtensions.TryCatch(Of FunctionHandlerBase(Of TFunction))
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction))
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1
    name: FunctionHandlerBase
    nameWithType: FunctionHandlerBase
    fullName: Hybrid.Authorization.Functions.FunctionHandlerBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1
    name: FunctionHandlerBase
    nameWithType: FunctionHandlerBase
    fullName: Hybrid.Authorization.Functions.FunctionHandlerBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1.Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{Hybrid.Authorization.Functions.FunctionHandlerBase{{TFunction}}},System.Action{System.Exception})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
  parent: Hybrid.Extensions.TryCatchExtensions
  definition: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
  name: TryCatch<FunctionHandlerBase<TFunction>>(Action<FunctionHandlerBase<TFunction>>, Action<Exception>)
  nameWithType: TryCatchExtensions.TryCatch<FunctionHandlerBase<TFunction>>(Action<FunctionHandlerBase<TFunction>>, Action<Exception>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>>(System.Action<Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>>, System.Action<System.Exception>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of FunctionHandlerBase(Of TFunction))(Action(Of FunctionHandlerBase(Of TFunction)), Action(Of Exception))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction))(System.Action(Of Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction)), System.Action(Of System.Exception))
  name.vb: TryCatch(Of FunctionHandlerBase(Of TFunction))(Action(Of FunctionHandlerBase(Of TFunction)), Action(Of Exception))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{``0},System.Action{System.Exception})
    name: TryCatch<FunctionHandlerBase<TFunction>>
    nameWithType: TryCatchExtensions.TryCatch<FunctionHandlerBase<TFunction>>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1
    name: FunctionHandlerBase
    nameWithType: FunctionHandlerBase
    fullName: Hybrid.Authorization.Functions.FunctionHandlerBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{``0},System.Action{System.Exception})
    name: TryCatch(Of FunctionHandlerBase(Of TFunction))
    nameWithType: TryCatchExtensions.TryCatch(Of FunctionHandlerBase(Of TFunction))
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction))
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1
    name: FunctionHandlerBase
    nameWithType: FunctionHandlerBase
    fullName: Hybrid.Authorization.Functions.FunctionHandlerBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1.Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{Hybrid.Authorization.Functions.FunctionHandlerBase{{TFunction}},{TResult}},System.Action{System.Exception},System.Action{Hybrid.Authorization.Functions.FunctionHandlerBase{{TFunction}}})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
  parent: Hybrid.Extensions.TryCatchExtensions
  definition: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
  name: TryCatch<FunctionHandlerBase<TFunction>, TResult>(Func<FunctionHandlerBase<TFunction>, TResult>, Action<Exception>, Action<FunctionHandlerBase<TFunction>>)
  nameWithType: TryCatchExtensions.TryCatch<FunctionHandlerBase<TFunction>, TResult>(Func<FunctionHandlerBase<TFunction>, TResult>, Action<Exception>, Action<FunctionHandlerBase<TFunction>>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>, TResult>(System.Func<Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>, TResult>, System.Action<System.Exception>, System.Action<Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of FunctionHandlerBase(Of TFunction), TResult)(Func(Of FunctionHandlerBase(Of TFunction), TResult), Action(Of Exception), Action(Of FunctionHandlerBase(Of TFunction)))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction), TResult)(System.Func(Of Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction), TResult), System.Action(Of System.Exception), System.Action(Of Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction)))
  name.vb: TryCatch(Of FunctionHandlerBase(Of TFunction), TResult)(Func(Of FunctionHandlerBase(Of TFunction), TResult), Action(Of Exception), Action(Of FunctionHandlerBase(Of TFunction)))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
    name: TryCatch<FunctionHandlerBase<TFunction>, TResult>
    nameWithType: TryCatchExtensions.TryCatch<FunctionHandlerBase<TFunction>, TResult>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1
    name: FunctionHandlerBase
    nameWithType: FunctionHandlerBase
    fullName: Hybrid.Authorization.Functions.FunctionHandlerBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1
    name: FunctionHandlerBase
    nameWithType: FunctionHandlerBase
    fullName: Hybrid.Authorization.Functions.FunctionHandlerBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
    name: TryCatch(Of FunctionHandlerBase(Of TFunction), TResult)
    nameWithType: TryCatchExtensions.TryCatch(Of FunctionHandlerBase(Of TFunction), TResult)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction), TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1
    name: FunctionHandlerBase
    nameWithType: FunctionHandlerBase
    fullName: Hybrid.Authorization.Functions.FunctionHandlerBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1
    name: FunctionHandlerBase
    nameWithType: FunctionHandlerBase
    fullName: Hybrid.Authorization.Functions.FunctionHandlerBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1.Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{Hybrid.Authorization.Functions.FunctionHandlerBase{{TFunction}},{TResult}},System.Action{System.Exception})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
  parent: Hybrid.Extensions.TryCatchExtensions
  definition: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
  name: TryCatch<FunctionHandlerBase<TFunction>, TResult>(Func<FunctionHandlerBase<TFunction>, TResult>, Action<Exception>)
  nameWithType: TryCatchExtensions.TryCatch<FunctionHandlerBase<TFunction>, TResult>(Func<FunctionHandlerBase<TFunction>, TResult>, Action<Exception>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>, TResult>(System.Func<Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>, TResult>, System.Action<System.Exception>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of FunctionHandlerBase(Of TFunction), TResult)(Func(Of FunctionHandlerBase(Of TFunction), TResult), Action(Of Exception))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction), TResult)(System.Func(Of Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction), TResult), System.Action(Of System.Exception))
  name.vb: TryCatch(Of FunctionHandlerBase(Of TFunction), TResult)(Func(Of FunctionHandlerBase(Of TFunction), TResult), Action(Of Exception))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{``0,``1},System.Action{System.Exception})
    name: TryCatch<FunctionHandlerBase<TFunction>, TResult>
    nameWithType: TryCatchExtensions.TryCatch<FunctionHandlerBase<TFunction>, TResult>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1
    name: FunctionHandlerBase
    nameWithType: FunctionHandlerBase
    fullName: Hybrid.Authorization.Functions.FunctionHandlerBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{``0,``1},System.Action{System.Exception})
    name: TryCatch(Of FunctionHandlerBase(Of TFunction), TResult)
    nameWithType: TryCatchExtensions.TryCatch(Of FunctionHandlerBase(Of TFunction), TResult)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction), TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1
    name: FunctionHandlerBase
    nameWithType: FunctionHandlerBase
    fullName: Hybrid.Authorization.Functions.FunctionHandlerBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1.Hybrid.Extensions.TryCatchExtensions.TryFinally``1(System.Action{Hybrid.Authorization.Functions.FunctionHandlerBase{{TFunction}}},System.Action{Hybrid.Authorization.Functions.FunctionHandlerBase{{TFunction}}})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
  parent: Hybrid.Extensions.TryCatchExtensions
  definition: Hybrid.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
  name: TryFinally<FunctionHandlerBase<TFunction>>(Action<FunctionHandlerBase<TFunction>>, Action<FunctionHandlerBase<TFunction>>)
  nameWithType: TryCatchExtensions.TryFinally<FunctionHandlerBase<TFunction>>(Action<FunctionHandlerBase<TFunction>>, Action<FunctionHandlerBase<TFunction>>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryFinally<Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>>(System.Action<Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>>, System.Action<Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>>)
  nameWithType.vb: TryCatchExtensions.TryFinally(Of FunctionHandlerBase(Of TFunction))(Action(Of FunctionHandlerBase(Of TFunction)), Action(Of FunctionHandlerBase(Of TFunction)))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryFinally(Of Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction))(System.Action(Of Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction)), System.Action(Of Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction)))
  name.vb: TryFinally(Of FunctionHandlerBase(Of TFunction))(Action(Of FunctionHandlerBase(Of TFunction)), Action(Of FunctionHandlerBase(Of TFunction)))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryFinally``1(System.Action{``0},System.Action{``0})
    name: TryFinally<FunctionHandlerBase<TFunction>>
    nameWithType: TryCatchExtensions.TryFinally<FunctionHandlerBase<TFunction>>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryFinally<Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1
    name: FunctionHandlerBase
    nameWithType: FunctionHandlerBase
    fullName: Hybrid.Authorization.Functions.FunctionHandlerBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1
    name: FunctionHandlerBase
    nameWithType: FunctionHandlerBase
    fullName: Hybrid.Authorization.Functions.FunctionHandlerBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryFinally``1(System.Action{``0},System.Action{``0})
    name: TryFinally(Of FunctionHandlerBase(Of TFunction))
    nameWithType: TryCatchExtensions.TryFinally(Of FunctionHandlerBase(Of TFunction))
    fullName: Hybrid.Extensions.TryCatchExtensions.TryFinally(Of Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction))
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1
    name: FunctionHandlerBase
    nameWithType: FunctionHandlerBase
    fullName: Hybrid.Authorization.Functions.FunctionHandlerBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1
    name: FunctionHandlerBase
    nameWithType: FunctionHandlerBase
    fullName: Hybrid.Authorization.Functions.FunctionHandlerBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Json.JsonExtensions.ToJsonString(System.Boolean,System.Boolean)
  commentId: M:Hybrid.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
  parent: Hybrid.Json.JsonExtensions
  definition: Hybrid.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
  name: ToJsonString(Boolean, Boolean)
  nameWithType: JsonExtensions.ToJsonString(Boolean, Boolean)
  fullName: Hybrid.Json.JsonExtensions.ToJsonString(System.Boolean, System.Boolean)
  spec.csharp:
  - uid: Hybrid.Json.JsonExtensions.ToJsonString(System.Boolean,System.Boolean)
    name: ToJsonString
    nameWithType: JsonExtensions.ToJsonString
    fullName: Hybrid.Json.JsonExtensions.ToJsonString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Json.JsonExtensions.ToJsonString(System.Boolean,System.Boolean)
    name: ToJsonString
    nameWithType: JsonExtensions.ToJsonString
    fullName: Hybrid.Json.JsonExtensions.ToJsonString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Mapping.MapperExtensions.MapTo``1
  commentId: M:Hybrid.Mapping.MapperExtensions.MapTo``1(System.Object)
  parent: Hybrid.Mapping.MapperExtensions
  definition: Hybrid.Mapping.MapperExtensions.MapTo``1(System.Object)
  name: MapTo<TTarget>()
  nameWithType: MapperExtensions.MapTo<TTarget>()
  fullName: Hybrid.Mapping.MapperExtensions.MapTo<TTarget>()
  nameWithType.vb: MapperExtensions.MapTo(Of TTarget)()
  fullName.vb: Hybrid.Mapping.MapperExtensions.MapTo(Of TTarget)()
  name.vb: MapTo(Of TTarget)()
  spec.csharp:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``1
    name: MapTo<TTarget>
    nameWithType: MapperExtensions.MapTo<TTarget>
    fullName: Hybrid.Mapping.MapperExtensions.MapTo<TTarget>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``1
    name: MapTo(Of TTarget)
    nameWithType: MapperExtensions.MapTo(Of TTarget)
    fullName: Hybrid.Mapping.MapperExtensions.MapTo(Of TTarget)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1.Hybrid.Mapping.MapperExtensions.MapTo``2({TTarget})
  commentId: M:Hybrid.Mapping.MapperExtensions.MapTo``2(``0,``1)
  parent: Hybrid.Mapping.MapperExtensions
  definition: Hybrid.Mapping.MapperExtensions.MapTo``2(``0,``1)
  name: MapTo<FunctionHandlerBase<TFunction>, TTarget>(TTarget)
  nameWithType: MapperExtensions.MapTo<FunctionHandlerBase<TFunction>, TTarget>(TTarget)
  fullName: Hybrid.Mapping.MapperExtensions.MapTo<Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>, TTarget>(TTarget)
  nameWithType.vb: MapperExtensions.MapTo(Of FunctionHandlerBase(Of TFunction), TTarget)(TTarget)
  fullName.vb: Hybrid.Mapping.MapperExtensions.MapTo(Of Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction), TTarget)(TTarget)
  name.vb: MapTo(Of FunctionHandlerBase(Of TFunction), TTarget)(TTarget)
  spec.csharp:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``2(``1)
    name: MapTo<FunctionHandlerBase<TFunction>, TTarget>
    nameWithType: MapperExtensions.MapTo<FunctionHandlerBase<TFunction>, TTarget>
    fullName: Hybrid.Mapping.MapperExtensions.MapTo<Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>, TTarget>
  - name: (
    nameWithType: (
    fullName: (
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``2(``1)
    name: MapTo(Of FunctionHandlerBase(Of TFunction), TTarget)
    nameWithType: MapperExtensions.MapTo(Of FunctionHandlerBase(Of TFunction), TTarget)
    fullName: Hybrid.Mapping.MapperExtensions.MapTo(Of Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction), TTarget)
  - name: (
    nameWithType: (
    fullName: (
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Reflection.LockExtensions.Locking(System.Action)
  commentId: M:Hybrid.Reflection.LockExtensions.Locking(System.Object,System.Action)
  parent: Hybrid.Reflection.LockExtensions
  definition: Hybrid.Reflection.LockExtensions.Locking(System.Object,System.Action)
  name: Locking(Action)
  nameWithType: LockExtensions.Locking(Action)
  fullName: Hybrid.Reflection.LockExtensions.Locking(System.Action)
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking(System.Action)
    name: Locking
    nameWithType: LockExtensions.Locking
    fullName: Hybrid.Reflection.LockExtensions.Locking
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking(System.Action)
    name: Locking
    nameWithType: LockExtensions.Locking
    fullName: Hybrid.Reflection.LockExtensions.Locking
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1.Hybrid.Reflection.LockExtensions.Locking``1(System.Action{Hybrid.Authorization.Functions.FunctionHandlerBase{{TFunction}}})
  commentId: M:Hybrid.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
  parent: Hybrid.Reflection.LockExtensions
  definition: Hybrid.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
  name: Locking<FunctionHandlerBase<TFunction>>(Action<FunctionHandlerBase<TFunction>>)
  nameWithType: LockExtensions.Locking<FunctionHandlerBase<TFunction>>(Action<FunctionHandlerBase<TFunction>>)
  fullName: Hybrid.Reflection.LockExtensions.Locking<Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>>(System.Action<Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>>)
  nameWithType.vb: LockExtensions.Locking(Of FunctionHandlerBase(Of TFunction))(Action(Of FunctionHandlerBase(Of TFunction)))
  fullName.vb: Hybrid.Reflection.LockExtensions.Locking(Of Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction))(System.Action(Of Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction)))
  name.vb: Locking(Of FunctionHandlerBase(Of TFunction))(Action(Of FunctionHandlerBase(Of TFunction)))
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(System.Action{``0})
    name: Locking<FunctionHandlerBase<TFunction>>
    nameWithType: LockExtensions.Locking<FunctionHandlerBase<TFunction>>
    fullName: Hybrid.Reflection.LockExtensions.Locking<Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1
    name: FunctionHandlerBase
    nameWithType: FunctionHandlerBase
    fullName: Hybrid.Authorization.Functions.FunctionHandlerBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(System.Action{``0})
    name: Locking(Of FunctionHandlerBase(Of TFunction))
    nameWithType: LockExtensions.Locking(Of FunctionHandlerBase(Of TFunction))
    fullName: Hybrid.Reflection.LockExtensions.Locking(Of Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction))
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1
    name: FunctionHandlerBase
    nameWithType: FunctionHandlerBase
    fullName: Hybrid.Authorization.Functions.FunctionHandlerBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Reflection.LockExtensions.Locking``1(System.Func{{TResult}})
  commentId: M:Hybrid.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
  parent: Hybrid.Reflection.LockExtensions
  definition: Hybrid.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
  name: Locking<TResult>(Func<TResult>)
  nameWithType: LockExtensions.Locking<TResult>(Func<TResult>)
  fullName: Hybrid.Reflection.LockExtensions.Locking<TResult>(System.Func<TResult>)
  nameWithType.vb: LockExtensions.Locking(Of TResult)(Func(Of TResult))
  fullName.vb: Hybrid.Reflection.LockExtensions.Locking(Of TResult)(System.Func(Of TResult))
  name.vb: Locking(Of TResult)(Func(Of TResult))
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(System.Func{``0})
    name: Locking<TResult>
    nameWithType: LockExtensions.Locking<TResult>
    fullName: Hybrid.Reflection.LockExtensions.Locking<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(System.Func{``0})
    name: Locking(Of TResult)
    nameWithType: LockExtensions.Locking(Of TResult)
    fullName: Hybrid.Reflection.LockExtensions.Locking(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1.Hybrid.Reflection.LockExtensions.Locking``2(System.Func{Hybrid.Authorization.Functions.FunctionHandlerBase{{TFunction}},{TResult}})
  commentId: M:Hybrid.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
  parent: Hybrid.Reflection.LockExtensions
  definition: Hybrid.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
  name: Locking<FunctionHandlerBase<TFunction>, TResult>(Func<FunctionHandlerBase<TFunction>, TResult>)
  nameWithType: LockExtensions.Locking<FunctionHandlerBase<TFunction>, TResult>(Func<FunctionHandlerBase<TFunction>, TResult>)
  fullName: Hybrid.Reflection.LockExtensions.Locking<Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>, TResult>(System.Func<Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>, TResult>)
  nameWithType.vb: LockExtensions.Locking(Of FunctionHandlerBase(Of TFunction), TResult)(Func(Of FunctionHandlerBase(Of TFunction), TResult))
  fullName.vb: Hybrid.Reflection.LockExtensions.Locking(Of Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction), TResult)(System.Func(Of Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction), TResult))
  name.vb: Locking(Of FunctionHandlerBase(Of TFunction), TResult)(Func(Of FunctionHandlerBase(Of TFunction), TResult))
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking``2(System.Func{``0,``1})
    name: Locking<FunctionHandlerBase<TFunction>, TResult>
    nameWithType: LockExtensions.Locking<FunctionHandlerBase<TFunction>, TResult>
    fullName: Hybrid.Reflection.LockExtensions.Locking<Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1
    name: FunctionHandlerBase
    nameWithType: FunctionHandlerBase
    fullName: Hybrid.Authorization.Functions.FunctionHandlerBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking``2(System.Func{``0,``1})
    name: Locking(Of FunctionHandlerBase(Of TFunction), TResult)
    nameWithType: LockExtensions.Locking(Of FunctionHandlerBase(Of TFunction), TResult)
    fullName: Hybrid.Reflection.LockExtensions.Locking(Of Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction), TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1
    name: FunctionHandlerBase
    nameWithType: FunctionHandlerBase
    fullName: Hybrid.Authorization.Functions.FunctionHandlerBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1.Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2
  commentId: M:Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2(``0)
  parent: Hybrid.Domain.Entities.EntityExtensions
  definition: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2(``0)
  name: CheckICreatedTime<FunctionHandlerBase<TFunction>, TKey>()
  nameWithType: EntityExtensions.CheckICreatedTime<FunctionHandlerBase<TFunction>, TKey>()
  fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime<Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>, TKey>()
  nameWithType.vb: EntityExtensions.CheckICreatedTime(Of FunctionHandlerBase(Of TFunction), TKey)()
  fullName.vb: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime(Of Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction), TKey)()
  name.vb: CheckICreatedTime(Of FunctionHandlerBase(Of TFunction), TKey)()
  spec.csharp:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2
    name: CheckICreatedTime<FunctionHandlerBase<TFunction>, TKey>
    nameWithType: EntityExtensions.CheckICreatedTime<FunctionHandlerBase<TFunction>, TKey>
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime<Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2
    name: CheckICreatedTime(Of FunctionHandlerBase(Of TFunction), TKey)
    nameWithType: EntityExtensions.CheckICreatedTime(Of FunctionHandlerBase(Of TFunction), TKey)
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime(Of Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction), TKey)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1.Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(System.Security.Principal.IPrincipal)
  commentId: M:Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
  parent: Hybrid.Domain.Entities.EntityExtensions
  definition: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
  name: CheckICreationAudited<FunctionHandlerBase<TFunction>, TKey, TUserKey>(IPrincipal)
  nameWithType: EntityExtensions.CheckICreationAudited<FunctionHandlerBase<TFunction>, TKey, TUserKey>(IPrincipal)
  fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited<Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>, TKey, TUserKey>(System.Security.Principal.IPrincipal)
  nameWithType.vb: EntityExtensions.CheckICreationAudited(Of FunctionHandlerBase(Of TFunction), TKey, TUserKey)(IPrincipal)
  fullName.vb: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited(Of Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction), TKey, TUserKey)(System.Security.Principal.IPrincipal)
  name.vb: CheckICreationAudited(Of FunctionHandlerBase(Of TFunction), TKey, TUserKey)(IPrincipal)
  spec.csharp:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(System.Security.Principal.IPrincipal)
    name: CheckICreationAudited<FunctionHandlerBase<TFunction>, TKey, TUserKey>
    nameWithType: EntityExtensions.CheckICreationAudited<FunctionHandlerBase<TFunction>, TKey, TUserKey>
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited<Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>, TKey, TUserKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(System.Security.Principal.IPrincipal)
    name: CheckICreationAudited(Of FunctionHandlerBase(Of TFunction), TKey, TUserKey)
    nameWithType: EntityExtensions.CheckICreationAudited(Of FunctionHandlerBase(Of TFunction), TKey, TUserKey)
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited(Of Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction), TKey, TUserKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1.Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(System.Security.Principal.IPrincipal)
  commentId: M:Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
  parent: Hybrid.Domain.Entities.EntityExtensions
  definition: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
  name: CheckIUpdateAudited<FunctionHandlerBase<TFunction>, TKey, TUserKey>(IPrincipal)
  nameWithType: EntityExtensions.CheckIUpdateAudited<FunctionHandlerBase<TFunction>, TKey, TUserKey>(IPrincipal)
  fullName: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited<Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>, TKey, TUserKey>(System.Security.Principal.IPrincipal)
  nameWithType.vb: EntityExtensions.CheckIUpdateAudited(Of FunctionHandlerBase(Of TFunction), TKey, TUserKey)(IPrincipal)
  fullName.vb: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited(Of Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction), TKey, TUserKey)(System.Security.Principal.IPrincipal)
  name.vb: CheckIUpdateAudited(Of FunctionHandlerBase(Of TFunction), TKey, TUserKey)(IPrincipal)
  spec.csharp:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(System.Security.Principal.IPrincipal)
    name: CheckIUpdateAudited<FunctionHandlerBase<TFunction>, TKey, TUserKey>
    nameWithType: EntityExtensions.CheckIUpdateAudited<FunctionHandlerBase<TFunction>, TKey, TUserKey>
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited<Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>, TKey, TUserKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(System.Security.Principal.IPrincipal)
    name: CheckIUpdateAudited(Of FunctionHandlerBase(Of TFunction), TKey, TUserKey)
    nameWithType: EntityExtensions.CheckIUpdateAudited(Of FunctionHandlerBase(Of TFunction), TKey, TUserKey)
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited(Of Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction), TKey, TUserKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: OSharp.Entity.EntityExtensions.CheckICreatedTime``2(``0)
  commentId: M:OSharp.Entity.EntityExtensions.CheckICreatedTime``2(``0)
  name: CheckICreatedTime<TEntity, TKey>(TEntity)
  nameWithType: EntityExtensions.CheckICreatedTime<TEntity, TKey>(TEntity)
  fullName: OSharp.Entity.EntityExtensions.CheckICreatedTime<TEntity, TKey>(TEntity)
  nameWithType.vb: EntityExtensions.CheckICreatedTime(Of TEntity, TKey)(TEntity)
  fullName.vb: OSharp.Entity.EntityExtensions.CheckICreatedTime(Of TEntity, TKey)(TEntity)
  name.vb: CheckICreatedTime(Of TEntity, TKey)(TEntity)
  spec.csharp:
  - uid: OSharp.Entity.EntityExtensions.CheckICreatedTime``2(``0)
    name: CheckICreatedTime<TEntity, TKey>
    nameWithType: EntityExtensions.CheckICreatedTime<TEntity, TKey>
    fullName: OSharp.Entity.EntityExtensions.CheckICreatedTime<TEntity, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Entity.EntityExtensions.CheckICreatedTime``2(``0)
    name: CheckICreatedTime(Of TEntity, TKey)
    nameWithType: EntityExtensions.CheckICreatedTime(Of TEntity, TKey)
    fullName: OSharp.Entity.EntityExtensions.CheckICreatedTime(Of TEntity, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Entity.EntityExtensions
  commentId: T:OSharp.Entity.EntityExtensions
  parent: OSharp.Entity
  name: EntityExtensions
  nameWithType: EntityExtensions
  fullName: OSharp.Entity.EntityExtensions
- uid: OSharp.Entity.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
  commentId: M:OSharp.Entity.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
  isExternal: true
  name: CheckICreationAudited<TEntity, TKey, TUserKey>(TEntity, IPrincipal)
  nameWithType: EntityExtensions.CheckICreationAudited<TEntity, TKey, TUserKey>(TEntity, IPrincipal)
  fullName: OSharp.Entity.EntityExtensions.CheckICreationAudited<TEntity, TKey, TUserKey>(TEntity, System.Security.Principal.IPrincipal)
  nameWithType.vb: EntityExtensions.CheckICreationAudited(Of TEntity, TKey, TUserKey)(TEntity, IPrincipal)
  fullName.vb: OSharp.Entity.EntityExtensions.CheckICreationAudited(Of TEntity, TKey, TUserKey)(TEntity, System.Security.Principal.IPrincipal)
  name.vb: CheckICreationAudited(Of TEntity, TKey, TUserKey)(TEntity, IPrincipal)
  spec.csharp:
  - uid: OSharp.Entity.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
    name: CheckICreationAudited<TEntity, TKey, TUserKey>
    nameWithType: EntityExtensions.CheckICreationAudited<TEntity, TKey, TUserKey>
    fullName: OSharp.Entity.EntityExtensions.CheckICreationAudited<TEntity, TKey, TUserKey>
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Entity.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
    name: CheckICreationAudited(Of TEntity, TKey, TUserKey)
    nameWithType: EntityExtensions.CheckICreationAudited(Of TEntity, TKey, TUserKey)
    fullName: OSharp.Entity.EntityExtensions.CheckICreationAudited(Of TEntity, TKey, TUserKey)
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Entity.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
  commentId: M:OSharp.Entity.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
  isExternal: true
  name: CheckIUpdateAudited<TEntity, TKey, TUserKey>(TEntity, IPrincipal)
  nameWithType: EntityExtensions.CheckIUpdateAudited<TEntity, TKey, TUserKey>(TEntity, IPrincipal)
  fullName: OSharp.Entity.EntityExtensions.CheckIUpdateAudited<TEntity, TKey, TUserKey>(TEntity, System.Security.Principal.IPrincipal)
  nameWithType.vb: EntityExtensions.CheckIUpdateAudited(Of TEntity, TKey, TUserKey)(TEntity, IPrincipal)
  fullName.vb: OSharp.Entity.EntityExtensions.CheckIUpdateAudited(Of TEntity, TKey, TUserKey)(TEntity, System.Security.Principal.IPrincipal)
  name.vb: CheckIUpdateAudited(Of TEntity, TKey, TUserKey)(TEntity, IPrincipal)
  spec.csharp:
  - uid: OSharp.Entity.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
    name: CheckIUpdateAudited<TEntity, TKey, TUserKey>
    nameWithType: EntityExtensions.CheckIUpdateAudited<TEntity, TKey, TUserKey>
    fullName: OSharp.Entity.EntityExtensions.CheckIUpdateAudited<TEntity, TKey, TUserKey>
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Entity.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
    name: CheckIUpdateAudited(Of TEntity, TKey, TUserKey)
    nameWithType: EntityExtensions.CheckIUpdateAudited(Of TEntity, TKey, TUserKey)
    fullName: OSharp.Entity.EntityExtensions.CheckIUpdateAudited(Of TEntity, TKey, TUserKey)
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
  commentId: M:OSharp.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
  isExternal: true
  name: CastTo(Object, Type)
  nameWithType: ObjectExtensions.CastTo(Object, Type)
  fullName: OSharp.Extensions.ObjectExtensions.CastTo(System.Object, System.Type)
  spec.csharp:
  - uid: OSharp.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
    name: CastTo
    nameWithType: ObjectExtensions.CastTo
    fullName: OSharp.Extensions.ObjectExtensions.CastTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
    name: CastTo
    nameWithType: ObjectExtensions.CastTo
    fullName: OSharp.Extensions.ObjectExtensions.CastTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Extensions.ObjectExtensions
  commentId: T:OSharp.Extensions.ObjectExtensions
  parent: OSharp.Extensions
  name: ObjectExtensions
  nameWithType: ObjectExtensions
  fullName: OSharp.Extensions.ObjectExtensions
- uid: OSharp.Extensions.ObjectExtensions.CastTo``1(System.Object)
  commentId: M:OSharp.Extensions.ObjectExtensions.CastTo``1(System.Object)
  isExternal: true
  name: CastTo<T>(Object)
  nameWithType: ObjectExtensions.CastTo<T>(Object)
  fullName: OSharp.Extensions.ObjectExtensions.CastTo<T>(System.Object)
  nameWithType.vb: ObjectExtensions.CastTo(Of T)(Object)
  fullName.vb: OSharp.Extensions.ObjectExtensions.CastTo(Of T)(System.Object)
  name.vb: CastTo(Of T)(Object)
  spec.csharp:
  - uid: OSharp.Extensions.ObjectExtensions.CastTo``1(System.Object)
    name: CastTo<T>
    nameWithType: ObjectExtensions.CastTo<T>
    fullName: OSharp.Extensions.ObjectExtensions.CastTo<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ObjectExtensions.CastTo``1(System.Object)
    name: CastTo(Of T)
    nameWithType: ObjectExtensions.CastTo(Of T)
    fullName: OSharp.Extensions.ObjectExtensions.CastTo(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
  commentId: M:OSharp.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
  isExternal: true
  name: CastTo<T>(Object, T)
  nameWithType: ObjectExtensions.CastTo<T>(Object, T)
  fullName: OSharp.Extensions.ObjectExtensions.CastTo<T>(System.Object, T)
  nameWithType.vb: ObjectExtensions.CastTo(Of T)(Object, T)
  fullName.vb: OSharp.Extensions.ObjectExtensions.CastTo(Of T)(System.Object, T)
  name.vb: CastTo(Of T)(Object, T)
  spec.csharp:
  - uid: OSharp.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
    name: CastTo<T>
    nameWithType: ObjectExtensions.CastTo<T>
    fullName: OSharp.Extensions.ObjectExtensions.CastTo<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
    name: CastTo(Of T)
    nameWithType: ObjectExtensions.CastTo(Of T)
    fullName: OSharp.Extensions.ObjectExtensions.CastTo(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
  commentId: M:OSharp.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
  name: IsIn<T>(T, T[])
  nameWithType: ObjectExtensions.IsIn<T>(T, T[])
  fullName: OSharp.Extensions.ObjectExtensions.IsIn<T>(T, T[])
  nameWithType.vb: ObjectExtensions.IsIn(Of T)(T, T())
  fullName.vb: OSharp.Extensions.ObjectExtensions.IsIn(Of T)(T, T())
  name.vb: IsIn(Of T)(T, T())
  spec.csharp:
  - uid: OSharp.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
    name: IsIn<T>
    nameWithType: ObjectExtensions.IsIn<T>
    fullName: OSharp.Extensions.ObjectExtensions.IsIn<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
    name: IsIn(Of T)
    nameWithType: ObjectExtensions.IsIn(Of T)
    fullName: OSharp.Extensions.ObjectExtensions.IsIn(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Extensions.ObjectExtensions.ToDynamic(System.Object)
  commentId: M:OSharp.Extensions.ObjectExtensions.ToDynamic(System.Object)
  isExternal: true
  name: ToDynamic(Object)
  nameWithType: ObjectExtensions.ToDynamic(Object)
  fullName: OSharp.Extensions.ObjectExtensions.ToDynamic(System.Object)
  spec.csharp:
  - uid: OSharp.Extensions.ObjectExtensions.ToDynamic(System.Object)
    name: ToDynamic
    nameWithType: ObjectExtensions.ToDynamic
    fullName: OSharp.Extensions.ObjectExtensions.ToDynamic
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ObjectExtensions.ToDynamic(System.Object)
    name: ToDynamic
    nameWithType: ObjectExtensions.ToDynamic
    fullName: OSharp.Extensions.ObjectExtensions.ToDynamic
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Extensions.ObjectExtensions.DeepClone``1(``0)
  commentId: M:OSharp.Extensions.ObjectExtensions.DeepClone``1(``0)
  name: DeepClone<T>(T)
  nameWithType: ObjectExtensions.DeepClone<T>(T)
  fullName: OSharp.Extensions.ObjectExtensions.DeepClone<T>(T)
  nameWithType.vb: ObjectExtensions.DeepClone(Of T)(T)
  fullName.vb: OSharp.Extensions.ObjectExtensions.DeepClone(Of T)(T)
  name.vb: DeepClone(Of T)(T)
  spec.csharp:
  - uid: OSharp.Extensions.ObjectExtensions.DeepClone``1(``0)
    name: DeepClone<T>
    nameWithType: ObjectExtensions.DeepClone<T>
    fullName: OSharp.Extensions.ObjectExtensions.DeepClone<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ObjectExtensions.DeepClone``1(``0)
    name: DeepClone(Of T)
    nameWithType: ObjectExtensions.DeepClone(Of T)
    fullName: OSharp.Extensions.ObjectExtensions.DeepClone(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
  commentId: M:OSharp.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
  isExternal: true
  name: Required<T>(T, Func<T, Boolean>, String)
  nameWithType: ParameterCheckExtensions.Required<T>(T, Func<T, Boolean>, String)
  fullName: OSharp.Extensions.ParameterCheckExtensions.Required<T>(T, System.Func<T, System.Boolean>, System.String)
  nameWithType.vb: ParameterCheckExtensions.Required(Of T)(T, Func(Of T, Boolean), String)
  fullName.vb: OSharp.Extensions.ParameterCheckExtensions.Required(Of T)(T, System.Func(Of T, System.Boolean), System.String)
  name.vb: Required(Of T)(T, Func(Of T, Boolean), String)
  spec.csharp:
  - uid: OSharp.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
    name: Required<T>
    nameWithType: ParameterCheckExtensions.Required<T>
    fullName: OSharp.Extensions.ParameterCheckExtensions.Required<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
    name: Required(Of T)
    nameWithType: ParameterCheckExtensions.Required(Of T)
    fullName: OSharp.Extensions.ParameterCheckExtensions.Required(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Extensions.ParameterCheckExtensions
  commentId: T:OSharp.Extensions.ParameterCheckExtensions
  parent: OSharp.Extensions
  name: ParameterCheckExtensions
  nameWithType: ParameterCheckExtensions
  fullName: OSharp.Extensions.ParameterCheckExtensions
- uid: OSharp.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
  commentId: M:OSharp.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
  isExternal: true
  name: Required<T, TException>(T, Func<T, Boolean>, String)
  nameWithType: ParameterCheckExtensions.Required<T, TException>(T, Func<T, Boolean>, String)
  fullName: OSharp.Extensions.ParameterCheckExtensions.Required<T, TException>(T, System.Func<T, System.Boolean>, System.String)
  nameWithType.vb: ParameterCheckExtensions.Required(Of T, TException)(T, Func(Of T, Boolean), String)
  fullName.vb: OSharp.Extensions.ParameterCheckExtensions.Required(Of T, TException)(T, System.Func(Of T, System.Boolean), System.String)
  name.vb: Required(Of T, TException)(T, Func(Of T, Boolean), String)
  spec.csharp:
  - uid: OSharp.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
    name: Required<T, TException>
    nameWithType: ParameterCheckExtensions.Required<T, TException>
    fullName: OSharp.Extensions.ParameterCheckExtensions.Required<T, TException>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
    name: Required(Of T, TException)
    nameWithType: ParameterCheckExtensions.Required(Of T, TException)
    fullName: OSharp.Extensions.ParameterCheckExtensions.Required(Of T, TException)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
  commentId: M:OSharp.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
  isExternal: true
  name: CheckNotNull<T>(T, String)
  nameWithType: ParameterCheckExtensions.CheckNotNull<T>(T, String)
  fullName: OSharp.Extensions.ParameterCheckExtensions.CheckNotNull<T>(T, System.String)
  nameWithType.vb: ParameterCheckExtensions.CheckNotNull(Of T)(T, String)
  fullName.vb: OSharp.Extensions.ParameterCheckExtensions.CheckNotNull(Of T)(T, System.String)
  name.vb: CheckNotNull(Of T)(T, String)
  spec.csharp:
  - uid: OSharp.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
    name: CheckNotNull<T>
    nameWithType: ParameterCheckExtensions.CheckNotNull<T>
    fullName: OSharp.Extensions.ParameterCheckExtensions.CheckNotNull<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
    name: CheckNotNull(Of T)
    nameWithType: ParameterCheckExtensions.CheckNotNull(Of T)
    fullName: OSharp.Extensions.ParameterCheckExtensions.CheckNotNull(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
  commentId: M:OSharp.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
  isExternal: true
  name: TryCatch<T>(T, Action<T>, Action<Exception>, Action<T>)
  nameWithType: TryCatchExtensions.TryCatch<T>(T, Action<T>, Action<Exception>, Action<T>)
  fullName: OSharp.Extensions.TryCatchExtensions.TryCatch<T>(T, System.Action<T>, System.Action<System.Exception>, System.Action<T>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of T)(T, Action(Of T), Action(Of Exception), Action(Of T))
  fullName.vb: OSharp.Extensions.TryCatchExtensions.TryCatch(Of T)(T, System.Action(Of T), System.Action(Of System.Exception), System.Action(Of T))
  name.vb: TryCatch(Of T)(T, Action(Of T), Action(Of Exception), Action(Of T))
  spec.csharp:
  - uid: OSharp.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
    name: TryCatch<T>
    nameWithType: TryCatchExtensions.TryCatch<T>
    fullName: OSharp.Extensions.TryCatchExtensions.TryCatch<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
    name: TryCatch(Of T)
    nameWithType: TryCatchExtensions.TryCatch(Of T)
    fullName: OSharp.Extensions.TryCatchExtensions.TryCatch(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Extensions.TryCatchExtensions
  commentId: T:OSharp.Extensions.TryCatchExtensions
  parent: OSharp.Extensions
  name: TryCatchExtensions
  nameWithType: TryCatchExtensions
  fullName: OSharp.Extensions.TryCatchExtensions
- uid: OSharp.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
  commentId: M:OSharp.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
  isExternal: true
  name: TryCatch<T>(T, Action<T>, Action<Exception>)
  nameWithType: TryCatchExtensions.TryCatch<T>(T, Action<T>, Action<Exception>)
  fullName: OSharp.Extensions.TryCatchExtensions.TryCatch<T>(T, System.Action<T>, System.Action<System.Exception>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of T)(T, Action(Of T), Action(Of Exception))
  fullName.vb: OSharp.Extensions.TryCatchExtensions.TryCatch(Of T)(T, System.Action(Of T), System.Action(Of System.Exception))
  name.vb: TryCatch(Of T)(T, Action(Of T), Action(Of Exception))
  spec.csharp:
  - uid: OSharp.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
    name: TryCatch<T>
    nameWithType: TryCatchExtensions.TryCatch<T>
    fullName: OSharp.Extensions.TryCatchExtensions.TryCatch<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
    name: TryCatch(Of T)
    nameWithType: TryCatchExtensions.TryCatch(Of T)
    fullName: OSharp.Extensions.TryCatchExtensions.TryCatch(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
  commentId: M:OSharp.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
  isExternal: true
  name: TryCatch<T, TResult>(T, Func<T, TResult>, Action<Exception>, Action<T>)
  nameWithType: TryCatchExtensions.TryCatch<T, TResult>(T, Func<T, TResult>, Action<Exception>, Action<T>)
  fullName: OSharp.Extensions.TryCatchExtensions.TryCatch<T, TResult>(T, System.Func<T, TResult>, System.Action<System.Exception>, System.Action<T>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of T, TResult)(T, Func(Of T, TResult), Action(Of Exception), Action(Of T))
  fullName.vb: OSharp.Extensions.TryCatchExtensions.TryCatch(Of T, TResult)(T, System.Func(Of T, TResult), System.Action(Of System.Exception), System.Action(Of T))
  name.vb: TryCatch(Of T, TResult)(T, Func(Of T, TResult), Action(Of Exception), Action(Of T))
  spec.csharp:
  - uid: OSharp.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
    name: TryCatch<T, TResult>
    nameWithType: TryCatchExtensions.TryCatch<T, TResult>
    fullName: OSharp.Extensions.TryCatchExtensions.TryCatch<T, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
    name: TryCatch(Of T, TResult)
    nameWithType: TryCatchExtensions.TryCatch(Of T, TResult)
    fullName: OSharp.Extensions.TryCatchExtensions.TryCatch(Of T, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
  commentId: M:OSharp.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
  isExternal: true
  name: TryCatch<T, TResult>(T, Func<T, TResult>, Action<Exception>)
  nameWithType: TryCatchExtensions.TryCatch<T, TResult>(T, Func<T, TResult>, Action<Exception>)
  fullName: OSharp.Extensions.TryCatchExtensions.TryCatch<T, TResult>(T, System.Func<T, TResult>, System.Action<System.Exception>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of T, TResult)(T, Func(Of T, TResult), Action(Of Exception))
  fullName.vb: OSharp.Extensions.TryCatchExtensions.TryCatch(Of T, TResult)(T, System.Func(Of T, TResult), System.Action(Of System.Exception))
  name.vb: TryCatch(Of T, TResult)(T, Func(Of T, TResult), Action(Of Exception))
  spec.csharp:
  - uid: OSharp.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
    name: TryCatch<T, TResult>
    nameWithType: TryCatchExtensions.TryCatch<T, TResult>
    fullName: OSharp.Extensions.TryCatchExtensions.TryCatch<T, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
    name: TryCatch(Of T, TResult)
    nameWithType: TryCatchExtensions.TryCatch(Of T, TResult)
    fullName: OSharp.Extensions.TryCatchExtensions.TryCatch(Of T, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
  commentId: M:OSharp.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
  isExternal: true
  name: TryFinally<T>(T, Action<T>, Action<T>)
  nameWithType: TryCatchExtensions.TryFinally<T>(T, Action<T>, Action<T>)
  fullName: OSharp.Extensions.TryCatchExtensions.TryFinally<T>(T, System.Action<T>, System.Action<T>)
  nameWithType.vb: TryCatchExtensions.TryFinally(Of T)(T, Action(Of T), Action(Of T))
  fullName.vb: OSharp.Extensions.TryCatchExtensions.TryFinally(Of T)(T, System.Action(Of T), System.Action(Of T))
  name.vb: TryFinally(Of T)(T, Action(Of T), Action(Of T))
  spec.csharp:
  - uid: OSharp.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
    name: TryFinally<T>
    nameWithType: TryCatchExtensions.TryFinally<T>
    fullName: OSharp.Extensions.TryCatchExtensions.TryFinally<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
    name: TryFinally(Of T)
    nameWithType: TryCatchExtensions.TryFinally(Of T)
    fullName: OSharp.Extensions.TryCatchExtensions.TryFinally(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
  commentId: M:OSharp.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
  isExternal: true
  name: ToJsonString(Object, Boolean, Boolean)
  nameWithType: JsonExtensions.ToJsonString(Object, Boolean, Boolean)
  fullName: OSharp.Json.JsonExtensions.ToJsonString(System.Object, System.Boolean, System.Boolean)
  spec.csharp:
  - uid: OSharp.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
    name: ToJsonString
    nameWithType: JsonExtensions.ToJsonString
    fullName: OSharp.Json.JsonExtensions.ToJsonString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
    name: ToJsonString
    nameWithType: JsonExtensions.ToJsonString
    fullName: OSharp.Json.JsonExtensions.ToJsonString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Json.JsonExtensions
  commentId: T:OSharp.Json.JsonExtensions
  parent: OSharp.Json
  name: JsonExtensions
  nameWithType: JsonExtensions
  fullName: OSharp.Json.JsonExtensions
- uid: OSharp.Mapping.MapperExtensions.MapTo``1(System.Object)
  commentId: M:OSharp.Mapping.MapperExtensions.MapTo``1(System.Object)
  isExternal: true
  name: MapTo<TTarget>(Object)
  nameWithType: MapperExtensions.MapTo<TTarget>(Object)
  fullName: OSharp.Mapping.MapperExtensions.MapTo<TTarget>(System.Object)
  nameWithType.vb: MapperExtensions.MapTo(Of TTarget)(Object)
  fullName.vb: OSharp.Mapping.MapperExtensions.MapTo(Of TTarget)(System.Object)
  name.vb: MapTo(Of TTarget)(Object)
  spec.csharp:
  - uid: OSharp.Mapping.MapperExtensions.MapTo``1(System.Object)
    name: MapTo<TTarget>
    nameWithType: MapperExtensions.MapTo<TTarget>
    fullName: OSharp.Mapping.MapperExtensions.MapTo<TTarget>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Mapping.MapperExtensions.MapTo``1(System.Object)
    name: MapTo(Of TTarget)
    nameWithType: MapperExtensions.MapTo(Of TTarget)
    fullName: OSharp.Mapping.MapperExtensions.MapTo(Of TTarget)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Mapping.MapperExtensions
  commentId: T:OSharp.Mapping.MapperExtensions
  parent: OSharp.Mapping
  name: MapperExtensions
  nameWithType: MapperExtensions
  fullName: OSharp.Mapping.MapperExtensions
- uid: OSharp.Mapping.MapperExtensions.MapTo``2(``0,``1)
  commentId: M:OSharp.Mapping.MapperExtensions.MapTo``2(``0,``1)
  name: MapTo<TSource, TTarget>(TSource, TTarget)
  nameWithType: MapperExtensions.MapTo<TSource, TTarget>(TSource, TTarget)
  fullName: OSharp.Mapping.MapperExtensions.MapTo<TSource, TTarget>(TSource, TTarget)
  nameWithType.vb: MapperExtensions.MapTo(Of TSource, TTarget)(TSource, TTarget)
  fullName.vb: OSharp.Mapping.MapperExtensions.MapTo(Of TSource, TTarget)(TSource, TTarget)
  name.vb: MapTo(Of TSource, TTarget)(TSource, TTarget)
  spec.csharp:
  - uid: OSharp.Mapping.MapperExtensions.MapTo``2(``0,``1)
    name: MapTo<TSource, TTarget>
    nameWithType: MapperExtensions.MapTo<TSource, TTarget>
    fullName: OSharp.Mapping.MapperExtensions.MapTo<TSource, TTarget>
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Mapping.MapperExtensions.MapTo``2(``0,``1)
    name: MapTo(Of TSource, TTarget)
    nameWithType: MapperExtensions.MapTo(Of TSource, TTarget)
    fullName: OSharp.Mapping.MapperExtensions.MapTo(Of TSource, TTarget)
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Reflection.LockExtensions.Locking(System.Object,System.Action)
  commentId: M:OSharp.Reflection.LockExtensions.Locking(System.Object,System.Action)
  isExternal: true
  name: Locking(Object, Action)
  nameWithType: LockExtensions.Locking(Object, Action)
  fullName: OSharp.Reflection.LockExtensions.Locking(System.Object, System.Action)
  spec.csharp:
  - uid: OSharp.Reflection.LockExtensions.Locking(System.Object,System.Action)
    name: Locking
    nameWithType: LockExtensions.Locking
    fullName: OSharp.Reflection.LockExtensions.Locking
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Reflection.LockExtensions.Locking(System.Object,System.Action)
    name: Locking
    nameWithType: LockExtensions.Locking
    fullName: OSharp.Reflection.LockExtensions.Locking
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Reflection.LockExtensions
  commentId: T:OSharp.Reflection.LockExtensions
  parent: OSharp.Reflection
  name: LockExtensions
  nameWithType: LockExtensions
  fullName: OSharp.Reflection.LockExtensions
- uid: OSharp.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
  commentId: M:OSharp.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
  isExternal: true
  name: Locking<T>(T, Action<T>)
  nameWithType: LockExtensions.Locking<T>(T, Action<T>)
  fullName: OSharp.Reflection.LockExtensions.Locking<T>(T, System.Action<T>)
  nameWithType.vb: LockExtensions.Locking(Of T)(T, Action(Of T))
  fullName.vb: OSharp.Reflection.LockExtensions.Locking(Of T)(T, System.Action(Of T))
  name.vb: Locking(Of T)(T, Action(Of T))
  spec.csharp:
  - uid: OSharp.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
    name: Locking<T>
    nameWithType: LockExtensions.Locking<T>
    fullName: OSharp.Reflection.LockExtensions.Locking<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
    name: Locking(Of T)
    nameWithType: LockExtensions.Locking(Of T)
    fullName: OSharp.Reflection.LockExtensions.Locking(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
  commentId: M:OSharp.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
  isExternal: true
  name: Locking<TResult>(Object, Func<TResult>)
  nameWithType: LockExtensions.Locking<TResult>(Object, Func<TResult>)
  fullName: OSharp.Reflection.LockExtensions.Locking<TResult>(System.Object, System.Func<TResult>)
  nameWithType.vb: LockExtensions.Locking(Of TResult)(Object, Func(Of TResult))
  fullName.vb: OSharp.Reflection.LockExtensions.Locking(Of TResult)(System.Object, System.Func(Of TResult))
  name.vb: Locking(Of TResult)(Object, Func(Of TResult))
  spec.csharp:
  - uid: OSharp.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
    name: Locking<TResult>
    nameWithType: LockExtensions.Locking<TResult>
    fullName: OSharp.Reflection.LockExtensions.Locking<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
    name: Locking(Of TResult)
    nameWithType: LockExtensions.Locking(Of TResult)
    fullName: OSharp.Reflection.LockExtensions.Locking(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
  commentId: M:OSharp.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
  isExternal: true
  name: Locking<TSource, TResult>(TSource, Func<TSource, TResult>)
  nameWithType: LockExtensions.Locking<TSource, TResult>(TSource, Func<TSource, TResult>)
  fullName: OSharp.Reflection.LockExtensions.Locking<TSource, TResult>(TSource, System.Func<TSource, TResult>)
  nameWithType.vb: LockExtensions.Locking(Of TSource, TResult)(TSource, Func(Of TSource, TResult))
  fullName.vb: OSharp.Reflection.LockExtensions.Locking(Of TSource, TResult)(TSource, System.Func(Of TSource, TResult))
  name.vb: Locking(Of TSource, TResult)(TSource, Func(Of TSource, TResult))
  spec.csharp:
  - uid: OSharp.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
    name: Locking<TSource, TResult>
    nameWithType: LockExtensions.Locking<TSource, TResult>
    fullName: OSharp.Reflection.LockExtensions.Locking<TSource, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
    name: Locking(Of TSource, TResult)
    nameWithType: LockExtensions.Locking(Of TSource, TResult)
    fullName: OSharp.Reflection.LockExtensions.Locking(Of TSource, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
  commentId: M:Hybrid.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
  isExternal: true
  name: CastTo(Object, Type)
  nameWithType: ObjectExtensions.CastTo(Object, Type)
  fullName: Hybrid.Extensions.ObjectExtensions.CastTo(System.Object, System.Type)
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
    name: CastTo
    nameWithType: ObjectExtensions.CastTo
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
    name: CastTo
    nameWithType: ObjectExtensions.CastTo
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ObjectExtensions
  commentId: T:Hybrid.Extensions.ObjectExtensions
  parent: Hybrid.Extensions
  name: ObjectExtensions
  nameWithType: ObjectExtensions
  fullName: Hybrid.Extensions.ObjectExtensions
- uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object)
  commentId: M:Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object)
  isExternal: true
  name: CastTo<T>(Object)
  nameWithType: ObjectExtensions.CastTo<T>(Object)
  fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>(System.Object)
  nameWithType.vb: ObjectExtensions.CastTo(Of T)(Object)
  fullName.vb: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)(System.Object)
  name.vb: CastTo(Of T)(Object)
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object)
    name: CastTo<T>
    nameWithType: ObjectExtensions.CastTo<T>
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object)
    name: CastTo(Of T)
    nameWithType: ObjectExtensions.CastTo(Of T)
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
  commentId: M:Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
  isExternal: true
  name: CastTo<T>(Object, T)
  nameWithType: ObjectExtensions.CastTo<T>(Object, T)
  fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>(System.Object, T)
  nameWithType.vb: ObjectExtensions.CastTo(Of T)(Object, T)
  fullName.vb: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)(System.Object, T)
  name.vb: CastTo(Of T)(Object, T)
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
    name: CastTo<T>
    nameWithType: ObjectExtensions.CastTo<T>
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
    name: CastTo(Of T)
    nameWithType: ObjectExtensions.CastTo(Of T)
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
  commentId: M:Hybrid.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
  name: IsIn<T>(T, T[])
  nameWithType: ObjectExtensions.IsIn<T>(T, T[])
  fullName: Hybrid.Extensions.ObjectExtensions.IsIn<T>(T, T[])
  nameWithType.vb: ObjectExtensions.IsIn(Of T)(T, T())
  fullName.vb: Hybrid.Extensions.ObjectExtensions.IsIn(Of T)(T, T())
  name.vb: IsIn(Of T)(T, T())
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
    name: IsIn<T>
    nameWithType: ObjectExtensions.IsIn<T>
    fullName: Hybrid.Extensions.ObjectExtensions.IsIn<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
    name: IsIn(Of T)
    nameWithType: ObjectExtensions.IsIn(Of T)
    fullName: Hybrid.Extensions.ObjectExtensions.IsIn(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ObjectExtensions.ToDynamic(System.Object)
  commentId: M:Hybrid.Extensions.ObjectExtensions.ToDynamic(System.Object)
  isExternal: true
  name: ToDynamic(Object)
  nameWithType: ObjectExtensions.ToDynamic(Object)
  fullName: Hybrid.Extensions.ObjectExtensions.ToDynamic(System.Object)
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.ToDynamic(System.Object)
    name: ToDynamic
    nameWithType: ObjectExtensions.ToDynamic
    fullName: Hybrid.Extensions.ObjectExtensions.ToDynamic
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.ToDynamic(System.Object)
    name: ToDynamic
    nameWithType: ObjectExtensions.ToDynamic
    fullName: Hybrid.Extensions.ObjectExtensions.ToDynamic
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ObjectExtensions.DeepClone``1(``0)
  commentId: M:Hybrid.Extensions.ObjectExtensions.DeepClone``1(``0)
  name: DeepClone<T>(T)
  nameWithType: ObjectExtensions.DeepClone<T>(T)
  fullName: Hybrid.Extensions.ObjectExtensions.DeepClone<T>(T)
  nameWithType.vb: ObjectExtensions.DeepClone(Of T)(T)
  fullName.vb: Hybrid.Extensions.ObjectExtensions.DeepClone(Of T)(T)
  name.vb: DeepClone(Of T)(T)
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.DeepClone``1(``0)
    name: DeepClone<T>
    nameWithType: ObjectExtensions.DeepClone<T>
    fullName: Hybrid.Extensions.ObjectExtensions.DeepClone<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.DeepClone``1(``0)
    name: DeepClone(Of T)
    nameWithType: ObjectExtensions.DeepClone(Of T)
    fullName: Hybrid.Extensions.ObjectExtensions.DeepClone(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
  commentId: M:Hybrid.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
  isExternal: true
  name: Required<T>(T, Func<T, Boolean>, String)
  nameWithType: ParameterCheckExtensions.Required<T>(T, Func<T, Boolean>, String)
  fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<T>(T, System.Func<T, System.Boolean>, System.String)
  nameWithType.vb: ParameterCheckExtensions.Required(Of T)(T, Func(Of T, Boolean), String)
  fullName.vb: Hybrid.Extensions.ParameterCheckExtensions.Required(Of T)(T, System.Func(Of T, System.Boolean), System.String)
  name.vb: Required(Of T)(T, Func(Of T, Boolean), String)
  spec.csharp:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
    name: Required<T>
    nameWithType: ParameterCheckExtensions.Required<T>
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
    name: Required(Of T)
    nameWithType: ParameterCheckExtensions.Required(Of T)
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ParameterCheckExtensions
  commentId: T:Hybrid.Extensions.ParameterCheckExtensions
  parent: Hybrid.Extensions
  name: ParameterCheckExtensions
  nameWithType: ParameterCheckExtensions
  fullName: Hybrid.Extensions.ParameterCheckExtensions
- uid: Hybrid.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
  commentId: M:Hybrid.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
  isExternal: true
  name: Required<T, TException>(T, Func<T, Boolean>, String)
  nameWithType: ParameterCheckExtensions.Required<T, TException>(T, Func<T, Boolean>, String)
  fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<T, TException>(T, System.Func<T, System.Boolean>, System.String)
  nameWithType.vb: ParameterCheckExtensions.Required(Of T, TException)(T, Func(Of T, Boolean), String)
  fullName.vb: Hybrid.Extensions.ParameterCheckExtensions.Required(Of T, TException)(T, System.Func(Of T, System.Boolean), System.String)
  name.vb: Required(Of T, TException)(T, Func(Of T, Boolean), String)
  spec.csharp:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
    name: Required<T, TException>
    nameWithType: ParameterCheckExtensions.Required<T, TException>
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<T, TException>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
    name: Required(Of T, TException)
    nameWithType: ParameterCheckExtensions.Required(Of T, TException)
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required(Of T, TException)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
  commentId: M:Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
  isExternal: true
  name: CheckNotNull<T>(T, String)
  nameWithType: ParameterCheckExtensions.CheckNotNull<T>(T, String)
  fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull<T>(T, System.String)
  nameWithType.vb: ParameterCheckExtensions.CheckNotNull(Of T)(T, String)
  fullName.vb: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull(Of T)(T, System.String)
  name.vb: CheckNotNull(Of T)(T, String)
  spec.csharp:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
    name: CheckNotNull<T>
    nameWithType: ParameterCheckExtensions.CheckNotNull<T>
    fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
    name: CheckNotNull(Of T)
    nameWithType: ParameterCheckExtensions.CheckNotNull(Of T)
    fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
  isExternal: true
  name: TryCatch<T>(T, Action<T>, Action<Exception>, Action<T>)
  nameWithType: TryCatchExtensions.TryCatch<T>(T, Action<T>, Action<Exception>, Action<T>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T>(T, System.Action<T>, System.Action<System.Exception>, System.Action<T>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of T)(T, Action(Of T), Action(Of Exception), Action(Of T))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T)(T, System.Action(Of T), System.Action(Of System.Exception), System.Action(Of T))
  name.vb: TryCatch(Of T)(T, Action(Of T), Action(Of Exception), Action(Of T))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
    name: TryCatch<T>
    nameWithType: TryCatchExtensions.TryCatch<T>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
    name: TryCatch(Of T)
    nameWithType: TryCatchExtensions.TryCatch(Of T)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.TryCatchExtensions
  commentId: T:Hybrid.Extensions.TryCatchExtensions
  parent: Hybrid.Extensions
  name: TryCatchExtensions
  nameWithType: TryCatchExtensions
  fullName: Hybrid.Extensions.TryCatchExtensions
- uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
  isExternal: true
  name: TryCatch<T>(T, Action<T>, Action<Exception>)
  nameWithType: TryCatchExtensions.TryCatch<T>(T, Action<T>, Action<Exception>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T>(T, System.Action<T>, System.Action<System.Exception>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of T)(T, Action(Of T), Action(Of Exception))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T)(T, System.Action(Of T), System.Action(Of System.Exception))
  name.vb: TryCatch(Of T)(T, Action(Of T), Action(Of Exception))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
    name: TryCatch<T>
    nameWithType: TryCatchExtensions.TryCatch<T>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
    name: TryCatch(Of T)
    nameWithType: TryCatchExtensions.TryCatch(Of T)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
  isExternal: true
  name: TryCatch<T, TResult>(T, Func<T, TResult>, Action<Exception>, Action<T>)
  nameWithType: TryCatchExtensions.TryCatch<T, TResult>(T, Func<T, TResult>, Action<Exception>, Action<T>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T, TResult>(T, System.Func<T, TResult>, System.Action<System.Exception>, System.Action<T>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of T, TResult)(T, Func(Of T, TResult), Action(Of Exception), Action(Of T))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T, TResult)(T, System.Func(Of T, TResult), System.Action(Of System.Exception), System.Action(Of T))
  name.vb: TryCatch(Of T, TResult)(T, Func(Of T, TResult), Action(Of Exception), Action(Of T))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
    name: TryCatch<T, TResult>
    nameWithType: TryCatchExtensions.TryCatch<T, TResult>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
    name: TryCatch(Of T, TResult)
    nameWithType: TryCatchExtensions.TryCatch(Of T, TResult)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
  isExternal: true
  name: TryCatch<T, TResult>(T, Func<T, TResult>, Action<Exception>)
  nameWithType: TryCatchExtensions.TryCatch<T, TResult>(T, Func<T, TResult>, Action<Exception>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T, TResult>(T, System.Func<T, TResult>, System.Action<System.Exception>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of T, TResult)(T, Func(Of T, TResult), Action(Of Exception))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T, TResult)(T, System.Func(Of T, TResult), System.Action(Of System.Exception))
  name.vb: TryCatch(Of T, TResult)(T, Func(Of T, TResult), Action(Of Exception))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
    name: TryCatch<T, TResult>
    nameWithType: TryCatchExtensions.TryCatch<T, TResult>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
    name: TryCatch(Of T, TResult)
    nameWithType: TryCatchExtensions.TryCatch(Of T, TResult)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
  isExternal: true
  name: TryFinally<T>(T, Action<T>, Action<T>)
  nameWithType: TryCatchExtensions.TryFinally<T>(T, Action<T>, Action<T>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryFinally<T>(T, System.Action<T>, System.Action<T>)
  nameWithType.vb: TryCatchExtensions.TryFinally(Of T)(T, Action(Of T), Action(Of T))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryFinally(Of T)(T, System.Action(Of T), System.Action(Of T))
  name.vb: TryFinally(Of T)(T, Action(Of T), Action(Of T))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
    name: TryFinally<T>
    nameWithType: TryCatchExtensions.TryFinally<T>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryFinally<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
    name: TryFinally(Of T)
    nameWithType: TryCatchExtensions.TryFinally(Of T)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryFinally(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
  commentId: M:Hybrid.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
  isExternal: true
  name: ToJsonString(Object, Boolean, Boolean)
  nameWithType: JsonExtensions.ToJsonString(Object, Boolean, Boolean)
  fullName: Hybrid.Json.JsonExtensions.ToJsonString(System.Object, System.Boolean, System.Boolean)
  spec.csharp:
  - uid: Hybrid.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
    name: ToJsonString
    nameWithType: JsonExtensions.ToJsonString
    fullName: Hybrid.Json.JsonExtensions.ToJsonString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
    name: ToJsonString
    nameWithType: JsonExtensions.ToJsonString
    fullName: Hybrid.Json.JsonExtensions.ToJsonString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Json.JsonExtensions
  commentId: T:Hybrid.Json.JsonExtensions
  parent: Hybrid.Json
  name: JsonExtensions
  nameWithType: JsonExtensions
  fullName: Hybrid.Json.JsonExtensions
- uid: Hybrid.Mapping.MapperExtensions.MapTo``1(System.Object)
  commentId: M:Hybrid.Mapping.MapperExtensions.MapTo``1(System.Object)
  isExternal: true
  name: MapTo<TTarget>(Object)
  nameWithType: MapperExtensions.MapTo<TTarget>(Object)
  fullName: Hybrid.Mapping.MapperExtensions.MapTo<TTarget>(System.Object)
  nameWithType.vb: MapperExtensions.MapTo(Of TTarget)(Object)
  fullName.vb: Hybrid.Mapping.MapperExtensions.MapTo(Of TTarget)(System.Object)
  name.vb: MapTo(Of TTarget)(Object)
  spec.csharp:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``1(System.Object)
    name: MapTo<TTarget>
    nameWithType: MapperExtensions.MapTo<TTarget>
    fullName: Hybrid.Mapping.MapperExtensions.MapTo<TTarget>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``1(System.Object)
    name: MapTo(Of TTarget)
    nameWithType: MapperExtensions.MapTo(Of TTarget)
    fullName: Hybrid.Mapping.MapperExtensions.MapTo(Of TTarget)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Mapping.MapperExtensions
  commentId: T:Hybrid.Mapping.MapperExtensions
  parent: Hybrid.Mapping
  name: MapperExtensions
  nameWithType: MapperExtensions
  fullName: Hybrid.Mapping.MapperExtensions
- uid: Hybrid.Mapping.MapperExtensions.MapTo``2(``0,``1)
  commentId: M:Hybrid.Mapping.MapperExtensions.MapTo``2(``0,``1)
  name: MapTo<TSource, TTarget>(TSource, TTarget)
  nameWithType: MapperExtensions.MapTo<TSource, TTarget>(TSource, TTarget)
  fullName: Hybrid.Mapping.MapperExtensions.MapTo<TSource, TTarget>(TSource, TTarget)
  nameWithType.vb: MapperExtensions.MapTo(Of TSource, TTarget)(TSource, TTarget)
  fullName.vb: Hybrid.Mapping.MapperExtensions.MapTo(Of TSource, TTarget)(TSource, TTarget)
  name.vb: MapTo(Of TSource, TTarget)(TSource, TTarget)
  spec.csharp:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``2(``0,``1)
    name: MapTo<TSource, TTarget>
    nameWithType: MapperExtensions.MapTo<TSource, TTarget>
    fullName: Hybrid.Mapping.MapperExtensions.MapTo<TSource, TTarget>
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``2(``0,``1)
    name: MapTo(Of TSource, TTarget)
    nameWithType: MapperExtensions.MapTo(Of TSource, TTarget)
    fullName: Hybrid.Mapping.MapperExtensions.MapTo(Of TSource, TTarget)
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Reflection.LockExtensions.Locking(System.Object,System.Action)
  commentId: M:Hybrid.Reflection.LockExtensions.Locking(System.Object,System.Action)
  isExternal: true
  name: Locking(Object, Action)
  nameWithType: LockExtensions.Locking(Object, Action)
  fullName: Hybrid.Reflection.LockExtensions.Locking(System.Object, System.Action)
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking(System.Object,System.Action)
    name: Locking
    nameWithType: LockExtensions.Locking
    fullName: Hybrid.Reflection.LockExtensions.Locking
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking(System.Object,System.Action)
    name: Locking
    nameWithType: LockExtensions.Locking
    fullName: Hybrid.Reflection.LockExtensions.Locking
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Reflection.LockExtensions
  commentId: T:Hybrid.Reflection.LockExtensions
  parent: Hybrid.Reflection
  name: LockExtensions
  nameWithType: LockExtensions
  fullName: Hybrid.Reflection.LockExtensions
- uid: Hybrid.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
  commentId: M:Hybrid.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
  isExternal: true
  name: Locking<T>(T, Action<T>)
  nameWithType: LockExtensions.Locking<T>(T, Action<T>)
  fullName: Hybrid.Reflection.LockExtensions.Locking<T>(T, System.Action<T>)
  nameWithType.vb: LockExtensions.Locking(Of T)(T, Action(Of T))
  fullName.vb: Hybrid.Reflection.LockExtensions.Locking(Of T)(T, System.Action(Of T))
  name.vb: Locking(Of T)(T, Action(Of T))
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
    name: Locking<T>
    nameWithType: LockExtensions.Locking<T>
    fullName: Hybrid.Reflection.LockExtensions.Locking<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
    name: Locking(Of T)
    nameWithType: LockExtensions.Locking(Of T)
    fullName: Hybrid.Reflection.LockExtensions.Locking(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
  commentId: M:Hybrid.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
  isExternal: true
  name: Locking<TResult>(Object, Func<TResult>)
  nameWithType: LockExtensions.Locking<TResult>(Object, Func<TResult>)
  fullName: Hybrid.Reflection.LockExtensions.Locking<TResult>(System.Object, System.Func<TResult>)
  nameWithType.vb: LockExtensions.Locking(Of TResult)(Object, Func(Of TResult))
  fullName.vb: Hybrid.Reflection.LockExtensions.Locking(Of TResult)(System.Object, System.Func(Of TResult))
  name.vb: Locking(Of TResult)(Object, Func(Of TResult))
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
    name: Locking<TResult>
    nameWithType: LockExtensions.Locking<TResult>
    fullName: Hybrid.Reflection.LockExtensions.Locking<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
    name: Locking(Of TResult)
    nameWithType: LockExtensions.Locking(Of TResult)
    fullName: Hybrid.Reflection.LockExtensions.Locking(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
  commentId: M:Hybrid.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
  isExternal: true
  name: Locking<TSource, TResult>(TSource, Func<TSource, TResult>)
  nameWithType: LockExtensions.Locking<TSource, TResult>(TSource, Func<TSource, TResult>)
  fullName: Hybrid.Reflection.LockExtensions.Locking<TSource, TResult>(TSource, System.Func<TSource, TResult>)
  nameWithType.vb: LockExtensions.Locking(Of TSource, TResult)(TSource, Func(Of TSource, TResult))
  fullName.vb: Hybrid.Reflection.LockExtensions.Locking(Of TSource, TResult)(TSource, System.Func(Of TSource, TResult))
  name.vb: Locking(Of TSource, TResult)(TSource, Func(Of TSource, TResult))
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
    name: Locking<TSource, TResult>
    nameWithType: LockExtensions.Locking<TSource, TResult>
    fullName: Hybrid.Reflection.LockExtensions.Locking<TSource, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
    name: Locking(Of TSource, TResult)
    nameWithType: LockExtensions.Locking(Of TSource, TResult)
    fullName: Hybrid.Reflection.LockExtensions.Locking(Of TSource, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2(``0)
  commentId: M:Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2(``0)
  name: CheckICreatedTime<TEntity, TKey>(TEntity)
  nameWithType: EntityExtensions.CheckICreatedTime<TEntity, TKey>(TEntity)
  fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime<TEntity, TKey>(TEntity)
  nameWithType.vb: EntityExtensions.CheckICreatedTime(Of TEntity, TKey)(TEntity)
  fullName.vb: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime(Of TEntity, TKey)(TEntity)
  name.vb: CheckICreatedTime(Of TEntity, TKey)(TEntity)
  spec.csharp:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2(``0)
    name: CheckICreatedTime<TEntity, TKey>
    nameWithType: EntityExtensions.CheckICreatedTime<TEntity, TKey>
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime<TEntity, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2(``0)
    name: CheckICreatedTime(Of TEntity, TKey)
    nameWithType: EntityExtensions.CheckICreatedTime(Of TEntity, TKey)
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime(Of TEntity, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Domain.Entities.EntityExtensions
  commentId: T:Hybrid.Domain.Entities.EntityExtensions
  parent: Hybrid.Domain.Entities
  name: EntityExtensions
  nameWithType: EntityExtensions
  fullName: Hybrid.Domain.Entities.EntityExtensions
- uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
  commentId: M:Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
  isExternal: true
  name: CheckICreationAudited<TEntity, TKey, TUserKey>(TEntity, IPrincipal)
  nameWithType: EntityExtensions.CheckICreationAudited<TEntity, TKey, TUserKey>(TEntity, IPrincipal)
  fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited<TEntity, TKey, TUserKey>(TEntity, System.Security.Principal.IPrincipal)
  nameWithType.vb: EntityExtensions.CheckICreationAudited(Of TEntity, TKey, TUserKey)(TEntity, IPrincipal)
  fullName.vb: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited(Of TEntity, TKey, TUserKey)(TEntity, System.Security.Principal.IPrincipal)
  name.vb: CheckICreationAudited(Of TEntity, TKey, TUserKey)(TEntity, IPrincipal)
  spec.csharp:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
    name: CheckICreationAudited<TEntity, TKey, TUserKey>
    nameWithType: EntityExtensions.CheckICreationAudited<TEntity, TKey, TUserKey>
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited<TEntity, TKey, TUserKey>
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
    name: CheckICreationAudited(Of TEntity, TKey, TUserKey)
    nameWithType: EntityExtensions.CheckICreationAudited(Of TEntity, TKey, TUserKey)
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited(Of TEntity, TKey, TUserKey)
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
  commentId: M:Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
  isExternal: true
  name: CheckIUpdateAudited<TEntity, TKey, TUserKey>(TEntity, IPrincipal)
  nameWithType: EntityExtensions.CheckIUpdateAudited<TEntity, TKey, TUserKey>(TEntity, IPrincipal)
  fullName: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited<TEntity, TKey, TUserKey>(TEntity, System.Security.Principal.IPrincipal)
  nameWithType.vb: EntityExtensions.CheckIUpdateAudited(Of TEntity, TKey, TUserKey)(TEntity, IPrincipal)
  fullName.vb: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited(Of TEntity, TKey, TUserKey)(TEntity, System.Security.Principal.IPrincipal)
  name.vb: CheckIUpdateAudited(Of TEntity, TKey, TUserKey)(TEntity, IPrincipal)
  spec.csharp:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
    name: CheckIUpdateAudited<TEntity, TKey, TUserKey>
    nameWithType: EntityExtensions.CheckIUpdateAudited<TEntity, TKey, TUserKey>
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited<TEntity, TKey, TUserKey>
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
    name: CheckIUpdateAudited(Of TEntity, TKey, TUserKey)
    nameWithType: EntityExtensions.CheckIUpdateAudited(Of TEntity, TKey, TUserKey)
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited(Of TEntity, TKey, TUserKey)
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Entity
  commentId: N:OSharp.Entity
  name: OSharp.Entity
  nameWithType: OSharp.Entity
  fullName: OSharp.Entity
- uid: OSharp.Extensions
  commentId: N:OSharp.Extensions
  name: OSharp.Extensions
  nameWithType: OSharp.Extensions
  fullName: OSharp.Extensions
- uid: OSharp.Json
  commentId: N:OSharp.Json
  name: OSharp.Json
  nameWithType: OSharp.Json
  fullName: OSharp.Json
- uid: OSharp.Mapping
  commentId: N:OSharp.Mapping
  name: OSharp.Mapping
  nameWithType: OSharp.Mapping
  fullName: OSharp.Mapping
- uid: OSharp.Reflection
  commentId: N:OSharp.Reflection
  name: OSharp.Reflection
  nameWithType: OSharp.Reflection
  fullName: OSharp.Reflection
- uid: Hybrid.Extensions
  commentId: N:Hybrid.Extensions
  name: Hybrid.Extensions
  nameWithType: Hybrid.Extensions
  fullName: Hybrid.Extensions
- uid: Hybrid.Json
  commentId: N:Hybrid.Json
  name: Hybrid.Json
  nameWithType: Hybrid.Json
  fullName: Hybrid.Json
- uid: Hybrid.Mapping
  commentId: N:Hybrid.Mapping
  name: Hybrid.Mapping
  nameWithType: Hybrid.Mapping
  fullName: Hybrid.Mapping
- uid: Hybrid.Reflection
  commentId: N:Hybrid.Reflection
  name: Hybrid.Reflection
  nameWithType: Hybrid.Reflection
  fullName: Hybrid.Reflection
- uid: Hybrid.Domain.Entities
  commentId: N:Hybrid.Domain.Entities
  name: Hybrid.Domain.Entities
  nameWithType: Hybrid.Domain.Entities
  fullName: Hybrid.Domain.Entities
- uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1
  commentId: T:Hybrid.Authorization.Functions.FunctionHandlerBase`1
  name: FunctionHandlerBase<TFunction>
  nameWithType: FunctionHandlerBase<TFunction>
  fullName: Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>
  nameWithType.vb: FunctionHandlerBase(Of TFunction)
  fullName.vb: Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction)
  name.vb: FunctionHandlerBase(Of TFunction)
  spec.csharp:
  - uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1
    name: FunctionHandlerBase
    nameWithType: FunctionHandlerBase
    fullName: Hybrid.Authorization.Functions.FunctionHandlerBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1
    name: FunctionHandlerBase
    nameWithType: FunctionHandlerBase
    fullName: Hybrid.Authorization.Functions.FunctionHandlerBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1.#ctor*
  commentId: Overload:Hybrid.Authorization.Functions.FunctionHandlerBase`1.#ctor
  name: FunctionHandlerBase
  nameWithType: FunctionHandlerBase<TFunction>.FunctionHandlerBase
  fullName: Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>.FunctionHandlerBase
  nameWithType.vb: FunctionHandlerBase(Of TFunction).FunctionHandlerBase
  fullName.vb: Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction).FunctionHandlerBase
- uid: System.IServiceProvider
  commentId: T:System.IServiceProvider
  parent: System
  isExternal: true
  name: IServiceProvider
  nameWithType: IServiceProvider
  fullName: System.IServiceProvider
- uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1.Logger*
  commentId: Overload:Hybrid.Authorization.Functions.FunctionHandlerBase`1.Logger
  name: Logger
  nameWithType: FunctionHandlerBase<TFunction>.Logger
  fullName: Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>.Logger
  nameWithType.vb: FunctionHandlerBase(Of TFunction).Logger
  fullName.vb: Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction).Logger
- uid: Microsoft.Extensions.Logging.ILogger
  commentId: T:Microsoft.Extensions.Logging.ILogger
  parent: Microsoft.Extensions.Logging
  isExternal: true
  name: ILogger
  nameWithType: ILogger
  fullName: Microsoft.Extensions.Logging.ILogger
- uid: Microsoft.Extensions.Logging
  commentId: N:Microsoft.Extensions.Logging
  isExternal: true
  name: Microsoft.Extensions.Logging
  nameWithType: Microsoft.Extensions.Logging
  fullName: Microsoft.Extensions.Logging
- uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1.FunctionTypeFinder*
  commentId: Overload:Hybrid.Authorization.Functions.FunctionHandlerBase`1.FunctionTypeFinder
  name: FunctionTypeFinder
  nameWithType: FunctionHandlerBase<TFunction>.FunctionTypeFinder
  fullName: Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>.FunctionTypeFinder
  nameWithType.vb: FunctionHandlerBase(Of TFunction).FunctionTypeFinder
  fullName.vb: Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction).FunctionTypeFinder
- uid: Hybrid.Authorization.Functions.IFunctionHandler.FunctionTypeFinder
  commentId: P:Hybrid.Authorization.Functions.IFunctionHandler.FunctionTypeFinder
  parent: Hybrid.Authorization.Functions.IFunctionHandler
  name: FunctionTypeFinder
  nameWithType: IFunctionHandler.FunctionTypeFinder
  fullName: Hybrid.Authorization.Functions.IFunctionHandler.FunctionTypeFinder
- uid: Hybrid.Authorization.Functions.IFunctionTypeFinder
  commentId: T:Hybrid.Authorization.Functions.IFunctionTypeFinder
  parent: Hybrid.Authorization.Functions
  name: IFunctionTypeFinder
  nameWithType: IFunctionTypeFinder
  fullName: Hybrid.Authorization.Functions.IFunctionTypeFinder
- uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1.MethodInfoFinder*
  commentId: Overload:Hybrid.Authorization.Functions.FunctionHandlerBase`1.MethodInfoFinder
  name: MethodInfoFinder
  nameWithType: FunctionHandlerBase<TFunction>.MethodInfoFinder
  fullName: Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>.MethodInfoFinder
  nameWithType.vb: FunctionHandlerBase(Of TFunction).MethodInfoFinder
  fullName.vb: Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction).MethodInfoFinder
- uid: Hybrid.Authorization.Functions.IFunctionHandler.MethodInfoFinder
  commentId: P:Hybrid.Authorization.Functions.IFunctionHandler.MethodInfoFinder
  parent: Hybrid.Authorization.Functions.IFunctionHandler
  name: MethodInfoFinder
  nameWithType: IFunctionHandler.MethodInfoFinder
  fullName: Hybrid.Authorization.Functions.IFunctionHandler.MethodInfoFinder
- uid: Hybrid.Reflection.IMethodInfoFinder
  commentId: T:Hybrid.Reflection.IMethodInfoFinder
  parent: Hybrid.Reflection
  name: IMethodInfoFinder
  nameWithType: IMethodInfoFinder
  fullName: Hybrid.Reflection.IMethodInfoFinder
- uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1.Initialize*
  commentId: Overload:Hybrid.Authorization.Functions.FunctionHandlerBase`1.Initialize
  name: Initialize
  nameWithType: FunctionHandlerBase<TFunction>.Initialize
  fullName: Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>.Initialize
  nameWithType.vb: FunctionHandlerBase(Of TFunction).Initialize
  fullName.vb: Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction).Initialize
- uid: Hybrid.Authorization.Functions.IFunctionHandler.Initialize
  commentId: M:Hybrid.Authorization.Functions.IFunctionHandler.Initialize
  parent: Hybrid.Authorization.Functions.IFunctionHandler
  name: Initialize()
  nameWithType: IFunctionHandler.Initialize()
  fullName: Hybrid.Authorization.Functions.IFunctionHandler.Initialize()
  spec.csharp:
  - uid: Hybrid.Authorization.Functions.IFunctionHandler.Initialize
    name: Initialize
    nameWithType: IFunctionHandler.Initialize
    fullName: Hybrid.Authorization.Functions.IFunctionHandler.Initialize
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Authorization.Functions.IFunctionHandler.Initialize
    name: Initialize
    nameWithType: IFunctionHandler.Initialize
    fullName: Hybrid.Authorization.Functions.IFunctionHandler.Initialize
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1.GetFunction*
  commentId: Overload:Hybrid.Authorization.Functions.FunctionHandlerBase`1.GetFunction
  name: GetFunction
  nameWithType: FunctionHandlerBase<TFunction>.GetFunction
  fullName: Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>.GetFunction
  nameWithType.vb: FunctionHandlerBase(Of TFunction).GetFunction
  fullName.vb: Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction).GetFunction
- uid: Hybrid.Authorization.Functions.IFunctionHandler.GetFunction(System.String,System.String,System.String)
  commentId: M:Hybrid.Authorization.Functions.IFunctionHandler.GetFunction(System.String,System.String,System.String)
  parent: Hybrid.Authorization.Functions.IFunctionHandler
  isExternal: true
  name: GetFunction(String, String, String)
  nameWithType: IFunctionHandler.GetFunction(String, String, String)
  fullName: Hybrid.Authorization.Functions.IFunctionHandler.GetFunction(System.String, System.String, System.String)
  spec.csharp:
  - uid: Hybrid.Authorization.Functions.IFunctionHandler.GetFunction(System.String,System.String,System.String)
    name: GetFunction
    nameWithType: IFunctionHandler.GetFunction
    fullName: Hybrid.Authorization.Functions.IFunctionHandler.GetFunction
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Authorization.Functions.IFunctionHandler.GetFunction(System.String,System.String,System.String)
    name: GetFunction
    nameWithType: IFunctionHandler.GetFunction
    fullName: Hybrid.Authorization.Functions.IFunctionHandler.GetFunction
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Hybrid.Authorization.Functions.IFunction
  commentId: T:Hybrid.Authorization.Functions.IFunction
  parent: Hybrid.Authorization.Functions
  name: IFunction
  nameWithType: IFunction
  fullName: Hybrid.Authorization.Functions.IFunction
- uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1.RefreshCache*
  commentId: Overload:Hybrid.Authorization.Functions.FunctionHandlerBase`1.RefreshCache
  name: RefreshCache
  nameWithType: FunctionHandlerBase<TFunction>.RefreshCache
  fullName: Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>.RefreshCache
  nameWithType.vb: FunctionHandlerBase(Of TFunction).RefreshCache
  fullName.vb: Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction).RefreshCache
- uid: Hybrid.Authorization.Functions.IFunctionHandler.RefreshCache
  commentId: M:Hybrid.Authorization.Functions.IFunctionHandler.RefreshCache
  parent: Hybrid.Authorization.Functions.IFunctionHandler
  name: RefreshCache()
  nameWithType: IFunctionHandler.RefreshCache()
  fullName: Hybrid.Authorization.Functions.IFunctionHandler.RefreshCache()
  spec.csharp:
  - uid: Hybrid.Authorization.Functions.IFunctionHandler.RefreshCache
    name: RefreshCache
    nameWithType: IFunctionHandler.RefreshCache
    fullName: Hybrid.Authorization.Functions.IFunctionHandler.RefreshCache
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Authorization.Functions.IFunctionHandler.RefreshCache
    name: RefreshCache
    nameWithType: IFunctionHandler.RefreshCache
    fullName: Hybrid.Authorization.Functions.IFunctionHandler.RefreshCache
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1.ClearCache*
  commentId: Overload:Hybrid.Authorization.Functions.FunctionHandlerBase`1.ClearCache
  name: ClearCache
  nameWithType: FunctionHandlerBase<TFunction>.ClearCache
  fullName: Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>.ClearCache
  nameWithType.vb: FunctionHandlerBase(Of TFunction).ClearCache
  fullName.vb: Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction).ClearCache
- uid: Hybrid.Authorization.Functions.IFunctionHandler.ClearCache
  commentId: M:Hybrid.Authorization.Functions.IFunctionHandler.ClearCache
  parent: Hybrid.Authorization.Functions.IFunctionHandler
  name: ClearCache()
  nameWithType: IFunctionHandler.ClearCache()
  fullName: Hybrid.Authorization.Functions.IFunctionHandler.ClearCache()
  spec.csharp:
  - uid: Hybrid.Authorization.Functions.IFunctionHandler.ClearCache
    name: ClearCache
    nameWithType: IFunctionHandler.ClearCache
    fullName: Hybrid.Authorization.Functions.IFunctionHandler.ClearCache
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Authorization.Functions.IFunctionHandler.ClearCache
    name: ClearCache
    nameWithType: IFunctionHandler.ClearCache
    fullName: Hybrid.Authorization.Functions.IFunctionHandler.ClearCache
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1.GetFunctions*
  commentId: Overload:Hybrid.Authorization.Functions.FunctionHandlerBase`1.GetFunctions
  name: GetFunctions
  nameWithType: FunctionHandlerBase<TFunction>.GetFunctions
  fullName: Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>.GetFunctions
  nameWithType.vb: FunctionHandlerBase(Of TFunction).GetFunctions
  fullName.vb: Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction).GetFunctions
- uid: System.Type[]
  isExternal: true
  name: Type[]
  nameWithType: Type[]
  fullName: System.Type[]
  nameWithType.vb: Type()
  fullName.vb: System.Type()
  name.vb: Type()
  spec.csharp:
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: '{TFunction}[]'
  isExternal: true
  name: TFunction[]
  nameWithType: TFunction[]
  fullName: TFunction[]
  nameWithType.vb: TFunction()
  fullName.vb: TFunction()
  name.vb: TFunction()
  spec.csharp:
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: '{TFunction}'
  commentId: '!:TFunction'
  definition: TFunction
  name: TFunction
  nameWithType: TFunction
  fullName: TFunction
- uid: TFunction
  name: TFunction
  nameWithType: TFunction
  fullName: TFunction
- uid: System.Reflection.MethodInfo
  commentId: T:System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: true
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Reflection
  commentId: N:System.Reflection
  isExternal: true
  name: System.Reflection
  nameWithType: System.Reflection
  fullName: System.Reflection
- uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1.HasPickup*
  commentId: Overload:Hybrid.Authorization.Functions.FunctionHandlerBase`1.HasPickup
  name: HasPickup
  nameWithType: FunctionHandlerBase<TFunction>.HasPickup
  fullName: Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>.HasPickup
  nameWithType.vb: FunctionHandlerBase(Of TFunction).HasPickup
  fullName.vb: Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction).HasPickup
- uid: System.Collections.Generic.List{{TFunction}}
  commentId: T:System.Collections.Generic.List{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<TFunction>
  nameWithType: List<TFunction>
  fullName: System.Collections.Generic.List<TFunction>
  nameWithType.vb: List(Of TFunction)
  fullName.vb: System.Collections.Generic.List(Of TFunction)
  name.vb: List(Of TFunction)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.IEnumerable{{TFunction}}
  commentId: T:System.Collections.Generic.IEnumerable{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TFunction>
  nameWithType: IEnumerable<TFunction>
  fullName: System.Collections.Generic.IEnumerable<TFunction>
  nameWithType.vb: IEnumerable(Of TFunction)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TFunction)
  name.vb: IEnumerable(Of TFunction)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1.IsIgnoreMethod*
  commentId: Overload:Hybrid.Authorization.Functions.FunctionHandlerBase`1.IsIgnoreMethod
  name: IsIgnoreMethod
  nameWithType: FunctionHandlerBase<TFunction>.IsIgnoreMethod
  fullName: Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>.IsIgnoreMethod
  nameWithType.vb: FunctionHandlerBase(Of TFunction).IsIgnoreMethod
  fullName.vb: Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction).IsIgnoreMethod
- uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1.SyncToDatabase*
  commentId: Overload:Hybrid.Authorization.Functions.FunctionHandlerBase`1.SyncToDatabase
  name: SyncToDatabase
  nameWithType: FunctionHandlerBase<TFunction>.SyncToDatabase
  fullName: Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>.SyncToDatabase
  nameWithType.vb: FunctionHandlerBase(Of TFunction).SyncToDatabase
  fullName.vb: Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction).SyncToDatabase
- uid: Hybrid.Authorization.Functions.FunctionHandlerBase`1.GetFromDatabase*
  commentId: Overload:Hybrid.Authorization.Functions.FunctionHandlerBase`1.GetFromDatabase
  name: GetFromDatabase
  nameWithType: FunctionHandlerBase<TFunction>.GetFromDatabase
  fullName: Hybrid.Authorization.Functions.FunctionHandlerBase<TFunction>.GetFromDatabase
  nameWithType.vb: FunctionHandlerBase(Of TFunction).GetFromDatabase
  fullName.vb: Hybrid.Authorization.Functions.FunctionHandlerBase(Of TFunction).GetFromDatabase
