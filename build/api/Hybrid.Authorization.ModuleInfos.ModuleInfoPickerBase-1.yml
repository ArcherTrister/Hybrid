### YamlMime:ManagedReference
items:
- uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1
  commentId: T:Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1
  id: ModuleInfoPickerBase`1
  parent: Hybrid.Authorization.ModuleInfos
  children:
  - Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.#ctor(System.IServiceProvider)
  - Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.FunctionHandler
  - Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.GetModule(System.Reflection.MethodInfo,Hybrid.Authorization.ModuleInfos.ModuleInfo,System.Int32)
  - Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.GetModules(System.Type,System.String[])
  - Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.GetModules(System.Type[])
  - Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.Logger
  - Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.Pickup
  langs:
  - csharp
  - vb
  name: ModuleInfoPickerBase<TFunction>
  nameWithType: ModuleInfoPickerBase<TFunction>
  fullName: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase<TFunction>
  type: Class
  source:
    remote:
      path: src/Hybrid/Authorization/ModuleInfos/ModuleInfoPickerBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: ModuleInfoPickerBase
    path: ../src/Hybrid/Authorization/ModuleInfos/ModuleInfoPickerBase.cs
    startLine: 27
  assemblies:
  - Hybrid
  namespace: Hybrid.Authorization.ModuleInfos
  summary: "\n模块信息提取器基类\n"
  example: []
  syntax:
    content: 'public abstract class ModuleInfoPickerBase<TFunction> : IModuleInfoPicker where TFunction : class, IEntity<Guid>, IFunction, new()'
    typeParameters:
    - id: TFunction
    content.vb: >-
      Public MustInherit Class ModuleInfoPickerBase(Of TFunction As {Class, IEntity(Of Guid), IFunction, New})

          Implements IModuleInfoPicker
  inheritance:
  - System.Object
  derivedClasses:
  - Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker
  implements:
  - Hybrid.Authorization.ModuleInfos.IModuleInfoPicker
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.OSharp.Entity.EntityExtensions.CheckICreatedTime``2
  - Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.OSharp.Entity.EntityExtensions.CheckICreationAudited``3(System.Security.Principal.IPrincipal)
  - Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.OSharp.Entity.EntityExtensions.CheckIUpdateAudited``3(System.Security.Principal.IPrincipal)
  - System.Object.OSharp.Extensions.ObjectExtensions.CastTo(System.Type)
  - System.Object.OSharp.Extensions.ObjectExtensions.CastTo``1
  - System.Object.OSharp.Extensions.ObjectExtensions.CastTo``1({T})
  - Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.OSharp.Extensions.ObjectExtensions.IsIn``1(Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase{{TFunction}}[])
  - System.Object.OSharp.Extensions.ObjectExtensions.ToDynamic
  - Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.OSharp.Extensions.ObjectExtensions.DeepClone``1
  - Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.OSharp.Extensions.ParameterCheckExtensions.Required``1(System.Func{Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase{{TFunction}},System.Boolean},System.String)
  - Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.OSharp.Extensions.ParameterCheckExtensions.Required``2(System.Func{Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase{{TFunction}},System.Boolean},System.String)
  - Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.OSharp.Extensions.ParameterCheckExtensions.CheckNotNull``1(System.String)
  - Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.OSharp.Extensions.TryCatchExtensions.TryCatch``1(System.Action{Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase{{TFunction}}},System.Action{System.Exception},System.Action{Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase{{TFunction}}})
  - Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.OSharp.Extensions.TryCatchExtensions.TryCatch``1(System.Action{Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase{{TFunction}}},System.Action{System.Exception})
  - Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.OSharp.Extensions.TryCatchExtensions.TryCatch``2(System.Func{Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase{{TFunction}},{TResult}},System.Action{System.Exception},System.Action{Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase{{TFunction}}})
  - Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.OSharp.Extensions.TryCatchExtensions.TryCatch``2(System.Func{Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase{{TFunction}},{TResult}},System.Action{System.Exception})
  - Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.OSharp.Extensions.TryCatchExtensions.TryFinally``1(System.Action{Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase{{TFunction}}},System.Action{Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase{{TFunction}}})
  - System.Object.OSharp.Json.JsonExtensions.ToJsonString(System.Boolean,System.Boolean)
  - System.Object.OSharp.Mapping.MapperExtensions.MapTo``1
  - Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.OSharp.Mapping.MapperExtensions.MapTo``2({TTarget})
  - System.Object.OSharp.Reflection.LockExtensions.Locking(System.Action)
  - Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.OSharp.Reflection.LockExtensions.Locking``1(System.Action{Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase{{TFunction}}})
  - System.Object.OSharp.Reflection.LockExtensions.Locking``1(System.Func{{TResult}})
  - Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.OSharp.Reflection.LockExtensions.Locking``2(System.Func{Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase{{TFunction}},{TResult}})
  - System.Object.Hybrid.Extensions.ObjectExtensions.CastTo(System.Type)
  - System.Object.Hybrid.Extensions.ObjectExtensions.CastTo``1
  - System.Object.Hybrid.Extensions.ObjectExtensions.CastTo``1({T})
  - Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.Hybrid.Extensions.ObjectExtensions.IsIn``1(Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase{{TFunction}}[])
  - System.Object.Hybrid.Extensions.ObjectExtensions.ToDynamic
  - Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.Hybrid.Extensions.ObjectExtensions.DeepClone``1
  - Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.Hybrid.Extensions.ParameterCheckExtensions.Required``1(System.Func{Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase{{TFunction}},System.Boolean},System.String)
  - Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.Hybrid.Extensions.ParameterCheckExtensions.Required``2(System.Func{Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase{{TFunction}},System.Boolean},System.String)
  - Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(System.String)
  - Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase{{TFunction}}},System.Action{System.Exception},System.Action{Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase{{TFunction}}})
  - Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase{{TFunction}}},System.Action{System.Exception})
  - Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase{{TFunction}},{TResult}},System.Action{System.Exception},System.Action{Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase{{TFunction}}})
  - Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase{{TFunction}},{TResult}},System.Action{System.Exception})
  - Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.Hybrid.Extensions.TryCatchExtensions.TryFinally``1(System.Action{Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase{{TFunction}}},System.Action{Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase{{TFunction}}})
  - System.Object.Hybrid.Json.JsonExtensions.ToJsonString(System.Boolean,System.Boolean)
  - System.Object.Hybrid.Mapping.MapperExtensions.MapTo``1
  - Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.Hybrid.Mapping.MapperExtensions.MapTo``2({TTarget})
  - System.Object.Hybrid.Reflection.LockExtensions.Locking(System.Action)
  - Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.Hybrid.Reflection.LockExtensions.Locking``1(System.Action{Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase{{TFunction}}})
  - System.Object.Hybrid.Reflection.LockExtensions.Locking``1(System.Func{{TResult}})
  - Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.Hybrid.Reflection.LockExtensions.Locking``2(System.Func{Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase{{TFunction}},{TResult}})
  - Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2
  - Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(System.Security.Principal.IPrincipal)
  - Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(System.Security.Principal.IPrincipal)
  nameWithType.vb: ModuleInfoPickerBase(Of TFunction)
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  fullName.vb: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase(Of TFunction)
  name.vb: ModuleInfoPickerBase(Of TFunction)
- uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.#ctor(System.IServiceProvider)
  commentId: M:Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.#ctor(System.IServiceProvider)
  id: '#ctor(System.IServiceProvider)'
  parent: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1
  langs:
  - csharp
  - vb
  name: ModuleInfoPickerBase(IServiceProvider)
  nameWithType: ModuleInfoPickerBase<TFunction>.ModuleInfoPickerBase(IServiceProvider)
  fullName: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase<TFunction>.ModuleInfoPickerBase(System.IServiceProvider)
  type: Constructor
  source:
    remote:
      path: src/Hybrid/Authorization/ModuleInfos/ModuleInfoPickerBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: .ctor
    path: ../src/Hybrid/Authorization/ModuleInfos/ModuleInfoPickerBase.cs
    startLine: 33
  assemblies:
  - Hybrid
  namespace: Hybrid.Authorization.ModuleInfos
  summary: "\n初始化一个<xref href=\"Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase%601\" data-throw-if-not-resolved=\"false\"></xref>类型的新实例\n"
  example: []
  syntax:
    content: protected ModuleInfoPickerBase(IServiceProvider serviceProvider)
    parameters:
    - id: serviceProvider
      type: System.IServiceProvider
    content.vb: Protected Sub New(serviceProvider As IServiceProvider)
  overload: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.#ctor*
  nameWithType.vb: ModuleInfoPickerBase(Of TFunction).ModuleInfoPickerBase(IServiceProvider)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase(Of TFunction).ModuleInfoPickerBase(System.IServiceProvider)
- uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.Logger
  commentId: P:Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.Logger
  id: Logger
  parent: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1
  langs:
  - csharp
  - vb
  name: Logger
  nameWithType: ModuleInfoPickerBase<TFunction>.Logger
  fullName: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase<TFunction>.Logger
  type: Property
  source:
    remote:
      path: src/Hybrid/Authorization/ModuleInfos/ModuleInfoPickerBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: Logger
    path: ../src/Hybrid/Authorization/ModuleInfos/ModuleInfoPickerBase.cs
    startLine: 42
  assemblies:
  - Hybrid
  namespace: Hybrid.Authorization.ModuleInfos
  summary: "\n获取 日志记录对象\n"
  example: []
  syntax:
    content: protected ILogger Logger { get; }
    parameters: []
    return:
      type: Microsoft.Extensions.Logging.ILogger
    content.vb: Protected ReadOnly Property Logger As ILogger
  overload: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.Logger*
  nameWithType.vb: ModuleInfoPickerBase(Of TFunction).Logger
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
  fullName.vb: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase(Of TFunction).Logger
- uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.FunctionHandler
  commentId: P:Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.FunctionHandler
  id: FunctionHandler
  parent: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1
  langs:
  - csharp
  - vb
  name: FunctionHandler
  nameWithType: ModuleInfoPickerBase<TFunction>.FunctionHandler
  fullName: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase<TFunction>.FunctionHandler
  type: Property
  source:
    remote:
      path: src/Hybrid/Authorization/ModuleInfos/ModuleInfoPickerBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: FunctionHandler
    path: ../src/Hybrid/Authorization/ModuleInfos/ModuleInfoPickerBase.cs
    startLine: 47
  assemblies:
  - Hybrid
  namespace: Hybrid.Authorization.ModuleInfos
  summary: "\n获取 功能处理器\n"
  example: []
  syntax:
    content: protected IFunctionHandler FunctionHandler { get; }
    parameters: []
    return:
      type: Hybrid.Authorization.Functions.IFunctionHandler
    content.vb: Protected ReadOnly Property FunctionHandler As IFunctionHandler
  overload: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.FunctionHandler*
  nameWithType.vb: ModuleInfoPickerBase(Of TFunction).FunctionHandler
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
  fullName.vb: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase(Of TFunction).FunctionHandler
- uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.Pickup
  commentId: M:Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.Pickup
  id: Pickup
  parent: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1
  langs:
  - csharp
  - vb
  name: Pickup()
  nameWithType: ModuleInfoPickerBase<TFunction>.Pickup()
  fullName: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase<TFunction>.Pickup()
  type: Method
  source:
    remote:
      path: src/Hybrid/Authorization/ModuleInfos/ModuleInfoPickerBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: Pickup
    path: ../src/Hybrid/Authorization/ModuleInfos/ModuleInfoPickerBase.cs
    startLine: 52
  assemblies:
  - Hybrid
  namespace: Hybrid.Authorization.ModuleInfos
  summary: "\n从程序集中获取模块信息\n"
  example: []
  syntax:
    content: public ModuleInfo[] Pickup()
    return:
      type: Hybrid.Authorization.ModuleInfos.ModuleInfo[]
    content.vb: Public Function Pickup As ModuleInfo()
  overload: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.Pickup*
  implements:
  - Hybrid.Authorization.ModuleInfos.IModuleInfoPicker.Pickup
  nameWithType.vb: ModuleInfoPickerBase(Of TFunction).Pickup()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase(Of TFunction).Pickup()
- uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.GetModules(System.Type[])
  commentId: M:Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.GetModules(System.Type[])
  id: GetModules(System.Type[])
  parent: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1
  langs:
  - csharp
  - vb
  name: GetModules(Type[])
  nameWithType: ModuleInfoPickerBase<TFunction>.GetModules(Type[])
  fullName: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase<TFunction>.GetModules(System.Type[])
  type: Method
  source:
    remote:
      path: src/Hybrid/Authorization/ModuleInfos/ModuleInfoPickerBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: GetModules
    path: ../src/Hybrid/Authorization/ModuleInfos/ModuleInfoPickerBase.cs
    startLine: 65
  assemblies:
  - Hybrid
  namespace: Hybrid.Authorization.ModuleInfos
  summary: "\n重写以实现从类型中提取模块信息\n"
  example: []
  syntax:
    content: protected virtual ModuleInfo[] GetModules(Type[] moduleTypes)
    parameters:
    - id: moduleTypes
      type: System.Type[]
      description: ''
    return:
      type: Hybrid.Authorization.ModuleInfos.ModuleInfo[]
      description: ''
    content.vb: Protected Overridable Function GetModules(moduleTypes As Type()) As ModuleInfo()
  overload: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.GetModules*
  nameWithType.vb: ModuleInfoPickerBase(Of TFunction).GetModules(Type())
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase(Of TFunction).GetModules(System.Type())
  name.vb: GetModules(Type())
- uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.GetModules(System.Type,System.String[])
  commentId: M:Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.GetModules(System.Type,System.String[])
  id: GetModules(System.Type,System.String[])
  parent: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1
  langs:
  - csharp
  - vb
  name: GetModules(Type, String[])
  nameWithType: ModuleInfoPickerBase<TFunction>.GetModules(Type, String[])
  fullName: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase<TFunction>.GetModules(System.Type, System.String[])
  type: Method
  source:
    remote:
      path: src/Hybrid/Authorization/ModuleInfos/ModuleInfoPickerBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: GetModules
    path: ../src/Hybrid/Authorization/ModuleInfos/ModuleInfoPickerBase.cs
    startLine: 96
  assemblies:
  - Hybrid
  namespace: Hybrid.Authorization.ModuleInfos
  summary: "\n重写以实现从类型中提取模块信息\n"
  example: []
  syntax:
    content: protected abstract ModuleInfo[] GetModules(Type type, string[] existPaths)
    parameters:
    - id: type
      type: System.Type
      description: 类型信息
    - id: existPaths
      type: System.String[]
      description: 已存在的路径集合
    return:
      type: Hybrid.Authorization.ModuleInfos.ModuleInfo[]
      description: 提取到的模块信息
    content.vb: Protected MustOverride Function GetModules(type As Type, existPaths As String()) As ModuleInfo()
  overload: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.GetModules*
  nameWithType.vb: ModuleInfoPickerBase(Of TFunction).GetModules(Type, String())
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
  fullName.vb: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase(Of TFunction).GetModules(System.Type, System.String())
  name.vb: GetModules(Type, String())
- uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.GetModule(System.Reflection.MethodInfo,Hybrid.Authorization.ModuleInfos.ModuleInfo,System.Int32)
  commentId: M:Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.GetModule(System.Reflection.MethodInfo,Hybrid.Authorization.ModuleInfos.ModuleInfo,System.Int32)
  id: GetModule(System.Reflection.MethodInfo,Hybrid.Authorization.ModuleInfos.ModuleInfo,System.Int32)
  parent: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1
  langs:
  - csharp
  - vb
  name: GetModule(MethodInfo, ModuleInfo, Int32)
  nameWithType: ModuleInfoPickerBase<TFunction>.GetModule(MethodInfo, ModuleInfo, Int32)
  fullName: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase<TFunction>.GetModule(System.Reflection.MethodInfo, Hybrid.Authorization.ModuleInfos.ModuleInfo, System.Int32)
  type: Method
  source:
    remote:
      path: src/Hybrid/Authorization/ModuleInfos/ModuleInfoPickerBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: GetModule
    path: ../src/Hybrid/Authorization/ModuleInfos/ModuleInfoPickerBase.cs
    startLine: 105
  assemblies:
  - Hybrid
  namespace: Hybrid.Authorization.ModuleInfos
  summary: "\n重写以实现从方法信息中提取模块信息\n"
  example: []
  syntax:
    content: protected abstract ModuleInfo GetModule(MethodInfo method, ModuleInfo typeInfo, int index)
    parameters:
    - id: method
      type: System.Reflection.MethodInfo
      description: 方法信息
    - id: typeInfo
      type: Hybrid.Authorization.ModuleInfos.ModuleInfo
      description: 所在类型模块信息
    - id: index
      type: System.Int32
      description: 序号
    return:
      type: Hybrid.Authorization.ModuleInfos.ModuleInfo
      description: 提取到的模块信息
    content.vb: Protected MustOverride Function GetModule(method As MethodInfo, typeInfo As ModuleInfo, index As Integer) As ModuleInfo
  overload: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.GetModule*
  nameWithType.vb: ModuleInfoPickerBase(Of TFunction).GetModule(MethodInfo, ModuleInfo, Int32)
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
  fullName.vb: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase(Of TFunction).GetModule(System.Reflection.MethodInfo, Hybrid.Authorization.ModuleInfos.ModuleInfo, System.Int32)
references:
- uid: Hybrid.Authorization.ModuleInfos
  commentId: N:Hybrid.Authorization.ModuleInfos
  name: Hybrid.Authorization.ModuleInfos
  nameWithType: Hybrid.Authorization.ModuleInfos
  fullName: Hybrid.Authorization.ModuleInfos
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Hybrid.Authorization.ModuleInfos.IModuleInfoPicker
  commentId: T:Hybrid.Authorization.ModuleInfos.IModuleInfoPicker
  parent: Hybrid.Authorization.ModuleInfos
  name: IModuleInfoPicker
  nameWithType: IModuleInfoPicker
  fullName: Hybrid.Authorization.ModuleInfos.IModuleInfoPicker
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.OSharp.Entity.EntityExtensions.CheckICreatedTime``2
  commentId: M:OSharp.Entity.EntityExtensions.CheckICreatedTime``2(``0)
  parent: OSharp.Entity.EntityExtensions
  definition: OSharp.Entity.EntityExtensions.CheckICreatedTime``2(``0)
  name: CheckICreatedTime<ModuleInfoPickerBase<TFunction>, TKey>()
  nameWithType: EntityExtensions.CheckICreatedTime<ModuleInfoPickerBase<TFunction>, TKey>()
  fullName: OSharp.Entity.EntityExtensions.CheckICreatedTime<Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase<TFunction>, TKey>()
  nameWithType.vb: EntityExtensions.CheckICreatedTime(Of ModuleInfoPickerBase(Of TFunction), TKey)()
  fullName.vb: OSharp.Entity.EntityExtensions.CheckICreatedTime(Of Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase(Of TFunction), TKey)()
  name.vb: CheckICreatedTime(Of ModuleInfoPickerBase(Of TFunction), TKey)()
  spec.csharp:
  - uid: OSharp.Entity.EntityExtensions.CheckICreatedTime``2
    name: CheckICreatedTime<ModuleInfoPickerBase<TFunction>, TKey>
    nameWithType: EntityExtensions.CheckICreatedTime<ModuleInfoPickerBase<TFunction>, TKey>
    fullName: OSharp.Entity.EntityExtensions.CheckICreatedTime<Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase<TFunction>, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Entity.EntityExtensions.CheckICreatedTime``2
    name: CheckICreatedTime(Of ModuleInfoPickerBase(Of TFunction), TKey)
    nameWithType: EntityExtensions.CheckICreatedTime(Of ModuleInfoPickerBase(Of TFunction), TKey)
    fullName: OSharp.Entity.EntityExtensions.CheckICreatedTime(Of Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase(Of TFunction), TKey)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.OSharp.Entity.EntityExtensions.CheckICreationAudited``3(System.Security.Principal.IPrincipal)
  commentId: M:OSharp.Entity.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
  parent: OSharp.Entity.EntityExtensions
  definition: OSharp.Entity.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
  name: CheckICreationAudited<ModuleInfoPickerBase<TFunction>, TKey, TUserKey>(IPrincipal)
  nameWithType: EntityExtensions.CheckICreationAudited<ModuleInfoPickerBase<TFunction>, TKey, TUserKey>(IPrincipal)
  fullName: OSharp.Entity.EntityExtensions.CheckICreationAudited<Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase<TFunction>, TKey, TUserKey>(System.Security.Principal.IPrincipal)
  nameWithType.vb: EntityExtensions.CheckICreationAudited(Of ModuleInfoPickerBase(Of TFunction), TKey, TUserKey)(IPrincipal)
  fullName.vb: OSharp.Entity.EntityExtensions.CheckICreationAudited(Of Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase(Of TFunction), TKey, TUserKey)(System.Security.Principal.IPrincipal)
  name.vb: CheckICreationAudited(Of ModuleInfoPickerBase(Of TFunction), TKey, TUserKey)(IPrincipal)
  spec.csharp:
  - uid: OSharp.Entity.EntityExtensions.CheckICreationAudited``3(System.Security.Principal.IPrincipal)
    name: CheckICreationAudited<ModuleInfoPickerBase<TFunction>, TKey, TUserKey>
    nameWithType: EntityExtensions.CheckICreationAudited<ModuleInfoPickerBase<TFunction>, TKey, TUserKey>
    fullName: OSharp.Entity.EntityExtensions.CheckICreationAudited<Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase<TFunction>, TKey, TUserKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Entity.EntityExtensions.CheckICreationAudited``3(System.Security.Principal.IPrincipal)
    name: CheckICreationAudited(Of ModuleInfoPickerBase(Of TFunction), TKey, TUserKey)
    nameWithType: EntityExtensions.CheckICreationAudited(Of ModuleInfoPickerBase(Of TFunction), TKey, TUserKey)
    fullName: OSharp.Entity.EntityExtensions.CheckICreationAudited(Of Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase(Of TFunction), TKey, TUserKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.OSharp.Entity.EntityExtensions.CheckIUpdateAudited``3(System.Security.Principal.IPrincipal)
  commentId: M:OSharp.Entity.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
  parent: OSharp.Entity.EntityExtensions
  definition: OSharp.Entity.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
  name: CheckIUpdateAudited<ModuleInfoPickerBase<TFunction>, TKey, TUserKey>(IPrincipal)
  nameWithType: EntityExtensions.CheckIUpdateAudited<ModuleInfoPickerBase<TFunction>, TKey, TUserKey>(IPrincipal)
  fullName: OSharp.Entity.EntityExtensions.CheckIUpdateAudited<Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase<TFunction>, TKey, TUserKey>(System.Security.Principal.IPrincipal)
  nameWithType.vb: EntityExtensions.CheckIUpdateAudited(Of ModuleInfoPickerBase(Of TFunction), TKey, TUserKey)(IPrincipal)
  fullName.vb: OSharp.Entity.EntityExtensions.CheckIUpdateAudited(Of Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase(Of TFunction), TKey, TUserKey)(System.Security.Principal.IPrincipal)
  name.vb: CheckIUpdateAudited(Of ModuleInfoPickerBase(Of TFunction), TKey, TUserKey)(IPrincipal)
  spec.csharp:
  - uid: OSharp.Entity.EntityExtensions.CheckIUpdateAudited``3(System.Security.Principal.IPrincipal)
    name: CheckIUpdateAudited<ModuleInfoPickerBase<TFunction>, TKey, TUserKey>
    nameWithType: EntityExtensions.CheckIUpdateAudited<ModuleInfoPickerBase<TFunction>, TKey, TUserKey>
    fullName: OSharp.Entity.EntityExtensions.CheckIUpdateAudited<Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase<TFunction>, TKey, TUserKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Entity.EntityExtensions.CheckIUpdateAudited``3(System.Security.Principal.IPrincipal)
    name: CheckIUpdateAudited(Of ModuleInfoPickerBase(Of TFunction), TKey, TUserKey)
    nameWithType: EntityExtensions.CheckIUpdateAudited(Of ModuleInfoPickerBase(Of TFunction), TKey, TUserKey)
    fullName: OSharp.Entity.EntityExtensions.CheckIUpdateAudited(Of Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase(Of TFunction), TKey, TUserKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.OSharp.Extensions.ObjectExtensions.CastTo(System.Type)
  commentId: M:OSharp.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
  parent: OSharp.Extensions.ObjectExtensions
  definition: OSharp.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
  name: CastTo(Type)
  nameWithType: ObjectExtensions.CastTo(Type)
  fullName: OSharp.Extensions.ObjectExtensions.CastTo(System.Type)
  spec.csharp:
  - uid: OSharp.Extensions.ObjectExtensions.CastTo(System.Type)
    name: CastTo
    nameWithType: ObjectExtensions.CastTo
    fullName: OSharp.Extensions.ObjectExtensions.CastTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ObjectExtensions.CastTo(System.Type)
    name: CastTo
    nameWithType: ObjectExtensions.CastTo
    fullName: OSharp.Extensions.ObjectExtensions.CastTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.OSharp.Extensions.ObjectExtensions.CastTo``1
  commentId: M:OSharp.Extensions.ObjectExtensions.CastTo``1(System.Object)
  parent: OSharp.Extensions.ObjectExtensions
  definition: OSharp.Extensions.ObjectExtensions.CastTo``1(System.Object)
  name: CastTo<T>()
  nameWithType: ObjectExtensions.CastTo<T>()
  fullName: OSharp.Extensions.ObjectExtensions.CastTo<T>()
  nameWithType.vb: ObjectExtensions.CastTo(Of T)()
  fullName.vb: OSharp.Extensions.ObjectExtensions.CastTo(Of T)()
  name.vb: CastTo(Of T)()
  spec.csharp:
  - uid: OSharp.Extensions.ObjectExtensions.CastTo``1
    name: CastTo<T>
    nameWithType: ObjectExtensions.CastTo<T>
    fullName: OSharp.Extensions.ObjectExtensions.CastTo<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ObjectExtensions.CastTo``1
    name: CastTo(Of T)
    nameWithType: ObjectExtensions.CastTo(Of T)
    fullName: OSharp.Extensions.ObjectExtensions.CastTo(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.OSharp.Extensions.ObjectExtensions.CastTo``1({T})
  commentId: M:OSharp.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
  parent: OSharp.Extensions.ObjectExtensions
  definition: OSharp.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
  name: CastTo<T>(T)
  nameWithType: ObjectExtensions.CastTo<T>(T)
  fullName: OSharp.Extensions.ObjectExtensions.CastTo<T>(T)
  nameWithType.vb: ObjectExtensions.CastTo(Of T)(T)
  fullName.vb: OSharp.Extensions.ObjectExtensions.CastTo(Of T)(T)
  name.vb: CastTo(Of T)(T)
  spec.csharp:
  - uid: OSharp.Extensions.ObjectExtensions.CastTo``1(``0)
    name: CastTo<T>
    nameWithType: ObjectExtensions.CastTo<T>
    fullName: OSharp.Extensions.ObjectExtensions.CastTo<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ObjectExtensions.CastTo``1(``0)
    name: CastTo(Of T)
    nameWithType: ObjectExtensions.CastTo(Of T)
    fullName: OSharp.Extensions.ObjectExtensions.CastTo(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.OSharp.Extensions.ObjectExtensions.IsIn``1(Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase{{TFunction}}[])
  commentId: M:OSharp.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
  parent: OSharp.Extensions.ObjectExtensions
  definition: OSharp.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
  name: IsIn<ModuleInfoPickerBase<TFunction>>(ModuleInfoPickerBase<TFunction>[])
  nameWithType: ObjectExtensions.IsIn<ModuleInfoPickerBase<TFunction>>(ModuleInfoPickerBase<TFunction>[])
  fullName: OSharp.Extensions.ObjectExtensions.IsIn<Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase<TFunction>>(Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase<TFunction>[])
  nameWithType.vb: ObjectExtensions.IsIn(Of ModuleInfoPickerBase(Of TFunction))(ModuleInfoPickerBase(Of TFunction)())
  fullName.vb: OSharp.Extensions.ObjectExtensions.IsIn(Of Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase(Of TFunction))(Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase(Of TFunction)())
  name.vb: IsIn(Of ModuleInfoPickerBase(Of TFunction))(ModuleInfoPickerBase(Of TFunction)())
  spec.csharp:
  - uid: OSharp.Extensions.ObjectExtensions.IsIn``1(``0[])
    name: IsIn<ModuleInfoPickerBase<TFunction>>
    nameWithType: ObjectExtensions.IsIn<ModuleInfoPickerBase<TFunction>>
    fullName: OSharp.Extensions.ObjectExtensions.IsIn<Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase<TFunction>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1
    name: ModuleInfoPickerBase
    nameWithType: ModuleInfoPickerBase
    fullName: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ObjectExtensions.IsIn``1(``0[])
    name: IsIn(Of ModuleInfoPickerBase(Of TFunction))
    nameWithType: ObjectExtensions.IsIn(Of ModuleInfoPickerBase(Of TFunction))
    fullName: OSharp.Extensions.ObjectExtensions.IsIn(Of Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase(Of TFunction))
  - name: (
    nameWithType: (
    fullName: (
  - uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1
    name: ModuleInfoPickerBase
    nameWithType: ModuleInfoPickerBase
    fullName: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.OSharp.Extensions.ObjectExtensions.ToDynamic
  commentId: M:OSharp.Extensions.ObjectExtensions.ToDynamic(System.Object)
  parent: OSharp.Extensions.ObjectExtensions
  definition: OSharp.Extensions.ObjectExtensions.ToDynamic(System.Object)
  name: ToDynamic()
  nameWithType: ObjectExtensions.ToDynamic()
  fullName: OSharp.Extensions.ObjectExtensions.ToDynamic()
  spec.csharp:
  - uid: OSharp.Extensions.ObjectExtensions.ToDynamic
    name: ToDynamic
    nameWithType: ObjectExtensions.ToDynamic
    fullName: OSharp.Extensions.ObjectExtensions.ToDynamic
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ObjectExtensions.ToDynamic
    name: ToDynamic
    nameWithType: ObjectExtensions.ToDynamic
    fullName: OSharp.Extensions.ObjectExtensions.ToDynamic
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.OSharp.Extensions.ObjectExtensions.DeepClone``1
  commentId: M:OSharp.Extensions.ObjectExtensions.DeepClone``1(``0)
  parent: OSharp.Extensions.ObjectExtensions
  definition: OSharp.Extensions.ObjectExtensions.DeepClone``1(``0)
  name: DeepClone<ModuleInfoPickerBase<TFunction>>()
  nameWithType: ObjectExtensions.DeepClone<ModuleInfoPickerBase<TFunction>>()
  fullName: OSharp.Extensions.ObjectExtensions.DeepClone<Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase<TFunction>>()
  nameWithType.vb: ObjectExtensions.DeepClone(Of ModuleInfoPickerBase(Of TFunction))()
  fullName.vb: OSharp.Extensions.ObjectExtensions.DeepClone(Of Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase(Of TFunction))()
  name.vb: DeepClone(Of ModuleInfoPickerBase(Of TFunction))()
  spec.csharp:
  - uid: OSharp.Extensions.ObjectExtensions.DeepClone``1
    name: DeepClone<ModuleInfoPickerBase<TFunction>>
    nameWithType: ObjectExtensions.DeepClone<ModuleInfoPickerBase<TFunction>>
    fullName: OSharp.Extensions.ObjectExtensions.DeepClone<Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase<TFunction>>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ObjectExtensions.DeepClone``1
    name: DeepClone(Of ModuleInfoPickerBase(Of TFunction))
    nameWithType: ObjectExtensions.DeepClone(Of ModuleInfoPickerBase(Of TFunction))
    fullName: OSharp.Extensions.ObjectExtensions.DeepClone(Of Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase(Of TFunction))
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.OSharp.Extensions.ParameterCheckExtensions.Required``1(System.Func{Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase{{TFunction}},System.Boolean},System.String)
  commentId: M:OSharp.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
  parent: OSharp.Extensions.ParameterCheckExtensions
  definition: OSharp.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
  name: Required<ModuleInfoPickerBase<TFunction>>(Func<ModuleInfoPickerBase<TFunction>, Boolean>, String)
  nameWithType: ParameterCheckExtensions.Required<ModuleInfoPickerBase<TFunction>>(Func<ModuleInfoPickerBase<TFunction>, Boolean>, String)
  fullName: OSharp.Extensions.ParameterCheckExtensions.Required<Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase<TFunction>>(System.Func<Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase<TFunction>, System.Boolean>, System.String)
  nameWithType.vb: ParameterCheckExtensions.Required(Of ModuleInfoPickerBase(Of TFunction))(Func(Of ModuleInfoPickerBase(Of TFunction), Boolean), String)
  fullName.vb: OSharp.Extensions.ParameterCheckExtensions.Required(Of Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase(Of TFunction))(System.Func(Of Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase(Of TFunction), System.Boolean), System.String)
  name.vb: Required(Of ModuleInfoPickerBase(Of TFunction))(Func(Of ModuleInfoPickerBase(Of TFunction), Boolean), String)
  spec.csharp:
  - uid: OSharp.Extensions.ParameterCheckExtensions.Required``1(System.Func{``0,System.Boolean},System.String)
    name: Required<ModuleInfoPickerBase<TFunction>>
    nameWithType: ParameterCheckExtensions.Required<ModuleInfoPickerBase<TFunction>>
    fullName: OSharp.Extensions.ParameterCheckExtensions.Required<Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase<TFunction>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1
    name: ModuleInfoPickerBase
    nameWithType: ModuleInfoPickerBase
    fullName: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ParameterCheckExtensions.Required``1(System.Func{``0,System.Boolean},System.String)
    name: Required(Of ModuleInfoPickerBase(Of TFunction))
    nameWithType: ParameterCheckExtensions.Required(Of ModuleInfoPickerBase(Of TFunction))
    fullName: OSharp.Extensions.ParameterCheckExtensions.Required(Of Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase(Of TFunction))
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1
    name: ModuleInfoPickerBase
    nameWithType: ModuleInfoPickerBase
    fullName: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.OSharp.Extensions.ParameterCheckExtensions.Required``2(System.Func{Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase{{TFunction}},System.Boolean},System.String)
  commentId: M:OSharp.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
  parent: OSharp.Extensions.ParameterCheckExtensions
  definition: OSharp.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
  name: Required<ModuleInfoPickerBase<TFunction>, TException>(Func<ModuleInfoPickerBase<TFunction>, Boolean>, String)
  nameWithType: ParameterCheckExtensions.Required<ModuleInfoPickerBase<TFunction>, TException>(Func<ModuleInfoPickerBase<TFunction>, Boolean>, String)
  fullName: OSharp.Extensions.ParameterCheckExtensions.Required<Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase<TFunction>, TException>(System.Func<Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase<TFunction>, System.Boolean>, System.String)
  nameWithType.vb: ParameterCheckExtensions.Required(Of ModuleInfoPickerBase(Of TFunction), TException)(Func(Of ModuleInfoPickerBase(Of TFunction), Boolean), String)
  fullName.vb: OSharp.Extensions.ParameterCheckExtensions.Required(Of Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase(Of TFunction), TException)(System.Func(Of Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase(Of TFunction), System.Boolean), System.String)
  name.vb: Required(Of ModuleInfoPickerBase(Of TFunction), TException)(Func(Of ModuleInfoPickerBase(Of TFunction), Boolean), String)
  spec.csharp:
  - uid: OSharp.Extensions.ParameterCheckExtensions.Required``2(System.Func{``0,System.Boolean},System.String)
    name: Required<ModuleInfoPickerBase<TFunction>, TException>
    nameWithType: ParameterCheckExtensions.Required<ModuleInfoPickerBase<TFunction>, TException>
    fullName: OSharp.Extensions.ParameterCheckExtensions.Required<Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase<TFunction>, TException>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1
    name: ModuleInfoPickerBase
    nameWithType: ModuleInfoPickerBase
    fullName: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ParameterCheckExtensions.Required``2(System.Func{``0,System.Boolean},System.String)
    name: Required(Of ModuleInfoPickerBase(Of TFunction), TException)
    nameWithType: ParameterCheckExtensions.Required(Of ModuleInfoPickerBase(Of TFunction), TException)
    fullName: OSharp.Extensions.ParameterCheckExtensions.Required(Of Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase(Of TFunction), TException)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1
    name: ModuleInfoPickerBase
    nameWithType: ModuleInfoPickerBase
    fullName: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.OSharp.Extensions.ParameterCheckExtensions.CheckNotNull``1(System.String)
  commentId: M:OSharp.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
  parent: OSharp.Extensions.ParameterCheckExtensions
  definition: OSharp.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
  name: CheckNotNull<ModuleInfoPickerBase<TFunction>>(String)
  nameWithType: ParameterCheckExtensions.CheckNotNull<ModuleInfoPickerBase<TFunction>>(String)
  fullName: OSharp.Extensions.ParameterCheckExtensions.CheckNotNull<Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase<TFunction>>(System.String)
  nameWithType.vb: ParameterCheckExtensions.CheckNotNull(Of ModuleInfoPickerBase(Of TFunction))(String)
  fullName.vb: OSharp.Extensions.ParameterCheckExtensions.CheckNotNull(Of Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase(Of TFunction))(System.String)
  name.vb: CheckNotNull(Of ModuleInfoPickerBase(Of TFunction))(String)
  spec.csharp:
  - uid: OSharp.Extensions.ParameterCheckExtensions.CheckNotNull``1(System.String)
    name: CheckNotNull<ModuleInfoPickerBase<TFunction>>
    nameWithType: ParameterCheckExtensions.CheckNotNull<ModuleInfoPickerBase<TFunction>>
    fullName: OSharp.Extensions.ParameterCheckExtensions.CheckNotNull<Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase<TFunction>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ParameterCheckExtensions.CheckNotNull``1(System.String)
    name: CheckNotNull(Of ModuleInfoPickerBase(Of TFunction))
    nameWithType: ParameterCheckExtensions.CheckNotNull(Of ModuleInfoPickerBase(Of TFunction))
    fullName: OSharp.Extensions.ParameterCheckExtensions.CheckNotNull(Of Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase(Of TFunction))
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.OSharp.Extensions.TryCatchExtensions.TryCatch``1(System.Action{Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase{{TFunction}}},System.Action{System.Exception},System.Action{Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase{{TFunction}}})
  commentId: M:OSharp.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
  parent: OSharp.Extensions.TryCatchExtensions
  definition: OSharp.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
  name: TryCatch<ModuleInfoPickerBase<TFunction>>(Action<ModuleInfoPickerBase<TFunction>>, Action<Exception>, Action<ModuleInfoPickerBase<TFunction>>)
  nameWithType: TryCatchExtensions.TryCatch<ModuleInfoPickerBase<TFunction>>(Action<ModuleInfoPickerBase<TFunction>>, Action<Exception>, Action<ModuleInfoPickerBase<TFunction>>)
  fullName: OSharp.Extensions.TryCatchExtensions.TryCatch<Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase<TFunction>>(System.Action<Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase<TFunction>>, System.Action<System.Exception>, System.Action<Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase<TFunction>>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of ModuleInfoPickerBase(Of TFunction))(Action(Of ModuleInfoPickerBase(Of TFunction)), Action(Of Exception), Action(Of ModuleInfoPickerBase(Of TFunction)))
  fullName.vb: OSharp.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase(Of TFunction))(System.Action(Of Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase(Of TFunction)), System.Action(Of System.Exception), System.Action(Of Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase(Of TFunction)))
  name.vb: TryCatch(Of ModuleInfoPickerBase(Of TFunction))(Action(Of ModuleInfoPickerBase(Of TFunction)), Action(Of Exception), Action(Of ModuleInfoPickerBase(Of TFunction)))
  spec.csharp:
  - uid: OSharp.Extensions.TryCatchExtensions.TryCatch``1(System.Action{``0},System.Action{System.Exception},System.Action{``0})
    name: TryCatch<ModuleInfoPickerBase<TFunction>>
    nameWithType: TryCatchExtensions.TryCatch<ModuleInfoPickerBase<TFunction>>
    fullName: OSharp.Extensions.TryCatchExtensions.TryCatch<Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase<TFunction>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1
    name: ModuleInfoPickerBase
    nameWithType: ModuleInfoPickerBase
    fullName: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1
    name: ModuleInfoPickerBase
    nameWithType: ModuleInfoPickerBase
    fullName: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.TryCatchExtensions.TryCatch``1(System.Action{``0},System.Action{System.Exception},System.Action{``0})
    name: TryCatch(Of ModuleInfoPickerBase(Of TFunction))
    nameWithType: TryCatchExtensions.TryCatch(Of ModuleInfoPickerBase(Of TFunction))
    fullName: OSharp.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase(Of TFunction))
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1
    name: ModuleInfoPickerBase
    nameWithType: ModuleInfoPickerBase
    fullName: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1
    name: ModuleInfoPickerBase
    nameWithType: ModuleInfoPickerBase
    fullName: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.OSharp.Extensions.TryCatchExtensions.TryCatch``1(System.Action{Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase{{TFunction}}},System.Action{System.Exception})
  commentId: M:OSharp.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
  parent: OSharp.Extensions.TryCatchExtensions
  definition: OSharp.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
  name: TryCatch<ModuleInfoPickerBase<TFunction>>(Action<ModuleInfoPickerBase<TFunction>>, Action<Exception>)
  nameWithType: TryCatchExtensions.TryCatch<ModuleInfoPickerBase<TFunction>>(Action<ModuleInfoPickerBase<TFunction>>, Action<Exception>)
  fullName: OSharp.Extensions.TryCatchExtensions.TryCatch<Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase<TFunction>>(System.Action<Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase<TFunction>>, System.Action<System.Exception>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of ModuleInfoPickerBase(Of TFunction))(Action(Of ModuleInfoPickerBase(Of TFunction)), Action(Of Exception))
  fullName.vb: OSharp.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase(Of TFunction))(System.Action(Of Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase(Of TFunction)), System.Action(Of System.Exception))
  name.vb: TryCatch(Of ModuleInfoPickerBase(Of TFunction))(Action(Of ModuleInfoPickerBase(Of TFunction)), Action(Of Exception))
  spec.csharp:
  - uid: OSharp.Extensions.TryCatchExtensions.TryCatch``1(System.Action{``0},System.Action{System.Exception})
    name: TryCatch<ModuleInfoPickerBase<TFunction>>
    nameWithType: TryCatchExtensions.TryCatch<ModuleInfoPickerBase<TFunction>>
    fullName: OSharp.Extensions.TryCatchExtensions.TryCatch<Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase<TFunction>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1
    name: ModuleInfoPickerBase
    nameWithType: ModuleInfoPickerBase
    fullName: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.TryCatchExtensions.TryCatch``1(System.Action{``0},System.Action{System.Exception})
    name: TryCatch(Of ModuleInfoPickerBase(Of TFunction))
    nameWithType: TryCatchExtensions.TryCatch(Of ModuleInfoPickerBase(Of TFunction))
    fullName: OSharp.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase(Of TFunction))
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1
    name: ModuleInfoPickerBase
    nameWithType: ModuleInfoPickerBase
    fullName: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.OSharp.Extensions.TryCatchExtensions.TryCatch``2(System.Func{Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase{{TFunction}},{TResult}},System.Action{System.Exception},System.Action{Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase{{TFunction}}})
  commentId: M:OSharp.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
  parent: OSharp.Extensions.TryCatchExtensions
  definition: OSharp.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
  name: TryCatch<ModuleInfoPickerBase<TFunction>, TResult>(Func<ModuleInfoPickerBase<TFunction>, TResult>, Action<Exception>, Action<ModuleInfoPickerBase<TFunction>>)
  nameWithType: TryCatchExtensions.TryCatch<ModuleInfoPickerBase<TFunction>, TResult>(Func<ModuleInfoPickerBase<TFunction>, TResult>, Action<Exception>, Action<ModuleInfoPickerBase<TFunction>>)
  fullName: OSharp.Extensions.TryCatchExtensions.TryCatch<Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase<TFunction>, TResult>(System.Func<Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase<TFunction>, TResult>, System.Action<System.Exception>, System.Action<Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase<TFunction>>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of ModuleInfoPickerBase(Of TFunction), TResult)(Func(Of ModuleInfoPickerBase(Of TFunction), TResult), Action(Of Exception), Action(Of ModuleInfoPickerBase(Of TFunction)))
  fullName.vb: OSharp.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase(Of TFunction), TResult)(System.Func(Of Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase(Of TFunction), TResult), System.Action(Of System.Exception), System.Action(Of Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase(Of TFunction)))
  name.vb: TryCatch(Of ModuleInfoPickerBase(Of TFunction), TResult)(Func(Of ModuleInfoPickerBase(Of TFunction), TResult), Action(Of Exception), Action(Of ModuleInfoPickerBase(Of TFunction)))
  spec.csharp:
  - uid: OSharp.Extensions.TryCatchExtensions.TryCatch``2(System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
    name: TryCatch<ModuleInfoPickerBase<TFunction>, TResult>
    nameWithType: TryCatchExtensions.TryCatch<ModuleInfoPickerBase<TFunction>, TResult>
    fullName: OSharp.Extensions.TryCatchExtensions.TryCatch<Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase<TFunction>, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1
    name: ModuleInfoPickerBase
    nameWithType: ModuleInfoPickerBase
    fullName: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1
    name: ModuleInfoPickerBase
    nameWithType: ModuleInfoPickerBase
    fullName: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.TryCatchExtensions.TryCatch``2(System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
    name: TryCatch(Of ModuleInfoPickerBase(Of TFunction), TResult)
    nameWithType: TryCatchExtensions.TryCatch(Of ModuleInfoPickerBase(Of TFunction), TResult)
    fullName: OSharp.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase(Of TFunction), TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1
    name: ModuleInfoPickerBase
    nameWithType: ModuleInfoPickerBase
    fullName: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1
    name: ModuleInfoPickerBase
    nameWithType: ModuleInfoPickerBase
    fullName: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.OSharp.Extensions.TryCatchExtensions.TryCatch``2(System.Func{Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase{{TFunction}},{TResult}},System.Action{System.Exception})
  commentId: M:OSharp.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
  parent: OSharp.Extensions.TryCatchExtensions
  definition: OSharp.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
  name: TryCatch<ModuleInfoPickerBase<TFunction>, TResult>(Func<ModuleInfoPickerBase<TFunction>, TResult>, Action<Exception>)
  nameWithType: TryCatchExtensions.TryCatch<ModuleInfoPickerBase<TFunction>, TResult>(Func<ModuleInfoPickerBase<TFunction>, TResult>, Action<Exception>)
  fullName: OSharp.Extensions.TryCatchExtensions.TryCatch<Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase<TFunction>, TResult>(System.Func<Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase<TFunction>, TResult>, System.Action<System.Exception>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of ModuleInfoPickerBase(Of TFunction), TResult)(Func(Of ModuleInfoPickerBase(Of TFunction), TResult), Action(Of Exception))
  fullName.vb: OSharp.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase(Of TFunction), TResult)(System.Func(Of Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase(Of TFunction), TResult), System.Action(Of System.Exception))
  name.vb: TryCatch(Of ModuleInfoPickerBase(Of TFunction), TResult)(Func(Of ModuleInfoPickerBase(Of TFunction), TResult), Action(Of Exception))
  spec.csharp:
  - uid: OSharp.Extensions.TryCatchExtensions.TryCatch``2(System.Func{``0,``1},System.Action{System.Exception})
    name: TryCatch<ModuleInfoPickerBase<TFunction>, TResult>
    nameWithType: TryCatchExtensions.TryCatch<ModuleInfoPickerBase<TFunction>, TResult>
    fullName: OSharp.Extensions.TryCatchExtensions.TryCatch<Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase<TFunction>, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1
    name: ModuleInfoPickerBase
    nameWithType: ModuleInfoPickerBase
    fullName: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.TryCatchExtensions.TryCatch``2(System.Func{``0,``1},System.Action{System.Exception})
    name: TryCatch(Of ModuleInfoPickerBase(Of TFunction), TResult)
    nameWithType: TryCatchExtensions.TryCatch(Of ModuleInfoPickerBase(Of TFunction), TResult)
    fullName: OSharp.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase(Of TFunction), TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1
    name: ModuleInfoPickerBase
    nameWithType: ModuleInfoPickerBase
    fullName: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.OSharp.Extensions.TryCatchExtensions.TryFinally``1(System.Action{Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase{{TFunction}}},System.Action{Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase{{TFunction}}})
  commentId: M:OSharp.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
  parent: OSharp.Extensions.TryCatchExtensions
  definition: OSharp.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
  name: TryFinally<ModuleInfoPickerBase<TFunction>>(Action<ModuleInfoPickerBase<TFunction>>, Action<ModuleInfoPickerBase<TFunction>>)
  nameWithType: TryCatchExtensions.TryFinally<ModuleInfoPickerBase<TFunction>>(Action<ModuleInfoPickerBase<TFunction>>, Action<ModuleInfoPickerBase<TFunction>>)
  fullName: OSharp.Extensions.TryCatchExtensions.TryFinally<Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase<TFunction>>(System.Action<Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase<TFunction>>, System.Action<Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase<TFunction>>)
  nameWithType.vb: TryCatchExtensions.TryFinally(Of ModuleInfoPickerBase(Of TFunction))(Action(Of ModuleInfoPickerBase(Of TFunction)), Action(Of ModuleInfoPickerBase(Of TFunction)))
  fullName.vb: OSharp.Extensions.TryCatchExtensions.TryFinally(Of Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase(Of TFunction))(System.Action(Of Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase(Of TFunction)), System.Action(Of Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase(Of TFunction)))
  name.vb: TryFinally(Of ModuleInfoPickerBase(Of TFunction))(Action(Of ModuleInfoPickerBase(Of TFunction)), Action(Of ModuleInfoPickerBase(Of TFunction)))
  spec.csharp:
  - uid: OSharp.Extensions.TryCatchExtensions.TryFinally``1(System.Action{``0},System.Action{``0})
    name: TryFinally<ModuleInfoPickerBase<TFunction>>
    nameWithType: TryCatchExtensions.TryFinally<ModuleInfoPickerBase<TFunction>>
    fullName: OSharp.Extensions.TryCatchExtensions.TryFinally<Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase<TFunction>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1
    name: ModuleInfoPickerBase
    nameWithType: ModuleInfoPickerBase
    fullName: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1
    name: ModuleInfoPickerBase
    nameWithType: ModuleInfoPickerBase
    fullName: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.TryCatchExtensions.TryFinally``1(System.Action{``0},System.Action{``0})
    name: TryFinally(Of ModuleInfoPickerBase(Of TFunction))
    nameWithType: TryCatchExtensions.TryFinally(Of ModuleInfoPickerBase(Of TFunction))
    fullName: OSharp.Extensions.TryCatchExtensions.TryFinally(Of Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase(Of TFunction))
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1
    name: ModuleInfoPickerBase
    nameWithType: ModuleInfoPickerBase
    fullName: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1
    name: ModuleInfoPickerBase
    nameWithType: ModuleInfoPickerBase
    fullName: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.OSharp.Json.JsonExtensions.ToJsonString(System.Boolean,System.Boolean)
  commentId: M:OSharp.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
  parent: OSharp.Json.JsonExtensions
  definition: OSharp.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
  name: ToJsonString(Boolean, Boolean)
  nameWithType: JsonExtensions.ToJsonString(Boolean, Boolean)
  fullName: OSharp.Json.JsonExtensions.ToJsonString(System.Boolean, System.Boolean)
  spec.csharp:
  - uid: OSharp.Json.JsonExtensions.ToJsonString(System.Boolean,System.Boolean)
    name: ToJsonString
    nameWithType: JsonExtensions.ToJsonString
    fullName: OSharp.Json.JsonExtensions.ToJsonString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Json.JsonExtensions.ToJsonString(System.Boolean,System.Boolean)
    name: ToJsonString
    nameWithType: JsonExtensions.ToJsonString
    fullName: OSharp.Json.JsonExtensions.ToJsonString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.OSharp.Mapping.MapperExtensions.MapTo``1
  commentId: M:OSharp.Mapping.MapperExtensions.MapTo``1(System.Object)
  parent: OSharp.Mapping.MapperExtensions
  definition: OSharp.Mapping.MapperExtensions.MapTo``1(System.Object)
  name: MapTo<TTarget>()
  nameWithType: MapperExtensions.MapTo<TTarget>()
  fullName: OSharp.Mapping.MapperExtensions.MapTo<TTarget>()
  nameWithType.vb: MapperExtensions.MapTo(Of TTarget)()
  fullName.vb: OSharp.Mapping.MapperExtensions.MapTo(Of TTarget)()
  name.vb: MapTo(Of TTarget)()
  spec.csharp:
  - uid: OSharp.Mapping.MapperExtensions.MapTo``1
    name: MapTo<TTarget>
    nameWithType: MapperExtensions.MapTo<TTarget>
    fullName: OSharp.Mapping.MapperExtensions.MapTo<TTarget>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Mapping.MapperExtensions.MapTo``1
    name: MapTo(Of TTarget)
    nameWithType: MapperExtensions.MapTo(Of TTarget)
    fullName: OSharp.Mapping.MapperExtensions.MapTo(Of TTarget)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.OSharp.Mapping.MapperExtensions.MapTo``2({TTarget})
  commentId: M:OSharp.Mapping.MapperExtensions.MapTo``2(``0,``1)
  parent: OSharp.Mapping.MapperExtensions
  definition: OSharp.Mapping.MapperExtensions.MapTo``2(``0,``1)
  name: MapTo<ModuleInfoPickerBase<TFunction>, TTarget>(TTarget)
  nameWithType: MapperExtensions.MapTo<ModuleInfoPickerBase<TFunction>, TTarget>(TTarget)
  fullName: OSharp.Mapping.MapperExtensions.MapTo<Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase<TFunction>, TTarget>(TTarget)
  nameWithType.vb: MapperExtensions.MapTo(Of ModuleInfoPickerBase(Of TFunction), TTarget)(TTarget)
  fullName.vb: OSharp.Mapping.MapperExtensions.MapTo(Of Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase(Of TFunction), TTarget)(TTarget)
  name.vb: MapTo(Of ModuleInfoPickerBase(Of TFunction), TTarget)(TTarget)
  spec.csharp:
  - uid: OSharp.Mapping.MapperExtensions.MapTo``2(``1)
    name: MapTo<ModuleInfoPickerBase<TFunction>, TTarget>
    nameWithType: MapperExtensions.MapTo<ModuleInfoPickerBase<TFunction>, TTarget>
    fullName: OSharp.Mapping.MapperExtensions.MapTo<Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase<TFunction>, TTarget>
  - name: (
    nameWithType: (
    fullName: (
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Mapping.MapperExtensions.MapTo``2(``1)
    name: MapTo(Of ModuleInfoPickerBase(Of TFunction), TTarget)
    nameWithType: MapperExtensions.MapTo(Of ModuleInfoPickerBase(Of TFunction), TTarget)
    fullName: OSharp.Mapping.MapperExtensions.MapTo(Of Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase(Of TFunction), TTarget)
  - name: (
    nameWithType: (
    fullName: (
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.OSharp.Reflection.LockExtensions.Locking(System.Action)
  commentId: M:OSharp.Reflection.LockExtensions.Locking(System.Object,System.Action)
  parent: OSharp.Reflection.LockExtensions
  definition: OSharp.Reflection.LockExtensions.Locking(System.Object,System.Action)
  name: Locking(Action)
  nameWithType: LockExtensions.Locking(Action)
  fullName: OSharp.Reflection.LockExtensions.Locking(System.Action)
  spec.csharp:
  - uid: OSharp.Reflection.LockExtensions.Locking(System.Action)
    name: Locking
    nameWithType: LockExtensions.Locking
    fullName: OSharp.Reflection.LockExtensions.Locking
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Reflection.LockExtensions.Locking(System.Action)
    name: Locking
    nameWithType: LockExtensions.Locking
    fullName: OSharp.Reflection.LockExtensions.Locking
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.OSharp.Reflection.LockExtensions.Locking``1(System.Action{Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase{{TFunction}}})
  commentId: M:OSharp.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
  parent: OSharp.Reflection.LockExtensions
  definition: OSharp.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
  name: Locking<ModuleInfoPickerBase<TFunction>>(Action<ModuleInfoPickerBase<TFunction>>)
  nameWithType: LockExtensions.Locking<ModuleInfoPickerBase<TFunction>>(Action<ModuleInfoPickerBase<TFunction>>)
  fullName: OSharp.Reflection.LockExtensions.Locking<Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase<TFunction>>(System.Action<Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase<TFunction>>)
  nameWithType.vb: LockExtensions.Locking(Of ModuleInfoPickerBase(Of TFunction))(Action(Of ModuleInfoPickerBase(Of TFunction)))
  fullName.vb: OSharp.Reflection.LockExtensions.Locking(Of Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase(Of TFunction))(System.Action(Of Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase(Of TFunction)))
  name.vb: Locking(Of ModuleInfoPickerBase(Of TFunction))(Action(Of ModuleInfoPickerBase(Of TFunction)))
  spec.csharp:
  - uid: OSharp.Reflection.LockExtensions.Locking``1(System.Action{``0})
    name: Locking<ModuleInfoPickerBase<TFunction>>
    nameWithType: LockExtensions.Locking<ModuleInfoPickerBase<TFunction>>
    fullName: OSharp.Reflection.LockExtensions.Locking<Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase<TFunction>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1
    name: ModuleInfoPickerBase
    nameWithType: ModuleInfoPickerBase
    fullName: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Reflection.LockExtensions.Locking``1(System.Action{``0})
    name: Locking(Of ModuleInfoPickerBase(Of TFunction))
    nameWithType: LockExtensions.Locking(Of ModuleInfoPickerBase(Of TFunction))
    fullName: OSharp.Reflection.LockExtensions.Locking(Of Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase(Of TFunction))
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1
    name: ModuleInfoPickerBase
    nameWithType: ModuleInfoPickerBase
    fullName: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.OSharp.Reflection.LockExtensions.Locking``1(System.Func{{TResult}})
  commentId: M:OSharp.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
  parent: OSharp.Reflection.LockExtensions
  definition: OSharp.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
  name: Locking<TResult>(Func<TResult>)
  nameWithType: LockExtensions.Locking<TResult>(Func<TResult>)
  fullName: OSharp.Reflection.LockExtensions.Locking<TResult>(System.Func<TResult>)
  nameWithType.vb: LockExtensions.Locking(Of TResult)(Func(Of TResult))
  fullName.vb: OSharp.Reflection.LockExtensions.Locking(Of TResult)(System.Func(Of TResult))
  name.vb: Locking(Of TResult)(Func(Of TResult))
  spec.csharp:
  - uid: OSharp.Reflection.LockExtensions.Locking``1(System.Func{``0})
    name: Locking<TResult>
    nameWithType: LockExtensions.Locking<TResult>
    fullName: OSharp.Reflection.LockExtensions.Locking<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Reflection.LockExtensions.Locking``1(System.Func{``0})
    name: Locking(Of TResult)
    nameWithType: LockExtensions.Locking(Of TResult)
    fullName: OSharp.Reflection.LockExtensions.Locking(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.OSharp.Reflection.LockExtensions.Locking``2(System.Func{Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase{{TFunction}},{TResult}})
  commentId: M:OSharp.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
  parent: OSharp.Reflection.LockExtensions
  definition: OSharp.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
  name: Locking<ModuleInfoPickerBase<TFunction>, TResult>(Func<ModuleInfoPickerBase<TFunction>, TResult>)
  nameWithType: LockExtensions.Locking<ModuleInfoPickerBase<TFunction>, TResult>(Func<ModuleInfoPickerBase<TFunction>, TResult>)
  fullName: OSharp.Reflection.LockExtensions.Locking<Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase<TFunction>, TResult>(System.Func<Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase<TFunction>, TResult>)
  nameWithType.vb: LockExtensions.Locking(Of ModuleInfoPickerBase(Of TFunction), TResult)(Func(Of ModuleInfoPickerBase(Of TFunction), TResult))
  fullName.vb: OSharp.Reflection.LockExtensions.Locking(Of Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase(Of TFunction), TResult)(System.Func(Of Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase(Of TFunction), TResult))
  name.vb: Locking(Of ModuleInfoPickerBase(Of TFunction), TResult)(Func(Of ModuleInfoPickerBase(Of TFunction), TResult))
  spec.csharp:
  - uid: OSharp.Reflection.LockExtensions.Locking``2(System.Func{``0,``1})
    name: Locking<ModuleInfoPickerBase<TFunction>, TResult>
    nameWithType: LockExtensions.Locking<ModuleInfoPickerBase<TFunction>, TResult>
    fullName: OSharp.Reflection.LockExtensions.Locking<Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase<TFunction>, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1
    name: ModuleInfoPickerBase
    nameWithType: ModuleInfoPickerBase
    fullName: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Reflection.LockExtensions.Locking``2(System.Func{``0,``1})
    name: Locking(Of ModuleInfoPickerBase(Of TFunction), TResult)
    nameWithType: LockExtensions.Locking(Of ModuleInfoPickerBase(Of TFunction), TResult)
    fullName: OSharp.Reflection.LockExtensions.Locking(Of Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase(Of TFunction), TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1
    name: ModuleInfoPickerBase
    nameWithType: ModuleInfoPickerBase
    fullName: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Extensions.ObjectExtensions.CastTo(System.Type)
  commentId: M:Hybrid.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
  parent: Hybrid.Extensions.ObjectExtensions
  definition: Hybrid.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
  name: CastTo(Type)
  nameWithType: ObjectExtensions.CastTo(Type)
  fullName: Hybrid.Extensions.ObjectExtensions.CastTo(System.Type)
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo(System.Type)
    name: CastTo
    nameWithType: ObjectExtensions.CastTo
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo(System.Type)
    name: CastTo
    nameWithType: ObjectExtensions.CastTo
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Extensions.ObjectExtensions.CastTo``1
  commentId: M:Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object)
  parent: Hybrid.Extensions.ObjectExtensions
  definition: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object)
  name: CastTo<T>()
  nameWithType: ObjectExtensions.CastTo<T>()
  fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>()
  nameWithType.vb: ObjectExtensions.CastTo(Of T)()
  fullName.vb: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)()
  name.vb: CastTo(Of T)()
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1
    name: CastTo<T>
    nameWithType: ObjectExtensions.CastTo<T>
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1
    name: CastTo(Of T)
    nameWithType: ObjectExtensions.CastTo(Of T)
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Extensions.ObjectExtensions.CastTo``1({T})
  commentId: M:Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
  parent: Hybrid.Extensions.ObjectExtensions
  definition: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
  name: CastTo<T>(T)
  nameWithType: ObjectExtensions.CastTo<T>(T)
  fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>(T)
  nameWithType.vb: ObjectExtensions.CastTo(Of T)(T)
  fullName.vb: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)(T)
  name.vb: CastTo(Of T)(T)
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(``0)
    name: CastTo<T>
    nameWithType: ObjectExtensions.CastTo<T>
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(``0)
    name: CastTo(Of T)
    nameWithType: ObjectExtensions.CastTo(Of T)
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.Hybrid.Extensions.ObjectExtensions.IsIn``1(Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase{{TFunction}}[])
  commentId: M:Hybrid.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
  parent: Hybrid.Extensions.ObjectExtensions
  definition: Hybrid.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
  name: IsIn<ModuleInfoPickerBase<TFunction>>(ModuleInfoPickerBase<TFunction>[])
  nameWithType: ObjectExtensions.IsIn<ModuleInfoPickerBase<TFunction>>(ModuleInfoPickerBase<TFunction>[])
  fullName: Hybrid.Extensions.ObjectExtensions.IsIn<Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase<TFunction>>(Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase<TFunction>[])
  nameWithType.vb: ObjectExtensions.IsIn(Of ModuleInfoPickerBase(Of TFunction))(ModuleInfoPickerBase(Of TFunction)())
  fullName.vb: Hybrid.Extensions.ObjectExtensions.IsIn(Of Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase(Of TFunction))(Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase(Of TFunction)())
  name.vb: IsIn(Of ModuleInfoPickerBase(Of TFunction))(ModuleInfoPickerBase(Of TFunction)())
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.IsIn``1(``0[])
    name: IsIn<ModuleInfoPickerBase<TFunction>>
    nameWithType: ObjectExtensions.IsIn<ModuleInfoPickerBase<TFunction>>
    fullName: Hybrid.Extensions.ObjectExtensions.IsIn<Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase<TFunction>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1
    name: ModuleInfoPickerBase
    nameWithType: ModuleInfoPickerBase
    fullName: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.IsIn``1(``0[])
    name: IsIn(Of ModuleInfoPickerBase(Of TFunction))
    nameWithType: ObjectExtensions.IsIn(Of ModuleInfoPickerBase(Of TFunction))
    fullName: Hybrid.Extensions.ObjectExtensions.IsIn(Of Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase(Of TFunction))
  - name: (
    nameWithType: (
    fullName: (
  - uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1
    name: ModuleInfoPickerBase
    nameWithType: ModuleInfoPickerBase
    fullName: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Extensions.ObjectExtensions.ToDynamic
  commentId: M:Hybrid.Extensions.ObjectExtensions.ToDynamic(System.Object)
  parent: Hybrid.Extensions.ObjectExtensions
  definition: Hybrid.Extensions.ObjectExtensions.ToDynamic(System.Object)
  name: ToDynamic()
  nameWithType: ObjectExtensions.ToDynamic()
  fullName: Hybrid.Extensions.ObjectExtensions.ToDynamic()
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.ToDynamic
    name: ToDynamic
    nameWithType: ObjectExtensions.ToDynamic
    fullName: Hybrid.Extensions.ObjectExtensions.ToDynamic
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.ToDynamic
    name: ToDynamic
    nameWithType: ObjectExtensions.ToDynamic
    fullName: Hybrid.Extensions.ObjectExtensions.ToDynamic
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.Hybrid.Extensions.ObjectExtensions.DeepClone``1
  commentId: M:Hybrid.Extensions.ObjectExtensions.DeepClone``1(``0)
  parent: Hybrid.Extensions.ObjectExtensions
  definition: Hybrid.Extensions.ObjectExtensions.DeepClone``1(``0)
  name: DeepClone<ModuleInfoPickerBase<TFunction>>()
  nameWithType: ObjectExtensions.DeepClone<ModuleInfoPickerBase<TFunction>>()
  fullName: Hybrid.Extensions.ObjectExtensions.DeepClone<Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase<TFunction>>()
  nameWithType.vb: ObjectExtensions.DeepClone(Of ModuleInfoPickerBase(Of TFunction))()
  fullName.vb: Hybrid.Extensions.ObjectExtensions.DeepClone(Of Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase(Of TFunction))()
  name.vb: DeepClone(Of ModuleInfoPickerBase(Of TFunction))()
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.DeepClone``1
    name: DeepClone<ModuleInfoPickerBase<TFunction>>
    nameWithType: ObjectExtensions.DeepClone<ModuleInfoPickerBase<TFunction>>
    fullName: Hybrid.Extensions.ObjectExtensions.DeepClone<Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase<TFunction>>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.DeepClone``1
    name: DeepClone(Of ModuleInfoPickerBase(Of TFunction))
    nameWithType: ObjectExtensions.DeepClone(Of ModuleInfoPickerBase(Of TFunction))
    fullName: Hybrid.Extensions.ObjectExtensions.DeepClone(Of Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase(Of TFunction))
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.Hybrid.Extensions.ParameterCheckExtensions.Required``1(System.Func{Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase{{TFunction}},System.Boolean},System.String)
  commentId: M:Hybrid.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
  parent: Hybrid.Extensions.ParameterCheckExtensions
  definition: Hybrid.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
  name: Required<ModuleInfoPickerBase<TFunction>>(Func<ModuleInfoPickerBase<TFunction>, Boolean>, String)
  nameWithType: ParameterCheckExtensions.Required<ModuleInfoPickerBase<TFunction>>(Func<ModuleInfoPickerBase<TFunction>, Boolean>, String)
  fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase<TFunction>>(System.Func<Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase<TFunction>, System.Boolean>, System.String)
  nameWithType.vb: ParameterCheckExtensions.Required(Of ModuleInfoPickerBase(Of TFunction))(Func(Of ModuleInfoPickerBase(Of TFunction), Boolean), String)
  fullName.vb: Hybrid.Extensions.ParameterCheckExtensions.Required(Of Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase(Of TFunction))(System.Func(Of Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase(Of TFunction), System.Boolean), System.String)
  name.vb: Required(Of ModuleInfoPickerBase(Of TFunction))(Func(Of ModuleInfoPickerBase(Of TFunction), Boolean), String)
  spec.csharp:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``1(System.Func{``0,System.Boolean},System.String)
    name: Required<ModuleInfoPickerBase<TFunction>>
    nameWithType: ParameterCheckExtensions.Required<ModuleInfoPickerBase<TFunction>>
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase<TFunction>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1
    name: ModuleInfoPickerBase
    nameWithType: ModuleInfoPickerBase
    fullName: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``1(System.Func{``0,System.Boolean},System.String)
    name: Required(Of ModuleInfoPickerBase(Of TFunction))
    nameWithType: ParameterCheckExtensions.Required(Of ModuleInfoPickerBase(Of TFunction))
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required(Of Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase(Of TFunction))
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1
    name: ModuleInfoPickerBase
    nameWithType: ModuleInfoPickerBase
    fullName: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.Hybrid.Extensions.ParameterCheckExtensions.Required``2(System.Func{Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase{{TFunction}},System.Boolean},System.String)
  commentId: M:Hybrid.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
  parent: Hybrid.Extensions.ParameterCheckExtensions
  definition: Hybrid.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
  name: Required<ModuleInfoPickerBase<TFunction>, TException>(Func<ModuleInfoPickerBase<TFunction>, Boolean>, String)
  nameWithType: ParameterCheckExtensions.Required<ModuleInfoPickerBase<TFunction>, TException>(Func<ModuleInfoPickerBase<TFunction>, Boolean>, String)
  fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase<TFunction>, TException>(System.Func<Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase<TFunction>, System.Boolean>, System.String)
  nameWithType.vb: ParameterCheckExtensions.Required(Of ModuleInfoPickerBase(Of TFunction), TException)(Func(Of ModuleInfoPickerBase(Of TFunction), Boolean), String)
  fullName.vb: Hybrid.Extensions.ParameterCheckExtensions.Required(Of Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase(Of TFunction), TException)(System.Func(Of Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase(Of TFunction), System.Boolean), System.String)
  name.vb: Required(Of ModuleInfoPickerBase(Of TFunction), TException)(Func(Of ModuleInfoPickerBase(Of TFunction), Boolean), String)
  spec.csharp:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``2(System.Func{``0,System.Boolean},System.String)
    name: Required<ModuleInfoPickerBase<TFunction>, TException>
    nameWithType: ParameterCheckExtensions.Required<ModuleInfoPickerBase<TFunction>, TException>
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase<TFunction>, TException>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1
    name: ModuleInfoPickerBase
    nameWithType: ModuleInfoPickerBase
    fullName: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``2(System.Func{``0,System.Boolean},System.String)
    name: Required(Of ModuleInfoPickerBase(Of TFunction), TException)
    nameWithType: ParameterCheckExtensions.Required(Of ModuleInfoPickerBase(Of TFunction), TException)
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required(Of Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase(Of TFunction), TException)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1
    name: ModuleInfoPickerBase
    nameWithType: ModuleInfoPickerBase
    fullName: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(System.String)
  commentId: M:Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
  parent: Hybrid.Extensions.ParameterCheckExtensions
  definition: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
  name: CheckNotNull<ModuleInfoPickerBase<TFunction>>(String)
  nameWithType: ParameterCheckExtensions.CheckNotNull<ModuleInfoPickerBase<TFunction>>(String)
  fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull<Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase<TFunction>>(System.String)
  nameWithType.vb: ParameterCheckExtensions.CheckNotNull(Of ModuleInfoPickerBase(Of TFunction))(String)
  fullName.vb: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull(Of Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase(Of TFunction))(System.String)
  name.vb: CheckNotNull(Of ModuleInfoPickerBase(Of TFunction))(String)
  spec.csharp:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(System.String)
    name: CheckNotNull<ModuleInfoPickerBase<TFunction>>
    nameWithType: ParameterCheckExtensions.CheckNotNull<ModuleInfoPickerBase<TFunction>>
    fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull<Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase<TFunction>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(System.String)
    name: CheckNotNull(Of ModuleInfoPickerBase(Of TFunction))
    nameWithType: ParameterCheckExtensions.CheckNotNull(Of ModuleInfoPickerBase(Of TFunction))
    fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull(Of Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase(Of TFunction))
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase{{TFunction}}},System.Action{System.Exception},System.Action{Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase{{TFunction}}})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
  parent: Hybrid.Extensions.TryCatchExtensions
  definition: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
  name: TryCatch<ModuleInfoPickerBase<TFunction>>(Action<ModuleInfoPickerBase<TFunction>>, Action<Exception>, Action<ModuleInfoPickerBase<TFunction>>)
  nameWithType: TryCatchExtensions.TryCatch<ModuleInfoPickerBase<TFunction>>(Action<ModuleInfoPickerBase<TFunction>>, Action<Exception>, Action<ModuleInfoPickerBase<TFunction>>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase<TFunction>>(System.Action<Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase<TFunction>>, System.Action<System.Exception>, System.Action<Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase<TFunction>>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of ModuleInfoPickerBase(Of TFunction))(Action(Of ModuleInfoPickerBase(Of TFunction)), Action(Of Exception), Action(Of ModuleInfoPickerBase(Of TFunction)))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase(Of TFunction))(System.Action(Of Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase(Of TFunction)), System.Action(Of System.Exception), System.Action(Of Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase(Of TFunction)))
  name.vb: TryCatch(Of ModuleInfoPickerBase(Of TFunction))(Action(Of ModuleInfoPickerBase(Of TFunction)), Action(Of Exception), Action(Of ModuleInfoPickerBase(Of TFunction)))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{``0},System.Action{System.Exception},System.Action{``0})
    name: TryCatch<ModuleInfoPickerBase<TFunction>>
    nameWithType: TryCatchExtensions.TryCatch<ModuleInfoPickerBase<TFunction>>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase<TFunction>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1
    name: ModuleInfoPickerBase
    nameWithType: ModuleInfoPickerBase
    fullName: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1
    name: ModuleInfoPickerBase
    nameWithType: ModuleInfoPickerBase
    fullName: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{``0},System.Action{System.Exception},System.Action{``0})
    name: TryCatch(Of ModuleInfoPickerBase(Of TFunction))
    nameWithType: TryCatchExtensions.TryCatch(Of ModuleInfoPickerBase(Of TFunction))
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase(Of TFunction))
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1
    name: ModuleInfoPickerBase
    nameWithType: ModuleInfoPickerBase
    fullName: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1
    name: ModuleInfoPickerBase
    nameWithType: ModuleInfoPickerBase
    fullName: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase{{TFunction}}},System.Action{System.Exception})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
  parent: Hybrid.Extensions.TryCatchExtensions
  definition: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
  name: TryCatch<ModuleInfoPickerBase<TFunction>>(Action<ModuleInfoPickerBase<TFunction>>, Action<Exception>)
  nameWithType: TryCatchExtensions.TryCatch<ModuleInfoPickerBase<TFunction>>(Action<ModuleInfoPickerBase<TFunction>>, Action<Exception>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase<TFunction>>(System.Action<Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase<TFunction>>, System.Action<System.Exception>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of ModuleInfoPickerBase(Of TFunction))(Action(Of ModuleInfoPickerBase(Of TFunction)), Action(Of Exception))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase(Of TFunction))(System.Action(Of Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase(Of TFunction)), System.Action(Of System.Exception))
  name.vb: TryCatch(Of ModuleInfoPickerBase(Of TFunction))(Action(Of ModuleInfoPickerBase(Of TFunction)), Action(Of Exception))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{``0},System.Action{System.Exception})
    name: TryCatch<ModuleInfoPickerBase<TFunction>>
    nameWithType: TryCatchExtensions.TryCatch<ModuleInfoPickerBase<TFunction>>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase<TFunction>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1
    name: ModuleInfoPickerBase
    nameWithType: ModuleInfoPickerBase
    fullName: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{``0},System.Action{System.Exception})
    name: TryCatch(Of ModuleInfoPickerBase(Of TFunction))
    nameWithType: TryCatchExtensions.TryCatch(Of ModuleInfoPickerBase(Of TFunction))
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase(Of TFunction))
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1
    name: ModuleInfoPickerBase
    nameWithType: ModuleInfoPickerBase
    fullName: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase{{TFunction}},{TResult}},System.Action{System.Exception},System.Action{Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase{{TFunction}}})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
  parent: Hybrid.Extensions.TryCatchExtensions
  definition: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
  name: TryCatch<ModuleInfoPickerBase<TFunction>, TResult>(Func<ModuleInfoPickerBase<TFunction>, TResult>, Action<Exception>, Action<ModuleInfoPickerBase<TFunction>>)
  nameWithType: TryCatchExtensions.TryCatch<ModuleInfoPickerBase<TFunction>, TResult>(Func<ModuleInfoPickerBase<TFunction>, TResult>, Action<Exception>, Action<ModuleInfoPickerBase<TFunction>>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase<TFunction>, TResult>(System.Func<Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase<TFunction>, TResult>, System.Action<System.Exception>, System.Action<Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase<TFunction>>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of ModuleInfoPickerBase(Of TFunction), TResult)(Func(Of ModuleInfoPickerBase(Of TFunction), TResult), Action(Of Exception), Action(Of ModuleInfoPickerBase(Of TFunction)))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase(Of TFunction), TResult)(System.Func(Of Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase(Of TFunction), TResult), System.Action(Of System.Exception), System.Action(Of Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase(Of TFunction)))
  name.vb: TryCatch(Of ModuleInfoPickerBase(Of TFunction), TResult)(Func(Of ModuleInfoPickerBase(Of TFunction), TResult), Action(Of Exception), Action(Of ModuleInfoPickerBase(Of TFunction)))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
    name: TryCatch<ModuleInfoPickerBase<TFunction>, TResult>
    nameWithType: TryCatchExtensions.TryCatch<ModuleInfoPickerBase<TFunction>, TResult>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase<TFunction>, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1
    name: ModuleInfoPickerBase
    nameWithType: ModuleInfoPickerBase
    fullName: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1
    name: ModuleInfoPickerBase
    nameWithType: ModuleInfoPickerBase
    fullName: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
    name: TryCatch(Of ModuleInfoPickerBase(Of TFunction), TResult)
    nameWithType: TryCatchExtensions.TryCatch(Of ModuleInfoPickerBase(Of TFunction), TResult)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase(Of TFunction), TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1
    name: ModuleInfoPickerBase
    nameWithType: ModuleInfoPickerBase
    fullName: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1
    name: ModuleInfoPickerBase
    nameWithType: ModuleInfoPickerBase
    fullName: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase{{TFunction}},{TResult}},System.Action{System.Exception})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
  parent: Hybrid.Extensions.TryCatchExtensions
  definition: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
  name: TryCatch<ModuleInfoPickerBase<TFunction>, TResult>(Func<ModuleInfoPickerBase<TFunction>, TResult>, Action<Exception>)
  nameWithType: TryCatchExtensions.TryCatch<ModuleInfoPickerBase<TFunction>, TResult>(Func<ModuleInfoPickerBase<TFunction>, TResult>, Action<Exception>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase<TFunction>, TResult>(System.Func<Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase<TFunction>, TResult>, System.Action<System.Exception>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of ModuleInfoPickerBase(Of TFunction), TResult)(Func(Of ModuleInfoPickerBase(Of TFunction), TResult), Action(Of Exception))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase(Of TFunction), TResult)(System.Func(Of Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase(Of TFunction), TResult), System.Action(Of System.Exception))
  name.vb: TryCatch(Of ModuleInfoPickerBase(Of TFunction), TResult)(Func(Of ModuleInfoPickerBase(Of TFunction), TResult), Action(Of Exception))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{``0,``1},System.Action{System.Exception})
    name: TryCatch<ModuleInfoPickerBase<TFunction>, TResult>
    nameWithType: TryCatchExtensions.TryCatch<ModuleInfoPickerBase<TFunction>, TResult>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase<TFunction>, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1
    name: ModuleInfoPickerBase
    nameWithType: ModuleInfoPickerBase
    fullName: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{``0,``1},System.Action{System.Exception})
    name: TryCatch(Of ModuleInfoPickerBase(Of TFunction), TResult)
    nameWithType: TryCatchExtensions.TryCatch(Of ModuleInfoPickerBase(Of TFunction), TResult)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase(Of TFunction), TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1
    name: ModuleInfoPickerBase
    nameWithType: ModuleInfoPickerBase
    fullName: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.Hybrid.Extensions.TryCatchExtensions.TryFinally``1(System.Action{Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase{{TFunction}}},System.Action{Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase{{TFunction}}})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
  parent: Hybrid.Extensions.TryCatchExtensions
  definition: Hybrid.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
  name: TryFinally<ModuleInfoPickerBase<TFunction>>(Action<ModuleInfoPickerBase<TFunction>>, Action<ModuleInfoPickerBase<TFunction>>)
  nameWithType: TryCatchExtensions.TryFinally<ModuleInfoPickerBase<TFunction>>(Action<ModuleInfoPickerBase<TFunction>>, Action<ModuleInfoPickerBase<TFunction>>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryFinally<Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase<TFunction>>(System.Action<Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase<TFunction>>, System.Action<Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase<TFunction>>)
  nameWithType.vb: TryCatchExtensions.TryFinally(Of ModuleInfoPickerBase(Of TFunction))(Action(Of ModuleInfoPickerBase(Of TFunction)), Action(Of ModuleInfoPickerBase(Of TFunction)))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryFinally(Of Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase(Of TFunction))(System.Action(Of Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase(Of TFunction)), System.Action(Of Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase(Of TFunction)))
  name.vb: TryFinally(Of ModuleInfoPickerBase(Of TFunction))(Action(Of ModuleInfoPickerBase(Of TFunction)), Action(Of ModuleInfoPickerBase(Of TFunction)))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryFinally``1(System.Action{``0},System.Action{``0})
    name: TryFinally<ModuleInfoPickerBase<TFunction>>
    nameWithType: TryCatchExtensions.TryFinally<ModuleInfoPickerBase<TFunction>>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryFinally<Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase<TFunction>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1
    name: ModuleInfoPickerBase
    nameWithType: ModuleInfoPickerBase
    fullName: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1
    name: ModuleInfoPickerBase
    nameWithType: ModuleInfoPickerBase
    fullName: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryFinally``1(System.Action{``0},System.Action{``0})
    name: TryFinally(Of ModuleInfoPickerBase(Of TFunction))
    nameWithType: TryCatchExtensions.TryFinally(Of ModuleInfoPickerBase(Of TFunction))
    fullName: Hybrid.Extensions.TryCatchExtensions.TryFinally(Of Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase(Of TFunction))
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1
    name: ModuleInfoPickerBase
    nameWithType: ModuleInfoPickerBase
    fullName: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1
    name: ModuleInfoPickerBase
    nameWithType: ModuleInfoPickerBase
    fullName: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Json.JsonExtensions.ToJsonString(System.Boolean,System.Boolean)
  commentId: M:Hybrid.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
  parent: Hybrid.Json.JsonExtensions
  definition: Hybrid.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
  name: ToJsonString(Boolean, Boolean)
  nameWithType: JsonExtensions.ToJsonString(Boolean, Boolean)
  fullName: Hybrid.Json.JsonExtensions.ToJsonString(System.Boolean, System.Boolean)
  spec.csharp:
  - uid: Hybrid.Json.JsonExtensions.ToJsonString(System.Boolean,System.Boolean)
    name: ToJsonString
    nameWithType: JsonExtensions.ToJsonString
    fullName: Hybrid.Json.JsonExtensions.ToJsonString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Json.JsonExtensions.ToJsonString(System.Boolean,System.Boolean)
    name: ToJsonString
    nameWithType: JsonExtensions.ToJsonString
    fullName: Hybrid.Json.JsonExtensions.ToJsonString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Mapping.MapperExtensions.MapTo``1
  commentId: M:Hybrid.Mapping.MapperExtensions.MapTo``1(System.Object)
  parent: Hybrid.Mapping.MapperExtensions
  definition: Hybrid.Mapping.MapperExtensions.MapTo``1(System.Object)
  name: MapTo<TTarget>()
  nameWithType: MapperExtensions.MapTo<TTarget>()
  fullName: Hybrid.Mapping.MapperExtensions.MapTo<TTarget>()
  nameWithType.vb: MapperExtensions.MapTo(Of TTarget)()
  fullName.vb: Hybrid.Mapping.MapperExtensions.MapTo(Of TTarget)()
  name.vb: MapTo(Of TTarget)()
  spec.csharp:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``1
    name: MapTo<TTarget>
    nameWithType: MapperExtensions.MapTo<TTarget>
    fullName: Hybrid.Mapping.MapperExtensions.MapTo<TTarget>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``1
    name: MapTo(Of TTarget)
    nameWithType: MapperExtensions.MapTo(Of TTarget)
    fullName: Hybrid.Mapping.MapperExtensions.MapTo(Of TTarget)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.Hybrid.Mapping.MapperExtensions.MapTo``2({TTarget})
  commentId: M:Hybrid.Mapping.MapperExtensions.MapTo``2(``0,``1)
  parent: Hybrid.Mapping.MapperExtensions
  definition: Hybrid.Mapping.MapperExtensions.MapTo``2(``0,``1)
  name: MapTo<ModuleInfoPickerBase<TFunction>, TTarget>(TTarget)
  nameWithType: MapperExtensions.MapTo<ModuleInfoPickerBase<TFunction>, TTarget>(TTarget)
  fullName: Hybrid.Mapping.MapperExtensions.MapTo<Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase<TFunction>, TTarget>(TTarget)
  nameWithType.vb: MapperExtensions.MapTo(Of ModuleInfoPickerBase(Of TFunction), TTarget)(TTarget)
  fullName.vb: Hybrid.Mapping.MapperExtensions.MapTo(Of Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase(Of TFunction), TTarget)(TTarget)
  name.vb: MapTo(Of ModuleInfoPickerBase(Of TFunction), TTarget)(TTarget)
  spec.csharp:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``2(``1)
    name: MapTo<ModuleInfoPickerBase<TFunction>, TTarget>
    nameWithType: MapperExtensions.MapTo<ModuleInfoPickerBase<TFunction>, TTarget>
    fullName: Hybrid.Mapping.MapperExtensions.MapTo<Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase<TFunction>, TTarget>
  - name: (
    nameWithType: (
    fullName: (
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``2(``1)
    name: MapTo(Of ModuleInfoPickerBase(Of TFunction), TTarget)
    nameWithType: MapperExtensions.MapTo(Of ModuleInfoPickerBase(Of TFunction), TTarget)
    fullName: Hybrid.Mapping.MapperExtensions.MapTo(Of Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase(Of TFunction), TTarget)
  - name: (
    nameWithType: (
    fullName: (
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Reflection.LockExtensions.Locking(System.Action)
  commentId: M:Hybrid.Reflection.LockExtensions.Locking(System.Object,System.Action)
  parent: Hybrid.Reflection.LockExtensions
  definition: Hybrid.Reflection.LockExtensions.Locking(System.Object,System.Action)
  name: Locking(Action)
  nameWithType: LockExtensions.Locking(Action)
  fullName: Hybrid.Reflection.LockExtensions.Locking(System.Action)
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking(System.Action)
    name: Locking
    nameWithType: LockExtensions.Locking
    fullName: Hybrid.Reflection.LockExtensions.Locking
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking(System.Action)
    name: Locking
    nameWithType: LockExtensions.Locking
    fullName: Hybrid.Reflection.LockExtensions.Locking
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.Hybrid.Reflection.LockExtensions.Locking``1(System.Action{Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase{{TFunction}}})
  commentId: M:Hybrid.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
  parent: Hybrid.Reflection.LockExtensions
  definition: Hybrid.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
  name: Locking<ModuleInfoPickerBase<TFunction>>(Action<ModuleInfoPickerBase<TFunction>>)
  nameWithType: LockExtensions.Locking<ModuleInfoPickerBase<TFunction>>(Action<ModuleInfoPickerBase<TFunction>>)
  fullName: Hybrid.Reflection.LockExtensions.Locking<Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase<TFunction>>(System.Action<Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase<TFunction>>)
  nameWithType.vb: LockExtensions.Locking(Of ModuleInfoPickerBase(Of TFunction))(Action(Of ModuleInfoPickerBase(Of TFunction)))
  fullName.vb: Hybrid.Reflection.LockExtensions.Locking(Of Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase(Of TFunction))(System.Action(Of Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase(Of TFunction)))
  name.vb: Locking(Of ModuleInfoPickerBase(Of TFunction))(Action(Of ModuleInfoPickerBase(Of TFunction)))
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(System.Action{``0})
    name: Locking<ModuleInfoPickerBase<TFunction>>
    nameWithType: LockExtensions.Locking<ModuleInfoPickerBase<TFunction>>
    fullName: Hybrid.Reflection.LockExtensions.Locking<Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase<TFunction>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1
    name: ModuleInfoPickerBase
    nameWithType: ModuleInfoPickerBase
    fullName: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(System.Action{``0})
    name: Locking(Of ModuleInfoPickerBase(Of TFunction))
    nameWithType: LockExtensions.Locking(Of ModuleInfoPickerBase(Of TFunction))
    fullName: Hybrid.Reflection.LockExtensions.Locking(Of Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase(Of TFunction))
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1
    name: ModuleInfoPickerBase
    nameWithType: ModuleInfoPickerBase
    fullName: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Reflection.LockExtensions.Locking``1(System.Func{{TResult}})
  commentId: M:Hybrid.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
  parent: Hybrid.Reflection.LockExtensions
  definition: Hybrid.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
  name: Locking<TResult>(Func<TResult>)
  nameWithType: LockExtensions.Locking<TResult>(Func<TResult>)
  fullName: Hybrid.Reflection.LockExtensions.Locking<TResult>(System.Func<TResult>)
  nameWithType.vb: LockExtensions.Locking(Of TResult)(Func(Of TResult))
  fullName.vb: Hybrid.Reflection.LockExtensions.Locking(Of TResult)(System.Func(Of TResult))
  name.vb: Locking(Of TResult)(Func(Of TResult))
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(System.Func{``0})
    name: Locking<TResult>
    nameWithType: LockExtensions.Locking<TResult>
    fullName: Hybrid.Reflection.LockExtensions.Locking<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(System.Func{``0})
    name: Locking(Of TResult)
    nameWithType: LockExtensions.Locking(Of TResult)
    fullName: Hybrid.Reflection.LockExtensions.Locking(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.Hybrid.Reflection.LockExtensions.Locking``2(System.Func{Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase{{TFunction}},{TResult}})
  commentId: M:Hybrid.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
  parent: Hybrid.Reflection.LockExtensions
  definition: Hybrid.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
  name: Locking<ModuleInfoPickerBase<TFunction>, TResult>(Func<ModuleInfoPickerBase<TFunction>, TResult>)
  nameWithType: LockExtensions.Locking<ModuleInfoPickerBase<TFunction>, TResult>(Func<ModuleInfoPickerBase<TFunction>, TResult>)
  fullName: Hybrid.Reflection.LockExtensions.Locking<Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase<TFunction>, TResult>(System.Func<Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase<TFunction>, TResult>)
  nameWithType.vb: LockExtensions.Locking(Of ModuleInfoPickerBase(Of TFunction), TResult)(Func(Of ModuleInfoPickerBase(Of TFunction), TResult))
  fullName.vb: Hybrid.Reflection.LockExtensions.Locking(Of Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase(Of TFunction), TResult)(System.Func(Of Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase(Of TFunction), TResult))
  name.vb: Locking(Of ModuleInfoPickerBase(Of TFunction), TResult)(Func(Of ModuleInfoPickerBase(Of TFunction), TResult))
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking``2(System.Func{``0,``1})
    name: Locking<ModuleInfoPickerBase<TFunction>, TResult>
    nameWithType: LockExtensions.Locking<ModuleInfoPickerBase<TFunction>, TResult>
    fullName: Hybrid.Reflection.LockExtensions.Locking<Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase<TFunction>, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1
    name: ModuleInfoPickerBase
    nameWithType: ModuleInfoPickerBase
    fullName: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking``2(System.Func{``0,``1})
    name: Locking(Of ModuleInfoPickerBase(Of TFunction), TResult)
    nameWithType: LockExtensions.Locking(Of ModuleInfoPickerBase(Of TFunction), TResult)
    fullName: Hybrid.Reflection.LockExtensions.Locking(Of Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase(Of TFunction), TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1
    name: ModuleInfoPickerBase
    nameWithType: ModuleInfoPickerBase
    fullName: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2
  commentId: M:Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2(``0)
  parent: Hybrid.Domain.Entities.EntityExtensions
  definition: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2(``0)
  name: CheckICreatedTime<ModuleInfoPickerBase<TFunction>, TKey>()
  nameWithType: EntityExtensions.CheckICreatedTime<ModuleInfoPickerBase<TFunction>, TKey>()
  fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime<Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase<TFunction>, TKey>()
  nameWithType.vb: EntityExtensions.CheckICreatedTime(Of ModuleInfoPickerBase(Of TFunction), TKey)()
  fullName.vb: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime(Of Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase(Of TFunction), TKey)()
  name.vb: CheckICreatedTime(Of ModuleInfoPickerBase(Of TFunction), TKey)()
  spec.csharp:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2
    name: CheckICreatedTime<ModuleInfoPickerBase<TFunction>, TKey>
    nameWithType: EntityExtensions.CheckICreatedTime<ModuleInfoPickerBase<TFunction>, TKey>
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime<Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase<TFunction>, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2
    name: CheckICreatedTime(Of ModuleInfoPickerBase(Of TFunction), TKey)
    nameWithType: EntityExtensions.CheckICreatedTime(Of ModuleInfoPickerBase(Of TFunction), TKey)
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime(Of Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase(Of TFunction), TKey)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(System.Security.Principal.IPrincipal)
  commentId: M:Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
  parent: Hybrid.Domain.Entities.EntityExtensions
  definition: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
  name: CheckICreationAudited<ModuleInfoPickerBase<TFunction>, TKey, TUserKey>(IPrincipal)
  nameWithType: EntityExtensions.CheckICreationAudited<ModuleInfoPickerBase<TFunction>, TKey, TUserKey>(IPrincipal)
  fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited<Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase<TFunction>, TKey, TUserKey>(System.Security.Principal.IPrincipal)
  nameWithType.vb: EntityExtensions.CheckICreationAudited(Of ModuleInfoPickerBase(Of TFunction), TKey, TUserKey)(IPrincipal)
  fullName.vb: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited(Of Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase(Of TFunction), TKey, TUserKey)(System.Security.Principal.IPrincipal)
  name.vb: CheckICreationAudited(Of ModuleInfoPickerBase(Of TFunction), TKey, TUserKey)(IPrincipal)
  spec.csharp:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(System.Security.Principal.IPrincipal)
    name: CheckICreationAudited<ModuleInfoPickerBase<TFunction>, TKey, TUserKey>
    nameWithType: EntityExtensions.CheckICreationAudited<ModuleInfoPickerBase<TFunction>, TKey, TUserKey>
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited<Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase<TFunction>, TKey, TUserKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(System.Security.Principal.IPrincipal)
    name: CheckICreationAudited(Of ModuleInfoPickerBase(Of TFunction), TKey, TUserKey)
    nameWithType: EntityExtensions.CheckICreationAudited(Of ModuleInfoPickerBase(Of TFunction), TKey, TUserKey)
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited(Of Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase(Of TFunction), TKey, TUserKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(System.Security.Principal.IPrincipal)
  commentId: M:Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
  parent: Hybrid.Domain.Entities.EntityExtensions
  definition: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
  name: CheckIUpdateAudited<ModuleInfoPickerBase<TFunction>, TKey, TUserKey>(IPrincipal)
  nameWithType: EntityExtensions.CheckIUpdateAudited<ModuleInfoPickerBase<TFunction>, TKey, TUserKey>(IPrincipal)
  fullName: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited<Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase<TFunction>, TKey, TUserKey>(System.Security.Principal.IPrincipal)
  nameWithType.vb: EntityExtensions.CheckIUpdateAudited(Of ModuleInfoPickerBase(Of TFunction), TKey, TUserKey)(IPrincipal)
  fullName.vb: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited(Of Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase(Of TFunction), TKey, TUserKey)(System.Security.Principal.IPrincipal)
  name.vb: CheckIUpdateAudited(Of ModuleInfoPickerBase(Of TFunction), TKey, TUserKey)(IPrincipal)
  spec.csharp:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(System.Security.Principal.IPrincipal)
    name: CheckIUpdateAudited<ModuleInfoPickerBase<TFunction>, TKey, TUserKey>
    nameWithType: EntityExtensions.CheckIUpdateAudited<ModuleInfoPickerBase<TFunction>, TKey, TUserKey>
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited<Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase<TFunction>, TKey, TUserKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(System.Security.Principal.IPrincipal)
    name: CheckIUpdateAudited(Of ModuleInfoPickerBase(Of TFunction), TKey, TUserKey)
    nameWithType: EntityExtensions.CheckIUpdateAudited(Of ModuleInfoPickerBase(Of TFunction), TKey, TUserKey)
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited(Of Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase(Of TFunction), TKey, TUserKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: OSharp.Entity.EntityExtensions.CheckICreatedTime``2(``0)
  commentId: M:OSharp.Entity.EntityExtensions.CheckICreatedTime``2(``0)
  name: CheckICreatedTime<TEntity, TKey>(TEntity)
  nameWithType: EntityExtensions.CheckICreatedTime<TEntity, TKey>(TEntity)
  fullName: OSharp.Entity.EntityExtensions.CheckICreatedTime<TEntity, TKey>(TEntity)
  nameWithType.vb: EntityExtensions.CheckICreatedTime(Of TEntity, TKey)(TEntity)
  fullName.vb: OSharp.Entity.EntityExtensions.CheckICreatedTime(Of TEntity, TKey)(TEntity)
  name.vb: CheckICreatedTime(Of TEntity, TKey)(TEntity)
  spec.csharp:
  - uid: OSharp.Entity.EntityExtensions.CheckICreatedTime``2(``0)
    name: CheckICreatedTime<TEntity, TKey>
    nameWithType: EntityExtensions.CheckICreatedTime<TEntity, TKey>
    fullName: OSharp.Entity.EntityExtensions.CheckICreatedTime<TEntity, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Entity.EntityExtensions.CheckICreatedTime``2(``0)
    name: CheckICreatedTime(Of TEntity, TKey)
    nameWithType: EntityExtensions.CheckICreatedTime(Of TEntity, TKey)
    fullName: OSharp.Entity.EntityExtensions.CheckICreatedTime(Of TEntity, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Entity.EntityExtensions
  commentId: T:OSharp.Entity.EntityExtensions
  parent: OSharp.Entity
  name: EntityExtensions
  nameWithType: EntityExtensions
  fullName: OSharp.Entity.EntityExtensions
- uid: OSharp.Entity.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
  commentId: M:OSharp.Entity.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
  isExternal: true
  name: CheckICreationAudited<TEntity, TKey, TUserKey>(TEntity, IPrincipal)
  nameWithType: EntityExtensions.CheckICreationAudited<TEntity, TKey, TUserKey>(TEntity, IPrincipal)
  fullName: OSharp.Entity.EntityExtensions.CheckICreationAudited<TEntity, TKey, TUserKey>(TEntity, System.Security.Principal.IPrincipal)
  nameWithType.vb: EntityExtensions.CheckICreationAudited(Of TEntity, TKey, TUserKey)(TEntity, IPrincipal)
  fullName.vb: OSharp.Entity.EntityExtensions.CheckICreationAudited(Of TEntity, TKey, TUserKey)(TEntity, System.Security.Principal.IPrincipal)
  name.vb: CheckICreationAudited(Of TEntity, TKey, TUserKey)(TEntity, IPrincipal)
  spec.csharp:
  - uid: OSharp.Entity.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
    name: CheckICreationAudited<TEntity, TKey, TUserKey>
    nameWithType: EntityExtensions.CheckICreationAudited<TEntity, TKey, TUserKey>
    fullName: OSharp.Entity.EntityExtensions.CheckICreationAudited<TEntity, TKey, TUserKey>
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Entity.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
    name: CheckICreationAudited(Of TEntity, TKey, TUserKey)
    nameWithType: EntityExtensions.CheckICreationAudited(Of TEntity, TKey, TUserKey)
    fullName: OSharp.Entity.EntityExtensions.CheckICreationAudited(Of TEntity, TKey, TUserKey)
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Entity.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
  commentId: M:OSharp.Entity.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
  isExternal: true
  name: CheckIUpdateAudited<TEntity, TKey, TUserKey>(TEntity, IPrincipal)
  nameWithType: EntityExtensions.CheckIUpdateAudited<TEntity, TKey, TUserKey>(TEntity, IPrincipal)
  fullName: OSharp.Entity.EntityExtensions.CheckIUpdateAudited<TEntity, TKey, TUserKey>(TEntity, System.Security.Principal.IPrincipal)
  nameWithType.vb: EntityExtensions.CheckIUpdateAudited(Of TEntity, TKey, TUserKey)(TEntity, IPrincipal)
  fullName.vb: OSharp.Entity.EntityExtensions.CheckIUpdateAudited(Of TEntity, TKey, TUserKey)(TEntity, System.Security.Principal.IPrincipal)
  name.vb: CheckIUpdateAudited(Of TEntity, TKey, TUserKey)(TEntity, IPrincipal)
  spec.csharp:
  - uid: OSharp.Entity.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
    name: CheckIUpdateAudited<TEntity, TKey, TUserKey>
    nameWithType: EntityExtensions.CheckIUpdateAudited<TEntity, TKey, TUserKey>
    fullName: OSharp.Entity.EntityExtensions.CheckIUpdateAudited<TEntity, TKey, TUserKey>
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Entity.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
    name: CheckIUpdateAudited(Of TEntity, TKey, TUserKey)
    nameWithType: EntityExtensions.CheckIUpdateAudited(Of TEntity, TKey, TUserKey)
    fullName: OSharp.Entity.EntityExtensions.CheckIUpdateAudited(Of TEntity, TKey, TUserKey)
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
  commentId: M:OSharp.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
  isExternal: true
  name: CastTo(Object, Type)
  nameWithType: ObjectExtensions.CastTo(Object, Type)
  fullName: OSharp.Extensions.ObjectExtensions.CastTo(System.Object, System.Type)
  spec.csharp:
  - uid: OSharp.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
    name: CastTo
    nameWithType: ObjectExtensions.CastTo
    fullName: OSharp.Extensions.ObjectExtensions.CastTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
    name: CastTo
    nameWithType: ObjectExtensions.CastTo
    fullName: OSharp.Extensions.ObjectExtensions.CastTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Extensions.ObjectExtensions
  commentId: T:OSharp.Extensions.ObjectExtensions
  parent: OSharp.Extensions
  name: ObjectExtensions
  nameWithType: ObjectExtensions
  fullName: OSharp.Extensions.ObjectExtensions
- uid: OSharp.Extensions.ObjectExtensions.CastTo``1(System.Object)
  commentId: M:OSharp.Extensions.ObjectExtensions.CastTo``1(System.Object)
  isExternal: true
  name: CastTo<T>(Object)
  nameWithType: ObjectExtensions.CastTo<T>(Object)
  fullName: OSharp.Extensions.ObjectExtensions.CastTo<T>(System.Object)
  nameWithType.vb: ObjectExtensions.CastTo(Of T)(Object)
  fullName.vb: OSharp.Extensions.ObjectExtensions.CastTo(Of T)(System.Object)
  name.vb: CastTo(Of T)(Object)
  spec.csharp:
  - uid: OSharp.Extensions.ObjectExtensions.CastTo``1(System.Object)
    name: CastTo<T>
    nameWithType: ObjectExtensions.CastTo<T>
    fullName: OSharp.Extensions.ObjectExtensions.CastTo<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ObjectExtensions.CastTo``1(System.Object)
    name: CastTo(Of T)
    nameWithType: ObjectExtensions.CastTo(Of T)
    fullName: OSharp.Extensions.ObjectExtensions.CastTo(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
  commentId: M:OSharp.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
  isExternal: true
  name: CastTo<T>(Object, T)
  nameWithType: ObjectExtensions.CastTo<T>(Object, T)
  fullName: OSharp.Extensions.ObjectExtensions.CastTo<T>(System.Object, T)
  nameWithType.vb: ObjectExtensions.CastTo(Of T)(Object, T)
  fullName.vb: OSharp.Extensions.ObjectExtensions.CastTo(Of T)(System.Object, T)
  name.vb: CastTo(Of T)(Object, T)
  spec.csharp:
  - uid: OSharp.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
    name: CastTo<T>
    nameWithType: ObjectExtensions.CastTo<T>
    fullName: OSharp.Extensions.ObjectExtensions.CastTo<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
    name: CastTo(Of T)
    nameWithType: ObjectExtensions.CastTo(Of T)
    fullName: OSharp.Extensions.ObjectExtensions.CastTo(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
  commentId: M:OSharp.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
  name: IsIn<T>(T, T[])
  nameWithType: ObjectExtensions.IsIn<T>(T, T[])
  fullName: OSharp.Extensions.ObjectExtensions.IsIn<T>(T, T[])
  nameWithType.vb: ObjectExtensions.IsIn(Of T)(T, T())
  fullName.vb: OSharp.Extensions.ObjectExtensions.IsIn(Of T)(T, T())
  name.vb: IsIn(Of T)(T, T())
  spec.csharp:
  - uid: OSharp.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
    name: IsIn<T>
    nameWithType: ObjectExtensions.IsIn<T>
    fullName: OSharp.Extensions.ObjectExtensions.IsIn<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
    name: IsIn(Of T)
    nameWithType: ObjectExtensions.IsIn(Of T)
    fullName: OSharp.Extensions.ObjectExtensions.IsIn(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Extensions.ObjectExtensions.ToDynamic(System.Object)
  commentId: M:OSharp.Extensions.ObjectExtensions.ToDynamic(System.Object)
  isExternal: true
  name: ToDynamic(Object)
  nameWithType: ObjectExtensions.ToDynamic(Object)
  fullName: OSharp.Extensions.ObjectExtensions.ToDynamic(System.Object)
  spec.csharp:
  - uid: OSharp.Extensions.ObjectExtensions.ToDynamic(System.Object)
    name: ToDynamic
    nameWithType: ObjectExtensions.ToDynamic
    fullName: OSharp.Extensions.ObjectExtensions.ToDynamic
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ObjectExtensions.ToDynamic(System.Object)
    name: ToDynamic
    nameWithType: ObjectExtensions.ToDynamic
    fullName: OSharp.Extensions.ObjectExtensions.ToDynamic
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Extensions.ObjectExtensions.DeepClone``1(``0)
  commentId: M:OSharp.Extensions.ObjectExtensions.DeepClone``1(``0)
  name: DeepClone<T>(T)
  nameWithType: ObjectExtensions.DeepClone<T>(T)
  fullName: OSharp.Extensions.ObjectExtensions.DeepClone<T>(T)
  nameWithType.vb: ObjectExtensions.DeepClone(Of T)(T)
  fullName.vb: OSharp.Extensions.ObjectExtensions.DeepClone(Of T)(T)
  name.vb: DeepClone(Of T)(T)
  spec.csharp:
  - uid: OSharp.Extensions.ObjectExtensions.DeepClone``1(``0)
    name: DeepClone<T>
    nameWithType: ObjectExtensions.DeepClone<T>
    fullName: OSharp.Extensions.ObjectExtensions.DeepClone<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ObjectExtensions.DeepClone``1(``0)
    name: DeepClone(Of T)
    nameWithType: ObjectExtensions.DeepClone(Of T)
    fullName: OSharp.Extensions.ObjectExtensions.DeepClone(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
  commentId: M:OSharp.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
  isExternal: true
  name: Required<T>(T, Func<T, Boolean>, String)
  nameWithType: ParameterCheckExtensions.Required<T>(T, Func<T, Boolean>, String)
  fullName: OSharp.Extensions.ParameterCheckExtensions.Required<T>(T, System.Func<T, System.Boolean>, System.String)
  nameWithType.vb: ParameterCheckExtensions.Required(Of T)(T, Func(Of T, Boolean), String)
  fullName.vb: OSharp.Extensions.ParameterCheckExtensions.Required(Of T)(T, System.Func(Of T, System.Boolean), System.String)
  name.vb: Required(Of T)(T, Func(Of T, Boolean), String)
  spec.csharp:
  - uid: OSharp.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
    name: Required<T>
    nameWithType: ParameterCheckExtensions.Required<T>
    fullName: OSharp.Extensions.ParameterCheckExtensions.Required<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
    name: Required(Of T)
    nameWithType: ParameterCheckExtensions.Required(Of T)
    fullName: OSharp.Extensions.ParameterCheckExtensions.Required(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Extensions.ParameterCheckExtensions
  commentId: T:OSharp.Extensions.ParameterCheckExtensions
  parent: OSharp.Extensions
  name: ParameterCheckExtensions
  nameWithType: ParameterCheckExtensions
  fullName: OSharp.Extensions.ParameterCheckExtensions
- uid: OSharp.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
  commentId: M:OSharp.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
  isExternal: true
  name: Required<T, TException>(T, Func<T, Boolean>, String)
  nameWithType: ParameterCheckExtensions.Required<T, TException>(T, Func<T, Boolean>, String)
  fullName: OSharp.Extensions.ParameterCheckExtensions.Required<T, TException>(T, System.Func<T, System.Boolean>, System.String)
  nameWithType.vb: ParameterCheckExtensions.Required(Of T, TException)(T, Func(Of T, Boolean), String)
  fullName.vb: OSharp.Extensions.ParameterCheckExtensions.Required(Of T, TException)(T, System.Func(Of T, System.Boolean), System.String)
  name.vb: Required(Of T, TException)(T, Func(Of T, Boolean), String)
  spec.csharp:
  - uid: OSharp.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
    name: Required<T, TException>
    nameWithType: ParameterCheckExtensions.Required<T, TException>
    fullName: OSharp.Extensions.ParameterCheckExtensions.Required<T, TException>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
    name: Required(Of T, TException)
    nameWithType: ParameterCheckExtensions.Required(Of T, TException)
    fullName: OSharp.Extensions.ParameterCheckExtensions.Required(Of T, TException)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
  commentId: M:OSharp.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
  isExternal: true
  name: CheckNotNull<T>(T, String)
  nameWithType: ParameterCheckExtensions.CheckNotNull<T>(T, String)
  fullName: OSharp.Extensions.ParameterCheckExtensions.CheckNotNull<T>(T, System.String)
  nameWithType.vb: ParameterCheckExtensions.CheckNotNull(Of T)(T, String)
  fullName.vb: OSharp.Extensions.ParameterCheckExtensions.CheckNotNull(Of T)(T, System.String)
  name.vb: CheckNotNull(Of T)(T, String)
  spec.csharp:
  - uid: OSharp.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
    name: CheckNotNull<T>
    nameWithType: ParameterCheckExtensions.CheckNotNull<T>
    fullName: OSharp.Extensions.ParameterCheckExtensions.CheckNotNull<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
    name: CheckNotNull(Of T)
    nameWithType: ParameterCheckExtensions.CheckNotNull(Of T)
    fullName: OSharp.Extensions.ParameterCheckExtensions.CheckNotNull(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
  commentId: M:OSharp.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
  isExternal: true
  name: TryCatch<T>(T, Action<T>, Action<Exception>, Action<T>)
  nameWithType: TryCatchExtensions.TryCatch<T>(T, Action<T>, Action<Exception>, Action<T>)
  fullName: OSharp.Extensions.TryCatchExtensions.TryCatch<T>(T, System.Action<T>, System.Action<System.Exception>, System.Action<T>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of T)(T, Action(Of T), Action(Of Exception), Action(Of T))
  fullName.vb: OSharp.Extensions.TryCatchExtensions.TryCatch(Of T)(T, System.Action(Of T), System.Action(Of System.Exception), System.Action(Of T))
  name.vb: TryCatch(Of T)(T, Action(Of T), Action(Of Exception), Action(Of T))
  spec.csharp:
  - uid: OSharp.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
    name: TryCatch<T>
    nameWithType: TryCatchExtensions.TryCatch<T>
    fullName: OSharp.Extensions.TryCatchExtensions.TryCatch<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
    name: TryCatch(Of T)
    nameWithType: TryCatchExtensions.TryCatch(Of T)
    fullName: OSharp.Extensions.TryCatchExtensions.TryCatch(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Extensions.TryCatchExtensions
  commentId: T:OSharp.Extensions.TryCatchExtensions
  parent: OSharp.Extensions
  name: TryCatchExtensions
  nameWithType: TryCatchExtensions
  fullName: OSharp.Extensions.TryCatchExtensions
- uid: OSharp.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
  commentId: M:OSharp.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
  isExternal: true
  name: TryCatch<T>(T, Action<T>, Action<Exception>)
  nameWithType: TryCatchExtensions.TryCatch<T>(T, Action<T>, Action<Exception>)
  fullName: OSharp.Extensions.TryCatchExtensions.TryCatch<T>(T, System.Action<T>, System.Action<System.Exception>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of T)(T, Action(Of T), Action(Of Exception))
  fullName.vb: OSharp.Extensions.TryCatchExtensions.TryCatch(Of T)(T, System.Action(Of T), System.Action(Of System.Exception))
  name.vb: TryCatch(Of T)(T, Action(Of T), Action(Of Exception))
  spec.csharp:
  - uid: OSharp.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
    name: TryCatch<T>
    nameWithType: TryCatchExtensions.TryCatch<T>
    fullName: OSharp.Extensions.TryCatchExtensions.TryCatch<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
    name: TryCatch(Of T)
    nameWithType: TryCatchExtensions.TryCatch(Of T)
    fullName: OSharp.Extensions.TryCatchExtensions.TryCatch(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
  commentId: M:OSharp.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
  isExternal: true
  name: TryCatch<T, TResult>(T, Func<T, TResult>, Action<Exception>, Action<T>)
  nameWithType: TryCatchExtensions.TryCatch<T, TResult>(T, Func<T, TResult>, Action<Exception>, Action<T>)
  fullName: OSharp.Extensions.TryCatchExtensions.TryCatch<T, TResult>(T, System.Func<T, TResult>, System.Action<System.Exception>, System.Action<T>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of T, TResult)(T, Func(Of T, TResult), Action(Of Exception), Action(Of T))
  fullName.vb: OSharp.Extensions.TryCatchExtensions.TryCatch(Of T, TResult)(T, System.Func(Of T, TResult), System.Action(Of System.Exception), System.Action(Of T))
  name.vb: TryCatch(Of T, TResult)(T, Func(Of T, TResult), Action(Of Exception), Action(Of T))
  spec.csharp:
  - uid: OSharp.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
    name: TryCatch<T, TResult>
    nameWithType: TryCatchExtensions.TryCatch<T, TResult>
    fullName: OSharp.Extensions.TryCatchExtensions.TryCatch<T, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
    name: TryCatch(Of T, TResult)
    nameWithType: TryCatchExtensions.TryCatch(Of T, TResult)
    fullName: OSharp.Extensions.TryCatchExtensions.TryCatch(Of T, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
  commentId: M:OSharp.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
  isExternal: true
  name: TryCatch<T, TResult>(T, Func<T, TResult>, Action<Exception>)
  nameWithType: TryCatchExtensions.TryCatch<T, TResult>(T, Func<T, TResult>, Action<Exception>)
  fullName: OSharp.Extensions.TryCatchExtensions.TryCatch<T, TResult>(T, System.Func<T, TResult>, System.Action<System.Exception>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of T, TResult)(T, Func(Of T, TResult), Action(Of Exception))
  fullName.vb: OSharp.Extensions.TryCatchExtensions.TryCatch(Of T, TResult)(T, System.Func(Of T, TResult), System.Action(Of System.Exception))
  name.vb: TryCatch(Of T, TResult)(T, Func(Of T, TResult), Action(Of Exception))
  spec.csharp:
  - uid: OSharp.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
    name: TryCatch<T, TResult>
    nameWithType: TryCatchExtensions.TryCatch<T, TResult>
    fullName: OSharp.Extensions.TryCatchExtensions.TryCatch<T, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
    name: TryCatch(Of T, TResult)
    nameWithType: TryCatchExtensions.TryCatch(Of T, TResult)
    fullName: OSharp.Extensions.TryCatchExtensions.TryCatch(Of T, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
  commentId: M:OSharp.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
  isExternal: true
  name: TryFinally<T>(T, Action<T>, Action<T>)
  nameWithType: TryCatchExtensions.TryFinally<T>(T, Action<T>, Action<T>)
  fullName: OSharp.Extensions.TryCatchExtensions.TryFinally<T>(T, System.Action<T>, System.Action<T>)
  nameWithType.vb: TryCatchExtensions.TryFinally(Of T)(T, Action(Of T), Action(Of T))
  fullName.vb: OSharp.Extensions.TryCatchExtensions.TryFinally(Of T)(T, System.Action(Of T), System.Action(Of T))
  name.vb: TryFinally(Of T)(T, Action(Of T), Action(Of T))
  spec.csharp:
  - uid: OSharp.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
    name: TryFinally<T>
    nameWithType: TryCatchExtensions.TryFinally<T>
    fullName: OSharp.Extensions.TryCatchExtensions.TryFinally<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
    name: TryFinally(Of T)
    nameWithType: TryCatchExtensions.TryFinally(Of T)
    fullName: OSharp.Extensions.TryCatchExtensions.TryFinally(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
  commentId: M:OSharp.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
  isExternal: true
  name: ToJsonString(Object, Boolean, Boolean)
  nameWithType: JsonExtensions.ToJsonString(Object, Boolean, Boolean)
  fullName: OSharp.Json.JsonExtensions.ToJsonString(System.Object, System.Boolean, System.Boolean)
  spec.csharp:
  - uid: OSharp.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
    name: ToJsonString
    nameWithType: JsonExtensions.ToJsonString
    fullName: OSharp.Json.JsonExtensions.ToJsonString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
    name: ToJsonString
    nameWithType: JsonExtensions.ToJsonString
    fullName: OSharp.Json.JsonExtensions.ToJsonString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Json.JsonExtensions
  commentId: T:OSharp.Json.JsonExtensions
  parent: OSharp.Json
  name: JsonExtensions
  nameWithType: JsonExtensions
  fullName: OSharp.Json.JsonExtensions
- uid: OSharp.Mapping.MapperExtensions.MapTo``1(System.Object)
  commentId: M:OSharp.Mapping.MapperExtensions.MapTo``1(System.Object)
  isExternal: true
  name: MapTo<TTarget>(Object)
  nameWithType: MapperExtensions.MapTo<TTarget>(Object)
  fullName: OSharp.Mapping.MapperExtensions.MapTo<TTarget>(System.Object)
  nameWithType.vb: MapperExtensions.MapTo(Of TTarget)(Object)
  fullName.vb: OSharp.Mapping.MapperExtensions.MapTo(Of TTarget)(System.Object)
  name.vb: MapTo(Of TTarget)(Object)
  spec.csharp:
  - uid: OSharp.Mapping.MapperExtensions.MapTo``1(System.Object)
    name: MapTo<TTarget>
    nameWithType: MapperExtensions.MapTo<TTarget>
    fullName: OSharp.Mapping.MapperExtensions.MapTo<TTarget>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Mapping.MapperExtensions.MapTo``1(System.Object)
    name: MapTo(Of TTarget)
    nameWithType: MapperExtensions.MapTo(Of TTarget)
    fullName: OSharp.Mapping.MapperExtensions.MapTo(Of TTarget)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Mapping.MapperExtensions
  commentId: T:OSharp.Mapping.MapperExtensions
  parent: OSharp.Mapping
  name: MapperExtensions
  nameWithType: MapperExtensions
  fullName: OSharp.Mapping.MapperExtensions
- uid: OSharp.Mapping.MapperExtensions.MapTo``2(``0,``1)
  commentId: M:OSharp.Mapping.MapperExtensions.MapTo``2(``0,``1)
  name: MapTo<TSource, TTarget>(TSource, TTarget)
  nameWithType: MapperExtensions.MapTo<TSource, TTarget>(TSource, TTarget)
  fullName: OSharp.Mapping.MapperExtensions.MapTo<TSource, TTarget>(TSource, TTarget)
  nameWithType.vb: MapperExtensions.MapTo(Of TSource, TTarget)(TSource, TTarget)
  fullName.vb: OSharp.Mapping.MapperExtensions.MapTo(Of TSource, TTarget)(TSource, TTarget)
  name.vb: MapTo(Of TSource, TTarget)(TSource, TTarget)
  spec.csharp:
  - uid: OSharp.Mapping.MapperExtensions.MapTo``2(``0,``1)
    name: MapTo<TSource, TTarget>
    nameWithType: MapperExtensions.MapTo<TSource, TTarget>
    fullName: OSharp.Mapping.MapperExtensions.MapTo<TSource, TTarget>
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Mapping.MapperExtensions.MapTo``2(``0,``1)
    name: MapTo(Of TSource, TTarget)
    nameWithType: MapperExtensions.MapTo(Of TSource, TTarget)
    fullName: OSharp.Mapping.MapperExtensions.MapTo(Of TSource, TTarget)
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Reflection.LockExtensions.Locking(System.Object,System.Action)
  commentId: M:OSharp.Reflection.LockExtensions.Locking(System.Object,System.Action)
  isExternal: true
  name: Locking(Object, Action)
  nameWithType: LockExtensions.Locking(Object, Action)
  fullName: OSharp.Reflection.LockExtensions.Locking(System.Object, System.Action)
  spec.csharp:
  - uid: OSharp.Reflection.LockExtensions.Locking(System.Object,System.Action)
    name: Locking
    nameWithType: LockExtensions.Locking
    fullName: OSharp.Reflection.LockExtensions.Locking
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Reflection.LockExtensions.Locking(System.Object,System.Action)
    name: Locking
    nameWithType: LockExtensions.Locking
    fullName: OSharp.Reflection.LockExtensions.Locking
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Reflection.LockExtensions
  commentId: T:OSharp.Reflection.LockExtensions
  parent: OSharp.Reflection
  name: LockExtensions
  nameWithType: LockExtensions
  fullName: OSharp.Reflection.LockExtensions
- uid: OSharp.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
  commentId: M:OSharp.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
  isExternal: true
  name: Locking<T>(T, Action<T>)
  nameWithType: LockExtensions.Locking<T>(T, Action<T>)
  fullName: OSharp.Reflection.LockExtensions.Locking<T>(T, System.Action<T>)
  nameWithType.vb: LockExtensions.Locking(Of T)(T, Action(Of T))
  fullName.vb: OSharp.Reflection.LockExtensions.Locking(Of T)(T, System.Action(Of T))
  name.vb: Locking(Of T)(T, Action(Of T))
  spec.csharp:
  - uid: OSharp.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
    name: Locking<T>
    nameWithType: LockExtensions.Locking<T>
    fullName: OSharp.Reflection.LockExtensions.Locking<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
    name: Locking(Of T)
    nameWithType: LockExtensions.Locking(Of T)
    fullName: OSharp.Reflection.LockExtensions.Locking(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
  commentId: M:OSharp.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
  isExternal: true
  name: Locking<TResult>(Object, Func<TResult>)
  nameWithType: LockExtensions.Locking<TResult>(Object, Func<TResult>)
  fullName: OSharp.Reflection.LockExtensions.Locking<TResult>(System.Object, System.Func<TResult>)
  nameWithType.vb: LockExtensions.Locking(Of TResult)(Object, Func(Of TResult))
  fullName.vb: OSharp.Reflection.LockExtensions.Locking(Of TResult)(System.Object, System.Func(Of TResult))
  name.vb: Locking(Of TResult)(Object, Func(Of TResult))
  spec.csharp:
  - uid: OSharp.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
    name: Locking<TResult>
    nameWithType: LockExtensions.Locking<TResult>
    fullName: OSharp.Reflection.LockExtensions.Locking<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
    name: Locking(Of TResult)
    nameWithType: LockExtensions.Locking(Of TResult)
    fullName: OSharp.Reflection.LockExtensions.Locking(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
  commentId: M:OSharp.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
  isExternal: true
  name: Locking<TSource, TResult>(TSource, Func<TSource, TResult>)
  nameWithType: LockExtensions.Locking<TSource, TResult>(TSource, Func<TSource, TResult>)
  fullName: OSharp.Reflection.LockExtensions.Locking<TSource, TResult>(TSource, System.Func<TSource, TResult>)
  nameWithType.vb: LockExtensions.Locking(Of TSource, TResult)(TSource, Func(Of TSource, TResult))
  fullName.vb: OSharp.Reflection.LockExtensions.Locking(Of TSource, TResult)(TSource, System.Func(Of TSource, TResult))
  name.vb: Locking(Of TSource, TResult)(TSource, Func(Of TSource, TResult))
  spec.csharp:
  - uid: OSharp.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
    name: Locking<TSource, TResult>
    nameWithType: LockExtensions.Locking<TSource, TResult>
    fullName: OSharp.Reflection.LockExtensions.Locking<TSource, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
    name: Locking(Of TSource, TResult)
    nameWithType: LockExtensions.Locking(Of TSource, TResult)
    fullName: OSharp.Reflection.LockExtensions.Locking(Of TSource, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
  commentId: M:Hybrid.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
  isExternal: true
  name: CastTo(Object, Type)
  nameWithType: ObjectExtensions.CastTo(Object, Type)
  fullName: Hybrid.Extensions.ObjectExtensions.CastTo(System.Object, System.Type)
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
    name: CastTo
    nameWithType: ObjectExtensions.CastTo
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
    name: CastTo
    nameWithType: ObjectExtensions.CastTo
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ObjectExtensions
  commentId: T:Hybrid.Extensions.ObjectExtensions
  parent: Hybrid.Extensions
  name: ObjectExtensions
  nameWithType: ObjectExtensions
  fullName: Hybrid.Extensions.ObjectExtensions
- uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object)
  commentId: M:Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object)
  isExternal: true
  name: CastTo<T>(Object)
  nameWithType: ObjectExtensions.CastTo<T>(Object)
  fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>(System.Object)
  nameWithType.vb: ObjectExtensions.CastTo(Of T)(Object)
  fullName.vb: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)(System.Object)
  name.vb: CastTo(Of T)(Object)
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object)
    name: CastTo<T>
    nameWithType: ObjectExtensions.CastTo<T>
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object)
    name: CastTo(Of T)
    nameWithType: ObjectExtensions.CastTo(Of T)
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
  commentId: M:Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
  isExternal: true
  name: CastTo<T>(Object, T)
  nameWithType: ObjectExtensions.CastTo<T>(Object, T)
  fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>(System.Object, T)
  nameWithType.vb: ObjectExtensions.CastTo(Of T)(Object, T)
  fullName.vb: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)(System.Object, T)
  name.vb: CastTo(Of T)(Object, T)
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
    name: CastTo<T>
    nameWithType: ObjectExtensions.CastTo<T>
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
    name: CastTo(Of T)
    nameWithType: ObjectExtensions.CastTo(Of T)
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
  commentId: M:Hybrid.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
  name: IsIn<T>(T, T[])
  nameWithType: ObjectExtensions.IsIn<T>(T, T[])
  fullName: Hybrid.Extensions.ObjectExtensions.IsIn<T>(T, T[])
  nameWithType.vb: ObjectExtensions.IsIn(Of T)(T, T())
  fullName.vb: Hybrid.Extensions.ObjectExtensions.IsIn(Of T)(T, T())
  name.vb: IsIn(Of T)(T, T())
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
    name: IsIn<T>
    nameWithType: ObjectExtensions.IsIn<T>
    fullName: Hybrid.Extensions.ObjectExtensions.IsIn<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
    name: IsIn(Of T)
    nameWithType: ObjectExtensions.IsIn(Of T)
    fullName: Hybrid.Extensions.ObjectExtensions.IsIn(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ObjectExtensions.ToDynamic(System.Object)
  commentId: M:Hybrid.Extensions.ObjectExtensions.ToDynamic(System.Object)
  isExternal: true
  name: ToDynamic(Object)
  nameWithType: ObjectExtensions.ToDynamic(Object)
  fullName: Hybrid.Extensions.ObjectExtensions.ToDynamic(System.Object)
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.ToDynamic(System.Object)
    name: ToDynamic
    nameWithType: ObjectExtensions.ToDynamic
    fullName: Hybrid.Extensions.ObjectExtensions.ToDynamic
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.ToDynamic(System.Object)
    name: ToDynamic
    nameWithType: ObjectExtensions.ToDynamic
    fullName: Hybrid.Extensions.ObjectExtensions.ToDynamic
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ObjectExtensions.DeepClone``1(``0)
  commentId: M:Hybrid.Extensions.ObjectExtensions.DeepClone``1(``0)
  name: DeepClone<T>(T)
  nameWithType: ObjectExtensions.DeepClone<T>(T)
  fullName: Hybrid.Extensions.ObjectExtensions.DeepClone<T>(T)
  nameWithType.vb: ObjectExtensions.DeepClone(Of T)(T)
  fullName.vb: Hybrid.Extensions.ObjectExtensions.DeepClone(Of T)(T)
  name.vb: DeepClone(Of T)(T)
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.DeepClone``1(``0)
    name: DeepClone<T>
    nameWithType: ObjectExtensions.DeepClone<T>
    fullName: Hybrid.Extensions.ObjectExtensions.DeepClone<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.DeepClone``1(``0)
    name: DeepClone(Of T)
    nameWithType: ObjectExtensions.DeepClone(Of T)
    fullName: Hybrid.Extensions.ObjectExtensions.DeepClone(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
  commentId: M:Hybrid.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
  isExternal: true
  name: Required<T>(T, Func<T, Boolean>, String)
  nameWithType: ParameterCheckExtensions.Required<T>(T, Func<T, Boolean>, String)
  fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<T>(T, System.Func<T, System.Boolean>, System.String)
  nameWithType.vb: ParameterCheckExtensions.Required(Of T)(T, Func(Of T, Boolean), String)
  fullName.vb: Hybrid.Extensions.ParameterCheckExtensions.Required(Of T)(T, System.Func(Of T, System.Boolean), System.String)
  name.vb: Required(Of T)(T, Func(Of T, Boolean), String)
  spec.csharp:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
    name: Required<T>
    nameWithType: ParameterCheckExtensions.Required<T>
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
    name: Required(Of T)
    nameWithType: ParameterCheckExtensions.Required(Of T)
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ParameterCheckExtensions
  commentId: T:Hybrid.Extensions.ParameterCheckExtensions
  parent: Hybrid.Extensions
  name: ParameterCheckExtensions
  nameWithType: ParameterCheckExtensions
  fullName: Hybrid.Extensions.ParameterCheckExtensions
- uid: Hybrid.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
  commentId: M:Hybrid.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
  isExternal: true
  name: Required<T, TException>(T, Func<T, Boolean>, String)
  nameWithType: ParameterCheckExtensions.Required<T, TException>(T, Func<T, Boolean>, String)
  fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<T, TException>(T, System.Func<T, System.Boolean>, System.String)
  nameWithType.vb: ParameterCheckExtensions.Required(Of T, TException)(T, Func(Of T, Boolean), String)
  fullName.vb: Hybrid.Extensions.ParameterCheckExtensions.Required(Of T, TException)(T, System.Func(Of T, System.Boolean), System.String)
  name.vb: Required(Of T, TException)(T, Func(Of T, Boolean), String)
  spec.csharp:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
    name: Required<T, TException>
    nameWithType: ParameterCheckExtensions.Required<T, TException>
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<T, TException>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
    name: Required(Of T, TException)
    nameWithType: ParameterCheckExtensions.Required(Of T, TException)
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required(Of T, TException)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
  commentId: M:Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
  isExternal: true
  name: CheckNotNull<T>(T, String)
  nameWithType: ParameterCheckExtensions.CheckNotNull<T>(T, String)
  fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull<T>(T, System.String)
  nameWithType.vb: ParameterCheckExtensions.CheckNotNull(Of T)(T, String)
  fullName.vb: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull(Of T)(T, System.String)
  name.vb: CheckNotNull(Of T)(T, String)
  spec.csharp:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
    name: CheckNotNull<T>
    nameWithType: ParameterCheckExtensions.CheckNotNull<T>
    fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
    name: CheckNotNull(Of T)
    nameWithType: ParameterCheckExtensions.CheckNotNull(Of T)
    fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
  isExternal: true
  name: TryCatch<T>(T, Action<T>, Action<Exception>, Action<T>)
  nameWithType: TryCatchExtensions.TryCatch<T>(T, Action<T>, Action<Exception>, Action<T>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T>(T, System.Action<T>, System.Action<System.Exception>, System.Action<T>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of T)(T, Action(Of T), Action(Of Exception), Action(Of T))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T)(T, System.Action(Of T), System.Action(Of System.Exception), System.Action(Of T))
  name.vb: TryCatch(Of T)(T, Action(Of T), Action(Of Exception), Action(Of T))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
    name: TryCatch<T>
    nameWithType: TryCatchExtensions.TryCatch<T>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
    name: TryCatch(Of T)
    nameWithType: TryCatchExtensions.TryCatch(Of T)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.TryCatchExtensions
  commentId: T:Hybrid.Extensions.TryCatchExtensions
  parent: Hybrid.Extensions
  name: TryCatchExtensions
  nameWithType: TryCatchExtensions
  fullName: Hybrid.Extensions.TryCatchExtensions
- uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
  isExternal: true
  name: TryCatch<T>(T, Action<T>, Action<Exception>)
  nameWithType: TryCatchExtensions.TryCatch<T>(T, Action<T>, Action<Exception>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T>(T, System.Action<T>, System.Action<System.Exception>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of T)(T, Action(Of T), Action(Of Exception))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T)(T, System.Action(Of T), System.Action(Of System.Exception))
  name.vb: TryCatch(Of T)(T, Action(Of T), Action(Of Exception))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
    name: TryCatch<T>
    nameWithType: TryCatchExtensions.TryCatch<T>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
    name: TryCatch(Of T)
    nameWithType: TryCatchExtensions.TryCatch(Of T)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
  isExternal: true
  name: TryCatch<T, TResult>(T, Func<T, TResult>, Action<Exception>, Action<T>)
  nameWithType: TryCatchExtensions.TryCatch<T, TResult>(T, Func<T, TResult>, Action<Exception>, Action<T>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T, TResult>(T, System.Func<T, TResult>, System.Action<System.Exception>, System.Action<T>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of T, TResult)(T, Func(Of T, TResult), Action(Of Exception), Action(Of T))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T, TResult)(T, System.Func(Of T, TResult), System.Action(Of System.Exception), System.Action(Of T))
  name.vb: TryCatch(Of T, TResult)(T, Func(Of T, TResult), Action(Of Exception), Action(Of T))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
    name: TryCatch<T, TResult>
    nameWithType: TryCatchExtensions.TryCatch<T, TResult>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
    name: TryCatch(Of T, TResult)
    nameWithType: TryCatchExtensions.TryCatch(Of T, TResult)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
  isExternal: true
  name: TryCatch<T, TResult>(T, Func<T, TResult>, Action<Exception>)
  nameWithType: TryCatchExtensions.TryCatch<T, TResult>(T, Func<T, TResult>, Action<Exception>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T, TResult>(T, System.Func<T, TResult>, System.Action<System.Exception>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of T, TResult)(T, Func(Of T, TResult), Action(Of Exception))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T, TResult)(T, System.Func(Of T, TResult), System.Action(Of System.Exception))
  name.vb: TryCatch(Of T, TResult)(T, Func(Of T, TResult), Action(Of Exception))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
    name: TryCatch<T, TResult>
    nameWithType: TryCatchExtensions.TryCatch<T, TResult>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
    name: TryCatch(Of T, TResult)
    nameWithType: TryCatchExtensions.TryCatch(Of T, TResult)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
  isExternal: true
  name: TryFinally<T>(T, Action<T>, Action<T>)
  nameWithType: TryCatchExtensions.TryFinally<T>(T, Action<T>, Action<T>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryFinally<T>(T, System.Action<T>, System.Action<T>)
  nameWithType.vb: TryCatchExtensions.TryFinally(Of T)(T, Action(Of T), Action(Of T))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryFinally(Of T)(T, System.Action(Of T), System.Action(Of T))
  name.vb: TryFinally(Of T)(T, Action(Of T), Action(Of T))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
    name: TryFinally<T>
    nameWithType: TryCatchExtensions.TryFinally<T>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryFinally<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
    name: TryFinally(Of T)
    nameWithType: TryCatchExtensions.TryFinally(Of T)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryFinally(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
  commentId: M:Hybrid.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
  isExternal: true
  name: ToJsonString(Object, Boolean, Boolean)
  nameWithType: JsonExtensions.ToJsonString(Object, Boolean, Boolean)
  fullName: Hybrid.Json.JsonExtensions.ToJsonString(System.Object, System.Boolean, System.Boolean)
  spec.csharp:
  - uid: Hybrid.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
    name: ToJsonString
    nameWithType: JsonExtensions.ToJsonString
    fullName: Hybrid.Json.JsonExtensions.ToJsonString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
    name: ToJsonString
    nameWithType: JsonExtensions.ToJsonString
    fullName: Hybrid.Json.JsonExtensions.ToJsonString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Json.JsonExtensions
  commentId: T:Hybrid.Json.JsonExtensions
  parent: Hybrid.Json
  name: JsonExtensions
  nameWithType: JsonExtensions
  fullName: Hybrid.Json.JsonExtensions
- uid: Hybrid.Mapping.MapperExtensions.MapTo``1(System.Object)
  commentId: M:Hybrid.Mapping.MapperExtensions.MapTo``1(System.Object)
  isExternal: true
  name: MapTo<TTarget>(Object)
  nameWithType: MapperExtensions.MapTo<TTarget>(Object)
  fullName: Hybrid.Mapping.MapperExtensions.MapTo<TTarget>(System.Object)
  nameWithType.vb: MapperExtensions.MapTo(Of TTarget)(Object)
  fullName.vb: Hybrid.Mapping.MapperExtensions.MapTo(Of TTarget)(System.Object)
  name.vb: MapTo(Of TTarget)(Object)
  spec.csharp:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``1(System.Object)
    name: MapTo<TTarget>
    nameWithType: MapperExtensions.MapTo<TTarget>
    fullName: Hybrid.Mapping.MapperExtensions.MapTo<TTarget>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``1(System.Object)
    name: MapTo(Of TTarget)
    nameWithType: MapperExtensions.MapTo(Of TTarget)
    fullName: Hybrid.Mapping.MapperExtensions.MapTo(Of TTarget)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Mapping.MapperExtensions
  commentId: T:Hybrid.Mapping.MapperExtensions
  parent: Hybrid.Mapping
  name: MapperExtensions
  nameWithType: MapperExtensions
  fullName: Hybrid.Mapping.MapperExtensions
- uid: Hybrid.Mapping.MapperExtensions.MapTo``2(``0,``1)
  commentId: M:Hybrid.Mapping.MapperExtensions.MapTo``2(``0,``1)
  name: MapTo<TSource, TTarget>(TSource, TTarget)
  nameWithType: MapperExtensions.MapTo<TSource, TTarget>(TSource, TTarget)
  fullName: Hybrid.Mapping.MapperExtensions.MapTo<TSource, TTarget>(TSource, TTarget)
  nameWithType.vb: MapperExtensions.MapTo(Of TSource, TTarget)(TSource, TTarget)
  fullName.vb: Hybrid.Mapping.MapperExtensions.MapTo(Of TSource, TTarget)(TSource, TTarget)
  name.vb: MapTo(Of TSource, TTarget)(TSource, TTarget)
  spec.csharp:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``2(``0,``1)
    name: MapTo<TSource, TTarget>
    nameWithType: MapperExtensions.MapTo<TSource, TTarget>
    fullName: Hybrid.Mapping.MapperExtensions.MapTo<TSource, TTarget>
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``2(``0,``1)
    name: MapTo(Of TSource, TTarget)
    nameWithType: MapperExtensions.MapTo(Of TSource, TTarget)
    fullName: Hybrid.Mapping.MapperExtensions.MapTo(Of TSource, TTarget)
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Reflection.LockExtensions.Locking(System.Object,System.Action)
  commentId: M:Hybrid.Reflection.LockExtensions.Locking(System.Object,System.Action)
  isExternal: true
  name: Locking(Object, Action)
  nameWithType: LockExtensions.Locking(Object, Action)
  fullName: Hybrid.Reflection.LockExtensions.Locking(System.Object, System.Action)
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking(System.Object,System.Action)
    name: Locking
    nameWithType: LockExtensions.Locking
    fullName: Hybrid.Reflection.LockExtensions.Locking
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking(System.Object,System.Action)
    name: Locking
    nameWithType: LockExtensions.Locking
    fullName: Hybrid.Reflection.LockExtensions.Locking
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Reflection.LockExtensions
  commentId: T:Hybrid.Reflection.LockExtensions
  parent: Hybrid.Reflection
  name: LockExtensions
  nameWithType: LockExtensions
  fullName: Hybrid.Reflection.LockExtensions
- uid: Hybrid.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
  commentId: M:Hybrid.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
  isExternal: true
  name: Locking<T>(T, Action<T>)
  nameWithType: LockExtensions.Locking<T>(T, Action<T>)
  fullName: Hybrid.Reflection.LockExtensions.Locking<T>(T, System.Action<T>)
  nameWithType.vb: LockExtensions.Locking(Of T)(T, Action(Of T))
  fullName.vb: Hybrid.Reflection.LockExtensions.Locking(Of T)(T, System.Action(Of T))
  name.vb: Locking(Of T)(T, Action(Of T))
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
    name: Locking<T>
    nameWithType: LockExtensions.Locking<T>
    fullName: Hybrid.Reflection.LockExtensions.Locking<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
    name: Locking(Of T)
    nameWithType: LockExtensions.Locking(Of T)
    fullName: Hybrid.Reflection.LockExtensions.Locking(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
  commentId: M:Hybrid.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
  isExternal: true
  name: Locking<TResult>(Object, Func<TResult>)
  nameWithType: LockExtensions.Locking<TResult>(Object, Func<TResult>)
  fullName: Hybrid.Reflection.LockExtensions.Locking<TResult>(System.Object, System.Func<TResult>)
  nameWithType.vb: LockExtensions.Locking(Of TResult)(Object, Func(Of TResult))
  fullName.vb: Hybrid.Reflection.LockExtensions.Locking(Of TResult)(System.Object, System.Func(Of TResult))
  name.vb: Locking(Of TResult)(Object, Func(Of TResult))
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
    name: Locking<TResult>
    nameWithType: LockExtensions.Locking<TResult>
    fullName: Hybrid.Reflection.LockExtensions.Locking<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
    name: Locking(Of TResult)
    nameWithType: LockExtensions.Locking(Of TResult)
    fullName: Hybrid.Reflection.LockExtensions.Locking(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
  commentId: M:Hybrid.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
  isExternal: true
  name: Locking<TSource, TResult>(TSource, Func<TSource, TResult>)
  nameWithType: LockExtensions.Locking<TSource, TResult>(TSource, Func<TSource, TResult>)
  fullName: Hybrid.Reflection.LockExtensions.Locking<TSource, TResult>(TSource, System.Func<TSource, TResult>)
  nameWithType.vb: LockExtensions.Locking(Of TSource, TResult)(TSource, Func(Of TSource, TResult))
  fullName.vb: Hybrid.Reflection.LockExtensions.Locking(Of TSource, TResult)(TSource, System.Func(Of TSource, TResult))
  name.vb: Locking(Of TSource, TResult)(TSource, Func(Of TSource, TResult))
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
    name: Locking<TSource, TResult>
    nameWithType: LockExtensions.Locking<TSource, TResult>
    fullName: Hybrid.Reflection.LockExtensions.Locking<TSource, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
    name: Locking(Of TSource, TResult)
    nameWithType: LockExtensions.Locking(Of TSource, TResult)
    fullName: Hybrid.Reflection.LockExtensions.Locking(Of TSource, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2(``0)
  commentId: M:Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2(``0)
  name: CheckICreatedTime<TEntity, TKey>(TEntity)
  nameWithType: EntityExtensions.CheckICreatedTime<TEntity, TKey>(TEntity)
  fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime<TEntity, TKey>(TEntity)
  nameWithType.vb: EntityExtensions.CheckICreatedTime(Of TEntity, TKey)(TEntity)
  fullName.vb: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime(Of TEntity, TKey)(TEntity)
  name.vb: CheckICreatedTime(Of TEntity, TKey)(TEntity)
  spec.csharp:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2(``0)
    name: CheckICreatedTime<TEntity, TKey>
    nameWithType: EntityExtensions.CheckICreatedTime<TEntity, TKey>
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime<TEntity, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2(``0)
    name: CheckICreatedTime(Of TEntity, TKey)
    nameWithType: EntityExtensions.CheckICreatedTime(Of TEntity, TKey)
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime(Of TEntity, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Domain.Entities.EntityExtensions
  commentId: T:Hybrid.Domain.Entities.EntityExtensions
  parent: Hybrid.Domain.Entities
  name: EntityExtensions
  nameWithType: EntityExtensions
  fullName: Hybrid.Domain.Entities.EntityExtensions
- uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
  commentId: M:Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
  isExternal: true
  name: CheckICreationAudited<TEntity, TKey, TUserKey>(TEntity, IPrincipal)
  nameWithType: EntityExtensions.CheckICreationAudited<TEntity, TKey, TUserKey>(TEntity, IPrincipal)
  fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited<TEntity, TKey, TUserKey>(TEntity, System.Security.Principal.IPrincipal)
  nameWithType.vb: EntityExtensions.CheckICreationAudited(Of TEntity, TKey, TUserKey)(TEntity, IPrincipal)
  fullName.vb: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited(Of TEntity, TKey, TUserKey)(TEntity, System.Security.Principal.IPrincipal)
  name.vb: CheckICreationAudited(Of TEntity, TKey, TUserKey)(TEntity, IPrincipal)
  spec.csharp:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
    name: CheckICreationAudited<TEntity, TKey, TUserKey>
    nameWithType: EntityExtensions.CheckICreationAudited<TEntity, TKey, TUserKey>
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited<TEntity, TKey, TUserKey>
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
    name: CheckICreationAudited(Of TEntity, TKey, TUserKey)
    nameWithType: EntityExtensions.CheckICreationAudited(Of TEntity, TKey, TUserKey)
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited(Of TEntity, TKey, TUserKey)
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
  commentId: M:Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
  isExternal: true
  name: CheckIUpdateAudited<TEntity, TKey, TUserKey>(TEntity, IPrincipal)
  nameWithType: EntityExtensions.CheckIUpdateAudited<TEntity, TKey, TUserKey>(TEntity, IPrincipal)
  fullName: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited<TEntity, TKey, TUserKey>(TEntity, System.Security.Principal.IPrincipal)
  nameWithType.vb: EntityExtensions.CheckIUpdateAudited(Of TEntity, TKey, TUserKey)(TEntity, IPrincipal)
  fullName.vb: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited(Of TEntity, TKey, TUserKey)(TEntity, System.Security.Principal.IPrincipal)
  name.vb: CheckIUpdateAudited(Of TEntity, TKey, TUserKey)(TEntity, IPrincipal)
  spec.csharp:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
    name: CheckIUpdateAudited<TEntity, TKey, TUserKey>
    nameWithType: EntityExtensions.CheckIUpdateAudited<TEntity, TKey, TUserKey>
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited<TEntity, TKey, TUserKey>
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
    name: CheckIUpdateAudited(Of TEntity, TKey, TUserKey)
    nameWithType: EntityExtensions.CheckIUpdateAudited(Of TEntity, TKey, TUserKey)
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited(Of TEntity, TKey, TUserKey)
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Entity
  commentId: N:OSharp.Entity
  name: OSharp.Entity
  nameWithType: OSharp.Entity
  fullName: OSharp.Entity
- uid: OSharp.Extensions
  commentId: N:OSharp.Extensions
  name: OSharp.Extensions
  nameWithType: OSharp.Extensions
  fullName: OSharp.Extensions
- uid: OSharp.Json
  commentId: N:OSharp.Json
  name: OSharp.Json
  nameWithType: OSharp.Json
  fullName: OSharp.Json
- uid: OSharp.Mapping
  commentId: N:OSharp.Mapping
  name: OSharp.Mapping
  nameWithType: OSharp.Mapping
  fullName: OSharp.Mapping
- uid: OSharp.Reflection
  commentId: N:OSharp.Reflection
  name: OSharp.Reflection
  nameWithType: OSharp.Reflection
  fullName: OSharp.Reflection
- uid: Hybrid.Extensions
  commentId: N:Hybrid.Extensions
  name: Hybrid.Extensions
  nameWithType: Hybrid.Extensions
  fullName: Hybrid.Extensions
- uid: Hybrid.Json
  commentId: N:Hybrid.Json
  name: Hybrid.Json
  nameWithType: Hybrid.Json
  fullName: Hybrid.Json
- uid: Hybrid.Mapping
  commentId: N:Hybrid.Mapping
  name: Hybrid.Mapping
  nameWithType: Hybrid.Mapping
  fullName: Hybrid.Mapping
- uid: Hybrid.Reflection
  commentId: N:Hybrid.Reflection
  name: Hybrid.Reflection
  nameWithType: Hybrid.Reflection
  fullName: Hybrid.Reflection
- uid: Hybrid.Domain.Entities
  commentId: N:Hybrid.Domain.Entities
  name: Hybrid.Domain.Entities
  nameWithType: Hybrid.Domain.Entities
  fullName: Hybrid.Domain.Entities
- uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1
  commentId: T:Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1
  name: ModuleInfoPickerBase<TFunction>
  nameWithType: ModuleInfoPickerBase<TFunction>
  fullName: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase<TFunction>
  nameWithType.vb: ModuleInfoPickerBase(Of TFunction)
  fullName.vb: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase(Of TFunction)
  name.vb: ModuleInfoPickerBase(Of TFunction)
  spec.csharp:
  - uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1
    name: ModuleInfoPickerBase
    nameWithType: ModuleInfoPickerBase
    fullName: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1
    name: ModuleInfoPickerBase
    nameWithType: ModuleInfoPickerBase
    fullName: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.#ctor*
  commentId: Overload:Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.#ctor
  name: ModuleInfoPickerBase
  nameWithType: ModuleInfoPickerBase<TFunction>.ModuleInfoPickerBase
  fullName: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase<TFunction>.ModuleInfoPickerBase
  nameWithType.vb: ModuleInfoPickerBase(Of TFunction).ModuleInfoPickerBase
  fullName.vb: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase(Of TFunction).ModuleInfoPickerBase
- uid: System.IServiceProvider
  commentId: T:System.IServiceProvider
  parent: System
  isExternal: true
  name: IServiceProvider
  nameWithType: IServiceProvider
  fullName: System.IServiceProvider
- uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.Logger*
  commentId: Overload:Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.Logger
  name: Logger
  nameWithType: ModuleInfoPickerBase<TFunction>.Logger
  fullName: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase<TFunction>.Logger
  nameWithType.vb: ModuleInfoPickerBase(Of TFunction).Logger
  fullName.vb: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase(Of TFunction).Logger
- uid: Microsoft.Extensions.Logging.ILogger
  commentId: T:Microsoft.Extensions.Logging.ILogger
  parent: Microsoft.Extensions.Logging
  isExternal: true
  name: ILogger
  nameWithType: ILogger
  fullName: Microsoft.Extensions.Logging.ILogger
- uid: Microsoft.Extensions.Logging
  commentId: N:Microsoft.Extensions.Logging
  isExternal: true
  name: Microsoft.Extensions.Logging
  nameWithType: Microsoft.Extensions.Logging
  fullName: Microsoft.Extensions.Logging
- uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.FunctionHandler*
  commentId: Overload:Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.FunctionHandler
  name: FunctionHandler
  nameWithType: ModuleInfoPickerBase<TFunction>.FunctionHandler
  fullName: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase<TFunction>.FunctionHandler
  nameWithType.vb: ModuleInfoPickerBase(Of TFunction).FunctionHandler
  fullName.vb: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase(Of TFunction).FunctionHandler
- uid: Hybrid.Authorization.Functions.IFunctionHandler
  commentId: T:Hybrid.Authorization.Functions.IFunctionHandler
  parent: Hybrid.Authorization.Functions
  name: IFunctionHandler
  nameWithType: IFunctionHandler
  fullName: Hybrid.Authorization.Functions.IFunctionHandler
- uid: Hybrid.Authorization.Functions
  commentId: N:Hybrid.Authorization.Functions
  name: Hybrid.Authorization.Functions
  nameWithType: Hybrid.Authorization.Functions
  fullName: Hybrid.Authorization.Functions
- uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.Pickup*
  commentId: Overload:Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.Pickup
  name: Pickup
  nameWithType: ModuleInfoPickerBase<TFunction>.Pickup
  fullName: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase<TFunction>.Pickup
  nameWithType.vb: ModuleInfoPickerBase(Of TFunction).Pickup
  fullName.vb: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase(Of TFunction).Pickup
- uid: Hybrid.Authorization.ModuleInfos.IModuleInfoPicker.Pickup
  commentId: M:Hybrid.Authorization.ModuleInfos.IModuleInfoPicker.Pickup
  parent: Hybrid.Authorization.ModuleInfos.IModuleInfoPicker
  name: Pickup()
  nameWithType: IModuleInfoPicker.Pickup()
  fullName: Hybrid.Authorization.ModuleInfos.IModuleInfoPicker.Pickup()
  spec.csharp:
  - uid: Hybrid.Authorization.ModuleInfos.IModuleInfoPicker.Pickup
    name: Pickup
    nameWithType: IModuleInfoPicker.Pickup
    fullName: Hybrid.Authorization.ModuleInfos.IModuleInfoPicker.Pickup
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Authorization.ModuleInfos.IModuleInfoPicker.Pickup
    name: Pickup
    nameWithType: IModuleInfoPicker.Pickup
    fullName: Hybrid.Authorization.ModuleInfos.IModuleInfoPicker.Pickup
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Authorization.ModuleInfos.ModuleInfo[]
  isExternal: true
  name: ModuleInfo[]
  nameWithType: ModuleInfo[]
  fullName: Hybrid.Authorization.ModuleInfos.ModuleInfo[]
  nameWithType.vb: ModuleInfo()
  fullName.vb: Hybrid.Authorization.ModuleInfos.ModuleInfo()
  name.vb: ModuleInfo()
  spec.csharp:
  - uid: Hybrid.Authorization.ModuleInfos.ModuleInfo
    name: ModuleInfo
    nameWithType: ModuleInfo
    fullName: Hybrid.Authorization.ModuleInfos.ModuleInfo
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: Hybrid.Authorization.ModuleInfos.ModuleInfo
    name: ModuleInfo
    nameWithType: ModuleInfo
    fullName: Hybrid.Authorization.ModuleInfos.ModuleInfo
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.GetModules*
  commentId: Overload:Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.GetModules
  name: GetModules
  nameWithType: ModuleInfoPickerBase<TFunction>.GetModules
  fullName: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase<TFunction>.GetModules
  nameWithType.vb: ModuleInfoPickerBase(Of TFunction).GetModules
  fullName.vb: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase(Of TFunction).GetModules
- uid: System.Type[]
  isExternal: true
  name: Type[]
  nameWithType: Type[]
  fullName: System.Type[]
  nameWithType.vb: Type()
  fullName.vb: System.Type()
  name.vb: Type()
  spec.csharp:
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.GetModule*
  commentId: Overload:Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.GetModule
  name: GetModule
  nameWithType: ModuleInfoPickerBase<TFunction>.GetModule
  fullName: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase<TFunction>.GetModule
  nameWithType.vb: ModuleInfoPickerBase(Of TFunction).GetModule
  fullName.vb: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase(Of TFunction).GetModule
- uid: System.Reflection.MethodInfo
  commentId: T:System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: true
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: Hybrid.Authorization.ModuleInfos.ModuleInfo
  commentId: T:Hybrid.Authorization.ModuleInfos.ModuleInfo
  parent: Hybrid.Authorization.ModuleInfos
  name: ModuleInfo
  nameWithType: ModuleInfo
  fullName: Hybrid.Authorization.ModuleInfos.ModuleInfo
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Reflection
  commentId: N:System.Reflection
  isExternal: true
  name: System.Reflection
  nameWithType: System.Reflection
  fullName: System.Reflection
