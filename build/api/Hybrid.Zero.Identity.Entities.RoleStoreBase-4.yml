### YamlMime:ManagedReference
items:
- uid: Hybrid.Zero.Identity.Entities.RoleStoreBase`4
  commentId: T:Hybrid.Zero.Identity.Entities.RoleStoreBase`4
  id: RoleStoreBase`4
  parent: Hybrid.Zero.Identity.Entities
  children:
  - Hybrid.Zero.Identity.Entities.RoleStoreBase`4.#ctor(Hybrid.Domain.Repositories.IRepository{`0,`1},Hybrid.Domain.Repositories.IRepository{`2,`3})
  - Hybrid.Zero.Identity.Entities.RoleStoreBase`4.AddClaimAsync(`0,System.Security.Claims.Claim,System.Threading.CancellationToken)
  - Hybrid.Zero.Identity.Entities.RoleStoreBase`4.ConvertIdFromString(System.String)
  - Hybrid.Zero.Identity.Entities.RoleStoreBase`4.ConvertIdToString(`1)
  - Hybrid.Zero.Identity.Entities.RoleStoreBase`4.CreateAsync(`0,System.Threading.CancellationToken)
  - Hybrid.Zero.Identity.Entities.RoleStoreBase`4.DeleteAsync(`0,System.Threading.CancellationToken)
  - Hybrid.Zero.Identity.Entities.RoleStoreBase`4.Dispose
  - Hybrid.Zero.Identity.Entities.RoleStoreBase`4.FindByIdAsync(System.String,System.Threading.CancellationToken)
  - Hybrid.Zero.Identity.Entities.RoleStoreBase`4.FindByNameAsync(System.String,System.Threading.CancellationToken)
  - Hybrid.Zero.Identity.Entities.RoleStoreBase`4.GetClaimsAsync(`0,System.Threading.CancellationToken)
  - Hybrid.Zero.Identity.Entities.RoleStoreBase`4.GetNormalizedRoleNameAsync(`0,System.Threading.CancellationToken)
  - Hybrid.Zero.Identity.Entities.RoleStoreBase`4.GetRoleIdAsync(`0,System.Threading.CancellationToken)
  - Hybrid.Zero.Identity.Entities.RoleStoreBase`4.GetRoleNameAsync(`0,System.Threading.CancellationToken)
  - Hybrid.Zero.Identity.Entities.RoleStoreBase`4.RemoveClaimAsync(`0,System.Security.Claims.Claim,System.Threading.CancellationToken)
  - Hybrid.Zero.Identity.Entities.RoleStoreBase`4.Roles
  - Hybrid.Zero.Identity.Entities.RoleStoreBase`4.SetNormalizedRoleNameAsync(`0,System.String,System.Threading.CancellationToken)
  - Hybrid.Zero.Identity.Entities.RoleStoreBase`4.SetRoleNameAsync(`0,System.String,System.Threading.CancellationToken)
  - Hybrid.Zero.Identity.Entities.RoleStoreBase`4.ThrowIfDisposed
  - Hybrid.Zero.Identity.Entities.RoleStoreBase`4.UpdateAsync(`0,System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>
  nameWithType: RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>
  fullName: Hybrid.Zero.Identity.Entities.RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>
  type: Class
  source:
    remote:
      path: src/Hybrid.Zero/Identity/Entities/RoleStoreBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: RoleStoreBase
    path: ../src/Hybrid.Zero/Identity/Entities/RoleStoreBase.cs
    startLine: 32
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Zero.Identity.Entities
  summary: "\n角色存储基类\n"
  example: []
  syntax:
    content: >-
      public abstract class RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey> : IQueryableRoleStore<TRole>, IRoleClaimStore<TRole>, IRoleStore<TRole>, IDisposable where TRole : RoleBase<TRoleKey> where TRoleKey : IEquatable<TRoleKey> where TRoleClaim : RoleClaimBase<TRoleClaimKey, TRoleKey>, new()
          where TRoleClaimKey : IEquatable<TRoleClaimKey>
    typeParameters:
    - id: TRole
      description: 角色实体类型
    - id: TRoleKey
      description: 角色编号类型
    - id: TRoleClaim
      description: 角色声明类型
    - id: TRoleClaimKey
      description: 角色声明编号类型
    content.vb: >-
      Public MustInherit Class RoleStoreBase(Of TRole As RoleBase(Of TRoleKey), TRoleKey As IEquatable(Of TRoleKey), TRoleClaim As {RoleClaimBase(Of TRoleClaimKey, TRoleKey), New}, TRoleClaimKey As IEquatable(Of TRoleClaimKey))
          Implements IQueryableRoleStore(Of TRole), IRoleClaimStore(Of TRole), IRoleStore(Of TRole), IDisposable
  inheritance:
  - System.Object
  implements:
  - Microsoft.AspNetCore.Identity.IQueryableRoleStore{{TRole}}
  - Microsoft.AspNetCore.Identity.IRoleClaimStore{{TRole}}
  - Microsoft.AspNetCore.Identity.IRoleStore{{TRole}}
  - System.IDisposable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - System.Object.Hybrid.Extensions.ObjectExtensions.CastTo(System.Type)
  - System.Object.Hybrid.Extensions.ObjectExtensions.CastTo``1
  - System.Object.Hybrid.Extensions.ObjectExtensions.CastTo``1({T})
  - Hybrid.Zero.Identity.Entities.RoleStoreBase`4.Hybrid.Extensions.ObjectExtensions.IsIn``1(Hybrid.Zero.Identity.Entities.RoleStoreBase{{TRole},{TRoleKey},{TRoleClaim},{TRoleClaimKey}}[])
  - System.Object.Hybrid.Extensions.ObjectExtensions.ToDynamic
  - Hybrid.Zero.Identity.Entities.RoleStoreBase`4.Hybrid.Extensions.ObjectExtensions.DeepClone``1
  - Hybrid.Zero.Identity.Entities.RoleStoreBase`4.Hybrid.Extensions.ParameterCheckExtensions.Required``1(System.Func{Hybrid.Zero.Identity.Entities.RoleStoreBase{{TRole},{TRoleKey},{TRoleClaim},{TRoleClaimKey}},System.Boolean},System.String)
  - Hybrid.Zero.Identity.Entities.RoleStoreBase`4.Hybrid.Extensions.ParameterCheckExtensions.Required``2(System.Func{Hybrid.Zero.Identity.Entities.RoleStoreBase{{TRole},{TRoleKey},{TRoleClaim},{TRoleClaimKey}},System.Boolean},System.String)
  - Hybrid.Zero.Identity.Entities.RoleStoreBase`4.Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(System.String)
  - Hybrid.Zero.Identity.Entities.RoleStoreBase`4.Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{Hybrid.Zero.Identity.Entities.RoleStoreBase{{TRole},{TRoleKey},{TRoleClaim},{TRoleClaimKey}}},System.Action{System.Exception},System.Action{Hybrid.Zero.Identity.Entities.RoleStoreBase{{TRole},{TRoleKey},{TRoleClaim},{TRoleClaimKey}}})
  - Hybrid.Zero.Identity.Entities.RoleStoreBase`4.Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{Hybrid.Zero.Identity.Entities.RoleStoreBase{{TRole},{TRoleKey},{TRoleClaim},{TRoleClaimKey}}},System.Action{System.Exception})
  - Hybrid.Zero.Identity.Entities.RoleStoreBase`4.Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{Hybrid.Zero.Identity.Entities.RoleStoreBase{{TRole},{TRoleKey},{TRoleClaim},{TRoleClaimKey}},{TResult}},System.Action{System.Exception},System.Action{Hybrid.Zero.Identity.Entities.RoleStoreBase{{TRole},{TRoleKey},{TRoleClaim},{TRoleClaimKey}}})
  - Hybrid.Zero.Identity.Entities.RoleStoreBase`4.Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{Hybrid.Zero.Identity.Entities.RoleStoreBase{{TRole},{TRoleKey},{TRoleClaim},{TRoleClaimKey}},{TResult}},System.Action{System.Exception})
  - Hybrid.Zero.Identity.Entities.RoleStoreBase`4.Hybrid.Extensions.TryCatchExtensions.TryFinally``1(System.Action{Hybrid.Zero.Identity.Entities.RoleStoreBase{{TRole},{TRoleKey},{TRoleClaim},{TRoleClaimKey}}},System.Action{Hybrid.Zero.Identity.Entities.RoleStoreBase{{TRole},{TRoleKey},{TRoleClaim},{TRoleClaimKey}}})
  - System.Object.Hybrid.Json.JsonExtensions.ToJsonString(System.Boolean,System.Boolean)
  - System.Object.Hybrid.Mapping.MapperExtensions.MapTo``1
  - Hybrid.Zero.Identity.Entities.RoleStoreBase`4.Hybrid.Mapping.MapperExtensions.MapTo``2({TTarget})
  - System.Object.Hybrid.Reflection.LockExtensions.Locking(System.Action)
  - Hybrid.Zero.Identity.Entities.RoleStoreBase`4.Hybrid.Reflection.LockExtensions.Locking``1(System.Action{Hybrid.Zero.Identity.Entities.RoleStoreBase{{TRole},{TRoleKey},{TRoleClaim},{TRoleClaimKey}}})
  - System.Object.Hybrid.Reflection.LockExtensions.Locking``1(System.Func{{TResult}})
  - Hybrid.Zero.Identity.Entities.RoleStoreBase`4.Hybrid.Reflection.LockExtensions.Locking``2(System.Func{Hybrid.Zero.Identity.Entities.RoleStoreBase{{TRole},{TRoleKey},{TRoleClaim},{TRoleClaimKey}},{TResult}})
  - Hybrid.Zero.Identity.Entities.RoleStoreBase`4.Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2
  - Hybrid.Zero.Identity.Entities.RoleStoreBase`4.Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(System.Security.Principal.IPrincipal)
  - Hybrid.Zero.Identity.Entities.RoleStoreBase`4.Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(System.Security.Principal.IPrincipal)
  nameWithType.vb: RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey)
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  fullName.vb: Hybrid.Zero.Identity.Entities.RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey)
  name.vb: RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey)
- uid: Hybrid.Zero.Identity.Entities.RoleStoreBase`4.#ctor(Hybrid.Domain.Repositories.IRepository{`0,`1},Hybrid.Domain.Repositories.IRepository{`2,`3})
  commentId: M:Hybrid.Zero.Identity.Entities.RoleStoreBase`4.#ctor(Hybrid.Domain.Repositories.IRepository{`0,`1},Hybrid.Domain.Repositories.IRepository{`2,`3})
  id: '#ctor(Hybrid.Domain.Repositories.IRepository{`0,`1},Hybrid.Domain.Repositories.IRepository{`2,`3})'
  parent: Hybrid.Zero.Identity.Entities.RoleStoreBase`4
  langs:
  - csharp
  - vb
  name: RoleStoreBase(IRepository<TRole, TRoleKey>, IRepository<TRoleClaim, TRoleClaimKey>)
  nameWithType: RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>.RoleStoreBase(IRepository<TRole, TRoleKey>, IRepository<TRoleClaim, TRoleClaimKey>)
  fullName: Hybrid.Zero.Identity.Entities.RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>.RoleStoreBase(Hybrid.Domain.Repositories.IRepository<TRole, TRoleKey>, Hybrid.Domain.Repositories.IRepository<TRoleClaim, TRoleClaimKey>)
  type: Constructor
  source:
    remote:
      path: src/Hybrid.Zero/Identity/Entities/RoleStoreBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: .ctor
    path: ../src/Hybrid.Zero/Identity/Entities/RoleStoreBase.cs
    startLine: 49
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Zero.Identity.Entities
  summary: "\n初始化一个<xref href=\"Hybrid.Zero.Identity.Entities.RoleStoreBase%604\" data-throw-if-not-resolved=\"false\"></xref>类型的新实例\n"
  example: []
  syntax:
    content: protected RoleStoreBase(IRepository<TRole, TRoleKey> roleRepository, IRepository<TRoleClaim, TRoleClaimKey> roleClaimRepository)
    parameters:
    - id: roleRepository
      type: Hybrid.Domain.Repositories.IRepository{{TRole},{TRoleKey}}
      description: 角色仓储
    - id: roleClaimRepository
      type: Hybrid.Domain.Repositories.IRepository{{TRoleClaim},{TRoleClaimKey}}
      description: 角色声明仓储
    content.vb: Protected Sub New(roleRepository As IRepository(Of TRole, TRoleKey), roleClaimRepository As IRepository(Of TRoleClaim, TRoleClaimKey))
  overload: Hybrid.Zero.Identity.Entities.RoleStoreBase`4.#ctor*
  nameWithType.vb: RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey).RoleStoreBase(IRepository(Of TRole, TRoleKey), IRepository(Of TRoleClaim, TRoleClaimKey))
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Hybrid.Zero.Identity.Entities.RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey).RoleStoreBase(Hybrid.Domain.Repositories.IRepository(Of TRole, TRoleKey), Hybrid.Domain.Repositories.IRepository(Of TRoleClaim, TRoleClaimKey))
  name.vb: RoleStoreBase(IRepository(Of TRole, TRoleKey), IRepository(Of TRoleClaim, TRoleClaimKey))
- uid: Hybrid.Zero.Identity.Entities.RoleStoreBase`4.Dispose
  commentId: M:Hybrid.Zero.Identity.Entities.RoleStoreBase`4.Dispose
  id: Dispose
  parent: Hybrid.Zero.Identity.Entities.RoleStoreBase`4
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>.Dispose()
  fullName: Hybrid.Zero.Identity.Entities.RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>.Dispose()
  type: Method
  source:
    remote:
      path: src/Hybrid.Zero/Identity/Entities/RoleStoreBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: Dispose
    path: ../src/Hybrid.Zero/Identity/Entities/RoleStoreBase.cs
    startLine: 60
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Zero.Identity.Entities
  summary: Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
  example: []
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  overload: Hybrid.Zero.Identity.Entities.RoleStoreBase`4.Dispose*
  implements:
  - System.IDisposable.Dispose
  nameWithType.vb: RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey).Dispose()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Hybrid.Zero.Identity.Entities.RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey).Dispose()
- uid: Hybrid.Zero.Identity.Entities.RoleStoreBase`4.Roles
  commentId: P:Hybrid.Zero.Identity.Entities.RoleStoreBase`4.Roles
  id: Roles
  parent: Hybrid.Zero.Identity.Entities.RoleStoreBase`4
  langs:
  - csharp
  - vb
  name: Roles
  nameWithType: RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>.Roles
  fullName: Hybrid.Zero.Identity.Entities.RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>.Roles
  type: Property
  source:
    remote:
      path: src/Hybrid.Zero/Identity/Entities/RoleStoreBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: Roles
    path: ../src/Hybrid.Zero/Identity/Entities/RoleStoreBase.cs
    startLine: 73
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Zero.Identity.Entities
  summary: "\nReturns an <xref href=\"System.Linq.IQueryable%601\" data-throw-if-not-resolved=\"false\"></xref> collection of roles.\n"
  example: []
  syntax:
    content: public IQueryable<TRole> Roles { get; }
    parameters: []
    return:
      type: System.Linq.IQueryable{{TRole}}
      description: An <xref href="System.Linq.IQueryable%601" data-throw-if-not-resolved="false"></xref> collection of roles.
    content.vb: Public ReadOnly Property Roles As IQueryable(Of TRole)
  overload: Hybrid.Zero.Identity.Entities.RoleStoreBase`4.Roles*
  implements:
  - Microsoft.AspNetCore.Identity.IQueryableRoleStore{{TRole}}.Roles
  nameWithType.vb: RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey).Roles
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Hybrid.Zero.Identity.Entities.RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey).Roles
- uid: Hybrid.Zero.Identity.Entities.RoleStoreBase`4.ConvertIdFromString(System.String)
  commentId: M:Hybrid.Zero.Identity.Entities.RoleStoreBase`4.ConvertIdFromString(System.String)
  id: ConvertIdFromString(System.String)
  parent: Hybrid.Zero.Identity.Entities.RoleStoreBase`4
  langs:
  - csharp
  - vb
  name: ConvertIdFromString(String)
  nameWithType: RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>.ConvertIdFromString(String)
  fullName: Hybrid.Zero.Identity.Entities.RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>.ConvertIdFromString(System.String)
  type: Method
  source:
    remote:
      path: src/Hybrid.Zero/Identity/Entities/RoleStoreBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: ConvertIdFromString
    path: ../src/Hybrid.Zero/Identity/Entities/RoleStoreBase.cs
    startLine: 82
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Zero.Identity.Entities
  summary: "\nConverts the provided <code data-dev-comment-type=\"paramref\" class=\"paramref\">id</code> to a strongly typed key object.\n"
  example: []
  syntax:
    content: public virtual TRoleKey ConvertIdFromString(string id)
    parameters:
    - id: id
      type: System.String
      description: The id to convert.
    return:
      type: '{TRoleKey}'
      description: An instance of <code data-dev-comment-type="typeparamref" class="typeparamref">TRoleKey</code> representing the provided <code data-dev-comment-type="paramref" class="paramref">id</code>.
    content.vb: Public Overridable Function ConvertIdFromString(id As String) As TRoleKey
  overload: Hybrid.Zero.Identity.Entities.RoleStoreBase`4.ConvertIdFromString*
  nameWithType.vb: RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey).ConvertIdFromString(String)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Hybrid.Zero.Identity.Entities.RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey).ConvertIdFromString(System.String)
- uid: Hybrid.Zero.Identity.Entities.RoleStoreBase`4.ConvertIdToString(`1)
  commentId: M:Hybrid.Zero.Identity.Entities.RoleStoreBase`4.ConvertIdToString(`1)
  id: ConvertIdToString(`1)
  parent: Hybrid.Zero.Identity.Entities.RoleStoreBase`4
  langs:
  - csharp
  - vb
  name: ConvertIdToString(TRoleKey)
  nameWithType: RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>.ConvertIdToString(TRoleKey)
  fullName: Hybrid.Zero.Identity.Entities.RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>.ConvertIdToString(TRoleKey)
  type: Method
  source:
    remote:
      path: src/Hybrid.Zero/Identity/Entities/RoleStoreBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: ConvertIdToString
    path: ../src/Hybrid.Zero/Identity/Entities/RoleStoreBase.cs
    startLine: 97
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Zero.Identity.Entities
  summary: "\nConverts the provided <code data-dev-comment-type=\"paramref\" class=\"paramref\">id</code> to its string representation.\n"
  example: []
  syntax:
    content: public virtual string ConvertIdToString(TRoleKey id)
    parameters:
    - id: id
      type: '{TRoleKey}'
      description: The id to convert.
    return:
      type: System.String
      description: An <xref href="System.String" data-throw-if-not-resolved="false"></xref> representation of the provided <code data-dev-comment-type="paramref" class="paramref">id</code>.
    content.vb: Public Overridable Function ConvertIdToString(id As TRoleKey) As String
  overload: Hybrid.Zero.Identity.Entities.RoleStoreBase`4.ConvertIdToString*
  nameWithType.vb: RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey).ConvertIdToString(TRoleKey)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Hybrid.Zero.Identity.Entities.RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey).ConvertIdToString(TRoleKey)
- uid: Hybrid.Zero.Identity.Entities.RoleStoreBase`4.ThrowIfDisposed
  commentId: M:Hybrid.Zero.Identity.Entities.RoleStoreBase`4.ThrowIfDisposed
  id: ThrowIfDisposed
  parent: Hybrid.Zero.Identity.Entities.RoleStoreBase`4
  langs:
  - csharp
  - vb
  name: ThrowIfDisposed()
  nameWithType: RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>.ThrowIfDisposed()
  fullName: Hybrid.Zero.Identity.Entities.RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>.ThrowIfDisposed()
  type: Method
  source:
    remote:
      path: src/Hybrid.Zero/Identity/Entities/RoleStoreBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: ThrowIfDisposed
    path: ../src/Hybrid.Zero/Identity/Entities/RoleStoreBase.cs
    startLine: 110
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Zero.Identity.Entities
  summary: "\n如果已释放，则抛出异常\n"
  example: []
  syntax:
    content: protected void ThrowIfDisposed()
    content.vb: Protected Sub ThrowIfDisposed
  overload: Hybrid.Zero.Identity.Entities.RoleStoreBase`4.ThrowIfDisposed*
  nameWithType.vb: RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey).ThrowIfDisposed()
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Hybrid.Zero.Identity.Entities.RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey).ThrowIfDisposed()
- uid: Hybrid.Zero.Identity.Entities.RoleStoreBase`4.CreateAsync(`0,System.Threading.CancellationToken)
  commentId: M:Hybrid.Zero.Identity.Entities.RoleStoreBase`4.CreateAsync(`0,System.Threading.CancellationToken)
  id: CreateAsync(`0,System.Threading.CancellationToken)
  parent: Hybrid.Zero.Identity.Entities.RoleStoreBase`4
  langs:
  - csharp
  - vb
  name: CreateAsync(TRole, CancellationToken)
  nameWithType: RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>.CreateAsync(TRole, CancellationToken)
  fullName: Hybrid.Zero.Identity.Entities.RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>.CreateAsync(TRole, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Hybrid.Zero/Identity/Entities/RoleStoreBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: CreateAsync
    path: ../src/Hybrid.Zero/Identity/Entities/RoleStoreBase.cs
    startLine: 126
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Zero.Identity.Entities
  summary: "\nCreates a new role in a store as an asynchronous operation.\n"
  example: []
  syntax:
    content: public Task<IdentityResult> CreateAsync(TRole role, CancellationToken cancellationToken)
    parameters:
    - id: role
      type: '{TRole}'
      description: The role to create in the store.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task{Microsoft.AspNetCore.Identity.IdentityResult}
      description: A <xref href="System.Threading.Tasks.Task%601" data-throw-if-not-resolved="false"></xref> that represents the <xref href="Microsoft.AspNetCore.Identity.IdentityResult" data-throw-if-not-resolved="false"></xref> of the asynchronous query.
    content.vb: Public Function CreateAsync(role As TRole, cancellationToken As CancellationToken) As Task(Of IdentityResult)
  overload: Hybrid.Zero.Identity.Entities.RoleStoreBase`4.CreateAsync*
  implements:
  - Microsoft.AspNetCore.Identity.IRoleStore{{TRole}}.CreateAsync({TRole},System.Threading.CancellationToken)
  nameWithType.vb: RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey).CreateAsync(TRole, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Hybrid.Zero.Identity.Entities.RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey).CreateAsync(TRole, System.Threading.CancellationToken)
- uid: Hybrid.Zero.Identity.Entities.RoleStoreBase`4.UpdateAsync(`0,System.Threading.CancellationToken)
  commentId: M:Hybrid.Zero.Identity.Entities.RoleStoreBase`4.UpdateAsync(`0,System.Threading.CancellationToken)
  id: UpdateAsync(`0,System.Threading.CancellationToken)
  parent: Hybrid.Zero.Identity.Entities.RoleStoreBase`4
  langs:
  - csharp
  - vb
  name: UpdateAsync(TRole, CancellationToken)
  nameWithType: RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>.UpdateAsync(TRole, CancellationToken)
  fullName: Hybrid.Zero.Identity.Entities.RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>.UpdateAsync(TRole, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Hybrid.Zero/Identity/Entities/RoleStoreBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: UpdateAsync
    path: ../src/Hybrid.Zero/Identity/Entities/RoleStoreBase.cs
    startLine: 151
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Zero.Identity.Entities
  summary: "\nUpdates a role in a store as an asynchronous operation.\n"
  example: []
  syntax:
    content: public Task<IdentityResult> UpdateAsync(TRole role, CancellationToken cancellationToken)
    parameters:
    - id: role
      type: '{TRole}'
      description: The role to update in the store.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task{Microsoft.AspNetCore.Identity.IdentityResult}
      description: A <xref href="System.Threading.Tasks.Task%601" data-throw-if-not-resolved="false"></xref> that represents the <xref href="Microsoft.AspNetCore.Identity.IdentityResult" data-throw-if-not-resolved="false"></xref> of the asynchronous query.
    content.vb: Public Function UpdateAsync(role As TRole, cancellationToken As CancellationToken) As Task(Of IdentityResult)
  overload: Hybrid.Zero.Identity.Entities.RoleStoreBase`4.UpdateAsync*
  implements:
  - Microsoft.AspNetCore.Identity.IRoleStore{{TRole}}.UpdateAsync({TRole},System.Threading.CancellationToken)
  nameWithType.vb: RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey).UpdateAsync(TRole, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Hybrid.Zero.Identity.Entities.RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey).UpdateAsync(TRole, System.Threading.CancellationToken)
- uid: Hybrid.Zero.Identity.Entities.RoleStoreBase`4.DeleteAsync(`0,System.Threading.CancellationToken)
  commentId: M:Hybrid.Zero.Identity.Entities.RoleStoreBase`4.DeleteAsync(`0,System.Threading.CancellationToken)
  id: DeleteAsync(`0,System.Threading.CancellationToken)
  parent: Hybrid.Zero.Identity.Entities.RoleStoreBase`4
  langs:
  - csharp
  - vb
  name: DeleteAsync(TRole, CancellationToken)
  nameWithType: RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>.DeleteAsync(TRole, CancellationToken)
  fullName: Hybrid.Zero.Identity.Entities.RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>.DeleteAsync(TRole, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Hybrid.Zero/Identity/Entities/RoleStoreBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: DeleteAsync
    path: ../src/Hybrid.Zero/Identity/Entities/RoleStoreBase.cs
    startLine: 181
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Zero.Identity.Entities
  summary: "\nDeletes a role from the store as an asynchronous operation.\n"
  example: []
  syntax:
    content: public Task<IdentityResult> DeleteAsync(TRole role, CancellationToken cancellationToken)
    parameters:
    - id: role
      type: '{TRole}'
      description: The role to delete from the store.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task{Microsoft.AspNetCore.Identity.IdentityResult}
      description: A <xref href="System.Threading.Tasks.Task%601" data-throw-if-not-resolved="false"></xref> that represents the <xref href="Microsoft.AspNetCore.Identity.IdentityResult" data-throw-if-not-resolved="false"></xref> of the asynchronous query.
    content.vb: Public Function DeleteAsync(role As TRole, cancellationToken As CancellationToken) As Task(Of IdentityResult)
  overload: Hybrid.Zero.Identity.Entities.RoleStoreBase`4.DeleteAsync*
  implements:
  - Microsoft.AspNetCore.Identity.IRoleStore{{TRole}}.DeleteAsync({TRole},System.Threading.CancellationToken)
  nameWithType.vb: RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey).DeleteAsync(TRole, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Hybrid.Zero.Identity.Entities.RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey).DeleteAsync(TRole, System.Threading.CancellationToken)
- uid: Hybrid.Zero.Identity.Entities.RoleStoreBase`4.GetRoleIdAsync(`0,System.Threading.CancellationToken)
  commentId: M:Hybrid.Zero.Identity.Entities.RoleStoreBase`4.GetRoleIdAsync(`0,System.Threading.CancellationToken)
  id: GetRoleIdAsync(`0,System.Threading.CancellationToken)
  parent: Hybrid.Zero.Identity.Entities.RoleStoreBase`4
  langs:
  - csharp
  - vb
  name: GetRoleIdAsync(TRole, CancellationToken)
  nameWithType: RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>.GetRoleIdAsync(TRole, CancellationToken)
  fullName: Hybrid.Zero.Identity.Entities.RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>.GetRoleIdAsync(TRole, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Hybrid.Zero/Identity/Entities/RoleStoreBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: GetRoleIdAsync
    path: ../src/Hybrid.Zero/Identity/Entities/RoleStoreBase.cs
    startLine: 202
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Zero.Identity.Entities
  summary: "\nGets the ID for a role from the store as an asynchronous operation.\n"
  example: []
  syntax:
    content: public Task<string> GetRoleIdAsync(TRole role, CancellationToken cancellationToken)
    parameters:
    - id: role
      type: '{TRole}'
      description: The role whose ID should be returned.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: A <xref href="System.Threading.Tasks.Task%601" data-throw-if-not-resolved="false"></xref> that contains the ID of the role.
    content.vb: Public Function GetRoleIdAsync(role As TRole, cancellationToken As CancellationToken) As Task(Of String)
  overload: Hybrid.Zero.Identity.Entities.RoleStoreBase`4.GetRoleIdAsync*
  implements:
  - Microsoft.AspNetCore.Identity.IRoleStore{{TRole}}.GetRoleIdAsync({TRole},System.Threading.CancellationToken)
  nameWithType.vb: RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey).GetRoleIdAsync(TRole, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Hybrid.Zero.Identity.Entities.RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey).GetRoleIdAsync(TRole, System.Threading.CancellationToken)
- uid: Hybrid.Zero.Identity.Entities.RoleStoreBase`4.GetRoleNameAsync(`0,System.Threading.CancellationToken)
  commentId: M:Hybrid.Zero.Identity.Entities.RoleStoreBase`4.GetRoleNameAsync(`0,System.Threading.CancellationToken)
  id: GetRoleNameAsync(`0,System.Threading.CancellationToken)
  parent: Hybrid.Zero.Identity.Entities.RoleStoreBase`4
  langs:
  - csharp
  - vb
  name: GetRoleNameAsync(TRole, CancellationToken)
  nameWithType: RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>.GetRoleNameAsync(TRole, CancellationToken)
  fullName: Hybrid.Zero.Identity.Entities.RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>.GetRoleNameAsync(TRole, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Hybrid.Zero/Identity/Entities/RoleStoreBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: GetRoleNameAsync
    path: ../src/Hybrid.Zero/Identity/Entities/RoleStoreBase.cs
    startLine: 217
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Zero.Identity.Entities
  summary: "\nGets the name of a role from the store as an asynchronous operation.\n"
  example: []
  syntax:
    content: public Task<string> GetRoleNameAsync(TRole role, CancellationToken cancellationToken)
    parameters:
    - id: role
      type: '{TRole}'
      description: The role whose name should be returned.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: A <xref href="System.Threading.Tasks.Task%601" data-throw-if-not-resolved="false"></xref> that contains the name of the role.
    content.vb: Public Function GetRoleNameAsync(role As TRole, cancellationToken As CancellationToken) As Task(Of String)
  overload: Hybrid.Zero.Identity.Entities.RoleStoreBase`4.GetRoleNameAsync*
  implements:
  - Microsoft.AspNetCore.Identity.IRoleStore{{TRole}}.GetRoleNameAsync({TRole},System.Threading.CancellationToken)
  nameWithType.vb: RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey).GetRoleNameAsync(TRole, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Hybrid.Zero.Identity.Entities.RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey).GetRoleNameAsync(TRole, System.Threading.CancellationToken)
- uid: Hybrid.Zero.Identity.Entities.RoleStoreBase`4.SetRoleNameAsync(`0,System.String,System.Threading.CancellationToken)
  commentId: M:Hybrid.Zero.Identity.Entities.RoleStoreBase`4.SetRoleNameAsync(`0,System.String,System.Threading.CancellationToken)
  id: SetRoleNameAsync(`0,System.String,System.Threading.CancellationToken)
  parent: Hybrid.Zero.Identity.Entities.RoleStoreBase`4
  langs:
  - csharp
  - vb
  name: SetRoleNameAsync(TRole, String, CancellationToken)
  nameWithType: RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>.SetRoleNameAsync(TRole, String, CancellationToken)
  fullName: Hybrid.Zero.Identity.Entities.RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>.SetRoleNameAsync(TRole, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Hybrid.Zero/Identity/Entities/RoleStoreBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: SetRoleNameAsync
    path: ../src/Hybrid.Zero/Identity/Entities/RoleStoreBase.cs
    startLine: 233
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Zero.Identity.Entities
  summary: "\nSets the name of a role in the store as an asynchronous operation.\n"
  example: []
  syntax:
    content: public Task SetRoleNameAsync(TRole role, string roleName, CancellationToken cancellationToken)
    parameters:
    - id: role
      type: '{TRole}'
      description: The role whose name should be set.
    - id: roleName
      type: System.String
      description: The name of the role.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task
      description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
    content.vb: Public Function SetRoleNameAsync(role As TRole, roleName As String, cancellationToken As CancellationToken) As Task
  overload: Hybrid.Zero.Identity.Entities.RoleStoreBase`4.SetRoleNameAsync*
  implements:
  - Microsoft.AspNetCore.Identity.IRoleStore{{TRole}}.SetRoleNameAsync({TRole},System.String,System.Threading.CancellationToken)
  nameWithType.vb: RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey).SetRoleNameAsync(TRole, String, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Hybrid.Zero.Identity.Entities.RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey).SetRoleNameAsync(TRole, System.String, System.Threading.CancellationToken)
- uid: Hybrid.Zero.Identity.Entities.RoleStoreBase`4.GetNormalizedRoleNameAsync(`0,System.Threading.CancellationToken)
  commentId: M:Hybrid.Zero.Identity.Entities.RoleStoreBase`4.GetNormalizedRoleNameAsync(`0,System.Threading.CancellationToken)
  id: GetNormalizedRoleNameAsync(`0,System.Threading.CancellationToken)
  parent: Hybrid.Zero.Identity.Entities.RoleStoreBase`4
  langs:
  - csharp
  - vb
  name: GetNormalizedRoleNameAsync(TRole, CancellationToken)
  nameWithType: RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>.GetNormalizedRoleNameAsync(TRole, CancellationToken)
  fullName: Hybrid.Zero.Identity.Entities.RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>.GetNormalizedRoleNameAsync(TRole, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Hybrid.Zero/Identity/Entities/RoleStoreBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: GetNormalizedRoleNameAsync
    path: ../src/Hybrid.Zero/Identity/Entities/RoleStoreBase.cs
    startLine: 249
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Zero.Identity.Entities
  summary: "\nGet a role&apos;s normalized name as an asynchronous operation.\n"
  example: []
  syntax:
    content: public Task<string> GetNormalizedRoleNameAsync(TRole role, CancellationToken cancellationToken)
    parameters:
    - id: role
      type: '{TRole}'
      description: The role whose normalized name should be retrieved.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: A <xref href="System.Threading.Tasks.Task%601" data-throw-if-not-resolved="false"></xref> that contains the name of the role.
    content.vb: Public Function GetNormalizedRoleNameAsync(role As TRole, cancellationToken As CancellationToken) As Task(Of String)
  overload: Hybrid.Zero.Identity.Entities.RoleStoreBase`4.GetNormalizedRoleNameAsync*
  implements:
  - Microsoft.AspNetCore.Identity.IRoleStore{{TRole}}.GetNormalizedRoleNameAsync({TRole},System.Threading.CancellationToken)
  nameWithType.vb: RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey).GetNormalizedRoleNameAsync(TRole, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Hybrid.Zero.Identity.Entities.RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey).GetNormalizedRoleNameAsync(TRole, System.Threading.CancellationToken)
- uid: Hybrid.Zero.Identity.Entities.RoleStoreBase`4.SetNormalizedRoleNameAsync(`0,System.String,System.Threading.CancellationToken)
  commentId: M:Hybrid.Zero.Identity.Entities.RoleStoreBase`4.SetNormalizedRoleNameAsync(`0,System.String,System.Threading.CancellationToken)
  id: SetNormalizedRoleNameAsync(`0,System.String,System.Threading.CancellationToken)
  parent: Hybrid.Zero.Identity.Entities.RoleStoreBase`4
  langs:
  - csharp
  - vb
  name: SetNormalizedRoleNameAsync(TRole, String, CancellationToken)
  nameWithType: RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>.SetNormalizedRoleNameAsync(TRole, String, CancellationToken)
  fullName: Hybrid.Zero.Identity.Entities.RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>.SetNormalizedRoleNameAsync(TRole, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Hybrid.Zero/Identity/Entities/RoleStoreBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: SetNormalizedRoleNameAsync
    path: ../src/Hybrid.Zero/Identity/Entities/RoleStoreBase.cs
    startLine: 265
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Zero.Identity.Entities
  summary: "\nSet a role&apos;s normalized name as an asynchronous operation.\n"
  example: []
  syntax:
    content: public Task SetNormalizedRoleNameAsync(TRole role, string normalizedName, CancellationToken cancellationToken)
    parameters:
    - id: role
      type: '{TRole}'
      description: The role whose normalized name should be set.
    - id: normalizedName
      type: System.String
      description: The normalized name to set
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task
      description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
    content.vb: Public Function SetNormalizedRoleNameAsync(role As TRole, normalizedName As String, cancellationToken As CancellationToken) As Task
  overload: Hybrid.Zero.Identity.Entities.RoleStoreBase`4.SetNormalizedRoleNameAsync*
  implements:
  - Microsoft.AspNetCore.Identity.IRoleStore{{TRole}}.SetNormalizedRoleNameAsync({TRole},System.String,System.Threading.CancellationToken)
  nameWithType.vb: RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey).SetNormalizedRoleNameAsync(TRole, String, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Hybrid.Zero.Identity.Entities.RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey).SetNormalizedRoleNameAsync(TRole, System.String, System.Threading.CancellationToken)
- uid: Hybrid.Zero.Identity.Entities.RoleStoreBase`4.FindByIdAsync(System.String,System.Threading.CancellationToken)
  commentId: M:Hybrid.Zero.Identity.Entities.RoleStoreBase`4.FindByIdAsync(System.String,System.Threading.CancellationToken)
  id: FindByIdAsync(System.String,System.Threading.CancellationToken)
  parent: Hybrid.Zero.Identity.Entities.RoleStoreBase`4
  langs:
  - csharp
  - vb
  name: FindByIdAsync(String, CancellationToken)
  nameWithType: RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>.FindByIdAsync(String, CancellationToken)
  fullName: Hybrid.Zero.Identity.Entities.RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>.FindByIdAsync(System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Hybrid.Zero/Identity/Entities/RoleStoreBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: FindByIdAsync
    path: ../src/Hybrid.Zero/Identity/Entities/RoleStoreBase.cs
    startLine: 281
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Zero.Identity.Entities
  summary: "\nFinds the role who has the specified ID as an asynchronous operation.\n"
  example: []
  syntax:
    content: public Task<TRole> FindByIdAsync(string roleId, CancellationToken cancellationToken)
    parameters:
    - id: roleId
      type: System.String
      description: The role ID to look for.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task{{TRole}}
      description: A <xref href="System.Threading.Tasks.Task%601" data-throw-if-not-resolved="false"></xref> that result of the look up.
    content.vb: Public Function FindByIdAsync(roleId As String, cancellationToken As CancellationToken) As Task(Of TRole)
  overload: Hybrid.Zero.Identity.Entities.RoleStoreBase`4.FindByIdAsync*
  implements:
  - Microsoft.AspNetCore.Identity.IRoleStore{{TRole}}.FindByIdAsync(System.String,System.Threading.CancellationToken)
  nameWithType.vb: RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey).FindByIdAsync(String, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Hybrid.Zero.Identity.Entities.RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey).FindByIdAsync(System.String, System.Threading.CancellationToken)
- uid: Hybrid.Zero.Identity.Entities.RoleStoreBase`4.FindByNameAsync(System.String,System.Threading.CancellationToken)
  commentId: M:Hybrid.Zero.Identity.Entities.RoleStoreBase`4.FindByNameAsync(System.String,System.Threading.CancellationToken)
  id: FindByNameAsync(System.String,System.Threading.CancellationToken)
  parent: Hybrid.Zero.Identity.Entities.RoleStoreBase`4
  langs:
  - csharp
  - vb
  name: FindByNameAsync(String, CancellationToken)
  nameWithType: RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>.FindByNameAsync(String, CancellationToken)
  fullName: Hybrid.Zero.Identity.Entities.RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>.FindByNameAsync(System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Hybrid.Zero/Identity/Entities/RoleStoreBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: FindByNameAsync
    path: ../src/Hybrid.Zero/Identity/Entities/RoleStoreBase.cs
    startLine: 296
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Zero.Identity.Entities
  summary: "\nFinds the role who has the specified normalized name as an asynchronous operation.\n"
  example: []
  syntax:
    content: public Task<TRole> FindByNameAsync(string normalizedRoleName, CancellationToken cancellationToken)
    parameters:
    - id: normalizedRoleName
      type: System.String
      description: The normalized role name to look for.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task{{TRole}}
      description: A <xref href="System.Threading.Tasks.Task%601" data-throw-if-not-resolved="false"></xref> that result of the look up.
    content.vb: Public Function FindByNameAsync(normalizedRoleName As String, cancellationToken As CancellationToken) As Task(Of TRole)
  overload: Hybrid.Zero.Identity.Entities.RoleStoreBase`4.FindByNameAsync*
  implements:
  - Microsoft.AspNetCore.Identity.IRoleStore{{TRole}}.FindByNameAsync(System.String,System.Threading.CancellationToken)
  nameWithType.vb: RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey).FindByNameAsync(String, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Hybrid.Zero.Identity.Entities.RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey).FindByNameAsync(System.String, System.Threading.CancellationToken)
- uid: Hybrid.Zero.Identity.Entities.RoleStoreBase`4.GetClaimsAsync(`0,System.Threading.CancellationToken)
  commentId: M:Hybrid.Zero.Identity.Entities.RoleStoreBase`4.GetClaimsAsync(`0,System.Threading.CancellationToken)
  id: GetClaimsAsync(`0,System.Threading.CancellationToken)
  parent: Hybrid.Zero.Identity.Entities.RoleStoreBase`4
  langs:
  - csharp
  - vb
  name: GetClaimsAsync(TRole, CancellationToken)
  nameWithType: RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>.GetClaimsAsync(TRole, CancellationToken)
  fullName: Hybrid.Zero.Identity.Entities.RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>.GetClaimsAsync(TRole, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Hybrid.Zero/Identity/Entities/RoleStoreBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: GetClaimsAsync
    path: ../src/Hybrid.Zero/Identity/Entities/RoleStoreBase.cs
    startLine: 315
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Zero.Identity.Entities
  summary: "\nGets a list of <xref href=\"System.Security.Claims.Claim\" data-throw-if-not-resolved=\"false\"></xref>s to be belonging to the specified <code data-dev-comment-type=\"paramref\" class=\"paramref\">role</code> as an asynchronous operation.\n"
  example: []
  syntax:
    content: public Task<IList<Claim>> GetClaimsAsync(TRole role, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: role
      type: '{TRole}'
      description: The role whose claims to retrieve.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IList{System.Security.Claims.Claim}}
      description: "\nA <xref href=\"System.Threading.Tasks.Task%601\" data-throw-if-not-resolved=\"false\"></xref> that represents the result of the asynchronous query, a list of <xref href=\"System.Security.Claims.Claim\" data-throw-if-not-resolved=\"false\"></xref>s.\n"
    content.vb: Public Function GetClaimsAsync(role As TRole, cancellationToken As CancellationToken = Nothing) As Task(Of IList(Of Claim))
  overload: Hybrid.Zero.Identity.Entities.RoleStoreBase`4.GetClaimsAsync*
  implements:
  - Microsoft.AspNetCore.Identity.IRoleClaimStore{{TRole}}.GetClaimsAsync({TRole},System.Threading.CancellationToken)
  nameWithType.vb: RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey).GetClaimsAsync(TRole, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Hybrid.Zero.Identity.Entities.RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey).GetClaimsAsync(TRole, System.Threading.CancellationToken)
- uid: Hybrid.Zero.Identity.Entities.RoleStoreBase`4.AddClaimAsync(`0,System.Security.Claims.Claim,System.Threading.CancellationToken)
  commentId: M:Hybrid.Zero.Identity.Entities.RoleStoreBase`4.AddClaimAsync(`0,System.Security.Claims.Claim,System.Threading.CancellationToken)
  id: AddClaimAsync(`0,System.Security.Claims.Claim,System.Threading.CancellationToken)
  parent: Hybrid.Zero.Identity.Entities.RoleStoreBase`4
  langs:
  - csharp
  - vb
  name: AddClaimAsync(TRole, Claim, CancellationToken)
  nameWithType: RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>.AddClaimAsync(TRole, Claim, CancellationToken)
  fullName: Hybrid.Zero.Identity.Entities.RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>.AddClaimAsync(TRole, System.Security.Claims.Claim, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Hybrid.Zero/Identity/Entities/RoleStoreBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: AddClaimAsync
    path: ../src/Hybrid.Zero/Identity/Entities/RoleStoreBase.cs
    startLine: 333
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Zero.Identity.Entities
  summary: "\nAdd a new claim to a role as an asynchronous operation.\n"
  example: []
  syntax:
    content: public Task AddClaimAsync(TRole role, Claim claim, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: role
      type: '{TRole}'
      description: The role to add a claim to.
    - id: claim
      type: System.Security.Claims.Claim
      description: The <xref href="System.Security.Claims.Claim" data-throw-if-not-resolved="false"></xref> to add.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task
      description: The task object representing the asynchronous operation.
    content.vb: Public Function AddClaimAsync(role As TRole, claim As Claim, cancellationToken As CancellationToken = Nothing) As Task
  overload: Hybrid.Zero.Identity.Entities.RoleStoreBase`4.AddClaimAsync*
  implements:
  - Microsoft.AspNetCore.Identity.IRoleClaimStore{{TRole}}.AddClaimAsync({TRole},System.Security.Claims.Claim,System.Threading.CancellationToken)
  nameWithType.vb: RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey).AddClaimAsync(TRole, Claim, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Hybrid.Zero.Identity.Entities.RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey).AddClaimAsync(TRole, System.Security.Claims.Claim, System.Threading.CancellationToken)
- uid: Hybrid.Zero.Identity.Entities.RoleStoreBase`4.RemoveClaimAsync(`0,System.Security.Claims.Claim,System.Threading.CancellationToken)
  commentId: M:Hybrid.Zero.Identity.Entities.RoleStoreBase`4.RemoveClaimAsync(`0,System.Security.Claims.Claim,System.Threading.CancellationToken)
  id: RemoveClaimAsync(`0,System.Security.Claims.Claim,System.Threading.CancellationToken)
  parent: Hybrid.Zero.Identity.Entities.RoleStoreBase`4
  langs:
  - csharp
  - vb
  name: RemoveClaimAsync(TRole, Claim, CancellationToken)
  nameWithType: RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>.RemoveClaimAsync(TRole, Claim, CancellationToken)
  fullName: Hybrid.Zero.Identity.Entities.RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>.RemoveClaimAsync(TRole, System.Security.Claims.Claim, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Hybrid.Zero/Identity/Entities/RoleStoreBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: RemoveClaimAsync
    path: ../src/Hybrid.Zero/Identity/Entities/RoleStoreBase.cs
    startLine: 351
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Zero.Identity.Entities
  summary: "\nRemove a claim from a role as an asynchronous operation.\n"
  example: []
  syntax:
    content: public Task RemoveClaimAsync(TRole role, Claim claim, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: role
      type: '{TRole}'
      description: The role to remove the claim from.
    - id: claim
      type: System.Security.Claims.Claim
      description: The <xref href="System.Security.Claims.Claim" data-throw-if-not-resolved="false"></xref> to remove.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task
      description: The task object representing the asynchronous operation.
    content.vb: Public Function RemoveClaimAsync(role As TRole, claim As Claim, cancellationToken As CancellationToken = Nothing) As Task
  overload: Hybrid.Zero.Identity.Entities.RoleStoreBase`4.RemoveClaimAsync*
  implements:
  - Microsoft.AspNetCore.Identity.IRoleClaimStore{{TRole}}.RemoveClaimAsync({TRole},System.Security.Claims.Claim,System.Threading.CancellationToken)
  nameWithType.vb: RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey).RemoveClaimAsync(TRole, Claim, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Hybrid.Zero.Identity.Entities.RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey).RemoveClaimAsync(TRole, System.Security.Claims.Claim, System.Threading.CancellationToken)
references:
- uid: Hybrid.Zero.Identity.Entities
  commentId: N:Hybrid.Zero.Identity.Entities
  name: Hybrid.Zero.Identity.Entities
  nameWithType: Hybrid.Zero.Identity.Entities
  fullName: Hybrid.Zero.Identity.Entities
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.AspNetCore.Identity.IQueryableRoleStore{{TRole}}
  commentId: T:Microsoft.AspNetCore.Identity.IQueryableRoleStore{`0}
  parent: Microsoft.AspNetCore.Identity
  definition: Microsoft.AspNetCore.Identity.IQueryableRoleStore`1
  name: IQueryableRoleStore<TRole>
  nameWithType: IQueryableRoleStore<TRole>
  fullName: Microsoft.AspNetCore.Identity.IQueryableRoleStore<TRole>
  nameWithType.vb: IQueryableRoleStore(Of TRole)
  fullName.vb: Microsoft.AspNetCore.Identity.IQueryableRoleStore(Of TRole)
  name.vb: IQueryableRoleStore(Of TRole)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IQueryableRoleStore`1
    name: IQueryableRoleStore
    nameWithType: IQueryableRoleStore
    fullName: Microsoft.AspNetCore.Identity.IQueryableRoleStore
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IQueryableRoleStore`1
    name: IQueryableRoleStore
    nameWithType: IQueryableRoleStore
    fullName: Microsoft.AspNetCore.Identity.IQueryableRoleStore
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IRoleClaimStore{{TRole}}
  commentId: T:Microsoft.AspNetCore.Identity.IRoleClaimStore{`0}
  parent: Microsoft.AspNetCore.Identity
  definition: Microsoft.AspNetCore.Identity.IRoleClaimStore`1
  name: IRoleClaimStore<TRole>
  nameWithType: IRoleClaimStore<TRole>
  fullName: Microsoft.AspNetCore.Identity.IRoleClaimStore<TRole>
  nameWithType.vb: IRoleClaimStore(Of TRole)
  fullName.vb: Microsoft.AspNetCore.Identity.IRoleClaimStore(Of TRole)
  name.vb: IRoleClaimStore(Of TRole)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IRoleClaimStore`1
    name: IRoleClaimStore
    nameWithType: IRoleClaimStore
    fullName: Microsoft.AspNetCore.Identity.IRoleClaimStore
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IRoleClaimStore`1
    name: IRoleClaimStore
    nameWithType: IRoleClaimStore
    fullName: Microsoft.AspNetCore.Identity.IRoleClaimStore
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IRoleStore{{TRole}}
  commentId: T:Microsoft.AspNetCore.Identity.IRoleStore{`0}
  parent: Microsoft.AspNetCore.Identity
  definition: Microsoft.AspNetCore.Identity.IRoleStore`1
  name: IRoleStore<TRole>
  nameWithType: IRoleStore<TRole>
  fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>
  nameWithType.vb: IRoleStore(Of TRole)
  fullName.vb: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole)
  name.vb: IRoleStore(Of TRole)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1
    name: IRoleStore
    nameWithType: IRoleStore
    fullName: Microsoft.AspNetCore.Identity.IRoleStore
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1
    name: IRoleStore
    nameWithType: IRoleStore
    fullName: Microsoft.AspNetCore.Identity.IRoleStore
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Extensions.ObjectExtensions.CastTo(System.Type)
  commentId: M:Hybrid.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
  parent: Hybrid.Extensions.ObjectExtensions
  definition: Hybrid.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
  name: CastTo(Type)
  nameWithType: ObjectExtensions.CastTo(Type)
  fullName: Hybrid.Extensions.ObjectExtensions.CastTo(System.Type)
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo(System.Type)
    name: CastTo
    nameWithType: ObjectExtensions.CastTo
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo(System.Type)
    name: CastTo
    nameWithType: ObjectExtensions.CastTo
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Extensions.ObjectExtensions.CastTo``1
  commentId: M:Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object)
  parent: Hybrid.Extensions.ObjectExtensions
  definition: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object)
  name: CastTo<T>()
  nameWithType: ObjectExtensions.CastTo<T>()
  fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>()
  nameWithType.vb: ObjectExtensions.CastTo(Of T)()
  fullName.vb: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)()
  name.vb: CastTo(Of T)()
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1
    name: CastTo<T>
    nameWithType: ObjectExtensions.CastTo<T>
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1
    name: CastTo(Of T)
    nameWithType: ObjectExtensions.CastTo(Of T)
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Extensions.ObjectExtensions.CastTo``1({T})
  commentId: M:Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
  parent: Hybrid.Extensions.ObjectExtensions
  definition: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
  name: CastTo<T>(T)
  nameWithType: ObjectExtensions.CastTo<T>(T)
  fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>(T)
  nameWithType.vb: ObjectExtensions.CastTo(Of T)(T)
  fullName.vb: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)(T)
  name.vb: CastTo(Of T)(T)
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(``0)
    name: CastTo<T>
    nameWithType: ObjectExtensions.CastTo<T>
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(``0)
    name: CastTo(Of T)
    nameWithType: ObjectExtensions.CastTo(Of T)
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Identity.Entities.RoleStoreBase`4.Hybrid.Extensions.ObjectExtensions.IsIn``1(Hybrid.Zero.Identity.Entities.RoleStoreBase{{TRole},{TRoleKey},{TRoleClaim},{TRoleClaimKey}}[])
  commentId: M:Hybrid.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
  parent: Hybrid.Extensions.ObjectExtensions
  definition: Hybrid.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
  name: IsIn<RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>>(RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>[])
  nameWithType: ObjectExtensions.IsIn<RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>>(RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>[])
  fullName: Hybrid.Extensions.ObjectExtensions.IsIn<Hybrid.Zero.Identity.Entities.RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>>(Hybrid.Zero.Identity.Entities.RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>[])
  nameWithType.vb: ObjectExtensions.IsIn(Of RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey))(RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey)())
  fullName.vb: Hybrid.Extensions.ObjectExtensions.IsIn(Of Hybrid.Zero.Identity.Entities.RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey))(Hybrid.Zero.Identity.Entities.RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey)())
  name.vb: IsIn(Of RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey))(RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey)())
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.IsIn``1(``0[])
    name: IsIn<RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>>
    nameWithType: ObjectExtensions.IsIn<RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>>
    fullName: Hybrid.Extensions.ObjectExtensions.IsIn<Hybrid.Zero.Identity.Entities.RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Hybrid.Zero.Identity.Entities.RoleStoreBase`4
    name: RoleStoreBase
    nameWithType: RoleStoreBase
    fullName: Hybrid.Zero.Identity.Entities.RoleStoreBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleClaim
    nameWithType: TRoleClaim
    fullName: TRoleClaim
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleClaimKey
    nameWithType: TRoleClaimKey
    fullName: TRoleClaimKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.IsIn``1(``0[])
    name: IsIn(Of RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey))
    nameWithType: ObjectExtensions.IsIn(Of RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey))
    fullName: Hybrid.Extensions.ObjectExtensions.IsIn(Of Hybrid.Zero.Identity.Entities.RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey))
  - name: (
    nameWithType: (
    fullName: (
  - uid: Hybrid.Zero.Identity.Entities.RoleStoreBase`4
    name: RoleStoreBase
    nameWithType: RoleStoreBase
    fullName: Hybrid.Zero.Identity.Entities.RoleStoreBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleClaim
    nameWithType: TRoleClaim
    fullName: TRoleClaim
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleClaimKey
    nameWithType: TRoleClaimKey
    fullName: TRoleClaimKey
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Extensions.ObjectExtensions.ToDynamic
  commentId: M:Hybrid.Extensions.ObjectExtensions.ToDynamic(System.Object)
  parent: Hybrid.Extensions.ObjectExtensions
  definition: Hybrid.Extensions.ObjectExtensions.ToDynamic(System.Object)
  name: ToDynamic()
  nameWithType: ObjectExtensions.ToDynamic()
  fullName: Hybrid.Extensions.ObjectExtensions.ToDynamic()
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.ToDynamic
    name: ToDynamic
    nameWithType: ObjectExtensions.ToDynamic
    fullName: Hybrid.Extensions.ObjectExtensions.ToDynamic
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.ToDynamic
    name: ToDynamic
    nameWithType: ObjectExtensions.ToDynamic
    fullName: Hybrid.Extensions.ObjectExtensions.ToDynamic
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Identity.Entities.RoleStoreBase`4.Hybrid.Extensions.ObjectExtensions.DeepClone``1
  commentId: M:Hybrid.Extensions.ObjectExtensions.DeepClone``1(``0)
  parent: Hybrid.Extensions.ObjectExtensions
  definition: Hybrid.Extensions.ObjectExtensions.DeepClone``1(``0)
  name: DeepClone<RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>>()
  nameWithType: ObjectExtensions.DeepClone<RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>>()
  fullName: Hybrid.Extensions.ObjectExtensions.DeepClone<Hybrid.Zero.Identity.Entities.RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>>()
  nameWithType.vb: ObjectExtensions.DeepClone(Of RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey))()
  fullName.vb: Hybrid.Extensions.ObjectExtensions.DeepClone(Of Hybrid.Zero.Identity.Entities.RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey))()
  name.vb: DeepClone(Of RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey))()
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.DeepClone``1
    name: DeepClone<RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>>
    nameWithType: ObjectExtensions.DeepClone<RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>>
    fullName: Hybrid.Extensions.ObjectExtensions.DeepClone<Hybrid.Zero.Identity.Entities.RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.DeepClone``1
    name: DeepClone(Of RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey))
    nameWithType: ObjectExtensions.DeepClone(Of RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey))
    fullName: Hybrid.Extensions.ObjectExtensions.DeepClone(Of Hybrid.Zero.Identity.Entities.RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey))
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Identity.Entities.RoleStoreBase`4.Hybrid.Extensions.ParameterCheckExtensions.Required``1(System.Func{Hybrid.Zero.Identity.Entities.RoleStoreBase{{TRole},{TRoleKey},{TRoleClaim},{TRoleClaimKey}},System.Boolean},System.String)
  commentId: M:Hybrid.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
  parent: Hybrid.Extensions.ParameterCheckExtensions
  definition: Hybrid.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
  name: Required<RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>>(Func<RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>, Boolean>, String)
  nameWithType: ParameterCheckExtensions.Required<RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>>(Func<RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>, Boolean>, String)
  fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<Hybrid.Zero.Identity.Entities.RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>>(System.Func<Hybrid.Zero.Identity.Entities.RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>, System.Boolean>, System.String)
  nameWithType.vb: ParameterCheckExtensions.Required(Of RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey))(Func(Of RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey), Boolean), String)
  fullName.vb: Hybrid.Extensions.ParameterCheckExtensions.Required(Of Hybrid.Zero.Identity.Entities.RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey))(System.Func(Of Hybrid.Zero.Identity.Entities.RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey), System.Boolean), System.String)
  name.vb: Required(Of RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey))(Func(Of RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey), Boolean), String)
  spec.csharp:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``1(System.Func{``0,System.Boolean},System.String)
    name: Required<RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>>
    nameWithType: ParameterCheckExtensions.Required<RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>>
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<Hybrid.Zero.Identity.Entities.RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Zero.Identity.Entities.RoleStoreBase`4
    name: RoleStoreBase
    nameWithType: RoleStoreBase
    fullName: Hybrid.Zero.Identity.Entities.RoleStoreBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleClaim
    nameWithType: TRoleClaim
    fullName: TRoleClaim
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleClaimKey
    nameWithType: TRoleClaimKey
    fullName: TRoleClaimKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``1(System.Func{``0,System.Boolean},System.String)
    name: Required(Of RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey))
    nameWithType: ParameterCheckExtensions.Required(Of RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey))
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required(Of Hybrid.Zero.Identity.Entities.RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey))
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Zero.Identity.Entities.RoleStoreBase`4
    name: RoleStoreBase
    nameWithType: RoleStoreBase
    fullName: Hybrid.Zero.Identity.Entities.RoleStoreBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleClaim
    nameWithType: TRoleClaim
    fullName: TRoleClaim
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleClaimKey
    nameWithType: TRoleClaimKey
    fullName: TRoleClaimKey
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Identity.Entities.RoleStoreBase`4.Hybrid.Extensions.ParameterCheckExtensions.Required``2(System.Func{Hybrid.Zero.Identity.Entities.RoleStoreBase{{TRole},{TRoleKey},{TRoleClaim},{TRoleClaimKey}},System.Boolean},System.String)
  commentId: M:Hybrid.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
  parent: Hybrid.Extensions.ParameterCheckExtensions
  definition: Hybrid.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
  name: Required<RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>, TException>(Func<RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>, Boolean>, String)
  nameWithType: ParameterCheckExtensions.Required<RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>, TException>(Func<RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>, Boolean>, String)
  fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<Hybrid.Zero.Identity.Entities.RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>, TException>(System.Func<Hybrid.Zero.Identity.Entities.RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>, System.Boolean>, System.String)
  nameWithType.vb: ParameterCheckExtensions.Required(Of RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey), TException)(Func(Of RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey), Boolean), String)
  fullName.vb: Hybrid.Extensions.ParameterCheckExtensions.Required(Of Hybrid.Zero.Identity.Entities.RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey), TException)(System.Func(Of Hybrid.Zero.Identity.Entities.RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey), System.Boolean), System.String)
  name.vb: Required(Of RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey), TException)(Func(Of RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey), Boolean), String)
  spec.csharp:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``2(System.Func{``0,System.Boolean},System.String)
    name: Required<RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>, TException>
    nameWithType: ParameterCheckExtensions.Required<RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>, TException>
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<Hybrid.Zero.Identity.Entities.RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>, TException>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Zero.Identity.Entities.RoleStoreBase`4
    name: RoleStoreBase
    nameWithType: RoleStoreBase
    fullName: Hybrid.Zero.Identity.Entities.RoleStoreBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleClaim
    nameWithType: TRoleClaim
    fullName: TRoleClaim
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleClaimKey
    nameWithType: TRoleClaimKey
    fullName: TRoleClaimKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``2(System.Func{``0,System.Boolean},System.String)
    name: Required(Of RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey), TException)
    nameWithType: ParameterCheckExtensions.Required(Of RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey), TException)
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required(Of Hybrid.Zero.Identity.Entities.RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey), TException)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Zero.Identity.Entities.RoleStoreBase`4
    name: RoleStoreBase
    nameWithType: RoleStoreBase
    fullName: Hybrid.Zero.Identity.Entities.RoleStoreBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleClaim
    nameWithType: TRoleClaim
    fullName: TRoleClaim
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleClaimKey
    nameWithType: TRoleClaimKey
    fullName: TRoleClaimKey
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Identity.Entities.RoleStoreBase`4.Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(System.String)
  commentId: M:Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
  parent: Hybrid.Extensions.ParameterCheckExtensions
  definition: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
  name: CheckNotNull<RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>>(String)
  nameWithType: ParameterCheckExtensions.CheckNotNull<RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>>(String)
  fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull<Hybrid.Zero.Identity.Entities.RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>>(System.String)
  nameWithType.vb: ParameterCheckExtensions.CheckNotNull(Of RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey))(String)
  fullName.vb: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull(Of Hybrid.Zero.Identity.Entities.RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey))(System.String)
  name.vb: CheckNotNull(Of RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey))(String)
  spec.csharp:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(System.String)
    name: CheckNotNull<RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>>
    nameWithType: ParameterCheckExtensions.CheckNotNull<RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>>
    fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull<Hybrid.Zero.Identity.Entities.RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(System.String)
    name: CheckNotNull(Of RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey))
    nameWithType: ParameterCheckExtensions.CheckNotNull(Of RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey))
    fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull(Of Hybrid.Zero.Identity.Entities.RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey))
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Identity.Entities.RoleStoreBase`4.Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{Hybrid.Zero.Identity.Entities.RoleStoreBase{{TRole},{TRoleKey},{TRoleClaim},{TRoleClaimKey}}},System.Action{System.Exception},System.Action{Hybrid.Zero.Identity.Entities.RoleStoreBase{{TRole},{TRoleKey},{TRoleClaim},{TRoleClaimKey}}})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
  parent: Hybrid.Extensions.TryCatchExtensions
  definition: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
  name: TryCatch<RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>>(Action<RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>>, Action<Exception>, Action<RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>>)
  nameWithType: TryCatchExtensions.TryCatch<RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>>(Action<RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>>, Action<Exception>, Action<RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.Zero.Identity.Entities.RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>>(System.Action<Hybrid.Zero.Identity.Entities.RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>>, System.Action<System.Exception>, System.Action<Hybrid.Zero.Identity.Entities.RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey))(Action(Of RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey)), Action(Of Exception), Action(Of RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey)))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.Zero.Identity.Entities.RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey))(System.Action(Of Hybrid.Zero.Identity.Entities.RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey)), System.Action(Of System.Exception), System.Action(Of Hybrid.Zero.Identity.Entities.RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey)))
  name.vb: TryCatch(Of RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey))(Action(Of RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey)), Action(Of Exception), Action(Of RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey)))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{``0},System.Action{System.Exception},System.Action{``0})
    name: TryCatch<RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>>
    nameWithType: TryCatchExtensions.TryCatch<RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.Zero.Identity.Entities.RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Zero.Identity.Entities.RoleStoreBase`4
    name: RoleStoreBase
    nameWithType: RoleStoreBase
    fullName: Hybrid.Zero.Identity.Entities.RoleStoreBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleClaim
    nameWithType: TRoleClaim
    fullName: TRoleClaim
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleClaimKey
    nameWithType: TRoleClaimKey
    fullName: TRoleClaimKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Zero.Identity.Entities.RoleStoreBase`4
    name: RoleStoreBase
    nameWithType: RoleStoreBase
    fullName: Hybrid.Zero.Identity.Entities.RoleStoreBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleClaim
    nameWithType: TRoleClaim
    fullName: TRoleClaim
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleClaimKey
    nameWithType: TRoleClaimKey
    fullName: TRoleClaimKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{``0},System.Action{System.Exception},System.Action{``0})
    name: TryCatch(Of RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey))
    nameWithType: TryCatchExtensions.TryCatch(Of RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey))
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.Zero.Identity.Entities.RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey))
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Zero.Identity.Entities.RoleStoreBase`4
    name: RoleStoreBase
    nameWithType: RoleStoreBase
    fullName: Hybrid.Zero.Identity.Entities.RoleStoreBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleClaim
    nameWithType: TRoleClaim
    fullName: TRoleClaim
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleClaimKey
    nameWithType: TRoleClaimKey
    fullName: TRoleClaimKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Zero.Identity.Entities.RoleStoreBase`4
    name: RoleStoreBase
    nameWithType: RoleStoreBase
    fullName: Hybrid.Zero.Identity.Entities.RoleStoreBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleClaim
    nameWithType: TRoleClaim
    fullName: TRoleClaim
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleClaimKey
    nameWithType: TRoleClaimKey
    fullName: TRoleClaimKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Identity.Entities.RoleStoreBase`4.Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{Hybrid.Zero.Identity.Entities.RoleStoreBase{{TRole},{TRoleKey},{TRoleClaim},{TRoleClaimKey}}},System.Action{System.Exception})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
  parent: Hybrid.Extensions.TryCatchExtensions
  definition: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
  name: TryCatch<RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>>(Action<RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>>, Action<Exception>)
  nameWithType: TryCatchExtensions.TryCatch<RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>>(Action<RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>>, Action<Exception>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.Zero.Identity.Entities.RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>>(System.Action<Hybrid.Zero.Identity.Entities.RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>>, System.Action<System.Exception>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey))(Action(Of RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey)), Action(Of Exception))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.Zero.Identity.Entities.RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey))(System.Action(Of Hybrid.Zero.Identity.Entities.RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey)), System.Action(Of System.Exception))
  name.vb: TryCatch(Of RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey))(Action(Of RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey)), Action(Of Exception))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{``0},System.Action{System.Exception})
    name: TryCatch<RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>>
    nameWithType: TryCatchExtensions.TryCatch<RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.Zero.Identity.Entities.RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Zero.Identity.Entities.RoleStoreBase`4
    name: RoleStoreBase
    nameWithType: RoleStoreBase
    fullName: Hybrid.Zero.Identity.Entities.RoleStoreBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleClaim
    nameWithType: TRoleClaim
    fullName: TRoleClaim
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleClaimKey
    nameWithType: TRoleClaimKey
    fullName: TRoleClaimKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{``0},System.Action{System.Exception})
    name: TryCatch(Of RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey))
    nameWithType: TryCatchExtensions.TryCatch(Of RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey))
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.Zero.Identity.Entities.RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey))
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Zero.Identity.Entities.RoleStoreBase`4
    name: RoleStoreBase
    nameWithType: RoleStoreBase
    fullName: Hybrid.Zero.Identity.Entities.RoleStoreBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleClaim
    nameWithType: TRoleClaim
    fullName: TRoleClaim
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleClaimKey
    nameWithType: TRoleClaimKey
    fullName: TRoleClaimKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Identity.Entities.RoleStoreBase`4.Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{Hybrid.Zero.Identity.Entities.RoleStoreBase{{TRole},{TRoleKey},{TRoleClaim},{TRoleClaimKey}},{TResult}},System.Action{System.Exception},System.Action{Hybrid.Zero.Identity.Entities.RoleStoreBase{{TRole},{TRoleKey},{TRoleClaim},{TRoleClaimKey}}})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
  parent: Hybrid.Extensions.TryCatchExtensions
  definition: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
  name: TryCatch<RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>, TResult>(Func<RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>, TResult>, Action<Exception>, Action<RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>>)
  nameWithType: TryCatchExtensions.TryCatch<RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>, TResult>(Func<RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>, TResult>, Action<Exception>, Action<RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.Zero.Identity.Entities.RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>, TResult>(System.Func<Hybrid.Zero.Identity.Entities.RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>, TResult>, System.Action<System.Exception>, System.Action<Hybrid.Zero.Identity.Entities.RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey), TResult)(Func(Of RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey), TResult), Action(Of Exception), Action(Of RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey)))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.Zero.Identity.Entities.RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey), TResult)(System.Func(Of Hybrid.Zero.Identity.Entities.RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey), TResult), System.Action(Of System.Exception), System.Action(Of Hybrid.Zero.Identity.Entities.RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey)))
  name.vb: TryCatch(Of RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey), TResult)(Func(Of RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey), TResult), Action(Of Exception), Action(Of RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey)))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
    name: TryCatch<RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>, TResult>
    nameWithType: TryCatchExtensions.TryCatch<RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>, TResult>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.Zero.Identity.Entities.RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Zero.Identity.Entities.RoleStoreBase`4
    name: RoleStoreBase
    nameWithType: RoleStoreBase
    fullName: Hybrid.Zero.Identity.Entities.RoleStoreBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleClaim
    nameWithType: TRoleClaim
    fullName: TRoleClaim
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleClaimKey
    nameWithType: TRoleClaimKey
    fullName: TRoleClaimKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Zero.Identity.Entities.RoleStoreBase`4
    name: RoleStoreBase
    nameWithType: RoleStoreBase
    fullName: Hybrid.Zero.Identity.Entities.RoleStoreBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleClaim
    nameWithType: TRoleClaim
    fullName: TRoleClaim
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleClaimKey
    nameWithType: TRoleClaimKey
    fullName: TRoleClaimKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
    name: TryCatch(Of RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey), TResult)
    nameWithType: TryCatchExtensions.TryCatch(Of RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey), TResult)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.Zero.Identity.Entities.RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey), TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Zero.Identity.Entities.RoleStoreBase`4
    name: RoleStoreBase
    nameWithType: RoleStoreBase
    fullName: Hybrid.Zero.Identity.Entities.RoleStoreBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleClaim
    nameWithType: TRoleClaim
    fullName: TRoleClaim
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleClaimKey
    nameWithType: TRoleClaimKey
    fullName: TRoleClaimKey
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Zero.Identity.Entities.RoleStoreBase`4
    name: RoleStoreBase
    nameWithType: RoleStoreBase
    fullName: Hybrid.Zero.Identity.Entities.RoleStoreBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleClaim
    nameWithType: TRoleClaim
    fullName: TRoleClaim
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleClaimKey
    nameWithType: TRoleClaimKey
    fullName: TRoleClaimKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Identity.Entities.RoleStoreBase`4.Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{Hybrid.Zero.Identity.Entities.RoleStoreBase{{TRole},{TRoleKey},{TRoleClaim},{TRoleClaimKey}},{TResult}},System.Action{System.Exception})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
  parent: Hybrid.Extensions.TryCatchExtensions
  definition: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
  name: TryCatch<RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>, TResult>(Func<RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>, TResult>, Action<Exception>)
  nameWithType: TryCatchExtensions.TryCatch<RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>, TResult>(Func<RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>, TResult>, Action<Exception>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.Zero.Identity.Entities.RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>, TResult>(System.Func<Hybrid.Zero.Identity.Entities.RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>, TResult>, System.Action<System.Exception>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey), TResult)(Func(Of RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey), TResult), Action(Of Exception))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.Zero.Identity.Entities.RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey), TResult)(System.Func(Of Hybrid.Zero.Identity.Entities.RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey), TResult), System.Action(Of System.Exception))
  name.vb: TryCatch(Of RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey), TResult)(Func(Of RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey), TResult), Action(Of Exception))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{``0,``1},System.Action{System.Exception})
    name: TryCatch<RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>, TResult>
    nameWithType: TryCatchExtensions.TryCatch<RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>, TResult>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.Zero.Identity.Entities.RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Zero.Identity.Entities.RoleStoreBase`4
    name: RoleStoreBase
    nameWithType: RoleStoreBase
    fullName: Hybrid.Zero.Identity.Entities.RoleStoreBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleClaim
    nameWithType: TRoleClaim
    fullName: TRoleClaim
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleClaimKey
    nameWithType: TRoleClaimKey
    fullName: TRoleClaimKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{``0,``1},System.Action{System.Exception})
    name: TryCatch(Of RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey), TResult)
    nameWithType: TryCatchExtensions.TryCatch(Of RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey), TResult)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.Zero.Identity.Entities.RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey), TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Zero.Identity.Entities.RoleStoreBase`4
    name: RoleStoreBase
    nameWithType: RoleStoreBase
    fullName: Hybrid.Zero.Identity.Entities.RoleStoreBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleClaim
    nameWithType: TRoleClaim
    fullName: TRoleClaim
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleClaimKey
    nameWithType: TRoleClaimKey
    fullName: TRoleClaimKey
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Identity.Entities.RoleStoreBase`4.Hybrid.Extensions.TryCatchExtensions.TryFinally``1(System.Action{Hybrid.Zero.Identity.Entities.RoleStoreBase{{TRole},{TRoleKey},{TRoleClaim},{TRoleClaimKey}}},System.Action{Hybrid.Zero.Identity.Entities.RoleStoreBase{{TRole},{TRoleKey},{TRoleClaim},{TRoleClaimKey}}})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
  parent: Hybrid.Extensions.TryCatchExtensions
  definition: Hybrid.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
  name: TryFinally<RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>>(Action<RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>>, Action<RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>>)
  nameWithType: TryCatchExtensions.TryFinally<RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>>(Action<RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>>, Action<RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryFinally<Hybrid.Zero.Identity.Entities.RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>>(System.Action<Hybrid.Zero.Identity.Entities.RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>>, System.Action<Hybrid.Zero.Identity.Entities.RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>>)
  nameWithType.vb: TryCatchExtensions.TryFinally(Of RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey))(Action(Of RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey)), Action(Of RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey)))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryFinally(Of Hybrid.Zero.Identity.Entities.RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey))(System.Action(Of Hybrid.Zero.Identity.Entities.RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey)), System.Action(Of Hybrid.Zero.Identity.Entities.RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey)))
  name.vb: TryFinally(Of RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey))(Action(Of RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey)), Action(Of RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey)))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryFinally``1(System.Action{``0},System.Action{``0})
    name: TryFinally<RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>>
    nameWithType: TryCatchExtensions.TryFinally<RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryFinally<Hybrid.Zero.Identity.Entities.RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Zero.Identity.Entities.RoleStoreBase`4
    name: RoleStoreBase
    nameWithType: RoleStoreBase
    fullName: Hybrid.Zero.Identity.Entities.RoleStoreBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleClaim
    nameWithType: TRoleClaim
    fullName: TRoleClaim
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleClaimKey
    nameWithType: TRoleClaimKey
    fullName: TRoleClaimKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Zero.Identity.Entities.RoleStoreBase`4
    name: RoleStoreBase
    nameWithType: RoleStoreBase
    fullName: Hybrid.Zero.Identity.Entities.RoleStoreBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleClaim
    nameWithType: TRoleClaim
    fullName: TRoleClaim
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleClaimKey
    nameWithType: TRoleClaimKey
    fullName: TRoleClaimKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryFinally``1(System.Action{``0},System.Action{``0})
    name: TryFinally(Of RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey))
    nameWithType: TryCatchExtensions.TryFinally(Of RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey))
    fullName: Hybrid.Extensions.TryCatchExtensions.TryFinally(Of Hybrid.Zero.Identity.Entities.RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey))
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Zero.Identity.Entities.RoleStoreBase`4
    name: RoleStoreBase
    nameWithType: RoleStoreBase
    fullName: Hybrid.Zero.Identity.Entities.RoleStoreBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleClaim
    nameWithType: TRoleClaim
    fullName: TRoleClaim
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleClaimKey
    nameWithType: TRoleClaimKey
    fullName: TRoleClaimKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Zero.Identity.Entities.RoleStoreBase`4
    name: RoleStoreBase
    nameWithType: RoleStoreBase
    fullName: Hybrid.Zero.Identity.Entities.RoleStoreBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleClaim
    nameWithType: TRoleClaim
    fullName: TRoleClaim
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleClaimKey
    nameWithType: TRoleClaimKey
    fullName: TRoleClaimKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Json.JsonExtensions.ToJsonString(System.Boolean,System.Boolean)
  commentId: M:Hybrid.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
  parent: Hybrid.Json.JsonExtensions
  definition: Hybrid.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
  name: ToJsonString(Boolean, Boolean)
  nameWithType: JsonExtensions.ToJsonString(Boolean, Boolean)
  fullName: Hybrid.Json.JsonExtensions.ToJsonString(System.Boolean, System.Boolean)
  spec.csharp:
  - uid: Hybrid.Json.JsonExtensions.ToJsonString(System.Boolean,System.Boolean)
    name: ToJsonString
    nameWithType: JsonExtensions.ToJsonString
    fullName: Hybrid.Json.JsonExtensions.ToJsonString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Json.JsonExtensions.ToJsonString(System.Boolean,System.Boolean)
    name: ToJsonString
    nameWithType: JsonExtensions.ToJsonString
    fullName: Hybrid.Json.JsonExtensions.ToJsonString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Mapping.MapperExtensions.MapTo``1
  commentId: M:Hybrid.Mapping.MapperExtensions.MapTo``1(System.Object)
  parent: Hybrid.Mapping.MapperExtensions
  definition: Hybrid.Mapping.MapperExtensions.MapTo``1(System.Object)
  name: MapTo<TTarget>()
  nameWithType: MapperExtensions.MapTo<TTarget>()
  fullName: Hybrid.Mapping.MapperExtensions.MapTo<TTarget>()
  nameWithType.vb: MapperExtensions.MapTo(Of TTarget)()
  fullName.vb: Hybrid.Mapping.MapperExtensions.MapTo(Of TTarget)()
  name.vb: MapTo(Of TTarget)()
  spec.csharp:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``1
    name: MapTo<TTarget>
    nameWithType: MapperExtensions.MapTo<TTarget>
    fullName: Hybrid.Mapping.MapperExtensions.MapTo<TTarget>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``1
    name: MapTo(Of TTarget)
    nameWithType: MapperExtensions.MapTo(Of TTarget)
    fullName: Hybrid.Mapping.MapperExtensions.MapTo(Of TTarget)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Identity.Entities.RoleStoreBase`4.Hybrid.Mapping.MapperExtensions.MapTo``2({TTarget})
  commentId: M:Hybrid.Mapping.MapperExtensions.MapTo``2(``0,``1)
  parent: Hybrid.Mapping.MapperExtensions
  definition: Hybrid.Mapping.MapperExtensions.MapTo``2(``0,``1)
  name: MapTo<RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>, TTarget>(TTarget)
  nameWithType: MapperExtensions.MapTo<RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>, TTarget>(TTarget)
  fullName: Hybrid.Mapping.MapperExtensions.MapTo<Hybrid.Zero.Identity.Entities.RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>, TTarget>(TTarget)
  nameWithType.vb: MapperExtensions.MapTo(Of RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey), TTarget)(TTarget)
  fullName.vb: Hybrid.Mapping.MapperExtensions.MapTo(Of Hybrid.Zero.Identity.Entities.RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey), TTarget)(TTarget)
  name.vb: MapTo(Of RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey), TTarget)(TTarget)
  spec.csharp:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``2(``1)
    name: MapTo<RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>, TTarget>
    nameWithType: MapperExtensions.MapTo<RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>, TTarget>
    fullName: Hybrid.Mapping.MapperExtensions.MapTo<Hybrid.Zero.Identity.Entities.RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>, TTarget>
  - name: (
    nameWithType: (
    fullName: (
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``2(``1)
    name: MapTo(Of RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey), TTarget)
    nameWithType: MapperExtensions.MapTo(Of RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey), TTarget)
    fullName: Hybrid.Mapping.MapperExtensions.MapTo(Of Hybrid.Zero.Identity.Entities.RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey), TTarget)
  - name: (
    nameWithType: (
    fullName: (
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Reflection.LockExtensions.Locking(System.Action)
  commentId: M:Hybrid.Reflection.LockExtensions.Locking(System.Object,System.Action)
  parent: Hybrid.Reflection.LockExtensions
  definition: Hybrid.Reflection.LockExtensions.Locking(System.Object,System.Action)
  name: Locking(Action)
  nameWithType: LockExtensions.Locking(Action)
  fullName: Hybrid.Reflection.LockExtensions.Locking(System.Action)
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking(System.Action)
    name: Locking
    nameWithType: LockExtensions.Locking
    fullName: Hybrid.Reflection.LockExtensions.Locking
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking(System.Action)
    name: Locking
    nameWithType: LockExtensions.Locking
    fullName: Hybrid.Reflection.LockExtensions.Locking
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Identity.Entities.RoleStoreBase`4.Hybrid.Reflection.LockExtensions.Locking``1(System.Action{Hybrid.Zero.Identity.Entities.RoleStoreBase{{TRole},{TRoleKey},{TRoleClaim},{TRoleClaimKey}}})
  commentId: M:Hybrid.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
  parent: Hybrid.Reflection.LockExtensions
  definition: Hybrid.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
  name: Locking<RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>>(Action<RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>>)
  nameWithType: LockExtensions.Locking<RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>>(Action<RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>>)
  fullName: Hybrid.Reflection.LockExtensions.Locking<Hybrid.Zero.Identity.Entities.RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>>(System.Action<Hybrid.Zero.Identity.Entities.RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>>)
  nameWithType.vb: LockExtensions.Locking(Of RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey))(Action(Of RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey)))
  fullName.vb: Hybrid.Reflection.LockExtensions.Locking(Of Hybrid.Zero.Identity.Entities.RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey))(System.Action(Of Hybrid.Zero.Identity.Entities.RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey)))
  name.vb: Locking(Of RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey))(Action(Of RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey)))
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(System.Action{``0})
    name: Locking<RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>>
    nameWithType: LockExtensions.Locking<RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>>
    fullName: Hybrid.Reflection.LockExtensions.Locking<Hybrid.Zero.Identity.Entities.RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Zero.Identity.Entities.RoleStoreBase`4
    name: RoleStoreBase
    nameWithType: RoleStoreBase
    fullName: Hybrid.Zero.Identity.Entities.RoleStoreBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleClaim
    nameWithType: TRoleClaim
    fullName: TRoleClaim
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleClaimKey
    nameWithType: TRoleClaimKey
    fullName: TRoleClaimKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(System.Action{``0})
    name: Locking(Of RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey))
    nameWithType: LockExtensions.Locking(Of RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey))
    fullName: Hybrid.Reflection.LockExtensions.Locking(Of Hybrid.Zero.Identity.Entities.RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey))
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Zero.Identity.Entities.RoleStoreBase`4
    name: RoleStoreBase
    nameWithType: RoleStoreBase
    fullName: Hybrid.Zero.Identity.Entities.RoleStoreBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleClaim
    nameWithType: TRoleClaim
    fullName: TRoleClaim
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleClaimKey
    nameWithType: TRoleClaimKey
    fullName: TRoleClaimKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Reflection.LockExtensions.Locking``1(System.Func{{TResult}})
  commentId: M:Hybrid.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
  parent: Hybrid.Reflection.LockExtensions
  definition: Hybrid.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
  name: Locking<TResult>(Func<TResult>)
  nameWithType: LockExtensions.Locking<TResult>(Func<TResult>)
  fullName: Hybrid.Reflection.LockExtensions.Locking<TResult>(System.Func<TResult>)
  nameWithType.vb: LockExtensions.Locking(Of TResult)(Func(Of TResult))
  fullName.vb: Hybrid.Reflection.LockExtensions.Locking(Of TResult)(System.Func(Of TResult))
  name.vb: Locking(Of TResult)(Func(Of TResult))
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(System.Func{``0})
    name: Locking<TResult>
    nameWithType: LockExtensions.Locking<TResult>
    fullName: Hybrid.Reflection.LockExtensions.Locking<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(System.Func{``0})
    name: Locking(Of TResult)
    nameWithType: LockExtensions.Locking(Of TResult)
    fullName: Hybrid.Reflection.LockExtensions.Locking(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Identity.Entities.RoleStoreBase`4.Hybrid.Reflection.LockExtensions.Locking``2(System.Func{Hybrid.Zero.Identity.Entities.RoleStoreBase{{TRole},{TRoleKey},{TRoleClaim},{TRoleClaimKey}},{TResult}})
  commentId: M:Hybrid.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
  parent: Hybrid.Reflection.LockExtensions
  definition: Hybrid.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
  name: Locking<RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>, TResult>(Func<RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>, TResult>)
  nameWithType: LockExtensions.Locking<RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>, TResult>(Func<RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>, TResult>)
  fullName: Hybrid.Reflection.LockExtensions.Locking<Hybrid.Zero.Identity.Entities.RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>, TResult>(System.Func<Hybrid.Zero.Identity.Entities.RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>, TResult>)
  nameWithType.vb: LockExtensions.Locking(Of RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey), TResult)(Func(Of RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey), TResult))
  fullName.vb: Hybrid.Reflection.LockExtensions.Locking(Of Hybrid.Zero.Identity.Entities.RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey), TResult)(System.Func(Of Hybrid.Zero.Identity.Entities.RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey), TResult))
  name.vb: Locking(Of RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey), TResult)(Func(Of RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey), TResult))
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking``2(System.Func{``0,``1})
    name: Locking<RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>, TResult>
    nameWithType: LockExtensions.Locking<RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>, TResult>
    fullName: Hybrid.Reflection.LockExtensions.Locking<Hybrid.Zero.Identity.Entities.RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Zero.Identity.Entities.RoleStoreBase`4
    name: RoleStoreBase
    nameWithType: RoleStoreBase
    fullName: Hybrid.Zero.Identity.Entities.RoleStoreBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleClaim
    nameWithType: TRoleClaim
    fullName: TRoleClaim
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleClaimKey
    nameWithType: TRoleClaimKey
    fullName: TRoleClaimKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking``2(System.Func{``0,``1})
    name: Locking(Of RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey), TResult)
    nameWithType: LockExtensions.Locking(Of RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey), TResult)
    fullName: Hybrid.Reflection.LockExtensions.Locking(Of Hybrid.Zero.Identity.Entities.RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey), TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Zero.Identity.Entities.RoleStoreBase`4
    name: RoleStoreBase
    nameWithType: RoleStoreBase
    fullName: Hybrid.Zero.Identity.Entities.RoleStoreBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleClaim
    nameWithType: TRoleClaim
    fullName: TRoleClaim
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleClaimKey
    nameWithType: TRoleClaimKey
    fullName: TRoleClaimKey
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Identity.Entities.RoleStoreBase`4.Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2
  commentId: M:Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2(``0)
  parent: Hybrid.Domain.Entities.EntityExtensions
  definition: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2(``0)
  name: CheckICreatedTime<RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>, TKey>()
  nameWithType: EntityExtensions.CheckICreatedTime<RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>, TKey>()
  fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime<Hybrid.Zero.Identity.Entities.RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>, TKey>()
  nameWithType.vb: EntityExtensions.CheckICreatedTime(Of RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey), TKey)()
  fullName.vb: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime(Of Hybrid.Zero.Identity.Entities.RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey), TKey)()
  name.vb: CheckICreatedTime(Of RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey), TKey)()
  spec.csharp:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2
    name: CheckICreatedTime<RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>, TKey>
    nameWithType: EntityExtensions.CheckICreatedTime<RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>, TKey>
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime<Hybrid.Zero.Identity.Entities.RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2
    name: CheckICreatedTime(Of RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey), TKey)
    nameWithType: EntityExtensions.CheckICreatedTime(Of RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey), TKey)
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime(Of Hybrid.Zero.Identity.Entities.RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey), TKey)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Identity.Entities.RoleStoreBase`4.Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(System.Security.Principal.IPrincipal)
  commentId: M:Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
  parent: Hybrid.Domain.Entities.EntityExtensions
  definition: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
  name: CheckICreationAudited<RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>, TKey, TUserKey>(IPrincipal)
  nameWithType: EntityExtensions.CheckICreationAudited<RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>, TKey, TUserKey>(IPrincipal)
  fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited<Hybrid.Zero.Identity.Entities.RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>, TKey, TUserKey>(System.Security.Principal.IPrincipal)
  nameWithType.vb: EntityExtensions.CheckICreationAudited(Of RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey), TKey, TUserKey)(IPrincipal)
  fullName.vb: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited(Of Hybrid.Zero.Identity.Entities.RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey), TKey, TUserKey)(System.Security.Principal.IPrincipal)
  name.vb: CheckICreationAudited(Of RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey), TKey, TUserKey)(IPrincipal)
  spec.csharp:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(System.Security.Principal.IPrincipal)
    name: CheckICreationAudited<RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>, TKey, TUserKey>
    nameWithType: EntityExtensions.CheckICreationAudited<RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>, TKey, TUserKey>
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited<Hybrid.Zero.Identity.Entities.RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>, TKey, TUserKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(System.Security.Principal.IPrincipal)
    name: CheckICreationAudited(Of RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey), TKey, TUserKey)
    nameWithType: EntityExtensions.CheckICreationAudited(Of RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey), TKey, TUserKey)
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited(Of Hybrid.Zero.Identity.Entities.RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey), TKey, TUserKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Identity.Entities.RoleStoreBase`4.Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(System.Security.Principal.IPrincipal)
  commentId: M:Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
  parent: Hybrid.Domain.Entities.EntityExtensions
  definition: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
  name: CheckIUpdateAudited<RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>, TKey, TUserKey>(IPrincipal)
  nameWithType: EntityExtensions.CheckIUpdateAudited<RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>, TKey, TUserKey>(IPrincipal)
  fullName: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited<Hybrid.Zero.Identity.Entities.RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>, TKey, TUserKey>(System.Security.Principal.IPrincipal)
  nameWithType.vb: EntityExtensions.CheckIUpdateAudited(Of RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey), TKey, TUserKey)(IPrincipal)
  fullName.vb: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited(Of Hybrid.Zero.Identity.Entities.RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey), TKey, TUserKey)(System.Security.Principal.IPrincipal)
  name.vb: CheckIUpdateAudited(Of RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey), TKey, TUserKey)(IPrincipal)
  spec.csharp:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(System.Security.Principal.IPrincipal)
    name: CheckIUpdateAudited<RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>, TKey, TUserKey>
    nameWithType: EntityExtensions.CheckIUpdateAudited<RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>, TKey, TUserKey>
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited<Hybrid.Zero.Identity.Entities.RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>, TKey, TUserKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(System.Security.Principal.IPrincipal)
    name: CheckIUpdateAudited(Of RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey), TKey, TUserKey)
    nameWithType: EntityExtensions.CheckIUpdateAudited(Of RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey), TKey, TUserKey)
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited(Of Hybrid.Zero.Identity.Entities.RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey), TKey, TUserKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.AspNetCore.Identity.IQueryableRoleStore`1
  commentId: T:Microsoft.AspNetCore.Identity.IQueryableRoleStore`1
  isExternal: true
  name: IQueryableRoleStore<TRole>
  nameWithType: IQueryableRoleStore<TRole>
  fullName: Microsoft.AspNetCore.Identity.IQueryableRoleStore<TRole>
  nameWithType.vb: IQueryableRoleStore(Of TRole)
  fullName.vb: Microsoft.AspNetCore.Identity.IQueryableRoleStore(Of TRole)
  name.vb: IQueryableRoleStore(Of TRole)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IQueryableRoleStore`1
    name: IQueryableRoleStore
    nameWithType: IQueryableRoleStore
    fullName: Microsoft.AspNetCore.Identity.IQueryableRoleStore
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IQueryableRoleStore`1
    name: IQueryableRoleStore
    nameWithType: IQueryableRoleStore
    fullName: Microsoft.AspNetCore.Identity.IQueryableRoleStore
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity
  commentId: N:Microsoft.AspNetCore.Identity
  isExternal: true
  name: Microsoft.AspNetCore.Identity
  nameWithType: Microsoft.AspNetCore.Identity
  fullName: Microsoft.AspNetCore.Identity
- uid: Microsoft.AspNetCore.Identity.IRoleClaimStore`1
  commentId: T:Microsoft.AspNetCore.Identity.IRoleClaimStore`1
  isExternal: true
  name: IRoleClaimStore<TRole>
  nameWithType: IRoleClaimStore<TRole>
  fullName: Microsoft.AspNetCore.Identity.IRoleClaimStore<TRole>
  nameWithType.vb: IRoleClaimStore(Of TRole)
  fullName.vb: Microsoft.AspNetCore.Identity.IRoleClaimStore(Of TRole)
  name.vb: IRoleClaimStore(Of TRole)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IRoleClaimStore`1
    name: IRoleClaimStore
    nameWithType: IRoleClaimStore
    fullName: Microsoft.AspNetCore.Identity.IRoleClaimStore
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IRoleClaimStore`1
    name: IRoleClaimStore
    nameWithType: IRoleClaimStore
    fullName: Microsoft.AspNetCore.Identity.IRoleClaimStore
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IRoleStore`1
  commentId: T:Microsoft.AspNetCore.Identity.IRoleStore`1
  isExternal: true
  name: IRoleStore<TRole>
  nameWithType: IRoleStore<TRole>
  fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>
  nameWithType.vb: IRoleStore(Of TRole)
  fullName.vb: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole)
  name.vb: IRoleStore(Of TRole)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1
    name: IRoleStore
    nameWithType: IRoleStore
    fullName: Microsoft.AspNetCore.Identity.IRoleStore
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1
    name: IRoleStore
    nameWithType: IRoleStore
    fullName: Microsoft.AspNetCore.Identity.IRoleStore
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
  commentId: M:Hybrid.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
  isExternal: true
  name: CastTo(Object, Type)
  nameWithType: ObjectExtensions.CastTo(Object, Type)
  fullName: Hybrid.Extensions.ObjectExtensions.CastTo(System.Object, System.Type)
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
    name: CastTo
    nameWithType: ObjectExtensions.CastTo
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
    name: CastTo
    nameWithType: ObjectExtensions.CastTo
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ObjectExtensions
  commentId: T:Hybrid.Extensions.ObjectExtensions
  parent: Hybrid.Extensions
  name: ObjectExtensions
  nameWithType: ObjectExtensions
  fullName: Hybrid.Extensions.ObjectExtensions
- uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object)
  commentId: M:Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object)
  isExternal: true
  name: CastTo<T>(Object)
  nameWithType: ObjectExtensions.CastTo<T>(Object)
  fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>(System.Object)
  nameWithType.vb: ObjectExtensions.CastTo(Of T)(Object)
  fullName.vb: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)(System.Object)
  name.vb: CastTo(Of T)(Object)
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object)
    name: CastTo<T>
    nameWithType: ObjectExtensions.CastTo<T>
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object)
    name: CastTo(Of T)
    nameWithType: ObjectExtensions.CastTo(Of T)
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
  commentId: M:Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
  isExternal: true
  name: CastTo<T>(Object, T)
  nameWithType: ObjectExtensions.CastTo<T>(Object, T)
  fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>(System.Object, T)
  nameWithType.vb: ObjectExtensions.CastTo(Of T)(Object, T)
  fullName.vb: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)(System.Object, T)
  name.vb: CastTo(Of T)(Object, T)
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
    name: CastTo<T>
    nameWithType: ObjectExtensions.CastTo<T>
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
    name: CastTo(Of T)
    nameWithType: ObjectExtensions.CastTo(Of T)
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
  commentId: M:Hybrid.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
  name: IsIn<T>(T, T[])
  nameWithType: ObjectExtensions.IsIn<T>(T, T[])
  fullName: Hybrid.Extensions.ObjectExtensions.IsIn<T>(T, T[])
  nameWithType.vb: ObjectExtensions.IsIn(Of T)(T, T())
  fullName.vb: Hybrid.Extensions.ObjectExtensions.IsIn(Of T)(T, T())
  name.vb: IsIn(Of T)(T, T())
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
    name: IsIn<T>
    nameWithType: ObjectExtensions.IsIn<T>
    fullName: Hybrid.Extensions.ObjectExtensions.IsIn<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
    name: IsIn(Of T)
    nameWithType: ObjectExtensions.IsIn(Of T)
    fullName: Hybrid.Extensions.ObjectExtensions.IsIn(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ObjectExtensions.ToDynamic(System.Object)
  commentId: M:Hybrid.Extensions.ObjectExtensions.ToDynamic(System.Object)
  isExternal: true
  name: ToDynamic(Object)
  nameWithType: ObjectExtensions.ToDynamic(Object)
  fullName: Hybrid.Extensions.ObjectExtensions.ToDynamic(System.Object)
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.ToDynamic(System.Object)
    name: ToDynamic
    nameWithType: ObjectExtensions.ToDynamic
    fullName: Hybrid.Extensions.ObjectExtensions.ToDynamic
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.ToDynamic(System.Object)
    name: ToDynamic
    nameWithType: ObjectExtensions.ToDynamic
    fullName: Hybrid.Extensions.ObjectExtensions.ToDynamic
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ObjectExtensions.DeepClone``1(``0)
  commentId: M:Hybrid.Extensions.ObjectExtensions.DeepClone``1(``0)
  name: DeepClone<T>(T)
  nameWithType: ObjectExtensions.DeepClone<T>(T)
  fullName: Hybrid.Extensions.ObjectExtensions.DeepClone<T>(T)
  nameWithType.vb: ObjectExtensions.DeepClone(Of T)(T)
  fullName.vb: Hybrid.Extensions.ObjectExtensions.DeepClone(Of T)(T)
  name.vb: DeepClone(Of T)(T)
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.DeepClone``1(``0)
    name: DeepClone<T>
    nameWithType: ObjectExtensions.DeepClone<T>
    fullName: Hybrid.Extensions.ObjectExtensions.DeepClone<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.DeepClone``1(``0)
    name: DeepClone(Of T)
    nameWithType: ObjectExtensions.DeepClone(Of T)
    fullName: Hybrid.Extensions.ObjectExtensions.DeepClone(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
  commentId: M:Hybrid.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
  isExternal: true
  name: Required<T>(T, Func<T, Boolean>, String)
  nameWithType: ParameterCheckExtensions.Required<T>(T, Func<T, Boolean>, String)
  fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<T>(T, System.Func<T, System.Boolean>, System.String)
  nameWithType.vb: ParameterCheckExtensions.Required(Of T)(T, Func(Of T, Boolean), String)
  fullName.vb: Hybrid.Extensions.ParameterCheckExtensions.Required(Of T)(T, System.Func(Of T, System.Boolean), System.String)
  name.vb: Required(Of T)(T, Func(Of T, Boolean), String)
  spec.csharp:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
    name: Required<T>
    nameWithType: ParameterCheckExtensions.Required<T>
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
    name: Required(Of T)
    nameWithType: ParameterCheckExtensions.Required(Of T)
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ParameterCheckExtensions
  commentId: T:Hybrid.Extensions.ParameterCheckExtensions
  parent: Hybrid.Extensions
  name: ParameterCheckExtensions
  nameWithType: ParameterCheckExtensions
  fullName: Hybrid.Extensions.ParameterCheckExtensions
- uid: Hybrid.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
  commentId: M:Hybrid.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
  isExternal: true
  name: Required<T, TException>(T, Func<T, Boolean>, String)
  nameWithType: ParameterCheckExtensions.Required<T, TException>(T, Func<T, Boolean>, String)
  fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<T, TException>(T, System.Func<T, System.Boolean>, System.String)
  nameWithType.vb: ParameterCheckExtensions.Required(Of T, TException)(T, Func(Of T, Boolean), String)
  fullName.vb: Hybrid.Extensions.ParameterCheckExtensions.Required(Of T, TException)(T, System.Func(Of T, System.Boolean), System.String)
  name.vb: Required(Of T, TException)(T, Func(Of T, Boolean), String)
  spec.csharp:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
    name: Required<T, TException>
    nameWithType: ParameterCheckExtensions.Required<T, TException>
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<T, TException>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
    name: Required(Of T, TException)
    nameWithType: ParameterCheckExtensions.Required(Of T, TException)
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required(Of T, TException)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
  commentId: M:Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
  isExternal: true
  name: CheckNotNull<T>(T, String)
  nameWithType: ParameterCheckExtensions.CheckNotNull<T>(T, String)
  fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull<T>(T, System.String)
  nameWithType.vb: ParameterCheckExtensions.CheckNotNull(Of T)(T, String)
  fullName.vb: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull(Of T)(T, System.String)
  name.vb: CheckNotNull(Of T)(T, String)
  spec.csharp:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
    name: CheckNotNull<T>
    nameWithType: ParameterCheckExtensions.CheckNotNull<T>
    fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
    name: CheckNotNull(Of T)
    nameWithType: ParameterCheckExtensions.CheckNotNull(Of T)
    fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
  isExternal: true
  name: TryCatch<T>(T, Action<T>, Action<Exception>, Action<T>)
  nameWithType: TryCatchExtensions.TryCatch<T>(T, Action<T>, Action<Exception>, Action<T>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T>(T, System.Action<T>, System.Action<System.Exception>, System.Action<T>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of T)(T, Action(Of T), Action(Of Exception), Action(Of T))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T)(T, System.Action(Of T), System.Action(Of System.Exception), System.Action(Of T))
  name.vb: TryCatch(Of T)(T, Action(Of T), Action(Of Exception), Action(Of T))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
    name: TryCatch<T>
    nameWithType: TryCatchExtensions.TryCatch<T>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
    name: TryCatch(Of T)
    nameWithType: TryCatchExtensions.TryCatch(Of T)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.TryCatchExtensions
  commentId: T:Hybrid.Extensions.TryCatchExtensions
  parent: Hybrid.Extensions
  name: TryCatchExtensions
  nameWithType: TryCatchExtensions
  fullName: Hybrid.Extensions.TryCatchExtensions
- uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
  isExternal: true
  name: TryCatch<T>(T, Action<T>, Action<Exception>)
  nameWithType: TryCatchExtensions.TryCatch<T>(T, Action<T>, Action<Exception>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T>(T, System.Action<T>, System.Action<System.Exception>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of T)(T, Action(Of T), Action(Of Exception))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T)(T, System.Action(Of T), System.Action(Of System.Exception))
  name.vb: TryCatch(Of T)(T, Action(Of T), Action(Of Exception))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
    name: TryCatch<T>
    nameWithType: TryCatchExtensions.TryCatch<T>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
    name: TryCatch(Of T)
    nameWithType: TryCatchExtensions.TryCatch(Of T)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
  isExternal: true
  name: TryCatch<T, TResult>(T, Func<T, TResult>, Action<Exception>, Action<T>)
  nameWithType: TryCatchExtensions.TryCatch<T, TResult>(T, Func<T, TResult>, Action<Exception>, Action<T>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T, TResult>(T, System.Func<T, TResult>, System.Action<System.Exception>, System.Action<T>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of T, TResult)(T, Func(Of T, TResult), Action(Of Exception), Action(Of T))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T, TResult)(T, System.Func(Of T, TResult), System.Action(Of System.Exception), System.Action(Of T))
  name.vb: TryCatch(Of T, TResult)(T, Func(Of T, TResult), Action(Of Exception), Action(Of T))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
    name: TryCatch<T, TResult>
    nameWithType: TryCatchExtensions.TryCatch<T, TResult>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
    name: TryCatch(Of T, TResult)
    nameWithType: TryCatchExtensions.TryCatch(Of T, TResult)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
  isExternal: true
  name: TryCatch<T, TResult>(T, Func<T, TResult>, Action<Exception>)
  nameWithType: TryCatchExtensions.TryCatch<T, TResult>(T, Func<T, TResult>, Action<Exception>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T, TResult>(T, System.Func<T, TResult>, System.Action<System.Exception>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of T, TResult)(T, Func(Of T, TResult), Action(Of Exception))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T, TResult)(T, System.Func(Of T, TResult), System.Action(Of System.Exception))
  name.vb: TryCatch(Of T, TResult)(T, Func(Of T, TResult), Action(Of Exception))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
    name: TryCatch<T, TResult>
    nameWithType: TryCatchExtensions.TryCatch<T, TResult>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
    name: TryCatch(Of T, TResult)
    nameWithType: TryCatchExtensions.TryCatch(Of T, TResult)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
  isExternal: true
  name: TryFinally<T>(T, Action<T>, Action<T>)
  nameWithType: TryCatchExtensions.TryFinally<T>(T, Action<T>, Action<T>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryFinally<T>(T, System.Action<T>, System.Action<T>)
  nameWithType.vb: TryCatchExtensions.TryFinally(Of T)(T, Action(Of T), Action(Of T))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryFinally(Of T)(T, System.Action(Of T), System.Action(Of T))
  name.vb: TryFinally(Of T)(T, Action(Of T), Action(Of T))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
    name: TryFinally<T>
    nameWithType: TryCatchExtensions.TryFinally<T>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryFinally<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
    name: TryFinally(Of T)
    nameWithType: TryCatchExtensions.TryFinally(Of T)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryFinally(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
  commentId: M:Hybrid.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
  isExternal: true
  name: ToJsonString(Object, Boolean, Boolean)
  nameWithType: JsonExtensions.ToJsonString(Object, Boolean, Boolean)
  fullName: Hybrid.Json.JsonExtensions.ToJsonString(System.Object, System.Boolean, System.Boolean)
  spec.csharp:
  - uid: Hybrid.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
    name: ToJsonString
    nameWithType: JsonExtensions.ToJsonString
    fullName: Hybrid.Json.JsonExtensions.ToJsonString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
    name: ToJsonString
    nameWithType: JsonExtensions.ToJsonString
    fullName: Hybrid.Json.JsonExtensions.ToJsonString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Json.JsonExtensions
  commentId: T:Hybrid.Json.JsonExtensions
  parent: Hybrid.Json
  name: JsonExtensions
  nameWithType: JsonExtensions
  fullName: Hybrid.Json.JsonExtensions
- uid: Hybrid.Mapping.MapperExtensions.MapTo``1(System.Object)
  commentId: M:Hybrid.Mapping.MapperExtensions.MapTo``1(System.Object)
  isExternal: true
  name: MapTo<TTarget>(Object)
  nameWithType: MapperExtensions.MapTo<TTarget>(Object)
  fullName: Hybrid.Mapping.MapperExtensions.MapTo<TTarget>(System.Object)
  nameWithType.vb: MapperExtensions.MapTo(Of TTarget)(Object)
  fullName.vb: Hybrid.Mapping.MapperExtensions.MapTo(Of TTarget)(System.Object)
  name.vb: MapTo(Of TTarget)(Object)
  spec.csharp:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``1(System.Object)
    name: MapTo<TTarget>
    nameWithType: MapperExtensions.MapTo<TTarget>
    fullName: Hybrid.Mapping.MapperExtensions.MapTo<TTarget>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``1(System.Object)
    name: MapTo(Of TTarget)
    nameWithType: MapperExtensions.MapTo(Of TTarget)
    fullName: Hybrid.Mapping.MapperExtensions.MapTo(Of TTarget)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Mapping.MapperExtensions
  commentId: T:Hybrid.Mapping.MapperExtensions
  parent: Hybrid.Mapping
  name: MapperExtensions
  nameWithType: MapperExtensions
  fullName: Hybrid.Mapping.MapperExtensions
- uid: Hybrid.Mapping.MapperExtensions.MapTo``2(``0,``1)
  commentId: M:Hybrid.Mapping.MapperExtensions.MapTo``2(``0,``1)
  name: MapTo<TSource, TTarget>(TSource, TTarget)
  nameWithType: MapperExtensions.MapTo<TSource, TTarget>(TSource, TTarget)
  fullName: Hybrid.Mapping.MapperExtensions.MapTo<TSource, TTarget>(TSource, TTarget)
  nameWithType.vb: MapperExtensions.MapTo(Of TSource, TTarget)(TSource, TTarget)
  fullName.vb: Hybrid.Mapping.MapperExtensions.MapTo(Of TSource, TTarget)(TSource, TTarget)
  name.vb: MapTo(Of TSource, TTarget)(TSource, TTarget)
  spec.csharp:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``2(``0,``1)
    name: MapTo<TSource, TTarget>
    nameWithType: MapperExtensions.MapTo<TSource, TTarget>
    fullName: Hybrid.Mapping.MapperExtensions.MapTo<TSource, TTarget>
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``2(``0,``1)
    name: MapTo(Of TSource, TTarget)
    nameWithType: MapperExtensions.MapTo(Of TSource, TTarget)
    fullName: Hybrid.Mapping.MapperExtensions.MapTo(Of TSource, TTarget)
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Reflection.LockExtensions.Locking(System.Object,System.Action)
  commentId: M:Hybrid.Reflection.LockExtensions.Locking(System.Object,System.Action)
  isExternal: true
  name: Locking(Object, Action)
  nameWithType: LockExtensions.Locking(Object, Action)
  fullName: Hybrid.Reflection.LockExtensions.Locking(System.Object, System.Action)
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking(System.Object,System.Action)
    name: Locking
    nameWithType: LockExtensions.Locking
    fullName: Hybrid.Reflection.LockExtensions.Locking
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking(System.Object,System.Action)
    name: Locking
    nameWithType: LockExtensions.Locking
    fullName: Hybrid.Reflection.LockExtensions.Locking
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Reflection.LockExtensions
  commentId: T:Hybrid.Reflection.LockExtensions
  parent: Hybrid.Reflection
  name: LockExtensions
  nameWithType: LockExtensions
  fullName: Hybrid.Reflection.LockExtensions
- uid: Hybrid.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
  commentId: M:Hybrid.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
  isExternal: true
  name: Locking<T>(T, Action<T>)
  nameWithType: LockExtensions.Locking<T>(T, Action<T>)
  fullName: Hybrid.Reflection.LockExtensions.Locking<T>(T, System.Action<T>)
  nameWithType.vb: LockExtensions.Locking(Of T)(T, Action(Of T))
  fullName.vb: Hybrid.Reflection.LockExtensions.Locking(Of T)(T, System.Action(Of T))
  name.vb: Locking(Of T)(T, Action(Of T))
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
    name: Locking<T>
    nameWithType: LockExtensions.Locking<T>
    fullName: Hybrid.Reflection.LockExtensions.Locking<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
    name: Locking(Of T)
    nameWithType: LockExtensions.Locking(Of T)
    fullName: Hybrid.Reflection.LockExtensions.Locking(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
  commentId: M:Hybrid.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
  isExternal: true
  name: Locking<TResult>(Object, Func<TResult>)
  nameWithType: LockExtensions.Locking<TResult>(Object, Func<TResult>)
  fullName: Hybrid.Reflection.LockExtensions.Locking<TResult>(System.Object, System.Func<TResult>)
  nameWithType.vb: LockExtensions.Locking(Of TResult)(Object, Func(Of TResult))
  fullName.vb: Hybrid.Reflection.LockExtensions.Locking(Of TResult)(System.Object, System.Func(Of TResult))
  name.vb: Locking(Of TResult)(Object, Func(Of TResult))
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
    name: Locking<TResult>
    nameWithType: LockExtensions.Locking<TResult>
    fullName: Hybrid.Reflection.LockExtensions.Locking<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
    name: Locking(Of TResult)
    nameWithType: LockExtensions.Locking(Of TResult)
    fullName: Hybrid.Reflection.LockExtensions.Locking(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
  commentId: M:Hybrid.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
  isExternal: true
  name: Locking<TSource, TResult>(TSource, Func<TSource, TResult>)
  nameWithType: LockExtensions.Locking<TSource, TResult>(TSource, Func<TSource, TResult>)
  fullName: Hybrid.Reflection.LockExtensions.Locking<TSource, TResult>(TSource, System.Func<TSource, TResult>)
  nameWithType.vb: LockExtensions.Locking(Of TSource, TResult)(TSource, Func(Of TSource, TResult))
  fullName.vb: Hybrid.Reflection.LockExtensions.Locking(Of TSource, TResult)(TSource, System.Func(Of TSource, TResult))
  name.vb: Locking(Of TSource, TResult)(TSource, Func(Of TSource, TResult))
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
    name: Locking<TSource, TResult>
    nameWithType: LockExtensions.Locking<TSource, TResult>
    fullName: Hybrid.Reflection.LockExtensions.Locking<TSource, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
    name: Locking(Of TSource, TResult)
    nameWithType: LockExtensions.Locking(Of TSource, TResult)
    fullName: Hybrid.Reflection.LockExtensions.Locking(Of TSource, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2(``0)
  commentId: M:Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2(``0)
  name: CheckICreatedTime<TEntity, TKey>(TEntity)
  nameWithType: EntityExtensions.CheckICreatedTime<TEntity, TKey>(TEntity)
  fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime<TEntity, TKey>(TEntity)
  nameWithType.vb: EntityExtensions.CheckICreatedTime(Of TEntity, TKey)(TEntity)
  fullName.vb: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime(Of TEntity, TKey)(TEntity)
  name.vb: CheckICreatedTime(Of TEntity, TKey)(TEntity)
  spec.csharp:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2(``0)
    name: CheckICreatedTime<TEntity, TKey>
    nameWithType: EntityExtensions.CheckICreatedTime<TEntity, TKey>
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime<TEntity, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2(``0)
    name: CheckICreatedTime(Of TEntity, TKey)
    nameWithType: EntityExtensions.CheckICreatedTime(Of TEntity, TKey)
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime(Of TEntity, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Domain.Entities.EntityExtensions
  commentId: T:Hybrid.Domain.Entities.EntityExtensions
  parent: Hybrid.Domain.Entities
  name: EntityExtensions
  nameWithType: EntityExtensions
  fullName: Hybrid.Domain.Entities.EntityExtensions
- uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
  commentId: M:Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
  isExternal: true
  name: CheckICreationAudited<TEntity, TKey, TUserKey>(TEntity, IPrincipal)
  nameWithType: EntityExtensions.CheckICreationAudited<TEntity, TKey, TUserKey>(TEntity, IPrincipal)
  fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited<TEntity, TKey, TUserKey>(TEntity, System.Security.Principal.IPrincipal)
  nameWithType.vb: EntityExtensions.CheckICreationAudited(Of TEntity, TKey, TUserKey)(TEntity, IPrincipal)
  fullName.vb: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited(Of TEntity, TKey, TUserKey)(TEntity, System.Security.Principal.IPrincipal)
  name.vb: CheckICreationAudited(Of TEntity, TKey, TUserKey)(TEntity, IPrincipal)
  spec.csharp:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
    name: CheckICreationAudited<TEntity, TKey, TUserKey>
    nameWithType: EntityExtensions.CheckICreationAudited<TEntity, TKey, TUserKey>
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited<TEntity, TKey, TUserKey>
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
    name: CheckICreationAudited(Of TEntity, TKey, TUserKey)
    nameWithType: EntityExtensions.CheckICreationAudited(Of TEntity, TKey, TUserKey)
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited(Of TEntity, TKey, TUserKey)
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
  commentId: M:Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
  isExternal: true
  name: CheckIUpdateAudited<TEntity, TKey, TUserKey>(TEntity, IPrincipal)
  nameWithType: EntityExtensions.CheckIUpdateAudited<TEntity, TKey, TUserKey>(TEntity, IPrincipal)
  fullName: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited<TEntity, TKey, TUserKey>(TEntity, System.Security.Principal.IPrincipal)
  nameWithType.vb: EntityExtensions.CheckIUpdateAudited(Of TEntity, TKey, TUserKey)(TEntity, IPrincipal)
  fullName.vb: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited(Of TEntity, TKey, TUserKey)(TEntity, System.Security.Principal.IPrincipal)
  name.vb: CheckIUpdateAudited(Of TEntity, TKey, TUserKey)(TEntity, IPrincipal)
  spec.csharp:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
    name: CheckIUpdateAudited<TEntity, TKey, TUserKey>
    nameWithType: EntityExtensions.CheckIUpdateAudited<TEntity, TKey, TUserKey>
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited<TEntity, TKey, TUserKey>
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
    name: CheckIUpdateAudited(Of TEntity, TKey, TUserKey)
    nameWithType: EntityExtensions.CheckIUpdateAudited(Of TEntity, TKey, TUserKey)
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited(Of TEntity, TKey, TUserKey)
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions
  commentId: N:Hybrid.Extensions
  name: Hybrid.Extensions
  nameWithType: Hybrid.Extensions
  fullName: Hybrid.Extensions
- uid: Hybrid.Json
  commentId: N:Hybrid.Json
  name: Hybrid.Json
  nameWithType: Hybrid.Json
  fullName: Hybrid.Json
- uid: Hybrid.Mapping
  commentId: N:Hybrid.Mapping
  name: Hybrid.Mapping
  nameWithType: Hybrid.Mapping
  fullName: Hybrid.Mapping
- uid: Hybrid.Reflection
  commentId: N:Hybrid.Reflection
  name: Hybrid.Reflection
  nameWithType: Hybrid.Reflection
  fullName: Hybrid.Reflection
- uid: Hybrid.Domain.Entities
  commentId: N:Hybrid.Domain.Entities
  name: Hybrid.Domain.Entities
  nameWithType: Hybrid.Domain.Entities
  fullName: Hybrid.Domain.Entities
- uid: Hybrid.Zero.Identity.Entities.RoleStoreBase`4
  commentId: T:Hybrid.Zero.Identity.Entities.RoleStoreBase`4
  name: RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>
  nameWithType: RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>
  fullName: Hybrid.Zero.Identity.Entities.RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>
  nameWithType.vb: RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey)
  fullName.vb: Hybrid.Zero.Identity.Entities.RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey)
  name.vb: RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey)
  spec.csharp:
  - uid: Hybrid.Zero.Identity.Entities.RoleStoreBase`4
    name: RoleStoreBase
    nameWithType: RoleStoreBase
    fullName: Hybrid.Zero.Identity.Entities.RoleStoreBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleClaim
    nameWithType: TRoleClaim
    fullName: TRoleClaim
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleClaimKey
    nameWithType: TRoleClaimKey
    fullName: TRoleClaimKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Hybrid.Zero.Identity.Entities.RoleStoreBase`4
    name: RoleStoreBase
    nameWithType: RoleStoreBase
    fullName: Hybrid.Zero.Identity.Entities.RoleStoreBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleClaim
    nameWithType: TRoleClaim
    fullName: TRoleClaim
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleClaimKey
    nameWithType: TRoleClaimKey
    fullName: TRoleClaimKey
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Identity.Entities.RoleStoreBase`4.#ctor*
  commentId: Overload:Hybrid.Zero.Identity.Entities.RoleStoreBase`4.#ctor
  name: RoleStoreBase
  nameWithType: RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>.RoleStoreBase
  fullName: Hybrid.Zero.Identity.Entities.RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>.RoleStoreBase
  nameWithType.vb: RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey).RoleStoreBase
  fullName.vb: Hybrid.Zero.Identity.Entities.RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey).RoleStoreBase
- uid: Hybrid.Domain.Repositories.IRepository{{TRole},{TRoleKey}}
  commentId: T:Hybrid.Domain.Repositories.IRepository{`14,`15}
  parent: Hybrid.Domain.Repositories
  definition: Hybrid.Domain.Repositories.IRepository`2
  name: IRepository<TRole, TRoleKey>
  nameWithType: IRepository<TRole, TRoleKey>
  fullName: Hybrid.Domain.Repositories.IRepository<TRole, TRoleKey>
  nameWithType.vb: IRepository(Of TRole, TRoleKey)
  fullName.vb: Hybrid.Domain.Repositories.IRepository(Of TRole, TRoleKey)
  name.vb: IRepository(Of TRole, TRoleKey)
  spec.csharp:
  - uid: Hybrid.Domain.Repositories.IRepository`2
    name: IRepository
    nameWithType: IRepository
    fullName: Hybrid.Domain.Repositories.IRepository
  - name: <
    nameWithType: <
    fullName: <
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Hybrid.Domain.Repositories.IRepository`2
    name: IRepository
    nameWithType: IRepository
    fullName: Hybrid.Domain.Repositories.IRepository
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Domain.Repositories.IRepository{{TRoleClaim},{TRoleClaimKey}}
  commentId: T:Hybrid.Domain.Repositories.IRepository{`2,`3}
  parent: Hybrid.Domain.Repositories
  definition: Hybrid.Domain.Repositories.IRepository`2
  name: IRepository<TRoleClaim, TRoleClaimKey>
  nameWithType: IRepository<TRoleClaim, TRoleClaimKey>
  fullName: Hybrid.Domain.Repositories.IRepository<TRoleClaim, TRoleClaimKey>
  nameWithType.vb: IRepository(Of TRoleClaim, TRoleClaimKey)
  fullName.vb: Hybrid.Domain.Repositories.IRepository(Of TRoleClaim, TRoleClaimKey)
  name.vb: IRepository(Of TRoleClaim, TRoleClaimKey)
  spec.csharp:
  - uid: Hybrid.Domain.Repositories.IRepository`2
    name: IRepository
    nameWithType: IRepository
    fullName: Hybrid.Domain.Repositories.IRepository
  - name: <
    nameWithType: <
    fullName: <
  - name: TRoleClaim
    nameWithType: TRoleClaim
    fullName: TRoleClaim
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleClaimKey
    nameWithType: TRoleClaimKey
    fullName: TRoleClaimKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Hybrid.Domain.Repositories.IRepository`2
    name: IRepository
    nameWithType: IRepository
    fullName: Hybrid.Domain.Repositories.IRepository
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRoleClaim
    nameWithType: TRoleClaim
    fullName: TRoleClaim
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleClaimKey
    nameWithType: TRoleClaimKey
    fullName: TRoleClaimKey
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Domain.Repositories.IRepository`2
  commentId: T:Hybrid.Domain.Repositories.IRepository`2
  name: IRepository<TEntity, TKey>
  nameWithType: IRepository<TEntity, TKey>
  fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>
  nameWithType.vb: IRepository(Of TEntity, TKey)
  fullName.vb: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey)
  name.vb: IRepository(Of TEntity, TKey)
  spec.csharp:
  - uid: Hybrid.Domain.Repositories.IRepository`2
    name: IRepository
    nameWithType: IRepository
    fullName: Hybrid.Domain.Repositories.IRepository
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Hybrid.Domain.Repositories.IRepository`2
    name: IRepository
    nameWithType: IRepository
    fullName: Hybrid.Domain.Repositories.IRepository
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Domain.Repositories
  commentId: N:Hybrid.Domain.Repositories
  name: Hybrid.Domain.Repositories
  nameWithType: Hybrid.Domain.Repositories
  fullName: Hybrid.Domain.Repositories
- uid: Hybrid.Zero.Identity.Entities.RoleStoreBase`4.Dispose*
  commentId: Overload:Hybrid.Zero.Identity.Entities.RoleStoreBase`4.Dispose
  name: Dispose
  nameWithType: RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>.Dispose
  fullName: Hybrid.Zero.Identity.Entities.RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>.Dispose
  nameWithType.vb: RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey).Dispose
  fullName.vb: Hybrid.Zero.Identity.Entities.RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey).Dispose
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.IQueryable`1
  commentId: T:System.Linq.IQueryable`1
  isExternal: true
  name: IQueryable<T>
  nameWithType: IQueryable<T>
  fullName: System.Linq.IQueryable<T>
  nameWithType.vb: IQueryable(Of T)
  fullName.vb: System.Linq.IQueryable(Of T)
  name.vb: IQueryable(Of T)
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Identity.Entities.RoleStoreBase`4.Roles*
  commentId: Overload:Hybrid.Zero.Identity.Entities.RoleStoreBase`4.Roles
  name: Roles
  nameWithType: RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>.Roles
  fullName: Hybrid.Zero.Identity.Entities.RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>.Roles
  nameWithType.vb: RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey).Roles
  fullName.vb: Hybrid.Zero.Identity.Entities.RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey).Roles
- uid: Microsoft.AspNetCore.Identity.IQueryableRoleStore{{TRole}}.Roles
  commentId: P:Microsoft.AspNetCore.Identity.IQueryableRoleStore{`0}.Roles
  parent: Microsoft.AspNetCore.Identity.IQueryableRoleStore{{TRole}}
  definition: Microsoft.AspNetCore.Identity.IQueryableRoleStore`1.Roles
  name: Roles
  nameWithType: IQueryableRoleStore<TRole>.Roles
  fullName: Microsoft.AspNetCore.Identity.IQueryableRoleStore<TRole>.Roles
  nameWithType.vb: IQueryableRoleStore(Of TRole).Roles
  fullName.vb: Microsoft.AspNetCore.Identity.IQueryableRoleStore(Of TRole).Roles
- uid: System.Linq.IQueryable{{TRole}}
  commentId: T:System.Linq.IQueryable{`0}
  parent: System.Linq
  definition: System.Linq.IQueryable`1
  name: IQueryable<TRole>
  nameWithType: IQueryable<TRole>
  fullName: System.Linq.IQueryable<TRole>
  nameWithType.vb: IQueryable(Of TRole)
  fullName.vb: System.Linq.IQueryable(Of TRole)
  name.vb: IQueryable(Of TRole)
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IQueryableRoleStore`1.Roles
  commentId: P:Microsoft.AspNetCore.Identity.IQueryableRoleStore`1.Roles
  isExternal: true
  name: Roles
  nameWithType: IQueryableRoleStore<TRole>.Roles
  fullName: Microsoft.AspNetCore.Identity.IQueryableRoleStore<TRole>.Roles
  nameWithType.vb: IQueryableRoleStore(Of TRole).Roles
  fullName.vb: Microsoft.AspNetCore.Identity.IQueryableRoleStore(Of TRole).Roles
- uid: System.Linq
  commentId: N:System.Linq
  isExternal: true
  name: System.Linq
  nameWithType: System.Linq
  fullName: System.Linq
- uid: Hybrid.Zero.Identity.Entities.RoleStoreBase`4.ConvertIdFromString*
  commentId: Overload:Hybrid.Zero.Identity.Entities.RoleStoreBase`4.ConvertIdFromString
  name: ConvertIdFromString
  nameWithType: RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>.ConvertIdFromString
  fullName: Hybrid.Zero.Identity.Entities.RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>.ConvertIdFromString
  nameWithType.vb: RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey).ConvertIdFromString
  fullName.vb: Hybrid.Zero.Identity.Entities.RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey).ConvertIdFromString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: '{TRoleKey}'
  commentId: '!:TRoleKey'
  definition: TRoleKey
  name: TRoleKey
  nameWithType: TRoleKey
  fullName: TRoleKey
- uid: TRoleKey
  name: TRoleKey
  nameWithType: TRoleKey
  fullName: TRoleKey
- uid: Hybrid.Zero.Identity.Entities.RoleStoreBase`4.ConvertIdToString*
  commentId: Overload:Hybrid.Zero.Identity.Entities.RoleStoreBase`4.ConvertIdToString
  name: ConvertIdToString
  nameWithType: RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>.ConvertIdToString
  fullName: Hybrid.Zero.Identity.Entities.RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>.ConvertIdToString
  nameWithType.vb: RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey).ConvertIdToString
  fullName.vb: Hybrid.Zero.Identity.Entities.RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey).ConvertIdToString
- uid: Hybrid.Zero.Identity.Entities.RoleStoreBase`4.ThrowIfDisposed*
  commentId: Overload:Hybrid.Zero.Identity.Entities.RoleStoreBase`4.ThrowIfDisposed
  name: ThrowIfDisposed
  nameWithType: RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>.ThrowIfDisposed
  fullName: Hybrid.Zero.Identity.Entities.RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>.ThrowIfDisposed
  nameWithType.vb: RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey).ThrowIfDisposed
  fullName.vb: Hybrid.Zero.Identity.Entities.RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey).ThrowIfDisposed
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IdentityResult
  commentId: T:Microsoft.AspNetCore.Identity.IdentityResult
  parent: Microsoft.AspNetCore.Identity
  isExternal: true
  name: IdentityResult
  nameWithType: IdentityResult
  fullName: Microsoft.AspNetCore.Identity.IdentityResult
- uid: Hybrid.Zero.Identity.Entities.RoleStoreBase`4.CreateAsync*
  commentId: Overload:Hybrid.Zero.Identity.Entities.RoleStoreBase`4.CreateAsync
  name: CreateAsync
  nameWithType: RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>.CreateAsync
  fullName: Hybrid.Zero.Identity.Entities.RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>.CreateAsync
  nameWithType.vb: RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey).CreateAsync
  fullName.vb: Hybrid.Zero.Identity.Entities.RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey).CreateAsync
- uid: Microsoft.AspNetCore.Identity.IRoleStore{{TRole}}.CreateAsync({TRole},System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IRoleStore{`0}.CreateAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IRoleStore{{TRole}}
  definition: Microsoft.AspNetCore.Identity.IRoleStore`1.CreateAsync(`0,System.Threading.CancellationToken)
  name: CreateAsync(TRole, CancellationToken)
  nameWithType: IRoleStore<TRole>.CreateAsync(TRole, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.CreateAsync(TRole, System.Threading.CancellationToken)
  nameWithType.vb: IRoleStore(Of TRole).CreateAsync(TRole, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).CreateAsync(TRole, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1.CreateAsync(`0,System.Threading.CancellationToken)
    name: CreateAsync
    nameWithType: IRoleStore<TRole>.CreateAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.CreateAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1.CreateAsync(`0,System.Threading.CancellationToken)
    name: CreateAsync
    nameWithType: IRoleStore(Of TRole).CreateAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).CreateAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TRole}'
  commentId: '!:TRole'
  definition: TRole
  name: TRole
  nameWithType: TRole
  fullName: TRole
- uid: System.Threading.Tasks.Task{Microsoft.AspNetCore.Identity.IdentityResult}
  commentId: T:System.Threading.Tasks.Task{Microsoft.AspNetCore.Identity.IdentityResult}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IdentityResult>
  nameWithType: Task<IdentityResult>
  fullName: System.Threading.Tasks.Task<Microsoft.AspNetCore.Identity.IdentityResult>
  nameWithType.vb: Task(Of IdentityResult)
  fullName.vb: System.Threading.Tasks.Task(Of Microsoft.AspNetCore.Identity.IdentityResult)
  name.vb: Task(Of IdentityResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.AspNetCore.Identity.IdentityResult
    name: IdentityResult
    nameWithType: IdentityResult
    fullName: Microsoft.AspNetCore.Identity.IdentityResult
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.AspNetCore.Identity.IdentityResult
    name: IdentityResult
    nameWithType: IdentityResult
    fullName: Microsoft.AspNetCore.Identity.IdentityResult
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: true
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: Microsoft.AspNetCore.Identity.IRoleStore`1.CreateAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IRoleStore`1.CreateAsync(`0,System.Threading.CancellationToken)
  isExternal: true
  name: CreateAsync(TRole, CancellationToken)
  nameWithType: IRoleStore<TRole>.CreateAsync(TRole, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.CreateAsync(TRole, System.Threading.CancellationToken)
  nameWithType.vb: IRoleStore(Of TRole).CreateAsync(TRole, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).CreateAsync(TRole, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1.CreateAsync(`0,System.Threading.CancellationToken)
    name: CreateAsync
    nameWithType: IRoleStore<TRole>.CreateAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.CreateAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1.CreateAsync(`0,System.Threading.CancellationToken)
    name: CreateAsync
    nameWithType: IRoleStore(Of TRole).CreateAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).CreateAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TRole
  name: TRole
  nameWithType: TRole
  fullName: TRole
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Hybrid.Zero.Identity.Entities.RoleStoreBase`4.UpdateAsync*
  commentId: Overload:Hybrid.Zero.Identity.Entities.RoleStoreBase`4.UpdateAsync
  name: UpdateAsync
  nameWithType: RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>.UpdateAsync
  fullName: Hybrid.Zero.Identity.Entities.RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>.UpdateAsync
  nameWithType.vb: RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey).UpdateAsync
  fullName.vb: Hybrid.Zero.Identity.Entities.RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey).UpdateAsync
- uid: Microsoft.AspNetCore.Identity.IRoleStore{{TRole}}.UpdateAsync({TRole},System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IRoleStore{`0}.UpdateAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IRoleStore{{TRole}}
  definition: Microsoft.AspNetCore.Identity.IRoleStore`1.UpdateAsync(`0,System.Threading.CancellationToken)
  name: UpdateAsync(TRole, CancellationToken)
  nameWithType: IRoleStore<TRole>.UpdateAsync(TRole, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.UpdateAsync(TRole, System.Threading.CancellationToken)
  nameWithType.vb: IRoleStore(Of TRole).UpdateAsync(TRole, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).UpdateAsync(TRole, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1.UpdateAsync(`0,System.Threading.CancellationToken)
    name: UpdateAsync
    nameWithType: IRoleStore<TRole>.UpdateAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.UpdateAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1.UpdateAsync(`0,System.Threading.CancellationToken)
    name: UpdateAsync
    nameWithType: IRoleStore(Of TRole).UpdateAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).UpdateAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IRoleStore`1.UpdateAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IRoleStore`1.UpdateAsync(`0,System.Threading.CancellationToken)
  isExternal: true
  name: UpdateAsync(TRole, CancellationToken)
  nameWithType: IRoleStore<TRole>.UpdateAsync(TRole, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.UpdateAsync(TRole, System.Threading.CancellationToken)
  nameWithType.vb: IRoleStore(Of TRole).UpdateAsync(TRole, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).UpdateAsync(TRole, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1.UpdateAsync(`0,System.Threading.CancellationToken)
    name: UpdateAsync
    nameWithType: IRoleStore<TRole>.UpdateAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.UpdateAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1.UpdateAsync(`0,System.Threading.CancellationToken)
    name: UpdateAsync
    nameWithType: IRoleStore(Of TRole).UpdateAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).UpdateAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Identity.Entities.RoleStoreBase`4.DeleteAsync*
  commentId: Overload:Hybrid.Zero.Identity.Entities.RoleStoreBase`4.DeleteAsync
  name: DeleteAsync
  nameWithType: RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>.DeleteAsync
  fullName: Hybrid.Zero.Identity.Entities.RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>.DeleteAsync
  nameWithType.vb: RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey).DeleteAsync
  fullName.vb: Hybrid.Zero.Identity.Entities.RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey).DeleteAsync
- uid: Microsoft.AspNetCore.Identity.IRoleStore{{TRole}}.DeleteAsync({TRole},System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IRoleStore{`0}.DeleteAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IRoleStore{{TRole}}
  definition: Microsoft.AspNetCore.Identity.IRoleStore`1.DeleteAsync(`0,System.Threading.CancellationToken)
  name: DeleteAsync(TRole, CancellationToken)
  nameWithType: IRoleStore<TRole>.DeleteAsync(TRole, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.DeleteAsync(TRole, System.Threading.CancellationToken)
  nameWithType.vb: IRoleStore(Of TRole).DeleteAsync(TRole, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).DeleteAsync(TRole, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1.DeleteAsync(`0,System.Threading.CancellationToken)
    name: DeleteAsync
    nameWithType: IRoleStore<TRole>.DeleteAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.DeleteAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1.DeleteAsync(`0,System.Threading.CancellationToken)
    name: DeleteAsync
    nameWithType: IRoleStore(Of TRole).DeleteAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).DeleteAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IRoleStore`1.DeleteAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IRoleStore`1.DeleteAsync(`0,System.Threading.CancellationToken)
  isExternal: true
  name: DeleteAsync(TRole, CancellationToken)
  nameWithType: IRoleStore<TRole>.DeleteAsync(TRole, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.DeleteAsync(TRole, System.Threading.CancellationToken)
  nameWithType.vb: IRoleStore(Of TRole).DeleteAsync(TRole, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).DeleteAsync(TRole, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1.DeleteAsync(`0,System.Threading.CancellationToken)
    name: DeleteAsync
    nameWithType: IRoleStore<TRole>.DeleteAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.DeleteAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1.DeleteAsync(`0,System.Threading.CancellationToken)
    name: DeleteAsync
    nameWithType: IRoleStore(Of TRole).DeleteAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).DeleteAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Identity.Entities.RoleStoreBase`4.GetRoleIdAsync*
  commentId: Overload:Hybrid.Zero.Identity.Entities.RoleStoreBase`4.GetRoleIdAsync
  name: GetRoleIdAsync
  nameWithType: RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>.GetRoleIdAsync
  fullName: Hybrid.Zero.Identity.Entities.RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>.GetRoleIdAsync
  nameWithType.vb: RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey).GetRoleIdAsync
  fullName.vb: Hybrid.Zero.Identity.Entities.RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey).GetRoleIdAsync
- uid: Microsoft.AspNetCore.Identity.IRoleStore{{TRole}}.GetRoleIdAsync({TRole},System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IRoleStore{`0}.GetRoleIdAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IRoleStore{{TRole}}
  definition: Microsoft.AspNetCore.Identity.IRoleStore`1.GetRoleIdAsync(`0,System.Threading.CancellationToken)
  name: GetRoleIdAsync(TRole, CancellationToken)
  nameWithType: IRoleStore<TRole>.GetRoleIdAsync(TRole, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.GetRoleIdAsync(TRole, System.Threading.CancellationToken)
  nameWithType.vb: IRoleStore(Of TRole).GetRoleIdAsync(TRole, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).GetRoleIdAsync(TRole, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1.GetRoleIdAsync(`0,System.Threading.CancellationToken)
    name: GetRoleIdAsync
    nameWithType: IRoleStore<TRole>.GetRoleIdAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.GetRoleIdAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1.GetRoleIdAsync(`0,System.Threading.CancellationToken)
    name: GetRoleIdAsync
    nameWithType: IRoleStore(Of TRole).GetRoleIdAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).GetRoleIdAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.String}
  commentId: T:System.Threading.Tasks.Task{System.String}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<String>
  nameWithType: Task<String>
  fullName: System.Threading.Tasks.Task<System.String>
  nameWithType.vb: Task(Of String)
  fullName.vb: System.Threading.Tasks.Task(Of System.String)
  name.vb: Task(Of String)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IRoleStore`1.GetRoleIdAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IRoleStore`1.GetRoleIdAsync(`0,System.Threading.CancellationToken)
  isExternal: true
  name: GetRoleIdAsync(TRole, CancellationToken)
  nameWithType: IRoleStore<TRole>.GetRoleIdAsync(TRole, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.GetRoleIdAsync(TRole, System.Threading.CancellationToken)
  nameWithType.vb: IRoleStore(Of TRole).GetRoleIdAsync(TRole, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).GetRoleIdAsync(TRole, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1.GetRoleIdAsync(`0,System.Threading.CancellationToken)
    name: GetRoleIdAsync
    nameWithType: IRoleStore<TRole>.GetRoleIdAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.GetRoleIdAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1.GetRoleIdAsync(`0,System.Threading.CancellationToken)
    name: GetRoleIdAsync
    nameWithType: IRoleStore(Of TRole).GetRoleIdAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).GetRoleIdAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Identity.Entities.RoleStoreBase`4.GetRoleNameAsync*
  commentId: Overload:Hybrid.Zero.Identity.Entities.RoleStoreBase`4.GetRoleNameAsync
  name: GetRoleNameAsync
  nameWithType: RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>.GetRoleNameAsync
  fullName: Hybrid.Zero.Identity.Entities.RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>.GetRoleNameAsync
  nameWithType.vb: RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey).GetRoleNameAsync
  fullName.vb: Hybrid.Zero.Identity.Entities.RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey).GetRoleNameAsync
- uid: Microsoft.AspNetCore.Identity.IRoleStore{{TRole}}.GetRoleNameAsync({TRole},System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IRoleStore{`0}.GetRoleNameAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IRoleStore{{TRole}}
  definition: Microsoft.AspNetCore.Identity.IRoleStore`1.GetRoleNameAsync(`0,System.Threading.CancellationToken)
  name: GetRoleNameAsync(TRole, CancellationToken)
  nameWithType: IRoleStore<TRole>.GetRoleNameAsync(TRole, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.GetRoleNameAsync(TRole, System.Threading.CancellationToken)
  nameWithType.vb: IRoleStore(Of TRole).GetRoleNameAsync(TRole, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).GetRoleNameAsync(TRole, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1.GetRoleNameAsync(`0,System.Threading.CancellationToken)
    name: GetRoleNameAsync
    nameWithType: IRoleStore<TRole>.GetRoleNameAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.GetRoleNameAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1.GetRoleNameAsync(`0,System.Threading.CancellationToken)
    name: GetRoleNameAsync
    nameWithType: IRoleStore(Of TRole).GetRoleNameAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).GetRoleNameAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IRoleStore`1.GetRoleNameAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IRoleStore`1.GetRoleNameAsync(`0,System.Threading.CancellationToken)
  isExternal: true
  name: GetRoleNameAsync(TRole, CancellationToken)
  nameWithType: IRoleStore<TRole>.GetRoleNameAsync(TRole, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.GetRoleNameAsync(TRole, System.Threading.CancellationToken)
  nameWithType.vb: IRoleStore(Of TRole).GetRoleNameAsync(TRole, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).GetRoleNameAsync(TRole, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1.GetRoleNameAsync(`0,System.Threading.CancellationToken)
    name: GetRoleNameAsync
    nameWithType: IRoleStore<TRole>.GetRoleNameAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.GetRoleNameAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1.GetRoleNameAsync(`0,System.Threading.CancellationToken)
    name: GetRoleNameAsync
    nameWithType: IRoleStore(Of TRole).GetRoleNameAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).GetRoleNameAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: Hybrid.Zero.Identity.Entities.RoleStoreBase`4.SetRoleNameAsync*
  commentId: Overload:Hybrid.Zero.Identity.Entities.RoleStoreBase`4.SetRoleNameAsync
  name: SetRoleNameAsync
  nameWithType: RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>.SetRoleNameAsync
  fullName: Hybrid.Zero.Identity.Entities.RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>.SetRoleNameAsync
  nameWithType.vb: RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey).SetRoleNameAsync
  fullName.vb: Hybrid.Zero.Identity.Entities.RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey).SetRoleNameAsync
- uid: Microsoft.AspNetCore.Identity.IRoleStore{{TRole}}.SetRoleNameAsync({TRole},System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IRoleStore{`0}.SetRoleNameAsync(`0,System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IRoleStore{{TRole}}
  definition: Microsoft.AspNetCore.Identity.IRoleStore`1.SetRoleNameAsync(`0,System.String,System.Threading.CancellationToken)
  name: SetRoleNameAsync(TRole, String, CancellationToken)
  nameWithType: IRoleStore<TRole>.SetRoleNameAsync(TRole, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.SetRoleNameAsync(TRole, System.String, System.Threading.CancellationToken)
  nameWithType.vb: IRoleStore(Of TRole).SetRoleNameAsync(TRole, String, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).SetRoleNameAsync(TRole, System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1.SetRoleNameAsync(`0,System.String,System.Threading.CancellationToken)
    name: SetRoleNameAsync
    nameWithType: IRoleStore<TRole>.SetRoleNameAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.SetRoleNameAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1.SetRoleNameAsync(`0,System.String,System.Threading.CancellationToken)
    name: SetRoleNameAsync
    nameWithType: IRoleStore(Of TRole).SetRoleNameAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).SetRoleNameAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IRoleStore`1.SetRoleNameAsync(`0,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IRoleStore`1.SetRoleNameAsync(`0,System.String,System.Threading.CancellationToken)
  isExternal: true
  name: SetRoleNameAsync(TRole, String, CancellationToken)
  nameWithType: IRoleStore<TRole>.SetRoleNameAsync(TRole, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.SetRoleNameAsync(TRole, System.String, System.Threading.CancellationToken)
  nameWithType.vb: IRoleStore(Of TRole).SetRoleNameAsync(TRole, String, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).SetRoleNameAsync(TRole, System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1.SetRoleNameAsync(`0,System.String,System.Threading.CancellationToken)
    name: SetRoleNameAsync
    nameWithType: IRoleStore<TRole>.SetRoleNameAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.SetRoleNameAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1.SetRoleNameAsync(`0,System.String,System.Threading.CancellationToken)
    name: SetRoleNameAsync
    nameWithType: IRoleStore(Of TRole).SetRoleNameAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).SetRoleNameAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Identity.Entities.RoleStoreBase`4.GetNormalizedRoleNameAsync*
  commentId: Overload:Hybrid.Zero.Identity.Entities.RoleStoreBase`4.GetNormalizedRoleNameAsync
  name: GetNormalizedRoleNameAsync
  nameWithType: RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>.GetNormalizedRoleNameAsync
  fullName: Hybrid.Zero.Identity.Entities.RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>.GetNormalizedRoleNameAsync
  nameWithType.vb: RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey).GetNormalizedRoleNameAsync
  fullName.vb: Hybrid.Zero.Identity.Entities.RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey).GetNormalizedRoleNameAsync
- uid: Microsoft.AspNetCore.Identity.IRoleStore{{TRole}}.GetNormalizedRoleNameAsync({TRole},System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IRoleStore{`0}.GetNormalizedRoleNameAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IRoleStore{{TRole}}
  definition: Microsoft.AspNetCore.Identity.IRoleStore`1.GetNormalizedRoleNameAsync(`0,System.Threading.CancellationToken)
  name: GetNormalizedRoleNameAsync(TRole, CancellationToken)
  nameWithType: IRoleStore<TRole>.GetNormalizedRoleNameAsync(TRole, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.GetNormalizedRoleNameAsync(TRole, System.Threading.CancellationToken)
  nameWithType.vb: IRoleStore(Of TRole).GetNormalizedRoleNameAsync(TRole, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).GetNormalizedRoleNameAsync(TRole, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1.GetNormalizedRoleNameAsync(`0,System.Threading.CancellationToken)
    name: GetNormalizedRoleNameAsync
    nameWithType: IRoleStore<TRole>.GetNormalizedRoleNameAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.GetNormalizedRoleNameAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1.GetNormalizedRoleNameAsync(`0,System.Threading.CancellationToken)
    name: GetNormalizedRoleNameAsync
    nameWithType: IRoleStore(Of TRole).GetNormalizedRoleNameAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).GetNormalizedRoleNameAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IRoleStore`1.GetNormalizedRoleNameAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IRoleStore`1.GetNormalizedRoleNameAsync(`0,System.Threading.CancellationToken)
  isExternal: true
  name: GetNormalizedRoleNameAsync(TRole, CancellationToken)
  nameWithType: IRoleStore<TRole>.GetNormalizedRoleNameAsync(TRole, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.GetNormalizedRoleNameAsync(TRole, System.Threading.CancellationToken)
  nameWithType.vb: IRoleStore(Of TRole).GetNormalizedRoleNameAsync(TRole, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).GetNormalizedRoleNameAsync(TRole, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1.GetNormalizedRoleNameAsync(`0,System.Threading.CancellationToken)
    name: GetNormalizedRoleNameAsync
    nameWithType: IRoleStore<TRole>.GetNormalizedRoleNameAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.GetNormalizedRoleNameAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1.GetNormalizedRoleNameAsync(`0,System.Threading.CancellationToken)
    name: GetNormalizedRoleNameAsync
    nameWithType: IRoleStore(Of TRole).GetNormalizedRoleNameAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).GetNormalizedRoleNameAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Identity.Entities.RoleStoreBase`4.SetNormalizedRoleNameAsync*
  commentId: Overload:Hybrid.Zero.Identity.Entities.RoleStoreBase`4.SetNormalizedRoleNameAsync
  name: SetNormalizedRoleNameAsync
  nameWithType: RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>.SetNormalizedRoleNameAsync
  fullName: Hybrid.Zero.Identity.Entities.RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>.SetNormalizedRoleNameAsync
  nameWithType.vb: RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey).SetNormalizedRoleNameAsync
  fullName.vb: Hybrid.Zero.Identity.Entities.RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey).SetNormalizedRoleNameAsync
- uid: Microsoft.AspNetCore.Identity.IRoleStore{{TRole}}.SetNormalizedRoleNameAsync({TRole},System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IRoleStore{`0}.SetNormalizedRoleNameAsync(`0,System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IRoleStore{{TRole}}
  definition: Microsoft.AspNetCore.Identity.IRoleStore`1.SetNormalizedRoleNameAsync(`0,System.String,System.Threading.CancellationToken)
  name: SetNormalizedRoleNameAsync(TRole, String, CancellationToken)
  nameWithType: IRoleStore<TRole>.SetNormalizedRoleNameAsync(TRole, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.SetNormalizedRoleNameAsync(TRole, System.String, System.Threading.CancellationToken)
  nameWithType.vb: IRoleStore(Of TRole).SetNormalizedRoleNameAsync(TRole, String, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).SetNormalizedRoleNameAsync(TRole, System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1.SetNormalizedRoleNameAsync(`0,System.String,System.Threading.CancellationToken)
    name: SetNormalizedRoleNameAsync
    nameWithType: IRoleStore<TRole>.SetNormalizedRoleNameAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.SetNormalizedRoleNameAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1.SetNormalizedRoleNameAsync(`0,System.String,System.Threading.CancellationToken)
    name: SetNormalizedRoleNameAsync
    nameWithType: IRoleStore(Of TRole).SetNormalizedRoleNameAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).SetNormalizedRoleNameAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IRoleStore`1.SetNormalizedRoleNameAsync(`0,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IRoleStore`1.SetNormalizedRoleNameAsync(`0,System.String,System.Threading.CancellationToken)
  isExternal: true
  name: SetNormalizedRoleNameAsync(TRole, String, CancellationToken)
  nameWithType: IRoleStore<TRole>.SetNormalizedRoleNameAsync(TRole, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.SetNormalizedRoleNameAsync(TRole, System.String, System.Threading.CancellationToken)
  nameWithType.vb: IRoleStore(Of TRole).SetNormalizedRoleNameAsync(TRole, String, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).SetNormalizedRoleNameAsync(TRole, System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1.SetNormalizedRoleNameAsync(`0,System.String,System.Threading.CancellationToken)
    name: SetNormalizedRoleNameAsync
    nameWithType: IRoleStore<TRole>.SetNormalizedRoleNameAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.SetNormalizedRoleNameAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1.SetNormalizedRoleNameAsync(`0,System.String,System.Threading.CancellationToken)
    name: SetNormalizedRoleNameAsync
    nameWithType: IRoleStore(Of TRole).SetNormalizedRoleNameAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).SetNormalizedRoleNameAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Identity.Entities.RoleStoreBase`4.FindByIdAsync*
  commentId: Overload:Hybrid.Zero.Identity.Entities.RoleStoreBase`4.FindByIdAsync
  name: FindByIdAsync
  nameWithType: RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>.FindByIdAsync
  fullName: Hybrid.Zero.Identity.Entities.RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>.FindByIdAsync
  nameWithType.vb: RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey).FindByIdAsync
  fullName.vb: Hybrid.Zero.Identity.Entities.RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey).FindByIdAsync
- uid: Microsoft.AspNetCore.Identity.IRoleStore{{TRole}}.FindByIdAsync(System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IRoleStore{`0}.FindByIdAsync(System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IRoleStore{{TRole}}
  definition: Microsoft.AspNetCore.Identity.IRoleStore`1.FindByIdAsync(System.String,System.Threading.CancellationToken)
  name: FindByIdAsync(String, CancellationToken)
  nameWithType: IRoleStore<TRole>.FindByIdAsync(String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.FindByIdAsync(System.String, System.Threading.CancellationToken)
  nameWithType.vb: IRoleStore(Of TRole).FindByIdAsync(String, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).FindByIdAsync(System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1.FindByIdAsync(System.String,System.Threading.CancellationToken)
    name: FindByIdAsync
    nameWithType: IRoleStore<TRole>.FindByIdAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.FindByIdAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1.FindByIdAsync(System.String,System.Threading.CancellationToken)
    name: FindByIdAsync
    nameWithType: IRoleStore(Of TRole).FindByIdAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).FindByIdAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{{TRole}}
  commentId: T:System.Threading.Tasks.Task{`0}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<TRole>
  nameWithType: Task<TRole>
  fullName: System.Threading.Tasks.Task<TRole>
  nameWithType.vb: Task(Of TRole)
  fullName.vb: System.Threading.Tasks.Task(Of TRole)
  name.vb: Task(Of TRole)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IRoleStore`1.FindByIdAsync(System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IRoleStore`1.FindByIdAsync(System.String,System.Threading.CancellationToken)
  isExternal: true
  name: FindByIdAsync(String, CancellationToken)
  nameWithType: IRoleStore<TRole>.FindByIdAsync(String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.FindByIdAsync(System.String, System.Threading.CancellationToken)
  nameWithType.vb: IRoleStore(Of TRole).FindByIdAsync(String, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).FindByIdAsync(System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1.FindByIdAsync(System.String,System.Threading.CancellationToken)
    name: FindByIdAsync
    nameWithType: IRoleStore<TRole>.FindByIdAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.FindByIdAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1.FindByIdAsync(System.String,System.Threading.CancellationToken)
    name: FindByIdAsync
    nameWithType: IRoleStore(Of TRole).FindByIdAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).FindByIdAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Identity.Entities.RoleStoreBase`4.FindByNameAsync*
  commentId: Overload:Hybrid.Zero.Identity.Entities.RoleStoreBase`4.FindByNameAsync
  name: FindByNameAsync
  nameWithType: RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>.FindByNameAsync
  fullName: Hybrid.Zero.Identity.Entities.RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>.FindByNameAsync
  nameWithType.vb: RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey).FindByNameAsync
  fullName.vb: Hybrid.Zero.Identity.Entities.RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey).FindByNameAsync
- uid: Microsoft.AspNetCore.Identity.IRoleStore{{TRole}}.FindByNameAsync(System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IRoleStore{`0}.FindByNameAsync(System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IRoleStore{{TRole}}
  definition: Microsoft.AspNetCore.Identity.IRoleStore`1.FindByNameAsync(System.String,System.Threading.CancellationToken)
  name: FindByNameAsync(String, CancellationToken)
  nameWithType: IRoleStore<TRole>.FindByNameAsync(String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.FindByNameAsync(System.String, System.Threading.CancellationToken)
  nameWithType.vb: IRoleStore(Of TRole).FindByNameAsync(String, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).FindByNameAsync(System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1.FindByNameAsync(System.String,System.Threading.CancellationToken)
    name: FindByNameAsync
    nameWithType: IRoleStore<TRole>.FindByNameAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.FindByNameAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1.FindByNameAsync(System.String,System.Threading.CancellationToken)
    name: FindByNameAsync
    nameWithType: IRoleStore(Of TRole).FindByNameAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).FindByNameAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IRoleStore`1.FindByNameAsync(System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IRoleStore`1.FindByNameAsync(System.String,System.Threading.CancellationToken)
  isExternal: true
  name: FindByNameAsync(String, CancellationToken)
  nameWithType: IRoleStore<TRole>.FindByNameAsync(String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.FindByNameAsync(System.String, System.Threading.CancellationToken)
  nameWithType.vb: IRoleStore(Of TRole).FindByNameAsync(String, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).FindByNameAsync(System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1.FindByNameAsync(System.String,System.Threading.CancellationToken)
    name: FindByNameAsync
    nameWithType: IRoleStore<TRole>.FindByNameAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.FindByNameAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1.FindByNameAsync(System.String,System.Threading.CancellationToken)
    name: FindByNameAsync
    nameWithType: IRoleStore(Of TRole).FindByNameAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).FindByNameAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Security.Claims.Claim
  commentId: T:System.Security.Claims.Claim
  parent: System.Security.Claims
  isExternal: true
  name: Claim
  nameWithType: Claim
  fullName: System.Security.Claims.Claim
- uid: Hybrid.Zero.Identity.Entities.RoleStoreBase`4.GetClaimsAsync*
  commentId: Overload:Hybrid.Zero.Identity.Entities.RoleStoreBase`4.GetClaimsAsync
  name: GetClaimsAsync
  nameWithType: RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>.GetClaimsAsync
  fullName: Hybrid.Zero.Identity.Entities.RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>.GetClaimsAsync
  nameWithType.vb: RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey).GetClaimsAsync
  fullName.vb: Hybrid.Zero.Identity.Entities.RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey).GetClaimsAsync
- uid: Microsoft.AspNetCore.Identity.IRoleClaimStore{{TRole}}.GetClaimsAsync({TRole},System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IRoleClaimStore{`0}.GetClaimsAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IRoleClaimStore{{TRole}}
  definition: Microsoft.AspNetCore.Identity.IRoleClaimStore`1.GetClaimsAsync(`0,System.Threading.CancellationToken)
  name: GetClaimsAsync(TRole, CancellationToken)
  nameWithType: IRoleClaimStore<TRole>.GetClaimsAsync(TRole, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IRoleClaimStore<TRole>.GetClaimsAsync(TRole, System.Threading.CancellationToken)
  nameWithType.vb: IRoleClaimStore(Of TRole).GetClaimsAsync(TRole, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IRoleClaimStore(Of TRole).GetClaimsAsync(TRole, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IRoleClaimStore`1.GetClaimsAsync(`0,System.Threading.CancellationToken)
    name: GetClaimsAsync
    nameWithType: IRoleClaimStore<TRole>.GetClaimsAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleClaimStore<TRole>.GetClaimsAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IRoleClaimStore`1.GetClaimsAsync(`0,System.Threading.CancellationToken)
    name: GetClaimsAsync
    nameWithType: IRoleClaimStore(Of TRole).GetClaimsAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleClaimStore(Of TRole).GetClaimsAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IList{System.Security.Claims.Claim}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IList{System.Security.Claims.Claim}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IList<Claim>>
  nameWithType: Task<IList<Claim>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IList<System.Security.Claims.Claim>>
  nameWithType.vb: Task(Of IList(Of Claim))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IList(Of System.Security.Claims.Claim))
  name.vb: Task(Of IList(Of Claim))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Security.Claims
  commentId: N:System.Security.Claims
  isExternal: true
  name: System.Security.Claims
  nameWithType: System.Security.Claims
  fullName: System.Security.Claims
- uid: Microsoft.AspNetCore.Identity.IRoleClaimStore`1.GetClaimsAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IRoleClaimStore`1.GetClaimsAsync(`0,System.Threading.CancellationToken)
  isExternal: true
  name: GetClaimsAsync(TRole, CancellationToken)
  nameWithType: IRoleClaimStore<TRole>.GetClaimsAsync(TRole, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IRoleClaimStore<TRole>.GetClaimsAsync(TRole, System.Threading.CancellationToken)
  nameWithType.vb: IRoleClaimStore(Of TRole).GetClaimsAsync(TRole, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IRoleClaimStore(Of TRole).GetClaimsAsync(TRole, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IRoleClaimStore`1.GetClaimsAsync(`0,System.Threading.CancellationToken)
    name: GetClaimsAsync
    nameWithType: IRoleClaimStore<TRole>.GetClaimsAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleClaimStore<TRole>.GetClaimsAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IRoleClaimStore`1.GetClaimsAsync(`0,System.Threading.CancellationToken)
    name: GetClaimsAsync
    nameWithType: IRoleClaimStore(Of TRole).GetClaimsAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleClaimStore(Of TRole).GetClaimsAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Identity.Entities.RoleStoreBase`4.AddClaimAsync*
  commentId: Overload:Hybrid.Zero.Identity.Entities.RoleStoreBase`4.AddClaimAsync
  name: AddClaimAsync
  nameWithType: RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>.AddClaimAsync
  fullName: Hybrid.Zero.Identity.Entities.RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>.AddClaimAsync
  nameWithType.vb: RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey).AddClaimAsync
  fullName.vb: Hybrid.Zero.Identity.Entities.RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey).AddClaimAsync
- uid: Microsoft.AspNetCore.Identity.IRoleClaimStore{{TRole}}.AddClaimAsync({TRole},System.Security.Claims.Claim,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IRoleClaimStore{`0}.AddClaimAsync(`0,System.Security.Claims.Claim,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IRoleClaimStore{{TRole}}
  definition: Microsoft.AspNetCore.Identity.IRoleClaimStore`1.AddClaimAsync(`0,System.Security.Claims.Claim,System.Threading.CancellationToken)
  name: AddClaimAsync(TRole, Claim, CancellationToken)
  nameWithType: IRoleClaimStore<TRole>.AddClaimAsync(TRole, Claim, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IRoleClaimStore<TRole>.AddClaimAsync(TRole, System.Security.Claims.Claim, System.Threading.CancellationToken)
  nameWithType.vb: IRoleClaimStore(Of TRole).AddClaimAsync(TRole, Claim, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IRoleClaimStore(Of TRole).AddClaimAsync(TRole, System.Security.Claims.Claim, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IRoleClaimStore`1.AddClaimAsync(`0,System.Security.Claims.Claim,System.Threading.CancellationToken)
    name: AddClaimAsync
    nameWithType: IRoleClaimStore<TRole>.AddClaimAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleClaimStore<TRole>.AddClaimAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IRoleClaimStore`1.AddClaimAsync(`0,System.Security.Claims.Claim,System.Threading.CancellationToken)
    name: AddClaimAsync
    nameWithType: IRoleClaimStore(Of TRole).AddClaimAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleClaimStore(Of TRole).AddClaimAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IRoleClaimStore`1.AddClaimAsync(`0,System.Security.Claims.Claim,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IRoleClaimStore`1.AddClaimAsync(`0,System.Security.Claims.Claim,System.Threading.CancellationToken)
  isExternal: true
  name: AddClaimAsync(TRole, Claim, CancellationToken)
  nameWithType: IRoleClaimStore<TRole>.AddClaimAsync(TRole, Claim, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IRoleClaimStore<TRole>.AddClaimAsync(TRole, System.Security.Claims.Claim, System.Threading.CancellationToken)
  nameWithType.vb: IRoleClaimStore(Of TRole).AddClaimAsync(TRole, Claim, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IRoleClaimStore(Of TRole).AddClaimAsync(TRole, System.Security.Claims.Claim, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IRoleClaimStore`1.AddClaimAsync(`0,System.Security.Claims.Claim,System.Threading.CancellationToken)
    name: AddClaimAsync
    nameWithType: IRoleClaimStore<TRole>.AddClaimAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleClaimStore<TRole>.AddClaimAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IRoleClaimStore`1.AddClaimAsync(`0,System.Security.Claims.Claim,System.Threading.CancellationToken)
    name: AddClaimAsync
    nameWithType: IRoleClaimStore(Of TRole).AddClaimAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleClaimStore(Of TRole).AddClaimAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Identity.Entities.RoleStoreBase`4.RemoveClaimAsync*
  commentId: Overload:Hybrid.Zero.Identity.Entities.RoleStoreBase`4.RemoveClaimAsync
  name: RemoveClaimAsync
  nameWithType: RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>.RemoveClaimAsync
  fullName: Hybrid.Zero.Identity.Entities.RoleStoreBase<TRole, TRoleKey, TRoleClaim, TRoleClaimKey>.RemoveClaimAsync
  nameWithType.vb: RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey).RemoveClaimAsync
  fullName.vb: Hybrid.Zero.Identity.Entities.RoleStoreBase(Of TRole, TRoleKey, TRoleClaim, TRoleClaimKey).RemoveClaimAsync
- uid: Microsoft.AspNetCore.Identity.IRoleClaimStore{{TRole}}.RemoveClaimAsync({TRole},System.Security.Claims.Claim,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IRoleClaimStore{`0}.RemoveClaimAsync(`0,System.Security.Claims.Claim,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IRoleClaimStore{{TRole}}
  definition: Microsoft.AspNetCore.Identity.IRoleClaimStore`1.RemoveClaimAsync(`0,System.Security.Claims.Claim,System.Threading.CancellationToken)
  name: RemoveClaimAsync(TRole, Claim, CancellationToken)
  nameWithType: IRoleClaimStore<TRole>.RemoveClaimAsync(TRole, Claim, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IRoleClaimStore<TRole>.RemoveClaimAsync(TRole, System.Security.Claims.Claim, System.Threading.CancellationToken)
  nameWithType.vb: IRoleClaimStore(Of TRole).RemoveClaimAsync(TRole, Claim, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IRoleClaimStore(Of TRole).RemoveClaimAsync(TRole, System.Security.Claims.Claim, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IRoleClaimStore`1.RemoveClaimAsync(`0,System.Security.Claims.Claim,System.Threading.CancellationToken)
    name: RemoveClaimAsync
    nameWithType: IRoleClaimStore<TRole>.RemoveClaimAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleClaimStore<TRole>.RemoveClaimAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IRoleClaimStore`1.RemoveClaimAsync(`0,System.Security.Claims.Claim,System.Threading.CancellationToken)
    name: RemoveClaimAsync
    nameWithType: IRoleClaimStore(Of TRole).RemoveClaimAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleClaimStore(Of TRole).RemoveClaimAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IRoleClaimStore`1.RemoveClaimAsync(`0,System.Security.Claims.Claim,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IRoleClaimStore`1.RemoveClaimAsync(`0,System.Security.Claims.Claim,System.Threading.CancellationToken)
  isExternal: true
  name: RemoveClaimAsync(TRole, Claim, CancellationToken)
  nameWithType: IRoleClaimStore<TRole>.RemoveClaimAsync(TRole, Claim, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IRoleClaimStore<TRole>.RemoveClaimAsync(TRole, System.Security.Claims.Claim, System.Threading.CancellationToken)
  nameWithType.vb: IRoleClaimStore(Of TRole).RemoveClaimAsync(TRole, Claim, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IRoleClaimStore(Of TRole).RemoveClaimAsync(TRole, System.Security.Claims.Claim, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IRoleClaimStore`1.RemoveClaimAsync(`0,System.Security.Claims.Claim,System.Threading.CancellationToken)
    name: RemoveClaimAsync
    nameWithType: IRoleClaimStore<TRole>.RemoveClaimAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleClaimStore<TRole>.RemoveClaimAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IRoleClaimStore`1.RemoveClaimAsync(`0,System.Security.Claims.Claim,System.Threading.CancellationToken)
    name: RemoveClaimAsync
    nameWithType: IRoleClaimStore(Of TRole).RemoveClaimAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleClaimStore(Of TRole).RemoveClaimAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
