### YamlMime:ManagedReference
items:
- uid: Hybrid.EntityFrameworkCore.RepositoryExtensions
  commentId: T:Hybrid.EntityFrameworkCore.RepositoryExtensions
  id: RepositoryExtensions
  parent: Hybrid.EntityFrameworkCore
  children:
  - Hybrid.EntityFrameworkCore.RepositoryExtensions.FromSql``2(Hybrid.Domain.Repositories.IRepository{``0,``1},System.String,System.Object[])
  - Hybrid.EntityFrameworkCore.RepositoryExtensions.UpdateBatchAndIntercept``2(Hybrid.Domain.Repositories.IRepository{``0,``1},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Action{Z.EntityFramework.Extensions.BatchDelete})
  - Hybrid.EntityFrameworkCore.RepositoryExtensions.UpdateBatchAndIntercept``2(Hybrid.Domain.Repositories.IRepository{``0,``1},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,``0}},System.Action{Z.EntityFramework.Extensions.BatchUpdate})
  - Hybrid.EntityFrameworkCore.RepositoryExtensions.UpdateBatchAndInterceptAsync``2(Hybrid.Domain.Repositories.IRepository{``0,``1},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Action{Z.EntityFramework.Extensions.BatchDelete})
  - Hybrid.EntityFrameworkCore.RepositoryExtensions.UpdateBatchAndInterceptAsync``2(Hybrid.Domain.Repositories.IRepository{``0,``1},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,``0}},System.Action{Z.EntityFramework.Extensions.BatchUpdate})
  langs:
  - csharp
  - vb
  name: RepositoryExtensions
  nameWithType: RepositoryExtensions
  fullName: Hybrid.EntityFrameworkCore.RepositoryExtensions
  type: Class
  source:
    remote:
      path: src/Hybrid.EntityFrameworkCore/RepositoryExtensions.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: RepositoryExtensions
    path: ../src/Hybrid.EntityFrameworkCore/RepositoryExtensions.cs
    startLine: 30
  assemblies:
  - Hybrid.EntityFrameworkCore
  namespace: Hybrid.EntityFrameworkCore
  summary: "\n<xref href=\"Hybrid.EntityFrameworkCore.Repository%602\" data-throw-if-not-resolved=\"false\"></xref>扩展辅助操作\n"
  example: []
  syntax:
    content: public static class RepositoryExtensions
    content.vb: Public Module RepositoryExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Hybrid.EntityFrameworkCore.RepositoryExtensions.UpdateBatchAndIntercept``2(Hybrid.Domain.Repositories.IRepository{``0,``1},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Action{Z.EntityFramework.Extensions.BatchDelete})
  commentId: M:Hybrid.EntityFrameworkCore.RepositoryExtensions.UpdateBatchAndIntercept``2(Hybrid.Domain.Repositories.IRepository{``0,``1},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Action{Z.EntityFramework.Extensions.BatchDelete})
  id: UpdateBatchAndIntercept``2(Hybrid.Domain.Repositories.IRepository{``0,``1},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Action{Z.EntityFramework.Extensions.BatchDelete})
  isExtensionMethod: true
  parent: Hybrid.EntityFrameworkCore.RepositoryExtensions
  langs:
  - csharp
  - vb
  name: UpdateBatchAndIntercept<TEntity, TKey>(IRepository<TEntity, TKey>, Expression<Func<TEntity, Boolean>>, Action<BatchDelete>)
  nameWithType: RepositoryExtensions.UpdateBatchAndIntercept<TEntity, TKey>(IRepository<TEntity, TKey>, Expression<Func<TEntity, Boolean>>, Action<BatchDelete>)
  fullName: Hybrid.EntityFrameworkCore.RepositoryExtensions.UpdateBatchAndIntercept<TEntity, TKey>(Hybrid.Domain.Repositories.IRepository<TEntity, TKey>, System.Linq.Expressions.Expression<System.Func<TEntity, System.Boolean>>, System.Action<Z.EntityFramework.Extensions.BatchDelete>)
  type: Method
  source:
    remote:
      path: src/Hybrid.EntityFrameworkCore/RepositoryExtensions.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: UpdateBatchAndIntercept
    path: ../src/Hybrid.EntityFrameworkCore/RepositoryExtensions.cs
    startLine: 41
  assemblies:
  - Hybrid.EntityFrameworkCore
  namespace: Hybrid.EntityFrameworkCore
  summary: "\n批量删除指定实体，并在提交前执行拦截委托\n"
  example: []
  syntax:
    content: >-
      public static int UpdateBatchAndIntercept<TEntity, TKey>(this IRepository<TEntity, TKey> repository, Expression<Func<TEntity, bool>> predicate, Action<BatchDelete> interceptAction)

          where TEntity : class, IEntity<TKey> where TKey : IEquatable<TKey>
    parameters:
    - id: repository
      type: Hybrid.Domain.Repositories.IRepository{{TEntity},{TKey}}
      description: 仓储
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}}
      description: 查询谓语表达式
    - id: interceptAction
      type: System.Action{Z.EntityFramework.Extensions.BatchDelete}
      description: 删除提交前执行的拦截委托
    typeParameters:
    - id: TEntity
      description: 实体类型
    - id: TKey
      description: 主键类型
    return:
      type: System.Int32
      description: 操作影响的行数
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function UpdateBatchAndIntercept(Of TEntity As {Class, IEntity(Of TKey)}, TKey As IEquatable(Of TKey))(repository As IRepository(Of TEntity, TKey), predicate As Expression(Of Func(Of TEntity, Boolean)), interceptAction As Action(Of BatchDelete)) As Integer
  overload: Hybrid.EntityFrameworkCore.RepositoryExtensions.UpdateBatchAndIntercept*
  nameWithType.vb: RepositoryExtensions.UpdateBatchAndIntercept(Of TEntity, TKey)(IRepository(Of TEntity, TKey), Expression(Of Func(Of TEntity, Boolean)), Action(Of BatchDelete))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Hybrid.EntityFrameworkCore.RepositoryExtensions.UpdateBatchAndIntercept(Of TEntity, TKey)(Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey), System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Boolean)), System.Action(Of Z.EntityFramework.Extensions.BatchDelete))
  name.vb: UpdateBatchAndIntercept(Of TEntity, TKey)(IRepository(Of TEntity, TKey), Expression(Of Func(Of TEntity, Boolean)), Action(Of BatchDelete))
- uid: Hybrid.EntityFrameworkCore.RepositoryExtensions.UpdateBatchAndInterceptAsync``2(Hybrid.Domain.Repositories.IRepository{``0,``1},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Action{Z.EntityFramework.Extensions.BatchDelete})
  commentId: M:Hybrid.EntityFrameworkCore.RepositoryExtensions.UpdateBatchAndInterceptAsync``2(Hybrid.Domain.Repositories.IRepository{``0,``1},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Action{Z.EntityFramework.Extensions.BatchDelete})
  id: UpdateBatchAndInterceptAsync``2(Hybrid.Domain.Repositories.IRepository{``0,``1},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Action{Z.EntityFramework.Extensions.BatchDelete})
  isExtensionMethod: true
  parent: Hybrid.EntityFrameworkCore.RepositoryExtensions
  langs:
  - csharp
  - vb
  name: UpdateBatchAndInterceptAsync<TEntity, TKey>(IRepository<TEntity, TKey>, Expression<Func<TEntity, Boolean>>, Action<BatchDelete>)
  nameWithType: RepositoryExtensions.UpdateBatchAndInterceptAsync<TEntity, TKey>(IRepository<TEntity, TKey>, Expression<Func<TEntity, Boolean>>, Action<BatchDelete>)
  fullName: Hybrid.EntityFrameworkCore.RepositoryExtensions.UpdateBatchAndInterceptAsync<TEntity, TKey>(Hybrid.Domain.Repositories.IRepository<TEntity, TKey>, System.Linq.Expressions.Expression<System.Func<TEntity, System.Boolean>>, System.Action<Z.EntityFramework.Extensions.BatchDelete>)
  type: Method
  source:
    remote:
      path: src/Hybrid.EntityFrameworkCore/RepositoryExtensions.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: UpdateBatchAndInterceptAsync
    path: ../src/Hybrid.EntityFrameworkCore/RepositoryExtensions.cs
    startLine: 59
  assemblies:
  - Hybrid.EntityFrameworkCore
  namespace: Hybrid.EntityFrameworkCore
  summary: "\n批量删除指定实体，并在提交前执行拦截委托\n"
  example: []
  syntax:
    content: >-
      public static Task<int> UpdateBatchAndInterceptAsync<TEntity, TKey>(this IRepository<TEntity, TKey> repository, Expression<Func<TEntity, bool>> predicate, Action<BatchDelete> interceptAction)

          where TEntity : class, IEntity<TKey> where TKey : IEquatable<TKey>
    parameters:
    - id: repository
      type: Hybrid.Domain.Repositories.IRepository{{TEntity},{TKey}}
      description: 仓储
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}}
      description: 查询谓语表达式
    - id: interceptAction
      type: System.Action{Z.EntityFramework.Extensions.BatchDelete}
      description: 删除提交前执行的拦截委托
    typeParameters:
    - id: TEntity
      description: 实体类型
    - id: TKey
      description: 主键类型
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: 操作影响的行数
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function UpdateBatchAndInterceptAsync(Of TEntity As {Class, IEntity(Of TKey)}, TKey As IEquatable(Of TKey))(repository As IRepository(Of TEntity, TKey), predicate As Expression(Of Func(Of TEntity, Boolean)), interceptAction As Action(Of BatchDelete)) As Task(Of Integer)
  overload: Hybrid.EntityFrameworkCore.RepositoryExtensions.UpdateBatchAndInterceptAsync*
  nameWithType.vb: RepositoryExtensions.UpdateBatchAndInterceptAsync(Of TEntity, TKey)(IRepository(Of TEntity, TKey), Expression(Of Func(Of TEntity, Boolean)), Action(Of BatchDelete))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Hybrid.EntityFrameworkCore.RepositoryExtensions.UpdateBatchAndInterceptAsync(Of TEntity, TKey)(Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey), System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Boolean)), System.Action(Of Z.EntityFramework.Extensions.BatchDelete))
  name.vb: UpdateBatchAndInterceptAsync(Of TEntity, TKey)(IRepository(Of TEntity, TKey), Expression(Of Func(Of TEntity, Boolean)), Action(Of BatchDelete))
- uid: Hybrid.EntityFrameworkCore.RepositoryExtensions.UpdateBatchAndIntercept``2(Hybrid.Domain.Repositories.IRepository{``0,``1},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,``0}},System.Action{Z.EntityFramework.Extensions.BatchUpdate})
  commentId: M:Hybrid.EntityFrameworkCore.RepositoryExtensions.UpdateBatchAndIntercept``2(Hybrid.Domain.Repositories.IRepository{``0,``1},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,``0}},System.Action{Z.EntityFramework.Extensions.BatchUpdate})
  id: UpdateBatchAndIntercept``2(Hybrid.Domain.Repositories.IRepository{``0,``1},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,``0}},System.Action{Z.EntityFramework.Extensions.BatchUpdate})
  isExtensionMethod: true
  parent: Hybrid.EntityFrameworkCore.RepositoryExtensions
  langs:
  - csharp
  - vb
  name: UpdateBatchAndIntercept<TEntity, TKey>(IRepository<TEntity, TKey>, Expression<Func<TEntity, Boolean>>, Expression<Func<TEntity, TEntity>>, Action<BatchUpdate>)
  nameWithType: RepositoryExtensions.UpdateBatchAndIntercept<TEntity, TKey>(IRepository<TEntity, TKey>, Expression<Func<TEntity, Boolean>>, Expression<Func<TEntity, TEntity>>, Action<BatchUpdate>)
  fullName: Hybrid.EntityFrameworkCore.RepositoryExtensions.UpdateBatchAndIntercept<TEntity, TKey>(Hybrid.Domain.Repositories.IRepository<TEntity, TKey>, System.Linq.Expressions.Expression<System.Func<TEntity, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<TEntity, TEntity>>, System.Action<Z.EntityFramework.Extensions.BatchUpdate>)
  type: Method
  source:
    remote:
      path: src/Hybrid.EntityFrameworkCore/RepositoryExtensions.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: UpdateBatchAndIntercept
    path: ../src/Hybrid.EntityFrameworkCore/RepositoryExtensions.cs
    startLine: 78
  assemblies:
  - Hybrid.EntityFrameworkCore
  namespace: Hybrid.EntityFrameworkCore
  summary: "\n批量更新指定实体，并在提交前执行拦截委托\n"
  example: []
  syntax:
    content: >-
      public static int UpdateBatchAndIntercept<TEntity, TKey>(this IRepository<TEntity, TKey> repository, Expression<Func<TEntity, bool>> predicate, Expression<Func<TEntity, TEntity>> updateExpression, Action<BatchUpdate> interceptAction)

          where TEntity : class, IEntity<TKey> where TKey : IEquatable<TKey>
    parameters:
    - id: repository
      type: Hybrid.Domain.Repositories.IRepository{{TEntity},{TKey}}
      description: 仓储
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}}
      description: 查询谓语表达式
    - id: updateExpression
      type: System.Linq.Expressions.Expression{System.Func{{TEntity},{TEntity}}}
      description: 属性更新表达式
    - id: interceptAction
      type: System.Action{Z.EntityFramework.Extensions.BatchUpdate}
      description: 更新提交前执行的拦截委托
    typeParameters:
    - id: TEntity
      description: 实体类型
    - id: TKey
      description: 主键类型
    return:
      type: System.Int32
      description: 操作影响的行数
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function UpdateBatchAndIntercept(Of TEntity As {Class, IEntity(Of TKey)}, TKey As IEquatable(Of TKey))(repository As IRepository(Of TEntity, TKey), predicate As Expression(Of Func(Of TEntity, Boolean)), updateExpression As Expression(Of Func(Of TEntity, TEntity)), interceptAction As Action(Of BatchUpdate)) As Integer
  overload: Hybrid.EntityFrameworkCore.RepositoryExtensions.UpdateBatchAndIntercept*
  nameWithType.vb: RepositoryExtensions.UpdateBatchAndIntercept(Of TEntity, TKey)(IRepository(Of TEntity, TKey), Expression(Of Func(Of TEntity, Boolean)), Expression(Of Func(Of TEntity, TEntity)), Action(Of BatchUpdate))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Hybrid.EntityFrameworkCore.RepositoryExtensions.UpdateBatchAndIntercept(Of TEntity, TKey)(Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey), System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of TEntity, TEntity)), System.Action(Of Z.EntityFramework.Extensions.BatchUpdate))
  name.vb: UpdateBatchAndIntercept(Of TEntity, TKey)(IRepository(Of TEntity, TKey), Expression(Of Func(Of TEntity, Boolean)), Expression(Of Func(Of TEntity, TEntity)), Action(Of BatchUpdate))
- uid: Hybrid.EntityFrameworkCore.RepositoryExtensions.UpdateBatchAndInterceptAsync``2(Hybrid.Domain.Repositories.IRepository{``0,``1},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,``0}},System.Action{Z.EntityFramework.Extensions.BatchUpdate})
  commentId: M:Hybrid.EntityFrameworkCore.RepositoryExtensions.UpdateBatchAndInterceptAsync``2(Hybrid.Domain.Repositories.IRepository{``0,``1},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,``0}},System.Action{Z.EntityFramework.Extensions.BatchUpdate})
  id: UpdateBatchAndInterceptAsync``2(Hybrid.Domain.Repositories.IRepository{``0,``1},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,``0}},System.Action{Z.EntityFramework.Extensions.BatchUpdate})
  isExtensionMethod: true
  parent: Hybrid.EntityFrameworkCore.RepositoryExtensions
  langs:
  - csharp
  - vb
  name: UpdateBatchAndInterceptAsync<TEntity, TKey>(IRepository<TEntity, TKey>, Expression<Func<TEntity, Boolean>>, Expression<Func<TEntity, TEntity>>, Action<BatchUpdate>)
  nameWithType: RepositoryExtensions.UpdateBatchAndInterceptAsync<TEntity, TKey>(IRepository<TEntity, TKey>, Expression<Func<TEntity, Boolean>>, Expression<Func<TEntity, TEntity>>, Action<BatchUpdate>)
  fullName: Hybrid.EntityFrameworkCore.RepositoryExtensions.UpdateBatchAndInterceptAsync<TEntity, TKey>(Hybrid.Domain.Repositories.IRepository<TEntity, TKey>, System.Linq.Expressions.Expression<System.Func<TEntity, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<TEntity, TEntity>>, System.Action<Z.EntityFramework.Extensions.BatchUpdate>)
  type: Method
  source:
    remote:
      path: src/Hybrid.EntityFrameworkCore/RepositoryExtensions.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: UpdateBatchAndInterceptAsync
    path: ../src/Hybrid.EntityFrameworkCore/RepositoryExtensions.cs
    startLine: 98
  assemblies:
  - Hybrid.EntityFrameworkCore
  namespace: Hybrid.EntityFrameworkCore
  summary: "\n批量更新指定实体，并在提交前执行拦截委托\n"
  example: []
  syntax:
    content: >-
      public static Task<int> UpdateBatchAndInterceptAsync<TEntity, TKey>(this IRepository<TEntity, TKey> repository, Expression<Func<TEntity, bool>> predicate, Expression<Func<TEntity, TEntity>> updateExpression, Action<BatchUpdate> interceptAction)

          where TEntity : class, IEntity<TKey> where TKey : IEquatable<TKey>
    parameters:
    - id: repository
      type: Hybrid.Domain.Repositories.IRepository{{TEntity},{TKey}}
      description: 仓储
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}}
      description: 查询谓语表达式
    - id: updateExpression
      type: System.Linq.Expressions.Expression{System.Func{{TEntity},{TEntity}}}
      description: 属性更新表达式
    - id: interceptAction
      type: System.Action{Z.EntityFramework.Extensions.BatchUpdate}
      description: 更新提交前执行的拦截委托
    typeParameters:
    - id: TEntity
      description: 实体类型
    - id: TKey
      description: 主键类型
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: 操作影响的行数
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function UpdateBatchAndInterceptAsync(Of TEntity As {Class, IEntity(Of TKey)}, TKey As IEquatable(Of TKey))(repository As IRepository(Of TEntity, TKey), predicate As Expression(Of Func(Of TEntity, Boolean)), updateExpression As Expression(Of Func(Of TEntity, TEntity)), interceptAction As Action(Of BatchUpdate)) As Task(Of Integer)
  overload: Hybrid.EntityFrameworkCore.RepositoryExtensions.UpdateBatchAndInterceptAsync*
  nameWithType.vb: RepositoryExtensions.UpdateBatchAndInterceptAsync(Of TEntity, TKey)(IRepository(Of TEntity, TKey), Expression(Of Func(Of TEntity, Boolean)), Expression(Of Func(Of TEntity, TEntity)), Action(Of BatchUpdate))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Hybrid.EntityFrameworkCore.RepositoryExtensions.UpdateBatchAndInterceptAsync(Of TEntity, TKey)(Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey), System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of TEntity, TEntity)), System.Action(Of Z.EntityFramework.Extensions.BatchUpdate))
  name.vb: UpdateBatchAndInterceptAsync(Of TEntity, TKey)(IRepository(Of TEntity, TKey), Expression(Of Func(Of TEntity, Boolean)), Expression(Of Func(Of TEntity, TEntity)), Action(Of BatchUpdate))
- uid: Hybrid.EntityFrameworkCore.RepositoryExtensions.FromSql``2(Hybrid.Domain.Repositories.IRepository{``0,``1},System.String,System.Object[])
  commentId: M:Hybrid.EntityFrameworkCore.RepositoryExtensions.FromSql``2(Hybrid.Domain.Repositories.IRepository{``0,``1},System.String,System.Object[])
  id: FromSql``2(Hybrid.Domain.Repositories.IRepository{``0,``1},System.String,System.Object[])
  isExtensionMethod: true
  parent: Hybrid.EntityFrameworkCore.RepositoryExtensions
  langs:
  - csharp
  - vb
  name: FromSql<TEntity, TKey>(IRepository<TEntity, TKey>, String, Object[])
  nameWithType: RepositoryExtensions.FromSql<TEntity, TKey>(IRepository<TEntity, TKey>, String, Object[])
  fullName: Hybrid.EntityFrameworkCore.RepositoryExtensions.FromSql<TEntity, TKey>(Hybrid.Domain.Repositories.IRepository<TEntity, TKey>, System.String, System.Object[])
  type: Method
  source:
    remote:
      path: src/Hybrid.EntityFrameworkCore/RepositoryExtensions.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: FromSql
    path: ../src/Hybrid.EntityFrameworkCore/RepositoryExtensions.cs
    startLine: 111
  assemblies:
  - Hybrid.EntityFrameworkCore
  namespace: Hybrid.EntityFrameworkCore
  summary: "\n执行SQL查询获取数据\n"
  example: []
  syntax:
    content: >-
      public static IEnumerable<TEntity> FromSql<TEntity, TKey>(this IRepository<TEntity, TKey> repository, string sql, params object[] parameters)

          where TEntity : class, IEntity<TKey> where TKey : IEquatable<TKey>
    parameters:
    - id: repository
      type: Hybrid.Domain.Repositories.IRepository{{TEntity},{TKey}}
    - id: sql
      type: System.String
    - id: parameters
      type: System.Object[]
    typeParameters:
    - id: TEntity
    - id: TKey
    return:
      type: System.Collections.Generic.IEnumerable{{TEntity}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function FromSql(Of TEntity As {Class, IEntity(Of TKey)}, TKey As IEquatable(Of TKey))(repository As IRepository(Of TEntity, TKey), sql As String, ParamArray parameters As Object()) As IEnumerable(Of TEntity)
  overload: Hybrid.EntityFrameworkCore.RepositoryExtensions.FromSql*
  nameWithType.vb: RepositoryExtensions.FromSql(Of TEntity, TKey)(IRepository(Of TEntity, TKey), String, Object())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Hybrid.EntityFrameworkCore.RepositoryExtensions.FromSql(Of TEntity, TKey)(Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey), System.String, System.Object())
  name.vb: FromSql(Of TEntity, TKey)(IRepository(Of TEntity, TKey), String, Object())
references:
- uid: Hybrid.EntityFrameworkCore.Repository`2
  commentId: T:Hybrid.EntityFrameworkCore.Repository`2
  name: Repository<TEntity, TKey>
  nameWithType: Repository<TEntity, TKey>
  fullName: Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>
  nameWithType.vb: Repository(Of TEntity, TKey)
  fullName.vb: Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey)
  name.vb: Repository(Of TEntity, TKey)
  spec.csharp:
  - uid: Hybrid.EntityFrameworkCore.Repository`2
    name: Repository
    nameWithType: Repository
    fullName: Hybrid.EntityFrameworkCore.Repository
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Hybrid.EntityFrameworkCore.Repository`2
    name: Repository
    nameWithType: Repository
    fullName: Hybrid.EntityFrameworkCore.Repository
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EntityFrameworkCore
  commentId: N:Hybrid.EntityFrameworkCore
  name: Hybrid.EntityFrameworkCore
  nameWithType: Hybrid.EntityFrameworkCore
  fullName: Hybrid.EntityFrameworkCore
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Hybrid.EntityFrameworkCore.RepositoryExtensions.UpdateBatchAndIntercept*
  commentId: Overload:Hybrid.EntityFrameworkCore.RepositoryExtensions.UpdateBatchAndIntercept
  name: UpdateBatchAndIntercept
  nameWithType: RepositoryExtensions.UpdateBatchAndIntercept
  fullName: Hybrid.EntityFrameworkCore.RepositoryExtensions.UpdateBatchAndIntercept
- uid: Hybrid.Domain.Repositories.IRepository{{TEntity},{TKey}}
  commentId: T:Hybrid.Domain.Repositories.IRepository{`0,`1}
  parent: Hybrid.Domain.Repositories
  definition: Hybrid.Domain.Repositories.IRepository`2
  name: IRepository<TEntity, TKey>
  nameWithType: IRepository<TEntity, TKey>
  fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>
  nameWithType.vb: IRepository(Of TEntity, TKey)
  fullName.vb: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey)
  name.vb: IRepository(Of TEntity, TKey)
  spec.csharp:
  - uid: Hybrid.Domain.Repositories.IRepository`2
    name: IRepository
    nameWithType: IRepository
    fullName: Hybrid.Domain.Repositories.IRepository
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Hybrid.Domain.Repositories.IRepository`2
    name: IRepository
    nameWithType: IRepository
    fullName: Hybrid.Domain.Repositories.IRepository
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TEntity, Boolean>>
  nameWithType: Expression<Func<TEntity, Boolean>>
  fullName: System.Linq.Expressions.Expression<System.Func<TEntity, System.Boolean>>
  nameWithType.vb: Expression(Of Func(Of TEntity, Boolean))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Boolean))
  name.vb: Expression(Of Func(Of TEntity, Boolean))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action{Z.EntityFramework.Extensions.BatchDelete}
  commentId: T:System.Action{Z.EntityFramework.Extensions.BatchDelete}
  parent: System
  definition: System.Action`1
  name: Action<BatchDelete>
  nameWithType: Action<BatchDelete>
  fullName: System.Action<Z.EntityFramework.Extensions.BatchDelete>
  nameWithType.vb: Action(Of BatchDelete)
  fullName.vb: System.Action(Of Z.EntityFramework.Extensions.BatchDelete)
  name.vb: Action(Of BatchDelete)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Z.EntityFramework.Extensions.BatchDelete
    name: BatchDelete
    nameWithType: BatchDelete
    fullName: Z.EntityFramework.Extensions.BatchDelete
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Z.EntityFramework.Extensions.BatchDelete
    name: BatchDelete
    nameWithType: BatchDelete
    fullName: Z.EntityFramework.Extensions.BatchDelete
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Hybrid.Domain.Repositories.IRepository`2
  commentId: T:Hybrid.Domain.Repositories.IRepository`2
  name: IRepository<TEntity, TKey>
  nameWithType: IRepository<TEntity, TKey>
  fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>
  nameWithType.vb: IRepository(Of TEntity, TKey)
  fullName.vb: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey)
  name.vb: IRepository(Of TEntity, TKey)
  spec.csharp:
  - uid: Hybrid.Domain.Repositories.IRepository`2
    name: IRepository
    nameWithType: IRepository
    fullName: Hybrid.Domain.Repositories.IRepository
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Hybrid.Domain.Repositories.IRepository`2
    name: IRepository
    nameWithType: IRepository
    fullName: Hybrid.Domain.Repositories.IRepository
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Domain.Repositories
  commentId: N:Hybrid.Domain.Repositories
  name: Hybrid.Domain.Repositories
  nameWithType: Hybrid.Domain.Repositories
  fullName: Hybrid.Domain.Repositories
- uid: System.Linq.Expressions.Expression`1
  commentId: T:System.Linq.Expressions.Expression`1
  isExternal: true
  name: Expression<TDelegate>
  nameWithType: Expression<TDelegate>
  fullName: System.Linq.Expressions.Expression<TDelegate>
  nameWithType.vb: Expression(Of TDelegate)
  fullName.vb: System.Linq.Expressions.Expression(Of TDelegate)
  name.vb: Expression(Of TDelegate)
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TDelegate
    nameWithType: TDelegate
    fullName: TDelegate
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TDelegate
    nameWithType: TDelegate
    fullName: TDelegate
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions
  commentId: N:System.Linq.Expressions
  isExternal: true
  name: System.Linq.Expressions
  nameWithType: System.Linq.Expressions
  fullName: System.Linq.Expressions
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EntityFrameworkCore.RepositoryExtensions.UpdateBatchAndInterceptAsync*
  commentId: Overload:Hybrid.EntityFrameworkCore.RepositoryExtensions.UpdateBatchAndInterceptAsync
  name: UpdateBatchAndInterceptAsync
  nameWithType: RepositoryExtensions.UpdateBatchAndInterceptAsync
  fullName: Hybrid.EntityFrameworkCore.RepositoryExtensions.UpdateBatchAndInterceptAsync
- uid: System.Threading.Tasks.Task{System.Int32}
  commentId: T:System.Threading.Tasks.Task{System.Int32}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Int32>
  nameWithType: Task<Int32>
  fullName: System.Threading.Tasks.Task<System.Int32>
  nameWithType.vb: Task(Of Int32)
  fullName.vb: System.Threading.Tasks.Task(Of System.Int32)
  name.vb: Task(Of Int32)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.Linq.Expressions.Expression{System.Func{{TEntity},{TEntity}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,`0}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TEntity, TEntity>>
  nameWithType: Expression<Func<TEntity, TEntity>>
  fullName: System.Linq.Expressions.Expression<System.Func<TEntity, TEntity>>
  nameWithType.vb: Expression(Of Func(Of TEntity, TEntity))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TEntity, TEntity))
  name.vb: Expression(Of Func(Of TEntity, TEntity))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action{Z.EntityFramework.Extensions.BatchUpdate}
  commentId: T:System.Action{Z.EntityFramework.Extensions.BatchUpdate}
  parent: System
  definition: System.Action`1
  name: Action<BatchUpdate>
  nameWithType: Action<BatchUpdate>
  fullName: System.Action<Z.EntityFramework.Extensions.BatchUpdate>
  nameWithType.vb: Action(Of BatchUpdate)
  fullName.vb: System.Action(Of Z.EntityFramework.Extensions.BatchUpdate)
  name.vb: Action(Of BatchUpdate)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Z.EntityFramework.Extensions.BatchUpdate
    name: BatchUpdate
    nameWithType: BatchUpdate
    fullName: Z.EntityFramework.Extensions.BatchUpdate
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Z.EntityFramework.Extensions.BatchUpdate
    name: BatchUpdate
    nameWithType: BatchUpdate
    fullName: Z.EntityFramework.Extensions.BatchUpdate
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EntityFrameworkCore.RepositoryExtensions.FromSql*
  commentId: Overload:Hybrid.EntityFrameworkCore.RepositoryExtensions.FromSql
  name: FromSql
  nameWithType: RepositoryExtensions.FromSql
  fullName: Hybrid.EntityFrameworkCore.RepositoryExtensions.FromSql
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Object[]
  isExternal: true
  name: Object[]
  nameWithType: Object[]
  fullName: System.Object[]
  nameWithType.vb: Object()
  fullName.vb: System.Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Collections.Generic.IEnumerable{{TEntity}}
  commentId: T:System.Collections.Generic.IEnumerable{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TEntity>
  nameWithType: IEnumerable<TEntity>
  fullName: System.Collections.Generic.IEnumerable<TEntity>
  nameWithType.vb: IEnumerable(Of TEntity)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TEntity)
  name.vb: IEnumerable(Of TEntity)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
