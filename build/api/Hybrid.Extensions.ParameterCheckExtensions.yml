### YamlMime:ManagedReference
items:
- uid: Hybrid.Extensions.ParameterCheckExtensions
  commentId: T:Hybrid.Extensions.ParameterCheckExtensions
  id: ParameterCheckExtensions
  parent: Hybrid.Extensions
  children:
  - Hybrid.Extensions.ParameterCheckExtensions.CheckBetween``1(``0,System.String,``0,``0,System.Boolean,System.Boolean)
  - Hybrid.Extensions.ParameterCheckExtensions.CheckDirectoryExists(System.String,System.String)
  - Hybrid.Extensions.ParameterCheckExtensions.CheckFileExists(System.String,System.String)
  - Hybrid.Extensions.ParameterCheckExtensions.CheckGreaterThan``1(``0,System.String,``0,System.Boolean)
  - Hybrid.Extensions.ParameterCheckExtensions.CheckLessThan``1(``0,System.String,``0,System.Boolean)
  - Hybrid.Extensions.ParameterCheckExtensions.CheckNotEmpty(System.Guid,System.String)
  - Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
  - Hybrid.Extensions.ParameterCheckExtensions.CheckNotNullOrEmpty(System.String,System.String)
  - Hybrid.Extensions.ParameterCheckExtensions.CheckNotNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0},System.String)
  - Hybrid.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
  - Hybrid.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
  langs:
  - csharp
  - vb
  name: ParameterCheckExtensions
  nameWithType: ParameterCheckExtensions
  fullName: Hybrid.Extensions.ParameterCheckExtensions
  type: Class
  source:
    remote:
      path: src/Hybrid/Extensions/ParamterCheckExtensions.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: ParameterCheckExtensions
    path: ../src/Hybrid/Extensions/ParamterCheckExtensions.cs
    startLine: 20
  assemblies:
  - Hybrid
  namespace: Hybrid.Extensions
  summary: "\n用于参数检查的扩展方法\n"
  example: []
  syntax:
    content: public static class ParameterCheckExtensions
    content.vb: Public Module ParameterCheckExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Hybrid.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
  commentId: M:Hybrid.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
  id: Required``1(``0,System.Func{``0,System.Boolean},System.String)
  isExtensionMethod: true
  parent: Hybrid.Extensions.ParameterCheckExtensions
  langs:
  - csharp
  - vb
  name: Required<T>(T, Func<T, Boolean>, String)
  nameWithType: ParameterCheckExtensions.Required<T>(T, Func<T, Boolean>, String)
  fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<T>(T, System.Func<T, System.Boolean>, System.String)
  type: Method
  source:
    remote:
      path: src/Hybrid/Extensions/ParamterCheckExtensions.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: Required
    path: ../src/Hybrid/Extensions/ParamterCheckExtensions.cs
    startLine: 48
  assemblies:
  - Hybrid
  namespace: Hybrid.Extensions
  summary: "\n验证指定值的断言表达式是否为真，不为值抛出<xref href=\"System.Exception\" data-throw-if-not-resolved=\"false\"></xref>异常\n"
  example: []
  syntax:
    content: public static void Required<T>(this T value, Func<T, bool> assertionFunc, string message)
    parameters:
    - id: value
      type: '{T}'
      description: ''
    - id: assertionFunc
      type: System.Func{{T},System.Boolean}
      description: 要验证的断言表达式
    - id: message
      type: System.String
      description: 异常消息
    typeParameters:
    - id: T
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub Required(Of T)(value As T, assertionFunc As Func(Of T, Boolean), message As String)
  overload: Hybrid.Extensions.ParameterCheckExtensions.Required*
  nameWithType.vb: ParameterCheckExtensions.Required(Of T)(T, Func(Of T, Boolean), String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Hybrid.Extensions.ParameterCheckExtensions.Required(Of T)(T, System.Func(Of T, System.Boolean), System.String)
  name.vb: Required(Of T)(T, Func(Of T, Boolean), String)
- uid: Hybrid.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
  commentId: M:Hybrid.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
  id: Required``2(``0,System.Func{``0,System.Boolean},System.String)
  isExtensionMethod: true
  parent: Hybrid.Extensions.ParameterCheckExtensions
  langs:
  - csharp
  - vb
  name: Required<T, TException>(T, Func<T, Boolean>, String)
  nameWithType: ParameterCheckExtensions.Required<T, TException>(T, Func<T, Boolean>, String)
  fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<T, TException>(T, System.Func<T, System.Boolean>, System.String)
  type: Method
  source:
    remote:
      path: src/Hybrid/Extensions/ParamterCheckExtensions.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: Required
    path: ../src/Hybrid/Extensions/ParamterCheckExtensions.cs
    startLine: 65
  assemblies:
  - Hybrid
  namespace: Hybrid.Extensions
  summary: "\n验证指定值的断言表达式是否为真，不为真抛出<code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TException</code>异常\n"
  example: []
  syntax:
    content: >-
      public static void Required<T, TException>(this T value, Func<T, bool> assertionFunc, string message)

          where TException : Exception
    parameters:
    - id: value
      type: '{T}'
      description: 要判断的值
    - id: assertionFunc
      type: System.Func{{T},System.Boolean}
      description: 要验证的断言表达式
    - id: message
      type: System.String
      description: 异常消息
    typeParameters:
    - id: T
      description: 要判断的值的类型
    - id: TException
      description: 抛出的异常类型
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub Required(Of T, TException As Exception)(value As T, assertionFunc As Func(Of T, Boolean), message As String)
  overload: Hybrid.Extensions.ParameterCheckExtensions.Required*
  nameWithType.vb: ParameterCheckExtensions.Required(Of T, TException)(T, Func(Of T, Boolean), String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Hybrid.Extensions.ParameterCheckExtensions.Required(Of T, TException)(T, System.Func(Of T, System.Boolean), System.String)
  name.vb: Required(Of T, TException)(T, Func(Of T, Boolean), String)
- uid: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
  commentId: M:Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
  id: CheckNotNull``1(``0,System.String)
  isExtensionMethod: true
  parent: Hybrid.Extensions.ParameterCheckExtensions
  langs:
  - csharp
  - vb
  name: CheckNotNull<T>(T, String)
  nameWithType: ParameterCheckExtensions.CheckNotNull<T>(T, String)
  fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull<T>(T, System.String)
  type: Method
  source:
    remote:
      path: src/Hybrid/Extensions/ParamterCheckExtensions.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: CheckNotNull
    path: ../src/Hybrid/Extensions/ParamterCheckExtensions.cs
    startLine: 80
  assemblies:
  - Hybrid
  namespace: Hybrid.Extensions
  summary: "\n检查参数不能为空引用，否则抛出<xref href=\"System.ArgumentNullException\" data-throw-if-not-resolved=\"false\"></xref>异常。\n"
  example: []
  syntax:
    content: >-
      public static void CheckNotNull<T>(this T value, string paramName)

          where T : class
    parameters:
    - id: value
      type: '{T}'
      description: ''
    - id: paramName
      type: System.String
      description: 参数名称
    typeParameters:
    - id: T
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub CheckNotNull(Of T As Class)(value As T, paramName As String)
  overload: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
  nameWithType.vb: ParameterCheckExtensions.CheckNotNull(Of T)(T, String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull(Of T)(T, System.String)
  name.vb: CheckNotNull(Of T)(T, String)
- uid: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNullOrEmpty(System.String,System.String)
  commentId: M:Hybrid.Extensions.ParameterCheckExtensions.CheckNotNullOrEmpty(System.String,System.String)
  id: CheckNotNullOrEmpty(System.String,System.String)
  isExtensionMethod: true
  parent: Hybrid.Extensions.ParameterCheckExtensions
  langs:
  - csharp
  - vb
  name: CheckNotNullOrEmpty(String, String)
  nameWithType: ParameterCheckExtensions.CheckNotNullOrEmpty(String, String)
  fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNullOrEmpty(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/Hybrid/Extensions/ParamterCheckExtensions.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: CheckNotNullOrEmpty
    path: ../src/Hybrid/Extensions/ParamterCheckExtensions.cs
    startLine: 92
  assemblies:
  - Hybrid
  namespace: Hybrid.Extensions
  summary: "\n检查字符串不能为空引用或空字符串，否则抛出<xref href=\"System.ArgumentNullException\" data-throw-if-not-resolved=\"false\"></xref>异常或<xref href=\"System.ArgumentException\" data-throw-if-not-resolved=\"false\"></xref>异常。\n"
  example: []
  syntax:
    content: public static void CheckNotNullOrEmpty(this string value, string paramName)
    parameters:
    - id: value
      type: System.String
      description: ''
    - id: paramName
      type: System.String
      description: 参数名称。
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub CheckNotNullOrEmpty(value As String, paramName As String)
  overload: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNullOrEmpty*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Hybrid.Extensions.ParameterCheckExtensions.CheckNotEmpty(System.Guid,System.String)
  commentId: M:Hybrid.Extensions.ParameterCheckExtensions.CheckNotEmpty(System.Guid,System.String)
  id: CheckNotEmpty(System.Guid,System.String)
  isExtensionMethod: true
  parent: Hybrid.Extensions.ParameterCheckExtensions
  langs:
  - csharp
  - vb
  name: CheckNotEmpty(Guid, String)
  nameWithType: ParameterCheckExtensions.CheckNotEmpty(Guid, String)
  fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckNotEmpty(System.Guid, System.String)
  type: Method
  source:
    remote:
      path: src/Hybrid/Extensions/ParamterCheckExtensions.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: CheckNotEmpty
    path: ../src/Hybrid/Extensions/ParamterCheckExtensions.cs
    startLine: 104
  assemblies:
  - Hybrid
  namespace: Hybrid.Extensions
  summary: "\n检查Guid值不能为Guid.Empty，否则抛出<xref href=\"System.ArgumentException\" data-throw-if-not-resolved=\"false\"></xref>异常。\n"
  example: []
  syntax:
    content: public static void CheckNotEmpty(this Guid value, string paramName)
    parameters:
    - id: value
      type: System.Guid
      description: ''
    - id: paramName
      type: System.String
      description: 参数名称。
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub CheckNotEmpty(value As Guid, paramName As String)
  overload: Hybrid.Extensions.ParameterCheckExtensions.CheckNotEmpty*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0},System.String)
  commentId: M:Hybrid.Extensions.ParameterCheckExtensions.CheckNotNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0},System.String)
  id: CheckNotNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0},System.String)
  isExtensionMethod: true
  parent: Hybrid.Extensions.ParameterCheckExtensions
  langs:
  - csharp
  - vb
  name: CheckNotNullOrEmpty<T>(IEnumerable<T>, String)
  nameWithType: ParameterCheckExtensions.CheckNotNullOrEmpty<T>(IEnumerable<T>, String)
  fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNullOrEmpty<T>(System.Collections.Generic.IEnumerable<T>, System.String)
  type: Method
  source:
    remote:
      path: src/Hybrid/Extensions/ParamterCheckExtensions.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: CheckNotNullOrEmpty
    path: ../src/Hybrid/Extensions/ParamterCheckExtensions.cs
    startLine: 117
  assemblies:
  - Hybrid
  namespace: Hybrid.Extensions
  summary: "\n检查集合不能为空引用或空集合，否则抛出<xref href=\"System.ArgumentNullException\" data-throw-if-not-resolved=\"false\"></xref>异常或<xref href=\"System.ArgumentException\" data-throw-if-not-resolved=\"false\"></xref>异常。\n"
  example: []
  syntax:
    content: public static void CheckNotNullOrEmpty<T>(this IEnumerable<T> collection, string paramName)
    parameters:
    - id: collection
      type: System.Collections.Generic.IEnumerable{{T}}
      description: ''
    - id: paramName
      type: System.String
      description: 参数名称。
    typeParameters:
    - id: T
      description: 集合项的类型。
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub CheckNotNullOrEmpty(Of T)(collection As IEnumerable(Of T), paramName As String)
  overload: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNullOrEmpty*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
  nameWithType.vb: ParameterCheckExtensions.CheckNotNullOrEmpty(Of T)(IEnumerable(Of T), String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNullOrEmpty(Of T)(System.Collections.Generic.IEnumerable(Of T), System.String)
  name.vb: CheckNotNullOrEmpty(Of T)(IEnumerable(Of T), String)
- uid: Hybrid.Extensions.ParameterCheckExtensions.CheckLessThan``1(``0,System.String,``0,System.Boolean)
  commentId: M:Hybrid.Extensions.ParameterCheckExtensions.CheckLessThan``1(``0,System.String,``0,System.Boolean)
  id: CheckLessThan``1(``0,System.String,``0,System.Boolean)
  isExtensionMethod: true
  parent: Hybrid.Extensions.ParameterCheckExtensions
  langs:
  - csharp
  - vb
  name: CheckLessThan<T>(T, String, T, Boolean)
  nameWithType: ParameterCheckExtensions.CheckLessThan<T>(T, String, T, Boolean)
  fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckLessThan<T>(T, System.String, T, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Hybrid/Extensions/ParamterCheckExtensions.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: CheckLessThan
    path: ../src/Hybrid/Extensions/ParamterCheckExtensions.cs
    startLine: 132
  assemblies:
  - Hybrid
  namespace: Hybrid.Extensions
  summary: "\n检查参数必须小于[或可等于，参数canEqual]指定值，否则抛出<xref href=\"System.ArgumentOutOfRangeException\" data-throw-if-not-resolved=\"false\"></xref>异常。\n"
  example: []
  syntax:
    content: >-
      public static void CheckLessThan<T>(this T value, string paramName, T target, bool canEqual = false)

          where T : IComparable<T>
    parameters:
    - id: value
      type: '{T}'
      description: ''
    - id: paramName
      type: System.String
      description: 参数名称。
    - id: target
      type: '{T}'
      description: 要比较的值。
    - id: canEqual
      type: System.Boolean
      description: 是否可等于。
    typeParameters:
    - id: T
      description: 参数类型。
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub CheckLessThan(Of T As IComparable(Of T))(value As T, paramName As String, target As T, canEqual As Boolean = False)
  overload: Hybrid.Extensions.ParameterCheckExtensions.CheckLessThan*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
  nameWithType.vb: ParameterCheckExtensions.CheckLessThan(Of T)(T, String, T, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Hybrid.Extensions.ParameterCheckExtensions.CheckLessThan(Of T)(T, System.String, T, System.Boolean)
  name.vb: CheckLessThan(Of T)(T, String, T, Boolean)
- uid: Hybrid.Extensions.ParameterCheckExtensions.CheckGreaterThan``1(``0,System.String,``0,System.Boolean)
  commentId: M:Hybrid.Extensions.ParameterCheckExtensions.CheckGreaterThan``1(``0,System.String,``0,System.Boolean)
  id: CheckGreaterThan``1(``0,System.String,``0,System.Boolean)
  isExtensionMethod: true
  parent: Hybrid.Extensions.ParameterCheckExtensions
  langs:
  - csharp
  - vb
  name: CheckGreaterThan<T>(T, String, T, Boolean)
  nameWithType: ParameterCheckExtensions.CheckGreaterThan<T>(T, String, T, Boolean)
  fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckGreaterThan<T>(T, System.String, T, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Hybrid/Extensions/ParamterCheckExtensions.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: CheckGreaterThan
    path: ../src/Hybrid/Extensions/ParamterCheckExtensions.cs
    startLine: 148
  assemblies:
  - Hybrid
  namespace: Hybrid.Extensions
  summary: "\n检查参数必须大于[或可等于，参数canEqual]指定值，否则抛出<xref href=\"System.ArgumentOutOfRangeException\" data-throw-if-not-resolved=\"false\"></xref>异常。\n"
  example: []
  syntax:
    content: >-
      public static void CheckGreaterThan<T>(this T value, string paramName, T target, bool canEqual = false)

          where T : IComparable<T>
    parameters:
    - id: value
      type: '{T}'
      description: ''
    - id: paramName
      type: System.String
      description: 参数名称。
    - id: target
      type: '{T}'
      description: 要比较的值。
    - id: canEqual
      type: System.Boolean
      description: 是否可等于。
    typeParameters:
    - id: T
      description: 参数类型。
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub CheckGreaterThan(Of T As IComparable(Of T))(value As T, paramName As String, target As T, canEqual As Boolean = False)
  overload: Hybrid.Extensions.ParameterCheckExtensions.CheckGreaterThan*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
  nameWithType.vb: ParameterCheckExtensions.CheckGreaterThan(Of T)(T, String, T, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Hybrid.Extensions.ParameterCheckExtensions.CheckGreaterThan(Of T)(T, System.String, T, System.Boolean)
  name.vb: CheckGreaterThan(Of T)(T, String, T, Boolean)
- uid: Hybrid.Extensions.ParameterCheckExtensions.CheckBetween``1(``0,System.String,``0,``0,System.Boolean,System.Boolean)
  commentId: M:Hybrid.Extensions.ParameterCheckExtensions.CheckBetween``1(``0,System.String,``0,``0,System.Boolean,System.Boolean)
  id: CheckBetween``1(``0,System.String,``0,``0,System.Boolean,System.Boolean)
  isExtensionMethod: true
  parent: Hybrid.Extensions.ParameterCheckExtensions
  langs:
  - csharp
  - vb
  name: CheckBetween<T>(T, String, T, T, Boolean, Boolean)
  nameWithType: ParameterCheckExtensions.CheckBetween<T>(T, String, T, T, Boolean, Boolean)
  fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckBetween<T>(T, System.String, T, T, System.Boolean, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Hybrid/Extensions/ParamterCheckExtensions.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: CheckBetween
    path: ../src/Hybrid/Extensions/ParamterCheckExtensions.cs
    startLine: 166
  assemblies:
  - Hybrid
  namespace: Hybrid.Extensions
  summary: "\n检查参数必须在指定范围之间，否则抛出<xref href=\"System.ArgumentOutOfRangeException\" data-throw-if-not-resolved=\"false\"></xref>异常。\n"
  example: []
  syntax:
    content: >-
      public static void CheckBetween<T>(this T value, string paramName, T start, T end, bool startEqual = false, bool endEqual = false)

          where T : IComparable<T>
    parameters:
    - id: value
      type: '{T}'
      description: ''
    - id: paramName
      type: System.String
      description: 参数名称。
    - id: start
      type: '{T}'
      description: 比较范围的起始值。
    - id: end
      type: '{T}'
      description: 比较范围的结束值。
    - id: startEqual
      type: System.Boolean
      description: 是否可等于起始值
    - id: endEqual
      type: System.Boolean
      description: 是否可等于结束值
    typeParameters:
    - id: T
      description: 参数类型。
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub CheckBetween(Of T As IComparable(Of T))(value As T, paramName As String, start As T, end As T, startEqual As Boolean = False, endEqual As Boolean = False)
  overload: Hybrid.Extensions.ParameterCheckExtensions.CheckBetween*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
  nameWithType.vb: ParameterCheckExtensions.CheckBetween(Of T)(T, String, T, T, Boolean, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Hybrid.Extensions.ParameterCheckExtensions.CheckBetween(Of T)(T, System.String, T, T, System.Boolean, System.Boolean)
  name.vb: CheckBetween(Of T)(T, String, T, T, Boolean, Boolean)
- uid: Hybrid.Extensions.ParameterCheckExtensions.CheckDirectoryExists(System.String,System.String)
  commentId: M:Hybrid.Extensions.ParameterCheckExtensions.CheckDirectoryExists(System.String,System.String)
  id: CheckDirectoryExists(System.String,System.String)
  isExtensionMethod: true
  parent: Hybrid.Extensions.ParameterCheckExtensions
  langs:
  - csharp
  - vb
  name: CheckDirectoryExists(String, String)
  nameWithType: ParameterCheckExtensions.CheckDirectoryExists(String, String)
  fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckDirectoryExists(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/Hybrid/Extensions/ParamterCheckExtensions.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: CheckDirectoryExists
    path: ../src/Hybrid/Extensions/ParamterCheckExtensions.cs
    startLine: 189
  assemblies:
  - Hybrid
  namespace: Hybrid.Extensions
  summary: "\n检查指定路径的文件夹必须存在，否则抛出<xref href=\"System.IO.DirectoryNotFoundException\" data-throw-if-not-resolved=\"false\"></xref>异常。\n"
  example: []
  syntax:
    content: public static void CheckDirectoryExists(this string directory, string paramName = null)
    parameters:
    - id: directory
      type: System.String
      description: ''
    - id: paramName
      type: System.String
      description: 参数名称。
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub CheckDirectoryExists(directory As String, paramName As String = Nothing)
  overload: Hybrid.Extensions.ParameterCheckExtensions.CheckDirectoryExists*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Hybrid.Extensions.ParameterCheckExtensions.CheckFileExists(System.String,System.String)
  commentId: M:Hybrid.Extensions.ParameterCheckExtensions.CheckFileExists(System.String,System.String)
  id: CheckFileExists(System.String,System.String)
  isExtensionMethod: true
  parent: Hybrid.Extensions.ParameterCheckExtensions
  langs:
  - csharp
  - vb
  name: CheckFileExists(String, String)
  nameWithType: ParameterCheckExtensions.CheckFileExists(String, String)
  fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckFileExists(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/Hybrid/Extensions/ParamterCheckExtensions.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: CheckFileExists
    path: ../src/Hybrid/Extensions/ParamterCheckExtensions.cs
    startLine: 202
  assemblies:
  - Hybrid
  namespace: Hybrid.Extensions
  summary: "\n检查指定路径的文件必须存在，否则抛出<xref href=\"System.IO.FileNotFoundException\" data-throw-if-not-resolved=\"false\"></xref>异常。\n"
  example: []
  syntax:
    content: public static void CheckFileExists(this string filename, string paramName = null)
    parameters:
    - id: filename
      type: System.String
      description: ''
    - id: paramName
      type: System.String
      description: 参数名称。
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub CheckFileExists(filename As String, paramName As String = Nothing)
  overload: Hybrid.Extensions.ParameterCheckExtensions.CheckFileExists*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: 当文件路径为null时
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: 当文件路径不存在时
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Hybrid.Extensions
  commentId: N:Hybrid.Extensions
  name: Hybrid.Extensions
  nameWithType: Hybrid.Extensions
  fullName: Hybrid.Extensions
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Exception
  commentId: T:System.Exception
  parent: System
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: Hybrid.Extensions.ParameterCheckExtensions.Required*
  commentId: Overload:Hybrid.Extensions.ParameterCheckExtensions.Required
  name: Required
  nameWithType: ParameterCheckExtensions.Required
  fullName: Hybrid.Extensions.ParameterCheckExtensions.Required
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Func{{T},System.Boolean}
  commentId: T:System.Func{``0,System.Boolean}
  parent: System
  definition: System.Func`2
  name: Func<T, Boolean>
  nameWithType: Func<T, Boolean>
  fullName: System.Func<T, System.Boolean>
  nameWithType.vb: Func(Of T, Boolean)
  fullName.vb: System.Func(Of T, System.Boolean)
  name.vb: Func(Of T, Boolean)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: true
- uid: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull*
  commentId: Overload:Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull
  name: CheckNotNull
  nameWithType: ParameterCheckExtensions.CheckNotNull
  fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  isExternal: true
- uid: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNullOrEmpty*
  commentId: Overload:Hybrid.Extensions.ParameterCheckExtensions.CheckNotNullOrEmpty
  name: CheckNotNullOrEmpty
  nameWithType: ParameterCheckExtensions.CheckNotNullOrEmpty
  fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNullOrEmpty
- uid: Hybrid.Extensions.ParameterCheckExtensions.CheckNotEmpty*
  commentId: Overload:Hybrid.Extensions.ParameterCheckExtensions.CheckNotEmpty
  name: CheckNotEmpty
  nameWithType: ParameterCheckExtensions.CheckNotEmpty
  fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckNotEmpty
- uid: System.Guid
  commentId: T:System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Collections.Generic.IEnumerable{{T}}
  commentId: T:System.Collections.Generic.IEnumerable{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
  isExternal: true
- uid: Hybrid.Extensions.ParameterCheckExtensions.CheckLessThan*
  commentId: Overload:Hybrid.Extensions.ParameterCheckExtensions.CheckLessThan
  name: CheckLessThan
  nameWithType: ParameterCheckExtensions.CheckLessThan
  fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckLessThan
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Hybrid.Extensions.ParameterCheckExtensions.CheckGreaterThan*
  commentId: Overload:Hybrid.Extensions.ParameterCheckExtensions.CheckGreaterThan
  name: CheckGreaterThan
  nameWithType: ParameterCheckExtensions.CheckGreaterThan
  fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckGreaterThan
- uid: Hybrid.Extensions.ParameterCheckExtensions.CheckBetween*
  commentId: Overload:Hybrid.Extensions.ParameterCheckExtensions.CheckBetween
  name: CheckBetween
  nameWithType: ParameterCheckExtensions.CheckBetween
  fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckBetween
- uid: System.IO.DirectoryNotFoundException
  commentId: T:System.IO.DirectoryNotFoundException
  isExternal: true
- uid: Hybrid.Extensions.ParameterCheckExtensions.CheckDirectoryExists*
  commentId: Overload:Hybrid.Extensions.ParameterCheckExtensions.CheckDirectoryExists
  name: CheckDirectoryExists
  nameWithType: ParameterCheckExtensions.CheckDirectoryExists
  fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckDirectoryExists
- uid: System.IO.FileNotFoundException
  commentId: T:System.IO.FileNotFoundException
  isExternal: true
- uid: Hybrid.Extensions.ParameterCheckExtensions.CheckFileExists*
  commentId: Overload:Hybrid.Extensions.ParameterCheckExtensions.CheckFileExists
  name: CheckFileExists
  nameWithType: ParameterCheckExtensions.CheckFileExists
  fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckFileExists
