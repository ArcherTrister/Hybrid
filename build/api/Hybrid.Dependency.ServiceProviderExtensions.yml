### YamlMime:ManagedReference
items:
- uid: Hybrid.Dependency.ServiceProviderExtensions
  commentId: T:Hybrid.Dependency.ServiceProviderExtensions
  id: ServiceProviderExtensions
  parent: Hybrid.Dependency
  children:
  - Hybrid.Dependency.ServiceProviderExtensions.ExecuteScopedWork(System.IServiceProvider,System.Action{System.IServiceProvider},System.Boolean)
  - Hybrid.Dependency.ServiceProviderExtensions.ExecuteScopedWork``1(System.IServiceProvider,System.Func{System.IServiceProvider,``0},System.Boolean)
  - Hybrid.Dependency.ServiceProviderExtensions.ExecuteScopedWorkAsync(System.IServiceProvider,System.Func{System.IServiceProvider,System.Threading.Tasks.Task},System.Boolean)
  - Hybrid.Dependency.ServiceProviderExtensions.ExecuteScopedWorkAsync``1(System.IServiceProvider,System.Func{System.IServiceProvider,System.Threading.Tasks.Task{``0}},System.Boolean)
  - Hybrid.Dependency.ServiceProviderExtensions.GetCurrentUser(System.IServiceProvider)
  langs:
  - csharp
  - vb
  name: ServiceProviderExtensions
  nameWithType: ServiceProviderExtensions
  fullName: Hybrid.Dependency.ServiceProviderExtensions
  type: Class
  source:
    remote:
      path: src/Hybrid/Dependency/ServiceProviderExtensions.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: ServiceProviderExtensions
    path: ../src/Hybrid/Dependency/ServiceProviderExtensions.cs
    startLine: 21
  assemblies:
  - Hybrid
  namespace: Hybrid.Dependency
  summary: "\n<xref href=\"System.IServiceProvider\" data-throw-if-not-resolved=\"false\"></xref>扩展方法\n"
  example: []
  syntax:
    content: public static class ServiceProviderExtensions
    content.vb: Public Module ServiceProviderExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Hybrid.Dependency.ServiceProviderExtensions.ExecuteScopedWork(System.IServiceProvider,System.Action{System.IServiceProvider},System.Boolean)
  commentId: M:Hybrid.Dependency.ServiceProviderExtensions.ExecuteScopedWork(System.IServiceProvider,System.Action{System.IServiceProvider},System.Boolean)
  id: ExecuteScopedWork(System.IServiceProvider,System.Action{System.IServiceProvider},System.Boolean)
  isExtensionMethod: true
  parent: Hybrid.Dependency.ServiceProviderExtensions
  langs:
  - csharp
  - vb
  name: ExecuteScopedWork(IServiceProvider, Action<IServiceProvider>, Boolean)
  nameWithType: ServiceProviderExtensions.ExecuteScopedWork(IServiceProvider, Action<IServiceProvider>, Boolean)
  fullName: Hybrid.Dependency.ServiceProviderExtensions.ExecuteScopedWork(System.IServiceProvider, System.Action<System.IServiceProvider>, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Hybrid/Dependency/ServiceProviderExtensions.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: ExecuteScopedWork
    path: ../src/Hybrid/Dependency/ServiceProviderExtensions.cs
    startLine: 29
  assemblies:
  - Hybrid
  namespace: Hybrid.Dependency
  summary: "\n执行<xref href=\"Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped\" data-throw-if-not-resolved=\"false\"></xref>生命周期的业务逻辑\n1.当前处理<xref href=\"Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped\" data-throw-if-not-resolved=\"false\"></xref>生命周期外，使用CreateScope创建<xref href=\"Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped\" data-throw-if-not-resolved=\"false\"></xref>\n生命周期的ServiceProvider来执行，并释放资源\n2.当前处于<xref href=\"Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped\" data-throw-if-not-resolved=\"false\"></xref>生命周期内，直接使用<xref href=\"Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped\" data-throw-if-not-resolved=\"false\"></xref>的ServiceProvider来执行\n"
  example: []
  syntax:
    content: public static void ExecuteScopedWork(this IServiceProvider provider, Action<IServiceProvider> action, bool useHttpScope = true)
    parameters:
    - id: provider
      type: System.IServiceProvider
    - id: action
      type: System.Action{System.IServiceProvider}
    - id: useHttpScope
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub ExecuteScopedWork(provider As IServiceProvider, action As Action(Of IServiceProvider), useHttpScope As Boolean = True)
  overload: Hybrid.Dependency.ServiceProviderExtensions.ExecuteScopedWork*
  nameWithType.vb: ServiceProviderExtensions.ExecuteScopedWork(IServiceProvider, Action(Of IServiceProvider), Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Hybrid.Dependency.ServiceProviderExtensions.ExecuteScopedWork(System.IServiceProvider, System.Action(Of System.IServiceProvider), System.Boolean)
  name.vb: ExecuteScopedWork(IServiceProvider, Action(Of IServiceProvider), Boolean)
- uid: Hybrid.Dependency.ServiceProviderExtensions.ExecuteScopedWorkAsync(System.IServiceProvider,System.Func{System.IServiceProvider,System.Threading.Tasks.Task},System.Boolean)
  commentId: M:Hybrid.Dependency.ServiceProviderExtensions.ExecuteScopedWorkAsync(System.IServiceProvider,System.Func{System.IServiceProvider,System.Threading.Tasks.Task},System.Boolean)
  id: ExecuteScopedWorkAsync(System.IServiceProvider,System.Func{System.IServiceProvider,System.Threading.Tasks.Task},System.Boolean)
  isExtensionMethod: true
  parent: Hybrid.Dependency.ServiceProviderExtensions
  langs:
  - csharp
  - vb
  name: ExecuteScopedWorkAsync(IServiceProvider, Func<IServiceProvider, Task>, Boolean)
  nameWithType: ServiceProviderExtensions.ExecuteScopedWorkAsync(IServiceProvider, Func<IServiceProvider, Task>, Boolean)
  fullName: Hybrid.Dependency.ServiceProviderExtensions.ExecuteScopedWorkAsync(System.IServiceProvider, System.Func<System.IServiceProvider, System.Threading.Tasks.Task>, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Hybrid/Dependency/ServiceProviderExtensions.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: ExecuteScopedWorkAsync
    path: ../src/Hybrid/Dependency/ServiceProviderExtensions.cs
    startLine: 45
  assemblies:
  - Hybrid
  namespace: Hybrid.Dependency
  summary: "\n异步执行<xref href=\"Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped\" data-throw-if-not-resolved=\"false\"></xref>生命周期的业务逻辑\n1.当前处理<xref href=\"Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped\" data-throw-if-not-resolved=\"false\"></xref>生命周期外，使用CreateScope创建<xref href=\"Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped\" data-throw-if-not-resolved=\"false\"></xref>\n生命周期的ServiceProvider来执行，并释放资源\n2.当前处于<xref href=\"Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped\" data-throw-if-not-resolved=\"false\"></xref>生命周期内，直接使用<xref href=\"Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped\" data-throw-if-not-resolved=\"false\"></xref>的ServiceProvider来执行\n"
  example: []
  syntax:
    content: public static Task ExecuteScopedWorkAsync(this IServiceProvider provider, Func<IServiceProvider, Task> action, bool useHttpScope = true)
    parameters:
    - id: provider
      type: System.IServiceProvider
    - id: action
      type: System.Func{System.IServiceProvider,System.Threading.Tasks.Task}
    - id: useHttpScope
      type: System.Boolean
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ExecuteScopedWorkAsync(provider As IServiceProvider, action As Func(Of IServiceProvider, Task), useHttpScope As Boolean = True) As Task
  overload: Hybrid.Dependency.ServiceProviderExtensions.ExecuteScopedWorkAsync*
  nameWithType.vb: ServiceProviderExtensions.ExecuteScopedWorkAsync(IServiceProvider, Func(Of IServiceProvider, Task), Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Hybrid.Dependency.ServiceProviderExtensions.ExecuteScopedWorkAsync(System.IServiceProvider, System.Func(Of System.IServiceProvider, System.Threading.Tasks.Task), System.Boolean)
  name.vb: ExecuteScopedWorkAsync(IServiceProvider, Func(Of IServiceProvider, Task), Boolean)
- uid: Hybrid.Dependency.ServiceProviderExtensions.ExecuteScopedWork``1(System.IServiceProvider,System.Func{System.IServiceProvider,``0},System.Boolean)
  commentId: M:Hybrid.Dependency.ServiceProviderExtensions.ExecuteScopedWork``1(System.IServiceProvider,System.Func{System.IServiceProvider,``0},System.Boolean)
  id: ExecuteScopedWork``1(System.IServiceProvider,System.Func{System.IServiceProvider,``0},System.Boolean)
  isExtensionMethod: true
  parent: Hybrid.Dependency.ServiceProviderExtensions
  langs:
  - csharp
  - vb
  name: ExecuteScopedWork<TResult>(IServiceProvider, Func<IServiceProvider, TResult>, Boolean)
  nameWithType: ServiceProviderExtensions.ExecuteScopedWork<TResult>(IServiceProvider, Func<IServiceProvider, TResult>, Boolean)
  fullName: Hybrid.Dependency.ServiceProviderExtensions.ExecuteScopedWork<TResult>(System.IServiceProvider, System.Func<System.IServiceProvider, TResult>, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Hybrid/Dependency/ServiceProviderExtensions.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: ExecuteScopedWork
    path: ../src/Hybrid/Dependency/ServiceProviderExtensions.cs
    startLine: 61
  assemblies:
  - Hybrid
  namespace: Hybrid.Dependency
  summary: "\n执行<xref href=\"Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped\" data-throw-if-not-resolved=\"false\"></xref>生命周期的业务逻辑，并获取返回值\n1.当前处理<xref href=\"Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped\" data-throw-if-not-resolved=\"false\"></xref>生命周期外，使用CreateScope创建<xref href=\"Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped\" data-throw-if-not-resolved=\"false\"></xref>\n生命周期的ServiceProvider来执行，并释放资源\n2.当前处于<xref href=\"Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped\" data-throw-if-not-resolved=\"false\"></xref>生命周期内，直接使用<xref href=\"Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped\" data-throw-if-not-resolved=\"false\"></xref>的ServiceProvider来执行\n"
  example: []
  syntax:
    content: public static TResult ExecuteScopedWork<TResult>(this IServiceProvider provider, Func<IServiceProvider, TResult> func, bool useHttpScope = true)
    parameters:
    - id: provider
      type: System.IServiceProvider
    - id: func
      type: System.Func{System.IServiceProvider,{TResult}}
    - id: useHttpScope
      type: System.Boolean
    typeParameters:
    - id: TResult
    return:
      type: '{TResult}'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ExecuteScopedWork(Of TResult)(provider As IServiceProvider, func As Func(Of IServiceProvider, TResult), useHttpScope As Boolean = True) As TResult
  overload: Hybrid.Dependency.ServiceProviderExtensions.ExecuteScopedWork*
  nameWithType.vb: ServiceProviderExtensions.ExecuteScopedWork(Of TResult)(IServiceProvider, Func(Of IServiceProvider, TResult), Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Hybrid.Dependency.ServiceProviderExtensions.ExecuteScopedWork(Of TResult)(System.IServiceProvider, System.Func(Of System.IServiceProvider, TResult), System.Boolean)
  name.vb: ExecuteScopedWork(Of TResult)(IServiceProvider, Func(Of IServiceProvider, TResult), Boolean)
- uid: Hybrid.Dependency.ServiceProviderExtensions.ExecuteScopedWorkAsync``1(System.IServiceProvider,System.Func{System.IServiceProvider,System.Threading.Tasks.Task{``0}},System.Boolean)
  commentId: M:Hybrid.Dependency.ServiceProviderExtensions.ExecuteScopedWorkAsync``1(System.IServiceProvider,System.Func{System.IServiceProvider,System.Threading.Tasks.Task{``0}},System.Boolean)
  id: ExecuteScopedWorkAsync``1(System.IServiceProvider,System.Func{System.IServiceProvider,System.Threading.Tasks.Task{``0}},System.Boolean)
  isExtensionMethod: true
  parent: Hybrid.Dependency.ServiceProviderExtensions
  langs:
  - csharp
  - vb
  name: ExecuteScopedWorkAsync<TResult>(IServiceProvider, Func<IServiceProvider, Task<TResult>>, Boolean)
  nameWithType: ServiceProviderExtensions.ExecuteScopedWorkAsync<TResult>(IServiceProvider, Func<IServiceProvider, Task<TResult>>, Boolean)
  fullName: Hybrid.Dependency.ServiceProviderExtensions.ExecuteScopedWorkAsync<TResult>(System.IServiceProvider, System.Func<System.IServiceProvider, System.Threading.Tasks.Task<TResult>>, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Hybrid/Dependency/ServiceProviderExtensions.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: ExecuteScopedWorkAsync
    path: ../src/Hybrid/Dependency/ServiceProviderExtensions.cs
    startLine: 77
  assemblies:
  - Hybrid
  namespace: Hybrid.Dependency
  summary: "\n执行<xref href=\"Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped\" data-throw-if-not-resolved=\"false\"></xref>生命周期的业务逻辑，并获取返回值\n1.当前处理<xref href=\"Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped\" data-throw-if-not-resolved=\"false\"></xref>生命周期外，使用CreateScope创建<xref href=\"Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped\" data-throw-if-not-resolved=\"false\"></xref>\n生命周期的ServiceProvider来执行，并释放资源\n2.当前处于<xref href=\"Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped\" data-throw-if-not-resolved=\"false\"></xref>生命周期内，直接使用<xref href=\"Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped\" data-throw-if-not-resolved=\"false\"></xref>的ServiceProvider来执行\n"
  example: []
  syntax:
    content: public static Task<TResult> ExecuteScopedWorkAsync<TResult>(this IServiceProvider provider, Func<IServiceProvider, Task<TResult>> func, bool useHttpScope = true)
    parameters:
    - id: provider
      type: System.IServiceProvider
    - id: func
      type: System.Func{System.IServiceProvider,System.Threading.Tasks.Task{{TResult}}}
    - id: useHttpScope
      type: System.Boolean
    typeParameters:
    - id: TResult
    return:
      type: System.Threading.Tasks.Task{{TResult}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ExecuteScopedWorkAsync(Of TResult)(provider As IServiceProvider, func As Func(Of IServiceProvider, Task(Of TResult)), useHttpScope As Boolean = True) As Task(Of TResult)
  overload: Hybrid.Dependency.ServiceProviderExtensions.ExecuteScopedWorkAsync*
  nameWithType.vb: ServiceProviderExtensions.ExecuteScopedWorkAsync(Of TResult)(IServiceProvider, Func(Of IServiceProvider, Task(Of TResult)), Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Hybrid.Dependency.ServiceProviderExtensions.ExecuteScopedWorkAsync(Of TResult)(System.IServiceProvider, System.Func(Of System.IServiceProvider, System.Threading.Tasks.Task(Of TResult)), System.Boolean)
  name.vb: ExecuteScopedWorkAsync(Of TResult)(IServiceProvider, Func(Of IServiceProvider, Task(Of TResult)), Boolean)
- uid: Hybrid.Dependency.ServiceProviderExtensions.GetCurrentUser(System.IServiceProvider)
  commentId: M:Hybrid.Dependency.ServiceProviderExtensions.GetCurrentUser(System.IServiceProvider)
  id: GetCurrentUser(System.IServiceProvider)
  isExtensionMethod: true
  parent: Hybrid.Dependency.ServiceProviderExtensions
  langs:
  - csharp
  - vb
  name: GetCurrentUser(IServiceProvider)
  nameWithType: ServiceProviderExtensions.GetCurrentUser(IServiceProvider)
  fullName: Hybrid.Dependency.ServiceProviderExtensions.GetCurrentUser(System.IServiceProvider)
  type: Method
  source:
    remote:
      path: src/Hybrid/Dependency/ServiceProviderExtensions.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: GetCurrentUser
    path: ../src/Hybrid/Dependency/ServiceProviderExtensions.cs
    startLine: 90
  assemblies:
  - Hybrid
  namespace: Hybrid.Dependency
  summary: "\n获取当前用户\n"
  example: []
  syntax:
    content: public static ClaimsPrincipal GetCurrentUser(this IServiceProvider provider)
    parameters:
    - id: provider
      type: System.IServiceProvider
    return:
      type: System.Security.Claims.ClaimsPrincipal
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetCurrentUser(provider As IServiceProvider) As ClaimsPrincipal
  overload: Hybrid.Dependency.ServiceProviderExtensions.GetCurrentUser*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: System.IServiceProvider
  commentId: T:System.IServiceProvider
  parent: System
  isExternal: true
  name: IServiceProvider
  nameWithType: IServiceProvider
  fullName: System.IServiceProvider
- uid: Hybrid.Dependency
  commentId: N:Hybrid.Dependency
  name: Hybrid.Dependency
  nameWithType: Hybrid.Dependency
  fullName: Hybrid.Dependency
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped
  commentId: F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped
  isExternal: true
- uid: Hybrid.Dependency.ServiceProviderExtensions.ExecuteScopedWork*
  commentId: Overload:Hybrid.Dependency.ServiceProviderExtensions.ExecuteScopedWork
  name: ExecuteScopedWork
  nameWithType: ServiceProviderExtensions.ExecuteScopedWork
  fullName: Hybrid.Dependency.ServiceProviderExtensions.ExecuteScopedWork
- uid: System.Action{System.IServiceProvider}
  commentId: T:System.Action{System.IServiceProvider}
  parent: System
  definition: System.Action`1
  name: Action<IServiceProvider>
  nameWithType: Action<IServiceProvider>
  fullName: System.Action<System.IServiceProvider>
  nameWithType.vb: Action(Of IServiceProvider)
  fullName.vb: System.Action(Of System.IServiceProvider)
  name.vb: Action(Of IServiceProvider)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IServiceProvider
    name: IServiceProvider
    nameWithType: IServiceProvider
    fullName: System.IServiceProvider
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.IServiceProvider
    name: IServiceProvider
    nameWithType: IServiceProvider
    fullName: System.IServiceProvider
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Dependency.ServiceProviderExtensions.ExecuteScopedWorkAsync*
  commentId: Overload:Hybrid.Dependency.ServiceProviderExtensions.ExecuteScopedWorkAsync
  name: ExecuteScopedWorkAsync
  nameWithType: ServiceProviderExtensions.ExecuteScopedWorkAsync
  fullName: Hybrid.Dependency.ServiceProviderExtensions.ExecuteScopedWorkAsync
- uid: System.Func{System.IServiceProvider,System.Threading.Tasks.Task}
  commentId: T:System.Func{System.IServiceProvider,System.Threading.Tasks.Task}
  parent: System
  definition: System.Func`2
  name: Func<IServiceProvider, Task>
  nameWithType: Func<IServiceProvider, Task>
  fullName: System.Func<System.IServiceProvider, System.Threading.Tasks.Task>
  nameWithType.vb: Func(Of IServiceProvider, Task)
  fullName.vb: System.Func(Of System.IServiceProvider, System.Threading.Tasks.Task)
  name.vb: Func(Of IServiceProvider, Task)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IServiceProvider
    name: IServiceProvider
    nameWithType: IServiceProvider
    fullName: System.IServiceProvider
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.IServiceProvider
    name: IServiceProvider
    nameWithType: IServiceProvider
    fullName: System.IServiceProvider
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.Func{System.IServiceProvider,{TResult}}
  commentId: T:System.Func{System.IServiceProvider,``0}
  parent: System
  definition: System.Func`2
  name: Func<IServiceProvider, TResult>
  nameWithType: Func<IServiceProvider, TResult>
  fullName: System.Func<System.IServiceProvider, TResult>
  nameWithType.vb: Func(Of IServiceProvider, TResult)
  fullName.vb: System.Func(Of System.IServiceProvider, TResult)
  name.vb: Func(Of IServiceProvider, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IServiceProvider
    name: IServiceProvider
    nameWithType: IServiceProvider
    fullName: System.IServiceProvider
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.IServiceProvider
    name: IServiceProvider
    nameWithType: IServiceProvider
    fullName: System.IServiceProvider
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TResult}'
  commentId: '!:TResult'
  definition: TResult
  name: TResult
  nameWithType: TResult
  fullName: TResult
- uid: TResult
  name: TResult
  nameWithType: TResult
  fullName: TResult
- uid: System.Func{System.IServiceProvider,System.Threading.Tasks.Task{{TResult}}}
  commentId: T:System.Func{System.IServiceProvider,System.Threading.Tasks.Task{``0}}
  parent: System
  definition: System.Func`2
  name: Func<IServiceProvider, Task<TResult>>
  nameWithType: Func<IServiceProvider, Task<TResult>>
  fullName: System.Func<System.IServiceProvider, System.Threading.Tasks.Task<TResult>>
  nameWithType.vb: Func(Of IServiceProvider, Task(Of TResult))
  fullName.vb: System.Func(Of System.IServiceProvider, System.Threading.Tasks.Task(Of TResult))
  name.vb: Func(Of IServiceProvider, Task(Of TResult))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IServiceProvider
    name: IServiceProvider
    nameWithType: IServiceProvider
    fullName: System.IServiceProvider
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.IServiceProvider
    name: IServiceProvider
    nameWithType: IServiceProvider
    fullName: System.IServiceProvider
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{{TResult}}
  commentId: T:System.Threading.Tasks.Task{``0}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Dependency.ServiceProviderExtensions.GetCurrentUser*
  commentId: Overload:Hybrid.Dependency.ServiceProviderExtensions.GetCurrentUser
  name: GetCurrentUser
  nameWithType: ServiceProviderExtensions.GetCurrentUser
  fullName: Hybrid.Dependency.ServiceProviderExtensions.GetCurrentUser
- uid: System.Security.Claims.ClaimsPrincipal
  commentId: T:System.Security.Claims.ClaimsPrincipal
  parent: System.Security.Claims
  isExternal: true
  name: ClaimsPrincipal
  nameWithType: ClaimsPrincipal
  fullName: System.Security.Claims.ClaimsPrincipal
- uid: System.Security.Claims
  commentId: N:System.Security.Claims
  isExternal: true
  name: System.Security.Claims
  nameWithType: System.Security.Claims
  fullName: System.Security.Claims
