### YamlMime:ManagedReference
items:
- uid: Hybrid.Zero.Authorization.IEntityRoleStore`3
  commentId: T:Hybrid.Zero.Authorization.IEntityRoleStore`3
  id: IEntityRoleStore`3
  parent: Hybrid.Zero.Authorization
  children:
  - Hybrid.Zero.Authorization.IEntityRoleStore`3.CheckEntityRoleExists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Guid)
  - Hybrid.Zero.Authorization.IEntityRoleStore`3.CreateEntityRoles(`1[])
  - Hybrid.Zero.Authorization.IEntityRoleStore`3.DeleteEntityRoles(System.Guid[])
  - Hybrid.Zero.Authorization.IEntityRoleStore`3.EntityRoles
  - Hybrid.Zero.Authorization.IEntityRoleStore`3.GetEntityRoleFilterGroups(`2,System.Guid,Hybrid.Authorization.DataAuthOperation)
  - Hybrid.Zero.Authorization.IEntityRoleStore`3.UpdateEntityRoles(`1[])
  langs:
  - csharp
  - vb
  name: IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>
  nameWithType: IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>
  fullName: Hybrid.Zero.Authorization.IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>
  type: Interface
  source:
    remote:
      path: src/Hybrid.Zero/Authorization/IEntityRoleStore.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: IEntityRoleStore
    path: ../src/Hybrid.Zero/Authorization/IEntityRoleStore.cs
    startLine: 24
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Zero.Authorization
  summary: "\n定义实体角色信息存储\n"
  example: []
  syntax:
    content: public interface IEntityRoleStore<TEntityRole, in TEntityRoleInputDto, in TRoleKey>
    typeParameters:
    - id: TEntityRole
    - id: TEntityRoleInputDto
    - id: TRoleKey
    content.vb: Public Interface IEntityRoleStore(Of TEntityRole, In TEntityRoleInputDto, In TRoleKey)
  extensionMethods:
  - System.Object.Hybrid.Extensions.ObjectExtensions.CastTo(System.Type)
  - System.Object.Hybrid.Extensions.ObjectExtensions.CastTo``1
  - System.Object.Hybrid.Extensions.ObjectExtensions.CastTo``1({T})
  - Hybrid.Zero.Authorization.IEntityRoleStore`3.Hybrid.Extensions.ObjectExtensions.IsIn``1(Hybrid.Zero.Authorization.IEntityRoleStore{{TEntityRole},{TEntityRoleInputDto},{TRoleKey}}[])
  - System.Object.Hybrid.Extensions.ObjectExtensions.ToDynamic
  - Hybrid.Zero.Authorization.IEntityRoleStore`3.Hybrid.Extensions.ObjectExtensions.DeepClone``1
  - Hybrid.Zero.Authorization.IEntityRoleStore`3.Hybrid.Extensions.ParameterCheckExtensions.Required``1(System.Func{Hybrid.Zero.Authorization.IEntityRoleStore{{TEntityRole},{TEntityRoleInputDto},{TRoleKey}},System.Boolean},System.String)
  - Hybrid.Zero.Authorization.IEntityRoleStore`3.Hybrid.Extensions.ParameterCheckExtensions.Required``2(System.Func{Hybrid.Zero.Authorization.IEntityRoleStore{{TEntityRole},{TEntityRoleInputDto},{TRoleKey}},System.Boolean},System.String)
  - Hybrid.Zero.Authorization.IEntityRoleStore`3.Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(System.String)
  - Hybrid.Zero.Authorization.IEntityRoleStore`3.Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{Hybrid.Zero.Authorization.IEntityRoleStore{{TEntityRole},{TEntityRoleInputDto},{TRoleKey}}},System.Action{System.Exception},System.Action{Hybrid.Zero.Authorization.IEntityRoleStore{{TEntityRole},{TEntityRoleInputDto},{TRoleKey}}})
  - Hybrid.Zero.Authorization.IEntityRoleStore`3.Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{Hybrid.Zero.Authorization.IEntityRoleStore{{TEntityRole},{TEntityRoleInputDto},{TRoleKey}}},System.Action{System.Exception})
  - Hybrid.Zero.Authorization.IEntityRoleStore`3.Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{Hybrid.Zero.Authorization.IEntityRoleStore{{TEntityRole},{TEntityRoleInputDto},{TRoleKey}},{TResult}},System.Action{System.Exception},System.Action{Hybrid.Zero.Authorization.IEntityRoleStore{{TEntityRole},{TEntityRoleInputDto},{TRoleKey}}})
  - Hybrid.Zero.Authorization.IEntityRoleStore`3.Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{Hybrid.Zero.Authorization.IEntityRoleStore{{TEntityRole},{TEntityRoleInputDto},{TRoleKey}},{TResult}},System.Action{System.Exception})
  - Hybrid.Zero.Authorization.IEntityRoleStore`3.Hybrid.Extensions.TryCatchExtensions.TryFinally``1(System.Action{Hybrid.Zero.Authorization.IEntityRoleStore{{TEntityRole},{TEntityRoleInputDto},{TRoleKey}}},System.Action{Hybrid.Zero.Authorization.IEntityRoleStore{{TEntityRole},{TEntityRoleInputDto},{TRoleKey}}})
  - System.Object.Hybrid.Json.JsonExtensions.ToJsonString(System.Boolean,System.Boolean)
  - System.Object.Hybrid.Mapping.MapperExtensions.MapTo``1
  - Hybrid.Zero.Authorization.IEntityRoleStore`3.Hybrid.Mapping.MapperExtensions.MapTo``2({TTarget})
  - System.Object.Hybrid.Reflection.LockExtensions.Locking(System.Action)
  - Hybrid.Zero.Authorization.IEntityRoleStore`3.Hybrid.Reflection.LockExtensions.Locking``1(System.Action{Hybrid.Zero.Authorization.IEntityRoleStore{{TEntityRole},{TEntityRoleInputDto},{TRoleKey}}})
  - System.Object.Hybrid.Reflection.LockExtensions.Locking``1(System.Func{{TResult}})
  - Hybrid.Zero.Authorization.IEntityRoleStore`3.Hybrid.Reflection.LockExtensions.Locking``2(System.Func{Hybrid.Zero.Authorization.IEntityRoleStore{{TEntityRole},{TEntityRoleInputDto},{TRoleKey}},{TResult}})
  - Hybrid.Zero.Authorization.IEntityRoleStore`3.Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2
  - Hybrid.Zero.Authorization.IEntityRoleStore`3.Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(System.Security.Principal.IPrincipal)
  - Hybrid.Zero.Authorization.IEntityRoleStore`3.Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(System.Security.Principal.IPrincipal)
  nameWithType.vb: IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
  fullName.vb: Hybrid.Zero.Authorization.IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey)
  name.vb: IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey)
- uid: Hybrid.Zero.Authorization.IEntityRoleStore`3.EntityRoles
  commentId: P:Hybrid.Zero.Authorization.IEntityRoleStore`3.EntityRoles
  id: EntityRoles
  parent: Hybrid.Zero.Authorization.IEntityRoleStore`3
  langs:
  - csharp
  - vb
  name: EntityRoles
  nameWithType: IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>.EntityRoles
  fullName: Hybrid.Zero.Authorization.IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>.EntityRoles
  type: Property
  source:
    remote:
      path: src/Hybrid.Zero/Authorization/IEntityRoleStore.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: EntityRoles
    path: ../src/Hybrid.Zero/Authorization/IEntityRoleStore.cs
    startLine: 31
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Zero.Authorization
  summary: "\n获取 实体角色信息查询数据集\n"
  example: []
  syntax:
    content: IQueryable<TEntityRole> EntityRoles { get; }
    parameters: []
    return:
      type: System.Linq.IQueryable{{TEntityRole}}
    content.vb: ReadOnly Property EntityRoles As IQueryable(Of TEntityRole)
  overload: Hybrid.Zero.Authorization.IEntityRoleStore`3.EntityRoles*
  nameWithType.vb: IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey).EntityRoles
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: Hybrid.Zero.Authorization.IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey).EntityRoles
- uid: Hybrid.Zero.Authorization.IEntityRoleStore`3.CheckEntityRoleExists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Guid)
  commentId: M:Hybrid.Zero.Authorization.IEntityRoleStore`3.CheckEntityRoleExists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Guid)
  id: CheckEntityRoleExists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Guid)
  parent: Hybrid.Zero.Authorization.IEntityRoleStore`3
  langs:
  - csharp
  - vb
  name: CheckEntityRoleExists(Expression<Func<TEntityRole, Boolean>>, Guid)
  nameWithType: IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>.CheckEntityRoleExists(Expression<Func<TEntityRole, Boolean>>, Guid)
  fullName: Hybrid.Zero.Authorization.IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>.CheckEntityRoleExists(System.Linq.Expressions.Expression<System.Func<TEntityRole, System.Boolean>>, System.Guid)
  type: Method
  source:
    remote:
      path: src/Hybrid.Zero/Authorization/IEntityRoleStore.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: CheckEntityRoleExists
    path: ../src/Hybrid.Zero/Authorization/IEntityRoleStore.cs
    startLine: 39
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Zero.Authorization
  summary: "\n检查实体角色信息是否存在\n"
  example: []
  syntax:
    content: Task<bool> CheckEntityRoleExists(Expression<Func<TEntityRole, bool>> predicate, Guid id = default(Guid))
    parameters:
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TEntityRole},System.Boolean}}
      description: 检查谓语表达式
    - id: id
      type: System.Guid
      description: 更新的实体角色信息编号
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: 实体角色信息是否存在
    content.vb: Function CheckEntityRoleExists(predicate As Expression(Of Func(Of TEntityRole, Boolean)), id As Guid = Nothing) As Task(Of Boolean)
  overload: Hybrid.Zero.Authorization.IEntityRoleStore`3.CheckEntityRoleExists*
  nameWithType.vb: IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey).CheckEntityRoleExists(Expression(Of Func(Of TEntityRole, Boolean)), Guid)
  fullName.vb: Hybrid.Zero.Authorization.IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey).CheckEntityRoleExists(System.Linq.Expressions.Expression(Of System.Func(Of TEntityRole, System.Boolean)), System.Guid)
  name.vb: CheckEntityRoleExists(Expression(Of Func(Of TEntityRole, Boolean)), Guid)
- uid: Hybrid.Zero.Authorization.IEntityRoleStore`3.GetEntityRoleFilterGroups(`2,System.Guid,Hybrid.Authorization.DataAuthOperation)
  commentId: M:Hybrid.Zero.Authorization.IEntityRoleStore`3.GetEntityRoleFilterGroups(`2,System.Guid,Hybrid.Authorization.DataAuthOperation)
  id: GetEntityRoleFilterGroups(`2,System.Guid,Hybrid.Authorization.DataAuthOperation)
  parent: Hybrid.Zero.Authorization.IEntityRoleStore`3
  langs:
  - csharp
  - vb
  name: GetEntityRoleFilterGroups(TRoleKey, Guid, DataAuthOperation)
  nameWithType: IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>.GetEntityRoleFilterGroups(TRoleKey, Guid, DataAuthOperation)
  fullName: Hybrid.Zero.Authorization.IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>.GetEntityRoleFilterGroups(TRoleKey, System.Guid, Hybrid.Authorization.DataAuthOperation)
  type: Method
  source:
    remote:
      path: src/Hybrid.Zero/Authorization/IEntityRoleStore.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: GetEntityRoleFilterGroups
    path: ../src/Hybrid.Zero/Authorization/IEntityRoleStore.cs
    startLine: 48
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Zero.Authorization
  summary: "\n获取指定角色和实体的过滤条件组\n"
  example: []
  syntax:
    content: FilterGroup[] GetEntityRoleFilterGroups(TRoleKey roleId, Guid entityId, DataAuthOperation operation)
    parameters:
    - id: roleId
      type: '{TRoleKey}'
      description: 角色编号
    - id: entityId
      type: System.Guid
      description: 实体编号
    - id: operation
      type: Hybrid.Authorization.DataAuthOperation
      description: 操作
    return:
      type: Hybrid.Filter.FilterGroup[]
      description: 过滤条件组
    content.vb: Function GetEntityRoleFilterGroups(roleId As TRoleKey, entityId As Guid, operation As DataAuthOperation) As FilterGroup()
  overload: Hybrid.Zero.Authorization.IEntityRoleStore`3.GetEntityRoleFilterGroups*
  nameWithType.vb: IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey).GetEntityRoleFilterGroups(TRoleKey, Guid, DataAuthOperation)
  fullName.vb: Hybrid.Zero.Authorization.IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey).GetEntityRoleFilterGroups(TRoleKey, System.Guid, Hybrid.Authorization.DataAuthOperation)
- uid: Hybrid.Zero.Authorization.IEntityRoleStore`3.CreateEntityRoles(`1[])
  commentId: M:Hybrid.Zero.Authorization.IEntityRoleStore`3.CreateEntityRoles(`1[])
  id: CreateEntityRoles(`1[])
  parent: Hybrid.Zero.Authorization.IEntityRoleStore`3
  langs:
  - csharp
  - vb
  name: CreateEntityRoles(TEntityRoleInputDto[])
  nameWithType: IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>.CreateEntityRoles(TEntityRoleInputDto[])
  fullName: Hybrid.Zero.Authorization.IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>.CreateEntityRoles(TEntityRoleInputDto[])
  type: Method
  source:
    remote:
      path: src/Hybrid.Zero/Authorization/IEntityRoleStore.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: CreateEntityRoles
    path: ../src/Hybrid.Zero/Authorization/IEntityRoleStore.cs
    startLine: 55
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Zero.Authorization
  summary: "\n添加实体角色信息\n"
  example: []
  syntax:
    content: Task<OperationResult> CreateEntityRoles(params TEntityRoleInputDto[] dtos)
    parameters:
    - id: dtos
      type: '{TEntityRoleInputDto}[]'
      description: 要添加的实体角色信息DTO信息
    return:
      type: System.Threading.Tasks.Task{Hybrid.Data.OperationResult}
      description: 业务操作结果
    content.vb: Function CreateEntityRoles(ParamArray dtos As TEntityRoleInputDto()) As Task(Of OperationResult)
  overload: Hybrid.Zero.Authorization.IEntityRoleStore`3.CreateEntityRoles*
  nameWithType.vb: IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey).CreateEntityRoles(TEntityRoleInputDto())
  fullName.vb: Hybrid.Zero.Authorization.IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey).CreateEntityRoles(TEntityRoleInputDto())
  name.vb: CreateEntityRoles(TEntityRoleInputDto())
- uid: Hybrid.Zero.Authorization.IEntityRoleStore`3.UpdateEntityRoles(`1[])
  commentId: M:Hybrid.Zero.Authorization.IEntityRoleStore`3.UpdateEntityRoles(`1[])
  id: UpdateEntityRoles(`1[])
  parent: Hybrid.Zero.Authorization.IEntityRoleStore`3
  langs:
  - csharp
  - vb
  name: UpdateEntityRoles(TEntityRoleInputDto[])
  nameWithType: IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>.UpdateEntityRoles(TEntityRoleInputDto[])
  fullName: Hybrid.Zero.Authorization.IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>.UpdateEntityRoles(TEntityRoleInputDto[])
  type: Method
  source:
    remote:
      path: src/Hybrid.Zero/Authorization/IEntityRoleStore.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: UpdateEntityRoles
    path: ../src/Hybrid.Zero/Authorization/IEntityRoleStore.cs
    startLine: 62
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Zero.Authorization
  summary: "\n更新实体角色信息\n"
  example: []
  syntax:
    content: Task<OperationResult> UpdateEntityRoles(params TEntityRoleInputDto[] dtos)
    parameters:
    - id: dtos
      type: '{TEntityRoleInputDto}[]'
      description: 包含更新信息的实体角色信息DTO信息
    return:
      type: System.Threading.Tasks.Task{Hybrid.Data.OperationResult}
      description: 业务操作结果
    content.vb: Function UpdateEntityRoles(ParamArray dtos As TEntityRoleInputDto()) As Task(Of OperationResult)
  overload: Hybrid.Zero.Authorization.IEntityRoleStore`3.UpdateEntityRoles*
  nameWithType.vb: IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey).UpdateEntityRoles(TEntityRoleInputDto())
  fullName.vb: Hybrid.Zero.Authorization.IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey).UpdateEntityRoles(TEntityRoleInputDto())
  name.vb: UpdateEntityRoles(TEntityRoleInputDto())
- uid: Hybrid.Zero.Authorization.IEntityRoleStore`3.DeleteEntityRoles(System.Guid[])
  commentId: M:Hybrid.Zero.Authorization.IEntityRoleStore`3.DeleteEntityRoles(System.Guid[])
  id: DeleteEntityRoles(System.Guid[])
  parent: Hybrid.Zero.Authorization.IEntityRoleStore`3
  langs:
  - csharp
  - vb
  name: DeleteEntityRoles(Guid[])
  nameWithType: IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>.DeleteEntityRoles(Guid[])
  fullName: Hybrid.Zero.Authorization.IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>.DeleteEntityRoles(System.Guid[])
  type: Method
  source:
    remote:
      path: src/Hybrid.Zero/Authorization/IEntityRoleStore.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: DeleteEntityRoles
    path: ../src/Hybrid.Zero/Authorization/IEntityRoleStore.cs
    startLine: 69
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Zero.Authorization
  summary: "\n删除实体角色信息\n"
  example: []
  syntax:
    content: Task<OperationResult> DeleteEntityRoles(params Guid[] ids)
    parameters:
    - id: ids
      type: System.Guid[]
      description: 要删除的实体角色信息编号
    return:
      type: System.Threading.Tasks.Task{Hybrid.Data.OperationResult}
      description: 业务操作结果
    content.vb: Function DeleteEntityRoles(ParamArray ids As Guid()) As Task(Of OperationResult)
  overload: Hybrid.Zero.Authorization.IEntityRoleStore`3.DeleteEntityRoles*
  nameWithType.vb: IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey).DeleteEntityRoles(Guid())
  fullName.vb: Hybrid.Zero.Authorization.IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey).DeleteEntityRoles(System.Guid())
  name.vb: DeleteEntityRoles(Guid())
references:
- uid: Hybrid.Zero.Authorization
  commentId: N:Hybrid.Zero.Authorization
  name: Hybrid.Zero.Authorization
  nameWithType: Hybrid.Zero.Authorization
  fullName: Hybrid.Zero.Authorization
- uid: System.Object.Hybrid.Extensions.ObjectExtensions.CastTo(System.Type)
  commentId: M:Hybrid.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
  parent: Hybrid.Extensions.ObjectExtensions
  definition: Hybrid.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
  name: CastTo(Type)
  nameWithType: ObjectExtensions.CastTo(Type)
  fullName: Hybrid.Extensions.ObjectExtensions.CastTo(System.Type)
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo(System.Type)
    name: CastTo
    nameWithType: ObjectExtensions.CastTo
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo(System.Type)
    name: CastTo
    nameWithType: ObjectExtensions.CastTo
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Extensions.ObjectExtensions.CastTo``1
  commentId: M:Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object)
  parent: Hybrid.Extensions.ObjectExtensions
  definition: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object)
  name: CastTo<T>()
  nameWithType: ObjectExtensions.CastTo<T>()
  fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>()
  nameWithType.vb: ObjectExtensions.CastTo(Of T)()
  fullName.vb: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)()
  name.vb: CastTo(Of T)()
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1
    name: CastTo<T>
    nameWithType: ObjectExtensions.CastTo<T>
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1
    name: CastTo(Of T)
    nameWithType: ObjectExtensions.CastTo(Of T)
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Extensions.ObjectExtensions.CastTo``1({T})
  commentId: M:Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
  parent: Hybrid.Extensions.ObjectExtensions
  definition: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
  name: CastTo<T>(T)
  nameWithType: ObjectExtensions.CastTo<T>(T)
  fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>(T)
  nameWithType.vb: ObjectExtensions.CastTo(Of T)(T)
  fullName.vb: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)(T)
  name.vb: CastTo(Of T)(T)
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(``0)
    name: CastTo<T>
    nameWithType: ObjectExtensions.CastTo<T>
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(``0)
    name: CastTo(Of T)
    nameWithType: ObjectExtensions.CastTo(Of T)
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Authorization.IEntityRoleStore`3.Hybrid.Extensions.ObjectExtensions.IsIn``1(Hybrid.Zero.Authorization.IEntityRoleStore{{TEntityRole},{TEntityRoleInputDto},{TRoleKey}}[])
  commentId: M:Hybrid.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
  parent: Hybrid.Extensions.ObjectExtensions
  definition: Hybrid.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
  name: IsIn<IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>>(IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>[])
  nameWithType: ObjectExtensions.IsIn<IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>>(IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>[])
  fullName: Hybrid.Extensions.ObjectExtensions.IsIn<Hybrid.Zero.Authorization.IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>>(Hybrid.Zero.Authorization.IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>[])
  nameWithType.vb: ObjectExtensions.IsIn(Of IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey))(IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey)())
  fullName.vb: Hybrid.Extensions.ObjectExtensions.IsIn(Of Hybrid.Zero.Authorization.IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey))(Hybrid.Zero.Authorization.IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey)())
  name.vb: IsIn(Of IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey))(IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey)())
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.IsIn``1(``0[])
    name: IsIn<IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>>
    nameWithType: ObjectExtensions.IsIn<IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>>
    fullName: Hybrid.Extensions.ObjectExtensions.IsIn<Hybrid.Zero.Authorization.IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Hybrid.Zero.Authorization.IEntityRoleStore`3
    name: IEntityRoleStore
    nameWithType: IEntityRoleStore
    fullName: Hybrid.Zero.Authorization.IEntityRoleStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntityRole
    nameWithType: TEntityRole
    fullName: TEntityRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityRoleInputDto
    nameWithType: TEntityRoleInputDto
    fullName: TEntityRoleInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.IsIn``1(``0[])
    name: IsIn(Of IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey))
    nameWithType: ObjectExtensions.IsIn(Of IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey))
    fullName: Hybrid.Extensions.ObjectExtensions.IsIn(Of Hybrid.Zero.Authorization.IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey))
  - name: (
    nameWithType: (
    fullName: (
  - uid: Hybrid.Zero.Authorization.IEntityRoleStore`3
    name: IEntityRoleStore
    nameWithType: IEntityRoleStore
    fullName: Hybrid.Zero.Authorization.IEntityRoleStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntityRole
    nameWithType: TEntityRole
    fullName: TEntityRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityRoleInputDto
    nameWithType: TEntityRoleInputDto
    fullName: TEntityRoleInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Extensions.ObjectExtensions.ToDynamic
  commentId: M:Hybrid.Extensions.ObjectExtensions.ToDynamic(System.Object)
  parent: Hybrid.Extensions.ObjectExtensions
  definition: Hybrid.Extensions.ObjectExtensions.ToDynamic(System.Object)
  name: ToDynamic()
  nameWithType: ObjectExtensions.ToDynamic()
  fullName: Hybrid.Extensions.ObjectExtensions.ToDynamic()
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.ToDynamic
    name: ToDynamic
    nameWithType: ObjectExtensions.ToDynamic
    fullName: Hybrid.Extensions.ObjectExtensions.ToDynamic
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.ToDynamic
    name: ToDynamic
    nameWithType: ObjectExtensions.ToDynamic
    fullName: Hybrid.Extensions.ObjectExtensions.ToDynamic
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Authorization.IEntityRoleStore`3.Hybrid.Extensions.ObjectExtensions.DeepClone``1
  commentId: M:Hybrid.Extensions.ObjectExtensions.DeepClone``1(``0)
  parent: Hybrid.Extensions.ObjectExtensions
  definition: Hybrid.Extensions.ObjectExtensions.DeepClone``1(``0)
  name: DeepClone<IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>>()
  nameWithType: ObjectExtensions.DeepClone<IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>>()
  fullName: Hybrid.Extensions.ObjectExtensions.DeepClone<Hybrid.Zero.Authorization.IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>>()
  nameWithType.vb: ObjectExtensions.DeepClone(Of IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey))()
  fullName.vb: Hybrid.Extensions.ObjectExtensions.DeepClone(Of Hybrid.Zero.Authorization.IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey))()
  name.vb: DeepClone(Of IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey))()
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.DeepClone``1
    name: DeepClone<IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>>
    nameWithType: ObjectExtensions.DeepClone<IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>>
    fullName: Hybrid.Extensions.ObjectExtensions.DeepClone<Hybrid.Zero.Authorization.IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.DeepClone``1
    name: DeepClone(Of IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey))
    nameWithType: ObjectExtensions.DeepClone(Of IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey))
    fullName: Hybrid.Extensions.ObjectExtensions.DeepClone(Of Hybrid.Zero.Authorization.IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey))
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Authorization.IEntityRoleStore`3.Hybrid.Extensions.ParameterCheckExtensions.Required``1(System.Func{Hybrid.Zero.Authorization.IEntityRoleStore{{TEntityRole},{TEntityRoleInputDto},{TRoleKey}},System.Boolean},System.String)
  commentId: M:Hybrid.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
  parent: Hybrid.Extensions.ParameterCheckExtensions
  definition: Hybrid.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
  name: Required<IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>>(Func<IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>, Boolean>, String)
  nameWithType: ParameterCheckExtensions.Required<IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>>(Func<IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>, Boolean>, String)
  fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<Hybrid.Zero.Authorization.IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>>(System.Func<Hybrid.Zero.Authorization.IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>, System.Boolean>, System.String)
  nameWithType.vb: ParameterCheckExtensions.Required(Of IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey))(Func(Of IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey), Boolean), String)
  fullName.vb: Hybrid.Extensions.ParameterCheckExtensions.Required(Of Hybrid.Zero.Authorization.IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey))(System.Func(Of Hybrid.Zero.Authorization.IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey), System.Boolean), System.String)
  name.vb: Required(Of IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey))(Func(Of IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey), Boolean), String)
  spec.csharp:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``1(System.Func{``0,System.Boolean},System.String)
    name: Required<IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>>
    nameWithType: ParameterCheckExtensions.Required<IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>>
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<Hybrid.Zero.Authorization.IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Zero.Authorization.IEntityRoleStore`3
    name: IEntityRoleStore
    nameWithType: IEntityRoleStore
    fullName: Hybrid.Zero.Authorization.IEntityRoleStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntityRole
    nameWithType: TEntityRole
    fullName: TEntityRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityRoleInputDto
    nameWithType: TEntityRoleInputDto
    fullName: TEntityRoleInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``1(System.Func{``0,System.Boolean},System.String)
    name: Required(Of IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey))
    nameWithType: ParameterCheckExtensions.Required(Of IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey))
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required(Of Hybrid.Zero.Authorization.IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey))
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Zero.Authorization.IEntityRoleStore`3
    name: IEntityRoleStore
    nameWithType: IEntityRoleStore
    fullName: Hybrid.Zero.Authorization.IEntityRoleStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntityRole
    nameWithType: TEntityRole
    fullName: TEntityRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityRoleInputDto
    nameWithType: TEntityRoleInputDto
    fullName: TEntityRoleInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Authorization.IEntityRoleStore`3.Hybrid.Extensions.ParameterCheckExtensions.Required``2(System.Func{Hybrid.Zero.Authorization.IEntityRoleStore{{TEntityRole},{TEntityRoleInputDto},{TRoleKey}},System.Boolean},System.String)
  commentId: M:Hybrid.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
  parent: Hybrid.Extensions.ParameterCheckExtensions
  definition: Hybrid.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
  name: Required<IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>, TException>(Func<IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>, Boolean>, String)
  nameWithType: ParameterCheckExtensions.Required<IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>, TException>(Func<IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>, Boolean>, String)
  fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<Hybrid.Zero.Authorization.IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>, TException>(System.Func<Hybrid.Zero.Authorization.IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>, System.Boolean>, System.String)
  nameWithType.vb: ParameterCheckExtensions.Required(Of IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey), TException)(Func(Of IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey), Boolean), String)
  fullName.vb: Hybrid.Extensions.ParameterCheckExtensions.Required(Of Hybrid.Zero.Authorization.IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey), TException)(System.Func(Of Hybrid.Zero.Authorization.IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey), System.Boolean), System.String)
  name.vb: Required(Of IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey), TException)(Func(Of IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey), Boolean), String)
  spec.csharp:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``2(System.Func{``0,System.Boolean},System.String)
    name: Required<IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>, TException>
    nameWithType: ParameterCheckExtensions.Required<IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>, TException>
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<Hybrid.Zero.Authorization.IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>, TException>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Zero.Authorization.IEntityRoleStore`3
    name: IEntityRoleStore
    nameWithType: IEntityRoleStore
    fullName: Hybrid.Zero.Authorization.IEntityRoleStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntityRole
    nameWithType: TEntityRole
    fullName: TEntityRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityRoleInputDto
    nameWithType: TEntityRoleInputDto
    fullName: TEntityRoleInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``2(System.Func{``0,System.Boolean},System.String)
    name: Required(Of IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey), TException)
    nameWithType: ParameterCheckExtensions.Required(Of IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey), TException)
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required(Of Hybrid.Zero.Authorization.IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey), TException)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Zero.Authorization.IEntityRoleStore`3
    name: IEntityRoleStore
    nameWithType: IEntityRoleStore
    fullName: Hybrid.Zero.Authorization.IEntityRoleStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntityRole
    nameWithType: TEntityRole
    fullName: TEntityRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityRoleInputDto
    nameWithType: TEntityRoleInputDto
    fullName: TEntityRoleInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Authorization.IEntityRoleStore`3.Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(System.String)
  commentId: M:Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
  parent: Hybrid.Extensions.ParameterCheckExtensions
  definition: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
  name: CheckNotNull<IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>>(String)
  nameWithType: ParameterCheckExtensions.CheckNotNull<IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>>(String)
  fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull<Hybrid.Zero.Authorization.IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>>(System.String)
  nameWithType.vb: ParameterCheckExtensions.CheckNotNull(Of IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey))(String)
  fullName.vb: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull(Of Hybrid.Zero.Authorization.IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey))(System.String)
  name.vb: CheckNotNull(Of IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey))(String)
  spec.csharp:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(System.String)
    name: CheckNotNull<IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>>
    nameWithType: ParameterCheckExtensions.CheckNotNull<IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>>
    fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull<Hybrid.Zero.Authorization.IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(System.String)
    name: CheckNotNull(Of IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey))
    nameWithType: ParameterCheckExtensions.CheckNotNull(Of IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey))
    fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull(Of Hybrid.Zero.Authorization.IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey))
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Authorization.IEntityRoleStore`3.Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{Hybrid.Zero.Authorization.IEntityRoleStore{{TEntityRole},{TEntityRoleInputDto},{TRoleKey}}},System.Action{System.Exception},System.Action{Hybrid.Zero.Authorization.IEntityRoleStore{{TEntityRole},{TEntityRoleInputDto},{TRoleKey}}})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
  parent: Hybrid.Extensions.TryCatchExtensions
  definition: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
  name: TryCatch<IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>>(Action<IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>>, Action<Exception>, Action<IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>>)
  nameWithType: TryCatchExtensions.TryCatch<IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>>(Action<IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>>, Action<Exception>, Action<IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.Zero.Authorization.IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>>(System.Action<Hybrid.Zero.Authorization.IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>>, System.Action<System.Exception>, System.Action<Hybrid.Zero.Authorization.IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey))(Action(Of IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey)), Action(Of Exception), Action(Of IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey)))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.Zero.Authorization.IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey))(System.Action(Of Hybrid.Zero.Authorization.IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey)), System.Action(Of System.Exception), System.Action(Of Hybrid.Zero.Authorization.IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey)))
  name.vb: TryCatch(Of IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey))(Action(Of IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey)), Action(Of Exception), Action(Of IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey)))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{``0},System.Action{System.Exception},System.Action{``0})
    name: TryCatch<IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>>
    nameWithType: TryCatchExtensions.TryCatch<IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.Zero.Authorization.IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Zero.Authorization.IEntityRoleStore`3
    name: IEntityRoleStore
    nameWithType: IEntityRoleStore
    fullName: Hybrid.Zero.Authorization.IEntityRoleStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntityRole
    nameWithType: TEntityRole
    fullName: TEntityRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityRoleInputDto
    nameWithType: TEntityRoleInputDto
    fullName: TEntityRoleInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Zero.Authorization.IEntityRoleStore`3
    name: IEntityRoleStore
    nameWithType: IEntityRoleStore
    fullName: Hybrid.Zero.Authorization.IEntityRoleStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntityRole
    nameWithType: TEntityRole
    fullName: TEntityRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityRoleInputDto
    nameWithType: TEntityRoleInputDto
    fullName: TEntityRoleInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{``0},System.Action{System.Exception},System.Action{``0})
    name: TryCatch(Of IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey))
    nameWithType: TryCatchExtensions.TryCatch(Of IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey))
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.Zero.Authorization.IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey))
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Zero.Authorization.IEntityRoleStore`3
    name: IEntityRoleStore
    nameWithType: IEntityRoleStore
    fullName: Hybrid.Zero.Authorization.IEntityRoleStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntityRole
    nameWithType: TEntityRole
    fullName: TEntityRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityRoleInputDto
    nameWithType: TEntityRoleInputDto
    fullName: TEntityRoleInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Zero.Authorization.IEntityRoleStore`3
    name: IEntityRoleStore
    nameWithType: IEntityRoleStore
    fullName: Hybrid.Zero.Authorization.IEntityRoleStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntityRole
    nameWithType: TEntityRole
    fullName: TEntityRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityRoleInputDto
    nameWithType: TEntityRoleInputDto
    fullName: TEntityRoleInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Authorization.IEntityRoleStore`3.Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{Hybrid.Zero.Authorization.IEntityRoleStore{{TEntityRole},{TEntityRoleInputDto},{TRoleKey}}},System.Action{System.Exception})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
  parent: Hybrid.Extensions.TryCatchExtensions
  definition: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
  name: TryCatch<IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>>(Action<IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>>, Action<Exception>)
  nameWithType: TryCatchExtensions.TryCatch<IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>>(Action<IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>>, Action<Exception>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.Zero.Authorization.IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>>(System.Action<Hybrid.Zero.Authorization.IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>>, System.Action<System.Exception>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey))(Action(Of IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey)), Action(Of Exception))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.Zero.Authorization.IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey))(System.Action(Of Hybrid.Zero.Authorization.IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey)), System.Action(Of System.Exception))
  name.vb: TryCatch(Of IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey))(Action(Of IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey)), Action(Of Exception))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{``0},System.Action{System.Exception})
    name: TryCatch<IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>>
    nameWithType: TryCatchExtensions.TryCatch<IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.Zero.Authorization.IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Zero.Authorization.IEntityRoleStore`3
    name: IEntityRoleStore
    nameWithType: IEntityRoleStore
    fullName: Hybrid.Zero.Authorization.IEntityRoleStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntityRole
    nameWithType: TEntityRole
    fullName: TEntityRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityRoleInputDto
    nameWithType: TEntityRoleInputDto
    fullName: TEntityRoleInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{``0},System.Action{System.Exception})
    name: TryCatch(Of IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey))
    nameWithType: TryCatchExtensions.TryCatch(Of IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey))
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.Zero.Authorization.IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey))
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Zero.Authorization.IEntityRoleStore`3
    name: IEntityRoleStore
    nameWithType: IEntityRoleStore
    fullName: Hybrid.Zero.Authorization.IEntityRoleStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntityRole
    nameWithType: TEntityRole
    fullName: TEntityRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityRoleInputDto
    nameWithType: TEntityRoleInputDto
    fullName: TEntityRoleInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Authorization.IEntityRoleStore`3.Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{Hybrid.Zero.Authorization.IEntityRoleStore{{TEntityRole},{TEntityRoleInputDto},{TRoleKey}},{TResult}},System.Action{System.Exception},System.Action{Hybrid.Zero.Authorization.IEntityRoleStore{{TEntityRole},{TEntityRoleInputDto},{TRoleKey}}})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
  parent: Hybrid.Extensions.TryCatchExtensions
  definition: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
  name: TryCatch<IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>, TResult>(Func<IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>, TResult>, Action<Exception>, Action<IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>>)
  nameWithType: TryCatchExtensions.TryCatch<IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>, TResult>(Func<IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>, TResult>, Action<Exception>, Action<IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.Zero.Authorization.IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>, TResult>(System.Func<Hybrid.Zero.Authorization.IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>, TResult>, System.Action<System.Exception>, System.Action<Hybrid.Zero.Authorization.IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey), TResult)(Func(Of IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey), TResult), Action(Of Exception), Action(Of IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey)))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.Zero.Authorization.IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey), TResult)(System.Func(Of Hybrid.Zero.Authorization.IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey), TResult), System.Action(Of System.Exception), System.Action(Of Hybrid.Zero.Authorization.IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey)))
  name.vb: TryCatch(Of IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey), TResult)(Func(Of IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey), TResult), Action(Of Exception), Action(Of IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey)))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
    name: TryCatch<IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>, TResult>
    nameWithType: TryCatchExtensions.TryCatch<IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>, TResult>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.Zero.Authorization.IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Zero.Authorization.IEntityRoleStore`3
    name: IEntityRoleStore
    nameWithType: IEntityRoleStore
    fullName: Hybrid.Zero.Authorization.IEntityRoleStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntityRole
    nameWithType: TEntityRole
    fullName: TEntityRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityRoleInputDto
    nameWithType: TEntityRoleInputDto
    fullName: TEntityRoleInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Zero.Authorization.IEntityRoleStore`3
    name: IEntityRoleStore
    nameWithType: IEntityRoleStore
    fullName: Hybrid.Zero.Authorization.IEntityRoleStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntityRole
    nameWithType: TEntityRole
    fullName: TEntityRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityRoleInputDto
    nameWithType: TEntityRoleInputDto
    fullName: TEntityRoleInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
    name: TryCatch(Of IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey), TResult)
    nameWithType: TryCatchExtensions.TryCatch(Of IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey), TResult)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.Zero.Authorization.IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey), TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Zero.Authorization.IEntityRoleStore`3
    name: IEntityRoleStore
    nameWithType: IEntityRoleStore
    fullName: Hybrid.Zero.Authorization.IEntityRoleStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntityRole
    nameWithType: TEntityRole
    fullName: TEntityRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityRoleInputDto
    nameWithType: TEntityRoleInputDto
    fullName: TEntityRoleInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Zero.Authorization.IEntityRoleStore`3
    name: IEntityRoleStore
    nameWithType: IEntityRoleStore
    fullName: Hybrid.Zero.Authorization.IEntityRoleStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntityRole
    nameWithType: TEntityRole
    fullName: TEntityRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityRoleInputDto
    nameWithType: TEntityRoleInputDto
    fullName: TEntityRoleInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Authorization.IEntityRoleStore`3.Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{Hybrid.Zero.Authorization.IEntityRoleStore{{TEntityRole},{TEntityRoleInputDto},{TRoleKey}},{TResult}},System.Action{System.Exception})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
  parent: Hybrid.Extensions.TryCatchExtensions
  definition: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
  name: TryCatch<IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>, TResult>(Func<IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>, TResult>, Action<Exception>)
  nameWithType: TryCatchExtensions.TryCatch<IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>, TResult>(Func<IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>, TResult>, Action<Exception>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.Zero.Authorization.IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>, TResult>(System.Func<Hybrid.Zero.Authorization.IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>, TResult>, System.Action<System.Exception>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey), TResult)(Func(Of IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey), TResult), Action(Of Exception))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.Zero.Authorization.IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey), TResult)(System.Func(Of Hybrid.Zero.Authorization.IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey), TResult), System.Action(Of System.Exception))
  name.vb: TryCatch(Of IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey), TResult)(Func(Of IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey), TResult), Action(Of Exception))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{``0,``1},System.Action{System.Exception})
    name: TryCatch<IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>, TResult>
    nameWithType: TryCatchExtensions.TryCatch<IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>, TResult>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.Zero.Authorization.IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Zero.Authorization.IEntityRoleStore`3
    name: IEntityRoleStore
    nameWithType: IEntityRoleStore
    fullName: Hybrid.Zero.Authorization.IEntityRoleStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntityRole
    nameWithType: TEntityRole
    fullName: TEntityRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityRoleInputDto
    nameWithType: TEntityRoleInputDto
    fullName: TEntityRoleInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{``0,``1},System.Action{System.Exception})
    name: TryCatch(Of IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey), TResult)
    nameWithType: TryCatchExtensions.TryCatch(Of IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey), TResult)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.Zero.Authorization.IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey), TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Zero.Authorization.IEntityRoleStore`3
    name: IEntityRoleStore
    nameWithType: IEntityRoleStore
    fullName: Hybrid.Zero.Authorization.IEntityRoleStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntityRole
    nameWithType: TEntityRole
    fullName: TEntityRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityRoleInputDto
    nameWithType: TEntityRoleInputDto
    fullName: TEntityRoleInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Authorization.IEntityRoleStore`3.Hybrid.Extensions.TryCatchExtensions.TryFinally``1(System.Action{Hybrid.Zero.Authorization.IEntityRoleStore{{TEntityRole},{TEntityRoleInputDto},{TRoleKey}}},System.Action{Hybrid.Zero.Authorization.IEntityRoleStore{{TEntityRole},{TEntityRoleInputDto},{TRoleKey}}})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
  parent: Hybrid.Extensions.TryCatchExtensions
  definition: Hybrid.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
  name: TryFinally<IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>>(Action<IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>>, Action<IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>>)
  nameWithType: TryCatchExtensions.TryFinally<IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>>(Action<IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>>, Action<IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryFinally<Hybrid.Zero.Authorization.IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>>(System.Action<Hybrid.Zero.Authorization.IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>>, System.Action<Hybrid.Zero.Authorization.IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>>)
  nameWithType.vb: TryCatchExtensions.TryFinally(Of IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey))(Action(Of IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey)), Action(Of IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey)))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryFinally(Of Hybrid.Zero.Authorization.IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey))(System.Action(Of Hybrid.Zero.Authorization.IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey)), System.Action(Of Hybrid.Zero.Authorization.IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey)))
  name.vb: TryFinally(Of IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey))(Action(Of IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey)), Action(Of IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey)))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryFinally``1(System.Action{``0},System.Action{``0})
    name: TryFinally<IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>>
    nameWithType: TryCatchExtensions.TryFinally<IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryFinally<Hybrid.Zero.Authorization.IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Zero.Authorization.IEntityRoleStore`3
    name: IEntityRoleStore
    nameWithType: IEntityRoleStore
    fullName: Hybrid.Zero.Authorization.IEntityRoleStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntityRole
    nameWithType: TEntityRole
    fullName: TEntityRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityRoleInputDto
    nameWithType: TEntityRoleInputDto
    fullName: TEntityRoleInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Zero.Authorization.IEntityRoleStore`3
    name: IEntityRoleStore
    nameWithType: IEntityRoleStore
    fullName: Hybrid.Zero.Authorization.IEntityRoleStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntityRole
    nameWithType: TEntityRole
    fullName: TEntityRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityRoleInputDto
    nameWithType: TEntityRoleInputDto
    fullName: TEntityRoleInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryFinally``1(System.Action{``0},System.Action{``0})
    name: TryFinally(Of IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey))
    nameWithType: TryCatchExtensions.TryFinally(Of IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey))
    fullName: Hybrid.Extensions.TryCatchExtensions.TryFinally(Of Hybrid.Zero.Authorization.IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey))
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Zero.Authorization.IEntityRoleStore`3
    name: IEntityRoleStore
    nameWithType: IEntityRoleStore
    fullName: Hybrid.Zero.Authorization.IEntityRoleStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntityRole
    nameWithType: TEntityRole
    fullName: TEntityRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityRoleInputDto
    nameWithType: TEntityRoleInputDto
    fullName: TEntityRoleInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Zero.Authorization.IEntityRoleStore`3
    name: IEntityRoleStore
    nameWithType: IEntityRoleStore
    fullName: Hybrid.Zero.Authorization.IEntityRoleStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntityRole
    nameWithType: TEntityRole
    fullName: TEntityRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityRoleInputDto
    nameWithType: TEntityRoleInputDto
    fullName: TEntityRoleInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Json.JsonExtensions.ToJsonString(System.Boolean,System.Boolean)
  commentId: M:Hybrid.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
  parent: Hybrid.Json.JsonExtensions
  definition: Hybrid.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
  name: ToJsonString(Boolean, Boolean)
  nameWithType: JsonExtensions.ToJsonString(Boolean, Boolean)
  fullName: Hybrid.Json.JsonExtensions.ToJsonString(System.Boolean, System.Boolean)
  spec.csharp:
  - uid: Hybrid.Json.JsonExtensions.ToJsonString(System.Boolean,System.Boolean)
    name: ToJsonString
    nameWithType: JsonExtensions.ToJsonString
    fullName: Hybrid.Json.JsonExtensions.ToJsonString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Json.JsonExtensions.ToJsonString(System.Boolean,System.Boolean)
    name: ToJsonString
    nameWithType: JsonExtensions.ToJsonString
    fullName: Hybrid.Json.JsonExtensions.ToJsonString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Mapping.MapperExtensions.MapTo``1
  commentId: M:Hybrid.Mapping.MapperExtensions.MapTo``1(System.Object)
  parent: Hybrid.Mapping.MapperExtensions
  definition: Hybrid.Mapping.MapperExtensions.MapTo``1(System.Object)
  name: MapTo<TTarget>()
  nameWithType: MapperExtensions.MapTo<TTarget>()
  fullName: Hybrid.Mapping.MapperExtensions.MapTo<TTarget>()
  nameWithType.vb: MapperExtensions.MapTo(Of TTarget)()
  fullName.vb: Hybrid.Mapping.MapperExtensions.MapTo(Of TTarget)()
  name.vb: MapTo(Of TTarget)()
  spec.csharp:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``1
    name: MapTo<TTarget>
    nameWithType: MapperExtensions.MapTo<TTarget>
    fullName: Hybrid.Mapping.MapperExtensions.MapTo<TTarget>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``1
    name: MapTo(Of TTarget)
    nameWithType: MapperExtensions.MapTo(Of TTarget)
    fullName: Hybrid.Mapping.MapperExtensions.MapTo(Of TTarget)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Authorization.IEntityRoleStore`3.Hybrid.Mapping.MapperExtensions.MapTo``2({TTarget})
  commentId: M:Hybrid.Mapping.MapperExtensions.MapTo``2(``0,``1)
  parent: Hybrid.Mapping.MapperExtensions
  definition: Hybrid.Mapping.MapperExtensions.MapTo``2(``0,``1)
  name: MapTo<IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>, TTarget>(TTarget)
  nameWithType: MapperExtensions.MapTo<IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>, TTarget>(TTarget)
  fullName: Hybrid.Mapping.MapperExtensions.MapTo<Hybrid.Zero.Authorization.IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>, TTarget>(TTarget)
  nameWithType.vb: MapperExtensions.MapTo(Of IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey), TTarget)(TTarget)
  fullName.vb: Hybrid.Mapping.MapperExtensions.MapTo(Of Hybrid.Zero.Authorization.IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey), TTarget)(TTarget)
  name.vb: MapTo(Of IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey), TTarget)(TTarget)
  spec.csharp:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``2(``1)
    name: MapTo<IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>, TTarget>
    nameWithType: MapperExtensions.MapTo<IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>, TTarget>
    fullName: Hybrid.Mapping.MapperExtensions.MapTo<Hybrid.Zero.Authorization.IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>, TTarget>
  - name: (
    nameWithType: (
    fullName: (
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``2(``1)
    name: MapTo(Of IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey), TTarget)
    nameWithType: MapperExtensions.MapTo(Of IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey), TTarget)
    fullName: Hybrid.Mapping.MapperExtensions.MapTo(Of Hybrid.Zero.Authorization.IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey), TTarget)
  - name: (
    nameWithType: (
    fullName: (
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Reflection.LockExtensions.Locking(System.Action)
  commentId: M:Hybrid.Reflection.LockExtensions.Locking(System.Object,System.Action)
  parent: Hybrid.Reflection.LockExtensions
  definition: Hybrid.Reflection.LockExtensions.Locking(System.Object,System.Action)
  name: Locking(Action)
  nameWithType: LockExtensions.Locking(Action)
  fullName: Hybrid.Reflection.LockExtensions.Locking(System.Action)
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking(System.Action)
    name: Locking
    nameWithType: LockExtensions.Locking
    fullName: Hybrid.Reflection.LockExtensions.Locking
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking(System.Action)
    name: Locking
    nameWithType: LockExtensions.Locking
    fullName: Hybrid.Reflection.LockExtensions.Locking
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Authorization.IEntityRoleStore`3.Hybrid.Reflection.LockExtensions.Locking``1(System.Action{Hybrid.Zero.Authorization.IEntityRoleStore{{TEntityRole},{TEntityRoleInputDto},{TRoleKey}}})
  commentId: M:Hybrid.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
  parent: Hybrid.Reflection.LockExtensions
  definition: Hybrid.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
  name: Locking<IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>>(Action<IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>>)
  nameWithType: LockExtensions.Locking<IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>>(Action<IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>>)
  fullName: Hybrid.Reflection.LockExtensions.Locking<Hybrid.Zero.Authorization.IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>>(System.Action<Hybrid.Zero.Authorization.IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>>)
  nameWithType.vb: LockExtensions.Locking(Of IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey))(Action(Of IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey)))
  fullName.vb: Hybrid.Reflection.LockExtensions.Locking(Of Hybrid.Zero.Authorization.IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey))(System.Action(Of Hybrid.Zero.Authorization.IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey)))
  name.vb: Locking(Of IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey))(Action(Of IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey)))
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(System.Action{``0})
    name: Locking<IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>>
    nameWithType: LockExtensions.Locking<IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>>
    fullName: Hybrid.Reflection.LockExtensions.Locking<Hybrid.Zero.Authorization.IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Zero.Authorization.IEntityRoleStore`3
    name: IEntityRoleStore
    nameWithType: IEntityRoleStore
    fullName: Hybrid.Zero.Authorization.IEntityRoleStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntityRole
    nameWithType: TEntityRole
    fullName: TEntityRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityRoleInputDto
    nameWithType: TEntityRoleInputDto
    fullName: TEntityRoleInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(System.Action{``0})
    name: Locking(Of IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey))
    nameWithType: LockExtensions.Locking(Of IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey))
    fullName: Hybrid.Reflection.LockExtensions.Locking(Of Hybrid.Zero.Authorization.IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey))
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Zero.Authorization.IEntityRoleStore`3
    name: IEntityRoleStore
    nameWithType: IEntityRoleStore
    fullName: Hybrid.Zero.Authorization.IEntityRoleStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntityRole
    nameWithType: TEntityRole
    fullName: TEntityRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityRoleInputDto
    nameWithType: TEntityRoleInputDto
    fullName: TEntityRoleInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Reflection.LockExtensions.Locking``1(System.Func{{TResult}})
  commentId: M:Hybrid.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
  parent: Hybrid.Reflection.LockExtensions
  definition: Hybrid.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
  name: Locking<TResult>(Func<TResult>)
  nameWithType: LockExtensions.Locking<TResult>(Func<TResult>)
  fullName: Hybrid.Reflection.LockExtensions.Locking<TResult>(System.Func<TResult>)
  nameWithType.vb: LockExtensions.Locking(Of TResult)(Func(Of TResult))
  fullName.vb: Hybrid.Reflection.LockExtensions.Locking(Of TResult)(System.Func(Of TResult))
  name.vb: Locking(Of TResult)(Func(Of TResult))
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(System.Func{``0})
    name: Locking<TResult>
    nameWithType: LockExtensions.Locking<TResult>
    fullName: Hybrid.Reflection.LockExtensions.Locking<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(System.Func{``0})
    name: Locking(Of TResult)
    nameWithType: LockExtensions.Locking(Of TResult)
    fullName: Hybrid.Reflection.LockExtensions.Locking(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Authorization.IEntityRoleStore`3.Hybrid.Reflection.LockExtensions.Locking``2(System.Func{Hybrid.Zero.Authorization.IEntityRoleStore{{TEntityRole},{TEntityRoleInputDto},{TRoleKey}},{TResult}})
  commentId: M:Hybrid.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
  parent: Hybrid.Reflection.LockExtensions
  definition: Hybrid.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
  name: Locking<IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>, TResult>(Func<IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>, TResult>)
  nameWithType: LockExtensions.Locking<IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>, TResult>(Func<IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>, TResult>)
  fullName: Hybrid.Reflection.LockExtensions.Locking<Hybrid.Zero.Authorization.IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>, TResult>(System.Func<Hybrid.Zero.Authorization.IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>, TResult>)
  nameWithType.vb: LockExtensions.Locking(Of IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey), TResult)(Func(Of IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey), TResult))
  fullName.vb: Hybrid.Reflection.LockExtensions.Locking(Of Hybrid.Zero.Authorization.IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey), TResult)(System.Func(Of Hybrid.Zero.Authorization.IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey), TResult))
  name.vb: Locking(Of IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey), TResult)(Func(Of IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey), TResult))
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking``2(System.Func{``0,``1})
    name: Locking<IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>, TResult>
    nameWithType: LockExtensions.Locking<IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>, TResult>
    fullName: Hybrid.Reflection.LockExtensions.Locking<Hybrid.Zero.Authorization.IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Zero.Authorization.IEntityRoleStore`3
    name: IEntityRoleStore
    nameWithType: IEntityRoleStore
    fullName: Hybrid.Zero.Authorization.IEntityRoleStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntityRole
    nameWithType: TEntityRole
    fullName: TEntityRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityRoleInputDto
    nameWithType: TEntityRoleInputDto
    fullName: TEntityRoleInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking``2(System.Func{``0,``1})
    name: Locking(Of IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey), TResult)
    nameWithType: LockExtensions.Locking(Of IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey), TResult)
    fullName: Hybrid.Reflection.LockExtensions.Locking(Of Hybrid.Zero.Authorization.IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey), TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Zero.Authorization.IEntityRoleStore`3
    name: IEntityRoleStore
    nameWithType: IEntityRoleStore
    fullName: Hybrid.Zero.Authorization.IEntityRoleStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntityRole
    nameWithType: TEntityRole
    fullName: TEntityRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityRoleInputDto
    nameWithType: TEntityRoleInputDto
    fullName: TEntityRoleInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Authorization.IEntityRoleStore`3.Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2
  commentId: M:Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2(``0)
  parent: Hybrid.Domain.Entities.EntityExtensions
  definition: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2(``0)
  name: CheckICreatedTime<IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>, TKey>()
  nameWithType: EntityExtensions.CheckICreatedTime<IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>, TKey>()
  fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime<Hybrid.Zero.Authorization.IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>, TKey>()
  nameWithType.vb: EntityExtensions.CheckICreatedTime(Of IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey), TKey)()
  fullName.vb: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime(Of Hybrid.Zero.Authorization.IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey), TKey)()
  name.vb: CheckICreatedTime(Of IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey), TKey)()
  spec.csharp:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2
    name: CheckICreatedTime<IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>, TKey>
    nameWithType: EntityExtensions.CheckICreatedTime<IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>, TKey>
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime<Hybrid.Zero.Authorization.IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2
    name: CheckICreatedTime(Of IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey), TKey)
    nameWithType: EntityExtensions.CheckICreatedTime(Of IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey), TKey)
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime(Of Hybrid.Zero.Authorization.IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey), TKey)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Authorization.IEntityRoleStore`3.Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(System.Security.Principal.IPrincipal)
  commentId: M:Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
  parent: Hybrid.Domain.Entities.EntityExtensions
  definition: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
  name: CheckICreationAudited<IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>, TKey, TUserKey>(IPrincipal)
  nameWithType: EntityExtensions.CheckICreationAudited<IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>, TKey, TUserKey>(IPrincipal)
  fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited<Hybrid.Zero.Authorization.IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>, TKey, TUserKey>(System.Security.Principal.IPrincipal)
  nameWithType.vb: EntityExtensions.CheckICreationAudited(Of IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey), TKey, TUserKey)(IPrincipal)
  fullName.vb: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited(Of Hybrid.Zero.Authorization.IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey), TKey, TUserKey)(System.Security.Principal.IPrincipal)
  name.vb: CheckICreationAudited(Of IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey), TKey, TUserKey)(IPrincipal)
  spec.csharp:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(System.Security.Principal.IPrincipal)
    name: CheckICreationAudited<IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>, TKey, TUserKey>
    nameWithType: EntityExtensions.CheckICreationAudited<IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>, TKey, TUserKey>
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited<Hybrid.Zero.Authorization.IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>, TKey, TUserKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(System.Security.Principal.IPrincipal)
    name: CheckICreationAudited(Of IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey), TKey, TUserKey)
    nameWithType: EntityExtensions.CheckICreationAudited(Of IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey), TKey, TUserKey)
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited(Of Hybrid.Zero.Authorization.IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey), TKey, TUserKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Authorization.IEntityRoleStore`3.Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(System.Security.Principal.IPrincipal)
  commentId: M:Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
  parent: Hybrid.Domain.Entities.EntityExtensions
  definition: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
  name: CheckIUpdateAudited<IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>, TKey, TUserKey>(IPrincipal)
  nameWithType: EntityExtensions.CheckIUpdateAudited<IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>, TKey, TUserKey>(IPrincipal)
  fullName: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited<Hybrid.Zero.Authorization.IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>, TKey, TUserKey>(System.Security.Principal.IPrincipal)
  nameWithType.vb: EntityExtensions.CheckIUpdateAudited(Of IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey), TKey, TUserKey)(IPrincipal)
  fullName.vb: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited(Of Hybrid.Zero.Authorization.IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey), TKey, TUserKey)(System.Security.Principal.IPrincipal)
  name.vb: CheckIUpdateAudited(Of IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey), TKey, TUserKey)(IPrincipal)
  spec.csharp:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(System.Security.Principal.IPrincipal)
    name: CheckIUpdateAudited<IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>, TKey, TUserKey>
    nameWithType: EntityExtensions.CheckIUpdateAudited<IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>, TKey, TUserKey>
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited<Hybrid.Zero.Authorization.IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>, TKey, TUserKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(System.Security.Principal.IPrincipal)
    name: CheckIUpdateAudited(Of IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey), TKey, TUserKey)
    nameWithType: EntityExtensions.CheckIUpdateAudited(Of IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey), TKey, TUserKey)
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited(Of Hybrid.Zero.Authorization.IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey), TKey, TUserKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
  commentId: M:Hybrid.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
  isExternal: true
  name: CastTo(Object, Type)
  nameWithType: ObjectExtensions.CastTo(Object, Type)
  fullName: Hybrid.Extensions.ObjectExtensions.CastTo(System.Object, System.Type)
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
    name: CastTo
    nameWithType: ObjectExtensions.CastTo
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
    name: CastTo
    nameWithType: ObjectExtensions.CastTo
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ObjectExtensions
  commentId: T:Hybrid.Extensions.ObjectExtensions
  parent: Hybrid.Extensions
  name: ObjectExtensions
  nameWithType: ObjectExtensions
  fullName: Hybrid.Extensions.ObjectExtensions
- uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object)
  commentId: M:Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object)
  isExternal: true
  name: CastTo<T>(Object)
  nameWithType: ObjectExtensions.CastTo<T>(Object)
  fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>(System.Object)
  nameWithType.vb: ObjectExtensions.CastTo(Of T)(Object)
  fullName.vb: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)(System.Object)
  name.vb: CastTo(Of T)(Object)
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object)
    name: CastTo<T>
    nameWithType: ObjectExtensions.CastTo<T>
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object)
    name: CastTo(Of T)
    nameWithType: ObjectExtensions.CastTo(Of T)
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
  commentId: M:Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
  isExternal: true
  name: CastTo<T>(Object, T)
  nameWithType: ObjectExtensions.CastTo<T>(Object, T)
  fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>(System.Object, T)
  nameWithType.vb: ObjectExtensions.CastTo(Of T)(Object, T)
  fullName.vb: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)(System.Object, T)
  name.vb: CastTo(Of T)(Object, T)
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
    name: CastTo<T>
    nameWithType: ObjectExtensions.CastTo<T>
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
    name: CastTo(Of T)
    nameWithType: ObjectExtensions.CastTo(Of T)
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
  commentId: M:Hybrid.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
  name: IsIn<T>(T, T[])
  nameWithType: ObjectExtensions.IsIn<T>(T, T[])
  fullName: Hybrid.Extensions.ObjectExtensions.IsIn<T>(T, T[])
  nameWithType.vb: ObjectExtensions.IsIn(Of T)(T, T())
  fullName.vb: Hybrid.Extensions.ObjectExtensions.IsIn(Of T)(T, T())
  name.vb: IsIn(Of T)(T, T())
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
    name: IsIn<T>
    nameWithType: ObjectExtensions.IsIn<T>
    fullName: Hybrid.Extensions.ObjectExtensions.IsIn<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
    name: IsIn(Of T)
    nameWithType: ObjectExtensions.IsIn(Of T)
    fullName: Hybrid.Extensions.ObjectExtensions.IsIn(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ObjectExtensions.ToDynamic(System.Object)
  commentId: M:Hybrid.Extensions.ObjectExtensions.ToDynamic(System.Object)
  isExternal: true
  name: ToDynamic(Object)
  nameWithType: ObjectExtensions.ToDynamic(Object)
  fullName: Hybrid.Extensions.ObjectExtensions.ToDynamic(System.Object)
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.ToDynamic(System.Object)
    name: ToDynamic
    nameWithType: ObjectExtensions.ToDynamic
    fullName: Hybrid.Extensions.ObjectExtensions.ToDynamic
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.ToDynamic(System.Object)
    name: ToDynamic
    nameWithType: ObjectExtensions.ToDynamic
    fullName: Hybrid.Extensions.ObjectExtensions.ToDynamic
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ObjectExtensions.DeepClone``1(``0)
  commentId: M:Hybrid.Extensions.ObjectExtensions.DeepClone``1(``0)
  name: DeepClone<T>(T)
  nameWithType: ObjectExtensions.DeepClone<T>(T)
  fullName: Hybrid.Extensions.ObjectExtensions.DeepClone<T>(T)
  nameWithType.vb: ObjectExtensions.DeepClone(Of T)(T)
  fullName.vb: Hybrid.Extensions.ObjectExtensions.DeepClone(Of T)(T)
  name.vb: DeepClone(Of T)(T)
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.DeepClone``1(``0)
    name: DeepClone<T>
    nameWithType: ObjectExtensions.DeepClone<T>
    fullName: Hybrid.Extensions.ObjectExtensions.DeepClone<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.DeepClone``1(``0)
    name: DeepClone(Of T)
    nameWithType: ObjectExtensions.DeepClone(Of T)
    fullName: Hybrid.Extensions.ObjectExtensions.DeepClone(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
  commentId: M:Hybrid.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
  isExternal: true
  name: Required<T>(T, Func<T, Boolean>, String)
  nameWithType: ParameterCheckExtensions.Required<T>(T, Func<T, Boolean>, String)
  fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<T>(T, System.Func<T, System.Boolean>, System.String)
  nameWithType.vb: ParameterCheckExtensions.Required(Of T)(T, Func(Of T, Boolean), String)
  fullName.vb: Hybrid.Extensions.ParameterCheckExtensions.Required(Of T)(T, System.Func(Of T, System.Boolean), System.String)
  name.vb: Required(Of T)(T, Func(Of T, Boolean), String)
  spec.csharp:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
    name: Required<T>
    nameWithType: ParameterCheckExtensions.Required<T>
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
    name: Required(Of T)
    nameWithType: ParameterCheckExtensions.Required(Of T)
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ParameterCheckExtensions
  commentId: T:Hybrid.Extensions.ParameterCheckExtensions
  parent: Hybrid.Extensions
  name: ParameterCheckExtensions
  nameWithType: ParameterCheckExtensions
  fullName: Hybrid.Extensions.ParameterCheckExtensions
- uid: Hybrid.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
  commentId: M:Hybrid.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
  isExternal: true
  name: Required<T, TException>(T, Func<T, Boolean>, String)
  nameWithType: ParameterCheckExtensions.Required<T, TException>(T, Func<T, Boolean>, String)
  fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<T, TException>(T, System.Func<T, System.Boolean>, System.String)
  nameWithType.vb: ParameterCheckExtensions.Required(Of T, TException)(T, Func(Of T, Boolean), String)
  fullName.vb: Hybrid.Extensions.ParameterCheckExtensions.Required(Of T, TException)(T, System.Func(Of T, System.Boolean), System.String)
  name.vb: Required(Of T, TException)(T, Func(Of T, Boolean), String)
  spec.csharp:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
    name: Required<T, TException>
    nameWithType: ParameterCheckExtensions.Required<T, TException>
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<T, TException>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
    name: Required(Of T, TException)
    nameWithType: ParameterCheckExtensions.Required(Of T, TException)
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required(Of T, TException)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
  commentId: M:Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
  isExternal: true
  name: CheckNotNull<T>(T, String)
  nameWithType: ParameterCheckExtensions.CheckNotNull<T>(T, String)
  fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull<T>(T, System.String)
  nameWithType.vb: ParameterCheckExtensions.CheckNotNull(Of T)(T, String)
  fullName.vb: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull(Of T)(T, System.String)
  name.vb: CheckNotNull(Of T)(T, String)
  spec.csharp:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
    name: CheckNotNull<T>
    nameWithType: ParameterCheckExtensions.CheckNotNull<T>
    fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
    name: CheckNotNull(Of T)
    nameWithType: ParameterCheckExtensions.CheckNotNull(Of T)
    fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
  isExternal: true
  name: TryCatch<T>(T, Action<T>, Action<Exception>, Action<T>)
  nameWithType: TryCatchExtensions.TryCatch<T>(T, Action<T>, Action<Exception>, Action<T>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T>(T, System.Action<T>, System.Action<System.Exception>, System.Action<T>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of T)(T, Action(Of T), Action(Of Exception), Action(Of T))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T)(T, System.Action(Of T), System.Action(Of System.Exception), System.Action(Of T))
  name.vb: TryCatch(Of T)(T, Action(Of T), Action(Of Exception), Action(Of T))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
    name: TryCatch<T>
    nameWithType: TryCatchExtensions.TryCatch<T>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
    name: TryCatch(Of T)
    nameWithType: TryCatchExtensions.TryCatch(Of T)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.TryCatchExtensions
  commentId: T:Hybrid.Extensions.TryCatchExtensions
  parent: Hybrid.Extensions
  name: TryCatchExtensions
  nameWithType: TryCatchExtensions
  fullName: Hybrid.Extensions.TryCatchExtensions
- uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
  isExternal: true
  name: TryCatch<T>(T, Action<T>, Action<Exception>)
  nameWithType: TryCatchExtensions.TryCatch<T>(T, Action<T>, Action<Exception>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T>(T, System.Action<T>, System.Action<System.Exception>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of T)(T, Action(Of T), Action(Of Exception))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T)(T, System.Action(Of T), System.Action(Of System.Exception))
  name.vb: TryCatch(Of T)(T, Action(Of T), Action(Of Exception))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
    name: TryCatch<T>
    nameWithType: TryCatchExtensions.TryCatch<T>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
    name: TryCatch(Of T)
    nameWithType: TryCatchExtensions.TryCatch(Of T)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
  isExternal: true
  name: TryCatch<T, TResult>(T, Func<T, TResult>, Action<Exception>, Action<T>)
  nameWithType: TryCatchExtensions.TryCatch<T, TResult>(T, Func<T, TResult>, Action<Exception>, Action<T>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T, TResult>(T, System.Func<T, TResult>, System.Action<System.Exception>, System.Action<T>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of T, TResult)(T, Func(Of T, TResult), Action(Of Exception), Action(Of T))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T, TResult)(T, System.Func(Of T, TResult), System.Action(Of System.Exception), System.Action(Of T))
  name.vb: TryCatch(Of T, TResult)(T, Func(Of T, TResult), Action(Of Exception), Action(Of T))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
    name: TryCatch<T, TResult>
    nameWithType: TryCatchExtensions.TryCatch<T, TResult>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
    name: TryCatch(Of T, TResult)
    nameWithType: TryCatchExtensions.TryCatch(Of T, TResult)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
  isExternal: true
  name: TryCatch<T, TResult>(T, Func<T, TResult>, Action<Exception>)
  nameWithType: TryCatchExtensions.TryCatch<T, TResult>(T, Func<T, TResult>, Action<Exception>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T, TResult>(T, System.Func<T, TResult>, System.Action<System.Exception>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of T, TResult)(T, Func(Of T, TResult), Action(Of Exception))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T, TResult)(T, System.Func(Of T, TResult), System.Action(Of System.Exception))
  name.vb: TryCatch(Of T, TResult)(T, Func(Of T, TResult), Action(Of Exception))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
    name: TryCatch<T, TResult>
    nameWithType: TryCatchExtensions.TryCatch<T, TResult>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
    name: TryCatch(Of T, TResult)
    nameWithType: TryCatchExtensions.TryCatch(Of T, TResult)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
  isExternal: true
  name: TryFinally<T>(T, Action<T>, Action<T>)
  nameWithType: TryCatchExtensions.TryFinally<T>(T, Action<T>, Action<T>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryFinally<T>(T, System.Action<T>, System.Action<T>)
  nameWithType.vb: TryCatchExtensions.TryFinally(Of T)(T, Action(Of T), Action(Of T))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryFinally(Of T)(T, System.Action(Of T), System.Action(Of T))
  name.vb: TryFinally(Of T)(T, Action(Of T), Action(Of T))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
    name: TryFinally<T>
    nameWithType: TryCatchExtensions.TryFinally<T>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryFinally<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
    name: TryFinally(Of T)
    nameWithType: TryCatchExtensions.TryFinally(Of T)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryFinally(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
  commentId: M:Hybrid.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
  isExternal: true
  name: ToJsonString(Object, Boolean, Boolean)
  nameWithType: JsonExtensions.ToJsonString(Object, Boolean, Boolean)
  fullName: Hybrid.Json.JsonExtensions.ToJsonString(System.Object, System.Boolean, System.Boolean)
  spec.csharp:
  - uid: Hybrid.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
    name: ToJsonString
    nameWithType: JsonExtensions.ToJsonString
    fullName: Hybrid.Json.JsonExtensions.ToJsonString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
    name: ToJsonString
    nameWithType: JsonExtensions.ToJsonString
    fullName: Hybrid.Json.JsonExtensions.ToJsonString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Json.JsonExtensions
  commentId: T:Hybrid.Json.JsonExtensions
  parent: Hybrid.Json
  name: JsonExtensions
  nameWithType: JsonExtensions
  fullName: Hybrid.Json.JsonExtensions
- uid: Hybrid.Mapping.MapperExtensions.MapTo``1(System.Object)
  commentId: M:Hybrid.Mapping.MapperExtensions.MapTo``1(System.Object)
  isExternal: true
  name: MapTo<TTarget>(Object)
  nameWithType: MapperExtensions.MapTo<TTarget>(Object)
  fullName: Hybrid.Mapping.MapperExtensions.MapTo<TTarget>(System.Object)
  nameWithType.vb: MapperExtensions.MapTo(Of TTarget)(Object)
  fullName.vb: Hybrid.Mapping.MapperExtensions.MapTo(Of TTarget)(System.Object)
  name.vb: MapTo(Of TTarget)(Object)
  spec.csharp:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``1(System.Object)
    name: MapTo<TTarget>
    nameWithType: MapperExtensions.MapTo<TTarget>
    fullName: Hybrid.Mapping.MapperExtensions.MapTo<TTarget>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``1(System.Object)
    name: MapTo(Of TTarget)
    nameWithType: MapperExtensions.MapTo(Of TTarget)
    fullName: Hybrid.Mapping.MapperExtensions.MapTo(Of TTarget)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Mapping.MapperExtensions
  commentId: T:Hybrid.Mapping.MapperExtensions
  parent: Hybrid.Mapping
  name: MapperExtensions
  nameWithType: MapperExtensions
  fullName: Hybrid.Mapping.MapperExtensions
- uid: Hybrid.Mapping.MapperExtensions.MapTo``2(``0,``1)
  commentId: M:Hybrid.Mapping.MapperExtensions.MapTo``2(``0,``1)
  name: MapTo<TSource, TTarget>(TSource, TTarget)
  nameWithType: MapperExtensions.MapTo<TSource, TTarget>(TSource, TTarget)
  fullName: Hybrid.Mapping.MapperExtensions.MapTo<TSource, TTarget>(TSource, TTarget)
  nameWithType.vb: MapperExtensions.MapTo(Of TSource, TTarget)(TSource, TTarget)
  fullName.vb: Hybrid.Mapping.MapperExtensions.MapTo(Of TSource, TTarget)(TSource, TTarget)
  name.vb: MapTo(Of TSource, TTarget)(TSource, TTarget)
  spec.csharp:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``2(``0,``1)
    name: MapTo<TSource, TTarget>
    nameWithType: MapperExtensions.MapTo<TSource, TTarget>
    fullName: Hybrid.Mapping.MapperExtensions.MapTo<TSource, TTarget>
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``2(``0,``1)
    name: MapTo(Of TSource, TTarget)
    nameWithType: MapperExtensions.MapTo(Of TSource, TTarget)
    fullName: Hybrid.Mapping.MapperExtensions.MapTo(Of TSource, TTarget)
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Reflection.LockExtensions.Locking(System.Object,System.Action)
  commentId: M:Hybrid.Reflection.LockExtensions.Locking(System.Object,System.Action)
  isExternal: true
  name: Locking(Object, Action)
  nameWithType: LockExtensions.Locking(Object, Action)
  fullName: Hybrid.Reflection.LockExtensions.Locking(System.Object, System.Action)
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking(System.Object,System.Action)
    name: Locking
    nameWithType: LockExtensions.Locking
    fullName: Hybrid.Reflection.LockExtensions.Locking
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking(System.Object,System.Action)
    name: Locking
    nameWithType: LockExtensions.Locking
    fullName: Hybrid.Reflection.LockExtensions.Locking
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Reflection.LockExtensions
  commentId: T:Hybrid.Reflection.LockExtensions
  parent: Hybrid.Reflection
  name: LockExtensions
  nameWithType: LockExtensions
  fullName: Hybrid.Reflection.LockExtensions
- uid: Hybrid.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
  commentId: M:Hybrid.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
  isExternal: true
  name: Locking<T>(T, Action<T>)
  nameWithType: LockExtensions.Locking<T>(T, Action<T>)
  fullName: Hybrid.Reflection.LockExtensions.Locking<T>(T, System.Action<T>)
  nameWithType.vb: LockExtensions.Locking(Of T)(T, Action(Of T))
  fullName.vb: Hybrid.Reflection.LockExtensions.Locking(Of T)(T, System.Action(Of T))
  name.vb: Locking(Of T)(T, Action(Of T))
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
    name: Locking<T>
    nameWithType: LockExtensions.Locking<T>
    fullName: Hybrid.Reflection.LockExtensions.Locking<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
    name: Locking(Of T)
    nameWithType: LockExtensions.Locking(Of T)
    fullName: Hybrid.Reflection.LockExtensions.Locking(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
  commentId: M:Hybrid.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
  isExternal: true
  name: Locking<TResult>(Object, Func<TResult>)
  nameWithType: LockExtensions.Locking<TResult>(Object, Func<TResult>)
  fullName: Hybrid.Reflection.LockExtensions.Locking<TResult>(System.Object, System.Func<TResult>)
  nameWithType.vb: LockExtensions.Locking(Of TResult)(Object, Func(Of TResult))
  fullName.vb: Hybrid.Reflection.LockExtensions.Locking(Of TResult)(System.Object, System.Func(Of TResult))
  name.vb: Locking(Of TResult)(Object, Func(Of TResult))
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
    name: Locking<TResult>
    nameWithType: LockExtensions.Locking<TResult>
    fullName: Hybrid.Reflection.LockExtensions.Locking<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
    name: Locking(Of TResult)
    nameWithType: LockExtensions.Locking(Of TResult)
    fullName: Hybrid.Reflection.LockExtensions.Locking(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
  commentId: M:Hybrid.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
  isExternal: true
  name: Locking<TSource, TResult>(TSource, Func<TSource, TResult>)
  nameWithType: LockExtensions.Locking<TSource, TResult>(TSource, Func<TSource, TResult>)
  fullName: Hybrid.Reflection.LockExtensions.Locking<TSource, TResult>(TSource, System.Func<TSource, TResult>)
  nameWithType.vb: LockExtensions.Locking(Of TSource, TResult)(TSource, Func(Of TSource, TResult))
  fullName.vb: Hybrid.Reflection.LockExtensions.Locking(Of TSource, TResult)(TSource, System.Func(Of TSource, TResult))
  name.vb: Locking(Of TSource, TResult)(TSource, Func(Of TSource, TResult))
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
    name: Locking<TSource, TResult>
    nameWithType: LockExtensions.Locking<TSource, TResult>
    fullName: Hybrid.Reflection.LockExtensions.Locking<TSource, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
    name: Locking(Of TSource, TResult)
    nameWithType: LockExtensions.Locking(Of TSource, TResult)
    fullName: Hybrid.Reflection.LockExtensions.Locking(Of TSource, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2(``0)
  commentId: M:Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2(``0)
  name: CheckICreatedTime<TEntity, TKey>(TEntity)
  nameWithType: EntityExtensions.CheckICreatedTime<TEntity, TKey>(TEntity)
  fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime<TEntity, TKey>(TEntity)
  nameWithType.vb: EntityExtensions.CheckICreatedTime(Of TEntity, TKey)(TEntity)
  fullName.vb: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime(Of TEntity, TKey)(TEntity)
  name.vb: CheckICreatedTime(Of TEntity, TKey)(TEntity)
  spec.csharp:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2(``0)
    name: CheckICreatedTime<TEntity, TKey>
    nameWithType: EntityExtensions.CheckICreatedTime<TEntity, TKey>
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime<TEntity, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2(``0)
    name: CheckICreatedTime(Of TEntity, TKey)
    nameWithType: EntityExtensions.CheckICreatedTime(Of TEntity, TKey)
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime(Of TEntity, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Domain.Entities.EntityExtensions
  commentId: T:Hybrid.Domain.Entities.EntityExtensions
  parent: Hybrid.Domain.Entities
  name: EntityExtensions
  nameWithType: EntityExtensions
  fullName: Hybrid.Domain.Entities.EntityExtensions
- uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
  commentId: M:Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
  isExternal: true
  name: CheckICreationAudited<TEntity, TKey, TUserKey>(TEntity, IPrincipal)
  nameWithType: EntityExtensions.CheckICreationAudited<TEntity, TKey, TUserKey>(TEntity, IPrincipal)
  fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited<TEntity, TKey, TUserKey>(TEntity, System.Security.Principal.IPrincipal)
  nameWithType.vb: EntityExtensions.CheckICreationAudited(Of TEntity, TKey, TUserKey)(TEntity, IPrincipal)
  fullName.vb: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited(Of TEntity, TKey, TUserKey)(TEntity, System.Security.Principal.IPrincipal)
  name.vb: CheckICreationAudited(Of TEntity, TKey, TUserKey)(TEntity, IPrincipal)
  spec.csharp:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
    name: CheckICreationAudited<TEntity, TKey, TUserKey>
    nameWithType: EntityExtensions.CheckICreationAudited<TEntity, TKey, TUserKey>
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited<TEntity, TKey, TUserKey>
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
    name: CheckICreationAudited(Of TEntity, TKey, TUserKey)
    nameWithType: EntityExtensions.CheckICreationAudited(Of TEntity, TKey, TUserKey)
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited(Of TEntity, TKey, TUserKey)
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
  commentId: M:Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
  isExternal: true
  name: CheckIUpdateAudited<TEntity, TKey, TUserKey>(TEntity, IPrincipal)
  nameWithType: EntityExtensions.CheckIUpdateAudited<TEntity, TKey, TUserKey>(TEntity, IPrincipal)
  fullName: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited<TEntity, TKey, TUserKey>(TEntity, System.Security.Principal.IPrincipal)
  nameWithType.vb: EntityExtensions.CheckIUpdateAudited(Of TEntity, TKey, TUserKey)(TEntity, IPrincipal)
  fullName.vb: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited(Of TEntity, TKey, TUserKey)(TEntity, System.Security.Principal.IPrincipal)
  name.vb: CheckIUpdateAudited(Of TEntity, TKey, TUserKey)(TEntity, IPrincipal)
  spec.csharp:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
    name: CheckIUpdateAudited<TEntity, TKey, TUserKey>
    nameWithType: EntityExtensions.CheckIUpdateAudited<TEntity, TKey, TUserKey>
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited<TEntity, TKey, TUserKey>
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
    name: CheckIUpdateAudited(Of TEntity, TKey, TUserKey)
    nameWithType: EntityExtensions.CheckIUpdateAudited(Of TEntity, TKey, TUserKey)
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited(Of TEntity, TKey, TUserKey)
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions
  commentId: N:Hybrid.Extensions
  name: Hybrid.Extensions
  nameWithType: Hybrid.Extensions
  fullName: Hybrid.Extensions
- uid: Hybrid.Json
  commentId: N:Hybrid.Json
  name: Hybrid.Json
  nameWithType: Hybrid.Json
  fullName: Hybrid.Json
- uid: Hybrid.Mapping
  commentId: N:Hybrid.Mapping
  name: Hybrid.Mapping
  nameWithType: Hybrid.Mapping
  fullName: Hybrid.Mapping
- uid: Hybrid.Reflection
  commentId: N:Hybrid.Reflection
  name: Hybrid.Reflection
  nameWithType: Hybrid.Reflection
  fullName: Hybrid.Reflection
- uid: Hybrid.Domain.Entities
  commentId: N:Hybrid.Domain.Entities
  name: Hybrid.Domain.Entities
  nameWithType: Hybrid.Domain.Entities
  fullName: Hybrid.Domain.Entities
- uid: Hybrid.Zero.Authorization.IEntityRoleStore`3.EntityRoles*
  commentId: Overload:Hybrid.Zero.Authorization.IEntityRoleStore`3.EntityRoles
  name: EntityRoles
  nameWithType: IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>.EntityRoles
  fullName: Hybrid.Zero.Authorization.IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>.EntityRoles
  nameWithType.vb: IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey).EntityRoles
  fullName.vb: Hybrid.Zero.Authorization.IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey).EntityRoles
- uid: System.Linq.IQueryable{{TEntityRole}}
  commentId: T:System.Linq.IQueryable{`0}
  parent: System.Linq
  definition: System.Linq.IQueryable`1
  name: IQueryable<TEntityRole>
  nameWithType: IQueryable<TEntityRole>
  fullName: System.Linq.IQueryable<TEntityRole>
  nameWithType.vb: IQueryable(Of TEntityRole)
  fullName.vb: System.Linq.IQueryable(Of TEntityRole)
  name.vb: IQueryable(Of TEntityRole)
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntityRole
    nameWithType: TEntityRole
    fullName: TEntityRole
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntityRole
    nameWithType: TEntityRole
    fullName: TEntityRole
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.IQueryable`1
  commentId: T:System.Linq.IQueryable`1
  isExternal: true
  name: IQueryable<T>
  nameWithType: IQueryable<T>
  fullName: System.Linq.IQueryable<T>
  nameWithType.vb: IQueryable(Of T)
  fullName.vb: System.Linq.IQueryable(Of T)
  name.vb: IQueryable(Of T)
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq
  commentId: N:System.Linq
  isExternal: true
  name: System.Linq
  nameWithType: System.Linq
  fullName: System.Linq
- uid: Hybrid.Zero.Authorization.IEntityRoleStore`3.CheckEntityRoleExists*
  commentId: Overload:Hybrid.Zero.Authorization.IEntityRoleStore`3.CheckEntityRoleExists
  name: CheckEntityRoleExists
  nameWithType: IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>.CheckEntityRoleExists
  fullName: Hybrid.Zero.Authorization.IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>.CheckEntityRoleExists
  nameWithType.vb: IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey).CheckEntityRoleExists
  fullName.vb: Hybrid.Zero.Authorization.IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey).CheckEntityRoleExists
- uid: System.Linq.Expressions.Expression{System.Func{{TEntityRole},System.Boolean}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TEntityRole, Boolean>>
  nameWithType: Expression<Func<TEntityRole, Boolean>>
  fullName: System.Linq.Expressions.Expression<System.Func<TEntityRole, System.Boolean>>
  nameWithType.vb: Expression(Of Func(Of TEntityRole, Boolean))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TEntityRole, System.Boolean))
  name.vb: Expression(Of Func(Of TEntityRole, Boolean))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntityRole
    nameWithType: TEntityRole
    fullName: TEntityRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntityRole
    nameWithType: TEntityRole
    fullName: TEntityRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Guid
  commentId: T:System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Threading.Tasks.Task{System.Boolean}
  commentId: T:System.Threading.Tasks.Task{System.Boolean}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Boolean>
  nameWithType: Task<Boolean>
  fullName: System.Threading.Tasks.Task<System.Boolean>
  nameWithType.vb: Task(Of Boolean)
  fullName.vb: System.Threading.Tasks.Task(Of System.Boolean)
  name.vb: Task(Of Boolean)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression`1
  commentId: T:System.Linq.Expressions.Expression`1
  isExternal: true
  name: Expression<TDelegate>
  nameWithType: Expression<TDelegate>
  fullName: System.Linq.Expressions.Expression<TDelegate>
  nameWithType.vb: Expression(Of TDelegate)
  fullName.vb: System.Linq.Expressions.Expression(Of TDelegate)
  name.vb: Expression(Of TDelegate)
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TDelegate
    nameWithType: TDelegate
    fullName: TDelegate
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TDelegate
    nameWithType: TDelegate
    fullName: TDelegate
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions
  commentId: N:System.Linq.Expressions
  isExternal: true
  name: System.Linq.Expressions
  nameWithType: System.Linq.Expressions
  fullName: System.Linq.Expressions
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Hybrid.Zero.Authorization.IEntityRoleStore`3.GetEntityRoleFilterGroups*
  commentId: Overload:Hybrid.Zero.Authorization.IEntityRoleStore`3.GetEntityRoleFilterGroups
  name: GetEntityRoleFilterGroups
  nameWithType: IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>.GetEntityRoleFilterGroups
  fullName: Hybrid.Zero.Authorization.IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>.GetEntityRoleFilterGroups
  nameWithType.vb: IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey).GetEntityRoleFilterGroups
  fullName.vb: Hybrid.Zero.Authorization.IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey).GetEntityRoleFilterGroups
- uid: '{TRoleKey}'
  commentId: '!:TRoleKey'
  definition: TRoleKey
  name: TRoleKey
  nameWithType: TRoleKey
  fullName: TRoleKey
- uid: Hybrid.Authorization.DataAuthOperation
  commentId: T:Hybrid.Authorization.DataAuthOperation
  parent: Hybrid.Authorization
  name: DataAuthOperation
  nameWithType: DataAuthOperation
  fullName: Hybrid.Authorization.DataAuthOperation
- uid: Hybrid.Filter.FilterGroup[]
  isExternal: true
  name: FilterGroup[]
  nameWithType: FilterGroup[]
  fullName: Hybrid.Filter.FilterGroup[]
  nameWithType.vb: FilterGroup()
  fullName.vb: Hybrid.Filter.FilterGroup()
  name.vb: FilterGroup()
  spec.csharp:
  - uid: Hybrid.Filter.FilterGroup
    name: FilterGroup
    nameWithType: FilterGroup
    fullName: Hybrid.Filter.FilterGroup
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: Hybrid.Filter.FilterGroup
    name: FilterGroup
    nameWithType: FilterGroup
    fullName: Hybrid.Filter.FilterGroup
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: TRoleKey
  name: TRoleKey
  nameWithType: TRoleKey
  fullName: TRoleKey
- uid: Hybrid.Authorization
  commentId: N:Hybrid.Authorization
  name: Hybrid.Authorization
  nameWithType: Hybrid.Authorization
  fullName: Hybrid.Authorization
- uid: Hybrid.Zero.Authorization.IEntityRoleStore`3.CreateEntityRoles*
  commentId: Overload:Hybrid.Zero.Authorization.IEntityRoleStore`3.CreateEntityRoles
  name: CreateEntityRoles
  nameWithType: IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>.CreateEntityRoles
  fullName: Hybrid.Zero.Authorization.IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>.CreateEntityRoles
  nameWithType.vb: IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey).CreateEntityRoles
  fullName.vb: Hybrid.Zero.Authorization.IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey).CreateEntityRoles
- uid: '{TEntityRoleInputDto}[]'
  isExternal: true
  name: TEntityRoleInputDto[]
  nameWithType: TEntityRoleInputDto[]
  fullName: TEntityRoleInputDto[]
  nameWithType.vb: TEntityRoleInputDto()
  fullName.vb: TEntityRoleInputDto()
  name.vb: TEntityRoleInputDto()
  spec.csharp:
  - name: TEntityRoleInputDto
    nameWithType: TEntityRoleInputDto
    fullName: TEntityRoleInputDto
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - name: TEntityRoleInputDto
    nameWithType: TEntityRoleInputDto
    fullName: TEntityRoleInputDto
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Threading.Tasks.Task{Hybrid.Data.OperationResult}
  commentId: T:System.Threading.Tasks.Task{Hybrid.Data.OperationResult}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<OperationResult>
  nameWithType: Task<OperationResult>
  fullName: System.Threading.Tasks.Task<Hybrid.Data.OperationResult>
  nameWithType.vb: Task(Of OperationResult)
  fullName.vb: System.Threading.Tasks.Task(Of Hybrid.Data.OperationResult)
  name.vb: Task(Of OperationResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Data.OperationResult
    name: OperationResult
    nameWithType: OperationResult
    fullName: Hybrid.Data.OperationResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Data.OperationResult
    name: OperationResult
    nameWithType: OperationResult
    fullName: Hybrid.Data.OperationResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Authorization.IEntityRoleStore`3.UpdateEntityRoles*
  commentId: Overload:Hybrid.Zero.Authorization.IEntityRoleStore`3.UpdateEntityRoles
  name: UpdateEntityRoles
  nameWithType: IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>.UpdateEntityRoles
  fullName: Hybrid.Zero.Authorization.IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>.UpdateEntityRoles
  nameWithType.vb: IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey).UpdateEntityRoles
  fullName.vb: Hybrid.Zero.Authorization.IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey).UpdateEntityRoles
- uid: Hybrid.Zero.Authorization.IEntityRoleStore`3.DeleteEntityRoles*
  commentId: Overload:Hybrid.Zero.Authorization.IEntityRoleStore`3.DeleteEntityRoles
  name: DeleteEntityRoles
  nameWithType: IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>.DeleteEntityRoles
  fullName: Hybrid.Zero.Authorization.IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>.DeleteEntityRoles
  nameWithType.vb: IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey).DeleteEntityRoles
  fullName.vb: Hybrid.Zero.Authorization.IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey).DeleteEntityRoles
- uid: System.Guid[]
  isExternal: true
  name: Guid[]
  nameWithType: Guid[]
  fullName: System.Guid[]
  nameWithType.vb: Guid()
  fullName.vb: System.Guid()
  name.vb: Guid()
  spec.csharp:
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
