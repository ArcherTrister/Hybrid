### YamlMime:ManagedReference
items:
- uid: Hybrid.Threading.ThreadExtensions
  commentId: T:Hybrid.Threading.ThreadExtensions
  id: ThreadExtensions
  parent: Hybrid.Threading
  children:
  - Hybrid.Threading.ThreadExtensions.CancelSleep(System.Threading.Thread)
  - Hybrid.Threading.ThreadExtensions.StartAndIgnoreAbort(System.Threading.Thread,System.Action{System.Exception})
  langs:
  - csharp
  - vb
  name: ThreadExtensions
  nameWithType: ThreadExtensions
  fullName: Hybrid.Threading.ThreadExtensions
  type: Class
  source:
    remote:
      path: src/Hybrid/Threading/ThreadExtensions.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: ThreadExtensions
    path: ../src/Hybrid/Threading/ThreadExtensions.cs
    startLine: 16
  assemblies:
  - Hybrid
  namespace: Hybrid.Threading
  summary: "\n线程扩展操作类\n"
  example: []
  syntax:
    content: public static class ThreadExtensions
    content.vb: Public Module ThreadExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Hybrid.Threading.ThreadExtensions.CancelSleep(System.Threading.Thread)
  commentId: M:Hybrid.Threading.ThreadExtensions.CancelSleep(System.Threading.Thread)
  id: CancelSleep(System.Threading.Thread)
  isExtensionMethod: true
  parent: Hybrid.Threading.ThreadExtensions
  langs:
  - csharp
  - vb
  name: CancelSleep(Thread)
  nameWithType: ThreadExtensions.CancelSleep(Thread)
  fullName: Hybrid.Threading.ThreadExtensions.CancelSleep(System.Threading.Thread)
  type: Method
  source:
    remote:
      path: src/Hybrid/Threading/ThreadExtensions.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: CancelSleep
    path: ../src/Hybrid/Threading/ThreadExtensions.cs
    startLine: 21
  assemblies:
  - Hybrid
  namespace: Hybrid.Threading
  summary: "\n取消Thread.Sleep状态，继续线程\n"
  example: []
  syntax:
    content: public static void CancelSleep(this Thread thread)
    parameters:
    - id: thread
      type: System.Threading.Thread
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub CancelSleep(thread As Thread)
  overload: Hybrid.Threading.ThreadExtensions.CancelSleep*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Hybrid.Threading.ThreadExtensions.StartAndIgnoreAbort(System.Threading.Thread,System.Action{System.Exception})
  commentId: M:Hybrid.Threading.ThreadExtensions.StartAndIgnoreAbort(System.Threading.Thread,System.Action{System.Exception})
  id: StartAndIgnoreAbort(System.Threading.Thread,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Hybrid.Threading.ThreadExtensions
  langs:
  - csharp
  - vb
  name: StartAndIgnoreAbort(Thread, Action<Exception>)
  nameWithType: ThreadExtensions.StartAndIgnoreAbort(Thread, Action<Exception>)
  fullName: Hybrid.Threading.ThreadExtensions.StartAndIgnoreAbort(System.Threading.Thread, System.Action<System.Exception>)
  type: Method
  source:
    remote:
      path: src/Hybrid/Threading/ThreadExtensions.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: StartAndIgnoreAbort
    path: ../src/Hybrid/Threading/ThreadExtensions.cs
    startLine: 35
  assemblies:
  - Hybrid
  namespace: Hybrid.Threading
  summary: "\n启动线程，自动忽略停止线程时触发的<xref href=\"System.Threading.ThreadAbortException\" data-throw-if-not-resolved=\"false\"></xref>异常\n"
  example: []
  syntax:
    content: public static void StartAndIgnoreAbort(this Thread thread, Action<Exception> failAction = null)
    parameters:
    - id: thread
      type: System.Threading.Thread
      description: 线程
    - id: failAction
      type: System.Action{System.Exception}
      description: 引发非<xref href="System.Threading.ThreadAbortException" data-throw-if-not-resolved="false"></xref>异常时执行的逻辑
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub StartAndIgnoreAbort(thread As Thread, failAction As Action(Of Exception) = Nothing)
  overload: Hybrid.Threading.ThreadExtensions.StartAndIgnoreAbort*
  nameWithType.vb: ThreadExtensions.StartAndIgnoreAbort(Thread, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Hybrid.Threading.ThreadExtensions.StartAndIgnoreAbort(System.Threading.Thread, System.Action(Of System.Exception))
  name.vb: StartAndIgnoreAbort(Thread, Action(Of Exception))
references:
- uid: Hybrid.Threading
  commentId: N:Hybrid.Threading
  name: Hybrid.Threading
  nameWithType: Hybrid.Threading
  fullName: Hybrid.Threading
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Hybrid.Threading.ThreadExtensions.CancelSleep*
  commentId: Overload:Hybrid.Threading.ThreadExtensions.CancelSleep
  name: CancelSleep
  nameWithType: ThreadExtensions.CancelSleep
  fullName: Hybrid.Threading.ThreadExtensions.CancelSleep
- uid: System.Threading.Thread
  commentId: T:System.Threading.Thread
  parent: System.Threading
  isExternal: true
  name: Thread
  nameWithType: Thread
  fullName: System.Threading.Thread
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: true
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Threading.ThreadAbortException
  commentId: T:System.Threading.ThreadAbortException
  isExternal: true
- uid: Hybrid.Threading.ThreadExtensions.StartAndIgnoreAbort*
  commentId: Overload:Hybrid.Threading.ThreadExtensions.StartAndIgnoreAbort
  name: StartAndIgnoreAbort
  nameWithType: ThreadExtensions.StartAndIgnoreAbort
  fullName: Hybrid.Threading.ThreadExtensions.StartAndIgnoreAbort
- uid: System.Action{System.Exception}
  commentId: T:System.Action{System.Exception}
  parent: System
  definition: System.Action`1
  name: Action<Exception>
  nameWithType: Action<Exception>
  fullName: System.Action<System.Exception>
  nameWithType.vb: Action(Of Exception)
  fullName.vb: System.Action(Of System.Exception)
  name.vb: Action(Of Exception)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
