### YamlMime:ManagedReference
items:
- uid: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1
  commentId: T:Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1
  id: BaseRazorPage`1
  parent: Hybrid.AspNetCore.Mvc.Views
  children:
  - Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1.#ctor
  - Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1.ApplicationPath
  - Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1.GenerationTime
  - Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1.GetGenerationTime
  - Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1.L(System.String)
  - Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1.L(System.String,System.Globalization.CultureInfo)
  - Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1.L(System.String,System.Globalization.CultureInfo,System.Object[])
  - Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1.L(System.String,System.Object[])
  - Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1.LocalCultureInfo
  - Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1.LocalizationManager
  - Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1.LocalizationSourceName
  - Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1.LocalSchedulerName
  - Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1.Ls(System.String,System.String)
  - Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1.Ls(System.String,System.String,System.Globalization.CultureInfo)
  - Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1.Ls(System.String,System.String,System.Globalization.CultureInfo,System.Object[])
  - Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1.Ls(System.String,System.String,System.Object[])
  langs:
  - csharp
  - vb
  name: BaseRazorPage<TModel>
  nameWithType: BaseRazorPage<TModel>
  fullName: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage<TModel>
  type: Class
  source:
    remote:
      path: src/Hybrid.AspNetCore/Mvc/Views/BaseRazorPage.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: BaseRazorPage
    path: ../src/Hybrid.AspNetCore/Mvc/Views/BaseRazorPage.cs
    startLine: 30
  assemblies:
  - Hybrid.AspNetCore
  namespace: Hybrid.AspNetCore.Mvc.Views
  summary: "\nBase class for all views in Hybrid.AspNetCore system.\n"
  example: []
  syntax:
    content: 'public abstract class BaseRazorPage<TModel> : RazorPage<TModel>, IRazorPage'
    typeParameters:
    - id: TModel
      description: Type of the View Model
    content.vb: >-
      Public MustInherit Class BaseRazorPage(Of TModel)
          Inherits RazorPage(Of TModel)
          Implements IRazorPage
  inheritance:
  - System.Object
  - Microsoft.AspNetCore.Mvc.Razor.RazorPageBase
  - Microsoft.AspNetCore.Mvc.Razor.RazorPage
  - Microsoft.AspNetCore.Mvc.Razor.RazorPage{{TModel}}
  derivedClasses:
  - Hybrid.Quartz.Dashboard.Views.QuartzRazorPage`1
  - Hybrid.Zero.IdentityServer4.Quickstart.Views.IdentityServerRazorPage`1
  implements:
  - Microsoft.AspNetCore.Mvc.Razor.IRazorPage
  inheritedMembers:
  - Microsoft.AspNetCore.Mvc.Razor.RazorPage{{TModel}}.Model
  - Microsoft.AspNetCore.Mvc.Razor.RazorPage{{TModel}}.ViewData
  - Microsoft.AspNetCore.Mvc.Razor.RazorPage.BeginContext(System.Int32,System.Int32,System.Boolean)
  - Microsoft.AspNetCore.Mvc.Razor.RazorPage.DefineSection(System.String,Microsoft.AspNetCore.Mvc.Razor.RenderAsyncDelegate)
  - Microsoft.AspNetCore.Mvc.Razor.RazorPage.EndContext
  - Microsoft.AspNetCore.Mvc.Razor.RazorPage.EnsureRenderedBodyOrSections
  - Microsoft.AspNetCore.Mvc.Razor.RazorPage.IgnoreBody
  - Microsoft.AspNetCore.Mvc.Razor.RazorPage.IgnoreSection(System.String)
  - Microsoft.AspNetCore.Mvc.Razor.RazorPage.IsSectionDefined(System.String)
  - Microsoft.AspNetCore.Mvc.Razor.RazorPage.RenderBody
  - Microsoft.AspNetCore.Mvc.Razor.RazorPage.RenderSection(System.String)
  - Microsoft.AspNetCore.Mvc.Razor.RazorPage.RenderSection(System.String,System.Boolean)
  - Microsoft.AspNetCore.Mvc.Razor.RazorPage.RenderSectionAsync(System.String)
  - Microsoft.AspNetCore.Mvc.Razor.RazorPage.RenderSectionAsync(System.String,System.Boolean)
  - Microsoft.AspNetCore.Mvc.Razor.RazorPage.Context
  - Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.AddHtmlAttributeValue(System.String,System.Int32,System.Object,System.Int32,System.Int32,System.Boolean)
  - Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.BeginAddHtmlAttributeValues(Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext,System.String,System.Int32,Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle)
  - Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.BeginWriteAttribute(System.String,System.String,System.Int32,System.String,System.Int32,System.Int32)
  - Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.BeginWriteTagHelperAttribute
  - Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.CreateTagHelper``1
  - Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.EndAddHtmlAttributeValues(Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext)
  - Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.EndTagHelperWritingScope
  - Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.EndWriteAttribute
  - Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.EndWriteTagHelperAttribute
  - Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.ExecuteAsync
  - Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.FlushAsync
  - Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.Href(System.String)
  - Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.PopWriter
  - Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.PushWriter(System.IO.TextWriter)
  - Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.SetAntiforgeryCookieAndHeader
  - Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.StartTagHelperWritingScope(System.Text.Encodings.Web.HtmlEncoder)
  - Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.Write(System.Object)
  - Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.Write(System.String)
  - Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.WriteAttributeValue(System.String,System.Int32,System.Object,System.Int32,System.Int32,System.Boolean)
  - Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.WriteLiteral(System.Object)
  - Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.WriteLiteral(System.String)
  - Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.BodyContent
  - Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.DiagnosticSource
  - Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.HtmlEncoder
  - Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.IsLayoutBeingRendered
  - Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.Layout
  - Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.Output
  - Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.Path
  - Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.PreviousSectionWriters
  - Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.SectionWriters
  - Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.TempData
  - Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.User
  - Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.ViewBag
  - Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.ViewContext
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - System.Object.Hybrid.Extensions.ObjectExtensions.CastTo(System.Type)
  - System.Object.Hybrid.Extensions.ObjectExtensions.CastTo``1
  - System.Object.Hybrid.Extensions.ObjectExtensions.CastTo``1({T})
  - Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1.Hybrid.Extensions.ObjectExtensions.IsIn``1(Hybrid.AspNetCore.Mvc.Views.BaseRazorPage{{TModel}}[])
  - System.Object.Hybrid.Extensions.ObjectExtensions.ToDynamic
  - Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1.Hybrid.Extensions.ObjectExtensions.DeepClone``1
  - Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1.Hybrid.Extensions.ParameterCheckExtensions.Required``1(System.Func{Hybrid.AspNetCore.Mvc.Views.BaseRazorPage{{TModel}},System.Boolean},System.String)
  - Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1.Hybrid.Extensions.ParameterCheckExtensions.Required``2(System.Func{Hybrid.AspNetCore.Mvc.Views.BaseRazorPage{{TModel}},System.Boolean},System.String)
  - Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1.Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(System.String)
  - Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1.Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{Hybrid.AspNetCore.Mvc.Views.BaseRazorPage{{TModel}}},System.Action{System.Exception},System.Action{Hybrid.AspNetCore.Mvc.Views.BaseRazorPage{{TModel}}})
  - Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1.Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{Hybrid.AspNetCore.Mvc.Views.BaseRazorPage{{TModel}}},System.Action{System.Exception})
  - Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1.Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{Hybrid.AspNetCore.Mvc.Views.BaseRazorPage{{TModel}},{TResult}},System.Action{System.Exception},System.Action{Hybrid.AspNetCore.Mvc.Views.BaseRazorPage{{TModel}}})
  - Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1.Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{Hybrid.AspNetCore.Mvc.Views.BaseRazorPage{{TModel}},{TResult}},System.Action{System.Exception})
  - Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1.Hybrid.Extensions.TryCatchExtensions.TryFinally``1(System.Action{Hybrid.AspNetCore.Mvc.Views.BaseRazorPage{{TModel}}},System.Action{Hybrid.AspNetCore.Mvc.Views.BaseRazorPage{{TModel}}})
  - System.Object.Hybrid.Json.JsonExtensions.ToJsonString(System.Boolean,System.Boolean)
  - System.Object.Hybrid.Mapping.MapperExtensions.MapTo``1
  - Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1.Hybrid.Mapping.MapperExtensions.MapTo``2({TTarget})
  - System.Object.Hybrid.Reflection.LockExtensions.Locking(System.Action)
  - Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1.Hybrid.Reflection.LockExtensions.Locking``1(System.Action{Hybrid.AspNetCore.Mvc.Views.BaseRazorPage{{TModel}}})
  - System.Object.Hybrid.Reflection.LockExtensions.Locking``1(System.Func{{TResult}})
  - Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1.Hybrid.Reflection.LockExtensions.Locking``2(System.Func{Hybrid.AspNetCore.Mvc.Views.BaseRazorPage{{TModel}},{TResult}})
  - Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1.Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2
  - Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1.Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(System.Security.Principal.IPrincipal)
  - Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1.Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(System.Security.Principal.IPrincipal)
  nameWithType.vb: BaseRazorPage(Of TModel)
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  fullName.vb: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage(Of TModel)
  name.vb: BaseRazorPage(Of TModel)
- uid: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1.ApplicationPath
  commentId: P:Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1.ApplicationPath
  id: ApplicationPath
  parent: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1
  langs:
  - csharp
  - vb
  name: ApplicationPath
  nameWithType: BaseRazorPage<TModel>.ApplicationPath
  fullName: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage<TModel>.ApplicationPath
  type: Property
  source:
    remote:
      path: src/Hybrid.AspNetCore/Mvc/Views/BaseRazorPage.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: ApplicationPath
    path: ../src/Hybrid.AspNetCore/Mvc/Views/BaseRazorPage.cs
    startLine: 35
  assemblies:
  - Hybrid.AspNetCore
  namespace: Hybrid.AspNetCore.Mvc.Views
  summary: "\nGets the root path of the application.\n"
  example: []
  syntax:
    content: public string ApplicationPath { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property ApplicationPath As String
  overload: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1.ApplicationPath*
  nameWithType.vb: BaseRazorPage(Of TModel).ApplicationPath
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage(Of TModel).ApplicationPath
- uid: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1.LocalCultureInfo
  commentId: P:Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1.LocalCultureInfo
  id: LocalCultureInfo
  parent: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1
  langs:
  - csharp
  - vb
  name: LocalCultureInfo
  nameWithType: BaseRazorPage<TModel>.LocalCultureInfo
  fullName: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage<TModel>.LocalCultureInfo
  type: Property
  source:
    remote:
      path: src/Hybrid.AspNetCore/Mvc/Views/BaseRazorPage.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: LocalCultureInfo
    path: ../src/Hybrid.AspNetCore/Mvc/Views/BaseRazorPage.cs
    startLine: 51
  assemblies:
  - Hybrid.AspNetCore
  namespace: Hybrid.AspNetCore.Mvc.Views
  syntax:
    content: protected CultureInfo LocalCultureInfo { get; }
    parameters: []
    return:
      type: System.Globalization.CultureInfo
    content.vb: Protected ReadOnly Property LocalCultureInfo As CultureInfo
  overload: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1.LocalCultureInfo*
  nameWithType.vb: BaseRazorPage(Of TModel).LocalCultureInfo
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
  fullName.vb: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage(Of TModel).LocalCultureInfo
- uid: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1.LocalSchedulerName
  commentId: P:Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1.LocalSchedulerName
  id: LocalSchedulerName
  parent: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1
  langs:
  - csharp
  - vb
  name: LocalSchedulerName
  nameWithType: BaseRazorPage<TModel>.LocalSchedulerName
  fullName: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage<TModel>.LocalSchedulerName
  type: Property
  source:
    remote:
      path: src/Hybrid.AspNetCore/Mvc/Views/BaseRazorPage.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: LocalSchedulerName
    path: ../src/Hybrid.AspNetCore/Mvc/Views/BaseRazorPage.cs
    startLine: 65
  assemblies:
  - Hybrid.AspNetCore
  namespace: Hybrid.AspNetCore.Mvc.Views
  syntax:
    content: protected string LocalSchedulerName { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Protected ReadOnly Property LocalSchedulerName As String
  overload: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1.LocalSchedulerName*
  nameWithType.vb: BaseRazorPage(Of TModel).LocalSchedulerName
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
  fullName.vb: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage(Of TModel).LocalSchedulerName
- uid: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1.GenerationTime
  commentId: P:Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1.GenerationTime
  id: GenerationTime
  parent: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1
  langs:
  - csharp
  - vb
  name: GenerationTime
  nameWithType: BaseRazorPage<TModel>.GenerationTime
  fullName: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage<TModel>.GenerationTime
  type: Property
  source:
    remote:
      path: src/Hybrid.AspNetCore/Mvc/Views/BaseRazorPage.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: GenerationTime
    path: ../src/Hybrid.AspNetCore/Mvc/Views/BaseRazorPage.cs
    startLine: 78
  assemblies:
  - Hybrid.AspNetCore
  namespace: Hybrid.AspNetCore.Mvc.Views
  syntax:
    content: public Stopwatch GenerationTime { get; }
    parameters: []
    return:
      type: System.Diagnostics.Stopwatch
    content.vb: Public ReadOnly Property GenerationTime As Stopwatch
  overload: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1.GenerationTime*
  nameWithType.vb: BaseRazorPage(Of TModel).GenerationTime
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage(Of TModel).GenerationTime
- uid: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1.LocalizationManager
  commentId: P:Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1.LocalizationManager
  id: LocalizationManager
  parent: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1
  langs:
  - csharp
  - vb
  name: LocalizationManager
  nameWithType: BaseRazorPage<TModel>.LocalizationManager
  fullName: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage<TModel>.LocalizationManager
  type: Property
  source:
    remote:
      path: src/Hybrid.AspNetCore/Mvc/Views/BaseRazorPage.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: LocalizationManager
    path: ../src/Hybrid.AspNetCore/Mvc/Views/BaseRazorPage.cs
    startLine: 83
  assemblies:
  - Hybrid.AspNetCore
  namespace: Hybrid.AspNetCore.Mvc.Views
  summary: "\nReference to the localization manager.\n"
  example: []
  syntax:
    content: >-
      [RazorInject]

      public ILocalizationManager LocalizationManager { get; set; }
    parameters: []
    return:
      type: Hybrid.Localization.ILocalizationManager
    content.vb: >-
      <RazorInject>

      Public Property LocalizationManager As ILocalizationManager
  overload: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1.LocalizationManager*
  attributes:
  - type: Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute
    ctor: Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute.#ctor
    arguments: []
  nameWithType.vb: BaseRazorPage(Of TModel).LocalizationManager
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage(Of TModel).LocalizationManager
- uid: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1.LocalizationSourceName
  commentId: P:Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1.LocalizationSourceName
  id: LocalizationSourceName
  parent: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1
  langs:
  - csharp
  - vb
  name: LocalizationSourceName
  nameWithType: BaseRazorPage<TModel>.LocalizationSourceName
  fullName: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage<TModel>.LocalizationSourceName
  type: Property
  source:
    remote:
      path: src/Hybrid.AspNetCore/Mvc/Views/BaseRazorPage.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: LocalizationSourceName
    path: ../src/Hybrid.AspNetCore/Mvc/Views/BaseRazorPage.cs
    startLine: 90
  assemblies:
  - Hybrid.AspNetCore
  namespace: Hybrid.AspNetCore.Mvc.Views
  summary: "\nGets/sets name of the localization source that is used in this controller.\nIt must be set in order to use <xref href=\"Hybrid.AspNetCore.Mvc.Views.BaseRazorPage%601.L(System.String)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"Hybrid.AspNetCore.Mvc.Views.BaseRazorPage%601.L(System.String%2cSystem.Globalization.CultureInfo)\" data-throw-if-not-resolved=\"false\"></xref> methods.\n"
  example: []
  syntax:
    content: protected string LocalizationSourceName { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Protected Property LocalizationSourceName As String
  overload: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1.LocalizationSourceName*
  nameWithType.vb: BaseRazorPage(Of TModel).LocalizationSourceName
  modifiers.csharp:
  - protected
  - get
  - set
  modifiers.vb:
  - Protected
  fullName.vb: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage(Of TModel).LocalizationSourceName
- uid: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1.#ctor
  commentId: M:Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1.#ctor
  id: '#ctor'
  parent: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1
  langs:
  - csharp
  - vb
  name: BaseRazorPage()
  nameWithType: BaseRazorPage<TModel>.BaseRazorPage()
  fullName: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage<TModel>.BaseRazorPage()
  type: Constructor
  source:
    remote:
      path: src/Hybrid.AspNetCore/Mvc/Views/BaseRazorPage.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: .ctor
    path: ../src/Hybrid.AspNetCore/Mvc/Views/BaseRazorPage.cs
    startLine: 101
  assemblies:
  - Hybrid.AspNetCore
  namespace: Hybrid.AspNetCore.Mvc.Views
  summary: "\nConstructor.\n"
  example: []
  syntax:
    content: protected BaseRazorPage()
    content.vb: Protected Sub New
  overload: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1.#ctor*
  nameWithType.vb: BaseRazorPage(Of TModel).BaseRazorPage()
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage(Of TModel).BaseRazorPage()
- uid: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1.GetGenerationTime
  commentId: M:Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1.GetGenerationTime
  id: GetGenerationTime
  parent: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1
  langs:
  - csharp
  - vb
  name: GetGenerationTime()
  nameWithType: BaseRazorPage<TModel>.GetGenerationTime()
  fullName: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage<TModel>.GetGenerationTime()
  type: Method
  source:
    remote:
      path: src/Hybrid.AspNetCore/Mvc/Views/BaseRazorPage.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: GetGenerationTime
    path: ../src/Hybrid.AspNetCore/Mvc/Views/BaseRazorPage.cs
    startLine: 111
  assemblies:
  - Hybrid.AspNetCore
  namespace: Hybrid.AspNetCore.Mvc.Views
  summary: "\n获取初始化时间\n"
  example: []
  syntax:
    content: protected virtual Stopwatch GetGenerationTime()
    return:
      type: System.Diagnostics.Stopwatch
      description: ''
    content.vb: Protected Overridable Function GetGenerationTime As Stopwatch
  overload: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1.GetGenerationTime*
  nameWithType.vb: BaseRazorPage(Of TModel).GetGenerationTime()
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage(Of TModel).GetGenerationTime()
- uid: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1.L(System.String)
  commentId: M:Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1.L(System.String)
  id: L(System.String)
  parent: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1
  langs:
  - csharp
  - vb
  name: L(String)
  nameWithType: BaseRazorPage<TModel>.L(String)
  fullName: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage<TModel>.L(System.String)
  type: Method
  source:
    remote:
      path: src/Hybrid.AspNetCore/Mvc/Views/BaseRazorPage.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: L
    path: ../src/Hybrid.AspNetCore/Mvc/Views/BaseRazorPage.cs
    startLine: 121
  assemblies:
  - Hybrid.AspNetCore
  namespace: Hybrid.AspNetCore.Mvc.Views
  summary: "\nGets localized string for given key name and current language.\n"
  example: []
  syntax:
    content: protected virtual string L(string name)
    parameters:
    - id: name
      type: System.String
      description: Key name
    return:
      type: System.String
      description: Localized string
    content.vb: Protected Overridable Function L(name As String) As String
  overload: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1.L*
  nameWithType.vb: BaseRazorPage(Of TModel).L(String)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage(Of TModel).L(System.String)
- uid: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1.L(System.String,System.Object[])
  commentId: M:Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1.L(System.String,System.Object[])
  id: L(System.String,System.Object[])
  parent: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1
  langs:
  - csharp
  - vb
  name: L(String, Object[])
  nameWithType: BaseRazorPage<TModel>.L(String, Object[])
  fullName: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage<TModel>.L(System.String, System.Object[])
  type: Method
  source:
    remote:
      path: src/Hybrid.AspNetCore/Mvc/Views/BaseRazorPage.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: L
    path: ../src/Hybrid.AspNetCore/Mvc/Views/BaseRazorPage.cs
    startLine: 132
  assemblies:
  - Hybrid.AspNetCore
  namespace: Hybrid.AspNetCore.Mvc.Views
  summary: "\nGets localized string for given key name and current language with formatting strings.\n"
  example: []
  syntax:
    content: protected virtual string L(string name, params object[] args)
    parameters:
    - id: name
      type: System.String
      description: Key name
    - id: args
      type: System.Object[]
      description: Format arguments
    return:
      type: System.String
      description: Localized string
    content.vb: Protected Overridable Function L(name As String, ParamArray args As Object()) As String
  overload: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1.L*
  nameWithType.vb: BaseRazorPage(Of TModel).L(String, Object())
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage(Of TModel).L(System.String, System.Object())
  name.vb: L(String, Object())
- uid: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1.L(System.String,System.Globalization.CultureInfo)
  commentId: M:Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1.L(System.String,System.Globalization.CultureInfo)
  id: L(System.String,System.Globalization.CultureInfo)
  parent: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1
  langs:
  - csharp
  - vb
  name: L(String, CultureInfo)
  nameWithType: BaseRazorPage<TModel>.L(String, CultureInfo)
  fullName: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage<TModel>.L(System.String, System.Globalization.CultureInfo)
  type: Method
  source:
    remote:
      path: src/Hybrid.AspNetCore/Mvc/Views/BaseRazorPage.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: L
    path: ../src/Hybrid.AspNetCore/Mvc/Views/BaseRazorPage.cs
    startLine: 143
  assemblies:
  - Hybrid.AspNetCore
  namespace: Hybrid.AspNetCore.Mvc.Views
  summary: "\nGets localized string for given key name and specified culture information.\n"
  example: []
  syntax:
    content: protected virtual string L(string name, CultureInfo culture)
    parameters:
    - id: name
      type: System.String
      description: Key name
    - id: culture
      type: System.Globalization.CultureInfo
      description: culture information
    return:
      type: System.String
      description: Localized string
    content.vb: Protected Overridable Function L(name As String, culture As CultureInfo) As String
  overload: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1.L*
  nameWithType.vb: BaseRazorPage(Of TModel).L(String, CultureInfo)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage(Of TModel).L(System.String, System.Globalization.CultureInfo)
- uid: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1.L(System.String,System.Globalization.CultureInfo,System.Object[])
  commentId: M:Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1.L(System.String,System.Globalization.CultureInfo,System.Object[])
  id: L(System.String,System.Globalization.CultureInfo,System.Object[])
  parent: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1
  langs:
  - csharp
  - vb
  name: L(String, CultureInfo, Object[])
  nameWithType: BaseRazorPage<TModel>.L(String, CultureInfo, Object[])
  fullName: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage<TModel>.L(System.String, System.Globalization.CultureInfo, System.Object[])
  type: Method
  source:
    remote:
      path: src/Hybrid.AspNetCore/Mvc/Views/BaseRazorPage.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: L
    path: ../src/Hybrid.AspNetCore/Mvc/Views/BaseRazorPage.cs
    startLine: 155
  assemblies:
  - Hybrid.AspNetCore
  namespace: Hybrid.AspNetCore.Mvc.Views
  summary: "\nGets localized string for given key name and current language with formatting strings.\n"
  example: []
  syntax:
    content: protected string L(string name, CultureInfo culture, params object[] args)
    parameters:
    - id: name
      type: System.String
      description: Key name
    - id: culture
      type: System.Globalization.CultureInfo
      description: culture information
    - id: args
      type: System.Object[]
      description: Format arguments
    return:
      type: System.String
      description: Localized string
    content.vb: Protected Function L(name As String, culture As CultureInfo, ParamArray args As Object()) As String
  overload: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1.L*
  nameWithType.vb: BaseRazorPage(Of TModel).L(String, CultureInfo, Object())
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage(Of TModel).L(System.String, System.Globalization.CultureInfo, System.Object())
  name.vb: L(String, CultureInfo, Object())
- uid: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1.Ls(System.String,System.String)
  commentId: M:Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1.Ls(System.String,System.String)
  id: Ls(System.String,System.String)
  parent: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1
  langs:
  - csharp
  - vb
  name: Ls(String, String)
  nameWithType: BaseRazorPage<TModel>.Ls(String, String)
  fullName: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage<TModel>.Ls(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/Hybrid.AspNetCore/Mvc/Views/BaseRazorPage.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: Ls
    path: ../src/Hybrid.AspNetCore/Mvc/Views/BaseRazorPage.cs
    startLine: 166
  assemblies:
  - Hybrid.AspNetCore
  namespace: Hybrid.AspNetCore.Mvc.Views
  summary: "\nGets localized string from given source for given key name and current language.\n"
  example: []
  syntax:
    content: protected virtual string Ls(string sourceName, string name)
    parameters:
    - id: sourceName
      type: System.String
      description: Source name
    - id: name
      type: System.String
      description: Key name
    return:
      type: System.String
      description: Localized string
    content.vb: Protected Overridable Function Ls(sourceName As String, name As String) As String
  overload: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1.Ls*
  nameWithType.vb: BaseRazorPage(Of TModel).Ls(String, String)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage(Of TModel).Ls(System.String, System.String)
- uid: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1.Ls(System.String,System.String,System.Object[])
  commentId: M:Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1.Ls(System.String,System.String,System.Object[])
  id: Ls(System.String,System.String,System.Object[])
  parent: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1
  langs:
  - csharp
  - vb
  name: Ls(String, String, Object[])
  nameWithType: BaseRazorPage<TModel>.Ls(String, String, Object[])
  fullName: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage<TModel>.Ls(System.String, System.String, System.Object[])
  type: Method
  source:
    remote:
      path: src/Hybrid.AspNetCore/Mvc/Views/BaseRazorPage.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: Ls
    path: ../src/Hybrid.AspNetCore/Mvc/Views/BaseRazorPage.cs
    startLine: 178
  assemblies:
  - Hybrid.AspNetCore
  namespace: Hybrid.AspNetCore.Mvc.Views
  summary: "\nGets localized string from given source  for given key name and current language with formatting strings.\n"
  example: []
  syntax:
    content: protected virtual string Ls(string sourceName, string name, params object[] args)
    parameters:
    - id: sourceName
      type: System.String
      description: Source name
    - id: name
      type: System.String
      description: Key name
    - id: args
      type: System.Object[]
      description: Format arguments
    return:
      type: System.String
      description: Localized string
    content.vb: Protected Overridable Function Ls(sourceName As String, name As String, ParamArray args As Object()) As String
  overload: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1.Ls*
  nameWithType.vb: BaseRazorPage(Of TModel).Ls(String, String, Object())
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage(Of TModel).Ls(System.String, System.String, System.Object())
  name.vb: Ls(String, String, Object())
- uid: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1.Ls(System.String,System.String,System.Globalization.CultureInfo)
  commentId: M:Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1.Ls(System.String,System.String,System.Globalization.CultureInfo)
  id: Ls(System.String,System.String,System.Globalization.CultureInfo)
  parent: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1
  langs:
  - csharp
  - vb
  name: Ls(String, String, CultureInfo)
  nameWithType: BaseRazorPage<TModel>.Ls(String, String, CultureInfo)
  fullName: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage<TModel>.Ls(System.String, System.String, System.Globalization.CultureInfo)
  type: Method
  source:
    remote:
      path: src/Hybrid.AspNetCore/Mvc/Views/BaseRazorPage.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: Ls
    path: ../src/Hybrid.AspNetCore/Mvc/Views/BaseRazorPage.cs
    startLine: 190
  assemblies:
  - Hybrid.AspNetCore
  namespace: Hybrid.AspNetCore.Mvc.Views
  summary: "\nGets localized string from given source  for given key name and specified culture information.\n"
  example: []
  syntax:
    content: protected virtual string Ls(string sourceName, string name, CultureInfo culture)
    parameters:
    - id: sourceName
      type: System.String
      description: Source name
    - id: name
      type: System.String
      description: Key name
    - id: culture
      type: System.Globalization.CultureInfo
      description: culture information
    return:
      type: System.String
      description: Localized string
    content.vb: Protected Overridable Function Ls(sourceName As String, name As String, culture As CultureInfo) As String
  overload: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1.Ls*
  nameWithType.vb: BaseRazorPage(Of TModel).Ls(String, String, CultureInfo)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage(Of TModel).Ls(System.String, System.String, System.Globalization.CultureInfo)
- uid: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1.Ls(System.String,System.String,System.Globalization.CultureInfo,System.Object[])
  commentId: M:Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1.Ls(System.String,System.String,System.Globalization.CultureInfo,System.Object[])
  id: Ls(System.String,System.String,System.Globalization.CultureInfo,System.Object[])
  parent: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1
  langs:
  - csharp
  - vb
  name: Ls(String, String, CultureInfo, Object[])
  nameWithType: BaseRazorPage<TModel>.Ls(String, String, CultureInfo, Object[])
  fullName: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage<TModel>.Ls(System.String, System.String, System.Globalization.CultureInfo, System.Object[])
  type: Method
  source:
    remote:
      path: src/Hybrid.AspNetCore/Mvc/Views/BaseRazorPage.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: Ls
    path: ../src/Hybrid.AspNetCore/Mvc/Views/BaseRazorPage.cs
    startLine: 203
  assemblies:
  - Hybrid.AspNetCore
  namespace: Hybrid.AspNetCore.Mvc.Views
  summary: "\nGets localized string from given source  for given key name and current language with formatting strings.\n"
  example: []
  syntax:
    content: protected virtual string Ls(string sourceName, string name, CultureInfo culture, params object[] args)
    parameters:
    - id: sourceName
      type: System.String
      description: Source name
    - id: name
      type: System.String
      description: Key name
    - id: culture
      type: System.Globalization.CultureInfo
      description: culture information
    - id: args
      type: System.Object[]
      description: Format arguments
    return:
      type: System.String
      description: Localized string
    content.vb: Protected Overridable Function Ls(sourceName As String, name As String, culture As CultureInfo, ParamArray args As Object()) As String
  overload: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1.Ls*
  nameWithType.vb: BaseRazorPage(Of TModel).Ls(String, String, CultureInfo, Object())
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage(Of TModel).Ls(System.String, System.String, System.Globalization.CultureInfo, System.Object())
  name.vb: Ls(String, String, CultureInfo, Object())
references:
- uid: Hybrid.AspNetCore.Mvc.Views
  commentId: N:Hybrid.AspNetCore.Mvc.Views
  name: Hybrid.AspNetCore.Mvc.Views
  nameWithType: Hybrid.AspNetCore.Mvc.Views
  fullName: Hybrid.AspNetCore.Mvc.Views
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase
  commentId: T:Microsoft.AspNetCore.Mvc.Razor.RazorPageBase
  parent: Microsoft.AspNetCore.Mvc.Razor
  isExternal: true
  name: RazorPageBase
  nameWithType: RazorPageBase
  fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase
- uid: Microsoft.AspNetCore.Mvc.Razor.RazorPage
  commentId: T:Microsoft.AspNetCore.Mvc.Razor.RazorPage
  parent: Microsoft.AspNetCore.Mvc.Razor
  isExternal: true
  name: RazorPage
  nameWithType: RazorPage
  fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPage
- uid: Microsoft.AspNetCore.Mvc.Razor.RazorPage{{TModel}}
  commentId: T:Microsoft.AspNetCore.Mvc.Razor.RazorPage{`0}
  parent: Microsoft.AspNetCore.Mvc.Razor
  definition: Microsoft.AspNetCore.Mvc.Razor.RazorPage`1
  name: RazorPage<TModel>
  nameWithType: RazorPage<TModel>
  fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPage<TModel>
  nameWithType.vb: RazorPage(Of TModel)
  fullName.vb: Microsoft.AspNetCore.Mvc.Razor.RazorPage(Of TModel)
  name.vb: RazorPage(Of TModel)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Mvc.Razor.RazorPage`1
    name: RazorPage
    nameWithType: RazorPage
    fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPage
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Mvc.Razor.RazorPage`1
    name: RazorPage
    nameWithType: RazorPage
    fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPage
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Mvc.Razor.IRazorPage
  commentId: T:Microsoft.AspNetCore.Mvc.Razor.IRazorPage
  parent: Microsoft.AspNetCore.Mvc.Razor
  isExternal: true
  name: IRazorPage
  nameWithType: IRazorPage
  fullName: Microsoft.AspNetCore.Mvc.Razor.IRazorPage
- uid: Microsoft.AspNetCore.Mvc.Razor.RazorPage{{TModel}}.Model
  commentId: P:Microsoft.AspNetCore.Mvc.Razor.RazorPage{`0}.Model
  parent: Microsoft.AspNetCore.Mvc.Razor.RazorPage{{TModel}}
  definition: Microsoft.AspNetCore.Mvc.Razor.RazorPage`1.Model
  name: Model
  nameWithType: RazorPage<TModel>.Model
  fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPage<TModel>.Model
  nameWithType.vb: RazorPage(Of TModel).Model
  fullName.vb: Microsoft.AspNetCore.Mvc.Razor.RazorPage(Of TModel).Model
- uid: Microsoft.AspNetCore.Mvc.Razor.RazorPage{{TModel}}.ViewData
  commentId: P:Microsoft.AspNetCore.Mvc.Razor.RazorPage{`0}.ViewData
  parent: Microsoft.AspNetCore.Mvc.Razor.RazorPage{{TModel}}
  definition: Microsoft.AspNetCore.Mvc.Razor.RazorPage`1.ViewData
  name: ViewData
  nameWithType: RazorPage<TModel>.ViewData
  fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPage<TModel>.ViewData
  nameWithType.vb: RazorPage(Of TModel).ViewData
  fullName.vb: Microsoft.AspNetCore.Mvc.Razor.RazorPage(Of TModel).ViewData
- uid: Microsoft.AspNetCore.Mvc.Razor.RazorPage.BeginContext(System.Int32,System.Int32,System.Boolean)
  commentId: M:Microsoft.AspNetCore.Mvc.Razor.RazorPage.BeginContext(System.Int32,System.Int32,System.Boolean)
  parent: Microsoft.AspNetCore.Mvc.Razor.RazorPage
  isExternal: true
  name: BeginContext(Int32, Int32, Boolean)
  nameWithType: RazorPage.BeginContext(Int32, Int32, Boolean)
  fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPage.BeginContext(System.Int32, System.Int32, System.Boolean)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Mvc.Razor.RazorPage.BeginContext(System.Int32,System.Int32,System.Boolean)
    name: BeginContext
    nameWithType: RazorPage.BeginContext
    fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPage.BeginContext
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Mvc.Razor.RazorPage.BeginContext(System.Int32,System.Int32,System.Boolean)
    name: BeginContext
    nameWithType: RazorPage.BeginContext
    fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPage.BeginContext
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Mvc.Razor.RazorPage.DefineSection(System.String,Microsoft.AspNetCore.Mvc.Razor.RenderAsyncDelegate)
  commentId: M:Microsoft.AspNetCore.Mvc.Razor.RazorPage.DefineSection(System.String,Microsoft.AspNetCore.Mvc.Razor.RenderAsyncDelegate)
  parent: Microsoft.AspNetCore.Mvc.Razor.RazorPage
  isExternal: true
  name: DefineSection(String, RenderAsyncDelegate)
  nameWithType: RazorPage.DefineSection(String, RenderAsyncDelegate)
  fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPage.DefineSection(System.String, Microsoft.AspNetCore.Mvc.Razor.RenderAsyncDelegate)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Mvc.Razor.RazorPage.DefineSection(System.String,Microsoft.AspNetCore.Mvc.Razor.RenderAsyncDelegate)
    name: DefineSection
    nameWithType: RazorPage.DefineSection
    fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPage.DefineSection
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.AspNetCore.Mvc.Razor.RenderAsyncDelegate
    name: RenderAsyncDelegate
    nameWithType: RenderAsyncDelegate
    fullName: Microsoft.AspNetCore.Mvc.Razor.RenderAsyncDelegate
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Mvc.Razor.RazorPage.DefineSection(System.String,Microsoft.AspNetCore.Mvc.Razor.RenderAsyncDelegate)
    name: DefineSection
    nameWithType: RazorPage.DefineSection
    fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPage.DefineSection
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.AspNetCore.Mvc.Razor.RenderAsyncDelegate
    name: RenderAsyncDelegate
    nameWithType: RenderAsyncDelegate
    fullName: Microsoft.AspNetCore.Mvc.Razor.RenderAsyncDelegate
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Mvc.Razor.RazorPage.EndContext
  commentId: M:Microsoft.AspNetCore.Mvc.Razor.RazorPage.EndContext
  parent: Microsoft.AspNetCore.Mvc.Razor.RazorPage
  isExternal: true
  name: EndContext()
  nameWithType: RazorPage.EndContext()
  fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPage.EndContext()
  spec.csharp:
  - uid: Microsoft.AspNetCore.Mvc.Razor.RazorPage.EndContext
    name: EndContext
    nameWithType: RazorPage.EndContext
    fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPage.EndContext
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Mvc.Razor.RazorPage.EndContext
    name: EndContext
    nameWithType: RazorPage.EndContext
    fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPage.EndContext
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Mvc.Razor.RazorPage.EnsureRenderedBodyOrSections
  commentId: M:Microsoft.AspNetCore.Mvc.Razor.RazorPage.EnsureRenderedBodyOrSections
  parent: Microsoft.AspNetCore.Mvc.Razor.RazorPage
  isExternal: true
  name: EnsureRenderedBodyOrSections()
  nameWithType: RazorPage.EnsureRenderedBodyOrSections()
  fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPage.EnsureRenderedBodyOrSections()
  spec.csharp:
  - uid: Microsoft.AspNetCore.Mvc.Razor.RazorPage.EnsureRenderedBodyOrSections
    name: EnsureRenderedBodyOrSections
    nameWithType: RazorPage.EnsureRenderedBodyOrSections
    fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPage.EnsureRenderedBodyOrSections
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Mvc.Razor.RazorPage.EnsureRenderedBodyOrSections
    name: EnsureRenderedBodyOrSections
    nameWithType: RazorPage.EnsureRenderedBodyOrSections
    fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPage.EnsureRenderedBodyOrSections
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Mvc.Razor.RazorPage.IgnoreBody
  commentId: M:Microsoft.AspNetCore.Mvc.Razor.RazorPage.IgnoreBody
  parent: Microsoft.AspNetCore.Mvc.Razor.RazorPage
  isExternal: true
  name: IgnoreBody()
  nameWithType: RazorPage.IgnoreBody()
  fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPage.IgnoreBody()
  spec.csharp:
  - uid: Microsoft.AspNetCore.Mvc.Razor.RazorPage.IgnoreBody
    name: IgnoreBody
    nameWithType: RazorPage.IgnoreBody
    fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPage.IgnoreBody
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Mvc.Razor.RazorPage.IgnoreBody
    name: IgnoreBody
    nameWithType: RazorPage.IgnoreBody
    fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPage.IgnoreBody
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Mvc.Razor.RazorPage.IgnoreSection(System.String)
  commentId: M:Microsoft.AspNetCore.Mvc.Razor.RazorPage.IgnoreSection(System.String)
  parent: Microsoft.AspNetCore.Mvc.Razor.RazorPage
  isExternal: true
  name: IgnoreSection(String)
  nameWithType: RazorPage.IgnoreSection(String)
  fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPage.IgnoreSection(System.String)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Mvc.Razor.RazorPage.IgnoreSection(System.String)
    name: IgnoreSection
    nameWithType: RazorPage.IgnoreSection
    fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPage.IgnoreSection
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Mvc.Razor.RazorPage.IgnoreSection(System.String)
    name: IgnoreSection
    nameWithType: RazorPage.IgnoreSection
    fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPage.IgnoreSection
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Mvc.Razor.RazorPage.IsSectionDefined(System.String)
  commentId: M:Microsoft.AspNetCore.Mvc.Razor.RazorPage.IsSectionDefined(System.String)
  parent: Microsoft.AspNetCore.Mvc.Razor.RazorPage
  isExternal: true
  name: IsSectionDefined(String)
  nameWithType: RazorPage.IsSectionDefined(String)
  fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPage.IsSectionDefined(System.String)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Mvc.Razor.RazorPage.IsSectionDefined(System.String)
    name: IsSectionDefined
    nameWithType: RazorPage.IsSectionDefined
    fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPage.IsSectionDefined
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Mvc.Razor.RazorPage.IsSectionDefined(System.String)
    name: IsSectionDefined
    nameWithType: RazorPage.IsSectionDefined
    fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPage.IsSectionDefined
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Mvc.Razor.RazorPage.RenderBody
  commentId: M:Microsoft.AspNetCore.Mvc.Razor.RazorPage.RenderBody
  parent: Microsoft.AspNetCore.Mvc.Razor.RazorPage
  isExternal: true
  name: RenderBody()
  nameWithType: RazorPage.RenderBody()
  fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPage.RenderBody()
  spec.csharp:
  - uid: Microsoft.AspNetCore.Mvc.Razor.RazorPage.RenderBody
    name: RenderBody
    nameWithType: RazorPage.RenderBody
    fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPage.RenderBody
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Mvc.Razor.RazorPage.RenderBody
    name: RenderBody
    nameWithType: RazorPage.RenderBody
    fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPage.RenderBody
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Mvc.Razor.RazorPage.RenderSection(System.String)
  commentId: M:Microsoft.AspNetCore.Mvc.Razor.RazorPage.RenderSection(System.String)
  parent: Microsoft.AspNetCore.Mvc.Razor.RazorPage
  isExternal: true
  name: RenderSection(String)
  nameWithType: RazorPage.RenderSection(String)
  fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPage.RenderSection(System.String)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Mvc.Razor.RazorPage.RenderSection(System.String)
    name: RenderSection
    nameWithType: RazorPage.RenderSection
    fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPage.RenderSection
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Mvc.Razor.RazorPage.RenderSection(System.String)
    name: RenderSection
    nameWithType: RazorPage.RenderSection
    fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPage.RenderSection
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Mvc.Razor.RazorPage.RenderSection(System.String,System.Boolean)
  commentId: M:Microsoft.AspNetCore.Mvc.Razor.RazorPage.RenderSection(System.String,System.Boolean)
  parent: Microsoft.AspNetCore.Mvc.Razor.RazorPage
  isExternal: true
  name: RenderSection(String, Boolean)
  nameWithType: RazorPage.RenderSection(String, Boolean)
  fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPage.RenderSection(System.String, System.Boolean)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Mvc.Razor.RazorPage.RenderSection(System.String,System.Boolean)
    name: RenderSection
    nameWithType: RazorPage.RenderSection
    fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPage.RenderSection
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Mvc.Razor.RazorPage.RenderSection(System.String,System.Boolean)
    name: RenderSection
    nameWithType: RazorPage.RenderSection
    fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPage.RenderSection
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Mvc.Razor.RazorPage.RenderSectionAsync(System.String)
  commentId: M:Microsoft.AspNetCore.Mvc.Razor.RazorPage.RenderSectionAsync(System.String)
  parent: Microsoft.AspNetCore.Mvc.Razor.RazorPage
  isExternal: true
  name: RenderSectionAsync(String)
  nameWithType: RazorPage.RenderSectionAsync(String)
  fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPage.RenderSectionAsync(System.String)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Mvc.Razor.RazorPage.RenderSectionAsync(System.String)
    name: RenderSectionAsync
    nameWithType: RazorPage.RenderSectionAsync
    fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPage.RenderSectionAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Mvc.Razor.RazorPage.RenderSectionAsync(System.String)
    name: RenderSectionAsync
    nameWithType: RazorPage.RenderSectionAsync
    fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPage.RenderSectionAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Mvc.Razor.RazorPage.RenderSectionAsync(System.String,System.Boolean)
  commentId: M:Microsoft.AspNetCore.Mvc.Razor.RazorPage.RenderSectionAsync(System.String,System.Boolean)
  parent: Microsoft.AspNetCore.Mvc.Razor.RazorPage
  isExternal: true
  name: RenderSectionAsync(String, Boolean)
  nameWithType: RazorPage.RenderSectionAsync(String, Boolean)
  fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPage.RenderSectionAsync(System.String, System.Boolean)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Mvc.Razor.RazorPage.RenderSectionAsync(System.String,System.Boolean)
    name: RenderSectionAsync
    nameWithType: RazorPage.RenderSectionAsync
    fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPage.RenderSectionAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Mvc.Razor.RazorPage.RenderSectionAsync(System.String,System.Boolean)
    name: RenderSectionAsync
    nameWithType: RazorPage.RenderSectionAsync
    fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPage.RenderSectionAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Mvc.Razor.RazorPage.Context
  commentId: P:Microsoft.AspNetCore.Mvc.Razor.RazorPage.Context
  parent: Microsoft.AspNetCore.Mvc.Razor.RazorPage
  isExternal: true
  name: Context
  nameWithType: RazorPage.Context
  fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPage.Context
- uid: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.AddHtmlAttributeValue(System.String,System.Int32,System.Object,System.Int32,System.Int32,System.Boolean)
  commentId: M:Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.AddHtmlAttributeValue(System.String,System.Int32,System.Object,System.Int32,System.Int32,System.Boolean)
  parent: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase
  isExternal: true
  name: AddHtmlAttributeValue(String, Int32, Object, Int32, Int32, Boolean)
  nameWithType: RazorPageBase.AddHtmlAttributeValue(String, Int32, Object, Int32, Int32, Boolean)
  fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.AddHtmlAttributeValue(System.String, System.Int32, System.Object, System.Int32, System.Int32, System.Boolean)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.AddHtmlAttributeValue(System.String,System.Int32,System.Object,System.Int32,System.Int32,System.Boolean)
    name: AddHtmlAttributeValue
    nameWithType: RazorPageBase.AddHtmlAttributeValue
    fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.AddHtmlAttributeValue
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.AddHtmlAttributeValue(System.String,System.Int32,System.Object,System.Int32,System.Int32,System.Boolean)
    name: AddHtmlAttributeValue
    nameWithType: RazorPageBase.AddHtmlAttributeValue
    fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.AddHtmlAttributeValue
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.BeginAddHtmlAttributeValues(Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext,System.String,System.Int32,Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle)
  commentId: M:Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.BeginAddHtmlAttributeValues(Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext,System.String,System.Int32,Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle)
  parent: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase
  isExternal: true
  name: BeginAddHtmlAttributeValues(TagHelperExecutionContext, String, Int32, HtmlAttributeValueStyle)
  nameWithType: RazorPageBase.BeginAddHtmlAttributeValues(TagHelperExecutionContext, String, Int32, HtmlAttributeValueStyle)
  fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.BeginAddHtmlAttributeValues(Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext, System.String, System.Int32, Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.BeginAddHtmlAttributeValues(Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext,System.String,System.Int32,Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle)
    name: BeginAddHtmlAttributeValues
    nameWithType: RazorPageBase.BeginAddHtmlAttributeValues
    fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.BeginAddHtmlAttributeValues
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext
    name: TagHelperExecutionContext
    nameWithType: TagHelperExecutionContext
    fullName: Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle
    name: HtmlAttributeValueStyle
    nameWithType: HtmlAttributeValueStyle
    fullName: Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.BeginAddHtmlAttributeValues(Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext,System.String,System.Int32,Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle)
    name: BeginAddHtmlAttributeValues
    nameWithType: RazorPageBase.BeginAddHtmlAttributeValues
    fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.BeginAddHtmlAttributeValues
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext
    name: TagHelperExecutionContext
    nameWithType: TagHelperExecutionContext
    fullName: Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle
    name: HtmlAttributeValueStyle
    nameWithType: HtmlAttributeValueStyle
    fullName: Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.BeginWriteAttribute(System.String,System.String,System.Int32,System.String,System.Int32,System.Int32)
  commentId: M:Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.BeginWriteAttribute(System.String,System.String,System.Int32,System.String,System.Int32,System.Int32)
  parent: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase
  isExternal: true
  name: BeginWriteAttribute(String, String, Int32, String, Int32, Int32)
  nameWithType: RazorPageBase.BeginWriteAttribute(String, String, Int32, String, Int32, Int32)
  fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.BeginWriteAttribute(System.String, System.String, System.Int32, System.String, System.Int32, System.Int32)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.BeginWriteAttribute(System.String,System.String,System.Int32,System.String,System.Int32,System.Int32)
    name: BeginWriteAttribute
    nameWithType: RazorPageBase.BeginWriteAttribute
    fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.BeginWriteAttribute
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.BeginWriteAttribute(System.String,System.String,System.Int32,System.String,System.Int32,System.Int32)
    name: BeginWriteAttribute
    nameWithType: RazorPageBase.BeginWriteAttribute
    fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.BeginWriteAttribute
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.BeginWriteTagHelperAttribute
  commentId: M:Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.BeginWriteTagHelperAttribute
  parent: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase
  isExternal: true
  name: BeginWriteTagHelperAttribute()
  nameWithType: RazorPageBase.BeginWriteTagHelperAttribute()
  fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.BeginWriteTagHelperAttribute()
  spec.csharp:
  - uid: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.BeginWriteTagHelperAttribute
    name: BeginWriteTagHelperAttribute
    nameWithType: RazorPageBase.BeginWriteTagHelperAttribute
    fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.BeginWriteTagHelperAttribute
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.BeginWriteTagHelperAttribute
    name: BeginWriteTagHelperAttribute
    nameWithType: RazorPageBase.BeginWriteTagHelperAttribute
    fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.BeginWriteTagHelperAttribute
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.CreateTagHelper``1
  commentId: M:Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.CreateTagHelper``1
  parent: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase
  isExternal: true
  name: CreateTagHelper<TTagHelper>()
  nameWithType: RazorPageBase.CreateTagHelper<TTagHelper>()
  fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.CreateTagHelper<TTagHelper>()
  nameWithType.vb: RazorPageBase.CreateTagHelper(Of TTagHelper)()
  fullName.vb: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.CreateTagHelper(Of TTagHelper)()
  name.vb: CreateTagHelper(Of TTagHelper)()
  spec.csharp:
  - uid: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.CreateTagHelper``1
    name: CreateTagHelper<TTagHelper>
    nameWithType: RazorPageBase.CreateTagHelper<TTagHelper>
    fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.CreateTagHelper<TTagHelper>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.CreateTagHelper``1
    name: CreateTagHelper(Of TTagHelper)
    nameWithType: RazorPageBase.CreateTagHelper(Of TTagHelper)
    fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.CreateTagHelper(Of TTagHelper)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.EndAddHtmlAttributeValues(Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext)
  commentId: M:Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.EndAddHtmlAttributeValues(Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext)
  parent: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase
  isExternal: true
  name: EndAddHtmlAttributeValues(TagHelperExecutionContext)
  nameWithType: RazorPageBase.EndAddHtmlAttributeValues(TagHelperExecutionContext)
  fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.EndAddHtmlAttributeValues(Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.EndAddHtmlAttributeValues(Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext)
    name: EndAddHtmlAttributeValues
    nameWithType: RazorPageBase.EndAddHtmlAttributeValues
    fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.EndAddHtmlAttributeValues
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext
    name: TagHelperExecutionContext
    nameWithType: TagHelperExecutionContext
    fullName: Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.EndAddHtmlAttributeValues(Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext)
    name: EndAddHtmlAttributeValues
    nameWithType: RazorPageBase.EndAddHtmlAttributeValues
    fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.EndAddHtmlAttributeValues
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext
    name: TagHelperExecutionContext
    nameWithType: TagHelperExecutionContext
    fullName: Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.EndTagHelperWritingScope
  commentId: M:Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.EndTagHelperWritingScope
  parent: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase
  isExternal: true
  name: EndTagHelperWritingScope()
  nameWithType: RazorPageBase.EndTagHelperWritingScope()
  fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.EndTagHelperWritingScope()
  spec.csharp:
  - uid: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.EndTagHelperWritingScope
    name: EndTagHelperWritingScope
    nameWithType: RazorPageBase.EndTagHelperWritingScope
    fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.EndTagHelperWritingScope
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.EndTagHelperWritingScope
    name: EndTagHelperWritingScope
    nameWithType: RazorPageBase.EndTagHelperWritingScope
    fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.EndTagHelperWritingScope
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.EndWriteAttribute
  commentId: M:Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.EndWriteAttribute
  parent: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase
  isExternal: true
  name: EndWriteAttribute()
  nameWithType: RazorPageBase.EndWriteAttribute()
  fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.EndWriteAttribute()
  spec.csharp:
  - uid: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.EndWriteAttribute
    name: EndWriteAttribute
    nameWithType: RazorPageBase.EndWriteAttribute
    fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.EndWriteAttribute
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.EndWriteAttribute
    name: EndWriteAttribute
    nameWithType: RazorPageBase.EndWriteAttribute
    fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.EndWriteAttribute
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.EndWriteTagHelperAttribute
  commentId: M:Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.EndWriteTagHelperAttribute
  parent: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase
  isExternal: true
  name: EndWriteTagHelperAttribute()
  nameWithType: RazorPageBase.EndWriteTagHelperAttribute()
  fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.EndWriteTagHelperAttribute()
  spec.csharp:
  - uid: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.EndWriteTagHelperAttribute
    name: EndWriteTagHelperAttribute
    nameWithType: RazorPageBase.EndWriteTagHelperAttribute
    fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.EndWriteTagHelperAttribute
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.EndWriteTagHelperAttribute
    name: EndWriteTagHelperAttribute
    nameWithType: RazorPageBase.EndWriteTagHelperAttribute
    fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.EndWriteTagHelperAttribute
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.ExecuteAsync
  commentId: M:Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.ExecuteAsync
  parent: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase
  isExternal: true
  name: ExecuteAsync()
  nameWithType: RazorPageBase.ExecuteAsync()
  fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.ExecuteAsync()
  spec.csharp:
  - uid: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.ExecuteAsync
    name: ExecuteAsync
    nameWithType: RazorPageBase.ExecuteAsync
    fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.ExecuteAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.ExecuteAsync
    name: ExecuteAsync
    nameWithType: RazorPageBase.ExecuteAsync
    fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.ExecuteAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.FlushAsync
  commentId: M:Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.FlushAsync
  parent: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase
  isExternal: true
  name: FlushAsync()
  nameWithType: RazorPageBase.FlushAsync()
  fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.FlushAsync()
  spec.csharp:
  - uid: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.FlushAsync
    name: FlushAsync
    nameWithType: RazorPageBase.FlushAsync
    fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.FlushAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.FlushAsync
    name: FlushAsync
    nameWithType: RazorPageBase.FlushAsync
    fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.FlushAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.Href(System.String)
  commentId: M:Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.Href(System.String)
  parent: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase
  isExternal: true
  name: Href(String)
  nameWithType: RazorPageBase.Href(String)
  fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.Href(System.String)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.Href(System.String)
    name: Href
    nameWithType: RazorPageBase.Href
    fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.Href
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.Href(System.String)
    name: Href
    nameWithType: RazorPageBase.Href
    fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.Href
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.PopWriter
  commentId: M:Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.PopWriter
  parent: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase
  isExternal: true
  name: PopWriter()
  nameWithType: RazorPageBase.PopWriter()
  fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.PopWriter()
  spec.csharp:
  - uid: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.PopWriter
    name: PopWriter
    nameWithType: RazorPageBase.PopWriter
    fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.PopWriter
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.PopWriter
    name: PopWriter
    nameWithType: RazorPageBase.PopWriter
    fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.PopWriter
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.PushWriter(System.IO.TextWriter)
  commentId: M:Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.PushWriter(System.IO.TextWriter)
  parent: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase
  isExternal: true
  name: PushWriter(TextWriter)
  nameWithType: RazorPageBase.PushWriter(TextWriter)
  fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.PushWriter(System.IO.TextWriter)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.PushWriter(System.IO.TextWriter)
    name: PushWriter
    nameWithType: RazorPageBase.PushWriter
    fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.PushWriter
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IO.TextWriter
    name: TextWriter
    nameWithType: TextWriter
    fullName: System.IO.TextWriter
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.PushWriter(System.IO.TextWriter)
    name: PushWriter
    nameWithType: RazorPageBase.PushWriter
    fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.PushWriter
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IO.TextWriter
    name: TextWriter
    nameWithType: TextWriter
    fullName: System.IO.TextWriter
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.SetAntiforgeryCookieAndHeader
  commentId: M:Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.SetAntiforgeryCookieAndHeader
  parent: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase
  isExternal: true
  name: SetAntiforgeryCookieAndHeader()
  nameWithType: RazorPageBase.SetAntiforgeryCookieAndHeader()
  fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.SetAntiforgeryCookieAndHeader()
  spec.csharp:
  - uid: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.SetAntiforgeryCookieAndHeader
    name: SetAntiforgeryCookieAndHeader
    nameWithType: RazorPageBase.SetAntiforgeryCookieAndHeader
    fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.SetAntiforgeryCookieAndHeader
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.SetAntiforgeryCookieAndHeader
    name: SetAntiforgeryCookieAndHeader
    nameWithType: RazorPageBase.SetAntiforgeryCookieAndHeader
    fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.SetAntiforgeryCookieAndHeader
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.StartTagHelperWritingScope(System.Text.Encodings.Web.HtmlEncoder)
  commentId: M:Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.StartTagHelperWritingScope(System.Text.Encodings.Web.HtmlEncoder)
  parent: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase
  isExternal: true
  name: StartTagHelperWritingScope(HtmlEncoder)
  nameWithType: RazorPageBase.StartTagHelperWritingScope(HtmlEncoder)
  fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.StartTagHelperWritingScope(System.Text.Encodings.Web.HtmlEncoder)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.StartTagHelperWritingScope(System.Text.Encodings.Web.HtmlEncoder)
    name: StartTagHelperWritingScope
    nameWithType: RazorPageBase.StartTagHelperWritingScope
    fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.StartTagHelperWritingScope
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Text.Encodings.Web.HtmlEncoder
    name: HtmlEncoder
    nameWithType: HtmlEncoder
    fullName: System.Text.Encodings.Web.HtmlEncoder
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.StartTagHelperWritingScope(System.Text.Encodings.Web.HtmlEncoder)
    name: StartTagHelperWritingScope
    nameWithType: RazorPageBase.StartTagHelperWritingScope
    fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.StartTagHelperWritingScope
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Text.Encodings.Web.HtmlEncoder
    name: HtmlEncoder
    nameWithType: HtmlEncoder
    fullName: System.Text.Encodings.Web.HtmlEncoder
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.Write(System.Object)
  commentId: M:Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.Write(System.Object)
  parent: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase
  isExternal: true
  name: Write(Object)
  nameWithType: RazorPageBase.Write(Object)
  fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.Write(System.Object)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.Write(System.Object)
    name: Write
    nameWithType: RazorPageBase.Write
    fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.Write
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.Write(System.Object)
    name: Write
    nameWithType: RazorPageBase.Write
    fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.Write
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.Write(System.String)
  commentId: M:Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.Write(System.String)
  parent: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase
  isExternal: true
  name: Write(String)
  nameWithType: RazorPageBase.Write(String)
  fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.Write(System.String)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.Write(System.String)
    name: Write
    nameWithType: RazorPageBase.Write
    fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.Write
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.Write(System.String)
    name: Write
    nameWithType: RazorPageBase.Write
    fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.Write
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.WriteAttributeValue(System.String,System.Int32,System.Object,System.Int32,System.Int32,System.Boolean)
  commentId: M:Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.WriteAttributeValue(System.String,System.Int32,System.Object,System.Int32,System.Int32,System.Boolean)
  parent: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase
  isExternal: true
  name: WriteAttributeValue(String, Int32, Object, Int32, Int32, Boolean)
  nameWithType: RazorPageBase.WriteAttributeValue(String, Int32, Object, Int32, Int32, Boolean)
  fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.WriteAttributeValue(System.String, System.Int32, System.Object, System.Int32, System.Int32, System.Boolean)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.WriteAttributeValue(System.String,System.Int32,System.Object,System.Int32,System.Int32,System.Boolean)
    name: WriteAttributeValue
    nameWithType: RazorPageBase.WriteAttributeValue
    fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.WriteAttributeValue
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.WriteAttributeValue(System.String,System.Int32,System.Object,System.Int32,System.Int32,System.Boolean)
    name: WriteAttributeValue
    nameWithType: RazorPageBase.WriteAttributeValue
    fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.WriteAttributeValue
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.WriteLiteral(System.Object)
  commentId: M:Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.WriteLiteral(System.Object)
  parent: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase
  isExternal: true
  name: WriteLiteral(Object)
  nameWithType: RazorPageBase.WriteLiteral(Object)
  fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.WriteLiteral(System.Object)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.WriteLiteral(System.Object)
    name: WriteLiteral
    nameWithType: RazorPageBase.WriteLiteral
    fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.WriteLiteral
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.WriteLiteral(System.Object)
    name: WriteLiteral
    nameWithType: RazorPageBase.WriteLiteral
    fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.WriteLiteral
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.WriteLiteral(System.String)
  commentId: M:Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.WriteLiteral(System.String)
  parent: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase
  isExternal: true
  name: WriteLiteral(String)
  nameWithType: RazorPageBase.WriteLiteral(String)
  fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.WriteLiteral(System.String)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.WriteLiteral(System.String)
    name: WriteLiteral
    nameWithType: RazorPageBase.WriteLiteral
    fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.WriteLiteral
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.WriteLiteral(System.String)
    name: WriteLiteral
    nameWithType: RazorPageBase.WriteLiteral
    fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.WriteLiteral
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.BodyContent
  commentId: P:Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.BodyContent
  parent: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase
  isExternal: true
  name: BodyContent
  nameWithType: RazorPageBase.BodyContent
  fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.BodyContent
- uid: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.DiagnosticSource
  commentId: P:Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.DiagnosticSource
  parent: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase
  isExternal: true
  name: DiagnosticSource
  nameWithType: RazorPageBase.DiagnosticSource
  fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.DiagnosticSource
- uid: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.HtmlEncoder
  commentId: P:Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.HtmlEncoder
  parent: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase
  isExternal: true
  name: HtmlEncoder
  nameWithType: RazorPageBase.HtmlEncoder
  fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.HtmlEncoder
- uid: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.IsLayoutBeingRendered
  commentId: P:Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.IsLayoutBeingRendered
  parent: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase
  isExternal: true
  name: IsLayoutBeingRendered
  nameWithType: RazorPageBase.IsLayoutBeingRendered
  fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.IsLayoutBeingRendered
- uid: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.Layout
  commentId: P:Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.Layout
  parent: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase
  isExternal: true
  name: Layout
  nameWithType: RazorPageBase.Layout
  fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.Layout
- uid: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.Output
  commentId: P:Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.Output
  parent: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase
  isExternal: true
  name: Output
  nameWithType: RazorPageBase.Output
  fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.Output
- uid: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.Path
  commentId: P:Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.Path
  parent: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase
  isExternal: true
  name: Path
  nameWithType: RazorPageBase.Path
  fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.Path
- uid: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.PreviousSectionWriters
  commentId: P:Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.PreviousSectionWriters
  parent: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase
  isExternal: true
  name: PreviousSectionWriters
  nameWithType: RazorPageBase.PreviousSectionWriters
  fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.PreviousSectionWriters
- uid: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.SectionWriters
  commentId: P:Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.SectionWriters
  parent: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase
  isExternal: true
  name: SectionWriters
  nameWithType: RazorPageBase.SectionWriters
  fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.SectionWriters
- uid: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.TempData
  commentId: P:Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.TempData
  parent: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase
  isExternal: true
  name: TempData
  nameWithType: RazorPageBase.TempData
  fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.TempData
- uid: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.User
  commentId: P:Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.User
  parent: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase
  isExternal: true
  name: User
  nameWithType: RazorPageBase.User
  fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.User
- uid: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.ViewBag
  commentId: P:Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.ViewBag
  parent: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase
  isExternal: true
  name: ViewBag
  nameWithType: RazorPageBase.ViewBag
  fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.ViewBag
- uid: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.ViewContext
  commentId: P:Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.ViewContext
  parent: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase
  isExternal: true
  name: ViewContext
  nameWithType: RazorPageBase.ViewContext
  fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPageBase.ViewContext
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Extensions.ObjectExtensions.CastTo(System.Type)
  commentId: M:Hybrid.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
  parent: Hybrid.Extensions.ObjectExtensions
  definition: Hybrid.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
  name: CastTo(Type)
  nameWithType: ObjectExtensions.CastTo(Type)
  fullName: Hybrid.Extensions.ObjectExtensions.CastTo(System.Type)
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo(System.Type)
    name: CastTo
    nameWithType: ObjectExtensions.CastTo
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo(System.Type)
    name: CastTo
    nameWithType: ObjectExtensions.CastTo
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Extensions.ObjectExtensions.CastTo``1
  commentId: M:Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object)
  parent: Hybrid.Extensions.ObjectExtensions
  definition: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object)
  name: CastTo<T>()
  nameWithType: ObjectExtensions.CastTo<T>()
  fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>()
  nameWithType.vb: ObjectExtensions.CastTo(Of T)()
  fullName.vb: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)()
  name.vb: CastTo(Of T)()
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1
    name: CastTo<T>
    nameWithType: ObjectExtensions.CastTo<T>
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1
    name: CastTo(Of T)
    nameWithType: ObjectExtensions.CastTo(Of T)
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Extensions.ObjectExtensions.CastTo``1({T})
  commentId: M:Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
  parent: Hybrid.Extensions.ObjectExtensions
  definition: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
  name: CastTo<T>(T)
  nameWithType: ObjectExtensions.CastTo<T>(T)
  fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>(T)
  nameWithType.vb: ObjectExtensions.CastTo(Of T)(T)
  fullName.vb: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)(T)
  name.vb: CastTo(Of T)(T)
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(``0)
    name: CastTo<T>
    nameWithType: ObjectExtensions.CastTo<T>
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(``0)
    name: CastTo(Of T)
    nameWithType: ObjectExtensions.CastTo(Of T)
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1.Hybrid.Extensions.ObjectExtensions.IsIn``1(Hybrid.AspNetCore.Mvc.Views.BaseRazorPage{{TModel}}[])
  commentId: M:Hybrid.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
  parent: Hybrid.Extensions.ObjectExtensions
  definition: Hybrid.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
  name: IsIn<BaseRazorPage<TModel>>(BaseRazorPage<TModel>[])
  nameWithType: ObjectExtensions.IsIn<BaseRazorPage<TModel>>(BaseRazorPage<TModel>[])
  fullName: Hybrid.Extensions.ObjectExtensions.IsIn<Hybrid.AspNetCore.Mvc.Views.BaseRazorPage<TModel>>(Hybrid.AspNetCore.Mvc.Views.BaseRazorPage<TModel>[])
  nameWithType.vb: ObjectExtensions.IsIn(Of BaseRazorPage(Of TModel))(BaseRazorPage(Of TModel)())
  fullName.vb: Hybrid.Extensions.ObjectExtensions.IsIn(Of Hybrid.AspNetCore.Mvc.Views.BaseRazorPage(Of TModel))(Hybrid.AspNetCore.Mvc.Views.BaseRazorPage(Of TModel)())
  name.vb: IsIn(Of BaseRazorPage(Of TModel))(BaseRazorPage(Of TModel)())
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.IsIn``1(``0[])
    name: IsIn<BaseRazorPage<TModel>>
    nameWithType: ObjectExtensions.IsIn<BaseRazorPage<TModel>>
    fullName: Hybrid.Extensions.ObjectExtensions.IsIn<Hybrid.AspNetCore.Mvc.Views.BaseRazorPage<TModel>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1
    name: BaseRazorPage
    nameWithType: BaseRazorPage
    fullName: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage
  - name: <
    nameWithType: <
    fullName: <
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.IsIn``1(``0[])
    name: IsIn(Of BaseRazorPage(Of TModel))
    nameWithType: ObjectExtensions.IsIn(Of BaseRazorPage(Of TModel))
    fullName: Hybrid.Extensions.ObjectExtensions.IsIn(Of Hybrid.AspNetCore.Mvc.Views.BaseRazorPage(Of TModel))
  - name: (
    nameWithType: (
    fullName: (
  - uid: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1
    name: BaseRazorPage
    nameWithType: BaseRazorPage
    fullName: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Extensions.ObjectExtensions.ToDynamic
  commentId: M:Hybrid.Extensions.ObjectExtensions.ToDynamic(System.Object)
  parent: Hybrid.Extensions.ObjectExtensions
  definition: Hybrid.Extensions.ObjectExtensions.ToDynamic(System.Object)
  name: ToDynamic()
  nameWithType: ObjectExtensions.ToDynamic()
  fullName: Hybrid.Extensions.ObjectExtensions.ToDynamic()
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.ToDynamic
    name: ToDynamic
    nameWithType: ObjectExtensions.ToDynamic
    fullName: Hybrid.Extensions.ObjectExtensions.ToDynamic
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.ToDynamic
    name: ToDynamic
    nameWithType: ObjectExtensions.ToDynamic
    fullName: Hybrid.Extensions.ObjectExtensions.ToDynamic
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1.Hybrid.Extensions.ObjectExtensions.DeepClone``1
  commentId: M:Hybrid.Extensions.ObjectExtensions.DeepClone``1(``0)
  parent: Hybrid.Extensions.ObjectExtensions
  definition: Hybrid.Extensions.ObjectExtensions.DeepClone``1(``0)
  name: DeepClone<BaseRazorPage<TModel>>()
  nameWithType: ObjectExtensions.DeepClone<BaseRazorPage<TModel>>()
  fullName: Hybrid.Extensions.ObjectExtensions.DeepClone<Hybrid.AspNetCore.Mvc.Views.BaseRazorPage<TModel>>()
  nameWithType.vb: ObjectExtensions.DeepClone(Of BaseRazorPage(Of TModel))()
  fullName.vb: Hybrid.Extensions.ObjectExtensions.DeepClone(Of Hybrid.AspNetCore.Mvc.Views.BaseRazorPage(Of TModel))()
  name.vb: DeepClone(Of BaseRazorPage(Of TModel))()
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.DeepClone``1
    name: DeepClone<BaseRazorPage<TModel>>
    nameWithType: ObjectExtensions.DeepClone<BaseRazorPage<TModel>>
    fullName: Hybrid.Extensions.ObjectExtensions.DeepClone<Hybrid.AspNetCore.Mvc.Views.BaseRazorPage<TModel>>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.DeepClone``1
    name: DeepClone(Of BaseRazorPage(Of TModel))
    nameWithType: ObjectExtensions.DeepClone(Of BaseRazorPage(Of TModel))
    fullName: Hybrid.Extensions.ObjectExtensions.DeepClone(Of Hybrid.AspNetCore.Mvc.Views.BaseRazorPage(Of TModel))
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1.Hybrid.Extensions.ParameterCheckExtensions.Required``1(System.Func{Hybrid.AspNetCore.Mvc.Views.BaseRazorPage{{TModel}},System.Boolean},System.String)
  commentId: M:Hybrid.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
  parent: Hybrid.Extensions.ParameterCheckExtensions
  definition: Hybrid.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
  name: Required<BaseRazorPage<TModel>>(Func<BaseRazorPage<TModel>, Boolean>, String)
  nameWithType: ParameterCheckExtensions.Required<BaseRazorPage<TModel>>(Func<BaseRazorPage<TModel>, Boolean>, String)
  fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<Hybrid.AspNetCore.Mvc.Views.BaseRazorPage<TModel>>(System.Func<Hybrid.AspNetCore.Mvc.Views.BaseRazorPage<TModel>, System.Boolean>, System.String)
  nameWithType.vb: ParameterCheckExtensions.Required(Of BaseRazorPage(Of TModel))(Func(Of BaseRazorPage(Of TModel), Boolean), String)
  fullName.vb: Hybrid.Extensions.ParameterCheckExtensions.Required(Of Hybrid.AspNetCore.Mvc.Views.BaseRazorPage(Of TModel))(System.Func(Of Hybrid.AspNetCore.Mvc.Views.BaseRazorPage(Of TModel), System.Boolean), System.String)
  name.vb: Required(Of BaseRazorPage(Of TModel))(Func(Of BaseRazorPage(Of TModel), Boolean), String)
  spec.csharp:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``1(System.Func{``0,System.Boolean},System.String)
    name: Required<BaseRazorPage<TModel>>
    nameWithType: ParameterCheckExtensions.Required<BaseRazorPage<TModel>>
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<Hybrid.AspNetCore.Mvc.Views.BaseRazorPage<TModel>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1
    name: BaseRazorPage
    nameWithType: BaseRazorPage
    fullName: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage
  - name: <
    nameWithType: <
    fullName: <
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``1(System.Func{``0,System.Boolean},System.String)
    name: Required(Of BaseRazorPage(Of TModel))
    nameWithType: ParameterCheckExtensions.Required(Of BaseRazorPage(Of TModel))
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required(Of Hybrid.AspNetCore.Mvc.Views.BaseRazorPage(Of TModel))
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1
    name: BaseRazorPage
    nameWithType: BaseRazorPage
    fullName: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1.Hybrid.Extensions.ParameterCheckExtensions.Required``2(System.Func{Hybrid.AspNetCore.Mvc.Views.BaseRazorPage{{TModel}},System.Boolean},System.String)
  commentId: M:Hybrid.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
  parent: Hybrid.Extensions.ParameterCheckExtensions
  definition: Hybrid.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
  name: Required<BaseRazorPage<TModel>, TException>(Func<BaseRazorPage<TModel>, Boolean>, String)
  nameWithType: ParameterCheckExtensions.Required<BaseRazorPage<TModel>, TException>(Func<BaseRazorPage<TModel>, Boolean>, String)
  fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<Hybrid.AspNetCore.Mvc.Views.BaseRazorPage<TModel>, TException>(System.Func<Hybrid.AspNetCore.Mvc.Views.BaseRazorPage<TModel>, System.Boolean>, System.String)
  nameWithType.vb: ParameterCheckExtensions.Required(Of BaseRazorPage(Of TModel), TException)(Func(Of BaseRazorPage(Of TModel), Boolean), String)
  fullName.vb: Hybrid.Extensions.ParameterCheckExtensions.Required(Of Hybrid.AspNetCore.Mvc.Views.BaseRazorPage(Of TModel), TException)(System.Func(Of Hybrid.AspNetCore.Mvc.Views.BaseRazorPage(Of TModel), System.Boolean), System.String)
  name.vb: Required(Of BaseRazorPage(Of TModel), TException)(Func(Of BaseRazorPage(Of TModel), Boolean), String)
  spec.csharp:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``2(System.Func{``0,System.Boolean},System.String)
    name: Required<BaseRazorPage<TModel>, TException>
    nameWithType: ParameterCheckExtensions.Required<BaseRazorPage<TModel>, TException>
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<Hybrid.AspNetCore.Mvc.Views.BaseRazorPage<TModel>, TException>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1
    name: BaseRazorPage
    nameWithType: BaseRazorPage
    fullName: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage
  - name: <
    nameWithType: <
    fullName: <
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``2(System.Func{``0,System.Boolean},System.String)
    name: Required(Of BaseRazorPage(Of TModel), TException)
    nameWithType: ParameterCheckExtensions.Required(Of BaseRazorPage(Of TModel), TException)
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required(Of Hybrid.AspNetCore.Mvc.Views.BaseRazorPage(Of TModel), TException)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1
    name: BaseRazorPage
    nameWithType: BaseRazorPage
    fullName: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1.Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(System.String)
  commentId: M:Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
  parent: Hybrid.Extensions.ParameterCheckExtensions
  definition: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
  name: CheckNotNull<BaseRazorPage<TModel>>(String)
  nameWithType: ParameterCheckExtensions.CheckNotNull<BaseRazorPage<TModel>>(String)
  fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull<Hybrid.AspNetCore.Mvc.Views.BaseRazorPage<TModel>>(System.String)
  nameWithType.vb: ParameterCheckExtensions.CheckNotNull(Of BaseRazorPage(Of TModel))(String)
  fullName.vb: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull(Of Hybrid.AspNetCore.Mvc.Views.BaseRazorPage(Of TModel))(System.String)
  name.vb: CheckNotNull(Of BaseRazorPage(Of TModel))(String)
  spec.csharp:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(System.String)
    name: CheckNotNull<BaseRazorPage<TModel>>
    nameWithType: ParameterCheckExtensions.CheckNotNull<BaseRazorPage<TModel>>
    fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull<Hybrid.AspNetCore.Mvc.Views.BaseRazorPage<TModel>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(System.String)
    name: CheckNotNull(Of BaseRazorPage(Of TModel))
    nameWithType: ParameterCheckExtensions.CheckNotNull(Of BaseRazorPage(Of TModel))
    fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull(Of Hybrid.AspNetCore.Mvc.Views.BaseRazorPage(Of TModel))
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1.Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{Hybrid.AspNetCore.Mvc.Views.BaseRazorPage{{TModel}}},System.Action{System.Exception},System.Action{Hybrid.AspNetCore.Mvc.Views.BaseRazorPage{{TModel}}})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
  parent: Hybrid.Extensions.TryCatchExtensions
  definition: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
  name: TryCatch<BaseRazorPage<TModel>>(Action<BaseRazorPage<TModel>>, Action<Exception>, Action<BaseRazorPage<TModel>>)
  nameWithType: TryCatchExtensions.TryCatch<BaseRazorPage<TModel>>(Action<BaseRazorPage<TModel>>, Action<Exception>, Action<BaseRazorPage<TModel>>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.AspNetCore.Mvc.Views.BaseRazorPage<TModel>>(System.Action<Hybrid.AspNetCore.Mvc.Views.BaseRazorPage<TModel>>, System.Action<System.Exception>, System.Action<Hybrid.AspNetCore.Mvc.Views.BaseRazorPage<TModel>>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of BaseRazorPage(Of TModel))(Action(Of BaseRazorPage(Of TModel)), Action(Of Exception), Action(Of BaseRazorPage(Of TModel)))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.AspNetCore.Mvc.Views.BaseRazorPage(Of TModel))(System.Action(Of Hybrid.AspNetCore.Mvc.Views.BaseRazorPage(Of TModel)), System.Action(Of System.Exception), System.Action(Of Hybrid.AspNetCore.Mvc.Views.BaseRazorPage(Of TModel)))
  name.vb: TryCatch(Of BaseRazorPage(Of TModel))(Action(Of BaseRazorPage(Of TModel)), Action(Of Exception), Action(Of BaseRazorPage(Of TModel)))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{``0},System.Action{System.Exception},System.Action{``0})
    name: TryCatch<BaseRazorPage<TModel>>
    nameWithType: TryCatchExtensions.TryCatch<BaseRazorPage<TModel>>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.AspNetCore.Mvc.Views.BaseRazorPage<TModel>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1
    name: BaseRazorPage
    nameWithType: BaseRazorPage
    fullName: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage
  - name: <
    nameWithType: <
    fullName: <
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1
    name: BaseRazorPage
    nameWithType: BaseRazorPage
    fullName: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage
  - name: <
    nameWithType: <
    fullName: <
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{``0},System.Action{System.Exception},System.Action{``0})
    name: TryCatch(Of BaseRazorPage(Of TModel))
    nameWithType: TryCatchExtensions.TryCatch(Of BaseRazorPage(Of TModel))
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.AspNetCore.Mvc.Views.BaseRazorPage(Of TModel))
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1
    name: BaseRazorPage
    nameWithType: BaseRazorPage
    fullName: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1
    name: BaseRazorPage
    nameWithType: BaseRazorPage
    fullName: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1.Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{Hybrid.AspNetCore.Mvc.Views.BaseRazorPage{{TModel}}},System.Action{System.Exception})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
  parent: Hybrid.Extensions.TryCatchExtensions
  definition: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
  name: TryCatch<BaseRazorPage<TModel>>(Action<BaseRazorPage<TModel>>, Action<Exception>)
  nameWithType: TryCatchExtensions.TryCatch<BaseRazorPage<TModel>>(Action<BaseRazorPage<TModel>>, Action<Exception>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.AspNetCore.Mvc.Views.BaseRazorPage<TModel>>(System.Action<Hybrid.AspNetCore.Mvc.Views.BaseRazorPage<TModel>>, System.Action<System.Exception>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of BaseRazorPage(Of TModel))(Action(Of BaseRazorPage(Of TModel)), Action(Of Exception))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.AspNetCore.Mvc.Views.BaseRazorPage(Of TModel))(System.Action(Of Hybrid.AspNetCore.Mvc.Views.BaseRazorPage(Of TModel)), System.Action(Of System.Exception))
  name.vb: TryCatch(Of BaseRazorPage(Of TModel))(Action(Of BaseRazorPage(Of TModel)), Action(Of Exception))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{``0},System.Action{System.Exception})
    name: TryCatch<BaseRazorPage<TModel>>
    nameWithType: TryCatchExtensions.TryCatch<BaseRazorPage<TModel>>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.AspNetCore.Mvc.Views.BaseRazorPage<TModel>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1
    name: BaseRazorPage
    nameWithType: BaseRazorPage
    fullName: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage
  - name: <
    nameWithType: <
    fullName: <
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{``0},System.Action{System.Exception})
    name: TryCatch(Of BaseRazorPage(Of TModel))
    nameWithType: TryCatchExtensions.TryCatch(Of BaseRazorPage(Of TModel))
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.AspNetCore.Mvc.Views.BaseRazorPage(Of TModel))
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1
    name: BaseRazorPage
    nameWithType: BaseRazorPage
    fullName: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1.Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{Hybrid.AspNetCore.Mvc.Views.BaseRazorPage{{TModel}},{TResult}},System.Action{System.Exception},System.Action{Hybrid.AspNetCore.Mvc.Views.BaseRazorPage{{TModel}}})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
  parent: Hybrid.Extensions.TryCatchExtensions
  definition: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
  name: TryCatch<BaseRazorPage<TModel>, TResult>(Func<BaseRazorPage<TModel>, TResult>, Action<Exception>, Action<BaseRazorPage<TModel>>)
  nameWithType: TryCatchExtensions.TryCatch<BaseRazorPage<TModel>, TResult>(Func<BaseRazorPage<TModel>, TResult>, Action<Exception>, Action<BaseRazorPage<TModel>>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.AspNetCore.Mvc.Views.BaseRazorPage<TModel>, TResult>(System.Func<Hybrid.AspNetCore.Mvc.Views.BaseRazorPage<TModel>, TResult>, System.Action<System.Exception>, System.Action<Hybrid.AspNetCore.Mvc.Views.BaseRazorPage<TModel>>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of BaseRazorPage(Of TModel), TResult)(Func(Of BaseRazorPage(Of TModel), TResult), Action(Of Exception), Action(Of BaseRazorPage(Of TModel)))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.AspNetCore.Mvc.Views.BaseRazorPage(Of TModel), TResult)(System.Func(Of Hybrid.AspNetCore.Mvc.Views.BaseRazorPage(Of TModel), TResult), System.Action(Of System.Exception), System.Action(Of Hybrid.AspNetCore.Mvc.Views.BaseRazorPage(Of TModel)))
  name.vb: TryCatch(Of BaseRazorPage(Of TModel), TResult)(Func(Of BaseRazorPage(Of TModel), TResult), Action(Of Exception), Action(Of BaseRazorPage(Of TModel)))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
    name: TryCatch<BaseRazorPage<TModel>, TResult>
    nameWithType: TryCatchExtensions.TryCatch<BaseRazorPage<TModel>, TResult>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.AspNetCore.Mvc.Views.BaseRazorPage<TModel>, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1
    name: BaseRazorPage
    nameWithType: BaseRazorPage
    fullName: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage
  - name: <
    nameWithType: <
    fullName: <
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1
    name: BaseRazorPage
    nameWithType: BaseRazorPage
    fullName: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage
  - name: <
    nameWithType: <
    fullName: <
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
    name: TryCatch(Of BaseRazorPage(Of TModel), TResult)
    nameWithType: TryCatchExtensions.TryCatch(Of BaseRazorPage(Of TModel), TResult)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.AspNetCore.Mvc.Views.BaseRazorPage(Of TModel), TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1
    name: BaseRazorPage
    nameWithType: BaseRazorPage
    fullName: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1
    name: BaseRazorPage
    nameWithType: BaseRazorPage
    fullName: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1.Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{Hybrid.AspNetCore.Mvc.Views.BaseRazorPage{{TModel}},{TResult}},System.Action{System.Exception})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
  parent: Hybrid.Extensions.TryCatchExtensions
  definition: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
  name: TryCatch<BaseRazorPage<TModel>, TResult>(Func<BaseRazorPage<TModel>, TResult>, Action<Exception>)
  nameWithType: TryCatchExtensions.TryCatch<BaseRazorPage<TModel>, TResult>(Func<BaseRazorPage<TModel>, TResult>, Action<Exception>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.AspNetCore.Mvc.Views.BaseRazorPage<TModel>, TResult>(System.Func<Hybrid.AspNetCore.Mvc.Views.BaseRazorPage<TModel>, TResult>, System.Action<System.Exception>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of BaseRazorPage(Of TModel), TResult)(Func(Of BaseRazorPage(Of TModel), TResult), Action(Of Exception))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.AspNetCore.Mvc.Views.BaseRazorPage(Of TModel), TResult)(System.Func(Of Hybrid.AspNetCore.Mvc.Views.BaseRazorPage(Of TModel), TResult), System.Action(Of System.Exception))
  name.vb: TryCatch(Of BaseRazorPage(Of TModel), TResult)(Func(Of BaseRazorPage(Of TModel), TResult), Action(Of Exception))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{``0,``1},System.Action{System.Exception})
    name: TryCatch<BaseRazorPage<TModel>, TResult>
    nameWithType: TryCatchExtensions.TryCatch<BaseRazorPage<TModel>, TResult>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.AspNetCore.Mvc.Views.BaseRazorPage<TModel>, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1
    name: BaseRazorPage
    nameWithType: BaseRazorPage
    fullName: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage
  - name: <
    nameWithType: <
    fullName: <
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{``0,``1},System.Action{System.Exception})
    name: TryCatch(Of BaseRazorPage(Of TModel), TResult)
    nameWithType: TryCatchExtensions.TryCatch(Of BaseRazorPage(Of TModel), TResult)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.AspNetCore.Mvc.Views.BaseRazorPage(Of TModel), TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1
    name: BaseRazorPage
    nameWithType: BaseRazorPage
    fullName: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1.Hybrid.Extensions.TryCatchExtensions.TryFinally``1(System.Action{Hybrid.AspNetCore.Mvc.Views.BaseRazorPage{{TModel}}},System.Action{Hybrid.AspNetCore.Mvc.Views.BaseRazorPage{{TModel}}})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
  parent: Hybrid.Extensions.TryCatchExtensions
  definition: Hybrid.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
  name: TryFinally<BaseRazorPage<TModel>>(Action<BaseRazorPage<TModel>>, Action<BaseRazorPage<TModel>>)
  nameWithType: TryCatchExtensions.TryFinally<BaseRazorPage<TModel>>(Action<BaseRazorPage<TModel>>, Action<BaseRazorPage<TModel>>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryFinally<Hybrid.AspNetCore.Mvc.Views.BaseRazorPage<TModel>>(System.Action<Hybrid.AspNetCore.Mvc.Views.BaseRazorPage<TModel>>, System.Action<Hybrid.AspNetCore.Mvc.Views.BaseRazorPage<TModel>>)
  nameWithType.vb: TryCatchExtensions.TryFinally(Of BaseRazorPage(Of TModel))(Action(Of BaseRazorPage(Of TModel)), Action(Of BaseRazorPage(Of TModel)))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryFinally(Of Hybrid.AspNetCore.Mvc.Views.BaseRazorPage(Of TModel))(System.Action(Of Hybrid.AspNetCore.Mvc.Views.BaseRazorPage(Of TModel)), System.Action(Of Hybrid.AspNetCore.Mvc.Views.BaseRazorPage(Of TModel)))
  name.vb: TryFinally(Of BaseRazorPage(Of TModel))(Action(Of BaseRazorPage(Of TModel)), Action(Of BaseRazorPage(Of TModel)))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryFinally``1(System.Action{``0},System.Action{``0})
    name: TryFinally<BaseRazorPage<TModel>>
    nameWithType: TryCatchExtensions.TryFinally<BaseRazorPage<TModel>>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryFinally<Hybrid.AspNetCore.Mvc.Views.BaseRazorPage<TModel>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1
    name: BaseRazorPage
    nameWithType: BaseRazorPage
    fullName: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage
  - name: <
    nameWithType: <
    fullName: <
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1
    name: BaseRazorPage
    nameWithType: BaseRazorPage
    fullName: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage
  - name: <
    nameWithType: <
    fullName: <
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryFinally``1(System.Action{``0},System.Action{``0})
    name: TryFinally(Of BaseRazorPage(Of TModel))
    nameWithType: TryCatchExtensions.TryFinally(Of BaseRazorPage(Of TModel))
    fullName: Hybrid.Extensions.TryCatchExtensions.TryFinally(Of Hybrid.AspNetCore.Mvc.Views.BaseRazorPage(Of TModel))
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1
    name: BaseRazorPage
    nameWithType: BaseRazorPage
    fullName: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1
    name: BaseRazorPage
    nameWithType: BaseRazorPage
    fullName: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Json.JsonExtensions.ToJsonString(System.Boolean,System.Boolean)
  commentId: M:Hybrid.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
  parent: Hybrid.Json.JsonExtensions
  definition: Hybrid.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
  name: ToJsonString(Boolean, Boolean)
  nameWithType: JsonExtensions.ToJsonString(Boolean, Boolean)
  fullName: Hybrid.Json.JsonExtensions.ToJsonString(System.Boolean, System.Boolean)
  spec.csharp:
  - uid: Hybrid.Json.JsonExtensions.ToJsonString(System.Boolean,System.Boolean)
    name: ToJsonString
    nameWithType: JsonExtensions.ToJsonString
    fullName: Hybrid.Json.JsonExtensions.ToJsonString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Json.JsonExtensions.ToJsonString(System.Boolean,System.Boolean)
    name: ToJsonString
    nameWithType: JsonExtensions.ToJsonString
    fullName: Hybrid.Json.JsonExtensions.ToJsonString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Mapping.MapperExtensions.MapTo``1
  commentId: M:Hybrid.Mapping.MapperExtensions.MapTo``1(System.Object)
  parent: Hybrid.Mapping.MapperExtensions
  definition: Hybrid.Mapping.MapperExtensions.MapTo``1(System.Object)
  name: MapTo<TTarget>()
  nameWithType: MapperExtensions.MapTo<TTarget>()
  fullName: Hybrid.Mapping.MapperExtensions.MapTo<TTarget>()
  nameWithType.vb: MapperExtensions.MapTo(Of TTarget)()
  fullName.vb: Hybrid.Mapping.MapperExtensions.MapTo(Of TTarget)()
  name.vb: MapTo(Of TTarget)()
  spec.csharp:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``1
    name: MapTo<TTarget>
    nameWithType: MapperExtensions.MapTo<TTarget>
    fullName: Hybrid.Mapping.MapperExtensions.MapTo<TTarget>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``1
    name: MapTo(Of TTarget)
    nameWithType: MapperExtensions.MapTo(Of TTarget)
    fullName: Hybrid.Mapping.MapperExtensions.MapTo(Of TTarget)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1.Hybrid.Mapping.MapperExtensions.MapTo``2({TTarget})
  commentId: M:Hybrid.Mapping.MapperExtensions.MapTo``2(``0,``1)
  parent: Hybrid.Mapping.MapperExtensions
  definition: Hybrid.Mapping.MapperExtensions.MapTo``2(``0,``1)
  name: MapTo<BaseRazorPage<TModel>, TTarget>(TTarget)
  nameWithType: MapperExtensions.MapTo<BaseRazorPage<TModel>, TTarget>(TTarget)
  fullName: Hybrid.Mapping.MapperExtensions.MapTo<Hybrid.AspNetCore.Mvc.Views.BaseRazorPage<TModel>, TTarget>(TTarget)
  nameWithType.vb: MapperExtensions.MapTo(Of BaseRazorPage(Of TModel), TTarget)(TTarget)
  fullName.vb: Hybrid.Mapping.MapperExtensions.MapTo(Of Hybrid.AspNetCore.Mvc.Views.BaseRazorPage(Of TModel), TTarget)(TTarget)
  name.vb: MapTo(Of BaseRazorPage(Of TModel), TTarget)(TTarget)
  spec.csharp:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``2(``1)
    name: MapTo<BaseRazorPage<TModel>, TTarget>
    nameWithType: MapperExtensions.MapTo<BaseRazorPage<TModel>, TTarget>
    fullName: Hybrid.Mapping.MapperExtensions.MapTo<Hybrid.AspNetCore.Mvc.Views.BaseRazorPage<TModel>, TTarget>
  - name: (
    nameWithType: (
    fullName: (
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``2(``1)
    name: MapTo(Of BaseRazorPage(Of TModel), TTarget)
    nameWithType: MapperExtensions.MapTo(Of BaseRazorPage(Of TModel), TTarget)
    fullName: Hybrid.Mapping.MapperExtensions.MapTo(Of Hybrid.AspNetCore.Mvc.Views.BaseRazorPage(Of TModel), TTarget)
  - name: (
    nameWithType: (
    fullName: (
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Reflection.LockExtensions.Locking(System.Action)
  commentId: M:Hybrid.Reflection.LockExtensions.Locking(System.Object,System.Action)
  parent: Hybrid.Reflection.LockExtensions
  definition: Hybrid.Reflection.LockExtensions.Locking(System.Object,System.Action)
  name: Locking(Action)
  nameWithType: LockExtensions.Locking(Action)
  fullName: Hybrid.Reflection.LockExtensions.Locking(System.Action)
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking(System.Action)
    name: Locking
    nameWithType: LockExtensions.Locking
    fullName: Hybrid.Reflection.LockExtensions.Locking
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking(System.Action)
    name: Locking
    nameWithType: LockExtensions.Locking
    fullName: Hybrid.Reflection.LockExtensions.Locking
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1.Hybrid.Reflection.LockExtensions.Locking``1(System.Action{Hybrid.AspNetCore.Mvc.Views.BaseRazorPage{{TModel}}})
  commentId: M:Hybrid.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
  parent: Hybrid.Reflection.LockExtensions
  definition: Hybrid.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
  name: Locking<BaseRazorPage<TModel>>(Action<BaseRazorPage<TModel>>)
  nameWithType: LockExtensions.Locking<BaseRazorPage<TModel>>(Action<BaseRazorPage<TModel>>)
  fullName: Hybrid.Reflection.LockExtensions.Locking<Hybrid.AspNetCore.Mvc.Views.BaseRazorPage<TModel>>(System.Action<Hybrid.AspNetCore.Mvc.Views.BaseRazorPage<TModel>>)
  nameWithType.vb: LockExtensions.Locking(Of BaseRazorPage(Of TModel))(Action(Of BaseRazorPage(Of TModel)))
  fullName.vb: Hybrid.Reflection.LockExtensions.Locking(Of Hybrid.AspNetCore.Mvc.Views.BaseRazorPage(Of TModel))(System.Action(Of Hybrid.AspNetCore.Mvc.Views.BaseRazorPage(Of TModel)))
  name.vb: Locking(Of BaseRazorPage(Of TModel))(Action(Of BaseRazorPage(Of TModel)))
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(System.Action{``0})
    name: Locking<BaseRazorPage<TModel>>
    nameWithType: LockExtensions.Locking<BaseRazorPage<TModel>>
    fullName: Hybrid.Reflection.LockExtensions.Locking<Hybrid.AspNetCore.Mvc.Views.BaseRazorPage<TModel>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1
    name: BaseRazorPage
    nameWithType: BaseRazorPage
    fullName: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage
  - name: <
    nameWithType: <
    fullName: <
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(System.Action{``0})
    name: Locking(Of BaseRazorPage(Of TModel))
    nameWithType: LockExtensions.Locking(Of BaseRazorPage(Of TModel))
    fullName: Hybrid.Reflection.LockExtensions.Locking(Of Hybrid.AspNetCore.Mvc.Views.BaseRazorPage(Of TModel))
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1
    name: BaseRazorPage
    nameWithType: BaseRazorPage
    fullName: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Reflection.LockExtensions.Locking``1(System.Func{{TResult}})
  commentId: M:Hybrid.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
  parent: Hybrid.Reflection.LockExtensions
  definition: Hybrid.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
  name: Locking<TResult>(Func<TResult>)
  nameWithType: LockExtensions.Locking<TResult>(Func<TResult>)
  fullName: Hybrid.Reflection.LockExtensions.Locking<TResult>(System.Func<TResult>)
  nameWithType.vb: LockExtensions.Locking(Of TResult)(Func(Of TResult))
  fullName.vb: Hybrid.Reflection.LockExtensions.Locking(Of TResult)(System.Func(Of TResult))
  name.vb: Locking(Of TResult)(Func(Of TResult))
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(System.Func{``0})
    name: Locking<TResult>
    nameWithType: LockExtensions.Locking<TResult>
    fullName: Hybrid.Reflection.LockExtensions.Locking<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(System.Func{``0})
    name: Locking(Of TResult)
    nameWithType: LockExtensions.Locking(Of TResult)
    fullName: Hybrid.Reflection.LockExtensions.Locking(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1.Hybrid.Reflection.LockExtensions.Locking``2(System.Func{Hybrid.AspNetCore.Mvc.Views.BaseRazorPage{{TModel}},{TResult}})
  commentId: M:Hybrid.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
  parent: Hybrid.Reflection.LockExtensions
  definition: Hybrid.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
  name: Locking<BaseRazorPage<TModel>, TResult>(Func<BaseRazorPage<TModel>, TResult>)
  nameWithType: LockExtensions.Locking<BaseRazorPage<TModel>, TResult>(Func<BaseRazorPage<TModel>, TResult>)
  fullName: Hybrid.Reflection.LockExtensions.Locking<Hybrid.AspNetCore.Mvc.Views.BaseRazorPage<TModel>, TResult>(System.Func<Hybrid.AspNetCore.Mvc.Views.BaseRazorPage<TModel>, TResult>)
  nameWithType.vb: LockExtensions.Locking(Of BaseRazorPage(Of TModel), TResult)(Func(Of BaseRazorPage(Of TModel), TResult))
  fullName.vb: Hybrid.Reflection.LockExtensions.Locking(Of Hybrid.AspNetCore.Mvc.Views.BaseRazorPage(Of TModel), TResult)(System.Func(Of Hybrid.AspNetCore.Mvc.Views.BaseRazorPage(Of TModel), TResult))
  name.vb: Locking(Of BaseRazorPage(Of TModel), TResult)(Func(Of BaseRazorPage(Of TModel), TResult))
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking``2(System.Func{``0,``1})
    name: Locking<BaseRazorPage<TModel>, TResult>
    nameWithType: LockExtensions.Locking<BaseRazorPage<TModel>, TResult>
    fullName: Hybrid.Reflection.LockExtensions.Locking<Hybrid.AspNetCore.Mvc.Views.BaseRazorPage<TModel>, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1
    name: BaseRazorPage
    nameWithType: BaseRazorPage
    fullName: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage
  - name: <
    nameWithType: <
    fullName: <
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking``2(System.Func{``0,``1})
    name: Locking(Of BaseRazorPage(Of TModel), TResult)
    nameWithType: LockExtensions.Locking(Of BaseRazorPage(Of TModel), TResult)
    fullName: Hybrid.Reflection.LockExtensions.Locking(Of Hybrid.AspNetCore.Mvc.Views.BaseRazorPage(Of TModel), TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1
    name: BaseRazorPage
    nameWithType: BaseRazorPage
    fullName: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1.Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2
  commentId: M:Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2(``0)
  parent: Hybrid.Domain.Entities.EntityExtensions
  definition: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2(``0)
  name: CheckICreatedTime<BaseRazorPage<TModel>, TKey>()
  nameWithType: EntityExtensions.CheckICreatedTime<BaseRazorPage<TModel>, TKey>()
  fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime<Hybrid.AspNetCore.Mvc.Views.BaseRazorPage<TModel>, TKey>()
  nameWithType.vb: EntityExtensions.CheckICreatedTime(Of BaseRazorPage(Of TModel), TKey)()
  fullName.vb: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime(Of Hybrid.AspNetCore.Mvc.Views.BaseRazorPage(Of TModel), TKey)()
  name.vb: CheckICreatedTime(Of BaseRazorPage(Of TModel), TKey)()
  spec.csharp:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2
    name: CheckICreatedTime<BaseRazorPage<TModel>, TKey>
    nameWithType: EntityExtensions.CheckICreatedTime<BaseRazorPage<TModel>, TKey>
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime<Hybrid.AspNetCore.Mvc.Views.BaseRazorPage<TModel>, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2
    name: CheckICreatedTime(Of BaseRazorPage(Of TModel), TKey)
    nameWithType: EntityExtensions.CheckICreatedTime(Of BaseRazorPage(Of TModel), TKey)
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime(Of Hybrid.AspNetCore.Mvc.Views.BaseRazorPage(Of TModel), TKey)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1.Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(System.Security.Principal.IPrincipal)
  commentId: M:Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
  parent: Hybrid.Domain.Entities.EntityExtensions
  definition: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
  name: CheckICreationAudited<BaseRazorPage<TModel>, TKey, TUserKey>(IPrincipal)
  nameWithType: EntityExtensions.CheckICreationAudited<BaseRazorPage<TModel>, TKey, TUserKey>(IPrincipal)
  fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited<Hybrid.AspNetCore.Mvc.Views.BaseRazorPage<TModel>, TKey, TUserKey>(System.Security.Principal.IPrincipal)
  nameWithType.vb: EntityExtensions.CheckICreationAudited(Of BaseRazorPage(Of TModel), TKey, TUserKey)(IPrincipal)
  fullName.vb: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited(Of Hybrid.AspNetCore.Mvc.Views.BaseRazorPage(Of TModel), TKey, TUserKey)(System.Security.Principal.IPrincipal)
  name.vb: CheckICreationAudited(Of BaseRazorPage(Of TModel), TKey, TUserKey)(IPrincipal)
  spec.csharp:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(System.Security.Principal.IPrincipal)
    name: CheckICreationAudited<BaseRazorPage<TModel>, TKey, TUserKey>
    nameWithType: EntityExtensions.CheckICreationAudited<BaseRazorPage<TModel>, TKey, TUserKey>
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited<Hybrid.AspNetCore.Mvc.Views.BaseRazorPage<TModel>, TKey, TUserKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(System.Security.Principal.IPrincipal)
    name: CheckICreationAudited(Of BaseRazorPage(Of TModel), TKey, TUserKey)
    nameWithType: EntityExtensions.CheckICreationAudited(Of BaseRazorPage(Of TModel), TKey, TUserKey)
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited(Of Hybrid.AspNetCore.Mvc.Views.BaseRazorPage(Of TModel), TKey, TUserKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1.Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(System.Security.Principal.IPrincipal)
  commentId: M:Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
  parent: Hybrid.Domain.Entities.EntityExtensions
  definition: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
  name: CheckIUpdateAudited<BaseRazorPage<TModel>, TKey, TUserKey>(IPrincipal)
  nameWithType: EntityExtensions.CheckIUpdateAudited<BaseRazorPage<TModel>, TKey, TUserKey>(IPrincipal)
  fullName: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited<Hybrid.AspNetCore.Mvc.Views.BaseRazorPage<TModel>, TKey, TUserKey>(System.Security.Principal.IPrincipal)
  nameWithType.vb: EntityExtensions.CheckIUpdateAudited(Of BaseRazorPage(Of TModel), TKey, TUserKey)(IPrincipal)
  fullName.vb: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited(Of Hybrid.AspNetCore.Mvc.Views.BaseRazorPage(Of TModel), TKey, TUserKey)(System.Security.Principal.IPrincipal)
  name.vb: CheckIUpdateAudited(Of BaseRazorPage(Of TModel), TKey, TUserKey)(IPrincipal)
  spec.csharp:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(System.Security.Principal.IPrincipal)
    name: CheckIUpdateAudited<BaseRazorPage<TModel>, TKey, TUserKey>
    nameWithType: EntityExtensions.CheckIUpdateAudited<BaseRazorPage<TModel>, TKey, TUserKey>
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited<Hybrid.AspNetCore.Mvc.Views.BaseRazorPage<TModel>, TKey, TUserKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(System.Security.Principal.IPrincipal)
    name: CheckIUpdateAudited(Of BaseRazorPage(Of TModel), TKey, TUserKey)
    nameWithType: EntityExtensions.CheckIUpdateAudited(Of BaseRazorPage(Of TModel), TKey, TUserKey)
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited(Of Hybrid.AspNetCore.Mvc.Views.BaseRazorPage(Of TModel), TKey, TUserKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.AspNetCore.Mvc.Razor
  commentId: N:Microsoft.AspNetCore.Mvc.Razor
  isExternal: true
  name: Microsoft.AspNetCore.Mvc.Razor
  nameWithType: Microsoft.AspNetCore.Mvc.Razor
  fullName: Microsoft.AspNetCore.Mvc.Razor
- uid: Microsoft.AspNetCore.Mvc.Razor.RazorPage`1
  commentId: T:Microsoft.AspNetCore.Mvc.Razor.RazorPage`1
  isExternal: true
  name: RazorPage<TModel>
  nameWithType: RazorPage<TModel>
  fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPage<TModel>
  nameWithType.vb: RazorPage(Of TModel)
  fullName.vb: Microsoft.AspNetCore.Mvc.Razor.RazorPage(Of TModel)
  name.vb: RazorPage(Of TModel)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Mvc.Razor.RazorPage`1
    name: RazorPage
    nameWithType: RazorPage
    fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPage
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Mvc.Razor.RazorPage`1
    name: RazorPage
    nameWithType: RazorPage
    fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPage
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Mvc.Razor.RazorPage`1.Model
  commentId: P:Microsoft.AspNetCore.Mvc.Razor.RazorPage`1.Model
  isExternal: true
  name: Model
  nameWithType: RazorPage<TModel>.Model
  fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPage<TModel>.Model
  nameWithType.vb: RazorPage(Of TModel).Model
  fullName.vb: Microsoft.AspNetCore.Mvc.Razor.RazorPage(Of TModel).Model
- uid: Microsoft.AspNetCore.Mvc.Razor.RazorPage`1.ViewData
  commentId: P:Microsoft.AspNetCore.Mvc.Razor.RazorPage`1.ViewData
  isExternal: true
  name: ViewData
  nameWithType: RazorPage<TModel>.ViewData
  fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPage<TModel>.ViewData
  nameWithType.vb: RazorPage(Of TModel).ViewData
  fullName.vb: Microsoft.AspNetCore.Mvc.Razor.RazorPage(Of TModel).ViewData
- uid: Hybrid.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
  commentId: M:Hybrid.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
  isExternal: true
  name: CastTo(Object, Type)
  nameWithType: ObjectExtensions.CastTo(Object, Type)
  fullName: Hybrid.Extensions.ObjectExtensions.CastTo(System.Object, System.Type)
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
    name: CastTo
    nameWithType: ObjectExtensions.CastTo
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
    name: CastTo
    nameWithType: ObjectExtensions.CastTo
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ObjectExtensions
  commentId: T:Hybrid.Extensions.ObjectExtensions
  parent: Hybrid.Extensions
  name: ObjectExtensions
  nameWithType: ObjectExtensions
  fullName: Hybrid.Extensions.ObjectExtensions
- uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object)
  commentId: M:Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object)
  isExternal: true
  name: CastTo<T>(Object)
  nameWithType: ObjectExtensions.CastTo<T>(Object)
  fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>(System.Object)
  nameWithType.vb: ObjectExtensions.CastTo(Of T)(Object)
  fullName.vb: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)(System.Object)
  name.vb: CastTo(Of T)(Object)
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object)
    name: CastTo<T>
    nameWithType: ObjectExtensions.CastTo<T>
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object)
    name: CastTo(Of T)
    nameWithType: ObjectExtensions.CastTo(Of T)
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
  commentId: M:Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
  isExternal: true
  name: CastTo<T>(Object, T)
  nameWithType: ObjectExtensions.CastTo<T>(Object, T)
  fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>(System.Object, T)
  nameWithType.vb: ObjectExtensions.CastTo(Of T)(Object, T)
  fullName.vb: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)(System.Object, T)
  name.vb: CastTo(Of T)(Object, T)
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
    name: CastTo<T>
    nameWithType: ObjectExtensions.CastTo<T>
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
    name: CastTo(Of T)
    nameWithType: ObjectExtensions.CastTo(Of T)
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
  commentId: M:Hybrid.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
  name: IsIn<T>(T, T[])
  nameWithType: ObjectExtensions.IsIn<T>(T, T[])
  fullName: Hybrid.Extensions.ObjectExtensions.IsIn<T>(T, T[])
  nameWithType.vb: ObjectExtensions.IsIn(Of T)(T, T())
  fullName.vb: Hybrid.Extensions.ObjectExtensions.IsIn(Of T)(T, T())
  name.vb: IsIn(Of T)(T, T())
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
    name: IsIn<T>
    nameWithType: ObjectExtensions.IsIn<T>
    fullName: Hybrid.Extensions.ObjectExtensions.IsIn<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
    name: IsIn(Of T)
    nameWithType: ObjectExtensions.IsIn(Of T)
    fullName: Hybrid.Extensions.ObjectExtensions.IsIn(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ObjectExtensions.ToDynamic(System.Object)
  commentId: M:Hybrid.Extensions.ObjectExtensions.ToDynamic(System.Object)
  isExternal: true
  name: ToDynamic(Object)
  nameWithType: ObjectExtensions.ToDynamic(Object)
  fullName: Hybrid.Extensions.ObjectExtensions.ToDynamic(System.Object)
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.ToDynamic(System.Object)
    name: ToDynamic
    nameWithType: ObjectExtensions.ToDynamic
    fullName: Hybrid.Extensions.ObjectExtensions.ToDynamic
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.ToDynamic(System.Object)
    name: ToDynamic
    nameWithType: ObjectExtensions.ToDynamic
    fullName: Hybrid.Extensions.ObjectExtensions.ToDynamic
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ObjectExtensions.DeepClone``1(``0)
  commentId: M:Hybrid.Extensions.ObjectExtensions.DeepClone``1(``0)
  name: DeepClone<T>(T)
  nameWithType: ObjectExtensions.DeepClone<T>(T)
  fullName: Hybrid.Extensions.ObjectExtensions.DeepClone<T>(T)
  nameWithType.vb: ObjectExtensions.DeepClone(Of T)(T)
  fullName.vb: Hybrid.Extensions.ObjectExtensions.DeepClone(Of T)(T)
  name.vb: DeepClone(Of T)(T)
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.DeepClone``1(``0)
    name: DeepClone<T>
    nameWithType: ObjectExtensions.DeepClone<T>
    fullName: Hybrid.Extensions.ObjectExtensions.DeepClone<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.DeepClone``1(``0)
    name: DeepClone(Of T)
    nameWithType: ObjectExtensions.DeepClone(Of T)
    fullName: Hybrid.Extensions.ObjectExtensions.DeepClone(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
  commentId: M:Hybrid.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
  isExternal: true
  name: Required<T>(T, Func<T, Boolean>, String)
  nameWithType: ParameterCheckExtensions.Required<T>(T, Func<T, Boolean>, String)
  fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<T>(T, System.Func<T, System.Boolean>, System.String)
  nameWithType.vb: ParameterCheckExtensions.Required(Of T)(T, Func(Of T, Boolean), String)
  fullName.vb: Hybrid.Extensions.ParameterCheckExtensions.Required(Of T)(T, System.Func(Of T, System.Boolean), System.String)
  name.vb: Required(Of T)(T, Func(Of T, Boolean), String)
  spec.csharp:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
    name: Required<T>
    nameWithType: ParameterCheckExtensions.Required<T>
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
    name: Required(Of T)
    nameWithType: ParameterCheckExtensions.Required(Of T)
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ParameterCheckExtensions
  commentId: T:Hybrid.Extensions.ParameterCheckExtensions
  parent: Hybrid.Extensions
  name: ParameterCheckExtensions
  nameWithType: ParameterCheckExtensions
  fullName: Hybrid.Extensions.ParameterCheckExtensions
- uid: Hybrid.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
  commentId: M:Hybrid.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
  isExternal: true
  name: Required<T, TException>(T, Func<T, Boolean>, String)
  nameWithType: ParameterCheckExtensions.Required<T, TException>(T, Func<T, Boolean>, String)
  fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<T, TException>(T, System.Func<T, System.Boolean>, System.String)
  nameWithType.vb: ParameterCheckExtensions.Required(Of T, TException)(T, Func(Of T, Boolean), String)
  fullName.vb: Hybrid.Extensions.ParameterCheckExtensions.Required(Of T, TException)(T, System.Func(Of T, System.Boolean), System.String)
  name.vb: Required(Of T, TException)(T, Func(Of T, Boolean), String)
  spec.csharp:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
    name: Required<T, TException>
    nameWithType: ParameterCheckExtensions.Required<T, TException>
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<T, TException>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
    name: Required(Of T, TException)
    nameWithType: ParameterCheckExtensions.Required(Of T, TException)
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required(Of T, TException)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
  commentId: M:Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
  isExternal: true
  name: CheckNotNull<T>(T, String)
  nameWithType: ParameterCheckExtensions.CheckNotNull<T>(T, String)
  fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull<T>(T, System.String)
  nameWithType.vb: ParameterCheckExtensions.CheckNotNull(Of T)(T, String)
  fullName.vb: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull(Of T)(T, System.String)
  name.vb: CheckNotNull(Of T)(T, String)
  spec.csharp:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
    name: CheckNotNull<T>
    nameWithType: ParameterCheckExtensions.CheckNotNull<T>
    fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
    name: CheckNotNull(Of T)
    nameWithType: ParameterCheckExtensions.CheckNotNull(Of T)
    fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
  isExternal: true
  name: TryCatch<T>(T, Action<T>, Action<Exception>, Action<T>)
  nameWithType: TryCatchExtensions.TryCatch<T>(T, Action<T>, Action<Exception>, Action<T>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T>(T, System.Action<T>, System.Action<System.Exception>, System.Action<T>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of T)(T, Action(Of T), Action(Of Exception), Action(Of T))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T)(T, System.Action(Of T), System.Action(Of System.Exception), System.Action(Of T))
  name.vb: TryCatch(Of T)(T, Action(Of T), Action(Of Exception), Action(Of T))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
    name: TryCatch<T>
    nameWithType: TryCatchExtensions.TryCatch<T>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
    name: TryCatch(Of T)
    nameWithType: TryCatchExtensions.TryCatch(Of T)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.TryCatchExtensions
  commentId: T:Hybrid.Extensions.TryCatchExtensions
  parent: Hybrid.Extensions
  name: TryCatchExtensions
  nameWithType: TryCatchExtensions
  fullName: Hybrid.Extensions.TryCatchExtensions
- uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
  isExternal: true
  name: TryCatch<T>(T, Action<T>, Action<Exception>)
  nameWithType: TryCatchExtensions.TryCatch<T>(T, Action<T>, Action<Exception>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T>(T, System.Action<T>, System.Action<System.Exception>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of T)(T, Action(Of T), Action(Of Exception))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T)(T, System.Action(Of T), System.Action(Of System.Exception))
  name.vb: TryCatch(Of T)(T, Action(Of T), Action(Of Exception))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
    name: TryCatch<T>
    nameWithType: TryCatchExtensions.TryCatch<T>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
    name: TryCatch(Of T)
    nameWithType: TryCatchExtensions.TryCatch(Of T)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
  isExternal: true
  name: TryCatch<T, TResult>(T, Func<T, TResult>, Action<Exception>, Action<T>)
  nameWithType: TryCatchExtensions.TryCatch<T, TResult>(T, Func<T, TResult>, Action<Exception>, Action<T>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T, TResult>(T, System.Func<T, TResult>, System.Action<System.Exception>, System.Action<T>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of T, TResult)(T, Func(Of T, TResult), Action(Of Exception), Action(Of T))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T, TResult)(T, System.Func(Of T, TResult), System.Action(Of System.Exception), System.Action(Of T))
  name.vb: TryCatch(Of T, TResult)(T, Func(Of T, TResult), Action(Of Exception), Action(Of T))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
    name: TryCatch<T, TResult>
    nameWithType: TryCatchExtensions.TryCatch<T, TResult>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
    name: TryCatch(Of T, TResult)
    nameWithType: TryCatchExtensions.TryCatch(Of T, TResult)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
  isExternal: true
  name: TryCatch<T, TResult>(T, Func<T, TResult>, Action<Exception>)
  nameWithType: TryCatchExtensions.TryCatch<T, TResult>(T, Func<T, TResult>, Action<Exception>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T, TResult>(T, System.Func<T, TResult>, System.Action<System.Exception>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of T, TResult)(T, Func(Of T, TResult), Action(Of Exception))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T, TResult)(T, System.Func(Of T, TResult), System.Action(Of System.Exception))
  name.vb: TryCatch(Of T, TResult)(T, Func(Of T, TResult), Action(Of Exception))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
    name: TryCatch<T, TResult>
    nameWithType: TryCatchExtensions.TryCatch<T, TResult>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
    name: TryCatch(Of T, TResult)
    nameWithType: TryCatchExtensions.TryCatch(Of T, TResult)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
  isExternal: true
  name: TryFinally<T>(T, Action<T>, Action<T>)
  nameWithType: TryCatchExtensions.TryFinally<T>(T, Action<T>, Action<T>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryFinally<T>(T, System.Action<T>, System.Action<T>)
  nameWithType.vb: TryCatchExtensions.TryFinally(Of T)(T, Action(Of T), Action(Of T))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryFinally(Of T)(T, System.Action(Of T), System.Action(Of T))
  name.vb: TryFinally(Of T)(T, Action(Of T), Action(Of T))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
    name: TryFinally<T>
    nameWithType: TryCatchExtensions.TryFinally<T>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryFinally<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
    name: TryFinally(Of T)
    nameWithType: TryCatchExtensions.TryFinally(Of T)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryFinally(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
  commentId: M:Hybrid.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
  isExternal: true
  name: ToJsonString(Object, Boolean, Boolean)
  nameWithType: JsonExtensions.ToJsonString(Object, Boolean, Boolean)
  fullName: Hybrid.Json.JsonExtensions.ToJsonString(System.Object, System.Boolean, System.Boolean)
  spec.csharp:
  - uid: Hybrid.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
    name: ToJsonString
    nameWithType: JsonExtensions.ToJsonString
    fullName: Hybrid.Json.JsonExtensions.ToJsonString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
    name: ToJsonString
    nameWithType: JsonExtensions.ToJsonString
    fullName: Hybrid.Json.JsonExtensions.ToJsonString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Json.JsonExtensions
  commentId: T:Hybrid.Json.JsonExtensions
  parent: Hybrid.Json
  name: JsonExtensions
  nameWithType: JsonExtensions
  fullName: Hybrid.Json.JsonExtensions
- uid: Hybrid.Mapping.MapperExtensions.MapTo``1(System.Object)
  commentId: M:Hybrid.Mapping.MapperExtensions.MapTo``1(System.Object)
  isExternal: true
  name: MapTo<TTarget>(Object)
  nameWithType: MapperExtensions.MapTo<TTarget>(Object)
  fullName: Hybrid.Mapping.MapperExtensions.MapTo<TTarget>(System.Object)
  nameWithType.vb: MapperExtensions.MapTo(Of TTarget)(Object)
  fullName.vb: Hybrid.Mapping.MapperExtensions.MapTo(Of TTarget)(System.Object)
  name.vb: MapTo(Of TTarget)(Object)
  spec.csharp:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``1(System.Object)
    name: MapTo<TTarget>
    nameWithType: MapperExtensions.MapTo<TTarget>
    fullName: Hybrid.Mapping.MapperExtensions.MapTo<TTarget>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``1(System.Object)
    name: MapTo(Of TTarget)
    nameWithType: MapperExtensions.MapTo(Of TTarget)
    fullName: Hybrid.Mapping.MapperExtensions.MapTo(Of TTarget)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Mapping.MapperExtensions
  commentId: T:Hybrid.Mapping.MapperExtensions
  parent: Hybrid.Mapping
  name: MapperExtensions
  nameWithType: MapperExtensions
  fullName: Hybrid.Mapping.MapperExtensions
- uid: Hybrid.Mapping.MapperExtensions.MapTo``2(``0,``1)
  commentId: M:Hybrid.Mapping.MapperExtensions.MapTo``2(``0,``1)
  name: MapTo<TSource, TTarget>(TSource, TTarget)
  nameWithType: MapperExtensions.MapTo<TSource, TTarget>(TSource, TTarget)
  fullName: Hybrid.Mapping.MapperExtensions.MapTo<TSource, TTarget>(TSource, TTarget)
  nameWithType.vb: MapperExtensions.MapTo(Of TSource, TTarget)(TSource, TTarget)
  fullName.vb: Hybrid.Mapping.MapperExtensions.MapTo(Of TSource, TTarget)(TSource, TTarget)
  name.vb: MapTo(Of TSource, TTarget)(TSource, TTarget)
  spec.csharp:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``2(``0,``1)
    name: MapTo<TSource, TTarget>
    nameWithType: MapperExtensions.MapTo<TSource, TTarget>
    fullName: Hybrid.Mapping.MapperExtensions.MapTo<TSource, TTarget>
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``2(``0,``1)
    name: MapTo(Of TSource, TTarget)
    nameWithType: MapperExtensions.MapTo(Of TSource, TTarget)
    fullName: Hybrid.Mapping.MapperExtensions.MapTo(Of TSource, TTarget)
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Reflection.LockExtensions.Locking(System.Object,System.Action)
  commentId: M:Hybrid.Reflection.LockExtensions.Locking(System.Object,System.Action)
  isExternal: true
  name: Locking(Object, Action)
  nameWithType: LockExtensions.Locking(Object, Action)
  fullName: Hybrid.Reflection.LockExtensions.Locking(System.Object, System.Action)
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking(System.Object,System.Action)
    name: Locking
    nameWithType: LockExtensions.Locking
    fullName: Hybrid.Reflection.LockExtensions.Locking
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking(System.Object,System.Action)
    name: Locking
    nameWithType: LockExtensions.Locking
    fullName: Hybrid.Reflection.LockExtensions.Locking
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Reflection.LockExtensions
  commentId: T:Hybrid.Reflection.LockExtensions
  parent: Hybrid.Reflection
  name: LockExtensions
  nameWithType: LockExtensions
  fullName: Hybrid.Reflection.LockExtensions
- uid: Hybrid.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
  commentId: M:Hybrid.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
  isExternal: true
  name: Locking<T>(T, Action<T>)
  nameWithType: LockExtensions.Locking<T>(T, Action<T>)
  fullName: Hybrid.Reflection.LockExtensions.Locking<T>(T, System.Action<T>)
  nameWithType.vb: LockExtensions.Locking(Of T)(T, Action(Of T))
  fullName.vb: Hybrid.Reflection.LockExtensions.Locking(Of T)(T, System.Action(Of T))
  name.vb: Locking(Of T)(T, Action(Of T))
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
    name: Locking<T>
    nameWithType: LockExtensions.Locking<T>
    fullName: Hybrid.Reflection.LockExtensions.Locking<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
    name: Locking(Of T)
    nameWithType: LockExtensions.Locking(Of T)
    fullName: Hybrid.Reflection.LockExtensions.Locking(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
  commentId: M:Hybrid.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
  isExternal: true
  name: Locking<TResult>(Object, Func<TResult>)
  nameWithType: LockExtensions.Locking<TResult>(Object, Func<TResult>)
  fullName: Hybrid.Reflection.LockExtensions.Locking<TResult>(System.Object, System.Func<TResult>)
  nameWithType.vb: LockExtensions.Locking(Of TResult)(Object, Func(Of TResult))
  fullName.vb: Hybrid.Reflection.LockExtensions.Locking(Of TResult)(System.Object, System.Func(Of TResult))
  name.vb: Locking(Of TResult)(Object, Func(Of TResult))
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
    name: Locking<TResult>
    nameWithType: LockExtensions.Locking<TResult>
    fullName: Hybrid.Reflection.LockExtensions.Locking<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
    name: Locking(Of TResult)
    nameWithType: LockExtensions.Locking(Of TResult)
    fullName: Hybrid.Reflection.LockExtensions.Locking(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
  commentId: M:Hybrid.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
  isExternal: true
  name: Locking<TSource, TResult>(TSource, Func<TSource, TResult>)
  nameWithType: LockExtensions.Locking<TSource, TResult>(TSource, Func<TSource, TResult>)
  fullName: Hybrid.Reflection.LockExtensions.Locking<TSource, TResult>(TSource, System.Func<TSource, TResult>)
  nameWithType.vb: LockExtensions.Locking(Of TSource, TResult)(TSource, Func(Of TSource, TResult))
  fullName.vb: Hybrid.Reflection.LockExtensions.Locking(Of TSource, TResult)(TSource, System.Func(Of TSource, TResult))
  name.vb: Locking(Of TSource, TResult)(TSource, Func(Of TSource, TResult))
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
    name: Locking<TSource, TResult>
    nameWithType: LockExtensions.Locking<TSource, TResult>
    fullName: Hybrid.Reflection.LockExtensions.Locking<TSource, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
    name: Locking(Of TSource, TResult)
    nameWithType: LockExtensions.Locking(Of TSource, TResult)
    fullName: Hybrid.Reflection.LockExtensions.Locking(Of TSource, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2(``0)
  commentId: M:Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2(``0)
  name: CheckICreatedTime<TEntity, TKey>(TEntity)
  nameWithType: EntityExtensions.CheckICreatedTime<TEntity, TKey>(TEntity)
  fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime<TEntity, TKey>(TEntity)
  nameWithType.vb: EntityExtensions.CheckICreatedTime(Of TEntity, TKey)(TEntity)
  fullName.vb: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime(Of TEntity, TKey)(TEntity)
  name.vb: CheckICreatedTime(Of TEntity, TKey)(TEntity)
  spec.csharp:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2(``0)
    name: CheckICreatedTime<TEntity, TKey>
    nameWithType: EntityExtensions.CheckICreatedTime<TEntity, TKey>
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime<TEntity, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2(``0)
    name: CheckICreatedTime(Of TEntity, TKey)
    nameWithType: EntityExtensions.CheckICreatedTime(Of TEntity, TKey)
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime(Of TEntity, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Domain.Entities.EntityExtensions
  commentId: T:Hybrid.Domain.Entities.EntityExtensions
  parent: Hybrid.Domain.Entities
  name: EntityExtensions
  nameWithType: EntityExtensions
  fullName: Hybrid.Domain.Entities.EntityExtensions
- uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
  commentId: M:Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
  isExternal: true
  name: CheckICreationAudited<TEntity, TKey, TUserKey>(TEntity, IPrincipal)
  nameWithType: EntityExtensions.CheckICreationAudited<TEntity, TKey, TUserKey>(TEntity, IPrincipal)
  fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited<TEntity, TKey, TUserKey>(TEntity, System.Security.Principal.IPrincipal)
  nameWithType.vb: EntityExtensions.CheckICreationAudited(Of TEntity, TKey, TUserKey)(TEntity, IPrincipal)
  fullName.vb: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited(Of TEntity, TKey, TUserKey)(TEntity, System.Security.Principal.IPrincipal)
  name.vb: CheckICreationAudited(Of TEntity, TKey, TUserKey)(TEntity, IPrincipal)
  spec.csharp:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
    name: CheckICreationAudited<TEntity, TKey, TUserKey>
    nameWithType: EntityExtensions.CheckICreationAudited<TEntity, TKey, TUserKey>
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited<TEntity, TKey, TUserKey>
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
    name: CheckICreationAudited(Of TEntity, TKey, TUserKey)
    nameWithType: EntityExtensions.CheckICreationAudited(Of TEntity, TKey, TUserKey)
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited(Of TEntity, TKey, TUserKey)
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
  commentId: M:Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
  isExternal: true
  name: CheckIUpdateAudited<TEntity, TKey, TUserKey>(TEntity, IPrincipal)
  nameWithType: EntityExtensions.CheckIUpdateAudited<TEntity, TKey, TUserKey>(TEntity, IPrincipal)
  fullName: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited<TEntity, TKey, TUserKey>(TEntity, System.Security.Principal.IPrincipal)
  nameWithType.vb: EntityExtensions.CheckIUpdateAudited(Of TEntity, TKey, TUserKey)(TEntity, IPrincipal)
  fullName.vb: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited(Of TEntity, TKey, TUserKey)(TEntity, System.Security.Principal.IPrincipal)
  name.vb: CheckIUpdateAudited(Of TEntity, TKey, TUserKey)(TEntity, IPrincipal)
  spec.csharp:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
    name: CheckIUpdateAudited<TEntity, TKey, TUserKey>
    nameWithType: EntityExtensions.CheckIUpdateAudited<TEntity, TKey, TUserKey>
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited<TEntity, TKey, TUserKey>
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
    name: CheckIUpdateAudited(Of TEntity, TKey, TUserKey)
    nameWithType: EntityExtensions.CheckIUpdateAudited(Of TEntity, TKey, TUserKey)
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited(Of TEntity, TKey, TUserKey)
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions
  commentId: N:Hybrid.Extensions
  name: Hybrid.Extensions
  nameWithType: Hybrid.Extensions
  fullName: Hybrid.Extensions
- uid: Hybrid.Json
  commentId: N:Hybrid.Json
  name: Hybrid.Json
  nameWithType: Hybrid.Json
  fullName: Hybrid.Json
- uid: Hybrid.Mapping
  commentId: N:Hybrid.Mapping
  name: Hybrid.Mapping
  nameWithType: Hybrid.Mapping
  fullName: Hybrid.Mapping
- uid: Hybrid.Reflection
  commentId: N:Hybrid.Reflection
  name: Hybrid.Reflection
  nameWithType: Hybrid.Reflection
  fullName: Hybrid.Reflection
- uid: Hybrid.Domain.Entities
  commentId: N:Hybrid.Domain.Entities
  name: Hybrid.Domain.Entities
  nameWithType: Hybrid.Domain.Entities
  fullName: Hybrid.Domain.Entities
- uid: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1.ApplicationPath*
  commentId: Overload:Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1.ApplicationPath
  name: ApplicationPath
  nameWithType: BaseRazorPage<TModel>.ApplicationPath
  fullName: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage<TModel>.ApplicationPath
  nameWithType.vb: BaseRazorPage(Of TModel).ApplicationPath
  fullName.vb: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage(Of TModel).ApplicationPath
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1.LocalCultureInfo*
  commentId: Overload:Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1.LocalCultureInfo
  name: LocalCultureInfo
  nameWithType: BaseRazorPage<TModel>.LocalCultureInfo
  fullName: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage<TModel>.LocalCultureInfo
  nameWithType.vb: BaseRazorPage(Of TModel).LocalCultureInfo
  fullName.vb: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage(Of TModel).LocalCultureInfo
- uid: System.Globalization.CultureInfo
  commentId: T:System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: true
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: System.Globalization
  commentId: N:System.Globalization
  isExternal: true
  name: System.Globalization
  nameWithType: System.Globalization
  fullName: System.Globalization
- uid: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1.LocalSchedulerName*
  commentId: Overload:Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1.LocalSchedulerName
  name: LocalSchedulerName
  nameWithType: BaseRazorPage<TModel>.LocalSchedulerName
  fullName: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage<TModel>.LocalSchedulerName
  nameWithType.vb: BaseRazorPage(Of TModel).LocalSchedulerName
  fullName.vb: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage(Of TModel).LocalSchedulerName
- uid: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1.GenerationTime*
  commentId: Overload:Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1.GenerationTime
  name: GenerationTime
  nameWithType: BaseRazorPage<TModel>.GenerationTime
  fullName: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage<TModel>.GenerationTime
  nameWithType.vb: BaseRazorPage(Of TModel).GenerationTime
  fullName.vb: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage(Of TModel).GenerationTime
- uid: System.Diagnostics.Stopwatch
  commentId: T:System.Diagnostics.Stopwatch
  parent: System.Diagnostics
  isExternal: true
  name: Stopwatch
  nameWithType: Stopwatch
  fullName: System.Diagnostics.Stopwatch
- uid: System.Diagnostics
  commentId: N:System.Diagnostics
  isExternal: true
  name: System.Diagnostics
  nameWithType: System.Diagnostics
  fullName: System.Diagnostics
- uid: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1.LocalizationManager*
  commentId: Overload:Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1.LocalizationManager
  name: LocalizationManager
  nameWithType: BaseRazorPage<TModel>.LocalizationManager
  fullName: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage<TModel>.LocalizationManager
  nameWithType.vb: BaseRazorPage(Of TModel).LocalizationManager
  fullName.vb: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage(Of TModel).LocalizationManager
- uid: Hybrid.Localization.ILocalizationManager
  commentId: T:Hybrid.Localization.ILocalizationManager
  parent: Hybrid.Localization
  name: ILocalizationManager
  nameWithType: ILocalizationManager
  fullName: Hybrid.Localization.ILocalizationManager
- uid: Hybrid.Localization
  commentId: N:Hybrid.Localization
  name: Hybrid.Localization
  nameWithType: Hybrid.Localization
  fullName: Hybrid.Localization
- uid: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1.L(System.String)
  commentId: M:Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1.L(System.String)
  isExternal: true
  name: L(String)
  nameWithType: BaseRazorPage<TModel>.L(String)
  fullName: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage<TModel>.L(System.String)
  nameWithType.vb: BaseRazorPage(Of TModel).L(String)
  fullName.vb: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage(Of TModel).L(System.String)
  spec.csharp:
  - uid: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1.L(System.String)
    name: L
    nameWithType: BaseRazorPage<TModel>.L
    fullName: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage<TModel>.L
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1.L(System.String)
    name: L
    nameWithType: BaseRazorPage(Of TModel).L
    fullName: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage(Of TModel).L
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1.L(System.String,System.Globalization.CultureInfo)
  commentId: M:Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1.L(System.String,System.Globalization.CultureInfo)
  isExternal: true
  name: L(String, CultureInfo)
  nameWithType: BaseRazorPage<TModel>.L(String, CultureInfo)
  fullName: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage<TModel>.L(System.String, System.Globalization.CultureInfo)
  nameWithType.vb: BaseRazorPage(Of TModel).L(String, CultureInfo)
  fullName.vb: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage(Of TModel).L(System.String, System.Globalization.CultureInfo)
  spec.csharp:
  - uid: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1.L(System.String,System.Globalization.CultureInfo)
    name: L
    nameWithType: BaseRazorPage<TModel>.L
    fullName: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage<TModel>.L
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Globalization.CultureInfo
    name: CultureInfo
    nameWithType: CultureInfo
    fullName: System.Globalization.CultureInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1.L(System.String,System.Globalization.CultureInfo)
    name: L
    nameWithType: BaseRazorPage(Of TModel).L
    fullName: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage(Of TModel).L
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Globalization.CultureInfo
    name: CultureInfo
    nameWithType: CultureInfo
    fullName: System.Globalization.CultureInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1.LocalizationSourceName*
  commentId: Overload:Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1.LocalizationSourceName
  name: LocalizationSourceName
  nameWithType: BaseRazorPage<TModel>.LocalizationSourceName
  fullName: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage<TModel>.LocalizationSourceName
  nameWithType.vb: BaseRazorPage(Of TModel).LocalizationSourceName
  fullName.vb: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage(Of TModel).LocalizationSourceName
- uid: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1.#ctor*
  commentId: Overload:Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1.#ctor
  name: BaseRazorPage
  nameWithType: BaseRazorPage<TModel>.BaseRazorPage
  fullName: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage<TModel>.BaseRazorPage
  nameWithType.vb: BaseRazorPage(Of TModel).BaseRazorPage
  fullName.vb: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage(Of TModel).BaseRazorPage
- uid: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1.GetGenerationTime*
  commentId: Overload:Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1.GetGenerationTime
  name: GetGenerationTime
  nameWithType: BaseRazorPage<TModel>.GetGenerationTime
  fullName: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage<TModel>.GetGenerationTime
  nameWithType.vb: BaseRazorPage(Of TModel).GetGenerationTime
  fullName.vb: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage(Of TModel).GetGenerationTime
- uid: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1.L*
  commentId: Overload:Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1.L
  name: L
  nameWithType: BaseRazorPage<TModel>.L
  fullName: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage<TModel>.L
  nameWithType.vb: BaseRazorPage(Of TModel).L
  fullName.vb: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage(Of TModel).L
- uid: System.Object[]
  isExternal: true
  name: Object[]
  nameWithType: Object[]
  fullName: System.Object[]
  nameWithType.vb: Object()
  fullName.vb: System.Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1.Ls*
  commentId: Overload:Hybrid.AspNetCore.Mvc.Views.BaseRazorPage`1.Ls
  name: Ls
  nameWithType: BaseRazorPage<TModel>.Ls
  fullName: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage<TModel>.Ls
  nameWithType.vb: BaseRazorPage(Of TModel).Ls
  fullName.vb: Hybrid.AspNetCore.Mvc.Views.BaseRazorPage(Of TModel).Ls
