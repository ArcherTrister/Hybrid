### YamlMime:ManagedReference
items:
- uid: Hybrid.Localization.Configuration.ILocalizationSourceList
  commentId: T:Hybrid.Localization.Configuration.ILocalizationSourceList
  id: ILocalizationSourceList
  parent: Hybrid.Localization.Configuration
  children:
  - Hybrid.Localization.Configuration.ILocalizationSourceList.Extensions
  langs:
  - csharp
  - vb
  name: ILocalizationSourceList
  nameWithType: ILocalizationSourceList
  fullName: Hybrid.Localization.Configuration.ILocalizationSourceList
  type: Interface
  source:
    remote:
      path: src/Hybrid/Localization/Configuration/ILocalizationSourceList.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: ILocalizationSourceList
    path: ../src/Hybrid/Localization/Configuration/ILocalizationSourceList.cs
    startLine: 9
  assemblies:
  - Hybrid
  namespace: Hybrid.Localization.Configuration
  summary: "\nDefines a specialized list to store <xref href=\"Hybrid.Localization.Sources.ILocalizationSource\" data-throw-if-not-resolved=\"false\"></xref> object.\n"
  example: []
  syntax:
    content: 'public interface ILocalizationSourceList : IList<ILocalizationSource>, ICollection<ILocalizationSource>, IEnumerable<ILocalizationSource>, IEnumerable'
    content.vb: >-
      Public Interface ILocalizationSourceList

          Inherits IList(Of ILocalizationSource)
  inheritedMembers:
  - System.Collections.Generic.IList{Hybrid.Localization.Sources.ILocalizationSource}.IndexOf(Hybrid.Localization.Sources.ILocalizationSource)
  - System.Collections.Generic.IList{Hybrid.Localization.Sources.ILocalizationSource}.Insert(System.Int32,Hybrid.Localization.Sources.ILocalizationSource)
  - System.Collections.Generic.IList{Hybrid.Localization.Sources.ILocalizationSource}.RemoveAt(System.Int32)
  - System.Collections.Generic.IList{Hybrid.Localization.Sources.ILocalizationSource}.Item(System.Int32)
  - System.Collections.Generic.ICollection{Hybrid.Localization.Sources.ILocalizationSource}.Add(Hybrid.Localization.Sources.ILocalizationSource)
  - System.Collections.Generic.ICollection{Hybrid.Localization.Sources.ILocalizationSource}.Clear
  - System.Collections.Generic.ICollection{Hybrid.Localization.Sources.ILocalizationSource}.Contains(Hybrid.Localization.Sources.ILocalizationSource)
  - System.Collections.Generic.ICollection{Hybrid.Localization.Sources.ILocalizationSource}.CopyTo(Hybrid.Localization.Sources.ILocalizationSource[],System.Int32)
  - System.Collections.Generic.ICollection{Hybrid.Localization.Sources.ILocalizationSource}.Remove(Hybrid.Localization.Sources.ILocalizationSource)
  - System.Collections.Generic.ICollection{Hybrid.Localization.Sources.ILocalizationSource}.Count
  - System.Collections.Generic.ICollection{Hybrid.Localization.Sources.ILocalizationSource}.IsReadOnly
  - System.Collections.Generic.IEnumerable{Hybrid.Localization.Sources.ILocalizationSource}.GetEnumerator
  extensionMethods:
  - System.Collections.Generic.ICollection{Hybrid.Localization.Sources.ILocalizationSource}.OSharp.Collections.CollectionExtensions.AddIf``1(Hybrid.Localization.Sources.ILocalizationSource,System.Boolean)
  - System.Collections.Generic.ICollection{Hybrid.Localization.Sources.ILocalizationSource}.OSharp.Collections.CollectionExtensions.AddIf``1(Hybrid.Localization.Sources.ILocalizationSource,System.Func{System.Boolean})
  - System.Collections.Generic.ICollection{Hybrid.Localization.Sources.ILocalizationSource}.OSharp.Collections.CollectionExtensions.AddIfNotExist``1(Hybrid.Localization.Sources.ILocalizationSource,System.Func{Hybrid.Localization.Sources.ILocalizationSource,System.Boolean})
  - System.Collections.Generic.ICollection{Hybrid.Localization.Sources.ILocalizationSource}.OSharp.Collections.CollectionExtensions.AddIfNotNull``1(Hybrid.Localization.Sources.ILocalizationSource)
  - System.Collections.Generic.ICollection{Hybrid.Localization.Sources.ILocalizationSource}.OSharp.Collections.CollectionExtensions.GetOrAdd``1(System.Func{Hybrid.Localization.Sources.ILocalizationSource,System.Boolean},System.Func{Hybrid.Localization.Sources.ILocalizationSource})
  - System.Collections.Generic.ICollection{Hybrid.Localization.Sources.ILocalizationSource}.OSharp.Collections.CollectionExtensions.IsNullOrEmpty``1
  - System.Collections.Generic.IEnumerable{Hybrid.Localization.Sources.ILocalizationSource}.OSharp.Collections.EnumerableExtensions.Shuffle``1
  - System.Collections.Generic.IEnumerable{Hybrid.Localization.Sources.ILocalizationSource}.OSharp.Collections.EnumerableExtensions.ExpandAndToString``1(System.String)
  - System.Collections.Generic.IEnumerable{Hybrid.Localization.Sources.ILocalizationSource}.OSharp.Collections.EnumerableExtensions.ExpandAndToString``1(System.Func{Hybrid.Localization.Sources.ILocalizationSource,System.String},System.String)
  - System.Collections.Generic.IEnumerable{Hybrid.Localization.Sources.ILocalizationSource}.OSharp.Collections.EnumerableExtensions.IsEmpty``1
  - System.Collections.Generic.IEnumerable{Hybrid.Localization.Sources.ILocalizationSource}.OSharp.Collections.EnumerableExtensions.WhereIf``1(System.Func{Hybrid.Localization.Sources.ILocalizationSource,System.Boolean},System.Boolean)
  - System.Collections.Generic.IEnumerable{Hybrid.Localization.Sources.ILocalizationSource}.OSharp.Collections.EnumerableExtensions.OrderByPrefixes``1(System.Func{Hybrid.Localization.Sources.ILocalizationSource,System.String},System.String[])
  - System.Collections.Generic.IEnumerable{Hybrid.Localization.Sources.ILocalizationSource}.OSharp.Collections.EnumerableExtensions.DistinctBy``2(System.Func{Hybrid.Localization.Sources.ILocalizationSource,{TKey}})
  - System.Collections.Generic.IEnumerable{Hybrid.Localization.Sources.ILocalizationSource}.OSharp.Collections.EnumerableExtensions.OrderBy``1(System.String,System.ComponentModel.ListSortDirection)
  - System.Collections.Generic.IEnumerable{Hybrid.Localization.Sources.ILocalizationSource}.OSharp.Collections.EnumerableExtensions.OrderBy``1(OSharp.Filter.SortCondition)
  - System.Collections.Generic.IEnumerable{Hybrid.Localization.Sources.ILocalizationSource}.OSharp.Collections.EnumerableExtensions.OrderBy``1(OSharp.Filter.SortCondition{Hybrid.Localization.Sources.ILocalizationSource})
  - Hybrid.Localization.Configuration.ILocalizationSourceList.OSharp.Entity.EntityExtensions.CheckICreatedTime``2
  - Hybrid.Localization.Configuration.ILocalizationSourceList.OSharp.Entity.EntityExtensions.CheckICreationAudited``3(System.Security.Principal.IPrincipal)
  - Hybrid.Localization.Configuration.ILocalizationSourceList.OSharp.Entity.EntityExtensions.CheckIUpdateAudited``3(System.Security.Principal.IPrincipal)
  - System.Object.OSharp.Extensions.ObjectExtensions.CastTo(System.Type)
  - System.Object.OSharp.Extensions.ObjectExtensions.CastTo``1
  - System.Object.OSharp.Extensions.ObjectExtensions.CastTo``1({T})
  - Hybrid.Localization.Configuration.ILocalizationSourceList.OSharp.Extensions.ObjectExtensions.IsIn``1(Hybrid.Localization.Configuration.ILocalizationSourceList[])
  - System.Object.OSharp.Extensions.ObjectExtensions.ToDynamic
  - Hybrid.Localization.Configuration.ILocalizationSourceList.OSharp.Extensions.ObjectExtensions.DeepClone``1
  - Hybrid.Localization.Configuration.ILocalizationSourceList.OSharp.Extensions.ParameterCheckExtensions.Required``1(System.Func{Hybrid.Localization.Configuration.ILocalizationSourceList,System.Boolean},System.String)
  - Hybrid.Localization.Configuration.ILocalizationSourceList.OSharp.Extensions.ParameterCheckExtensions.Required``2(System.Func{Hybrid.Localization.Configuration.ILocalizationSourceList,System.Boolean},System.String)
  - Hybrid.Localization.Configuration.ILocalizationSourceList.OSharp.Extensions.ParameterCheckExtensions.CheckNotNull``1(System.String)
  - System.Collections.Generic.IEnumerable{Hybrid.Localization.Sources.ILocalizationSource}.OSharp.Extensions.ParameterCheckExtensions.CheckNotNullOrEmpty``1(System.String)
  - Hybrid.Localization.Configuration.ILocalizationSourceList.OSharp.Extensions.TryCatchExtensions.TryCatch``1(System.Action{Hybrid.Localization.Configuration.ILocalizationSourceList},System.Action{System.Exception},System.Action{Hybrid.Localization.Configuration.ILocalizationSourceList})
  - Hybrid.Localization.Configuration.ILocalizationSourceList.OSharp.Extensions.TryCatchExtensions.TryCatch``1(System.Action{Hybrid.Localization.Configuration.ILocalizationSourceList},System.Action{System.Exception})
  - Hybrid.Localization.Configuration.ILocalizationSourceList.OSharp.Extensions.TryCatchExtensions.TryCatch``2(System.Func{Hybrid.Localization.Configuration.ILocalizationSourceList,{TResult}},System.Action{System.Exception},System.Action{Hybrid.Localization.Configuration.ILocalizationSourceList})
  - Hybrid.Localization.Configuration.ILocalizationSourceList.OSharp.Extensions.TryCatchExtensions.TryCatch``2(System.Func{Hybrid.Localization.Configuration.ILocalizationSourceList,{TResult}},System.Action{System.Exception})
  - Hybrid.Localization.Configuration.ILocalizationSourceList.OSharp.Extensions.TryCatchExtensions.TryFinally``1(System.Action{Hybrid.Localization.Configuration.ILocalizationSourceList},System.Action{Hybrid.Localization.Configuration.ILocalizationSourceList})
  - System.Object.OSharp.Json.JsonExtensions.ToJsonString(System.Boolean,System.Boolean)
  - System.Object.OSharp.Mapping.MapperExtensions.MapTo``1
  - Hybrid.Localization.Configuration.ILocalizationSourceList.OSharp.Mapping.MapperExtensions.MapTo``2({TTarget})
  - System.Object.OSharp.Reflection.LockExtensions.Locking(System.Action)
  - Hybrid.Localization.Configuration.ILocalizationSourceList.OSharp.Reflection.LockExtensions.Locking``1(System.Action{Hybrid.Localization.Configuration.ILocalizationSourceList})
  - System.Object.OSharp.Reflection.LockExtensions.Locking``1(System.Func{{TResult}})
  - Hybrid.Localization.Configuration.ILocalizationSourceList.OSharp.Reflection.LockExtensions.Locking``2(System.Func{Hybrid.Localization.Configuration.ILocalizationSourceList,{TResult}})
  - System.Collections.Generic.ICollection{Hybrid.Localization.Sources.ILocalizationSource}.Hybrid.Extensions.CollectionExtensions.AddIf``1(Hybrid.Localization.Sources.ILocalizationSource,System.Boolean)
  - System.Collections.Generic.ICollection{Hybrid.Localization.Sources.ILocalizationSource}.Hybrid.Extensions.CollectionExtensions.AddIf``1(Hybrid.Localization.Sources.ILocalizationSource,System.Func{System.Boolean})
  - System.Collections.Generic.ICollection{Hybrid.Localization.Sources.ILocalizationSource}.Hybrid.Extensions.CollectionExtensions.AddIfNotExist``1(Hybrid.Localization.Sources.ILocalizationSource,System.Func{Hybrid.Localization.Sources.ILocalizationSource,System.Boolean})
  - System.Collections.Generic.ICollection{Hybrid.Localization.Sources.ILocalizationSource}.Hybrid.Extensions.CollectionExtensions.AddIfNotNull``1(Hybrid.Localization.Sources.ILocalizationSource)
  - System.Collections.Generic.ICollection{Hybrid.Localization.Sources.ILocalizationSource}.Hybrid.Extensions.CollectionExtensions.GetOrAdd``1(System.Func{Hybrid.Localization.Sources.ILocalizationSource,System.Boolean},System.Func{Hybrid.Localization.Sources.ILocalizationSource})
  - System.Collections.Generic.ICollection{Hybrid.Localization.Sources.ILocalizationSource}.Hybrid.Extensions.CollectionExtensions.IsNullOrEmpty``1
  - System.Collections.Generic.ICollection{Hybrid.Localization.Sources.ILocalizationSource}.Hybrid.Extensions.CollectionExtensions.AddIfNotContains``1(Hybrid.Localization.Sources.ILocalizationSource)
  - System.Collections.Generic.IEnumerable{Hybrid.Localization.Sources.ILocalizationSource}.Hybrid.Extensions.EnumerableExtensions.JoinAsString``1(System.String)
  - System.Collections.Generic.IEnumerable{Hybrid.Localization.Sources.ILocalizationSource}.Hybrid.Extensions.EnumerableExtensions.WhereIf``1(System.Boolean,System.Func{Hybrid.Localization.Sources.ILocalizationSource,System.Boolean})
  - System.Collections.Generic.IEnumerable{Hybrid.Localization.Sources.ILocalizationSource}.Hybrid.Extensions.EnumerableExtensions.WhereIf``1(System.Boolean,System.Func{Hybrid.Localization.Sources.ILocalizationSource,System.Int32,System.Boolean})
  - System.Collections.Generic.IEnumerable{Hybrid.Localization.Sources.ILocalizationSource}.Hybrid.Extensions.EnumerableExtensions.Shuffle``1
  - System.Collections.Generic.IEnumerable{Hybrid.Localization.Sources.ILocalizationSource}.Hybrid.Extensions.EnumerableExtensions.ExpandAndToString``1(System.String)
  - System.Collections.Generic.IEnumerable{Hybrid.Localization.Sources.ILocalizationSource}.Hybrid.Extensions.EnumerableExtensions.ExpandAndToString``1(System.Func{Hybrid.Localization.Sources.ILocalizationSource,System.String},System.String)
  - System.Collections.Generic.IEnumerable{Hybrid.Localization.Sources.ILocalizationSource}.Hybrid.Extensions.EnumerableExtensions.IsEmpty``1
  - System.Collections.Generic.IEnumerable{Hybrid.Localization.Sources.ILocalizationSource}.Hybrid.Extensions.EnumerableExtensions.WhereIf``1(System.Func{Hybrid.Localization.Sources.ILocalizationSource,System.Boolean},System.Boolean)
  - System.Collections.Generic.IEnumerable{Hybrid.Localization.Sources.ILocalizationSource}.Hybrid.Extensions.EnumerableExtensions.DistinctBy``2(System.Func{Hybrid.Localization.Sources.ILocalizationSource,{TKey}})
  - System.Collections.Generic.IEnumerable{Hybrid.Localization.Sources.ILocalizationSource}.Hybrid.Extensions.EnumerableExtensions.OrderBy``1(System.String,System.ComponentModel.ListSortDirection)
  - System.Collections.Generic.IEnumerable{Hybrid.Localization.Sources.ILocalizationSource}.Hybrid.Extensions.EnumerableExtensions.OrderBy``1(Hybrid.Filter.SortCondition)
  - System.Collections.Generic.IEnumerable{Hybrid.Localization.Sources.ILocalizationSource}.Hybrid.Extensions.EnumerableExtensions.OrderBy``1(Hybrid.Filter.SortCondition{Hybrid.Localization.Sources.ILocalizationSource})
  - System.Collections.Generic.IEnumerable{Hybrid.Localization.Sources.ILocalizationSource}.Hybrid.Extensions.EnumerableExtensions.OrderByPrefixes``1(System.Func{Hybrid.Localization.Sources.ILocalizationSource,System.String},System.String[])
  - System.Object.Hybrid.Extensions.ObjectExtensions.CastTo(System.Type)
  - System.Object.Hybrid.Extensions.ObjectExtensions.CastTo``1
  - System.Object.Hybrid.Extensions.ObjectExtensions.CastTo``1({T})
  - Hybrid.Localization.Configuration.ILocalizationSourceList.Hybrid.Extensions.ObjectExtensions.IsIn``1(Hybrid.Localization.Configuration.ILocalizationSourceList[])
  - System.Object.Hybrid.Extensions.ObjectExtensions.ToDynamic
  - Hybrid.Localization.Configuration.ILocalizationSourceList.Hybrid.Extensions.ObjectExtensions.DeepClone``1
  - Hybrid.Localization.Configuration.ILocalizationSourceList.Hybrid.Extensions.ParameterCheckExtensions.Required``1(System.Func{Hybrid.Localization.Configuration.ILocalizationSourceList,System.Boolean},System.String)
  - Hybrid.Localization.Configuration.ILocalizationSourceList.Hybrid.Extensions.ParameterCheckExtensions.Required``2(System.Func{Hybrid.Localization.Configuration.ILocalizationSourceList,System.Boolean},System.String)
  - Hybrid.Localization.Configuration.ILocalizationSourceList.Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(System.String)
  - System.Collections.Generic.IEnumerable{Hybrid.Localization.Sources.ILocalizationSource}.Hybrid.Extensions.ParameterCheckExtensions.CheckNotNullOrEmpty``1(System.String)
  - Hybrid.Localization.Configuration.ILocalizationSourceList.Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{Hybrid.Localization.Configuration.ILocalizationSourceList},System.Action{System.Exception},System.Action{Hybrid.Localization.Configuration.ILocalizationSourceList})
  - Hybrid.Localization.Configuration.ILocalizationSourceList.Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{Hybrid.Localization.Configuration.ILocalizationSourceList},System.Action{System.Exception})
  - Hybrid.Localization.Configuration.ILocalizationSourceList.Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{Hybrid.Localization.Configuration.ILocalizationSourceList,{TResult}},System.Action{System.Exception},System.Action{Hybrid.Localization.Configuration.ILocalizationSourceList})
  - Hybrid.Localization.Configuration.ILocalizationSourceList.Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{Hybrid.Localization.Configuration.ILocalizationSourceList,{TResult}},System.Action{System.Exception})
  - Hybrid.Localization.Configuration.ILocalizationSourceList.Hybrid.Extensions.TryCatchExtensions.TryFinally``1(System.Action{Hybrid.Localization.Configuration.ILocalizationSourceList},System.Action{Hybrid.Localization.Configuration.ILocalizationSourceList})
  - System.Object.Hybrid.Json.JsonExtensions.ToJsonString(System.Boolean,System.Boolean)
  - System.Object.Hybrid.Mapping.MapperExtensions.MapTo``1
  - Hybrid.Localization.Configuration.ILocalizationSourceList.Hybrid.Mapping.MapperExtensions.MapTo``2({TTarget})
  - System.Object.Hybrid.Reflection.LockExtensions.Locking(System.Action)
  - Hybrid.Localization.Configuration.ILocalizationSourceList.Hybrid.Reflection.LockExtensions.Locking``1(System.Action{Hybrid.Localization.Configuration.ILocalizationSourceList})
  - System.Object.Hybrid.Reflection.LockExtensions.Locking``1(System.Func{{TResult}})
  - Hybrid.Localization.Configuration.ILocalizationSourceList.Hybrid.Reflection.LockExtensions.Locking``2(System.Func{Hybrid.Localization.Configuration.ILocalizationSourceList,{TResult}})
  - Hybrid.Localization.Configuration.ILocalizationSourceList.Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2
  - Hybrid.Localization.Configuration.ILocalizationSourceList.Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(System.Security.Principal.IPrincipal)
  - Hybrid.Localization.Configuration.ILocalizationSourceList.Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(System.Security.Principal.IPrincipal)
  - System.Collections.Generic.IEnumerable{Hybrid.Localization.Sources.ILocalizationSource}.IdentityServer4.Extensions.IEnumerableExtensions.IsNullOrEmpty``1
  - System.Collections.Generic.IEnumerable{Hybrid.Localization.Sources.ILocalizationSource}.IdentityServer4.Extensions.IEnumerableExtensions.HasDuplicates``2(System.Func{Hybrid.Localization.Sources.ILocalizationSource,{TProp}})
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Hybrid.Localization.Configuration.ILocalizationSourceList.Extensions
  commentId: P:Hybrid.Localization.Configuration.ILocalizationSourceList.Extensions
  id: Extensions
  parent: Hybrid.Localization.Configuration.ILocalizationSourceList
  langs:
  - csharp
  - vb
  name: Extensions
  nameWithType: ILocalizationSourceList.Extensions
  fullName: Hybrid.Localization.Configuration.ILocalizationSourceList.Extensions
  type: Property
  source:
    remote:
      path: src/Hybrid/Localization/Configuration/ILocalizationSourceList.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: Extensions
    path: ../src/Hybrid/Localization/Configuration/ILocalizationSourceList.cs
    startLine: 14
  assemblies:
  - Hybrid
  namespace: Hybrid.Localization.Configuration
  summary: "\nExtensions for dictionay based localization sources.\n"
  example: []
  syntax:
    content: IList<LocalizationSourceExtensionInfo> Extensions { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IList{Hybrid.Localization.Sources.LocalizationSourceExtensionInfo}
    content.vb: ReadOnly Property Extensions As IList(Of LocalizationSourceExtensionInfo)
  overload: Hybrid.Localization.Configuration.ILocalizationSourceList.Extensions*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
references:
- uid: Hybrid.Localization.Sources.ILocalizationSource
  commentId: T:Hybrid.Localization.Sources.ILocalizationSource
  parent: Hybrid.Localization.Sources
  name: ILocalizationSource
  nameWithType: ILocalizationSource
  fullName: Hybrid.Localization.Sources.ILocalizationSource
- uid: Hybrid.Localization.Configuration
  commentId: N:Hybrid.Localization.Configuration
  name: Hybrid.Localization.Configuration
  nameWithType: Hybrid.Localization.Configuration
  fullName: Hybrid.Localization.Configuration
- uid: System.Collections.Generic.IList{Hybrid.Localization.Sources.ILocalizationSource}.IndexOf(Hybrid.Localization.Sources.ILocalizationSource)
  commentId: M:System.Collections.Generic.IList{Hybrid.Localization.Sources.ILocalizationSource}.IndexOf(Hybrid.Localization.Sources.ILocalizationSource)
  parent: System.Collections.Generic.IList{Hybrid.Localization.Sources.ILocalizationSource}
  definition: System.Collections.Generic.IList`1.IndexOf(`0)
  name: IndexOf(ILocalizationSource)
  nameWithType: IList<ILocalizationSource>.IndexOf(ILocalizationSource)
  fullName: System.Collections.Generic.IList<Hybrid.Localization.Sources.ILocalizationSource>.IndexOf(Hybrid.Localization.Sources.ILocalizationSource)
  nameWithType.vb: IList(Of ILocalizationSource).IndexOf(ILocalizationSource)
  fullName.vb: System.Collections.Generic.IList(Of Hybrid.Localization.Sources.ILocalizationSource).IndexOf(Hybrid.Localization.Sources.ILocalizationSource)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.IndexOf(`0)
    name: IndexOf
    nameWithType: IList<ILocalizationSource>.IndexOf
    fullName: System.Collections.Generic.IList<Hybrid.Localization.Sources.ILocalizationSource>.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Hybrid.Localization.Sources.ILocalizationSource
    name: ILocalizationSource
    nameWithType: ILocalizationSource
    fullName: Hybrid.Localization.Sources.ILocalizationSource
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.IndexOf(`0)
    name: IndexOf
    nameWithType: IList(Of ILocalizationSource).IndexOf
    fullName: System.Collections.Generic.IList(Of Hybrid.Localization.Sources.ILocalizationSource).IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Hybrid.Localization.Sources.ILocalizationSource
    name: ILocalizationSource
    nameWithType: ILocalizationSource
    fullName: Hybrid.Localization.Sources.ILocalizationSource
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList{Hybrid.Localization.Sources.ILocalizationSource}.Insert(System.Int32,Hybrid.Localization.Sources.ILocalizationSource)
  commentId: M:System.Collections.Generic.IList{Hybrid.Localization.Sources.ILocalizationSource}.Insert(System.Int32,Hybrid.Localization.Sources.ILocalizationSource)
  parent: System.Collections.Generic.IList{Hybrid.Localization.Sources.ILocalizationSource}
  definition: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
  name: Insert(Int32, ILocalizationSource)
  nameWithType: IList<ILocalizationSource>.Insert(Int32, ILocalizationSource)
  fullName: System.Collections.Generic.IList<Hybrid.Localization.Sources.ILocalizationSource>.Insert(System.Int32, Hybrid.Localization.Sources.ILocalizationSource)
  nameWithType.vb: IList(Of ILocalizationSource).Insert(Int32, ILocalizationSource)
  fullName.vb: System.Collections.Generic.IList(Of Hybrid.Localization.Sources.ILocalizationSource).Insert(System.Int32, Hybrid.Localization.Sources.ILocalizationSource)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
    name: Insert
    nameWithType: IList<ILocalizationSource>.Insert
    fullName: System.Collections.Generic.IList<Hybrid.Localization.Sources.ILocalizationSource>.Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Hybrid.Localization.Sources.ILocalizationSource
    name: ILocalizationSource
    nameWithType: ILocalizationSource
    fullName: Hybrid.Localization.Sources.ILocalizationSource
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
    name: Insert
    nameWithType: IList(Of ILocalizationSource).Insert
    fullName: System.Collections.Generic.IList(Of Hybrid.Localization.Sources.ILocalizationSource).Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Hybrid.Localization.Sources.ILocalizationSource
    name: ILocalizationSource
    nameWithType: ILocalizationSource
    fullName: Hybrid.Localization.Sources.ILocalizationSource
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList{Hybrid.Localization.Sources.ILocalizationSource}.RemoveAt(System.Int32)
  commentId: M:System.Collections.Generic.IList{Hybrid.Localization.Sources.ILocalizationSource}.RemoveAt(System.Int32)
  parent: System.Collections.Generic.IList{Hybrid.Localization.Sources.ILocalizationSource}
  definition: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
  name: RemoveAt(Int32)
  nameWithType: IList<ILocalizationSource>.RemoveAt(Int32)
  fullName: System.Collections.Generic.IList<Hybrid.Localization.Sources.ILocalizationSource>.RemoveAt(System.Int32)
  nameWithType.vb: IList(Of ILocalizationSource).RemoveAt(Int32)
  fullName.vb: System.Collections.Generic.IList(Of Hybrid.Localization.Sources.ILocalizationSource).RemoveAt(System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: IList<ILocalizationSource>.RemoveAt
    fullName: System.Collections.Generic.IList<Hybrid.Localization.Sources.ILocalizationSource>.RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: IList(Of ILocalizationSource).RemoveAt
    fullName: System.Collections.Generic.IList(Of Hybrid.Localization.Sources.ILocalizationSource).RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList{Hybrid.Localization.Sources.ILocalizationSource}.Item(System.Int32)
  commentId: P:System.Collections.Generic.IList{Hybrid.Localization.Sources.ILocalizationSource}.Item(System.Int32)
  parent: System.Collections.Generic.IList{Hybrid.Localization.Sources.ILocalizationSource}
  definition: System.Collections.Generic.IList`1.Item(System.Int32)
  name: Item[Int32]
  nameWithType: IList<ILocalizationSource>.Item[Int32]
  fullName: System.Collections.Generic.IList<Hybrid.Localization.Sources.ILocalizationSource>.Item[System.Int32]
  nameWithType.vb: IList(Of ILocalizationSource).Item(Int32)
  fullName.vb: System.Collections.Generic.IList(Of Hybrid.Localization.Sources.ILocalizationSource).Item(System.Int32)
  name.vb: Item(Int32)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.Item(System.Int32)
    name: Item
    nameWithType: IList<ILocalizationSource>.Item
    fullName: System.Collections.Generic.IList<Hybrid.Localization.Sources.ILocalizationSource>.Item
    isExternal: true
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Generic.IList`1.Item(System.Int32)
    name: Item
    nameWithType: IList(Of ILocalizationSource).Item
    fullName: System.Collections.Generic.IList(Of Hybrid.Localization.Sources.ILocalizationSource).Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection{Hybrid.Localization.Sources.ILocalizationSource}.Add(Hybrid.Localization.Sources.ILocalizationSource)
  commentId: M:System.Collections.Generic.ICollection{Hybrid.Localization.Sources.ILocalizationSource}.Add(Hybrid.Localization.Sources.ILocalizationSource)
  parent: System.Collections.Generic.ICollection{Hybrid.Localization.Sources.ILocalizationSource}
  definition: System.Collections.Generic.ICollection`1.Add(`0)
  name: Add(ILocalizationSource)
  nameWithType: ICollection<ILocalizationSource>.Add(ILocalizationSource)
  fullName: System.Collections.Generic.ICollection<Hybrid.Localization.Sources.ILocalizationSource>.Add(Hybrid.Localization.Sources.ILocalizationSource)
  nameWithType.vb: ICollection(Of ILocalizationSource).Add(ILocalizationSource)
  fullName.vb: System.Collections.Generic.ICollection(Of Hybrid.Localization.Sources.ILocalizationSource).Add(Hybrid.Localization.Sources.ILocalizationSource)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection<ILocalizationSource>.Add
    fullName: System.Collections.Generic.ICollection<Hybrid.Localization.Sources.ILocalizationSource>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Hybrid.Localization.Sources.ILocalizationSource
    name: ILocalizationSource
    nameWithType: ILocalizationSource
    fullName: Hybrid.Localization.Sources.ILocalizationSource
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection(Of ILocalizationSource).Add
    fullName: System.Collections.Generic.ICollection(Of Hybrid.Localization.Sources.ILocalizationSource).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Hybrid.Localization.Sources.ILocalizationSource
    name: ILocalizationSource
    nameWithType: ILocalizationSource
    fullName: Hybrid.Localization.Sources.ILocalizationSource
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection{Hybrid.Localization.Sources.ILocalizationSource}.Clear
  commentId: M:System.Collections.Generic.ICollection{Hybrid.Localization.Sources.ILocalizationSource}.Clear
  parent: System.Collections.Generic.ICollection{Hybrid.Localization.Sources.ILocalizationSource}
  definition: System.Collections.Generic.ICollection`1.Clear
  name: Clear()
  nameWithType: ICollection<ILocalizationSource>.Clear()
  fullName: System.Collections.Generic.ICollection<Hybrid.Localization.Sources.ILocalizationSource>.Clear()
  nameWithType.vb: ICollection(Of ILocalizationSource).Clear()
  fullName.vb: System.Collections.Generic.ICollection(Of Hybrid.Localization.Sources.ILocalizationSource).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection<ILocalizationSource>.Clear
    fullName: System.Collections.Generic.ICollection<Hybrid.Localization.Sources.ILocalizationSource>.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection(Of ILocalizationSource).Clear
    fullName: System.Collections.Generic.ICollection(Of Hybrid.Localization.Sources.ILocalizationSource).Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection{Hybrid.Localization.Sources.ILocalizationSource}.Contains(Hybrid.Localization.Sources.ILocalizationSource)
  commentId: M:System.Collections.Generic.ICollection{Hybrid.Localization.Sources.ILocalizationSource}.Contains(Hybrid.Localization.Sources.ILocalizationSource)
  parent: System.Collections.Generic.ICollection{Hybrid.Localization.Sources.ILocalizationSource}
  definition: System.Collections.Generic.ICollection`1.Contains(`0)
  name: Contains(ILocalizationSource)
  nameWithType: ICollection<ILocalizationSource>.Contains(ILocalizationSource)
  fullName: System.Collections.Generic.ICollection<Hybrid.Localization.Sources.ILocalizationSource>.Contains(Hybrid.Localization.Sources.ILocalizationSource)
  nameWithType.vb: ICollection(Of ILocalizationSource).Contains(ILocalizationSource)
  fullName.vb: System.Collections.Generic.ICollection(Of Hybrid.Localization.Sources.ILocalizationSource).Contains(Hybrid.Localization.Sources.ILocalizationSource)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection<ILocalizationSource>.Contains
    fullName: System.Collections.Generic.ICollection<Hybrid.Localization.Sources.ILocalizationSource>.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Hybrid.Localization.Sources.ILocalizationSource
    name: ILocalizationSource
    nameWithType: ILocalizationSource
    fullName: Hybrid.Localization.Sources.ILocalizationSource
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection(Of ILocalizationSource).Contains
    fullName: System.Collections.Generic.ICollection(Of Hybrid.Localization.Sources.ILocalizationSource).Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Hybrid.Localization.Sources.ILocalizationSource
    name: ILocalizationSource
    nameWithType: ILocalizationSource
    fullName: Hybrid.Localization.Sources.ILocalizationSource
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection{Hybrid.Localization.Sources.ILocalizationSource}.CopyTo(Hybrid.Localization.Sources.ILocalizationSource[],System.Int32)
  commentId: M:System.Collections.Generic.ICollection{Hybrid.Localization.Sources.ILocalizationSource}.CopyTo(Hybrid.Localization.Sources.ILocalizationSource[],System.Int32)
  parent: System.Collections.Generic.ICollection{Hybrid.Localization.Sources.ILocalizationSource}
  definition: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  name: CopyTo(ILocalizationSource[], Int32)
  nameWithType: ICollection<ILocalizationSource>.CopyTo(ILocalizationSource[], Int32)
  fullName: System.Collections.Generic.ICollection<Hybrid.Localization.Sources.ILocalizationSource>.CopyTo(Hybrid.Localization.Sources.ILocalizationSource[], System.Int32)
  nameWithType.vb: ICollection(Of ILocalizationSource).CopyTo(ILocalizationSource(), Int32)
  fullName.vb: System.Collections.Generic.ICollection(Of Hybrid.Localization.Sources.ILocalizationSource).CopyTo(Hybrid.Localization.Sources.ILocalizationSource(), System.Int32)
  name.vb: CopyTo(ILocalizationSource(), Int32)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection<ILocalizationSource>.CopyTo
    fullName: System.Collections.Generic.ICollection<Hybrid.Localization.Sources.ILocalizationSource>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Hybrid.Localization.Sources.ILocalizationSource
    name: ILocalizationSource
    nameWithType: ILocalizationSource
    fullName: Hybrid.Localization.Sources.ILocalizationSource
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection(Of ILocalizationSource).CopyTo
    fullName: System.Collections.Generic.ICollection(Of Hybrid.Localization.Sources.ILocalizationSource).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Hybrid.Localization.Sources.ILocalizationSource
    name: ILocalizationSource
    nameWithType: ILocalizationSource
    fullName: Hybrid.Localization.Sources.ILocalizationSource
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection{Hybrid.Localization.Sources.ILocalizationSource}.Remove(Hybrid.Localization.Sources.ILocalizationSource)
  commentId: M:System.Collections.Generic.ICollection{Hybrid.Localization.Sources.ILocalizationSource}.Remove(Hybrid.Localization.Sources.ILocalizationSource)
  parent: System.Collections.Generic.ICollection{Hybrid.Localization.Sources.ILocalizationSource}
  definition: System.Collections.Generic.ICollection`1.Remove(`0)
  name: Remove(ILocalizationSource)
  nameWithType: ICollection<ILocalizationSource>.Remove(ILocalizationSource)
  fullName: System.Collections.Generic.ICollection<Hybrid.Localization.Sources.ILocalizationSource>.Remove(Hybrid.Localization.Sources.ILocalizationSource)
  nameWithType.vb: ICollection(Of ILocalizationSource).Remove(ILocalizationSource)
  fullName.vb: System.Collections.Generic.ICollection(Of Hybrid.Localization.Sources.ILocalizationSource).Remove(Hybrid.Localization.Sources.ILocalizationSource)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection<ILocalizationSource>.Remove
    fullName: System.Collections.Generic.ICollection<Hybrid.Localization.Sources.ILocalizationSource>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Hybrid.Localization.Sources.ILocalizationSource
    name: ILocalizationSource
    nameWithType: ILocalizationSource
    fullName: Hybrid.Localization.Sources.ILocalizationSource
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection(Of ILocalizationSource).Remove
    fullName: System.Collections.Generic.ICollection(Of Hybrid.Localization.Sources.ILocalizationSource).Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Hybrid.Localization.Sources.ILocalizationSource
    name: ILocalizationSource
    nameWithType: ILocalizationSource
    fullName: Hybrid.Localization.Sources.ILocalizationSource
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection{Hybrid.Localization.Sources.ILocalizationSource}.Count
  commentId: P:System.Collections.Generic.ICollection{Hybrid.Localization.Sources.ILocalizationSource}.Count
  parent: System.Collections.Generic.ICollection{Hybrid.Localization.Sources.ILocalizationSource}
  definition: System.Collections.Generic.ICollection`1.Count
  name: Count
  nameWithType: ICollection<ILocalizationSource>.Count
  fullName: System.Collections.Generic.ICollection<Hybrid.Localization.Sources.ILocalizationSource>.Count
  nameWithType.vb: ICollection(Of ILocalizationSource).Count
  fullName.vb: System.Collections.Generic.ICollection(Of Hybrid.Localization.Sources.ILocalizationSource).Count
- uid: System.Collections.Generic.ICollection{Hybrid.Localization.Sources.ILocalizationSource}.IsReadOnly
  commentId: P:System.Collections.Generic.ICollection{Hybrid.Localization.Sources.ILocalizationSource}.IsReadOnly
  parent: System.Collections.Generic.ICollection{Hybrid.Localization.Sources.ILocalizationSource}
  definition: System.Collections.Generic.ICollection`1.IsReadOnly
  name: IsReadOnly
  nameWithType: ICollection<ILocalizationSource>.IsReadOnly
  fullName: System.Collections.Generic.ICollection<Hybrid.Localization.Sources.ILocalizationSource>.IsReadOnly
  nameWithType.vb: ICollection(Of ILocalizationSource).IsReadOnly
  fullName.vb: System.Collections.Generic.ICollection(Of Hybrid.Localization.Sources.ILocalizationSource).IsReadOnly
- uid: System.Collections.Generic.IEnumerable{Hybrid.Localization.Sources.ILocalizationSource}.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable{Hybrid.Localization.Sources.ILocalizationSource}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{Hybrid.Localization.Sources.ILocalizationSource}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  name: GetEnumerator()
  nameWithType: IEnumerable<ILocalizationSource>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<Hybrid.Localization.Sources.ILocalizationSource>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of ILocalizationSource).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of Hybrid.Localization.Sources.ILocalizationSource).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<ILocalizationSource>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<Hybrid.Localization.Sources.ILocalizationSource>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of ILocalizationSource).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of Hybrid.Localization.Sources.ILocalizationSource).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection{Hybrid.Localization.Sources.ILocalizationSource}.OSharp.Collections.CollectionExtensions.AddIf``1(Hybrid.Localization.Sources.ILocalizationSource,System.Boolean)
  commentId: M:OSharp.Collections.CollectionExtensions.AddIf``1(System.Collections.Generic.ICollection{``0},``0,System.Boolean)
  parent: OSharp.Collections.CollectionExtensions
  definition: OSharp.Collections.CollectionExtensions.AddIf``1(System.Collections.Generic.ICollection{``0},``0,System.Boolean)
  name: AddIf<ILocalizationSource>(ILocalizationSource, Boolean)
  nameWithType: CollectionExtensions.AddIf<ILocalizationSource>(ILocalizationSource, Boolean)
  fullName: OSharp.Collections.CollectionExtensions.AddIf<Hybrid.Localization.Sources.ILocalizationSource>(Hybrid.Localization.Sources.ILocalizationSource, System.Boolean)
  nameWithType.vb: CollectionExtensions.AddIf(Of ILocalizationSource)(ILocalizationSource, Boolean)
  fullName.vb: OSharp.Collections.CollectionExtensions.AddIf(Of Hybrid.Localization.Sources.ILocalizationSource)(Hybrid.Localization.Sources.ILocalizationSource, System.Boolean)
  name.vb: AddIf(Of ILocalizationSource)(ILocalizationSource, Boolean)
  spec.csharp:
  - uid: OSharp.Collections.CollectionExtensions.AddIf``1(``0,System.Boolean)
    name: AddIf<ILocalizationSource>
    nameWithType: CollectionExtensions.AddIf<ILocalizationSource>
    fullName: OSharp.Collections.CollectionExtensions.AddIf<Hybrid.Localization.Sources.ILocalizationSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Hybrid.Localization.Sources.ILocalizationSource
    name: ILocalizationSource
    nameWithType: ILocalizationSource
    fullName: Hybrid.Localization.Sources.ILocalizationSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Collections.CollectionExtensions.AddIf``1(``0,System.Boolean)
    name: AddIf(Of ILocalizationSource)
    nameWithType: CollectionExtensions.AddIf(Of ILocalizationSource)
    fullName: OSharp.Collections.CollectionExtensions.AddIf(Of Hybrid.Localization.Sources.ILocalizationSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Hybrid.Localization.Sources.ILocalizationSource
    name: ILocalizationSource
    nameWithType: ILocalizationSource
    fullName: Hybrid.Localization.Sources.ILocalizationSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection{Hybrid.Localization.Sources.ILocalizationSource}.OSharp.Collections.CollectionExtensions.AddIf``1(Hybrid.Localization.Sources.ILocalizationSource,System.Func{System.Boolean})
  commentId: M:OSharp.Collections.CollectionExtensions.AddIf``1(System.Collections.Generic.ICollection{``0},``0,System.Func{System.Boolean})
  parent: OSharp.Collections.CollectionExtensions
  definition: OSharp.Collections.CollectionExtensions.AddIf``1(System.Collections.Generic.ICollection{``0},``0,System.Func{System.Boolean})
  name: AddIf<ILocalizationSource>(ILocalizationSource, Func<Boolean>)
  nameWithType: CollectionExtensions.AddIf<ILocalizationSource>(ILocalizationSource, Func<Boolean>)
  fullName: OSharp.Collections.CollectionExtensions.AddIf<Hybrid.Localization.Sources.ILocalizationSource>(Hybrid.Localization.Sources.ILocalizationSource, System.Func<System.Boolean>)
  nameWithType.vb: CollectionExtensions.AddIf(Of ILocalizationSource)(ILocalizationSource, Func(Of Boolean))
  fullName.vb: OSharp.Collections.CollectionExtensions.AddIf(Of Hybrid.Localization.Sources.ILocalizationSource)(Hybrid.Localization.Sources.ILocalizationSource, System.Func(Of System.Boolean))
  name.vb: AddIf(Of ILocalizationSource)(ILocalizationSource, Func(Of Boolean))
  spec.csharp:
  - uid: OSharp.Collections.CollectionExtensions.AddIf``1(``0,System.Func{System.Boolean})
    name: AddIf<ILocalizationSource>
    nameWithType: CollectionExtensions.AddIf<ILocalizationSource>
    fullName: OSharp.Collections.CollectionExtensions.AddIf<Hybrid.Localization.Sources.ILocalizationSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Hybrid.Localization.Sources.ILocalizationSource
    name: ILocalizationSource
    nameWithType: ILocalizationSource
    fullName: Hybrid.Localization.Sources.ILocalizationSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Collections.CollectionExtensions.AddIf``1(``0,System.Func{System.Boolean})
    name: AddIf(Of ILocalizationSource)
    nameWithType: CollectionExtensions.AddIf(Of ILocalizationSource)
    fullName: OSharp.Collections.CollectionExtensions.AddIf(Of Hybrid.Localization.Sources.ILocalizationSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Hybrid.Localization.Sources.ILocalizationSource
    name: ILocalizationSource
    nameWithType: ILocalizationSource
    fullName: Hybrid.Localization.Sources.ILocalizationSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection{Hybrid.Localization.Sources.ILocalizationSource}.OSharp.Collections.CollectionExtensions.AddIfNotExist``1(Hybrid.Localization.Sources.ILocalizationSource,System.Func{Hybrid.Localization.Sources.ILocalizationSource,System.Boolean})
  commentId: M:OSharp.Collections.CollectionExtensions.AddIfNotExist``1(System.Collections.Generic.ICollection{``0},``0,System.Func{``0,System.Boolean})
  parent: OSharp.Collections.CollectionExtensions
  definition: OSharp.Collections.CollectionExtensions.AddIfNotExist``1(System.Collections.Generic.ICollection{``0},``0,System.Func{``0,System.Boolean})
  name: AddIfNotExist<ILocalizationSource>(ILocalizationSource, Func<ILocalizationSource, Boolean>)
  nameWithType: CollectionExtensions.AddIfNotExist<ILocalizationSource>(ILocalizationSource, Func<ILocalizationSource, Boolean>)
  fullName: OSharp.Collections.CollectionExtensions.AddIfNotExist<Hybrid.Localization.Sources.ILocalizationSource>(Hybrid.Localization.Sources.ILocalizationSource, System.Func<Hybrid.Localization.Sources.ILocalizationSource, System.Boolean>)
  nameWithType.vb: CollectionExtensions.AddIfNotExist(Of ILocalizationSource)(ILocalizationSource, Func(Of ILocalizationSource, Boolean))
  fullName.vb: OSharp.Collections.CollectionExtensions.AddIfNotExist(Of Hybrid.Localization.Sources.ILocalizationSource)(Hybrid.Localization.Sources.ILocalizationSource, System.Func(Of Hybrid.Localization.Sources.ILocalizationSource, System.Boolean))
  name.vb: AddIfNotExist(Of ILocalizationSource)(ILocalizationSource, Func(Of ILocalizationSource, Boolean))
  spec.csharp:
  - uid: OSharp.Collections.CollectionExtensions.AddIfNotExist``1(``0,System.Func{``0,System.Boolean})
    name: AddIfNotExist<ILocalizationSource>
    nameWithType: CollectionExtensions.AddIfNotExist<ILocalizationSource>
    fullName: OSharp.Collections.CollectionExtensions.AddIfNotExist<Hybrid.Localization.Sources.ILocalizationSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Hybrid.Localization.Sources.ILocalizationSource
    name: ILocalizationSource
    nameWithType: ILocalizationSource
    fullName: Hybrid.Localization.Sources.ILocalizationSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Localization.Sources.ILocalizationSource
    name: ILocalizationSource
    nameWithType: ILocalizationSource
    fullName: Hybrid.Localization.Sources.ILocalizationSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Collections.CollectionExtensions.AddIfNotExist``1(``0,System.Func{``0,System.Boolean})
    name: AddIfNotExist(Of ILocalizationSource)
    nameWithType: CollectionExtensions.AddIfNotExist(Of ILocalizationSource)
    fullName: OSharp.Collections.CollectionExtensions.AddIfNotExist(Of Hybrid.Localization.Sources.ILocalizationSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Hybrid.Localization.Sources.ILocalizationSource
    name: ILocalizationSource
    nameWithType: ILocalizationSource
    fullName: Hybrid.Localization.Sources.ILocalizationSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Localization.Sources.ILocalizationSource
    name: ILocalizationSource
    nameWithType: ILocalizationSource
    fullName: Hybrid.Localization.Sources.ILocalizationSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection{Hybrid.Localization.Sources.ILocalizationSource}.OSharp.Collections.CollectionExtensions.AddIfNotNull``1(Hybrid.Localization.Sources.ILocalizationSource)
  commentId: M:OSharp.Collections.CollectionExtensions.AddIfNotNull``1(System.Collections.Generic.ICollection{``0},``0)
  parent: OSharp.Collections.CollectionExtensions
  definition: OSharp.Collections.CollectionExtensions.AddIfNotNull``1(System.Collections.Generic.ICollection{``0},``0)
  name: AddIfNotNull<ILocalizationSource>(ILocalizationSource)
  nameWithType: CollectionExtensions.AddIfNotNull<ILocalizationSource>(ILocalizationSource)
  fullName: OSharp.Collections.CollectionExtensions.AddIfNotNull<Hybrid.Localization.Sources.ILocalizationSource>(Hybrid.Localization.Sources.ILocalizationSource)
  nameWithType.vb: CollectionExtensions.AddIfNotNull(Of ILocalizationSource)(ILocalizationSource)
  fullName.vb: OSharp.Collections.CollectionExtensions.AddIfNotNull(Of Hybrid.Localization.Sources.ILocalizationSource)(Hybrid.Localization.Sources.ILocalizationSource)
  name.vb: AddIfNotNull(Of ILocalizationSource)(ILocalizationSource)
  spec.csharp:
  - uid: OSharp.Collections.CollectionExtensions.AddIfNotNull``1(``0)
    name: AddIfNotNull<ILocalizationSource>
    nameWithType: CollectionExtensions.AddIfNotNull<ILocalizationSource>
    fullName: OSharp.Collections.CollectionExtensions.AddIfNotNull<Hybrid.Localization.Sources.ILocalizationSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Hybrid.Localization.Sources.ILocalizationSource
    name: ILocalizationSource
    nameWithType: ILocalizationSource
    fullName: Hybrid.Localization.Sources.ILocalizationSource
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Collections.CollectionExtensions.AddIfNotNull``1(``0)
    name: AddIfNotNull(Of ILocalizationSource)
    nameWithType: CollectionExtensions.AddIfNotNull(Of ILocalizationSource)
    fullName: OSharp.Collections.CollectionExtensions.AddIfNotNull(Of Hybrid.Localization.Sources.ILocalizationSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Hybrid.Localization.Sources.ILocalizationSource
    name: ILocalizationSource
    nameWithType: ILocalizationSource
    fullName: Hybrid.Localization.Sources.ILocalizationSource
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection{Hybrid.Localization.Sources.ILocalizationSource}.OSharp.Collections.CollectionExtensions.GetOrAdd``1(System.Func{Hybrid.Localization.Sources.ILocalizationSource,System.Boolean},System.Func{Hybrid.Localization.Sources.ILocalizationSource})
  commentId: M:OSharp.Collections.CollectionExtensions.GetOrAdd``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Boolean},System.Func{``0})
  parent: OSharp.Collections.CollectionExtensions
  definition: OSharp.Collections.CollectionExtensions.GetOrAdd``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Boolean},System.Func{``0})
  name: GetOrAdd<ILocalizationSource>(Func<ILocalizationSource, Boolean>, Func<ILocalizationSource>)
  nameWithType: CollectionExtensions.GetOrAdd<ILocalizationSource>(Func<ILocalizationSource, Boolean>, Func<ILocalizationSource>)
  fullName: OSharp.Collections.CollectionExtensions.GetOrAdd<Hybrid.Localization.Sources.ILocalizationSource>(System.Func<Hybrid.Localization.Sources.ILocalizationSource, System.Boolean>, System.Func<Hybrid.Localization.Sources.ILocalizationSource>)
  nameWithType.vb: CollectionExtensions.GetOrAdd(Of ILocalizationSource)(Func(Of ILocalizationSource, Boolean), Func(Of ILocalizationSource))
  fullName.vb: OSharp.Collections.CollectionExtensions.GetOrAdd(Of Hybrid.Localization.Sources.ILocalizationSource)(System.Func(Of Hybrid.Localization.Sources.ILocalizationSource, System.Boolean), System.Func(Of Hybrid.Localization.Sources.ILocalizationSource))
  name.vb: GetOrAdd(Of ILocalizationSource)(Func(Of ILocalizationSource, Boolean), Func(Of ILocalizationSource))
  spec.csharp:
  - uid: OSharp.Collections.CollectionExtensions.GetOrAdd``1(System.Func{``0,System.Boolean},System.Func{``0})
    name: GetOrAdd<ILocalizationSource>
    nameWithType: CollectionExtensions.GetOrAdd<ILocalizationSource>
    fullName: OSharp.Collections.CollectionExtensions.GetOrAdd<Hybrid.Localization.Sources.ILocalizationSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Localization.Sources.ILocalizationSource
    name: ILocalizationSource
    nameWithType: ILocalizationSource
    fullName: Hybrid.Localization.Sources.ILocalizationSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Localization.Sources.ILocalizationSource
    name: ILocalizationSource
    nameWithType: ILocalizationSource
    fullName: Hybrid.Localization.Sources.ILocalizationSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Collections.CollectionExtensions.GetOrAdd``1(System.Func{``0,System.Boolean},System.Func{``0})
    name: GetOrAdd(Of ILocalizationSource)
    nameWithType: CollectionExtensions.GetOrAdd(Of ILocalizationSource)
    fullName: OSharp.Collections.CollectionExtensions.GetOrAdd(Of Hybrid.Localization.Sources.ILocalizationSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Localization.Sources.ILocalizationSource
    name: ILocalizationSource
    nameWithType: ILocalizationSource
    fullName: Hybrid.Localization.Sources.ILocalizationSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Localization.Sources.ILocalizationSource
    name: ILocalizationSource
    nameWithType: ILocalizationSource
    fullName: Hybrid.Localization.Sources.ILocalizationSource
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection{Hybrid.Localization.Sources.ILocalizationSource}.OSharp.Collections.CollectionExtensions.IsNullOrEmpty``1
  commentId: M:OSharp.Collections.CollectionExtensions.IsNullOrEmpty``1(System.Collections.Generic.ICollection{``0})
  parent: OSharp.Collections.CollectionExtensions
  definition: OSharp.Collections.CollectionExtensions.IsNullOrEmpty``1(System.Collections.Generic.ICollection{``0})
  name: IsNullOrEmpty<ILocalizationSource>()
  nameWithType: CollectionExtensions.IsNullOrEmpty<ILocalizationSource>()
  fullName: OSharp.Collections.CollectionExtensions.IsNullOrEmpty<Hybrid.Localization.Sources.ILocalizationSource>()
  nameWithType.vb: CollectionExtensions.IsNullOrEmpty(Of ILocalizationSource)()
  fullName.vb: OSharp.Collections.CollectionExtensions.IsNullOrEmpty(Of Hybrid.Localization.Sources.ILocalizationSource)()
  name.vb: IsNullOrEmpty(Of ILocalizationSource)()
  spec.csharp:
  - uid: OSharp.Collections.CollectionExtensions.IsNullOrEmpty``1
    name: IsNullOrEmpty<ILocalizationSource>
    nameWithType: CollectionExtensions.IsNullOrEmpty<ILocalizationSource>
    fullName: OSharp.Collections.CollectionExtensions.IsNullOrEmpty<Hybrid.Localization.Sources.ILocalizationSource>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Collections.CollectionExtensions.IsNullOrEmpty``1
    name: IsNullOrEmpty(Of ILocalizationSource)
    nameWithType: CollectionExtensions.IsNullOrEmpty(Of ILocalizationSource)
    fullName: OSharp.Collections.CollectionExtensions.IsNullOrEmpty(Of Hybrid.Localization.Sources.ILocalizationSource)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{Hybrid.Localization.Sources.ILocalizationSource}.OSharp.Collections.EnumerableExtensions.Shuffle``1
  commentId: M:OSharp.Collections.EnumerableExtensions.Shuffle``1(System.Collections.Generic.IEnumerable{``0})
  parent: OSharp.Collections.EnumerableExtensions
  definition: OSharp.Collections.EnumerableExtensions.Shuffle``1(System.Collections.Generic.IEnumerable{``0})
  name: Shuffle<ILocalizationSource>()
  nameWithType: EnumerableExtensions.Shuffle<ILocalizationSource>()
  fullName: OSharp.Collections.EnumerableExtensions.Shuffle<Hybrid.Localization.Sources.ILocalizationSource>()
  nameWithType.vb: EnumerableExtensions.Shuffle(Of ILocalizationSource)()
  fullName.vb: OSharp.Collections.EnumerableExtensions.Shuffle(Of Hybrid.Localization.Sources.ILocalizationSource)()
  name.vb: Shuffle(Of ILocalizationSource)()
  spec.csharp:
  - uid: OSharp.Collections.EnumerableExtensions.Shuffle``1
    name: Shuffle<ILocalizationSource>
    nameWithType: EnumerableExtensions.Shuffle<ILocalizationSource>
    fullName: OSharp.Collections.EnumerableExtensions.Shuffle<Hybrid.Localization.Sources.ILocalizationSource>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Collections.EnumerableExtensions.Shuffle``1
    name: Shuffle(Of ILocalizationSource)
    nameWithType: EnumerableExtensions.Shuffle(Of ILocalizationSource)
    fullName: OSharp.Collections.EnumerableExtensions.Shuffle(Of Hybrid.Localization.Sources.ILocalizationSource)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{Hybrid.Localization.Sources.ILocalizationSource}.OSharp.Collections.EnumerableExtensions.ExpandAndToString``1(System.String)
  commentId: M:OSharp.Collections.EnumerableExtensions.ExpandAndToString``1(System.Collections.Generic.IEnumerable{``0},System.String)
  parent: OSharp.Collections.EnumerableExtensions
  definition: OSharp.Collections.EnumerableExtensions.ExpandAndToString``1(System.Collections.Generic.IEnumerable{``0},System.String)
  name: ExpandAndToString<ILocalizationSource>(String)
  nameWithType: EnumerableExtensions.ExpandAndToString<ILocalizationSource>(String)
  fullName: OSharp.Collections.EnumerableExtensions.ExpandAndToString<Hybrid.Localization.Sources.ILocalizationSource>(System.String)
  nameWithType.vb: EnumerableExtensions.ExpandAndToString(Of ILocalizationSource)(String)
  fullName.vb: OSharp.Collections.EnumerableExtensions.ExpandAndToString(Of Hybrid.Localization.Sources.ILocalizationSource)(System.String)
  name.vb: ExpandAndToString(Of ILocalizationSource)(String)
  spec.csharp:
  - uid: OSharp.Collections.EnumerableExtensions.ExpandAndToString``1(System.String)
    name: ExpandAndToString<ILocalizationSource>
    nameWithType: EnumerableExtensions.ExpandAndToString<ILocalizationSource>
    fullName: OSharp.Collections.EnumerableExtensions.ExpandAndToString<Hybrid.Localization.Sources.ILocalizationSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Collections.EnumerableExtensions.ExpandAndToString``1(System.String)
    name: ExpandAndToString(Of ILocalizationSource)
    nameWithType: EnumerableExtensions.ExpandAndToString(Of ILocalizationSource)
    fullName: OSharp.Collections.EnumerableExtensions.ExpandAndToString(Of Hybrid.Localization.Sources.ILocalizationSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{Hybrid.Localization.Sources.ILocalizationSource}.OSharp.Collections.EnumerableExtensions.ExpandAndToString``1(System.Func{Hybrid.Localization.Sources.ILocalizationSource,System.String},System.String)
  commentId: M:OSharp.Collections.EnumerableExtensions.ExpandAndToString``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.String)
  parent: OSharp.Collections.EnumerableExtensions
  definition: OSharp.Collections.EnumerableExtensions.ExpandAndToString``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.String)
  name: ExpandAndToString<ILocalizationSource>(Func<ILocalizationSource, String>, String)
  nameWithType: EnumerableExtensions.ExpandAndToString<ILocalizationSource>(Func<ILocalizationSource, String>, String)
  fullName: OSharp.Collections.EnumerableExtensions.ExpandAndToString<Hybrid.Localization.Sources.ILocalizationSource>(System.Func<Hybrid.Localization.Sources.ILocalizationSource, System.String>, System.String)
  nameWithType.vb: EnumerableExtensions.ExpandAndToString(Of ILocalizationSource)(Func(Of ILocalizationSource, String), String)
  fullName.vb: OSharp.Collections.EnumerableExtensions.ExpandAndToString(Of Hybrid.Localization.Sources.ILocalizationSource)(System.Func(Of Hybrid.Localization.Sources.ILocalizationSource, System.String), System.String)
  name.vb: ExpandAndToString(Of ILocalizationSource)(Func(Of ILocalizationSource, String), String)
  spec.csharp:
  - uid: OSharp.Collections.EnumerableExtensions.ExpandAndToString``1(System.Func{``0,System.String},System.String)
    name: ExpandAndToString<ILocalizationSource>
    nameWithType: EnumerableExtensions.ExpandAndToString<ILocalizationSource>
    fullName: OSharp.Collections.EnumerableExtensions.ExpandAndToString<Hybrid.Localization.Sources.ILocalizationSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Localization.Sources.ILocalizationSource
    name: ILocalizationSource
    nameWithType: ILocalizationSource
    fullName: Hybrid.Localization.Sources.ILocalizationSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Collections.EnumerableExtensions.ExpandAndToString``1(System.Func{``0,System.String},System.String)
    name: ExpandAndToString(Of ILocalizationSource)
    nameWithType: EnumerableExtensions.ExpandAndToString(Of ILocalizationSource)
    fullName: OSharp.Collections.EnumerableExtensions.ExpandAndToString(Of Hybrid.Localization.Sources.ILocalizationSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Localization.Sources.ILocalizationSource
    name: ILocalizationSource
    nameWithType: ILocalizationSource
    fullName: Hybrid.Localization.Sources.ILocalizationSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{Hybrid.Localization.Sources.ILocalizationSource}.OSharp.Collections.EnumerableExtensions.IsEmpty``1
  commentId: M:OSharp.Collections.EnumerableExtensions.IsEmpty``1(System.Collections.Generic.IEnumerable{``0})
  parent: OSharp.Collections.EnumerableExtensions
  definition: OSharp.Collections.EnumerableExtensions.IsEmpty``1(System.Collections.Generic.IEnumerable{``0})
  name: IsEmpty<ILocalizationSource>()
  nameWithType: EnumerableExtensions.IsEmpty<ILocalizationSource>()
  fullName: OSharp.Collections.EnumerableExtensions.IsEmpty<Hybrid.Localization.Sources.ILocalizationSource>()
  nameWithType.vb: EnumerableExtensions.IsEmpty(Of ILocalizationSource)()
  fullName.vb: OSharp.Collections.EnumerableExtensions.IsEmpty(Of Hybrid.Localization.Sources.ILocalizationSource)()
  name.vb: IsEmpty(Of ILocalizationSource)()
  spec.csharp:
  - uid: OSharp.Collections.EnumerableExtensions.IsEmpty``1
    name: IsEmpty<ILocalizationSource>
    nameWithType: EnumerableExtensions.IsEmpty<ILocalizationSource>
    fullName: OSharp.Collections.EnumerableExtensions.IsEmpty<Hybrid.Localization.Sources.ILocalizationSource>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Collections.EnumerableExtensions.IsEmpty``1
    name: IsEmpty(Of ILocalizationSource)
    nameWithType: EnumerableExtensions.IsEmpty(Of ILocalizationSource)
    fullName: OSharp.Collections.EnumerableExtensions.IsEmpty(Of Hybrid.Localization.Sources.ILocalizationSource)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{Hybrid.Localization.Sources.ILocalizationSource}.OSharp.Collections.EnumerableExtensions.WhereIf``1(System.Func{Hybrid.Localization.Sources.ILocalizationSource,System.Boolean},System.Boolean)
  commentId: M:OSharp.Collections.EnumerableExtensions.WhereIf``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Boolean)
  parent: OSharp.Collections.EnumerableExtensions
  definition: OSharp.Collections.EnumerableExtensions.WhereIf``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Boolean)
  name: WhereIf<ILocalizationSource>(Func<ILocalizationSource, Boolean>, Boolean)
  nameWithType: EnumerableExtensions.WhereIf<ILocalizationSource>(Func<ILocalizationSource, Boolean>, Boolean)
  fullName: OSharp.Collections.EnumerableExtensions.WhereIf<Hybrid.Localization.Sources.ILocalizationSource>(System.Func<Hybrid.Localization.Sources.ILocalizationSource, System.Boolean>, System.Boolean)
  nameWithType.vb: EnumerableExtensions.WhereIf(Of ILocalizationSource)(Func(Of ILocalizationSource, Boolean), Boolean)
  fullName.vb: OSharp.Collections.EnumerableExtensions.WhereIf(Of Hybrid.Localization.Sources.ILocalizationSource)(System.Func(Of Hybrid.Localization.Sources.ILocalizationSource, System.Boolean), System.Boolean)
  name.vb: WhereIf(Of ILocalizationSource)(Func(Of ILocalizationSource, Boolean), Boolean)
  spec.csharp:
  - uid: OSharp.Collections.EnumerableExtensions.WhereIf``1(System.Func{``0,System.Boolean},System.Boolean)
    name: WhereIf<ILocalizationSource>
    nameWithType: EnumerableExtensions.WhereIf<ILocalizationSource>
    fullName: OSharp.Collections.EnumerableExtensions.WhereIf<Hybrid.Localization.Sources.ILocalizationSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Localization.Sources.ILocalizationSource
    name: ILocalizationSource
    nameWithType: ILocalizationSource
    fullName: Hybrid.Localization.Sources.ILocalizationSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Collections.EnumerableExtensions.WhereIf``1(System.Func{``0,System.Boolean},System.Boolean)
    name: WhereIf(Of ILocalizationSource)
    nameWithType: EnumerableExtensions.WhereIf(Of ILocalizationSource)
    fullName: OSharp.Collections.EnumerableExtensions.WhereIf(Of Hybrid.Localization.Sources.ILocalizationSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Localization.Sources.ILocalizationSource
    name: ILocalizationSource
    nameWithType: ILocalizationSource
    fullName: Hybrid.Localization.Sources.ILocalizationSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{Hybrid.Localization.Sources.ILocalizationSource}.OSharp.Collections.EnumerableExtensions.OrderByPrefixes``1(System.Func{Hybrid.Localization.Sources.ILocalizationSource,System.String},System.String[])
  commentId: M:OSharp.Collections.EnumerableExtensions.OrderByPrefixes``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.String[])
  parent: OSharp.Collections.EnumerableExtensions
  definition: OSharp.Collections.EnumerableExtensions.OrderByPrefixes``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.String[])
  name: OrderByPrefixes<ILocalizationSource>(Func<ILocalizationSource, String>, String[])
  nameWithType: EnumerableExtensions.OrderByPrefixes<ILocalizationSource>(Func<ILocalizationSource, String>, String[])
  fullName: OSharp.Collections.EnumerableExtensions.OrderByPrefixes<Hybrid.Localization.Sources.ILocalizationSource>(System.Func<Hybrid.Localization.Sources.ILocalizationSource, System.String>, System.String[])
  nameWithType.vb: EnumerableExtensions.OrderByPrefixes(Of ILocalizationSource)(Func(Of ILocalizationSource, String), String())
  fullName.vb: OSharp.Collections.EnumerableExtensions.OrderByPrefixes(Of Hybrid.Localization.Sources.ILocalizationSource)(System.Func(Of Hybrid.Localization.Sources.ILocalizationSource, System.String), System.String())
  name.vb: OrderByPrefixes(Of ILocalizationSource)(Func(Of ILocalizationSource, String), String())
  spec.csharp:
  - uid: OSharp.Collections.EnumerableExtensions.OrderByPrefixes``1(System.Func{``0,System.String},System.String[])
    name: OrderByPrefixes<ILocalizationSource>
    nameWithType: EnumerableExtensions.OrderByPrefixes<ILocalizationSource>
    fullName: OSharp.Collections.EnumerableExtensions.OrderByPrefixes<Hybrid.Localization.Sources.ILocalizationSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Localization.Sources.ILocalizationSource
    name: ILocalizationSource
    nameWithType: ILocalizationSource
    fullName: Hybrid.Localization.Sources.ILocalizationSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Collections.EnumerableExtensions.OrderByPrefixes``1(System.Func{``0,System.String},System.String[])
    name: OrderByPrefixes(Of ILocalizationSource)
    nameWithType: EnumerableExtensions.OrderByPrefixes(Of ILocalizationSource)
    fullName: OSharp.Collections.EnumerableExtensions.OrderByPrefixes(Of Hybrid.Localization.Sources.ILocalizationSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Localization.Sources.ILocalizationSource
    name: ILocalizationSource
    nameWithType: ILocalizationSource
    fullName: Hybrid.Localization.Sources.ILocalizationSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{Hybrid.Localization.Sources.ILocalizationSource}.OSharp.Collections.EnumerableExtensions.DistinctBy``2(System.Func{Hybrid.Localization.Sources.ILocalizationSource,{TKey}})
  commentId: M:OSharp.Collections.EnumerableExtensions.DistinctBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  parent: OSharp.Collections.EnumerableExtensions
  definition: OSharp.Collections.EnumerableExtensions.DistinctBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  name: DistinctBy<ILocalizationSource, TKey>(Func<ILocalizationSource, TKey>)
  nameWithType: EnumerableExtensions.DistinctBy<ILocalizationSource, TKey>(Func<ILocalizationSource, TKey>)
  fullName: OSharp.Collections.EnumerableExtensions.DistinctBy<Hybrid.Localization.Sources.ILocalizationSource, TKey>(System.Func<Hybrid.Localization.Sources.ILocalizationSource, TKey>)
  nameWithType.vb: EnumerableExtensions.DistinctBy(Of ILocalizationSource, TKey)(Func(Of ILocalizationSource, TKey))
  fullName.vb: OSharp.Collections.EnumerableExtensions.DistinctBy(Of Hybrid.Localization.Sources.ILocalizationSource, TKey)(System.Func(Of Hybrid.Localization.Sources.ILocalizationSource, TKey))
  name.vb: DistinctBy(Of ILocalizationSource, TKey)(Func(Of ILocalizationSource, TKey))
  spec.csharp:
  - uid: OSharp.Collections.EnumerableExtensions.DistinctBy``2(System.Func{``0,``1})
    name: DistinctBy<ILocalizationSource, TKey>
    nameWithType: EnumerableExtensions.DistinctBy<ILocalizationSource, TKey>
    fullName: OSharp.Collections.EnumerableExtensions.DistinctBy<Hybrid.Localization.Sources.ILocalizationSource, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Localization.Sources.ILocalizationSource
    name: ILocalizationSource
    nameWithType: ILocalizationSource
    fullName: Hybrid.Localization.Sources.ILocalizationSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Collections.EnumerableExtensions.DistinctBy``2(System.Func{``0,``1})
    name: DistinctBy(Of ILocalizationSource, TKey)
    nameWithType: EnumerableExtensions.DistinctBy(Of ILocalizationSource, TKey)
    fullName: OSharp.Collections.EnumerableExtensions.DistinctBy(Of Hybrid.Localization.Sources.ILocalizationSource, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Localization.Sources.ILocalizationSource
    name: ILocalizationSource
    nameWithType: ILocalizationSource
    fullName: Hybrid.Localization.Sources.ILocalizationSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{Hybrid.Localization.Sources.ILocalizationSource}.OSharp.Collections.EnumerableExtensions.OrderBy``1(System.String,System.ComponentModel.ListSortDirection)
  commentId: M:OSharp.Collections.EnumerableExtensions.OrderBy``1(System.Collections.Generic.IEnumerable{``0},System.String,System.ComponentModel.ListSortDirection)
  parent: OSharp.Collections.EnumerableExtensions
  definition: OSharp.Collections.EnumerableExtensions.OrderBy``1(System.Collections.Generic.IEnumerable{``0},System.String,System.ComponentModel.ListSortDirection)
  name: OrderBy<ILocalizationSource>(String, ListSortDirection)
  nameWithType: EnumerableExtensions.OrderBy<ILocalizationSource>(String, ListSortDirection)
  fullName: OSharp.Collections.EnumerableExtensions.OrderBy<Hybrid.Localization.Sources.ILocalizationSource>(System.String, System.ComponentModel.ListSortDirection)
  nameWithType.vb: EnumerableExtensions.OrderBy(Of ILocalizationSource)(String, ListSortDirection)
  fullName.vb: OSharp.Collections.EnumerableExtensions.OrderBy(Of Hybrid.Localization.Sources.ILocalizationSource)(System.String, System.ComponentModel.ListSortDirection)
  name.vb: OrderBy(Of ILocalizationSource)(String, ListSortDirection)
  spec.csharp:
  - uid: OSharp.Collections.EnumerableExtensions.OrderBy``1(System.String,System.ComponentModel.ListSortDirection)
    name: OrderBy<ILocalizationSource>
    nameWithType: EnumerableExtensions.OrderBy<ILocalizationSource>
    fullName: OSharp.Collections.EnumerableExtensions.OrderBy<Hybrid.Localization.Sources.ILocalizationSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.ComponentModel.ListSortDirection
    name: ListSortDirection
    nameWithType: ListSortDirection
    fullName: System.ComponentModel.ListSortDirection
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Collections.EnumerableExtensions.OrderBy``1(System.String,System.ComponentModel.ListSortDirection)
    name: OrderBy(Of ILocalizationSource)
    nameWithType: EnumerableExtensions.OrderBy(Of ILocalizationSource)
    fullName: OSharp.Collections.EnumerableExtensions.OrderBy(Of Hybrid.Localization.Sources.ILocalizationSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.ComponentModel.ListSortDirection
    name: ListSortDirection
    nameWithType: ListSortDirection
    fullName: System.ComponentModel.ListSortDirection
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{Hybrid.Localization.Sources.ILocalizationSource}.OSharp.Collections.EnumerableExtensions.OrderBy``1(OSharp.Filter.SortCondition)
  commentId: M:OSharp.Collections.EnumerableExtensions.OrderBy``1(System.Collections.Generic.IEnumerable{``0},OSharp.Filter.SortCondition)
  parent: OSharp.Collections.EnumerableExtensions
  definition: OSharp.Collections.EnumerableExtensions.OrderBy``1(System.Collections.Generic.IEnumerable{``0},OSharp.Filter.SortCondition)
  name: OrderBy<ILocalizationSource>(SortCondition)
  nameWithType: EnumerableExtensions.OrderBy<ILocalizationSource>(SortCondition)
  fullName: OSharp.Collections.EnumerableExtensions.OrderBy<Hybrid.Localization.Sources.ILocalizationSource>(OSharp.Filter.SortCondition)
  nameWithType.vb: EnumerableExtensions.OrderBy(Of ILocalizationSource)(SortCondition)
  fullName.vb: OSharp.Collections.EnumerableExtensions.OrderBy(Of Hybrid.Localization.Sources.ILocalizationSource)(OSharp.Filter.SortCondition)
  name.vb: OrderBy(Of ILocalizationSource)(SortCondition)
  spec.csharp:
  - uid: OSharp.Collections.EnumerableExtensions.OrderBy``1(OSharp.Filter.SortCondition)
    name: OrderBy<ILocalizationSource>
    nameWithType: EnumerableExtensions.OrderBy<ILocalizationSource>
    fullName: OSharp.Collections.EnumerableExtensions.OrderBy<Hybrid.Localization.Sources.ILocalizationSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: OSharp.Filter.SortCondition
    name: SortCondition
    nameWithType: SortCondition
    fullName: OSharp.Filter.SortCondition
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Collections.EnumerableExtensions.OrderBy``1(OSharp.Filter.SortCondition)
    name: OrderBy(Of ILocalizationSource)
    nameWithType: EnumerableExtensions.OrderBy(Of ILocalizationSource)
    fullName: OSharp.Collections.EnumerableExtensions.OrderBy(Of Hybrid.Localization.Sources.ILocalizationSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: OSharp.Filter.SortCondition
    name: SortCondition
    nameWithType: SortCondition
    fullName: OSharp.Filter.SortCondition
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{Hybrid.Localization.Sources.ILocalizationSource}.OSharp.Collections.EnumerableExtensions.OrderBy``1(OSharp.Filter.SortCondition{Hybrid.Localization.Sources.ILocalizationSource})
  commentId: M:OSharp.Collections.EnumerableExtensions.OrderBy``1(System.Collections.Generic.IEnumerable{``0},OSharp.Filter.SortCondition{``0})
  parent: OSharp.Collections.EnumerableExtensions
  definition: OSharp.Collections.EnumerableExtensions.OrderBy``1(System.Collections.Generic.IEnumerable{``0},OSharp.Filter.SortCondition{``0})
  name: OrderBy<ILocalizationSource>(SortCondition<ILocalizationSource>)
  nameWithType: EnumerableExtensions.OrderBy<ILocalizationSource>(SortCondition<ILocalizationSource>)
  fullName: OSharp.Collections.EnumerableExtensions.OrderBy<Hybrid.Localization.Sources.ILocalizationSource>(OSharp.Filter.SortCondition<Hybrid.Localization.Sources.ILocalizationSource>)
  nameWithType.vb: EnumerableExtensions.OrderBy(Of ILocalizationSource)(SortCondition(Of ILocalizationSource))
  fullName.vb: OSharp.Collections.EnumerableExtensions.OrderBy(Of Hybrid.Localization.Sources.ILocalizationSource)(OSharp.Filter.SortCondition(Of Hybrid.Localization.Sources.ILocalizationSource))
  name.vb: OrderBy(Of ILocalizationSource)(SortCondition(Of ILocalizationSource))
  spec.csharp:
  - uid: OSharp.Collections.EnumerableExtensions.OrderBy``1(OSharp.Filter.SortCondition{``0})
    name: OrderBy<ILocalizationSource>
    nameWithType: EnumerableExtensions.OrderBy<ILocalizationSource>
    fullName: OSharp.Collections.EnumerableExtensions.OrderBy<Hybrid.Localization.Sources.ILocalizationSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: OSharp.Filter.SortCondition`1
    name: SortCondition
    nameWithType: SortCondition
    fullName: OSharp.Filter.SortCondition
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Localization.Sources.ILocalizationSource
    name: ILocalizationSource
    nameWithType: ILocalizationSource
    fullName: Hybrid.Localization.Sources.ILocalizationSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Collections.EnumerableExtensions.OrderBy``1(OSharp.Filter.SortCondition{``0})
    name: OrderBy(Of ILocalizationSource)
    nameWithType: EnumerableExtensions.OrderBy(Of ILocalizationSource)
    fullName: OSharp.Collections.EnumerableExtensions.OrderBy(Of Hybrid.Localization.Sources.ILocalizationSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: OSharp.Filter.SortCondition`1
    name: SortCondition
    nameWithType: SortCondition
    fullName: OSharp.Filter.SortCondition
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Localization.Sources.ILocalizationSource
    name: ILocalizationSource
    nameWithType: ILocalizationSource
    fullName: Hybrid.Localization.Sources.ILocalizationSource
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Localization.Configuration.ILocalizationSourceList.OSharp.Entity.EntityExtensions.CheckICreatedTime``2
  commentId: M:OSharp.Entity.EntityExtensions.CheckICreatedTime``2(``0)
  parent: OSharp.Entity.EntityExtensions
  definition: OSharp.Entity.EntityExtensions.CheckICreatedTime``2(``0)
  name: CheckICreatedTime<ILocalizationSourceList, TKey>()
  nameWithType: EntityExtensions.CheckICreatedTime<ILocalizationSourceList, TKey>()
  fullName: OSharp.Entity.EntityExtensions.CheckICreatedTime<Hybrid.Localization.Configuration.ILocalizationSourceList, TKey>()
  nameWithType.vb: EntityExtensions.CheckICreatedTime(Of ILocalizationSourceList, TKey)()
  fullName.vb: OSharp.Entity.EntityExtensions.CheckICreatedTime(Of Hybrid.Localization.Configuration.ILocalizationSourceList, TKey)()
  name.vb: CheckICreatedTime(Of ILocalizationSourceList, TKey)()
  spec.csharp:
  - uid: OSharp.Entity.EntityExtensions.CheckICreatedTime``2
    name: CheckICreatedTime<ILocalizationSourceList, TKey>
    nameWithType: EntityExtensions.CheckICreatedTime<ILocalizationSourceList, TKey>
    fullName: OSharp.Entity.EntityExtensions.CheckICreatedTime<Hybrid.Localization.Configuration.ILocalizationSourceList, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Entity.EntityExtensions.CheckICreatedTime``2
    name: CheckICreatedTime(Of ILocalizationSourceList, TKey)
    nameWithType: EntityExtensions.CheckICreatedTime(Of ILocalizationSourceList, TKey)
    fullName: OSharp.Entity.EntityExtensions.CheckICreatedTime(Of Hybrid.Localization.Configuration.ILocalizationSourceList, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Localization.Configuration.ILocalizationSourceList.OSharp.Entity.EntityExtensions.CheckICreationAudited``3(System.Security.Principal.IPrincipal)
  commentId: M:OSharp.Entity.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
  parent: OSharp.Entity.EntityExtensions
  definition: OSharp.Entity.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
  name: CheckICreationAudited<ILocalizationSourceList, TKey, TUserKey>(IPrincipal)
  nameWithType: EntityExtensions.CheckICreationAudited<ILocalizationSourceList, TKey, TUserKey>(IPrincipal)
  fullName: OSharp.Entity.EntityExtensions.CheckICreationAudited<Hybrid.Localization.Configuration.ILocalizationSourceList, TKey, TUserKey>(System.Security.Principal.IPrincipal)
  nameWithType.vb: EntityExtensions.CheckICreationAudited(Of ILocalizationSourceList, TKey, TUserKey)(IPrincipal)
  fullName.vb: OSharp.Entity.EntityExtensions.CheckICreationAudited(Of Hybrid.Localization.Configuration.ILocalizationSourceList, TKey, TUserKey)(System.Security.Principal.IPrincipal)
  name.vb: CheckICreationAudited(Of ILocalizationSourceList, TKey, TUserKey)(IPrincipal)
  spec.csharp:
  - uid: OSharp.Entity.EntityExtensions.CheckICreationAudited``3(System.Security.Principal.IPrincipal)
    name: CheckICreationAudited<ILocalizationSourceList, TKey, TUserKey>
    nameWithType: EntityExtensions.CheckICreationAudited<ILocalizationSourceList, TKey, TUserKey>
    fullName: OSharp.Entity.EntityExtensions.CheckICreationAudited<Hybrid.Localization.Configuration.ILocalizationSourceList, TKey, TUserKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Entity.EntityExtensions.CheckICreationAudited``3(System.Security.Principal.IPrincipal)
    name: CheckICreationAudited(Of ILocalizationSourceList, TKey, TUserKey)
    nameWithType: EntityExtensions.CheckICreationAudited(Of ILocalizationSourceList, TKey, TUserKey)
    fullName: OSharp.Entity.EntityExtensions.CheckICreationAudited(Of Hybrid.Localization.Configuration.ILocalizationSourceList, TKey, TUserKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Localization.Configuration.ILocalizationSourceList.OSharp.Entity.EntityExtensions.CheckIUpdateAudited``3(System.Security.Principal.IPrincipal)
  commentId: M:OSharp.Entity.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
  parent: OSharp.Entity.EntityExtensions
  definition: OSharp.Entity.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
  name: CheckIUpdateAudited<ILocalizationSourceList, TKey, TUserKey>(IPrincipal)
  nameWithType: EntityExtensions.CheckIUpdateAudited<ILocalizationSourceList, TKey, TUserKey>(IPrincipal)
  fullName: OSharp.Entity.EntityExtensions.CheckIUpdateAudited<Hybrid.Localization.Configuration.ILocalizationSourceList, TKey, TUserKey>(System.Security.Principal.IPrincipal)
  nameWithType.vb: EntityExtensions.CheckIUpdateAudited(Of ILocalizationSourceList, TKey, TUserKey)(IPrincipal)
  fullName.vb: OSharp.Entity.EntityExtensions.CheckIUpdateAudited(Of Hybrid.Localization.Configuration.ILocalizationSourceList, TKey, TUserKey)(System.Security.Principal.IPrincipal)
  name.vb: CheckIUpdateAudited(Of ILocalizationSourceList, TKey, TUserKey)(IPrincipal)
  spec.csharp:
  - uid: OSharp.Entity.EntityExtensions.CheckIUpdateAudited``3(System.Security.Principal.IPrincipal)
    name: CheckIUpdateAudited<ILocalizationSourceList, TKey, TUserKey>
    nameWithType: EntityExtensions.CheckIUpdateAudited<ILocalizationSourceList, TKey, TUserKey>
    fullName: OSharp.Entity.EntityExtensions.CheckIUpdateAudited<Hybrid.Localization.Configuration.ILocalizationSourceList, TKey, TUserKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Entity.EntityExtensions.CheckIUpdateAudited``3(System.Security.Principal.IPrincipal)
    name: CheckIUpdateAudited(Of ILocalizationSourceList, TKey, TUserKey)
    nameWithType: EntityExtensions.CheckIUpdateAudited(Of ILocalizationSourceList, TKey, TUserKey)
    fullName: OSharp.Entity.EntityExtensions.CheckIUpdateAudited(Of Hybrid.Localization.Configuration.ILocalizationSourceList, TKey, TUserKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.OSharp.Extensions.ObjectExtensions.CastTo(System.Type)
  commentId: M:OSharp.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
  parent: OSharp.Extensions.ObjectExtensions
  definition: OSharp.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
  name: CastTo(Type)
  nameWithType: ObjectExtensions.CastTo(Type)
  fullName: OSharp.Extensions.ObjectExtensions.CastTo(System.Type)
  spec.csharp:
  - uid: OSharp.Extensions.ObjectExtensions.CastTo(System.Type)
    name: CastTo
    nameWithType: ObjectExtensions.CastTo
    fullName: OSharp.Extensions.ObjectExtensions.CastTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ObjectExtensions.CastTo(System.Type)
    name: CastTo
    nameWithType: ObjectExtensions.CastTo
    fullName: OSharp.Extensions.ObjectExtensions.CastTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.OSharp.Extensions.ObjectExtensions.CastTo``1
  commentId: M:OSharp.Extensions.ObjectExtensions.CastTo``1(System.Object)
  parent: OSharp.Extensions.ObjectExtensions
  definition: OSharp.Extensions.ObjectExtensions.CastTo``1(System.Object)
  name: CastTo<T>()
  nameWithType: ObjectExtensions.CastTo<T>()
  fullName: OSharp.Extensions.ObjectExtensions.CastTo<T>()
  nameWithType.vb: ObjectExtensions.CastTo(Of T)()
  fullName.vb: OSharp.Extensions.ObjectExtensions.CastTo(Of T)()
  name.vb: CastTo(Of T)()
  spec.csharp:
  - uid: OSharp.Extensions.ObjectExtensions.CastTo``1
    name: CastTo<T>
    nameWithType: ObjectExtensions.CastTo<T>
    fullName: OSharp.Extensions.ObjectExtensions.CastTo<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ObjectExtensions.CastTo``1
    name: CastTo(Of T)
    nameWithType: ObjectExtensions.CastTo(Of T)
    fullName: OSharp.Extensions.ObjectExtensions.CastTo(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.OSharp.Extensions.ObjectExtensions.CastTo``1({T})
  commentId: M:OSharp.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
  parent: OSharp.Extensions.ObjectExtensions
  definition: OSharp.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
  name: CastTo<T>(T)
  nameWithType: ObjectExtensions.CastTo<T>(T)
  fullName: OSharp.Extensions.ObjectExtensions.CastTo<T>(T)
  nameWithType.vb: ObjectExtensions.CastTo(Of T)(T)
  fullName.vb: OSharp.Extensions.ObjectExtensions.CastTo(Of T)(T)
  name.vb: CastTo(Of T)(T)
  spec.csharp:
  - uid: OSharp.Extensions.ObjectExtensions.CastTo``1(``0)
    name: CastTo<T>
    nameWithType: ObjectExtensions.CastTo<T>
    fullName: OSharp.Extensions.ObjectExtensions.CastTo<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ObjectExtensions.CastTo``1(``0)
    name: CastTo(Of T)
    nameWithType: ObjectExtensions.CastTo(Of T)
    fullName: OSharp.Extensions.ObjectExtensions.CastTo(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Localization.Configuration.ILocalizationSourceList.OSharp.Extensions.ObjectExtensions.IsIn``1(Hybrid.Localization.Configuration.ILocalizationSourceList[])
  commentId: M:OSharp.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
  parent: OSharp.Extensions.ObjectExtensions
  definition: OSharp.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
  name: IsIn<ILocalizationSourceList>(ILocalizationSourceList[])
  nameWithType: ObjectExtensions.IsIn<ILocalizationSourceList>(ILocalizationSourceList[])
  fullName: OSharp.Extensions.ObjectExtensions.IsIn<Hybrid.Localization.Configuration.ILocalizationSourceList>(Hybrid.Localization.Configuration.ILocalizationSourceList[])
  nameWithType.vb: ObjectExtensions.IsIn(Of ILocalizationSourceList)(ILocalizationSourceList())
  fullName.vb: OSharp.Extensions.ObjectExtensions.IsIn(Of Hybrid.Localization.Configuration.ILocalizationSourceList)(Hybrid.Localization.Configuration.ILocalizationSourceList())
  name.vb: IsIn(Of ILocalizationSourceList)(ILocalizationSourceList())
  spec.csharp:
  - uid: OSharp.Extensions.ObjectExtensions.IsIn``1(``0[])
    name: IsIn<ILocalizationSourceList>
    nameWithType: ObjectExtensions.IsIn<ILocalizationSourceList>
    fullName: OSharp.Extensions.ObjectExtensions.IsIn<Hybrid.Localization.Configuration.ILocalizationSourceList>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Hybrid.Localization.Configuration.ILocalizationSourceList
    name: ILocalizationSourceList
    nameWithType: ILocalizationSourceList
    fullName: Hybrid.Localization.Configuration.ILocalizationSourceList
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ObjectExtensions.IsIn``1(``0[])
    name: IsIn(Of ILocalizationSourceList)
    nameWithType: ObjectExtensions.IsIn(Of ILocalizationSourceList)
    fullName: OSharp.Extensions.ObjectExtensions.IsIn(Of Hybrid.Localization.Configuration.ILocalizationSourceList)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Hybrid.Localization.Configuration.ILocalizationSourceList
    name: ILocalizationSourceList
    nameWithType: ILocalizationSourceList
    fullName: Hybrid.Localization.Configuration.ILocalizationSourceList
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.OSharp.Extensions.ObjectExtensions.ToDynamic
  commentId: M:OSharp.Extensions.ObjectExtensions.ToDynamic(System.Object)
  parent: OSharp.Extensions.ObjectExtensions
  definition: OSharp.Extensions.ObjectExtensions.ToDynamic(System.Object)
  name: ToDynamic()
  nameWithType: ObjectExtensions.ToDynamic()
  fullName: OSharp.Extensions.ObjectExtensions.ToDynamic()
  spec.csharp:
  - uid: OSharp.Extensions.ObjectExtensions.ToDynamic
    name: ToDynamic
    nameWithType: ObjectExtensions.ToDynamic
    fullName: OSharp.Extensions.ObjectExtensions.ToDynamic
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ObjectExtensions.ToDynamic
    name: ToDynamic
    nameWithType: ObjectExtensions.ToDynamic
    fullName: OSharp.Extensions.ObjectExtensions.ToDynamic
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Localization.Configuration.ILocalizationSourceList.OSharp.Extensions.ObjectExtensions.DeepClone``1
  commentId: M:OSharp.Extensions.ObjectExtensions.DeepClone``1(``0)
  parent: OSharp.Extensions.ObjectExtensions
  definition: OSharp.Extensions.ObjectExtensions.DeepClone``1(``0)
  name: DeepClone<ILocalizationSourceList>()
  nameWithType: ObjectExtensions.DeepClone<ILocalizationSourceList>()
  fullName: OSharp.Extensions.ObjectExtensions.DeepClone<Hybrid.Localization.Configuration.ILocalizationSourceList>()
  nameWithType.vb: ObjectExtensions.DeepClone(Of ILocalizationSourceList)()
  fullName.vb: OSharp.Extensions.ObjectExtensions.DeepClone(Of Hybrid.Localization.Configuration.ILocalizationSourceList)()
  name.vb: DeepClone(Of ILocalizationSourceList)()
  spec.csharp:
  - uid: OSharp.Extensions.ObjectExtensions.DeepClone``1
    name: DeepClone<ILocalizationSourceList>
    nameWithType: ObjectExtensions.DeepClone<ILocalizationSourceList>
    fullName: OSharp.Extensions.ObjectExtensions.DeepClone<Hybrid.Localization.Configuration.ILocalizationSourceList>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ObjectExtensions.DeepClone``1
    name: DeepClone(Of ILocalizationSourceList)
    nameWithType: ObjectExtensions.DeepClone(Of ILocalizationSourceList)
    fullName: OSharp.Extensions.ObjectExtensions.DeepClone(Of Hybrid.Localization.Configuration.ILocalizationSourceList)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Localization.Configuration.ILocalizationSourceList.OSharp.Extensions.ParameterCheckExtensions.Required``1(System.Func{Hybrid.Localization.Configuration.ILocalizationSourceList,System.Boolean},System.String)
  commentId: M:OSharp.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
  parent: OSharp.Extensions.ParameterCheckExtensions
  definition: OSharp.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
  name: Required<ILocalizationSourceList>(Func<ILocalizationSourceList, Boolean>, String)
  nameWithType: ParameterCheckExtensions.Required<ILocalizationSourceList>(Func<ILocalizationSourceList, Boolean>, String)
  fullName: OSharp.Extensions.ParameterCheckExtensions.Required<Hybrid.Localization.Configuration.ILocalizationSourceList>(System.Func<Hybrid.Localization.Configuration.ILocalizationSourceList, System.Boolean>, System.String)
  nameWithType.vb: ParameterCheckExtensions.Required(Of ILocalizationSourceList)(Func(Of ILocalizationSourceList, Boolean), String)
  fullName.vb: OSharp.Extensions.ParameterCheckExtensions.Required(Of Hybrid.Localization.Configuration.ILocalizationSourceList)(System.Func(Of Hybrid.Localization.Configuration.ILocalizationSourceList, System.Boolean), System.String)
  name.vb: Required(Of ILocalizationSourceList)(Func(Of ILocalizationSourceList, Boolean), String)
  spec.csharp:
  - uid: OSharp.Extensions.ParameterCheckExtensions.Required``1(System.Func{``0,System.Boolean},System.String)
    name: Required<ILocalizationSourceList>
    nameWithType: ParameterCheckExtensions.Required<ILocalizationSourceList>
    fullName: OSharp.Extensions.ParameterCheckExtensions.Required<Hybrid.Localization.Configuration.ILocalizationSourceList>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Localization.Configuration.ILocalizationSourceList
    name: ILocalizationSourceList
    nameWithType: ILocalizationSourceList
    fullName: Hybrid.Localization.Configuration.ILocalizationSourceList
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ParameterCheckExtensions.Required``1(System.Func{``0,System.Boolean},System.String)
    name: Required(Of ILocalizationSourceList)
    nameWithType: ParameterCheckExtensions.Required(Of ILocalizationSourceList)
    fullName: OSharp.Extensions.ParameterCheckExtensions.Required(Of Hybrid.Localization.Configuration.ILocalizationSourceList)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Localization.Configuration.ILocalizationSourceList
    name: ILocalizationSourceList
    nameWithType: ILocalizationSourceList
    fullName: Hybrid.Localization.Configuration.ILocalizationSourceList
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Localization.Configuration.ILocalizationSourceList.OSharp.Extensions.ParameterCheckExtensions.Required``2(System.Func{Hybrid.Localization.Configuration.ILocalizationSourceList,System.Boolean},System.String)
  commentId: M:OSharp.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
  parent: OSharp.Extensions.ParameterCheckExtensions
  definition: OSharp.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
  name: Required<ILocalizationSourceList, TException>(Func<ILocalizationSourceList, Boolean>, String)
  nameWithType: ParameterCheckExtensions.Required<ILocalizationSourceList, TException>(Func<ILocalizationSourceList, Boolean>, String)
  fullName: OSharp.Extensions.ParameterCheckExtensions.Required<Hybrid.Localization.Configuration.ILocalizationSourceList, TException>(System.Func<Hybrid.Localization.Configuration.ILocalizationSourceList, System.Boolean>, System.String)
  nameWithType.vb: ParameterCheckExtensions.Required(Of ILocalizationSourceList, TException)(Func(Of ILocalizationSourceList, Boolean), String)
  fullName.vb: OSharp.Extensions.ParameterCheckExtensions.Required(Of Hybrid.Localization.Configuration.ILocalizationSourceList, TException)(System.Func(Of Hybrid.Localization.Configuration.ILocalizationSourceList, System.Boolean), System.String)
  name.vb: Required(Of ILocalizationSourceList, TException)(Func(Of ILocalizationSourceList, Boolean), String)
  spec.csharp:
  - uid: OSharp.Extensions.ParameterCheckExtensions.Required``2(System.Func{``0,System.Boolean},System.String)
    name: Required<ILocalizationSourceList, TException>
    nameWithType: ParameterCheckExtensions.Required<ILocalizationSourceList, TException>
    fullName: OSharp.Extensions.ParameterCheckExtensions.Required<Hybrid.Localization.Configuration.ILocalizationSourceList, TException>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Localization.Configuration.ILocalizationSourceList
    name: ILocalizationSourceList
    nameWithType: ILocalizationSourceList
    fullName: Hybrid.Localization.Configuration.ILocalizationSourceList
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ParameterCheckExtensions.Required``2(System.Func{``0,System.Boolean},System.String)
    name: Required(Of ILocalizationSourceList, TException)
    nameWithType: ParameterCheckExtensions.Required(Of ILocalizationSourceList, TException)
    fullName: OSharp.Extensions.ParameterCheckExtensions.Required(Of Hybrid.Localization.Configuration.ILocalizationSourceList, TException)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Localization.Configuration.ILocalizationSourceList
    name: ILocalizationSourceList
    nameWithType: ILocalizationSourceList
    fullName: Hybrid.Localization.Configuration.ILocalizationSourceList
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Localization.Configuration.ILocalizationSourceList.OSharp.Extensions.ParameterCheckExtensions.CheckNotNull``1(System.String)
  commentId: M:OSharp.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
  parent: OSharp.Extensions.ParameterCheckExtensions
  definition: OSharp.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
  name: CheckNotNull<ILocalizationSourceList>(String)
  nameWithType: ParameterCheckExtensions.CheckNotNull<ILocalizationSourceList>(String)
  fullName: OSharp.Extensions.ParameterCheckExtensions.CheckNotNull<Hybrid.Localization.Configuration.ILocalizationSourceList>(System.String)
  nameWithType.vb: ParameterCheckExtensions.CheckNotNull(Of ILocalizationSourceList)(String)
  fullName.vb: OSharp.Extensions.ParameterCheckExtensions.CheckNotNull(Of Hybrid.Localization.Configuration.ILocalizationSourceList)(System.String)
  name.vb: CheckNotNull(Of ILocalizationSourceList)(String)
  spec.csharp:
  - uid: OSharp.Extensions.ParameterCheckExtensions.CheckNotNull``1(System.String)
    name: CheckNotNull<ILocalizationSourceList>
    nameWithType: ParameterCheckExtensions.CheckNotNull<ILocalizationSourceList>
    fullName: OSharp.Extensions.ParameterCheckExtensions.CheckNotNull<Hybrid.Localization.Configuration.ILocalizationSourceList>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ParameterCheckExtensions.CheckNotNull``1(System.String)
    name: CheckNotNull(Of ILocalizationSourceList)
    nameWithType: ParameterCheckExtensions.CheckNotNull(Of ILocalizationSourceList)
    fullName: OSharp.Extensions.ParameterCheckExtensions.CheckNotNull(Of Hybrid.Localization.Configuration.ILocalizationSourceList)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{Hybrid.Localization.Sources.ILocalizationSource}.OSharp.Extensions.ParameterCheckExtensions.CheckNotNullOrEmpty``1(System.String)
  commentId: M:OSharp.Extensions.ParameterCheckExtensions.CheckNotNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0},System.String)
  parent: OSharp.Extensions.ParameterCheckExtensions
  definition: OSharp.Extensions.ParameterCheckExtensions.CheckNotNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0},System.String)
  name: CheckNotNullOrEmpty<ILocalizationSource>(String)
  nameWithType: ParameterCheckExtensions.CheckNotNullOrEmpty<ILocalizationSource>(String)
  fullName: OSharp.Extensions.ParameterCheckExtensions.CheckNotNullOrEmpty<Hybrid.Localization.Sources.ILocalizationSource>(System.String)
  nameWithType.vb: ParameterCheckExtensions.CheckNotNullOrEmpty(Of ILocalizationSource)(String)
  fullName.vb: OSharp.Extensions.ParameterCheckExtensions.CheckNotNullOrEmpty(Of Hybrid.Localization.Sources.ILocalizationSource)(System.String)
  name.vb: CheckNotNullOrEmpty(Of ILocalizationSource)(String)
  spec.csharp:
  - uid: OSharp.Extensions.ParameterCheckExtensions.CheckNotNullOrEmpty``1(System.String)
    name: CheckNotNullOrEmpty<ILocalizationSource>
    nameWithType: ParameterCheckExtensions.CheckNotNullOrEmpty<ILocalizationSource>
    fullName: OSharp.Extensions.ParameterCheckExtensions.CheckNotNullOrEmpty<Hybrid.Localization.Sources.ILocalizationSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ParameterCheckExtensions.CheckNotNullOrEmpty``1(System.String)
    name: CheckNotNullOrEmpty(Of ILocalizationSource)
    nameWithType: ParameterCheckExtensions.CheckNotNullOrEmpty(Of ILocalizationSource)
    fullName: OSharp.Extensions.ParameterCheckExtensions.CheckNotNullOrEmpty(Of Hybrid.Localization.Sources.ILocalizationSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Localization.Configuration.ILocalizationSourceList.OSharp.Extensions.TryCatchExtensions.TryCatch``1(System.Action{Hybrid.Localization.Configuration.ILocalizationSourceList},System.Action{System.Exception},System.Action{Hybrid.Localization.Configuration.ILocalizationSourceList})
  commentId: M:OSharp.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
  parent: OSharp.Extensions.TryCatchExtensions
  definition: OSharp.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
  name: TryCatch<ILocalizationSourceList>(Action<ILocalizationSourceList>, Action<Exception>, Action<ILocalizationSourceList>)
  nameWithType: TryCatchExtensions.TryCatch<ILocalizationSourceList>(Action<ILocalizationSourceList>, Action<Exception>, Action<ILocalizationSourceList>)
  fullName: OSharp.Extensions.TryCatchExtensions.TryCatch<Hybrid.Localization.Configuration.ILocalizationSourceList>(System.Action<Hybrid.Localization.Configuration.ILocalizationSourceList>, System.Action<System.Exception>, System.Action<Hybrid.Localization.Configuration.ILocalizationSourceList>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of ILocalizationSourceList)(Action(Of ILocalizationSourceList), Action(Of Exception), Action(Of ILocalizationSourceList))
  fullName.vb: OSharp.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.Localization.Configuration.ILocalizationSourceList)(System.Action(Of Hybrid.Localization.Configuration.ILocalizationSourceList), System.Action(Of System.Exception), System.Action(Of Hybrid.Localization.Configuration.ILocalizationSourceList))
  name.vb: TryCatch(Of ILocalizationSourceList)(Action(Of ILocalizationSourceList), Action(Of Exception), Action(Of ILocalizationSourceList))
  spec.csharp:
  - uid: OSharp.Extensions.TryCatchExtensions.TryCatch``1(System.Action{``0},System.Action{System.Exception},System.Action{``0})
    name: TryCatch<ILocalizationSourceList>
    nameWithType: TryCatchExtensions.TryCatch<ILocalizationSourceList>
    fullName: OSharp.Extensions.TryCatchExtensions.TryCatch<Hybrid.Localization.Configuration.ILocalizationSourceList>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Localization.Configuration.ILocalizationSourceList
    name: ILocalizationSourceList
    nameWithType: ILocalizationSourceList
    fullName: Hybrid.Localization.Configuration.ILocalizationSourceList
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Localization.Configuration.ILocalizationSourceList
    name: ILocalizationSourceList
    nameWithType: ILocalizationSourceList
    fullName: Hybrid.Localization.Configuration.ILocalizationSourceList
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.TryCatchExtensions.TryCatch``1(System.Action{``0},System.Action{System.Exception},System.Action{``0})
    name: TryCatch(Of ILocalizationSourceList)
    nameWithType: TryCatchExtensions.TryCatch(Of ILocalizationSourceList)
    fullName: OSharp.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.Localization.Configuration.ILocalizationSourceList)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Localization.Configuration.ILocalizationSourceList
    name: ILocalizationSourceList
    nameWithType: ILocalizationSourceList
    fullName: Hybrid.Localization.Configuration.ILocalizationSourceList
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Localization.Configuration.ILocalizationSourceList
    name: ILocalizationSourceList
    nameWithType: ILocalizationSourceList
    fullName: Hybrid.Localization.Configuration.ILocalizationSourceList
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Localization.Configuration.ILocalizationSourceList.OSharp.Extensions.TryCatchExtensions.TryCatch``1(System.Action{Hybrid.Localization.Configuration.ILocalizationSourceList},System.Action{System.Exception})
  commentId: M:OSharp.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
  parent: OSharp.Extensions.TryCatchExtensions
  definition: OSharp.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
  name: TryCatch<ILocalizationSourceList>(Action<ILocalizationSourceList>, Action<Exception>)
  nameWithType: TryCatchExtensions.TryCatch<ILocalizationSourceList>(Action<ILocalizationSourceList>, Action<Exception>)
  fullName: OSharp.Extensions.TryCatchExtensions.TryCatch<Hybrid.Localization.Configuration.ILocalizationSourceList>(System.Action<Hybrid.Localization.Configuration.ILocalizationSourceList>, System.Action<System.Exception>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of ILocalizationSourceList)(Action(Of ILocalizationSourceList), Action(Of Exception))
  fullName.vb: OSharp.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.Localization.Configuration.ILocalizationSourceList)(System.Action(Of Hybrid.Localization.Configuration.ILocalizationSourceList), System.Action(Of System.Exception))
  name.vb: TryCatch(Of ILocalizationSourceList)(Action(Of ILocalizationSourceList), Action(Of Exception))
  spec.csharp:
  - uid: OSharp.Extensions.TryCatchExtensions.TryCatch``1(System.Action{``0},System.Action{System.Exception})
    name: TryCatch<ILocalizationSourceList>
    nameWithType: TryCatchExtensions.TryCatch<ILocalizationSourceList>
    fullName: OSharp.Extensions.TryCatchExtensions.TryCatch<Hybrid.Localization.Configuration.ILocalizationSourceList>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Localization.Configuration.ILocalizationSourceList
    name: ILocalizationSourceList
    nameWithType: ILocalizationSourceList
    fullName: Hybrid.Localization.Configuration.ILocalizationSourceList
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.TryCatchExtensions.TryCatch``1(System.Action{``0},System.Action{System.Exception})
    name: TryCatch(Of ILocalizationSourceList)
    nameWithType: TryCatchExtensions.TryCatch(Of ILocalizationSourceList)
    fullName: OSharp.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.Localization.Configuration.ILocalizationSourceList)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Localization.Configuration.ILocalizationSourceList
    name: ILocalizationSourceList
    nameWithType: ILocalizationSourceList
    fullName: Hybrid.Localization.Configuration.ILocalizationSourceList
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Localization.Configuration.ILocalizationSourceList.OSharp.Extensions.TryCatchExtensions.TryCatch``2(System.Func{Hybrid.Localization.Configuration.ILocalizationSourceList,{TResult}},System.Action{System.Exception},System.Action{Hybrid.Localization.Configuration.ILocalizationSourceList})
  commentId: M:OSharp.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
  parent: OSharp.Extensions.TryCatchExtensions
  definition: OSharp.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
  name: TryCatch<ILocalizationSourceList, TResult>(Func<ILocalizationSourceList, TResult>, Action<Exception>, Action<ILocalizationSourceList>)
  nameWithType: TryCatchExtensions.TryCatch<ILocalizationSourceList, TResult>(Func<ILocalizationSourceList, TResult>, Action<Exception>, Action<ILocalizationSourceList>)
  fullName: OSharp.Extensions.TryCatchExtensions.TryCatch<Hybrid.Localization.Configuration.ILocalizationSourceList, TResult>(System.Func<Hybrid.Localization.Configuration.ILocalizationSourceList, TResult>, System.Action<System.Exception>, System.Action<Hybrid.Localization.Configuration.ILocalizationSourceList>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of ILocalizationSourceList, TResult)(Func(Of ILocalizationSourceList, TResult), Action(Of Exception), Action(Of ILocalizationSourceList))
  fullName.vb: OSharp.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.Localization.Configuration.ILocalizationSourceList, TResult)(System.Func(Of Hybrid.Localization.Configuration.ILocalizationSourceList, TResult), System.Action(Of System.Exception), System.Action(Of Hybrid.Localization.Configuration.ILocalizationSourceList))
  name.vb: TryCatch(Of ILocalizationSourceList, TResult)(Func(Of ILocalizationSourceList, TResult), Action(Of Exception), Action(Of ILocalizationSourceList))
  spec.csharp:
  - uid: OSharp.Extensions.TryCatchExtensions.TryCatch``2(System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
    name: TryCatch<ILocalizationSourceList, TResult>
    nameWithType: TryCatchExtensions.TryCatch<ILocalizationSourceList, TResult>
    fullName: OSharp.Extensions.TryCatchExtensions.TryCatch<Hybrid.Localization.Configuration.ILocalizationSourceList, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Localization.Configuration.ILocalizationSourceList
    name: ILocalizationSourceList
    nameWithType: ILocalizationSourceList
    fullName: Hybrid.Localization.Configuration.ILocalizationSourceList
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Localization.Configuration.ILocalizationSourceList
    name: ILocalizationSourceList
    nameWithType: ILocalizationSourceList
    fullName: Hybrid.Localization.Configuration.ILocalizationSourceList
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.TryCatchExtensions.TryCatch``2(System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
    name: TryCatch(Of ILocalizationSourceList, TResult)
    nameWithType: TryCatchExtensions.TryCatch(Of ILocalizationSourceList, TResult)
    fullName: OSharp.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.Localization.Configuration.ILocalizationSourceList, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Localization.Configuration.ILocalizationSourceList
    name: ILocalizationSourceList
    nameWithType: ILocalizationSourceList
    fullName: Hybrid.Localization.Configuration.ILocalizationSourceList
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Localization.Configuration.ILocalizationSourceList
    name: ILocalizationSourceList
    nameWithType: ILocalizationSourceList
    fullName: Hybrid.Localization.Configuration.ILocalizationSourceList
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Localization.Configuration.ILocalizationSourceList.OSharp.Extensions.TryCatchExtensions.TryCatch``2(System.Func{Hybrid.Localization.Configuration.ILocalizationSourceList,{TResult}},System.Action{System.Exception})
  commentId: M:OSharp.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
  parent: OSharp.Extensions.TryCatchExtensions
  definition: OSharp.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
  name: TryCatch<ILocalizationSourceList, TResult>(Func<ILocalizationSourceList, TResult>, Action<Exception>)
  nameWithType: TryCatchExtensions.TryCatch<ILocalizationSourceList, TResult>(Func<ILocalizationSourceList, TResult>, Action<Exception>)
  fullName: OSharp.Extensions.TryCatchExtensions.TryCatch<Hybrid.Localization.Configuration.ILocalizationSourceList, TResult>(System.Func<Hybrid.Localization.Configuration.ILocalizationSourceList, TResult>, System.Action<System.Exception>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of ILocalizationSourceList, TResult)(Func(Of ILocalizationSourceList, TResult), Action(Of Exception))
  fullName.vb: OSharp.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.Localization.Configuration.ILocalizationSourceList, TResult)(System.Func(Of Hybrid.Localization.Configuration.ILocalizationSourceList, TResult), System.Action(Of System.Exception))
  name.vb: TryCatch(Of ILocalizationSourceList, TResult)(Func(Of ILocalizationSourceList, TResult), Action(Of Exception))
  spec.csharp:
  - uid: OSharp.Extensions.TryCatchExtensions.TryCatch``2(System.Func{``0,``1},System.Action{System.Exception})
    name: TryCatch<ILocalizationSourceList, TResult>
    nameWithType: TryCatchExtensions.TryCatch<ILocalizationSourceList, TResult>
    fullName: OSharp.Extensions.TryCatchExtensions.TryCatch<Hybrid.Localization.Configuration.ILocalizationSourceList, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Localization.Configuration.ILocalizationSourceList
    name: ILocalizationSourceList
    nameWithType: ILocalizationSourceList
    fullName: Hybrid.Localization.Configuration.ILocalizationSourceList
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.TryCatchExtensions.TryCatch``2(System.Func{``0,``1},System.Action{System.Exception})
    name: TryCatch(Of ILocalizationSourceList, TResult)
    nameWithType: TryCatchExtensions.TryCatch(Of ILocalizationSourceList, TResult)
    fullName: OSharp.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.Localization.Configuration.ILocalizationSourceList, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Localization.Configuration.ILocalizationSourceList
    name: ILocalizationSourceList
    nameWithType: ILocalizationSourceList
    fullName: Hybrid.Localization.Configuration.ILocalizationSourceList
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Localization.Configuration.ILocalizationSourceList.OSharp.Extensions.TryCatchExtensions.TryFinally``1(System.Action{Hybrid.Localization.Configuration.ILocalizationSourceList},System.Action{Hybrid.Localization.Configuration.ILocalizationSourceList})
  commentId: M:OSharp.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
  parent: OSharp.Extensions.TryCatchExtensions
  definition: OSharp.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
  name: TryFinally<ILocalizationSourceList>(Action<ILocalizationSourceList>, Action<ILocalizationSourceList>)
  nameWithType: TryCatchExtensions.TryFinally<ILocalizationSourceList>(Action<ILocalizationSourceList>, Action<ILocalizationSourceList>)
  fullName: OSharp.Extensions.TryCatchExtensions.TryFinally<Hybrid.Localization.Configuration.ILocalizationSourceList>(System.Action<Hybrid.Localization.Configuration.ILocalizationSourceList>, System.Action<Hybrid.Localization.Configuration.ILocalizationSourceList>)
  nameWithType.vb: TryCatchExtensions.TryFinally(Of ILocalizationSourceList)(Action(Of ILocalizationSourceList), Action(Of ILocalizationSourceList))
  fullName.vb: OSharp.Extensions.TryCatchExtensions.TryFinally(Of Hybrid.Localization.Configuration.ILocalizationSourceList)(System.Action(Of Hybrid.Localization.Configuration.ILocalizationSourceList), System.Action(Of Hybrid.Localization.Configuration.ILocalizationSourceList))
  name.vb: TryFinally(Of ILocalizationSourceList)(Action(Of ILocalizationSourceList), Action(Of ILocalizationSourceList))
  spec.csharp:
  - uid: OSharp.Extensions.TryCatchExtensions.TryFinally``1(System.Action{``0},System.Action{``0})
    name: TryFinally<ILocalizationSourceList>
    nameWithType: TryCatchExtensions.TryFinally<ILocalizationSourceList>
    fullName: OSharp.Extensions.TryCatchExtensions.TryFinally<Hybrid.Localization.Configuration.ILocalizationSourceList>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Localization.Configuration.ILocalizationSourceList
    name: ILocalizationSourceList
    nameWithType: ILocalizationSourceList
    fullName: Hybrid.Localization.Configuration.ILocalizationSourceList
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Localization.Configuration.ILocalizationSourceList
    name: ILocalizationSourceList
    nameWithType: ILocalizationSourceList
    fullName: Hybrid.Localization.Configuration.ILocalizationSourceList
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.TryCatchExtensions.TryFinally``1(System.Action{``0},System.Action{``0})
    name: TryFinally(Of ILocalizationSourceList)
    nameWithType: TryCatchExtensions.TryFinally(Of ILocalizationSourceList)
    fullName: OSharp.Extensions.TryCatchExtensions.TryFinally(Of Hybrid.Localization.Configuration.ILocalizationSourceList)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Localization.Configuration.ILocalizationSourceList
    name: ILocalizationSourceList
    nameWithType: ILocalizationSourceList
    fullName: Hybrid.Localization.Configuration.ILocalizationSourceList
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Localization.Configuration.ILocalizationSourceList
    name: ILocalizationSourceList
    nameWithType: ILocalizationSourceList
    fullName: Hybrid.Localization.Configuration.ILocalizationSourceList
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.OSharp.Json.JsonExtensions.ToJsonString(System.Boolean,System.Boolean)
  commentId: M:OSharp.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
  parent: OSharp.Json.JsonExtensions
  definition: OSharp.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
  name: ToJsonString(Boolean, Boolean)
  nameWithType: JsonExtensions.ToJsonString(Boolean, Boolean)
  fullName: OSharp.Json.JsonExtensions.ToJsonString(System.Boolean, System.Boolean)
  spec.csharp:
  - uid: OSharp.Json.JsonExtensions.ToJsonString(System.Boolean,System.Boolean)
    name: ToJsonString
    nameWithType: JsonExtensions.ToJsonString
    fullName: OSharp.Json.JsonExtensions.ToJsonString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Json.JsonExtensions.ToJsonString(System.Boolean,System.Boolean)
    name: ToJsonString
    nameWithType: JsonExtensions.ToJsonString
    fullName: OSharp.Json.JsonExtensions.ToJsonString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.OSharp.Mapping.MapperExtensions.MapTo``1
  commentId: M:OSharp.Mapping.MapperExtensions.MapTo``1(System.Object)
  parent: OSharp.Mapping.MapperExtensions
  definition: OSharp.Mapping.MapperExtensions.MapTo``1(System.Object)
  name: MapTo<TTarget>()
  nameWithType: MapperExtensions.MapTo<TTarget>()
  fullName: OSharp.Mapping.MapperExtensions.MapTo<TTarget>()
  nameWithType.vb: MapperExtensions.MapTo(Of TTarget)()
  fullName.vb: OSharp.Mapping.MapperExtensions.MapTo(Of TTarget)()
  name.vb: MapTo(Of TTarget)()
  spec.csharp:
  - uid: OSharp.Mapping.MapperExtensions.MapTo``1
    name: MapTo<TTarget>
    nameWithType: MapperExtensions.MapTo<TTarget>
    fullName: OSharp.Mapping.MapperExtensions.MapTo<TTarget>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Mapping.MapperExtensions.MapTo``1
    name: MapTo(Of TTarget)
    nameWithType: MapperExtensions.MapTo(Of TTarget)
    fullName: OSharp.Mapping.MapperExtensions.MapTo(Of TTarget)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Localization.Configuration.ILocalizationSourceList.OSharp.Mapping.MapperExtensions.MapTo``2({TTarget})
  commentId: M:OSharp.Mapping.MapperExtensions.MapTo``2(``0,``1)
  parent: OSharp.Mapping.MapperExtensions
  definition: OSharp.Mapping.MapperExtensions.MapTo``2(``0,``1)
  name: MapTo<ILocalizationSourceList, TTarget>(TTarget)
  nameWithType: MapperExtensions.MapTo<ILocalizationSourceList, TTarget>(TTarget)
  fullName: OSharp.Mapping.MapperExtensions.MapTo<Hybrid.Localization.Configuration.ILocalizationSourceList, TTarget>(TTarget)
  nameWithType.vb: MapperExtensions.MapTo(Of ILocalizationSourceList, TTarget)(TTarget)
  fullName.vb: OSharp.Mapping.MapperExtensions.MapTo(Of Hybrid.Localization.Configuration.ILocalizationSourceList, TTarget)(TTarget)
  name.vb: MapTo(Of ILocalizationSourceList, TTarget)(TTarget)
  spec.csharp:
  - uid: OSharp.Mapping.MapperExtensions.MapTo``2(``1)
    name: MapTo<ILocalizationSourceList, TTarget>
    nameWithType: MapperExtensions.MapTo<ILocalizationSourceList, TTarget>
    fullName: OSharp.Mapping.MapperExtensions.MapTo<Hybrid.Localization.Configuration.ILocalizationSourceList, TTarget>
  - name: (
    nameWithType: (
    fullName: (
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Mapping.MapperExtensions.MapTo``2(``1)
    name: MapTo(Of ILocalizationSourceList, TTarget)
    nameWithType: MapperExtensions.MapTo(Of ILocalizationSourceList, TTarget)
    fullName: OSharp.Mapping.MapperExtensions.MapTo(Of Hybrid.Localization.Configuration.ILocalizationSourceList, TTarget)
  - name: (
    nameWithType: (
    fullName: (
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.OSharp.Reflection.LockExtensions.Locking(System.Action)
  commentId: M:OSharp.Reflection.LockExtensions.Locking(System.Object,System.Action)
  parent: OSharp.Reflection.LockExtensions
  definition: OSharp.Reflection.LockExtensions.Locking(System.Object,System.Action)
  name: Locking(Action)
  nameWithType: LockExtensions.Locking(Action)
  fullName: OSharp.Reflection.LockExtensions.Locking(System.Action)
  spec.csharp:
  - uid: OSharp.Reflection.LockExtensions.Locking(System.Action)
    name: Locking
    nameWithType: LockExtensions.Locking
    fullName: OSharp.Reflection.LockExtensions.Locking
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Reflection.LockExtensions.Locking(System.Action)
    name: Locking
    nameWithType: LockExtensions.Locking
    fullName: OSharp.Reflection.LockExtensions.Locking
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Localization.Configuration.ILocalizationSourceList.OSharp.Reflection.LockExtensions.Locking``1(System.Action{Hybrid.Localization.Configuration.ILocalizationSourceList})
  commentId: M:OSharp.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
  parent: OSharp.Reflection.LockExtensions
  definition: OSharp.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
  name: Locking<ILocalizationSourceList>(Action<ILocalizationSourceList>)
  nameWithType: LockExtensions.Locking<ILocalizationSourceList>(Action<ILocalizationSourceList>)
  fullName: OSharp.Reflection.LockExtensions.Locking<Hybrid.Localization.Configuration.ILocalizationSourceList>(System.Action<Hybrid.Localization.Configuration.ILocalizationSourceList>)
  nameWithType.vb: LockExtensions.Locking(Of ILocalizationSourceList)(Action(Of ILocalizationSourceList))
  fullName.vb: OSharp.Reflection.LockExtensions.Locking(Of Hybrid.Localization.Configuration.ILocalizationSourceList)(System.Action(Of Hybrid.Localization.Configuration.ILocalizationSourceList))
  name.vb: Locking(Of ILocalizationSourceList)(Action(Of ILocalizationSourceList))
  spec.csharp:
  - uid: OSharp.Reflection.LockExtensions.Locking``1(System.Action{``0})
    name: Locking<ILocalizationSourceList>
    nameWithType: LockExtensions.Locking<ILocalizationSourceList>
    fullName: OSharp.Reflection.LockExtensions.Locking<Hybrid.Localization.Configuration.ILocalizationSourceList>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Localization.Configuration.ILocalizationSourceList
    name: ILocalizationSourceList
    nameWithType: ILocalizationSourceList
    fullName: Hybrid.Localization.Configuration.ILocalizationSourceList
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Reflection.LockExtensions.Locking``1(System.Action{``0})
    name: Locking(Of ILocalizationSourceList)
    nameWithType: LockExtensions.Locking(Of ILocalizationSourceList)
    fullName: OSharp.Reflection.LockExtensions.Locking(Of Hybrid.Localization.Configuration.ILocalizationSourceList)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Localization.Configuration.ILocalizationSourceList
    name: ILocalizationSourceList
    nameWithType: ILocalizationSourceList
    fullName: Hybrid.Localization.Configuration.ILocalizationSourceList
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.OSharp.Reflection.LockExtensions.Locking``1(System.Func{{TResult}})
  commentId: M:OSharp.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
  parent: OSharp.Reflection.LockExtensions
  definition: OSharp.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
  name: Locking<TResult>(Func<TResult>)
  nameWithType: LockExtensions.Locking<TResult>(Func<TResult>)
  fullName: OSharp.Reflection.LockExtensions.Locking<TResult>(System.Func<TResult>)
  nameWithType.vb: LockExtensions.Locking(Of TResult)(Func(Of TResult))
  fullName.vb: OSharp.Reflection.LockExtensions.Locking(Of TResult)(System.Func(Of TResult))
  name.vb: Locking(Of TResult)(Func(Of TResult))
  spec.csharp:
  - uid: OSharp.Reflection.LockExtensions.Locking``1(System.Func{``0})
    name: Locking<TResult>
    nameWithType: LockExtensions.Locking<TResult>
    fullName: OSharp.Reflection.LockExtensions.Locking<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Reflection.LockExtensions.Locking``1(System.Func{``0})
    name: Locking(Of TResult)
    nameWithType: LockExtensions.Locking(Of TResult)
    fullName: OSharp.Reflection.LockExtensions.Locking(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Localization.Configuration.ILocalizationSourceList.OSharp.Reflection.LockExtensions.Locking``2(System.Func{Hybrid.Localization.Configuration.ILocalizationSourceList,{TResult}})
  commentId: M:OSharp.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
  parent: OSharp.Reflection.LockExtensions
  definition: OSharp.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
  name: Locking<ILocalizationSourceList, TResult>(Func<ILocalizationSourceList, TResult>)
  nameWithType: LockExtensions.Locking<ILocalizationSourceList, TResult>(Func<ILocalizationSourceList, TResult>)
  fullName: OSharp.Reflection.LockExtensions.Locking<Hybrid.Localization.Configuration.ILocalizationSourceList, TResult>(System.Func<Hybrid.Localization.Configuration.ILocalizationSourceList, TResult>)
  nameWithType.vb: LockExtensions.Locking(Of ILocalizationSourceList, TResult)(Func(Of ILocalizationSourceList, TResult))
  fullName.vb: OSharp.Reflection.LockExtensions.Locking(Of Hybrid.Localization.Configuration.ILocalizationSourceList, TResult)(System.Func(Of Hybrid.Localization.Configuration.ILocalizationSourceList, TResult))
  name.vb: Locking(Of ILocalizationSourceList, TResult)(Func(Of ILocalizationSourceList, TResult))
  spec.csharp:
  - uid: OSharp.Reflection.LockExtensions.Locking``2(System.Func{``0,``1})
    name: Locking<ILocalizationSourceList, TResult>
    nameWithType: LockExtensions.Locking<ILocalizationSourceList, TResult>
    fullName: OSharp.Reflection.LockExtensions.Locking<Hybrid.Localization.Configuration.ILocalizationSourceList, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Localization.Configuration.ILocalizationSourceList
    name: ILocalizationSourceList
    nameWithType: ILocalizationSourceList
    fullName: Hybrid.Localization.Configuration.ILocalizationSourceList
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Reflection.LockExtensions.Locking``2(System.Func{``0,``1})
    name: Locking(Of ILocalizationSourceList, TResult)
    nameWithType: LockExtensions.Locking(Of ILocalizationSourceList, TResult)
    fullName: OSharp.Reflection.LockExtensions.Locking(Of Hybrid.Localization.Configuration.ILocalizationSourceList, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Localization.Configuration.ILocalizationSourceList
    name: ILocalizationSourceList
    nameWithType: ILocalizationSourceList
    fullName: Hybrid.Localization.Configuration.ILocalizationSourceList
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection{Hybrid.Localization.Sources.ILocalizationSource}.Hybrid.Extensions.CollectionExtensions.AddIf``1(Hybrid.Localization.Sources.ILocalizationSource,System.Boolean)
  commentId: M:Hybrid.Extensions.CollectionExtensions.AddIf``1(System.Collections.Generic.ICollection{``0},``0,System.Boolean)
  parent: Hybrid.Extensions.CollectionExtensions
  definition: Hybrid.Extensions.CollectionExtensions.AddIf``1(System.Collections.Generic.ICollection{``0},``0,System.Boolean)
  name: AddIf<ILocalizationSource>(ILocalizationSource, Boolean)
  nameWithType: CollectionExtensions.AddIf<ILocalizationSource>(ILocalizationSource, Boolean)
  fullName: Hybrid.Extensions.CollectionExtensions.AddIf<Hybrid.Localization.Sources.ILocalizationSource>(Hybrid.Localization.Sources.ILocalizationSource, System.Boolean)
  nameWithType.vb: CollectionExtensions.AddIf(Of ILocalizationSource)(ILocalizationSource, Boolean)
  fullName.vb: Hybrid.Extensions.CollectionExtensions.AddIf(Of Hybrid.Localization.Sources.ILocalizationSource)(Hybrid.Localization.Sources.ILocalizationSource, System.Boolean)
  name.vb: AddIf(Of ILocalizationSource)(ILocalizationSource, Boolean)
  spec.csharp:
  - uid: Hybrid.Extensions.CollectionExtensions.AddIf``1(``0,System.Boolean)
    name: AddIf<ILocalizationSource>
    nameWithType: CollectionExtensions.AddIf<ILocalizationSource>
    fullName: Hybrid.Extensions.CollectionExtensions.AddIf<Hybrid.Localization.Sources.ILocalizationSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Hybrid.Localization.Sources.ILocalizationSource
    name: ILocalizationSource
    nameWithType: ILocalizationSource
    fullName: Hybrid.Localization.Sources.ILocalizationSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.CollectionExtensions.AddIf``1(``0,System.Boolean)
    name: AddIf(Of ILocalizationSource)
    nameWithType: CollectionExtensions.AddIf(Of ILocalizationSource)
    fullName: Hybrid.Extensions.CollectionExtensions.AddIf(Of Hybrid.Localization.Sources.ILocalizationSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Hybrid.Localization.Sources.ILocalizationSource
    name: ILocalizationSource
    nameWithType: ILocalizationSource
    fullName: Hybrid.Localization.Sources.ILocalizationSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection{Hybrid.Localization.Sources.ILocalizationSource}.Hybrid.Extensions.CollectionExtensions.AddIf``1(Hybrid.Localization.Sources.ILocalizationSource,System.Func{System.Boolean})
  commentId: M:Hybrid.Extensions.CollectionExtensions.AddIf``1(System.Collections.Generic.ICollection{``0},``0,System.Func{System.Boolean})
  parent: Hybrid.Extensions.CollectionExtensions
  definition: Hybrid.Extensions.CollectionExtensions.AddIf``1(System.Collections.Generic.ICollection{``0},``0,System.Func{System.Boolean})
  name: AddIf<ILocalizationSource>(ILocalizationSource, Func<Boolean>)
  nameWithType: CollectionExtensions.AddIf<ILocalizationSource>(ILocalizationSource, Func<Boolean>)
  fullName: Hybrid.Extensions.CollectionExtensions.AddIf<Hybrid.Localization.Sources.ILocalizationSource>(Hybrid.Localization.Sources.ILocalizationSource, System.Func<System.Boolean>)
  nameWithType.vb: CollectionExtensions.AddIf(Of ILocalizationSource)(ILocalizationSource, Func(Of Boolean))
  fullName.vb: Hybrid.Extensions.CollectionExtensions.AddIf(Of Hybrid.Localization.Sources.ILocalizationSource)(Hybrid.Localization.Sources.ILocalizationSource, System.Func(Of System.Boolean))
  name.vb: AddIf(Of ILocalizationSource)(ILocalizationSource, Func(Of Boolean))
  spec.csharp:
  - uid: Hybrid.Extensions.CollectionExtensions.AddIf``1(``0,System.Func{System.Boolean})
    name: AddIf<ILocalizationSource>
    nameWithType: CollectionExtensions.AddIf<ILocalizationSource>
    fullName: Hybrid.Extensions.CollectionExtensions.AddIf<Hybrid.Localization.Sources.ILocalizationSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Hybrid.Localization.Sources.ILocalizationSource
    name: ILocalizationSource
    nameWithType: ILocalizationSource
    fullName: Hybrid.Localization.Sources.ILocalizationSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.CollectionExtensions.AddIf``1(``0,System.Func{System.Boolean})
    name: AddIf(Of ILocalizationSource)
    nameWithType: CollectionExtensions.AddIf(Of ILocalizationSource)
    fullName: Hybrid.Extensions.CollectionExtensions.AddIf(Of Hybrid.Localization.Sources.ILocalizationSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Hybrid.Localization.Sources.ILocalizationSource
    name: ILocalizationSource
    nameWithType: ILocalizationSource
    fullName: Hybrid.Localization.Sources.ILocalizationSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection{Hybrid.Localization.Sources.ILocalizationSource}.Hybrid.Extensions.CollectionExtensions.AddIfNotExist``1(Hybrid.Localization.Sources.ILocalizationSource,System.Func{Hybrid.Localization.Sources.ILocalizationSource,System.Boolean})
  commentId: M:Hybrid.Extensions.CollectionExtensions.AddIfNotExist``1(System.Collections.Generic.ICollection{``0},``0,System.Func{``0,System.Boolean})
  parent: Hybrid.Extensions.CollectionExtensions
  definition: Hybrid.Extensions.CollectionExtensions.AddIfNotExist``1(System.Collections.Generic.ICollection{``0},``0,System.Func{``0,System.Boolean})
  name: AddIfNotExist<ILocalizationSource>(ILocalizationSource, Func<ILocalizationSource, Boolean>)
  nameWithType: CollectionExtensions.AddIfNotExist<ILocalizationSource>(ILocalizationSource, Func<ILocalizationSource, Boolean>)
  fullName: Hybrid.Extensions.CollectionExtensions.AddIfNotExist<Hybrid.Localization.Sources.ILocalizationSource>(Hybrid.Localization.Sources.ILocalizationSource, System.Func<Hybrid.Localization.Sources.ILocalizationSource, System.Boolean>)
  nameWithType.vb: CollectionExtensions.AddIfNotExist(Of ILocalizationSource)(ILocalizationSource, Func(Of ILocalizationSource, Boolean))
  fullName.vb: Hybrid.Extensions.CollectionExtensions.AddIfNotExist(Of Hybrid.Localization.Sources.ILocalizationSource)(Hybrid.Localization.Sources.ILocalizationSource, System.Func(Of Hybrid.Localization.Sources.ILocalizationSource, System.Boolean))
  name.vb: AddIfNotExist(Of ILocalizationSource)(ILocalizationSource, Func(Of ILocalizationSource, Boolean))
  spec.csharp:
  - uid: Hybrid.Extensions.CollectionExtensions.AddIfNotExist``1(``0,System.Func{``0,System.Boolean})
    name: AddIfNotExist<ILocalizationSource>
    nameWithType: CollectionExtensions.AddIfNotExist<ILocalizationSource>
    fullName: Hybrid.Extensions.CollectionExtensions.AddIfNotExist<Hybrid.Localization.Sources.ILocalizationSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Hybrid.Localization.Sources.ILocalizationSource
    name: ILocalizationSource
    nameWithType: ILocalizationSource
    fullName: Hybrid.Localization.Sources.ILocalizationSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Localization.Sources.ILocalizationSource
    name: ILocalizationSource
    nameWithType: ILocalizationSource
    fullName: Hybrid.Localization.Sources.ILocalizationSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.CollectionExtensions.AddIfNotExist``1(``0,System.Func{``0,System.Boolean})
    name: AddIfNotExist(Of ILocalizationSource)
    nameWithType: CollectionExtensions.AddIfNotExist(Of ILocalizationSource)
    fullName: Hybrid.Extensions.CollectionExtensions.AddIfNotExist(Of Hybrid.Localization.Sources.ILocalizationSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Hybrid.Localization.Sources.ILocalizationSource
    name: ILocalizationSource
    nameWithType: ILocalizationSource
    fullName: Hybrid.Localization.Sources.ILocalizationSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Localization.Sources.ILocalizationSource
    name: ILocalizationSource
    nameWithType: ILocalizationSource
    fullName: Hybrid.Localization.Sources.ILocalizationSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection{Hybrid.Localization.Sources.ILocalizationSource}.Hybrid.Extensions.CollectionExtensions.AddIfNotNull``1(Hybrid.Localization.Sources.ILocalizationSource)
  commentId: M:Hybrid.Extensions.CollectionExtensions.AddIfNotNull``1(System.Collections.Generic.ICollection{``0},``0)
  parent: Hybrid.Extensions.CollectionExtensions
  definition: Hybrid.Extensions.CollectionExtensions.AddIfNotNull``1(System.Collections.Generic.ICollection{``0},``0)
  name: AddIfNotNull<ILocalizationSource>(ILocalizationSource)
  nameWithType: CollectionExtensions.AddIfNotNull<ILocalizationSource>(ILocalizationSource)
  fullName: Hybrid.Extensions.CollectionExtensions.AddIfNotNull<Hybrid.Localization.Sources.ILocalizationSource>(Hybrid.Localization.Sources.ILocalizationSource)
  nameWithType.vb: CollectionExtensions.AddIfNotNull(Of ILocalizationSource)(ILocalizationSource)
  fullName.vb: Hybrid.Extensions.CollectionExtensions.AddIfNotNull(Of Hybrid.Localization.Sources.ILocalizationSource)(Hybrid.Localization.Sources.ILocalizationSource)
  name.vb: AddIfNotNull(Of ILocalizationSource)(ILocalizationSource)
  spec.csharp:
  - uid: Hybrid.Extensions.CollectionExtensions.AddIfNotNull``1(``0)
    name: AddIfNotNull<ILocalizationSource>
    nameWithType: CollectionExtensions.AddIfNotNull<ILocalizationSource>
    fullName: Hybrid.Extensions.CollectionExtensions.AddIfNotNull<Hybrid.Localization.Sources.ILocalizationSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Hybrid.Localization.Sources.ILocalizationSource
    name: ILocalizationSource
    nameWithType: ILocalizationSource
    fullName: Hybrid.Localization.Sources.ILocalizationSource
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.CollectionExtensions.AddIfNotNull``1(``0)
    name: AddIfNotNull(Of ILocalizationSource)
    nameWithType: CollectionExtensions.AddIfNotNull(Of ILocalizationSource)
    fullName: Hybrid.Extensions.CollectionExtensions.AddIfNotNull(Of Hybrid.Localization.Sources.ILocalizationSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Hybrid.Localization.Sources.ILocalizationSource
    name: ILocalizationSource
    nameWithType: ILocalizationSource
    fullName: Hybrid.Localization.Sources.ILocalizationSource
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection{Hybrid.Localization.Sources.ILocalizationSource}.Hybrid.Extensions.CollectionExtensions.GetOrAdd``1(System.Func{Hybrid.Localization.Sources.ILocalizationSource,System.Boolean},System.Func{Hybrid.Localization.Sources.ILocalizationSource})
  commentId: M:Hybrid.Extensions.CollectionExtensions.GetOrAdd``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Boolean},System.Func{``0})
  parent: Hybrid.Extensions.CollectionExtensions
  definition: Hybrid.Extensions.CollectionExtensions.GetOrAdd``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Boolean},System.Func{``0})
  name: GetOrAdd<ILocalizationSource>(Func<ILocalizationSource, Boolean>, Func<ILocalizationSource>)
  nameWithType: CollectionExtensions.GetOrAdd<ILocalizationSource>(Func<ILocalizationSource, Boolean>, Func<ILocalizationSource>)
  fullName: Hybrid.Extensions.CollectionExtensions.GetOrAdd<Hybrid.Localization.Sources.ILocalizationSource>(System.Func<Hybrid.Localization.Sources.ILocalizationSource, System.Boolean>, System.Func<Hybrid.Localization.Sources.ILocalizationSource>)
  nameWithType.vb: CollectionExtensions.GetOrAdd(Of ILocalizationSource)(Func(Of ILocalizationSource, Boolean), Func(Of ILocalizationSource))
  fullName.vb: Hybrid.Extensions.CollectionExtensions.GetOrAdd(Of Hybrid.Localization.Sources.ILocalizationSource)(System.Func(Of Hybrid.Localization.Sources.ILocalizationSource, System.Boolean), System.Func(Of Hybrid.Localization.Sources.ILocalizationSource))
  name.vb: GetOrAdd(Of ILocalizationSource)(Func(Of ILocalizationSource, Boolean), Func(Of ILocalizationSource))
  spec.csharp:
  - uid: Hybrid.Extensions.CollectionExtensions.GetOrAdd``1(System.Func{``0,System.Boolean},System.Func{``0})
    name: GetOrAdd<ILocalizationSource>
    nameWithType: CollectionExtensions.GetOrAdd<ILocalizationSource>
    fullName: Hybrid.Extensions.CollectionExtensions.GetOrAdd<Hybrid.Localization.Sources.ILocalizationSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Localization.Sources.ILocalizationSource
    name: ILocalizationSource
    nameWithType: ILocalizationSource
    fullName: Hybrid.Localization.Sources.ILocalizationSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Localization.Sources.ILocalizationSource
    name: ILocalizationSource
    nameWithType: ILocalizationSource
    fullName: Hybrid.Localization.Sources.ILocalizationSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.CollectionExtensions.GetOrAdd``1(System.Func{``0,System.Boolean},System.Func{``0})
    name: GetOrAdd(Of ILocalizationSource)
    nameWithType: CollectionExtensions.GetOrAdd(Of ILocalizationSource)
    fullName: Hybrid.Extensions.CollectionExtensions.GetOrAdd(Of Hybrid.Localization.Sources.ILocalizationSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Localization.Sources.ILocalizationSource
    name: ILocalizationSource
    nameWithType: ILocalizationSource
    fullName: Hybrid.Localization.Sources.ILocalizationSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Localization.Sources.ILocalizationSource
    name: ILocalizationSource
    nameWithType: ILocalizationSource
    fullName: Hybrid.Localization.Sources.ILocalizationSource
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection{Hybrid.Localization.Sources.ILocalizationSource}.Hybrid.Extensions.CollectionExtensions.IsNullOrEmpty``1
  commentId: M:Hybrid.Extensions.CollectionExtensions.IsNullOrEmpty``1(System.Collections.Generic.ICollection{``0})
  parent: Hybrid.Extensions.CollectionExtensions
  definition: Hybrid.Extensions.CollectionExtensions.IsNullOrEmpty``1(System.Collections.Generic.ICollection{``0})
  name: IsNullOrEmpty<ILocalizationSource>()
  nameWithType: CollectionExtensions.IsNullOrEmpty<ILocalizationSource>()
  fullName: Hybrid.Extensions.CollectionExtensions.IsNullOrEmpty<Hybrid.Localization.Sources.ILocalizationSource>()
  nameWithType.vb: CollectionExtensions.IsNullOrEmpty(Of ILocalizationSource)()
  fullName.vb: Hybrid.Extensions.CollectionExtensions.IsNullOrEmpty(Of Hybrid.Localization.Sources.ILocalizationSource)()
  name.vb: IsNullOrEmpty(Of ILocalizationSource)()
  spec.csharp:
  - uid: Hybrid.Extensions.CollectionExtensions.IsNullOrEmpty``1
    name: IsNullOrEmpty<ILocalizationSource>
    nameWithType: CollectionExtensions.IsNullOrEmpty<ILocalizationSource>
    fullName: Hybrid.Extensions.CollectionExtensions.IsNullOrEmpty<Hybrid.Localization.Sources.ILocalizationSource>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.CollectionExtensions.IsNullOrEmpty``1
    name: IsNullOrEmpty(Of ILocalizationSource)
    nameWithType: CollectionExtensions.IsNullOrEmpty(Of ILocalizationSource)
    fullName: Hybrid.Extensions.CollectionExtensions.IsNullOrEmpty(Of Hybrid.Localization.Sources.ILocalizationSource)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection{Hybrid.Localization.Sources.ILocalizationSource}.Hybrid.Extensions.CollectionExtensions.AddIfNotContains``1(Hybrid.Localization.Sources.ILocalizationSource)
  commentId: M:Hybrid.Extensions.CollectionExtensions.AddIfNotContains``1(System.Collections.Generic.ICollection{``0},``0)
  parent: Hybrid.Extensions.CollectionExtensions
  definition: Hybrid.Extensions.CollectionExtensions.AddIfNotContains``1(System.Collections.Generic.ICollection{``0},``0)
  name: AddIfNotContains<ILocalizationSource>(ILocalizationSource)
  nameWithType: CollectionExtensions.AddIfNotContains<ILocalizationSource>(ILocalizationSource)
  fullName: Hybrid.Extensions.CollectionExtensions.AddIfNotContains<Hybrid.Localization.Sources.ILocalizationSource>(Hybrid.Localization.Sources.ILocalizationSource)
  nameWithType.vb: CollectionExtensions.AddIfNotContains(Of ILocalizationSource)(ILocalizationSource)
  fullName.vb: Hybrid.Extensions.CollectionExtensions.AddIfNotContains(Of Hybrid.Localization.Sources.ILocalizationSource)(Hybrid.Localization.Sources.ILocalizationSource)
  name.vb: AddIfNotContains(Of ILocalizationSource)(ILocalizationSource)
  spec.csharp:
  - uid: Hybrid.Extensions.CollectionExtensions.AddIfNotContains``1(``0)
    name: AddIfNotContains<ILocalizationSource>
    nameWithType: CollectionExtensions.AddIfNotContains<ILocalizationSource>
    fullName: Hybrid.Extensions.CollectionExtensions.AddIfNotContains<Hybrid.Localization.Sources.ILocalizationSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Hybrid.Localization.Sources.ILocalizationSource
    name: ILocalizationSource
    nameWithType: ILocalizationSource
    fullName: Hybrid.Localization.Sources.ILocalizationSource
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.CollectionExtensions.AddIfNotContains``1(``0)
    name: AddIfNotContains(Of ILocalizationSource)
    nameWithType: CollectionExtensions.AddIfNotContains(Of ILocalizationSource)
    fullName: Hybrid.Extensions.CollectionExtensions.AddIfNotContains(Of Hybrid.Localization.Sources.ILocalizationSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Hybrid.Localization.Sources.ILocalizationSource
    name: ILocalizationSource
    nameWithType: ILocalizationSource
    fullName: Hybrid.Localization.Sources.ILocalizationSource
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{Hybrid.Localization.Sources.ILocalizationSource}.Hybrid.Extensions.EnumerableExtensions.JoinAsString``1(System.String)
  commentId: M:Hybrid.Extensions.EnumerableExtensions.JoinAsString``1(System.Collections.Generic.IEnumerable{``0},System.String)
  parent: Hybrid.Extensions.EnumerableExtensions
  definition: Hybrid.Extensions.EnumerableExtensions.JoinAsString``1(System.Collections.Generic.IEnumerable{``0},System.String)
  name: JoinAsString<ILocalizationSource>(String)
  nameWithType: EnumerableExtensions.JoinAsString<ILocalizationSource>(String)
  fullName: Hybrid.Extensions.EnumerableExtensions.JoinAsString<Hybrid.Localization.Sources.ILocalizationSource>(System.String)
  nameWithType.vb: EnumerableExtensions.JoinAsString(Of ILocalizationSource)(String)
  fullName.vb: Hybrid.Extensions.EnumerableExtensions.JoinAsString(Of Hybrid.Localization.Sources.ILocalizationSource)(System.String)
  name.vb: JoinAsString(Of ILocalizationSource)(String)
  spec.csharp:
  - uid: Hybrid.Extensions.EnumerableExtensions.JoinAsString``1(System.String)
    name: JoinAsString<ILocalizationSource>
    nameWithType: EnumerableExtensions.JoinAsString<ILocalizationSource>
    fullName: Hybrid.Extensions.EnumerableExtensions.JoinAsString<Hybrid.Localization.Sources.ILocalizationSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.EnumerableExtensions.JoinAsString``1(System.String)
    name: JoinAsString(Of ILocalizationSource)
    nameWithType: EnumerableExtensions.JoinAsString(Of ILocalizationSource)
    fullName: Hybrid.Extensions.EnumerableExtensions.JoinAsString(Of Hybrid.Localization.Sources.ILocalizationSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{Hybrid.Localization.Sources.ILocalizationSource}.Hybrid.Extensions.EnumerableExtensions.WhereIf``1(System.Boolean,System.Func{Hybrid.Localization.Sources.ILocalizationSource,System.Boolean})
  commentId: M:Hybrid.Extensions.EnumerableExtensions.WhereIf``1(System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Func{``0,System.Boolean})
  parent: Hybrid.Extensions.EnumerableExtensions
  definition: Hybrid.Extensions.EnumerableExtensions.WhereIf``1(System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Func{``0,System.Boolean})
  name: WhereIf<ILocalizationSource>(Boolean, Func<ILocalizationSource, Boolean>)
  nameWithType: EnumerableExtensions.WhereIf<ILocalizationSource>(Boolean, Func<ILocalizationSource, Boolean>)
  fullName: Hybrid.Extensions.EnumerableExtensions.WhereIf<Hybrid.Localization.Sources.ILocalizationSource>(System.Boolean, System.Func<Hybrid.Localization.Sources.ILocalizationSource, System.Boolean>)
  nameWithType.vb: EnumerableExtensions.WhereIf(Of ILocalizationSource)(Boolean, Func(Of ILocalizationSource, Boolean))
  fullName.vb: Hybrid.Extensions.EnumerableExtensions.WhereIf(Of Hybrid.Localization.Sources.ILocalizationSource)(System.Boolean, System.Func(Of Hybrid.Localization.Sources.ILocalizationSource, System.Boolean))
  name.vb: WhereIf(Of ILocalizationSource)(Boolean, Func(Of ILocalizationSource, Boolean))
  spec.csharp:
  - uid: Hybrid.Extensions.EnumerableExtensions.WhereIf``1(System.Boolean,System.Func{``0,System.Boolean})
    name: WhereIf<ILocalizationSource>
    nameWithType: EnumerableExtensions.WhereIf<ILocalizationSource>
    fullName: Hybrid.Extensions.EnumerableExtensions.WhereIf<Hybrid.Localization.Sources.ILocalizationSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Localization.Sources.ILocalizationSource
    name: ILocalizationSource
    nameWithType: ILocalizationSource
    fullName: Hybrid.Localization.Sources.ILocalizationSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.EnumerableExtensions.WhereIf``1(System.Boolean,System.Func{``0,System.Boolean})
    name: WhereIf(Of ILocalizationSource)
    nameWithType: EnumerableExtensions.WhereIf(Of ILocalizationSource)
    fullName: Hybrid.Extensions.EnumerableExtensions.WhereIf(Of Hybrid.Localization.Sources.ILocalizationSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Localization.Sources.ILocalizationSource
    name: ILocalizationSource
    nameWithType: ILocalizationSource
    fullName: Hybrid.Localization.Sources.ILocalizationSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{Hybrid.Localization.Sources.ILocalizationSource}.Hybrid.Extensions.EnumerableExtensions.WhereIf``1(System.Boolean,System.Func{Hybrid.Localization.Sources.ILocalizationSource,System.Int32,System.Boolean})
  commentId: M:Hybrid.Extensions.EnumerableExtensions.WhereIf``1(System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Func{``0,System.Int32,System.Boolean})
  parent: Hybrid.Extensions.EnumerableExtensions
  definition: Hybrid.Extensions.EnumerableExtensions.WhereIf``1(System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Func{``0,System.Int32,System.Boolean})
  name: WhereIf<ILocalizationSource>(Boolean, Func<ILocalizationSource, Int32, Boolean>)
  nameWithType: EnumerableExtensions.WhereIf<ILocalizationSource>(Boolean, Func<ILocalizationSource, Int32, Boolean>)
  fullName: Hybrid.Extensions.EnumerableExtensions.WhereIf<Hybrid.Localization.Sources.ILocalizationSource>(System.Boolean, System.Func<Hybrid.Localization.Sources.ILocalizationSource, System.Int32, System.Boolean>)
  nameWithType.vb: EnumerableExtensions.WhereIf(Of ILocalizationSource)(Boolean, Func(Of ILocalizationSource, Int32, Boolean))
  fullName.vb: Hybrid.Extensions.EnumerableExtensions.WhereIf(Of Hybrid.Localization.Sources.ILocalizationSource)(System.Boolean, System.Func(Of Hybrid.Localization.Sources.ILocalizationSource, System.Int32, System.Boolean))
  name.vb: WhereIf(Of ILocalizationSource)(Boolean, Func(Of ILocalizationSource, Int32, Boolean))
  spec.csharp:
  - uid: Hybrid.Extensions.EnumerableExtensions.WhereIf``1(System.Boolean,System.Func{``0,System.Int32,System.Boolean})
    name: WhereIf<ILocalizationSource>
    nameWithType: EnumerableExtensions.WhereIf<ILocalizationSource>
    fullName: Hybrid.Extensions.EnumerableExtensions.WhereIf<Hybrid.Localization.Sources.ILocalizationSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Localization.Sources.ILocalizationSource
    name: ILocalizationSource
    nameWithType: ILocalizationSource
    fullName: Hybrid.Localization.Sources.ILocalizationSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.EnumerableExtensions.WhereIf``1(System.Boolean,System.Func{``0,System.Int32,System.Boolean})
    name: WhereIf(Of ILocalizationSource)
    nameWithType: EnumerableExtensions.WhereIf(Of ILocalizationSource)
    fullName: Hybrid.Extensions.EnumerableExtensions.WhereIf(Of Hybrid.Localization.Sources.ILocalizationSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Localization.Sources.ILocalizationSource
    name: ILocalizationSource
    nameWithType: ILocalizationSource
    fullName: Hybrid.Localization.Sources.ILocalizationSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{Hybrid.Localization.Sources.ILocalizationSource}.Hybrid.Extensions.EnumerableExtensions.Shuffle``1
  commentId: M:Hybrid.Extensions.EnumerableExtensions.Shuffle``1(System.Collections.Generic.IEnumerable{``0})
  parent: Hybrid.Extensions.EnumerableExtensions
  definition: Hybrid.Extensions.EnumerableExtensions.Shuffle``1(System.Collections.Generic.IEnumerable{``0})
  name: Shuffle<ILocalizationSource>()
  nameWithType: EnumerableExtensions.Shuffle<ILocalizationSource>()
  fullName: Hybrid.Extensions.EnumerableExtensions.Shuffle<Hybrid.Localization.Sources.ILocalizationSource>()
  nameWithType.vb: EnumerableExtensions.Shuffle(Of ILocalizationSource)()
  fullName.vb: Hybrid.Extensions.EnumerableExtensions.Shuffle(Of Hybrid.Localization.Sources.ILocalizationSource)()
  name.vb: Shuffle(Of ILocalizationSource)()
  spec.csharp:
  - uid: Hybrid.Extensions.EnumerableExtensions.Shuffle``1
    name: Shuffle<ILocalizationSource>
    nameWithType: EnumerableExtensions.Shuffle<ILocalizationSource>
    fullName: Hybrid.Extensions.EnumerableExtensions.Shuffle<Hybrid.Localization.Sources.ILocalizationSource>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.EnumerableExtensions.Shuffle``1
    name: Shuffle(Of ILocalizationSource)
    nameWithType: EnumerableExtensions.Shuffle(Of ILocalizationSource)
    fullName: Hybrid.Extensions.EnumerableExtensions.Shuffle(Of Hybrid.Localization.Sources.ILocalizationSource)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{Hybrid.Localization.Sources.ILocalizationSource}.Hybrid.Extensions.EnumerableExtensions.ExpandAndToString``1(System.String)
  commentId: M:Hybrid.Extensions.EnumerableExtensions.ExpandAndToString``1(System.Collections.Generic.IEnumerable{``0},System.String)
  parent: Hybrid.Extensions.EnumerableExtensions
  definition: Hybrid.Extensions.EnumerableExtensions.ExpandAndToString``1(System.Collections.Generic.IEnumerable{``0},System.String)
  name: ExpandAndToString<ILocalizationSource>(String)
  nameWithType: EnumerableExtensions.ExpandAndToString<ILocalizationSource>(String)
  fullName: Hybrid.Extensions.EnumerableExtensions.ExpandAndToString<Hybrid.Localization.Sources.ILocalizationSource>(System.String)
  nameWithType.vb: EnumerableExtensions.ExpandAndToString(Of ILocalizationSource)(String)
  fullName.vb: Hybrid.Extensions.EnumerableExtensions.ExpandAndToString(Of Hybrid.Localization.Sources.ILocalizationSource)(System.String)
  name.vb: ExpandAndToString(Of ILocalizationSource)(String)
  spec.csharp:
  - uid: Hybrid.Extensions.EnumerableExtensions.ExpandAndToString``1(System.String)
    name: ExpandAndToString<ILocalizationSource>
    nameWithType: EnumerableExtensions.ExpandAndToString<ILocalizationSource>
    fullName: Hybrid.Extensions.EnumerableExtensions.ExpandAndToString<Hybrid.Localization.Sources.ILocalizationSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.EnumerableExtensions.ExpandAndToString``1(System.String)
    name: ExpandAndToString(Of ILocalizationSource)
    nameWithType: EnumerableExtensions.ExpandAndToString(Of ILocalizationSource)
    fullName: Hybrid.Extensions.EnumerableExtensions.ExpandAndToString(Of Hybrid.Localization.Sources.ILocalizationSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{Hybrid.Localization.Sources.ILocalizationSource}.Hybrid.Extensions.EnumerableExtensions.ExpandAndToString``1(System.Func{Hybrid.Localization.Sources.ILocalizationSource,System.String},System.String)
  commentId: M:Hybrid.Extensions.EnumerableExtensions.ExpandAndToString``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.String)
  parent: Hybrid.Extensions.EnumerableExtensions
  definition: Hybrid.Extensions.EnumerableExtensions.ExpandAndToString``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.String)
  name: ExpandAndToString<ILocalizationSource>(Func<ILocalizationSource, String>, String)
  nameWithType: EnumerableExtensions.ExpandAndToString<ILocalizationSource>(Func<ILocalizationSource, String>, String)
  fullName: Hybrid.Extensions.EnumerableExtensions.ExpandAndToString<Hybrid.Localization.Sources.ILocalizationSource>(System.Func<Hybrid.Localization.Sources.ILocalizationSource, System.String>, System.String)
  nameWithType.vb: EnumerableExtensions.ExpandAndToString(Of ILocalizationSource)(Func(Of ILocalizationSource, String), String)
  fullName.vb: Hybrid.Extensions.EnumerableExtensions.ExpandAndToString(Of Hybrid.Localization.Sources.ILocalizationSource)(System.Func(Of Hybrid.Localization.Sources.ILocalizationSource, System.String), System.String)
  name.vb: ExpandAndToString(Of ILocalizationSource)(Func(Of ILocalizationSource, String), String)
  spec.csharp:
  - uid: Hybrid.Extensions.EnumerableExtensions.ExpandAndToString``1(System.Func{``0,System.String},System.String)
    name: ExpandAndToString<ILocalizationSource>
    nameWithType: EnumerableExtensions.ExpandAndToString<ILocalizationSource>
    fullName: Hybrid.Extensions.EnumerableExtensions.ExpandAndToString<Hybrid.Localization.Sources.ILocalizationSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Localization.Sources.ILocalizationSource
    name: ILocalizationSource
    nameWithType: ILocalizationSource
    fullName: Hybrid.Localization.Sources.ILocalizationSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.EnumerableExtensions.ExpandAndToString``1(System.Func{``0,System.String},System.String)
    name: ExpandAndToString(Of ILocalizationSource)
    nameWithType: EnumerableExtensions.ExpandAndToString(Of ILocalizationSource)
    fullName: Hybrid.Extensions.EnumerableExtensions.ExpandAndToString(Of Hybrid.Localization.Sources.ILocalizationSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Localization.Sources.ILocalizationSource
    name: ILocalizationSource
    nameWithType: ILocalizationSource
    fullName: Hybrid.Localization.Sources.ILocalizationSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{Hybrid.Localization.Sources.ILocalizationSource}.Hybrid.Extensions.EnumerableExtensions.IsEmpty``1
  commentId: M:Hybrid.Extensions.EnumerableExtensions.IsEmpty``1(System.Collections.Generic.IEnumerable{``0})
  parent: Hybrid.Extensions.EnumerableExtensions
  definition: Hybrid.Extensions.EnumerableExtensions.IsEmpty``1(System.Collections.Generic.IEnumerable{``0})
  name: IsEmpty<ILocalizationSource>()
  nameWithType: EnumerableExtensions.IsEmpty<ILocalizationSource>()
  fullName: Hybrid.Extensions.EnumerableExtensions.IsEmpty<Hybrid.Localization.Sources.ILocalizationSource>()
  nameWithType.vb: EnumerableExtensions.IsEmpty(Of ILocalizationSource)()
  fullName.vb: Hybrid.Extensions.EnumerableExtensions.IsEmpty(Of Hybrid.Localization.Sources.ILocalizationSource)()
  name.vb: IsEmpty(Of ILocalizationSource)()
  spec.csharp:
  - uid: Hybrid.Extensions.EnumerableExtensions.IsEmpty``1
    name: IsEmpty<ILocalizationSource>
    nameWithType: EnumerableExtensions.IsEmpty<ILocalizationSource>
    fullName: Hybrid.Extensions.EnumerableExtensions.IsEmpty<Hybrid.Localization.Sources.ILocalizationSource>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.EnumerableExtensions.IsEmpty``1
    name: IsEmpty(Of ILocalizationSource)
    nameWithType: EnumerableExtensions.IsEmpty(Of ILocalizationSource)
    fullName: Hybrid.Extensions.EnumerableExtensions.IsEmpty(Of Hybrid.Localization.Sources.ILocalizationSource)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{Hybrid.Localization.Sources.ILocalizationSource}.Hybrid.Extensions.EnumerableExtensions.WhereIf``1(System.Func{Hybrid.Localization.Sources.ILocalizationSource,System.Boolean},System.Boolean)
  commentId: M:Hybrid.Extensions.EnumerableExtensions.WhereIf``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Boolean)
  parent: Hybrid.Extensions.EnumerableExtensions
  definition: Hybrid.Extensions.EnumerableExtensions.WhereIf``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Boolean)
  name: WhereIf<ILocalizationSource>(Func<ILocalizationSource, Boolean>, Boolean)
  nameWithType: EnumerableExtensions.WhereIf<ILocalizationSource>(Func<ILocalizationSource, Boolean>, Boolean)
  fullName: Hybrid.Extensions.EnumerableExtensions.WhereIf<Hybrid.Localization.Sources.ILocalizationSource>(System.Func<Hybrid.Localization.Sources.ILocalizationSource, System.Boolean>, System.Boolean)
  nameWithType.vb: EnumerableExtensions.WhereIf(Of ILocalizationSource)(Func(Of ILocalizationSource, Boolean), Boolean)
  fullName.vb: Hybrid.Extensions.EnumerableExtensions.WhereIf(Of Hybrid.Localization.Sources.ILocalizationSource)(System.Func(Of Hybrid.Localization.Sources.ILocalizationSource, System.Boolean), System.Boolean)
  name.vb: WhereIf(Of ILocalizationSource)(Func(Of ILocalizationSource, Boolean), Boolean)
  spec.csharp:
  - uid: Hybrid.Extensions.EnumerableExtensions.WhereIf``1(System.Func{``0,System.Boolean},System.Boolean)
    name: WhereIf<ILocalizationSource>
    nameWithType: EnumerableExtensions.WhereIf<ILocalizationSource>
    fullName: Hybrid.Extensions.EnumerableExtensions.WhereIf<Hybrid.Localization.Sources.ILocalizationSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Localization.Sources.ILocalizationSource
    name: ILocalizationSource
    nameWithType: ILocalizationSource
    fullName: Hybrid.Localization.Sources.ILocalizationSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.EnumerableExtensions.WhereIf``1(System.Func{``0,System.Boolean},System.Boolean)
    name: WhereIf(Of ILocalizationSource)
    nameWithType: EnumerableExtensions.WhereIf(Of ILocalizationSource)
    fullName: Hybrid.Extensions.EnumerableExtensions.WhereIf(Of Hybrid.Localization.Sources.ILocalizationSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Localization.Sources.ILocalizationSource
    name: ILocalizationSource
    nameWithType: ILocalizationSource
    fullName: Hybrid.Localization.Sources.ILocalizationSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{Hybrid.Localization.Sources.ILocalizationSource}.Hybrid.Extensions.EnumerableExtensions.DistinctBy``2(System.Func{Hybrid.Localization.Sources.ILocalizationSource,{TKey}})
  commentId: M:Hybrid.Extensions.EnumerableExtensions.DistinctBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  parent: Hybrid.Extensions.EnumerableExtensions
  definition: Hybrid.Extensions.EnumerableExtensions.DistinctBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  name: DistinctBy<ILocalizationSource, TKey>(Func<ILocalizationSource, TKey>)
  nameWithType: EnumerableExtensions.DistinctBy<ILocalizationSource, TKey>(Func<ILocalizationSource, TKey>)
  fullName: Hybrid.Extensions.EnumerableExtensions.DistinctBy<Hybrid.Localization.Sources.ILocalizationSource, TKey>(System.Func<Hybrid.Localization.Sources.ILocalizationSource, TKey>)
  nameWithType.vb: EnumerableExtensions.DistinctBy(Of ILocalizationSource, TKey)(Func(Of ILocalizationSource, TKey))
  fullName.vb: Hybrid.Extensions.EnumerableExtensions.DistinctBy(Of Hybrid.Localization.Sources.ILocalizationSource, TKey)(System.Func(Of Hybrid.Localization.Sources.ILocalizationSource, TKey))
  name.vb: DistinctBy(Of ILocalizationSource, TKey)(Func(Of ILocalizationSource, TKey))
  spec.csharp:
  - uid: Hybrid.Extensions.EnumerableExtensions.DistinctBy``2(System.Func{``0,``1})
    name: DistinctBy<ILocalizationSource, TKey>
    nameWithType: EnumerableExtensions.DistinctBy<ILocalizationSource, TKey>
    fullName: Hybrid.Extensions.EnumerableExtensions.DistinctBy<Hybrid.Localization.Sources.ILocalizationSource, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Localization.Sources.ILocalizationSource
    name: ILocalizationSource
    nameWithType: ILocalizationSource
    fullName: Hybrid.Localization.Sources.ILocalizationSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.EnumerableExtensions.DistinctBy``2(System.Func{``0,``1})
    name: DistinctBy(Of ILocalizationSource, TKey)
    nameWithType: EnumerableExtensions.DistinctBy(Of ILocalizationSource, TKey)
    fullName: Hybrid.Extensions.EnumerableExtensions.DistinctBy(Of Hybrid.Localization.Sources.ILocalizationSource, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Localization.Sources.ILocalizationSource
    name: ILocalizationSource
    nameWithType: ILocalizationSource
    fullName: Hybrid.Localization.Sources.ILocalizationSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{Hybrid.Localization.Sources.ILocalizationSource}.Hybrid.Extensions.EnumerableExtensions.OrderBy``1(System.String,System.ComponentModel.ListSortDirection)
  commentId: M:Hybrid.Extensions.EnumerableExtensions.OrderBy``1(System.Collections.Generic.IEnumerable{``0},System.String,System.ComponentModel.ListSortDirection)
  parent: Hybrid.Extensions.EnumerableExtensions
  definition: Hybrid.Extensions.EnumerableExtensions.OrderBy``1(System.Collections.Generic.IEnumerable{``0},System.String,System.ComponentModel.ListSortDirection)
  name: OrderBy<ILocalizationSource>(String, ListSortDirection)
  nameWithType: EnumerableExtensions.OrderBy<ILocalizationSource>(String, ListSortDirection)
  fullName: Hybrid.Extensions.EnumerableExtensions.OrderBy<Hybrid.Localization.Sources.ILocalizationSource>(System.String, System.ComponentModel.ListSortDirection)
  nameWithType.vb: EnumerableExtensions.OrderBy(Of ILocalizationSource)(String, ListSortDirection)
  fullName.vb: Hybrid.Extensions.EnumerableExtensions.OrderBy(Of Hybrid.Localization.Sources.ILocalizationSource)(System.String, System.ComponentModel.ListSortDirection)
  name.vb: OrderBy(Of ILocalizationSource)(String, ListSortDirection)
  spec.csharp:
  - uid: Hybrid.Extensions.EnumerableExtensions.OrderBy``1(System.String,System.ComponentModel.ListSortDirection)
    name: OrderBy<ILocalizationSource>
    nameWithType: EnumerableExtensions.OrderBy<ILocalizationSource>
    fullName: Hybrid.Extensions.EnumerableExtensions.OrderBy<Hybrid.Localization.Sources.ILocalizationSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.ComponentModel.ListSortDirection
    name: ListSortDirection
    nameWithType: ListSortDirection
    fullName: System.ComponentModel.ListSortDirection
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.EnumerableExtensions.OrderBy``1(System.String,System.ComponentModel.ListSortDirection)
    name: OrderBy(Of ILocalizationSource)
    nameWithType: EnumerableExtensions.OrderBy(Of ILocalizationSource)
    fullName: Hybrid.Extensions.EnumerableExtensions.OrderBy(Of Hybrid.Localization.Sources.ILocalizationSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.ComponentModel.ListSortDirection
    name: ListSortDirection
    nameWithType: ListSortDirection
    fullName: System.ComponentModel.ListSortDirection
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{Hybrid.Localization.Sources.ILocalizationSource}.Hybrid.Extensions.EnumerableExtensions.OrderBy``1(Hybrid.Filter.SortCondition)
  commentId: M:Hybrid.Extensions.EnumerableExtensions.OrderBy``1(System.Collections.Generic.IEnumerable{``0},Hybrid.Filter.SortCondition)
  parent: Hybrid.Extensions.EnumerableExtensions
  definition: Hybrid.Extensions.EnumerableExtensions.OrderBy``1(System.Collections.Generic.IEnumerable{``0},Hybrid.Filter.SortCondition)
  name: OrderBy<ILocalizationSource>(SortCondition)
  nameWithType: EnumerableExtensions.OrderBy<ILocalizationSource>(SortCondition)
  fullName: Hybrid.Extensions.EnumerableExtensions.OrderBy<Hybrid.Localization.Sources.ILocalizationSource>(Hybrid.Filter.SortCondition)
  nameWithType.vb: EnumerableExtensions.OrderBy(Of ILocalizationSource)(SortCondition)
  fullName.vb: Hybrid.Extensions.EnumerableExtensions.OrderBy(Of Hybrid.Localization.Sources.ILocalizationSource)(Hybrid.Filter.SortCondition)
  name.vb: OrderBy(Of ILocalizationSource)(SortCondition)
  spec.csharp:
  - uid: Hybrid.Extensions.EnumerableExtensions.OrderBy``1(Hybrid.Filter.SortCondition)
    name: OrderBy<ILocalizationSource>
    nameWithType: EnumerableExtensions.OrderBy<ILocalizationSource>
    fullName: Hybrid.Extensions.EnumerableExtensions.OrderBy<Hybrid.Localization.Sources.ILocalizationSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Hybrid.Filter.SortCondition
    name: SortCondition
    nameWithType: SortCondition
    fullName: Hybrid.Filter.SortCondition
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.EnumerableExtensions.OrderBy``1(Hybrid.Filter.SortCondition)
    name: OrderBy(Of ILocalizationSource)
    nameWithType: EnumerableExtensions.OrderBy(Of ILocalizationSource)
    fullName: Hybrid.Extensions.EnumerableExtensions.OrderBy(Of Hybrid.Localization.Sources.ILocalizationSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Hybrid.Filter.SortCondition
    name: SortCondition
    nameWithType: SortCondition
    fullName: Hybrid.Filter.SortCondition
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{Hybrid.Localization.Sources.ILocalizationSource}.Hybrid.Extensions.EnumerableExtensions.OrderBy``1(Hybrid.Filter.SortCondition{Hybrid.Localization.Sources.ILocalizationSource})
  commentId: M:Hybrid.Extensions.EnumerableExtensions.OrderBy``1(System.Collections.Generic.IEnumerable{``0},Hybrid.Filter.SortCondition{``0})
  parent: Hybrid.Extensions.EnumerableExtensions
  definition: Hybrid.Extensions.EnumerableExtensions.OrderBy``1(System.Collections.Generic.IEnumerable{``0},Hybrid.Filter.SortCondition{``0})
  name: OrderBy<ILocalizationSource>(SortCondition<ILocalizationSource>)
  nameWithType: EnumerableExtensions.OrderBy<ILocalizationSource>(SortCondition<ILocalizationSource>)
  fullName: Hybrid.Extensions.EnumerableExtensions.OrderBy<Hybrid.Localization.Sources.ILocalizationSource>(Hybrid.Filter.SortCondition<Hybrid.Localization.Sources.ILocalizationSource>)
  nameWithType.vb: EnumerableExtensions.OrderBy(Of ILocalizationSource)(SortCondition(Of ILocalizationSource))
  fullName.vb: Hybrid.Extensions.EnumerableExtensions.OrderBy(Of Hybrid.Localization.Sources.ILocalizationSource)(Hybrid.Filter.SortCondition(Of Hybrid.Localization.Sources.ILocalizationSource))
  name.vb: OrderBy(Of ILocalizationSource)(SortCondition(Of ILocalizationSource))
  spec.csharp:
  - uid: Hybrid.Extensions.EnumerableExtensions.OrderBy``1(Hybrid.Filter.SortCondition{``0})
    name: OrderBy<ILocalizationSource>
    nameWithType: EnumerableExtensions.OrderBy<ILocalizationSource>
    fullName: Hybrid.Extensions.EnumerableExtensions.OrderBy<Hybrid.Localization.Sources.ILocalizationSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Hybrid.Filter.SortCondition`1
    name: SortCondition
    nameWithType: SortCondition
    fullName: Hybrid.Filter.SortCondition
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Localization.Sources.ILocalizationSource
    name: ILocalizationSource
    nameWithType: ILocalizationSource
    fullName: Hybrid.Localization.Sources.ILocalizationSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.EnumerableExtensions.OrderBy``1(Hybrid.Filter.SortCondition{``0})
    name: OrderBy(Of ILocalizationSource)
    nameWithType: EnumerableExtensions.OrderBy(Of ILocalizationSource)
    fullName: Hybrid.Extensions.EnumerableExtensions.OrderBy(Of Hybrid.Localization.Sources.ILocalizationSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Hybrid.Filter.SortCondition`1
    name: SortCondition
    nameWithType: SortCondition
    fullName: Hybrid.Filter.SortCondition
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Localization.Sources.ILocalizationSource
    name: ILocalizationSource
    nameWithType: ILocalizationSource
    fullName: Hybrid.Localization.Sources.ILocalizationSource
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{Hybrid.Localization.Sources.ILocalizationSource}.Hybrid.Extensions.EnumerableExtensions.OrderByPrefixes``1(System.Func{Hybrid.Localization.Sources.ILocalizationSource,System.String},System.String[])
  commentId: M:Hybrid.Extensions.EnumerableExtensions.OrderByPrefixes``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.String[])
  parent: Hybrid.Extensions.EnumerableExtensions
  definition: Hybrid.Extensions.EnumerableExtensions.OrderByPrefixes``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.String[])
  name: OrderByPrefixes<ILocalizationSource>(Func<ILocalizationSource, String>, String[])
  nameWithType: EnumerableExtensions.OrderByPrefixes<ILocalizationSource>(Func<ILocalizationSource, String>, String[])
  fullName: Hybrid.Extensions.EnumerableExtensions.OrderByPrefixes<Hybrid.Localization.Sources.ILocalizationSource>(System.Func<Hybrid.Localization.Sources.ILocalizationSource, System.String>, System.String[])
  nameWithType.vb: EnumerableExtensions.OrderByPrefixes(Of ILocalizationSource)(Func(Of ILocalizationSource, String), String())
  fullName.vb: Hybrid.Extensions.EnumerableExtensions.OrderByPrefixes(Of Hybrid.Localization.Sources.ILocalizationSource)(System.Func(Of Hybrid.Localization.Sources.ILocalizationSource, System.String), System.String())
  name.vb: OrderByPrefixes(Of ILocalizationSource)(Func(Of ILocalizationSource, String), String())
  spec.csharp:
  - uid: Hybrid.Extensions.EnumerableExtensions.OrderByPrefixes``1(System.Func{``0,System.String},System.String[])
    name: OrderByPrefixes<ILocalizationSource>
    nameWithType: EnumerableExtensions.OrderByPrefixes<ILocalizationSource>
    fullName: Hybrid.Extensions.EnumerableExtensions.OrderByPrefixes<Hybrid.Localization.Sources.ILocalizationSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Localization.Sources.ILocalizationSource
    name: ILocalizationSource
    nameWithType: ILocalizationSource
    fullName: Hybrid.Localization.Sources.ILocalizationSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.EnumerableExtensions.OrderByPrefixes``1(System.Func{``0,System.String},System.String[])
    name: OrderByPrefixes(Of ILocalizationSource)
    nameWithType: EnumerableExtensions.OrderByPrefixes(Of ILocalizationSource)
    fullName: Hybrid.Extensions.EnumerableExtensions.OrderByPrefixes(Of Hybrid.Localization.Sources.ILocalizationSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Localization.Sources.ILocalizationSource
    name: ILocalizationSource
    nameWithType: ILocalizationSource
    fullName: Hybrid.Localization.Sources.ILocalizationSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Extensions.ObjectExtensions.CastTo(System.Type)
  commentId: M:Hybrid.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
  parent: Hybrid.Extensions.ObjectExtensions
  definition: Hybrid.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
  name: CastTo(Type)
  nameWithType: ObjectExtensions.CastTo(Type)
  fullName: Hybrid.Extensions.ObjectExtensions.CastTo(System.Type)
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo(System.Type)
    name: CastTo
    nameWithType: ObjectExtensions.CastTo
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo(System.Type)
    name: CastTo
    nameWithType: ObjectExtensions.CastTo
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Extensions.ObjectExtensions.CastTo``1
  commentId: M:Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object)
  parent: Hybrid.Extensions.ObjectExtensions
  definition: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object)
  name: CastTo<T>()
  nameWithType: ObjectExtensions.CastTo<T>()
  fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>()
  nameWithType.vb: ObjectExtensions.CastTo(Of T)()
  fullName.vb: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)()
  name.vb: CastTo(Of T)()
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1
    name: CastTo<T>
    nameWithType: ObjectExtensions.CastTo<T>
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1
    name: CastTo(Of T)
    nameWithType: ObjectExtensions.CastTo(Of T)
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Extensions.ObjectExtensions.CastTo``1({T})
  commentId: M:Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
  parent: Hybrid.Extensions.ObjectExtensions
  definition: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
  name: CastTo<T>(T)
  nameWithType: ObjectExtensions.CastTo<T>(T)
  fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>(T)
  nameWithType.vb: ObjectExtensions.CastTo(Of T)(T)
  fullName.vb: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)(T)
  name.vb: CastTo(Of T)(T)
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(``0)
    name: CastTo<T>
    nameWithType: ObjectExtensions.CastTo<T>
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(``0)
    name: CastTo(Of T)
    nameWithType: ObjectExtensions.CastTo(Of T)
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Localization.Configuration.ILocalizationSourceList.Hybrid.Extensions.ObjectExtensions.IsIn``1(Hybrid.Localization.Configuration.ILocalizationSourceList[])
  commentId: M:Hybrid.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
  parent: Hybrid.Extensions.ObjectExtensions
  definition: Hybrid.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
  name: IsIn<ILocalizationSourceList>(ILocalizationSourceList[])
  nameWithType: ObjectExtensions.IsIn<ILocalizationSourceList>(ILocalizationSourceList[])
  fullName: Hybrid.Extensions.ObjectExtensions.IsIn<Hybrid.Localization.Configuration.ILocalizationSourceList>(Hybrid.Localization.Configuration.ILocalizationSourceList[])
  nameWithType.vb: ObjectExtensions.IsIn(Of ILocalizationSourceList)(ILocalizationSourceList())
  fullName.vb: Hybrid.Extensions.ObjectExtensions.IsIn(Of Hybrid.Localization.Configuration.ILocalizationSourceList)(Hybrid.Localization.Configuration.ILocalizationSourceList())
  name.vb: IsIn(Of ILocalizationSourceList)(ILocalizationSourceList())
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.IsIn``1(``0[])
    name: IsIn<ILocalizationSourceList>
    nameWithType: ObjectExtensions.IsIn<ILocalizationSourceList>
    fullName: Hybrid.Extensions.ObjectExtensions.IsIn<Hybrid.Localization.Configuration.ILocalizationSourceList>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Hybrid.Localization.Configuration.ILocalizationSourceList
    name: ILocalizationSourceList
    nameWithType: ILocalizationSourceList
    fullName: Hybrid.Localization.Configuration.ILocalizationSourceList
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.IsIn``1(``0[])
    name: IsIn(Of ILocalizationSourceList)
    nameWithType: ObjectExtensions.IsIn(Of ILocalizationSourceList)
    fullName: Hybrid.Extensions.ObjectExtensions.IsIn(Of Hybrid.Localization.Configuration.ILocalizationSourceList)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Hybrid.Localization.Configuration.ILocalizationSourceList
    name: ILocalizationSourceList
    nameWithType: ILocalizationSourceList
    fullName: Hybrid.Localization.Configuration.ILocalizationSourceList
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Extensions.ObjectExtensions.ToDynamic
  commentId: M:Hybrid.Extensions.ObjectExtensions.ToDynamic(System.Object)
  parent: Hybrid.Extensions.ObjectExtensions
  definition: Hybrid.Extensions.ObjectExtensions.ToDynamic(System.Object)
  name: ToDynamic()
  nameWithType: ObjectExtensions.ToDynamic()
  fullName: Hybrid.Extensions.ObjectExtensions.ToDynamic()
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.ToDynamic
    name: ToDynamic
    nameWithType: ObjectExtensions.ToDynamic
    fullName: Hybrid.Extensions.ObjectExtensions.ToDynamic
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.ToDynamic
    name: ToDynamic
    nameWithType: ObjectExtensions.ToDynamic
    fullName: Hybrid.Extensions.ObjectExtensions.ToDynamic
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Localization.Configuration.ILocalizationSourceList.Hybrid.Extensions.ObjectExtensions.DeepClone``1
  commentId: M:Hybrid.Extensions.ObjectExtensions.DeepClone``1(``0)
  parent: Hybrid.Extensions.ObjectExtensions
  definition: Hybrid.Extensions.ObjectExtensions.DeepClone``1(``0)
  name: DeepClone<ILocalizationSourceList>()
  nameWithType: ObjectExtensions.DeepClone<ILocalizationSourceList>()
  fullName: Hybrid.Extensions.ObjectExtensions.DeepClone<Hybrid.Localization.Configuration.ILocalizationSourceList>()
  nameWithType.vb: ObjectExtensions.DeepClone(Of ILocalizationSourceList)()
  fullName.vb: Hybrid.Extensions.ObjectExtensions.DeepClone(Of Hybrid.Localization.Configuration.ILocalizationSourceList)()
  name.vb: DeepClone(Of ILocalizationSourceList)()
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.DeepClone``1
    name: DeepClone<ILocalizationSourceList>
    nameWithType: ObjectExtensions.DeepClone<ILocalizationSourceList>
    fullName: Hybrid.Extensions.ObjectExtensions.DeepClone<Hybrid.Localization.Configuration.ILocalizationSourceList>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.DeepClone``1
    name: DeepClone(Of ILocalizationSourceList)
    nameWithType: ObjectExtensions.DeepClone(Of ILocalizationSourceList)
    fullName: Hybrid.Extensions.ObjectExtensions.DeepClone(Of Hybrid.Localization.Configuration.ILocalizationSourceList)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Localization.Configuration.ILocalizationSourceList.Hybrid.Extensions.ParameterCheckExtensions.Required``1(System.Func{Hybrid.Localization.Configuration.ILocalizationSourceList,System.Boolean},System.String)
  commentId: M:Hybrid.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
  parent: Hybrid.Extensions.ParameterCheckExtensions
  definition: Hybrid.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
  name: Required<ILocalizationSourceList>(Func<ILocalizationSourceList, Boolean>, String)
  nameWithType: ParameterCheckExtensions.Required<ILocalizationSourceList>(Func<ILocalizationSourceList, Boolean>, String)
  fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<Hybrid.Localization.Configuration.ILocalizationSourceList>(System.Func<Hybrid.Localization.Configuration.ILocalizationSourceList, System.Boolean>, System.String)
  nameWithType.vb: ParameterCheckExtensions.Required(Of ILocalizationSourceList)(Func(Of ILocalizationSourceList, Boolean), String)
  fullName.vb: Hybrid.Extensions.ParameterCheckExtensions.Required(Of Hybrid.Localization.Configuration.ILocalizationSourceList)(System.Func(Of Hybrid.Localization.Configuration.ILocalizationSourceList, System.Boolean), System.String)
  name.vb: Required(Of ILocalizationSourceList)(Func(Of ILocalizationSourceList, Boolean), String)
  spec.csharp:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``1(System.Func{``0,System.Boolean},System.String)
    name: Required<ILocalizationSourceList>
    nameWithType: ParameterCheckExtensions.Required<ILocalizationSourceList>
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<Hybrid.Localization.Configuration.ILocalizationSourceList>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Localization.Configuration.ILocalizationSourceList
    name: ILocalizationSourceList
    nameWithType: ILocalizationSourceList
    fullName: Hybrid.Localization.Configuration.ILocalizationSourceList
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``1(System.Func{``0,System.Boolean},System.String)
    name: Required(Of ILocalizationSourceList)
    nameWithType: ParameterCheckExtensions.Required(Of ILocalizationSourceList)
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required(Of Hybrid.Localization.Configuration.ILocalizationSourceList)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Localization.Configuration.ILocalizationSourceList
    name: ILocalizationSourceList
    nameWithType: ILocalizationSourceList
    fullName: Hybrid.Localization.Configuration.ILocalizationSourceList
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Localization.Configuration.ILocalizationSourceList.Hybrid.Extensions.ParameterCheckExtensions.Required``2(System.Func{Hybrid.Localization.Configuration.ILocalizationSourceList,System.Boolean},System.String)
  commentId: M:Hybrid.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
  parent: Hybrid.Extensions.ParameterCheckExtensions
  definition: Hybrid.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
  name: Required<ILocalizationSourceList, TException>(Func<ILocalizationSourceList, Boolean>, String)
  nameWithType: ParameterCheckExtensions.Required<ILocalizationSourceList, TException>(Func<ILocalizationSourceList, Boolean>, String)
  fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<Hybrid.Localization.Configuration.ILocalizationSourceList, TException>(System.Func<Hybrid.Localization.Configuration.ILocalizationSourceList, System.Boolean>, System.String)
  nameWithType.vb: ParameterCheckExtensions.Required(Of ILocalizationSourceList, TException)(Func(Of ILocalizationSourceList, Boolean), String)
  fullName.vb: Hybrid.Extensions.ParameterCheckExtensions.Required(Of Hybrid.Localization.Configuration.ILocalizationSourceList, TException)(System.Func(Of Hybrid.Localization.Configuration.ILocalizationSourceList, System.Boolean), System.String)
  name.vb: Required(Of ILocalizationSourceList, TException)(Func(Of ILocalizationSourceList, Boolean), String)
  spec.csharp:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``2(System.Func{``0,System.Boolean},System.String)
    name: Required<ILocalizationSourceList, TException>
    nameWithType: ParameterCheckExtensions.Required<ILocalizationSourceList, TException>
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<Hybrid.Localization.Configuration.ILocalizationSourceList, TException>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Localization.Configuration.ILocalizationSourceList
    name: ILocalizationSourceList
    nameWithType: ILocalizationSourceList
    fullName: Hybrid.Localization.Configuration.ILocalizationSourceList
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``2(System.Func{``0,System.Boolean},System.String)
    name: Required(Of ILocalizationSourceList, TException)
    nameWithType: ParameterCheckExtensions.Required(Of ILocalizationSourceList, TException)
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required(Of Hybrid.Localization.Configuration.ILocalizationSourceList, TException)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Localization.Configuration.ILocalizationSourceList
    name: ILocalizationSourceList
    nameWithType: ILocalizationSourceList
    fullName: Hybrid.Localization.Configuration.ILocalizationSourceList
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Localization.Configuration.ILocalizationSourceList.Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(System.String)
  commentId: M:Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
  parent: Hybrid.Extensions.ParameterCheckExtensions
  definition: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
  name: CheckNotNull<ILocalizationSourceList>(String)
  nameWithType: ParameterCheckExtensions.CheckNotNull<ILocalizationSourceList>(String)
  fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull<Hybrid.Localization.Configuration.ILocalizationSourceList>(System.String)
  nameWithType.vb: ParameterCheckExtensions.CheckNotNull(Of ILocalizationSourceList)(String)
  fullName.vb: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull(Of Hybrid.Localization.Configuration.ILocalizationSourceList)(System.String)
  name.vb: CheckNotNull(Of ILocalizationSourceList)(String)
  spec.csharp:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(System.String)
    name: CheckNotNull<ILocalizationSourceList>
    nameWithType: ParameterCheckExtensions.CheckNotNull<ILocalizationSourceList>
    fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull<Hybrid.Localization.Configuration.ILocalizationSourceList>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(System.String)
    name: CheckNotNull(Of ILocalizationSourceList)
    nameWithType: ParameterCheckExtensions.CheckNotNull(Of ILocalizationSourceList)
    fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull(Of Hybrid.Localization.Configuration.ILocalizationSourceList)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{Hybrid.Localization.Sources.ILocalizationSource}.Hybrid.Extensions.ParameterCheckExtensions.CheckNotNullOrEmpty``1(System.String)
  commentId: M:Hybrid.Extensions.ParameterCheckExtensions.CheckNotNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0},System.String)
  parent: Hybrid.Extensions.ParameterCheckExtensions
  definition: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0},System.String)
  name: CheckNotNullOrEmpty<ILocalizationSource>(String)
  nameWithType: ParameterCheckExtensions.CheckNotNullOrEmpty<ILocalizationSource>(String)
  fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNullOrEmpty<Hybrid.Localization.Sources.ILocalizationSource>(System.String)
  nameWithType.vb: ParameterCheckExtensions.CheckNotNullOrEmpty(Of ILocalizationSource)(String)
  fullName.vb: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNullOrEmpty(Of Hybrid.Localization.Sources.ILocalizationSource)(System.String)
  name.vb: CheckNotNullOrEmpty(Of ILocalizationSource)(String)
  spec.csharp:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNullOrEmpty``1(System.String)
    name: CheckNotNullOrEmpty<ILocalizationSource>
    nameWithType: ParameterCheckExtensions.CheckNotNullOrEmpty<ILocalizationSource>
    fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNullOrEmpty<Hybrid.Localization.Sources.ILocalizationSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNullOrEmpty``1(System.String)
    name: CheckNotNullOrEmpty(Of ILocalizationSource)
    nameWithType: ParameterCheckExtensions.CheckNotNullOrEmpty(Of ILocalizationSource)
    fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNullOrEmpty(Of Hybrid.Localization.Sources.ILocalizationSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Localization.Configuration.ILocalizationSourceList.Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{Hybrid.Localization.Configuration.ILocalizationSourceList},System.Action{System.Exception},System.Action{Hybrid.Localization.Configuration.ILocalizationSourceList})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
  parent: Hybrid.Extensions.TryCatchExtensions
  definition: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
  name: TryCatch<ILocalizationSourceList>(Action<ILocalizationSourceList>, Action<Exception>, Action<ILocalizationSourceList>)
  nameWithType: TryCatchExtensions.TryCatch<ILocalizationSourceList>(Action<ILocalizationSourceList>, Action<Exception>, Action<ILocalizationSourceList>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.Localization.Configuration.ILocalizationSourceList>(System.Action<Hybrid.Localization.Configuration.ILocalizationSourceList>, System.Action<System.Exception>, System.Action<Hybrid.Localization.Configuration.ILocalizationSourceList>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of ILocalizationSourceList)(Action(Of ILocalizationSourceList), Action(Of Exception), Action(Of ILocalizationSourceList))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.Localization.Configuration.ILocalizationSourceList)(System.Action(Of Hybrid.Localization.Configuration.ILocalizationSourceList), System.Action(Of System.Exception), System.Action(Of Hybrid.Localization.Configuration.ILocalizationSourceList))
  name.vb: TryCatch(Of ILocalizationSourceList)(Action(Of ILocalizationSourceList), Action(Of Exception), Action(Of ILocalizationSourceList))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{``0},System.Action{System.Exception},System.Action{``0})
    name: TryCatch<ILocalizationSourceList>
    nameWithType: TryCatchExtensions.TryCatch<ILocalizationSourceList>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.Localization.Configuration.ILocalizationSourceList>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Localization.Configuration.ILocalizationSourceList
    name: ILocalizationSourceList
    nameWithType: ILocalizationSourceList
    fullName: Hybrid.Localization.Configuration.ILocalizationSourceList
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Localization.Configuration.ILocalizationSourceList
    name: ILocalizationSourceList
    nameWithType: ILocalizationSourceList
    fullName: Hybrid.Localization.Configuration.ILocalizationSourceList
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{``0},System.Action{System.Exception},System.Action{``0})
    name: TryCatch(Of ILocalizationSourceList)
    nameWithType: TryCatchExtensions.TryCatch(Of ILocalizationSourceList)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.Localization.Configuration.ILocalizationSourceList)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Localization.Configuration.ILocalizationSourceList
    name: ILocalizationSourceList
    nameWithType: ILocalizationSourceList
    fullName: Hybrid.Localization.Configuration.ILocalizationSourceList
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Localization.Configuration.ILocalizationSourceList
    name: ILocalizationSourceList
    nameWithType: ILocalizationSourceList
    fullName: Hybrid.Localization.Configuration.ILocalizationSourceList
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Localization.Configuration.ILocalizationSourceList.Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{Hybrid.Localization.Configuration.ILocalizationSourceList},System.Action{System.Exception})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
  parent: Hybrid.Extensions.TryCatchExtensions
  definition: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
  name: TryCatch<ILocalizationSourceList>(Action<ILocalizationSourceList>, Action<Exception>)
  nameWithType: TryCatchExtensions.TryCatch<ILocalizationSourceList>(Action<ILocalizationSourceList>, Action<Exception>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.Localization.Configuration.ILocalizationSourceList>(System.Action<Hybrid.Localization.Configuration.ILocalizationSourceList>, System.Action<System.Exception>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of ILocalizationSourceList)(Action(Of ILocalizationSourceList), Action(Of Exception))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.Localization.Configuration.ILocalizationSourceList)(System.Action(Of Hybrid.Localization.Configuration.ILocalizationSourceList), System.Action(Of System.Exception))
  name.vb: TryCatch(Of ILocalizationSourceList)(Action(Of ILocalizationSourceList), Action(Of Exception))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{``0},System.Action{System.Exception})
    name: TryCatch<ILocalizationSourceList>
    nameWithType: TryCatchExtensions.TryCatch<ILocalizationSourceList>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.Localization.Configuration.ILocalizationSourceList>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Localization.Configuration.ILocalizationSourceList
    name: ILocalizationSourceList
    nameWithType: ILocalizationSourceList
    fullName: Hybrid.Localization.Configuration.ILocalizationSourceList
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{``0},System.Action{System.Exception})
    name: TryCatch(Of ILocalizationSourceList)
    nameWithType: TryCatchExtensions.TryCatch(Of ILocalizationSourceList)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.Localization.Configuration.ILocalizationSourceList)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Localization.Configuration.ILocalizationSourceList
    name: ILocalizationSourceList
    nameWithType: ILocalizationSourceList
    fullName: Hybrid.Localization.Configuration.ILocalizationSourceList
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Localization.Configuration.ILocalizationSourceList.Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{Hybrid.Localization.Configuration.ILocalizationSourceList,{TResult}},System.Action{System.Exception},System.Action{Hybrid.Localization.Configuration.ILocalizationSourceList})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
  parent: Hybrid.Extensions.TryCatchExtensions
  definition: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
  name: TryCatch<ILocalizationSourceList, TResult>(Func<ILocalizationSourceList, TResult>, Action<Exception>, Action<ILocalizationSourceList>)
  nameWithType: TryCatchExtensions.TryCatch<ILocalizationSourceList, TResult>(Func<ILocalizationSourceList, TResult>, Action<Exception>, Action<ILocalizationSourceList>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.Localization.Configuration.ILocalizationSourceList, TResult>(System.Func<Hybrid.Localization.Configuration.ILocalizationSourceList, TResult>, System.Action<System.Exception>, System.Action<Hybrid.Localization.Configuration.ILocalizationSourceList>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of ILocalizationSourceList, TResult)(Func(Of ILocalizationSourceList, TResult), Action(Of Exception), Action(Of ILocalizationSourceList))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.Localization.Configuration.ILocalizationSourceList, TResult)(System.Func(Of Hybrid.Localization.Configuration.ILocalizationSourceList, TResult), System.Action(Of System.Exception), System.Action(Of Hybrid.Localization.Configuration.ILocalizationSourceList))
  name.vb: TryCatch(Of ILocalizationSourceList, TResult)(Func(Of ILocalizationSourceList, TResult), Action(Of Exception), Action(Of ILocalizationSourceList))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
    name: TryCatch<ILocalizationSourceList, TResult>
    nameWithType: TryCatchExtensions.TryCatch<ILocalizationSourceList, TResult>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.Localization.Configuration.ILocalizationSourceList, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Localization.Configuration.ILocalizationSourceList
    name: ILocalizationSourceList
    nameWithType: ILocalizationSourceList
    fullName: Hybrid.Localization.Configuration.ILocalizationSourceList
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Localization.Configuration.ILocalizationSourceList
    name: ILocalizationSourceList
    nameWithType: ILocalizationSourceList
    fullName: Hybrid.Localization.Configuration.ILocalizationSourceList
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
    name: TryCatch(Of ILocalizationSourceList, TResult)
    nameWithType: TryCatchExtensions.TryCatch(Of ILocalizationSourceList, TResult)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.Localization.Configuration.ILocalizationSourceList, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Localization.Configuration.ILocalizationSourceList
    name: ILocalizationSourceList
    nameWithType: ILocalizationSourceList
    fullName: Hybrid.Localization.Configuration.ILocalizationSourceList
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Localization.Configuration.ILocalizationSourceList
    name: ILocalizationSourceList
    nameWithType: ILocalizationSourceList
    fullName: Hybrid.Localization.Configuration.ILocalizationSourceList
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Localization.Configuration.ILocalizationSourceList.Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{Hybrid.Localization.Configuration.ILocalizationSourceList,{TResult}},System.Action{System.Exception})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
  parent: Hybrid.Extensions.TryCatchExtensions
  definition: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
  name: TryCatch<ILocalizationSourceList, TResult>(Func<ILocalizationSourceList, TResult>, Action<Exception>)
  nameWithType: TryCatchExtensions.TryCatch<ILocalizationSourceList, TResult>(Func<ILocalizationSourceList, TResult>, Action<Exception>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.Localization.Configuration.ILocalizationSourceList, TResult>(System.Func<Hybrid.Localization.Configuration.ILocalizationSourceList, TResult>, System.Action<System.Exception>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of ILocalizationSourceList, TResult)(Func(Of ILocalizationSourceList, TResult), Action(Of Exception))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.Localization.Configuration.ILocalizationSourceList, TResult)(System.Func(Of Hybrid.Localization.Configuration.ILocalizationSourceList, TResult), System.Action(Of System.Exception))
  name.vb: TryCatch(Of ILocalizationSourceList, TResult)(Func(Of ILocalizationSourceList, TResult), Action(Of Exception))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{``0,``1},System.Action{System.Exception})
    name: TryCatch<ILocalizationSourceList, TResult>
    nameWithType: TryCatchExtensions.TryCatch<ILocalizationSourceList, TResult>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.Localization.Configuration.ILocalizationSourceList, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Localization.Configuration.ILocalizationSourceList
    name: ILocalizationSourceList
    nameWithType: ILocalizationSourceList
    fullName: Hybrid.Localization.Configuration.ILocalizationSourceList
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{``0,``1},System.Action{System.Exception})
    name: TryCatch(Of ILocalizationSourceList, TResult)
    nameWithType: TryCatchExtensions.TryCatch(Of ILocalizationSourceList, TResult)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.Localization.Configuration.ILocalizationSourceList, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Localization.Configuration.ILocalizationSourceList
    name: ILocalizationSourceList
    nameWithType: ILocalizationSourceList
    fullName: Hybrid.Localization.Configuration.ILocalizationSourceList
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Localization.Configuration.ILocalizationSourceList.Hybrid.Extensions.TryCatchExtensions.TryFinally``1(System.Action{Hybrid.Localization.Configuration.ILocalizationSourceList},System.Action{Hybrid.Localization.Configuration.ILocalizationSourceList})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
  parent: Hybrid.Extensions.TryCatchExtensions
  definition: Hybrid.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
  name: TryFinally<ILocalizationSourceList>(Action<ILocalizationSourceList>, Action<ILocalizationSourceList>)
  nameWithType: TryCatchExtensions.TryFinally<ILocalizationSourceList>(Action<ILocalizationSourceList>, Action<ILocalizationSourceList>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryFinally<Hybrid.Localization.Configuration.ILocalizationSourceList>(System.Action<Hybrid.Localization.Configuration.ILocalizationSourceList>, System.Action<Hybrid.Localization.Configuration.ILocalizationSourceList>)
  nameWithType.vb: TryCatchExtensions.TryFinally(Of ILocalizationSourceList)(Action(Of ILocalizationSourceList), Action(Of ILocalizationSourceList))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryFinally(Of Hybrid.Localization.Configuration.ILocalizationSourceList)(System.Action(Of Hybrid.Localization.Configuration.ILocalizationSourceList), System.Action(Of Hybrid.Localization.Configuration.ILocalizationSourceList))
  name.vb: TryFinally(Of ILocalizationSourceList)(Action(Of ILocalizationSourceList), Action(Of ILocalizationSourceList))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryFinally``1(System.Action{``0},System.Action{``0})
    name: TryFinally<ILocalizationSourceList>
    nameWithType: TryCatchExtensions.TryFinally<ILocalizationSourceList>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryFinally<Hybrid.Localization.Configuration.ILocalizationSourceList>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Localization.Configuration.ILocalizationSourceList
    name: ILocalizationSourceList
    nameWithType: ILocalizationSourceList
    fullName: Hybrid.Localization.Configuration.ILocalizationSourceList
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Localization.Configuration.ILocalizationSourceList
    name: ILocalizationSourceList
    nameWithType: ILocalizationSourceList
    fullName: Hybrid.Localization.Configuration.ILocalizationSourceList
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryFinally``1(System.Action{``0},System.Action{``0})
    name: TryFinally(Of ILocalizationSourceList)
    nameWithType: TryCatchExtensions.TryFinally(Of ILocalizationSourceList)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryFinally(Of Hybrid.Localization.Configuration.ILocalizationSourceList)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Localization.Configuration.ILocalizationSourceList
    name: ILocalizationSourceList
    nameWithType: ILocalizationSourceList
    fullName: Hybrid.Localization.Configuration.ILocalizationSourceList
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Localization.Configuration.ILocalizationSourceList
    name: ILocalizationSourceList
    nameWithType: ILocalizationSourceList
    fullName: Hybrid.Localization.Configuration.ILocalizationSourceList
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Json.JsonExtensions.ToJsonString(System.Boolean,System.Boolean)
  commentId: M:Hybrid.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
  parent: Hybrid.Json.JsonExtensions
  definition: Hybrid.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
  name: ToJsonString(Boolean, Boolean)
  nameWithType: JsonExtensions.ToJsonString(Boolean, Boolean)
  fullName: Hybrid.Json.JsonExtensions.ToJsonString(System.Boolean, System.Boolean)
  spec.csharp:
  - uid: Hybrid.Json.JsonExtensions.ToJsonString(System.Boolean,System.Boolean)
    name: ToJsonString
    nameWithType: JsonExtensions.ToJsonString
    fullName: Hybrid.Json.JsonExtensions.ToJsonString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Json.JsonExtensions.ToJsonString(System.Boolean,System.Boolean)
    name: ToJsonString
    nameWithType: JsonExtensions.ToJsonString
    fullName: Hybrid.Json.JsonExtensions.ToJsonString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Mapping.MapperExtensions.MapTo``1
  commentId: M:Hybrid.Mapping.MapperExtensions.MapTo``1(System.Object)
  parent: Hybrid.Mapping.MapperExtensions
  definition: Hybrid.Mapping.MapperExtensions.MapTo``1(System.Object)
  name: MapTo<TTarget>()
  nameWithType: MapperExtensions.MapTo<TTarget>()
  fullName: Hybrid.Mapping.MapperExtensions.MapTo<TTarget>()
  nameWithType.vb: MapperExtensions.MapTo(Of TTarget)()
  fullName.vb: Hybrid.Mapping.MapperExtensions.MapTo(Of TTarget)()
  name.vb: MapTo(Of TTarget)()
  spec.csharp:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``1
    name: MapTo<TTarget>
    nameWithType: MapperExtensions.MapTo<TTarget>
    fullName: Hybrid.Mapping.MapperExtensions.MapTo<TTarget>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``1
    name: MapTo(Of TTarget)
    nameWithType: MapperExtensions.MapTo(Of TTarget)
    fullName: Hybrid.Mapping.MapperExtensions.MapTo(Of TTarget)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Localization.Configuration.ILocalizationSourceList.Hybrid.Mapping.MapperExtensions.MapTo``2({TTarget})
  commentId: M:Hybrid.Mapping.MapperExtensions.MapTo``2(``0,``1)
  parent: Hybrid.Mapping.MapperExtensions
  definition: Hybrid.Mapping.MapperExtensions.MapTo``2(``0,``1)
  name: MapTo<ILocalizationSourceList, TTarget>(TTarget)
  nameWithType: MapperExtensions.MapTo<ILocalizationSourceList, TTarget>(TTarget)
  fullName: Hybrid.Mapping.MapperExtensions.MapTo<Hybrid.Localization.Configuration.ILocalizationSourceList, TTarget>(TTarget)
  nameWithType.vb: MapperExtensions.MapTo(Of ILocalizationSourceList, TTarget)(TTarget)
  fullName.vb: Hybrid.Mapping.MapperExtensions.MapTo(Of Hybrid.Localization.Configuration.ILocalizationSourceList, TTarget)(TTarget)
  name.vb: MapTo(Of ILocalizationSourceList, TTarget)(TTarget)
  spec.csharp:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``2(``1)
    name: MapTo<ILocalizationSourceList, TTarget>
    nameWithType: MapperExtensions.MapTo<ILocalizationSourceList, TTarget>
    fullName: Hybrid.Mapping.MapperExtensions.MapTo<Hybrid.Localization.Configuration.ILocalizationSourceList, TTarget>
  - name: (
    nameWithType: (
    fullName: (
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``2(``1)
    name: MapTo(Of ILocalizationSourceList, TTarget)
    nameWithType: MapperExtensions.MapTo(Of ILocalizationSourceList, TTarget)
    fullName: Hybrid.Mapping.MapperExtensions.MapTo(Of Hybrid.Localization.Configuration.ILocalizationSourceList, TTarget)
  - name: (
    nameWithType: (
    fullName: (
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Reflection.LockExtensions.Locking(System.Action)
  commentId: M:Hybrid.Reflection.LockExtensions.Locking(System.Object,System.Action)
  parent: Hybrid.Reflection.LockExtensions
  definition: Hybrid.Reflection.LockExtensions.Locking(System.Object,System.Action)
  name: Locking(Action)
  nameWithType: LockExtensions.Locking(Action)
  fullName: Hybrid.Reflection.LockExtensions.Locking(System.Action)
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking(System.Action)
    name: Locking
    nameWithType: LockExtensions.Locking
    fullName: Hybrid.Reflection.LockExtensions.Locking
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking(System.Action)
    name: Locking
    nameWithType: LockExtensions.Locking
    fullName: Hybrid.Reflection.LockExtensions.Locking
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Localization.Configuration.ILocalizationSourceList.Hybrid.Reflection.LockExtensions.Locking``1(System.Action{Hybrid.Localization.Configuration.ILocalizationSourceList})
  commentId: M:Hybrid.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
  parent: Hybrid.Reflection.LockExtensions
  definition: Hybrid.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
  name: Locking<ILocalizationSourceList>(Action<ILocalizationSourceList>)
  nameWithType: LockExtensions.Locking<ILocalizationSourceList>(Action<ILocalizationSourceList>)
  fullName: Hybrid.Reflection.LockExtensions.Locking<Hybrid.Localization.Configuration.ILocalizationSourceList>(System.Action<Hybrid.Localization.Configuration.ILocalizationSourceList>)
  nameWithType.vb: LockExtensions.Locking(Of ILocalizationSourceList)(Action(Of ILocalizationSourceList))
  fullName.vb: Hybrid.Reflection.LockExtensions.Locking(Of Hybrid.Localization.Configuration.ILocalizationSourceList)(System.Action(Of Hybrid.Localization.Configuration.ILocalizationSourceList))
  name.vb: Locking(Of ILocalizationSourceList)(Action(Of ILocalizationSourceList))
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(System.Action{``0})
    name: Locking<ILocalizationSourceList>
    nameWithType: LockExtensions.Locking<ILocalizationSourceList>
    fullName: Hybrid.Reflection.LockExtensions.Locking<Hybrid.Localization.Configuration.ILocalizationSourceList>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Localization.Configuration.ILocalizationSourceList
    name: ILocalizationSourceList
    nameWithType: ILocalizationSourceList
    fullName: Hybrid.Localization.Configuration.ILocalizationSourceList
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(System.Action{``0})
    name: Locking(Of ILocalizationSourceList)
    nameWithType: LockExtensions.Locking(Of ILocalizationSourceList)
    fullName: Hybrid.Reflection.LockExtensions.Locking(Of Hybrid.Localization.Configuration.ILocalizationSourceList)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Localization.Configuration.ILocalizationSourceList
    name: ILocalizationSourceList
    nameWithType: ILocalizationSourceList
    fullName: Hybrid.Localization.Configuration.ILocalizationSourceList
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Reflection.LockExtensions.Locking``1(System.Func{{TResult}})
  commentId: M:Hybrid.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
  parent: Hybrid.Reflection.LockExtensions
  definition: Hybrid.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
  name: Locking<TResult>(Func<TResult>)
  nameWithType: LockExtensions.Locking<TResult>(Func<TResult>)
  fullName: Hybrid.Reflection.LockExtensions.Locking<TResult>(System.Func<TResult>)
  nameWithType.vb: LockExtensions.Locking(Of TResult)(Func(Of TResult))
  fullName.vb: Hybrid.Reflection.LockExtensions.Locking(Of TResult)(System.Func(Of TResult))
  name.vb: Locking(Of TResult)(Func(Of TResult))
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(System.Func{``0})
    name: Locking<TResult>
    nameWithType: LockExtensions.Locking<TResult>
    fullName: Hybrid.Reflection.LockExtensions.Locking<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(System.Func{``0})
    name: Locking(Of TResult)
    nameWithType: LockExtensions.Locking(Of TResult)
    fullName: Hybrid.Reflection.LockExtensions.Locking(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Localization.Configuration.ILocalizationSourceList.Hybrid.Reflection.LockExtensions.Locking``2(System.Func{Hybrid.Localization.Configuration.ILocalizationSourceList,{TResult}})
  commentId: M:Hybrid.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
  parent: Hybrid.Reflection.LockExtensions
  definition: Hybrid.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
  name: Locking<ILocalizationSourceList, TResult>(Func<ILocalizationSourceList, TResult>)
  nameWithType: LockExtensions.Locking<ILocalizationSourceList, TResult>(Func<ILocalizationSourceList, TResult>)
  fullName: Hybrid.Reflection.LockExtensions.Locking<Hybrid.Localization.Configuration.ILocalizationSourceList, TResult>(System.Func<Hybrid.Localization.Configuration.ILocalizationSourceList, TResult>)
  nameWithType.vb: LockExtensions.Locking(Of ILocalizationSourceList, TResult)(Func(Of ILocalizationSourceList, TResult))
  fullName.vb: Hybrid.Reflection.LockExtensions.Locking(Of Hybrid.Localization.Configuration.ILocalizationSourceList, TResult)(System.Func(Of Hybrid.Localization.Configuration.ILocalizationSourceList, TResult))
  name.vb: Locking(Of ILocalizationSourceList, TResult)(Func(Of ILocalizationSourceList, TResult))
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking``2(System.Func{``0,``1})
    name: Locking<ILocalizationSourceList, TResult>
    nameWithType: LockExtensions.Locking<ILocalizationSourceList, TResult>
    fullName: Hybrid.Reflection.LockExtensions.Locking<Hybrid.Localization.Configuration.ILocalizationSourceList, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Localization.Configuration.ILocalizationSourceList
    name: ILocalizationSourceList
    nameWithType: ILocalizationSourceList
    fullName: Hybrid.Localization.Configuration.ILocalizationSourceList
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking``2(System.Func{``0,``1})
    name: Locking(Of ILocalizationSourceList, TResult)
    nameWithType: LockExtensions.Locking(Of ILocalizationSourceList, TResult)
    fullName: Hybrid.Reflection.LockExtensions.Locking(Of Hybrid.Localization.Configuration.ILocalizationSourceList, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Localization.Configuration.ILocalizationSourceList
    name: ILocalizationSourceList
    nameWithType: ILocalizationSourceList
    fullName: Hybrid.Localization.Configuration.ILocalizationSourceList
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Localization.Configuration.ILocalizationSourceList.Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2
  commentId: M:Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2(``0)
  parent: Hybrid.Domain.Entities.EntityExtensions
  definition: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2(``0)
  name: CheckICreatedTime<ILocalizationSourceList, TKey>()
  nameWithType: EntityExtensions.CheckICreatedTime<ILocalizationSourceList, TKey>()
  fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime<Hybrid.Localization.Configuration.ILocalizationSourceList, TKey>()
  nameWithType.vb: EntityExtensions.CheckICreatedTime(Of ILocalizationSourceList, TKey)()
  fullName.vb: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime(Of Hybrid.Localization.Configuration.ILocalizationSourceList, TKey)()
  name.vb: CheckICreatedTime(Of ILocalizationSourceList, TKey)()
  spec.csharp:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2
    name: CheckICreatedTime<ILocalizationSourceList, TKey>
    nameWithType: EntityExtensions.CheckICreatedTime<ILocalizationSourceList, TKey>
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime<Hybrid.Localization.Configuration.ILocalizationSourceList, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2
    name: CheckICreatedTime(Of ILocalizationSourceList, TKey)
    nameWithType: EntityExtensions.CheckICreatedTime(Of ILocalizationSourceList, TKey)
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime(Of Hybrid.Localization.Configuration.ILocalizationSourceList, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Localization.Configuration.ILocalizationSourceList.Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(System.Security.Principal.IPrincipal)
  commentId: M:Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
  parent: Hybrid.Domain.Entities.EntityExtensions
  definition: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
  name: CheckICreationAudited<ILocalizationSourceList, TKey, TUserKey>(IPrincipal)
  nameWithType: EntityExtensions.CheckICreationAudited<ILocalizationSourceList, TKey, TUserKey>(IPrincipal)
  fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited<Hybrid.Localization.Configuration.ILocalizationSourceList, TKey, TUserKey>(System.Security.Principal.IPrincipal)
  nameWithType.vb: EntityExtensions.CheckICreationAudited(Of ILocalizationSourceList, TKey, TUserKey)(IPrincipal)
  fullName.vb: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited(Of Hybrid.Localization.Configuration.ILocalizationSourceList, TKey, TUserKey)(System.Security.Principal.IPrincipal)
  name.vb: CheckICreationAudited(Of ILocalizationSourceList, TKey, TUserKey)(IPrincipal)
  spec.csharp:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(System.Security.Principal.IPrincipal)
    name: CheckICreationAudited<ILocalizationSourceList, TKey, TUserKey>
    nameWithType: EntityExtensions.CheckICreationAudited<ILocalizationSourceList, TKey, TUserKey>
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited<Hybrid.Localization.Configuration.ILocalizationSourceList, TKey, TUserKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(System.Security.Principal.IPrincipal)
    name: CheckICreationAudited(Of ILocalizationSourceList, TKey, TUserKey)
    nameWithType: EntityExtensions.CheckICreationAudited(Of ILocalizationSourceList, TKey, TUserKey)
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited(Of Hybrid.Localization.Configuration.ILocalizationSourceList, TKey, TUserKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Localization.Configuration.ILocalizationSourceList.Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(System.Security.Principal.IPrincipal)
  commentId: M:Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
  parent: Hybrid.Domain.Entities.EntityExtensions
  definition: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
  name: CheckIUpdateAudited<ILocalizationSourceList, TKey, TUserKey>(IPrincipal)
  nameWithType: EntityExtensions.CheckIUpdateAudited<ILocalizationSourceList, TKey, TUserKey>(IPrincipal)
  fullName: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited<Hybrid.Localization.Configuration.ILocalizationSourceList, TKey, TUserKey>(System.Security.Principal.IPrincipal)
  nameWithType.vb: EntityExtensions.CheckIUpdateAudited(Of ILocalizationSourceList, TKey, TUserKey)(IPrincipal)
  fullName.vb: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited(Of Hybrid.Localization.Configuration.ILocalizationSourceList, TKey, TUserKey)(System.Security.Principal.IPrincipal)
  name.vb: CheckIUpdateAudited(Of ILocalizationSourceList, TKey, TUserKey)(IPrincipal)
  spec.csharp:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(System.Security.Principal.IPrincipal)
    name: CheckIUpdateAudited<ILocalizationSourceList, TKey, TUserKey>
    nameWithType: EntityExtensions.CheckIUpdateAudited<ILocalizationSourceList, TKey, TUserKey>
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited<Hybrid.Localization.Configuration.ILocalizationSourceList, TKey, TUserKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(System.Security.Principal.IPrincipal)
    name: CheckIUpdateAudited(Of ILocalizationSourceList, TKey, TUserKey)
    nameWithType: EntityExtensions.CheckIUpdateAudited(Of ILocalizationSourceList, TKey, TUserKey)
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited(Of Hybrid.Localization.Configuration.ILocalizationSourceList, TKey, TUserKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{Hybrid.Localization.Sources.ILocalizationSource}.IdentityServer4.Extensions.IEnumerableExtensions.IsNullOrEmpty``1
  commentId: M:IdentityServer4.Extensions.IEnumerableExtensions.IsNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})
  parent: IdentityServer4.Extensions.IEnumerableExtensions
  definition: IdentityServer4.Extensions.IEnumerableExtensions.IsNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})
  name: IsNullOrEmpty<ILocalizationSource>()
  nameWithType: IEnumerableExtensions.IsNullOrEmpty<ILocalizationSource>()
  fullName: IdentityServer4.Extensions.IEnumerableExtensions.IsNullOrEmpty<Hybrid.Localization.Sources.ILocalizationSource>()
  nameWithType.vb: IEnumerableExtensions.IsNullOrEmpty(Of ILocalizationSource)()
  fullName.vb: IdentityServer4.Extensions.IEnumerableExtensions.IsNullOrEmpty(Of Hybrid.Localization.Sources.ILocalizationSource)()
  name.vb: IsNullOrEmpty(Of ILocalizationSource)()
  spec.csharp:
  - uid: IdentityServer4.Extensions.IEnumerableExtensions.IsNullOrEmpty``1
    name: IsNullOrEmpty<ILocalizationSource>
    nameWithType: IEnumerableExtensions.IsNullOrEmpty<ILocalizationSource>
    fullName: IdentityServer4.Extensions.IEnumerableExtensions.IsNullOrEmpty<Hybrid.Localization.Sources.ILocalizationSource>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: IdentityServer4.Extensions.IEnumerableExtensions.IsNullOrEmpty``1
    name: IsNullOrEmpty(Of ILocalizationSource)
    nameWithType: IEnumerableExtensions.IsNullOrEmpty(Of ILocalizationSource)
    fullName: IdentityServer4.Extensions.IEnumerableExtensions.IsNullOrEmpty(Of Hybrid.Localization.Sources.ILocalizationSource)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{Hybrid.Localization.Sources.ILocalizationSource}.IdentityServer4.Extensions.IEnumerableExtensions.HasDuplicates``2(System.Func{Hybrid.Localization.Sources.ILocalizationSource,{TProp}})
  commentId: M:IdentityServer4.Extensions.IEnumerableExtensions.HasDuplicates``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  parent: IdentityServer4.Extensions.IEnumerableExtensions
  definition: IdentityServer4.Extensions.IEnumerableExtensions.HasDuplicates``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  name: HasDuplicates<ILocalizationSource, TProp>(Func<ILocalizationSource, TProp>)
  nameWithType: IEnumerableExtensions.HasDuplicates<ILocalizationSource, TProp>(Func<ILocalizationSource, TProp>)
  fullName: IdentityServer4.Extensions.IEnumerableExtensions.HasDuplicates<Hybrid.Localization.Sources.ILocalizationSource, TProp>(System.Func<Hybrid.Localization.Sources.ILocalizationSource, TProp>)
  nameWithType.vb: IEnumerableExtensions.HasDuplicates(Of ILocalizationSource, TProp)(Func(Of ILocalizationSource, TProp))
  fullName.vb: IdentityServer4.Extensions.IEnumerableExtensions.HasDuplicates(Of Hybrid.Localization.Sources.ILocalizationSource, TProp)(System.Func(Of Hybrid.Localization.Sources.ILocalizationSource, TProp))
  name.vb: HasDuplicates(Of ILocalizationSource, TProp)(Func(Of ILocalizationSource, TProp))
  spec.csharp:
  - uid: IdentityServer4.Extensions.IEnumerableExtensions.HasDuplicates``2(System.Func{``0,``1})
    name: HasDuplicates<ILocalizationSource, TProp>
    nameWithType: IEnumerableExtensions.HasDuplicates<ILocalizationSource, TProp>
    fullName: IdentityServer4.Extensions.IEnumerableExtensions.HasDuplicates<Hybrid.Localization.Sources.ILocalizationSource, TProp>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Localization.Sources.ILocalizationSource
    name: ILocalizationSource
    nameWithType: ILocalizationSource
    fullName: Hybrid.Localization.Sources.ILocalizationSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TProp
    nameWithType: TProp
    fullName: TProp
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: IdentityServer4.Extensions.IEnumerableExtensions.HasDuplicates``2(System.Func{``0,``1})
    name: HasDuplicates(Of ILocalizationSource, TProp)
    nameWithType: IEnumerableExtensions.HasDuplicates(Of ILocalizationSource, TProp)
    fullName: IdentityServer4.Extensions.IEnumerableExtensions.HasDuplicates(Of Hybrid.Localization.Sources.ILocalizationSource, TProp)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Localization.Sources.ILocalizationSource
    name: ILocalizationSource
    nameWithType: ILocalizationSource
    fullName: Hybrid.Localization.Sources.ILocalizationSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TProp
    nameWithType: TProp
    fullName: TProp
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Localization.Sources
  commentId: N:Hybrid.Localization.Sources
  name: Hybrid.Localization.Sources
  nameWithType: Hybrid.Localization.Sources
  fullName: Hybrid.Localization.Sources
- uid: System.Collections.Generic.IList`1.IndexOf(`0)
  commentId: M:System.Collections.Generic.IList`1.IndexOf(`0)
  isExternal: true
  name: IndexOf(T)
  nameWithType: IList<T>.IndexOf(T)
  fullName: System.Collections.Generic.IList<T>.IndexOf(T)
  nameWithType.vb: IList(Of T).IndexOf(T)
  fullName.vb: System.Collections.Generic.IList(Of T).IndexOf(T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.IndexOf(`0)
    name: IndexOf
    nameWithType: IList<T>.IndexOf
    fullName: System.Collections.Generic.IList<T>.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.IndexOf(`0)
    name: IndexOf
    nameWithType: IList(Of T).IndexOf
    fullName: System.Collections.Generic.IList(Of T).IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList{Hybrid.Localization.Sources.ILocalizationSource}
  commentId: T:System.Collections.Generic.IList{Hybrid.Localization.Sources.ILocalizationSource}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<ILocalizationSource>
  nameWithType: IList<ILocalizationSource>
  fullName: System.Collections.Generic.IList<Hybrid.Localization.Sources.ILocalizationSource>
  nameWithType.vb: IList(Of ILocalizationSource)
  fullName.vb: System.Collections.Generic.IList(Of Hybrid.Localization.Sources.ILocalizationSource)
  name.vb: IList(Of ILocalizationSource)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Localization.Sources.ILocalizationSource
    name: ILocalizationSource
    nameWithType: ILocalizationSource
    fullName: Hybrid.Localization.Sources.ILocalizationSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Localization.Sources.ILocalizationSource
    name: ILocalizationSource
    nameWithType: ILocalizationSource
    fullName: Hybrid.Localization.Sources.ILocalizationSource
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
  commentId: M:System.Collections.Generic.IList`1.Insert(System.Int32,`0)
  isExternal: true
  name: Insert(Int32, T)
  nameWithType: IList<T>.Insert(Int32, T)
  fullName: System.Collections.Generic.IList<T>.Insert(System.Int32, T)
  nameWithType.vb: IList(Of T).Insert(Int32, T)
  fullName.vb: System.Collections.Generic.IList(Of T).Insert(System.Int32, T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
    name: Insert
    nameWithType: IList<T>.Insert
    fullName: System.Collections.Generic.IList<T>.Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
    name: Insert
    nameWithType: IList(Of T).Insert
    fullName: System.Collections.Generic.IList(Of T).Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
  commentId: M:System.Collections.Generic.IList`1.RemoveAt(System.Int32)
  isExternal: true
  name: RemoveAt(Int32)
  nameWithType: IList<T>.RemoveAt(Int32)
  fullName: System.Collections.Generic.IList<T>.RemoveAt(System.Int32)
  nameWithType.vb: IList(Of T).RemoveAt(Int32)
  fullName.vb: System.Collections.Generic.IList(Of T).RemoveAt(System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: IList<T>.RemoveAt
    fullName: System.Collections.Generic.IList<T>.RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: IList(Of T).RemoveAt
    fullName: System.Collections.Generic.IList(Of T).RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1.Item(System.Int32)
  commentId: P:System.Collections.Generic.IList`1.Item(System.Int32)
  isExternal: true
  name: Item[Int32]
  nameWithType: IList<T>.Item[Int32]
  fullName: System.Collections.Generic.IList<T>.Item[System.Int32]
  nameWithType.vb: IList(Of T).Item(Int32)
  fullName.vb: System.Collections.Generic.IList(Of T).Item(System.Int32)
  name.vb: Item(Int32)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.Item(System.Int32)
    name: Item
    nameWithType: IList<T>.Item
    fullName: System.Collections.Generic.IList<T>.Item
    isExternal: true
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Generic.IList`1.Item(System.Int32)
    name: Item
    nameWithType: IList(Of T).Item
    fullName: System.Collections.Generic.IList(Of T).Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Add(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Add(`0)
  isExternal: true
  name: Add(T)
  nameWithType: ICollection<T>.Add(T)
  fullName: System.Collections.Generic.ICollection<T>.Add(T)
  nameWithType.vb: ICollection(Of T).Add(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Add(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection<T>.Add
    fullName: System.Collections.Generic.ICollection<T>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection(Of T).Add
    fullName: System.Collections.Generic.ICollection(Of T).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection{Hybrid.Localization.Sources.ILocalizationSource}
  commentId: T:System.Collections.Generic.ICollection{Hybrid.Localization.Sources.ILocalizationSource}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<ILocalizationSource>
  nameWithType: ICollection<ILocalizationSource>
  fullName: System.Collections.Generic.ICollection<Hybrid.Localization.Sources.ILocalizationSource>
  nameWithType.vb: ICollection(Of ILocalizationSource)
  fullName.vb: System.Collections.Generic.ICollection(Of Hybrid.Localization.Sources.ILocalizationSource)
  name.vb: ICollection(Of ILocalizationSource)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Localization.Sources.ILocalizationSource
    name: ILocalizationSource
    nameWithType: ILocalizationSource
    fullName: Hybrid.Localization.Sources.ILocalizationSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Localization.Sources.ILocalizationSource
    name: ILocalizationSource
    nameWithType: ILocalizationSource
    fullName: Hybrid.Localization.Sources.ILocalizationSource
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Clear
  commentId: M:System.Collections.Generic.ICollection`1.Clear
  isExternal: true
  name: Clear()
  nameWithType: ICollection<T>.Clear()
  fullName: System.Collections.Generic.ICollection<T>.Clear()
  nameWithType.vb: ICollection(Of T).Clear()
  fullName.vb: System.Collections.Generic.ICollection(Of T).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection<T>.Clear
    fullName: System.Collections.Generic.ICollection<T>.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection(Of T).Clear
    fullName: System.Collections.Generic.ICollection(Of T).Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Contains(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Contains(`0)
  isExternal: true
  name: Contains(T)
  nameWithType: ICollection<T>.Contains(T)
  fullName: System.Collections.Generic.ICollection<T>.Contains(T)
  nameWithType.vb: ICollection(Of T).Contains(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Contains(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection<T>.Contains
    fullName: System.Collections.Generic.ICollection<T>.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection(Of T).Contains
    fullName: System.Collections.Generic.ICollection(Of T).Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  commentId: M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  isExternal: true
  name: CopyTo(T[], Int32)
  nameWithType: ICollection<T>.CopyTo(T[], Int32)
  fullName: System.Collections.Generic.ICollection<T>.CopyTo(T[], System.Int32)
  nameWithType.vb: ICollection(Of T).CopyTo(T(), Int32)
  fullName.vb: System.Collections.Generic.ICollection(Of T).CopyTo(T(), System.Int32)
  name.vb: CopyTo(T(), Int32)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection<T>.CopyTo
    fullName: System.Collections.Generic.ICollection<T>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection(Of T).CopyTo
    fullName: System.Collections.Generic.ICollection(Of T).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Remove(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Remove(`0)
  isExternal: true
  name: Remove(T)
  nameWithType: ICollection<T>.Remove(T)
  fullName: System.Collections.Generic.ICollection<T>.Remove(T)
  nameWithType.vb: ICollection(Of T).Remove(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Remove(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection<T>.Remove
    fullName: System.Collections.Generic.ICollection<T>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection(Of T).Remove
    fullName: System.Collections.Generic.ICollection(Of T).Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Count
  commentId: P:System.Collections.Generic.ICollection`1.Count
  isExternal: true
  name: Count
  nameWithType: ICollection<T>.Count
  fullName: System.Collections.Generic.ICollection<T>.Count
  nameWithType.vb: ICollection(Of T).Count
  fullName.vb: System.Collections.Generic.ICollection(Of T).Count
- uid: System.Collections.Generic.ICollection`1.IsReadOnly
  commentId: P:System.Collections.Generic.ICollection`1.IsReadOnly
  isExternal: true
  name: IsReadOnly
  nameWithType: ICollection<T>.IsReadOnly
  fullName: System.Collections.Generic.ICollection<T>.IsReadOnly
  nameWithType.vb: ICollection(Of T).IsReadOnly
  fullName.vb: System.Collections.Generic.ICollection(Of T).IsReadOnly
- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable`1.GetEnumerator
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of T).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of T).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{Hybrid.Localization.Sources.ILocalizationSource}
  commentId: T:System.Collections.Generic.IEnumerable{Hybrid.Localization.Sources.ILocalizationSource}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<ILocalizationSource>
  nameWithType: IEnumerable<ILocalizationSource>
  fullName: System.Collections.Generic.IEnumerable<Hybrid.Localization.Sources.ILocalizationSource>
  nameWithType.vb: IEnumerable(Of ILocalizationSource)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Hybrid.Localization.Sources.ILocalizationSource)
  name.vb: IEnumerable(Of ILocalizationSource)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Localization.Sources.ILocalizationSource
    name: ILocalizationSource
    nameWithType: ILocalizationSource
    fullName: Hybrid.Localization.Sources.ILocalizationSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Localization.Sources.ILocalizationSource
    name: ILocalizationSource
    nameWithType: ILocalizationSource
    fullName: Hybrid.Localization.Sources.ILocalizationSource
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Collections.CollectionExtensions.AddIf``1(System.Collections.Generic.ICollection{``0},``0,System.Boolean)
  commentId: M:OSharp.Collections.CollectionExtensions.AddIf``1(System.Collections.Generic.ICollection{``0},``0,System.Boolean)
  isExternal: true
  name: AddIf<T>(ICollection<T>, T, Boolean)
  nameWithType: CollectionExtensions.AddIf<T>(ICollection<T>, T, Boolean)
  fullName: OSharp.Collections.CollectionExtensions.AddIf<T>(System.Collections.Generic.ICollection<T>, T, System.Boolean)
  nameWithType.vb: CollectionExtensions.AddIf(Of T)(ICollection(Of T), T, Boolean)
  fullName.vb: OSharp.Collections.CollectionExtensions.AddIf(Of T)(System.Collections.Generic.ICollection(Of T), T, System.Boolean)
  name.vb: AddIf(Of T)(ICollection(Of T), T, Boolean)
  spec.csharp:
  - uid: OSharp.Collections.CollectionExtensions.AddIf``1(System.Collections.Generic.ICollection{``0},``0,System.Boolean)
    name: AddIf<T>
    nameWithType: CollectionExtensions.AddIf<T>
    fullName: OSharp.Collections.CollectionExtensions.AddIf<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Collections.CollectionExtensions.AddIf``1(System.Collections.Generic.ICollection{``0},``0,System.Boolean)
    name: AddIf(Of T)
    nameWithType: CollectionExtensions.AddIf(Of T)
    fullName: OSharp.Collections.CollectionExtensions.AddIf(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Collections.CollectionExtensions
  commentId: T:OSharp.Collections.CollectionExtensions
  parent: OSharp.Collections
  name: CollectionExtensions
  nameWithType: CollectionExtensions
  fullName: OSharp.Collections.CollectionExtensions
- uid: OSharp.Collections.CollectionExtensions.AddIf``1(System.Collections.Generic.ICollection{``0},``0,System.Func{System.Boolean})
  commentId: M:OSharp.Collections.CollectionExtensions.AddIf``1(System.Collections.Generic.ICollection{``0},``0,System.Func{System.Boolean})
  isExternal: true
  name: AddIf<T>(ICollection<T>, T, Func<Boolean>)
  nameWithType: CollectionExtensions.AddIf<T>(ICollection<T>, T, Func<Boolean>)
  fullName: OSharp.Collections.CollectionExtensions.AddIf<T>(System.Collections.Generic.ICollection<T>, T, System.Func<System.Boolean>)
  nameWithType.vb: CollectionExtensions.AddIf(Of T)(ICollection(Of T), T, Func(Of Boolean))
  fullName.vb: OSharp.Collections.CollectionExtensions.AddIf(Of T)(System.Collections.Generic.ICollection(Of T), T, System.Func(Of System.Boolean))
  name.vb: AddIf(Of T)(ICollection(Of T), T, Func(Of Boolean))
  spec.csharp:
  - uid: OSharp.Collections.CollectionExtensions.AddIf``1(System.Collections.Generic.ICollection{``0},``0,System.Func{System.Boolean})
    name: AddIf<T>
    nameWithType: CollectionExtensions.AddIf<T>
    fullName: OSharp.Collections.CollectionExtensions.AddIf<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Collections.CollectionExtensions.AddIf``1(System.Collections.Generic.ICollection{``0},``0,System.Func{System.Boolean})
    name: AddIf(Of T)
    nameWithType: CollectionExtensions.AddIf(Of T)
    fullName: OSharp.Collections.CollectionExtensions.AddIf(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Collections.CollectionExtensions.AddIfNotExist``1(System.Collections.Generic.ICollection{``0},``0,System.Func{``0,System.Boolean})
  commentId: M:OSharp.Collections.CollectionExtensions.AddIfNotExist``1(System.Collections.Generic.ICollection{``0},``0,System.Func{``0,System.Boolean})
  isExternal: true
  name: AddIfNotExist<T>(ICollection<T>, T, Func<T, Boolean>)
  nameWithType: CollectionExtensions.AddIfNotExist<T>(ICollection<T>, T, Func<T, Boolean>)
  fullName: OSharp.Collections.CollectionExtensions.AddIfNotExist<T>(System.Collections.Generic.ICollection<T>, T, System.Func<T, System.Boolean>)
  nameWithType.vb: CollectionExtensions.AddIfNotExist(Of T)(ICollection(Of T), T, Func(Of T, Boolean))
  fullName.vb: OSharp.Collections.CollectionExtensions.AddIfNotExist(Of T)(System.Collections.Generic.ICollection(Of T), T, System.Func(Of T, System.Boolean))
  name.vb: AddIfNotExist(Of T)(ICollection(Of T), T, Func(Of T, Boolean))
  spec.csharp:
  - uid: OSharp.Collections.CollectionExtensions.AddIfNotExist``1(System.Collections.Generic.ICollection{``0},``0,System.Func{``0,System.Boolean})
    name: AddIfNotExist<T>
    nameWithType: CollectionExtensions.AddIfNotExist<T>
    fullName: OSharp.Collections.CollectionExtensions.AddIfNotExist<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Collections.CollectionExtensions.AddIfNotExist``1(System.Collections.Generic.ICollection{``0},``0,System.Func{``0,System.Boolean})
    name: AddIfNotExist(Of T)
    nameWithType: CollectionExtensions.AddIfNotExist(Of T)
    fullName: OSharp.Collections.CollectionExtensions.AddIfNotExist(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Collections.CollectionExtensions.AddIfNotNull``1(System.Collections.Generic.ICollection{``0},``0)
  commentId: M:OSharp.Collections.CollectionExtensions.AddIfNotNull``1(System.Collections.Generic.ICollection{``0},``0)
  isExternal: true
  name: AddIfNotNull<T>(ICollection<T>, T)
  nameWithType: CollectionExtensions.AddIfNotNull<T>(ICollection<T>, T)
  fullName: OSharp.Collections.CollectionExtensions.AddIfNotNull<T>(System.Collections.Generic.ICollection<T>, T)
  nameWithType.vb: CollectionExtensions.AddIfNotNull(Of T)(ICollection(Of T), T)
  fullName.vb: OSharp.Collections.CollectionExtensions.AddIfNotNull(Of T)(System.Collections.Generic.ICollection(Of T), T)
  name.vb: AddIfNotNull(Of T)(ICollection(Of T), T)
  spec.csharp:
  - uid: OSharp.Collections.CollectionExtensions.AddIfNotNull``1(System.Collections.Generic.ICollection{``0},``0)
    name: AddIfNotNull<T>
    nameWithType: CollectionExtensions.AddIfNotNull<T>
    fullName: OSharp.Collections.CollectionExtensions.AddIfNotNull<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Collections.CollectionExtensions.AddIfNotNull``1(System.Collections.Generic.ICollection{``0},``0)
    name: AddIfNotNull(Of T)
    nameWithType: CollectionExtensions.AddIfNotNull(Of T)
    fullName: OSharp.Collections.CollectionExtensions.AddIfNotNull(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Collections.CollectionExtensions.GetOrAdd``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Boolean},System.Func{``0})
  commentId: M:OSharp.Collections.CollectionExtensions.GetOrAdd``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Boolean},System.Func{``0})
  isExternal: true
  name: GetOrAdd<T>(ICollection<T>, Func<T, Boolean>, Func<T>)
  nameWithType: CollectionExtensions.GetOrAdd<T>(ICollection<T>, Func<T, Boolean>, Func<T>)
  fullName: OSharp.Collections.CollectionExtensions.GetOrAdd<T>(System.Collections.Generic.ICollection<T>, System.Func<T, System.Boolean>, System.Func<T>)
  nameWithType.vb: CollectionExtensions.GetOrAdd(Of T)(ICollection(Of T), Func(Of T, Boolean), Func(Of T))
  fullName.vb: OSharp.Collections.CollectionExtensions.GetOrAdd(Of T)(System.Collections.Generic.ICollection(Of T), System.Func(Of T, System.Boolean), System.Func(Of T))
  name.vb: GetOrAdd(Of T)(ICollection(Of T), Func(Of T, Boolean), Func(Of T))
  spec.csharp:
  - uid: OSharp.Collections.CollectionExtensions.GetOrAdd``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Boolean},System.Func{``0})
    name: GetOrAdd<T>
    nameWithType: CollectionExtensions.GetOrAdd<T>
    fullName: OSharp.Collections.CollectionExtensions.GetOrAdd<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Collections.CollectionExtensions.GetOrAdd``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Boolean},System.Func{``0})
    name: GetOrAdd(Of T)
    nameWithType: CollectionExtensions.GetOrAdd(Of T)
    fullName: OSharp.Collections.CollectionExtensions.GetOrAdd(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Collections.CollectionExtensions.IsNullOrEmpty``1(System.Collections.Generic.ICollection{``0})
  commentId: M:OSharp.Collections.CollectionExtensions.IsNullOrEmpty``1(System.Collections.Generic.ICollection{``0})
  isExternal: true
  name: IsNullOrEmpty<T>(ICollection<T>)
  nameWithType: CollectionExtensions.IsNullOrEmpty<T>(ICollection<T>)
  fullName: OSharp.Collections.CollectionExtensions.IsNullOrEmpty<T>(System.Collections.Generic.ICollection<T>)
  nameWithType.vb: CollectionExtensions.IsNullOrEmpty(Of T)(ICollection(Of T))
  fullName.vb: OSharp.Collections.CollectionExtensions.IsNullOrEmpty(Of T)(System.Collections.Generic.ICollection(Of T))
  name.vb: IsNullOrEmpty(Of T)(ICollection(Of T))
  spec.csharp:
  - uid: OSharp.Collections.CollectionExtensions.IsNullOrEmpty``1(System.Collections.Generic.ICollection{``0})
    name: IsNullOrEmpty<T>
    nameWithType: CollectionExtensions.IsNullOrEmpty<T>
    fullName: OSharp.Collections.CollectionExtensions.IsNullOrEmpty<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Collections.CollectionExtensions.IsNullOrEmpty``1(System.Collections.Generic.ICollection{``0})
    name: IsNullOrEmpty(Of T)
    nameWithType: CollectionExtensions.IsNullOrEmpty(Of T)
    fullName: OSharp.Collections.CollectionExtensions.IsNullOrEmpty(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Collections.EnumerableExtensions.Shuffle``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:OSharp.Collections.EnumerableExtensions.Shuffle``1(System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: Shuffle<TSource>(IEnumerable<TSource>)
  nameWithType: EnumerableExtensions.Shuffle<TSource>(IEnumerable<TSource>)
  fullName: OSharp.Collections.EnumerableExtensions.Shuffle<TSource>(System.Collections.Generic.IEnumerable<TSource>)
  nameWithType.vb: EnumerableExtensions.Shuffle(Of TSource)(IEnumerable(Of TSource))
  fullName.vb: OSharp.Collections.EnumerableExtensions.Shuffle(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: Shuffle(Of TSource)(IEnumerable(Of TSource))
  spec.csharp:
  - uid: OSharp.Collections.EnumerableExtensions.Shuffle``1(System.Collections.Generic.IEnumerable{``0})
    name: Shuffle<TSource>
    nameWithType: EnumerableExtensions.Shuffle<TSource>
    fullName: OSharp.Collections.EnumerableExtensions.Shuffle<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Collections.EnumerableExtensions.Shuffle``1(System.Collections.Generic.IEnumerable{``0})
    name: Shuffle(Of TSource)
    nameWithType: EnumerableExtensions.Shuffle(Of TSource)
    fullName: OSharp.Collections.EnumerableExtensions.Shuffle(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Collections.EnumerableExtensions
  commentId: T:OSharp.Collections.EnumerableExtensions
  parent: OSharp.Collections
  name: EnumerableExtensions
  nameWithType: EnumerableExtensions
  fullName: OSharp.Collections.EnumerableExtensions
- uid: OSharp.Collections.EnumerableExtensions.ExpandAndToString``1(System.Collections.Generic.IEnumerable{``0},System.String)
  commentId: M:OSharp.Collections.EnumerableExtensions.ExpandAndToString``1(System.Collections.Generic.IEnumerable{``0},System.String)
  isExternal: true
  name: ExpandAndToString<T>(IEnumerable<T>, String)
  nameWithType: EnumerableExtensions.ExpandAndToString<T>(IEnumerable<T>, String)
  fullName: OSharp.Collections.EnumerableExtensions.ExpandAndToString<T>(System.Collections.Generic.IEnumerable<T>, System.String)
  nameWithType.vb: EnumerableExtensions.ExpandAndToString(Of T)(IEnumerable(Of T), String)
  fullName.vb: OSharp.Collections.EnumerableExtensions.ExpandAndToString(Of T)(System.Collections.Generic.IEnumerable(Of T), System.String)
  name.vb: ExpandAndToString(Of T)(IEnumerable(Of T), String)
  spec.csharp:
  - uid: OSharp.Collections.EnumerableExtensions.ExpandAndToString``1(System.Collections.Generic.IEnumerable{``0},System.String)
    name: ExpandAndToString<T>
    nameWithType: EnumerableExtensions.ExpandAndToString<T>
    fullName: OSharp.Collections.EnumerableExtensions.ExpandAndToString<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Collections.EnumerableExtensions.ExpandAndToString``1(System.Collections.Generic.IEnumerable{``0},System.String)
    name: ExpandAndToString(Of T)
    nameWithType: EnumerableExtensions.ExpandAndToString(Of T)
    fullName: OSharp.Collections.EnumerableExtensions.ExpandAndToString(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Collections.EnumerableExtensions.ExpandAndToString``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.String)
  commentId: M:OSharp.Collections.EnumerableExtensions.ExpandAndToString``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.String)
  isExternal: true
  name: ExpandAndToString<T>(IEnumerable<T>, Func<T, String>, String)
  nameWithType: EnumerableExtensions.ExpandAndToString<T>(IEnumerable<T>, Func<T, String>, String)
  fullName: OSharp.Collections.EnumerableExtensions.ExpandAndToString<T>(System.Collections.Generic.IEnumerable<T>, System.Func<T, System.String>, System.String)
  nameWithType.vb: EnumerableExtensions.ExpandAndToString(Of T)(IEnumerable(Of T), Func(Of T, String), String)
  fullName.vb: OSharp.Collections.EnumerableExtensions.ExpandAndToString(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Func(Of T, System.String), System.String)
  name.vb: ExpandAndToString(Of T)(IEnumerable(Of T), Func(Of T, String), String)
  spec.csharp:
  - uid: OSharp.Collections.EnumerableExtensions.ExpandAndToString``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.String)
    name: ExpandAndToString<T>
    nameWithType: EnumerableExtensions.ExpandAndToString<T>
    fullName: OSharp.Collections.EnumerableExtensions.ExpandAndToString<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Collections.EnumerableExtensions.ExpandAndToString``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.String)
    name: ExpandAndToString(Of T)
    nameWithType: EnumerableExtensions.ExpandAndToString(Of T)
    fullName: OSharp.Collections.EnumerableExtensions.ExpandAndToString(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Collections.EnumerableExtensions.IsEmpty``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:OSharp.Collections.EnumerableExtensions.IsEmpty``1(System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: IsEmpty<T>(IEnumerable<T>)
  nameWithType: EnumerableExtensions.IsEmpty<T>(IEnumerable<T>)
  fullName: OSharp.Collections.EnumerableExtensions.IsEmpty<T>(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: EnumerableExtensions.IsEmpty(Of T)(IEnumerable(Of T))
  fullName.vb: OSharp.Collections.EnumerableExtensions.IsEmpty(Of T)(System.Collections.Generic.IEnumerable(Of T))
  name.vb: IsEmpty(Of T)(IEnumerable(Of T))
  spec.csharp:
  - uid: OSharp.Collections.EnumerableExtensions.IsEmpty``1(System.Collections.Generic.IEnumerable{``0})
    name: IsEmpty<T>
    nameWithType: EnumerableExtensions.IsEmpty<T>
    fullName: OSharp.Collections.EnumerableExtensions.IsEmpty<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Collections.EnumerableExtensions.IsEmpty``1(System.Collections.Generic.IEnumerable{``0})
    name: IsEmpty(Of T)
    nameWithType: EnumerableExtensions.IsEmpty(Of T)
    fullName: OSharp.Collections.EnumerableExtensions.IsEmpty(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Collections.EnumerableExtensions.WhereIf``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Boolean)
  commentId: M:OSharp.Collections.EnumerableExtensions.WhereIf``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Boolean)
  isExternal: true
  name: WhereIf<T>(IEnumerable<T>, Func<T, Boolean>, Boolean)
  nameWithType: EnumerableExtensions.WhereIf<T>(IEnumerable<T>, Func<T, Boolean>, Boolean)
  fullName: OSharp.Collections.EnumerableExtensions.WhereIf<T>(System.Collections.Generic.IEnumerable<T>, System.Func<T, System.Boolean>, System.Boolean)
  nameWithType.vb: EnumerableExtensions.WhereIf(Of T)(IEnumerable(Of T), Func(Of T, Boolean), Boolean)
  fullName.vb: OSharp.Collections.EnumerableExtensions.WhereIf(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Func(Of T, System.Boolean), System.Boolean)
  name.vb: WhereIf(Of T)(IEnumerable(Of T), Func(Of T, Boolean), Boolean)
  spec.csharp:
  - uid: OSharp.Collections.EnumerableExtensions.WhereIf``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Boolean)
    name: WhereIf<T>
    nameWithType: EnumerableExtensions.WhereIf<T>
    fullName: OSharp.Collections.EnumerableExtensions.WhereIf<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Collections.EnumerableExtensions.WhereIf``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Boolean)
    name: WhereIf(Of T)
    nameWithType: EnumerableExtensions.WhereIf(Of T)
    fullName: OSharp.Collections.EnumerableExtensions.WhereIf(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Collections.EnumerableExtensions.OrderByPrefixes``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.String[])
  commentId: M:OSharp.Collections.EnumerableExtensions.OrderByPrefixes``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.String[])
  isExternal: true
  name: OrderByPrefixes<T>(IEnumerable<T>, Func<T, String>, String[])
  nameWithType: EnumerableExtensions.OrderByPrefixes<T>(IEnumerable<T>, Func<T, String>, String[])
  fullName: OSharp.Collections.EnumerableExtensions.OrderByPrefixes<T>(System.Collections.Generic.IEnumerable<T>, System.Func<T, System.String>, System.String[])
  nameWithType.vb: EnumerableExtensions.OrderByPrefixes(Of T)(IEnumerable(Of T), Func(Of T, String), String())
  fullName.vb: OSharp.Collections.EnumerableExtensions.OrderByPrefixes(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Func(Of T, System.String), System.String())
  name.vb: OrderByPrefixes(Of T)(IEnumerable(Of T), Func(Of T, String), String())
  spec.csharp:
  - uid: OSharp.Collections.EnumerableExtensions.OrderByPrefixes``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.String[])
    name: OrderByPrefixes<T>
    nameWithType: EnumerableExtensions.OrderByPrefixes<T>
    fullName: OSharp.Collections.EnumerableExtensions.OrderByPrefixes<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Collections.EnumerableExtensions.OrderByPrefixes``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.String[])
    name: OrderByPrefixes(Of T)
    nameWithType: EnumerableExtensions.OrderByPrefixes(Of T)
    fullName: OSharp.Collections.EnumerableExtensions.OrderByPrefixes(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Collections.EnumerableExtensions.DistinctBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  commentId: M:OSharp.Collections.EnumerableExtensions.DistinctBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  isExternal: true
  name: DistinctBy<T, TKey>(IEnumerable<T>, Func<T, TKey>)
  nameWithType: EnumerableExtensions.DistinctBy<T, TKey>(IEnumerable<T>, Func<T, TKey>)
  fullName: OSharp.Collections.EnumerableExtensions.DistinctBy<T, TKey>(System.Collections.Generic.IEnumerable<T>, System.Func<T, TKey>)
  nameWithType.vb: EnumerableExtensions.DistinctBy(Of T, TKey)(IEnumerable(Of T), Func(Of T, TKey))
  fullName.vb: OSharp.Collections.EnumerableExtensions.DistinctBy(Of T, TKey)(System.Collections.Generic.IEnumerable(Of T), System.Func(Of T, TKey))
  name.vb: DistinctBy(Of T, TKey)(IEnumerable(Of T), Func(Of T, TKey))
  spec.csharp:
  - uid: OSharp.Collections.EnumerableExtensions.DistinctBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
    name: DistinctBy<T, TKey>
    nameWithType: EnumerableExtensions.DistinctBy<T, TKey>
    fullName: OSharp.Collections.EnumerableExtensions.DistinctBy<T, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Collections.EnumerableExtensions.DistinctBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
    name: DistinctBy(Of T, TKey)
    nameWithType: EnumerableExtensions.DistinctBy(Of T, TKey)
    fullName: OSharp.Collections.EnumerableExtensions.DistinctBy(Of T, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Collections.EnumerableExtensions.OrderBy``1(System.Collections.Generic.IEnumerable{``0},System.String,System.ComponentModel.ListSortDirection)
  commentId: M:OSharp.Collections.EnumerableExtensions.OrderBy``1(System.Collections.Generic.IEnumerable{``0},System.String,System.ComponentModel.ListSortDirection)
  isExternal: true
  name: OrderBy<T>(IEnumerable<T>, String, ListSortDirection)
  nameWithType: EnumerableExtensions.OrderBy<T>(IEnumerable<T>, String, ListSortDirection)
  fullName: OSharp.Collections.EnumerableExtensions.OrderBy<T>(System.Collections.Generic.IEnumerable<T>, System.String, System.ComponentModel.ListSortDirection)
  nameWithType.vb: EnumerableExtensions.OrderBy(Of T)(IEnumerable(Of T), String, ListSortDirection)
  fullName.vb: OSharp.Collections.EnumerableExtensions.OrderBy(Of T)(System.Collections.Generic.IEnumerable(Of T), System.String, System.ComponentModel.ListSortDirection)
  name.vb: OrderBy(Of T)(IEnumerable(Of T), String, ListSortDirection)
  spec.csharp:
  - uid: OSharp.Collections.EnumerableExtensions.OrderBy``1(System.Collections.Generic.IEnumerable{``0},System.String,System.ComponentModel.ListSortDirection)
    name: OrderBy<T>
    nameWithType: EnumerableExtensions.OrderBy<T>
    fullName: OSharp.Collections.EnumerableExtensions.OrderBy<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.ComponentModel.ListSortDirection
    name: ListSortDirection
    nameWithType: ListSortDirection
    fullName: System.ComponentModel.ListSortDirection
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Collections.EnumerableExtensions.OrderBy``1(System.Collections.Generic.IEnumerable{``0},System.String,System.ComponentModel.ListSortDirection)
    name: OrderBy(Of T)
    nameWithType: EnumerableExtensions.OrderBy(Of T)
    fullName: OSharp.Collections.EnumerableExtensions.OrderBy(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.ComponentModel.ListSortDirection
    name: ListSortDirection
    nameWithType: ListSortDirection
    fullName: System.ComponentModel.ListSortDirection
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Collections.EnumerableExtensions.OrderBy``1(System.Collections.Generic.IEnumerable{``0},OSharp.Filter.SortCondition)
  commentId: M:OSharp.Collections.EnumerableExtensions.OrderBy``1(System.Collections.Generic.IEnumerable{``0},OSharp.Filter.SortCondition)
  isExternal: true
  name: OrderBy<T>(IEnumerable<T>, SortCondition)
  nameWithType: EnumerableExtensions.OrderBy<T>(IEnumerable<T>, SortCondition)
  fullName: OSharp.Collections.EnumerableExtensions.OrderBy<T>(System.Collections.Generic.IEnumerable<T>, OSharp.Filter.SortCondition)
  nameWithType.vb: EnumerableExtensions.OrderBy(Of T)(IEnumerable(Of T), SortCondition)
  fullName.vb: OSharp.Collections.EnumerableExtensions.OrderBy(Of T)(System.Collections.Generic.IEnumerable(Of T), OSharp.Filter.SortCondition)
  name.vb: OrderBy(Of T)(IEnumerable(Of T), SortCondition)
  spec.csharp:
  - uid: OSharp.Collections.EnumerableExtensions.OrderBy``1(System.Collections.Generic.IEnumerable{``0},OSharp.Filter.SortCondition)
    name: OrderBy<T>
    nameWithType: EnumerableExtensions.OrderBy<T>
    fullName: OSharp.Collections.EnumerableExtensions.OrderBy<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: OSharp.Filter.SortCondition
    name: SortCondition
    nameWithType: SortCondition
    fullName: OSharp.Filter.SortCondition
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Collections.EnumerableExtensions.OrderBy``1(System.Collections.Generic.IEnumerable{``0},OSharp.Filter.SortCondition)
    name: OrderBy(Of T)
    nameWithType: EnumerableExtensions.OrderBy(Of T)
    fullName: OSharp.Collections.EnumerableExtensions.OrderBy(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: OSharp.Filter.SortCondition
    name: SortCondition
    nameWithType: SortCondition
    fullName: OSharp.Filter.SortCondition
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Collections.EnumerableExtensions.OrderBy``1(System.Collections.Generic.IEnumerable{``0},OSharp.Filter.SortCondition{``0})
  commentId: M:OSharp.Collections.EnumerableExtensions.OrderBy``1(System.Collections.Generic.IEnumerable{``0},OSharp.Filter.SortCondition{``0})
  isExternal: true
  name: OrderBy<T>(IEnumerable<T>, SortCondition<T>)
  nameWithType: EnumerableExtensions.OrderBy<T>(IEnumerable<T>, SortCondition<T>)
  fullName: OSharp.Collections.EnumerableExtensions.OrderBy<T>(System.Collections.Generic.IEnumerable<T>, OSharp.Filter.SortCondition<T>)
  nameWithType.vb: EnumerableExtensions.OrderBy(Of T)(IEnumerable(Of T), SortCondition(Of T))
  fullName.vb: OSharp.Collections.EnumerableExtensions.OrderBy(Of T)(System.Collections.Generic.IEnumerable(Of T), OSharp.Filter.SortCondition(Of T))
  name.vb: OrderBy(Of T)(IEnumerable(Of T), SortCondition(Of T))
  spec.csharp:
  - uid: OSharp.Collections.EnumerableExtensions.OrderBy``1(System.Collections.Generic.IEnumerable{``0},OSharp.Filter.SortCondition{``0})
    name: OrderBy<T>
    nameWithType: EnumerableExtensions.OrderBy<T>
    fullName: OSharp.Collections.EnumerableExtensions.OrderBy<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: OSharp.Filter.SortCondition`1
    name: SortCondition
    nameWithType: SortCondition
    fullName: OSharp.Filter.SortCondition
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Collections.EnumerableExtensions.OrderBy``1(System.Collections.Generic.IEnumerable{``0},OSharp.Filter.SortCondition{``0})
    name: OrderBy(Of T)
    nameWithType: EnumerableExtensions.OrderBy(Of T)
    fullName: OSharp.Collections.EnumerableExtensions.OrderBy(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: OSharp.Filter.SortCondition`1
    name: SortCondition
    nameWithType: SortCondition
    fullName: OSharp.Filter.SortCondition
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Entity.EntityExtensions.CheckICreatedTime``2(``0)
  commentId: M:OSharp.Entity.EntityExtensions.CheckICreatedTime``2(``0)
  name: CheckICreatedTime<TEntity, TKey>(TEntity)
  nameWithType: EntityExtensions.CheckICreatedTime<TEntity, TKey>(TEntity)
  fullName: OSharp.Entity.EntityExtensions.CheckICreatedTime<TEntity, TKey>(TEntity)
  nameWithType.vb: EntityExtensions.CheckICreatedTime(Of TEntity, TKey)(TEntity)
  fullName.vb: OSharp.Entity.EntityExtensions.CheckICreatedTime(Of TEntity, TKey)(TEntity)
  name.vb: CheckICreatedTime(Of TEntity, TKey)(TEntity)
  spec.csharp:
  - uid: OSharp.Entity.EntityExtensions.CheckICreatedTime``2(``0)
    name: CheckICreatedTime<TEntity, TKey>
    nameWithType: EntityExtensions.CheckICreatedTime<TEntity, TKey>
    fullName: OSharp.Entity.EntityExtensions.CheckICreatedTime<TEntity, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Entity.EntityExtensions.CheckICreatedTime``2(``0)
    name: CheckICreatedTime(Of TEntity, TKey)
    nameWithType: EntityExtensions.CheckICreatedTime(Of TEntity, TKey)
    fullName: OSharp.Entity.EntityExtensions.CheckICreatedTime(Of TEntity, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Entity.EntityExtensions
  commentId: T:OSharp.Entity.EntityExtensions
  parent: OSharp.Entity
  name: EntityExtensions
  nameWithType: EntityExtensions
  fullName: OSharp.Entity.EntityExtensions
- uid: OSharp.Entity.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
  commentId: M:OSharp.Entity.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
  isExternal: true
  name: CheckICreationAudited<TEntity, TKey, TUserKey>(TEntity, IPrincipal)
  nameWithType: EntityExtensions.CheckICreationAudited<TEntity, TKey, TUserKey>(TEntity, IPrincipal)
  fullName: OSharp.Entity.EntityExtensions.CheckICreationAudited<TEntity, TKey, TUserKey>(TEntity, System.Security.Principal.IPrincipal)
  nameWithType.vb: EntityExtensions.CheckICreationAudited(Of TEntity, TKey, TUserKey)(TEntity, IPrincipal)
  fullName.vb: OSharp.Entity.EntityExtensions.CheckICreationAudited(Of TEntity, TKey, TUserKey)(TEntity, System.Security.Principal.IPrincipal)
  name.vb: CheckICreationAudited(Of TEntity, TKey, TUserKey)(TEntity, IPrincipal)
  spec.csharp:
  - uid: OSharp.Entity.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
    name: CheckICreationAudited<TEntity, TKey, TUserKey>
    nameWithType: EntityExtensions.CheckICreationAudited<TEntity, TKey, TUserKey>
    fullName: OSharp.Entity.EntityExtensions.CheckICreationAudited<TEntity, TKey, TUserKey>
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Entity.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
    name: CheckICreationAudited(Of TEntity, TKey, TUserKey)
    nameWithType: EntityExtensions.CheckICreationAudited(Of TEntity, TKey, TUserKey)
    fullName: OSharp.Entity.EntityExtensions.CheckICreationAudited(Of TEntity, TKey, TUserKey)
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Entity.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
  commentId: M:OSharp.Entity.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
  isExternal: true
  name: CheckIUpdateAudited<TEntity, TKey, TUserKey>(TEntity, IPrincipal)
  nameWithType: EntityExtensions.CheckIUpdateAudited<TEntity, TKey, TUserKey>(TEntity, IPrincipal)
  fullName: OSharp.Entity.EntityExtensions.CheckIUpdateAudited<TEntity, TKey, TUserKey>(TEntity, System.Security.Principal.IPrincipal)
  nameWithType.vb: EntityExtensions.CheckIUpdateAudited(Of TEntity, TKey, TUserKey)(TEntity, IPrincipal)
  fullName.vb: OSharp.Entity.EntityExtensions.CheckIUpdateAudited(Of TEntity, TKey, TUserKey)(TEntity, System.Security.Principal.IPrincipal)
  name.vb: CheckIUpdateAudited(Of TEntity, TKey, TUserKey)(TEntity, IPrincipal)
  spec.csharp:
  - uid: OSharp.Entity.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
    name: CheckIUpdateAudited<TEntity, TKey, TUserKey>
    nameWithType: EntityExtensions.CheckIUpdateAudited<TEntity, TKey, TUserKey>
    fullName: OSharp.Entity.EntityExtensions.CheckIUpdateAudited<TEntity, TKey, TUserKey>
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Entity.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
    name: CheckIUpdateAudited(Of TEntity, TKey, TUserKey)
    nameWithType: EntityExtensions.CheckIUpdateAudited(Of TEntity, TKey, TUserKey)
    fullName: OSharp.Entity.EntityExtensions.CheckIUpdateAudited(Of TEntity, TKey, TUserKey)
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
  commentId: M:OSharp.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
  isExternal: true
  name: CastTo(Object, Type)
  nameWithType: ObjectExtensions.CastTo(Object, Type)
  fullName: OSharp.Extensions.ObjectExtensions.CastTo(System.Object, System.Type)
  spec.csharp:
  - uid: OSharp.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
    name: CastTo
    nameWithType: ObjectExtensions.CastTo
    fullName: OSharp.Extensions.ObjectExtensions.CastTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
    name: CastTo
    nameWithType: ObjectExtensions.CastTo
    fullName: OSharp.Extensions.ObjectExtensions.CastTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Extensions.ObjectExtensions
  commentId: T:OSharp.Extensions.ObjectExtensions
  parent: OSharp.Extensions
  name: ObjectExtensions
  nameWithType: ObjectExtensions
  fullName: OSharp.Extensions.ObjectExtensions
- uid: OSharp.Extensions.ObjectExtensions.CastTo``1(System.Object)
  commentId: M:OSharp.Extensions.ObjectExtensions.CastTo``1(System.Object)
  isExternal: true
  name: CastTo<T>(Object)
  nameWithType: ObjectExtensions.CastTo<T>(Object)
  fullName: OSharp.Extensions.ObjectExtensions.CastTo<T>(System.Object)
  nameWithType.vb: ObjectExtensions.CastTo(Of T)(Object)
  fullName.vb: OSharp.Extensions.ObjectExtensions.CastTo(Of T)(System.Object)
  name.vb: CastTo(Of T)(Object)
  spec.csharp:
  - uid: OSharp.Extensions.ObjectExtensions.CastTo``1(System.Object)
    name: CastTo<T>
    nameWithType: ObjectExtensions.CastTo<T>
    fullName: OSharp.Extensions.ObjectExtensions.CastTo<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ObjectExtensions.CastTo``1(System.Object)
    name: CastTo(Of T)
    nameWithType: ObjectExtensions.CastTo(Of T)
    fullName: OSharp.Extensions.ObjectExtensions.CastTo(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
  commentId: M:OSharp.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
  isExternal: true
  name: CastTo<T>(Object, T)
  nameWithType: ObjectExtensions.CastTo<T>(Object, T)
  fullName: OSharp.Extensions.ObjectExtensions.CastTo<T>(System.Object, T)
  nameWithType.vb: ObjectExtensions.CastTo(Of T)(Object, T)
  fullName.vb: OSharp.Extensions.ObjectExtensions.CastTo(Of T)(System.Object, T)
  name.vb: CastTo(Of T)(Object, T)
  spec.csharp:
  - uid: OSharp.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
    name: CastTo<T>
    nameWithType: ObjectExtensions.CastTo<T>
    fullName: OSharp.Extensions.ObjectExtensions.CastTo<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
    name: CastTo(Of T)
    nameWithType: ObjectExtensions.CastTo(Of T)
    fullName: OSharp.Extensions.ObjectExtensions.CastTo(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
  commentId: M:OSharp.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
  name: IsIn<T>(T, T[])
  nameWithType: ObjectExtensions.IsIn<T>(T, T[])
  fullName: OSharp.Extensions.ObjectExtensions.IsIn<T>(T, T[])
  nameWithType.vb: ObjectExtensions.IsIn(Of T)(T, T())
  fullName.vb: OSharp.Extensions.ObjectExtensions.IsIn(Of T)(T, T())
  name.vb: IsIn(Of T)(T, T())
  spec.csharp:
  - uid: OSharp.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
    name: IsIn<T>
    nameWithType: ObjectExtensions.IsIn<T>
    fullName: OSharp.Extensions.ObjectExtensions.IsIn<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
    name: IsIn(Of T)
    nameWithType: ObjectExtensions.IsIn(Of T)
    fullName: OSharp.Extensions.ObjectExtensions.IsIn(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Extensions.ObjectExtensions.ToDynamic(System.Object)
  commentId: M:OSharp.Extensions.ObjectExtensions.ToDynamic(System.Object)
  isExternal: true
  name: ToDynamic(Object)
  nameWithType: ObjectExtensions.ToDynamic(Object)
  fullName: OSharp.Extensions.ObjectExtensions.ToDynamic(System.Object)
  spec.csharp:
  - uid: OSharp.Extensions.ObjectExtensions.ToDynamic(System.Object)
    name: ToDynamic
    nameWithType: ObjectExtensions.ToDynamic
    fullName: OSharp.Extensions.ObjectExtensions.ToDynamic
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ObjectExtensions.ToDynamic(System.Object)
    name: ToDynamic
    nameWithType: ObjectExtensions.ToDynamic
    fullName: OSharp.Extensions.ObjectExtensions.ToDynamic
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Extensions.ObjectExtensions.DeepClone``1(``0)
  commentId: M:OSharp.Extensions.ObjectExtensions.DeepClone``1(``0)
  name: DeepClone<T>(T)
  nameWithType: ObjectExtensions.DeepClone<T>(T)
  fullName: OSharp.Extensions.ObjectExtensions.DeepClone<T>(T)
  nameWithType.vb: ObjectExtensions.DeepClone(Of T)(T)
  fullName.vb: OSharp.Extensions.ObjectExtensions.DeepClone(Of T)(T)
  name.vb: DeepClone(Of T)(T)
  spec.csharp:
  - uid: OSharp.Extensions.ObjectExtensions.DeepClone``1(``0)
    name: DeepClone<T>
    nameWithType: ObjectExtensions.DeepClone<T>
    fullName: OSharp.Extensions.ObjectExtensions.DeepClone<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ObjectExtensions.DeepClone``1(``0)
    name: DeepClone(Of T)
    nameWithType: ObjectExtensions.DeepClone(Of T)
    fullName: OSharp.Extensions.ObjectExtensions.DeepClone(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
  commentId: M:OSharp.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
  isExternal: true
  name: Required<T>(T, Func<T, Boolean>, String)
  nameWithType: ParameterCheckExtensions.Required<T>(T, Func<T, Boolean>, String)
  fullName: OSharp.Extensions.ParameterCheckExtensions.Required<T>(T, System.Func<T, System.Boolean>, System.String)
  nameWithType.vb: ParameterCheckExtensions.Required(Of T)(T, Func(Of T, Boolean), String)
  fullName.vb: OSharp.Extensions.ParameterCheckExtensions.Required(Of T)(T, System.Func(Of T, System.Boolean), System.String)
  name.vb: Required(Of T)(T, Func(Of T, Boolean), String)
  spec.csharp:
  - uid: OSharp.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
    name: Required<T>
    nameWithType: ParameterCheckExtensions.Required<T>
    fullName: OSharp.Extensions.ParameterCheckExtensions.Required<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
    name: Required(Of T)
    nameWithType: ParameterCheckExtensions.Required(Of T)
    fullName: OSharp.Extensions.ParameterCheckExtensions.Required(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Extensions.ParameterCheckExtensions
  commentId: T:OSharp.Extensions.ParameterCheckExtensions
  parent: OSharp.Extensions
  name: ParameterCheckExtensions
  nameWithType: ParameterCheckExtensions
  fullName: OSharp.Extensions.ParameterCheckExtensions
- uid: OSharp.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
  commentId: M:OSharp.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
  isExternal: true
  name: Required<T, TException>(T, Func<T, Boolean>, String)
  nameWithType: ParameterCheckExtensions.Required<T, TException>(T, Func<T, Boolean>, String)
  fullName: OSharp.Extensions.ParameterCheckExtensions.Required<T, TException>(T, System.Func<T, System.Boolean>, System.String)
  nameWithType.vb: ParameterCheckExtensions.Required(Of T, TException)(T, Func(Of T, Boolean), String)
  fullName.vb: OSharp.Extensions.ParameterCheckExtensions.Required(Of T, TException)(T, System.Func(Of T, System.Boolean), System.String)
  name.vb: Required(Of T, TException)(T, Func(Of T, Boolean), String)
  spec.csharp:
  - uid: OSharp.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
    name: Required<T, TException>
    nameWithType: ParameterCheckExtensions.Required<T, TException>
    fullName: OSharp.Extensions.ParameterCheckExtensions.Required<T, TException>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
    name: Required(Of T, TException)
    nameWithType: ParameterCheckExtensions.Required(Of T, TException)
    fullName: OSharp.Extensions.ParameterCheckExtensions.Required(Of T, TException)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
  commentId: M:OSharp.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
  isExternal: true
  name: CheckNotNull<T>(T, String)
  nameWithType: ParameterCheckExtensions.CheckNotNull<T>(T, String)
  fullName: OSharp.Extensions.ParameterCheckExtensions.CheckNotNull<T>(T, System.String)
  nameWithType.vb: ParameterCheckExtensions.CheckNotNull(Of T)(T, String)
  fullName.vb: OSharp.Extensions.ParameterCheckExtensions.CheckNotNull(Of T)(T, System.String)
  name.vb: CheckNotNull(Of T)(T, String)
  spec.csharp:
  - uid: OSharp.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
    name: CheckNotNull<T>
    nameWithType: ParameterCheckExtensions.CheckNotNull<T>
    fullName: OSharp.Extensions.ParameterCheckExtensions.CheckNotNull<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
    name: CheckNotNull(Of T)
    nameWithType: ParameterCheckExtensions.CheckNotNull(Of T)
    fullName: OSharp.Extensions.ParameterCheckExtensions.CheckNotNull(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Extensions.ParameterCheckExtensions.CheckNotNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0},System.String)
  commentId: M:OSharp.Extensions.ParameterCheckExtensions.CheckNotNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0},System.String)
  isExternal: true
  name: CheckNotNullOrEmpty<T>(IEnumerable<T>, String)
  nameWithType: ParameterCheckExtensions.CheckNotNullOrEmpty<T>(IEnumerable<T>, String)
  fullName: OSharp.Extensions.ParameterCheckExtensions.CheckNotNullOrEmpty<T>(System.Collections.Generic.IEnumerable<T>, System.String)
  nameWithType.vb: ParameterCheckExtensions.CheckNotNullOrEmpty(Of T)(IEnumerable(Of T), String)
  fullName.vb: OSharp.Extensions.ParameterCheckExtensions.CheckNotNullOrEmpty(Of T)(System.Collections.Generic.IEnumerable(Of T), System.String)
  name.vb: CheckNotNullOrEmpty(Of T)(IEnumerable(Of T), String)
  spec.csharp:
  - uid: OSharp.Extensions.ParameterCheckExtensions.CheckNotNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0},System.String)
    name: CheckNotNullOrEmpty<T>
    nameWithType: ParameterCheckExtensions.CheckNotNullOrEmpty<T>
    fullName: OSharp.Extensions.ParameterCheckExtensions.CheckNotNullOrEmpty<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ParameterCheckExtensions.CheckNotNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0},System.String)
    name: CheckNotNullOrEmpty(Of T)
    nameWithType: ParameterCheckExtensions.CheckNotNullOrEmpty(Of T)
    fullName: OSharp.Extensions.ParameterCheckExtensions.CheckNotNullOrEmpty(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
  commentId: M:OSharp.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
  isExternal: true
  name: TryCatch<T>(T, Action<T>, Action<Exception>, Action<T>)
  nameWithType: TryCatchExtensions.TryCatch<T>(T, Action<T>, Action<Exception>, Action<T>)
  fullName: OSharp.Extensions.TryCatchExtensions.TryCatch<T>(T, System.Action<T>, System.Action<System.Exception>, System.Action<T>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of T)(T, Action(Of T), Action(Of Exception), Action(Of T))
  fullName.vb: OSharp.Extensions.TryCatchExtensions.TryCatch(Of T)(T, System.Action(Of T), System.Action(Of System.Exception), System.Action(Of T))
  name.vb: TryCatch(Of T)(T, Action(Of T), Action(Of Exception), Action(Of T))
  spec.csharp:
  - uid: OSharp.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
    name: TryCatch<T>
    nameWithType: TryCatchExtensions.TryCatch<T>
    fullName: OSharp.Extensions.TryCatchExtensions.TryCatch<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
    name: TryCatch(Of T)
    nameWithType: TryCatchExtensions.TryCatch(Of T)
    fullName: OSharp.Extensions.TryCatchExtensions.TryCatch(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Extensions.TryCatchExtensions
  commentId: T:OSharp.Extensions.TryCatchExtensions
  parent: OSharp.Extensions
  name: TryCatchExtensions
  nameWithType: TryCatchExtensions
  fullName: OSharp.Extensions.TryCatchExtensions
- uid: OSharp.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
  commentId: M:OSharp.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
  isExternal: true
  name: TryCatch<T>(T, Action<T>, Action<Exception>)
  nameWithType: TryCatchExtensions.TryCatch<T>(T, Action<T>, Action<Exception>)
  fullName: OSharp.Extensions.TryCatchExtensions.TryCatch<T>(T, System.Action<T>, System.Action<System.Exception>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of T)(T, Action(Of T), Action(Of Exception))
  fullName.vb: OSharp.Extensions.TryCatchExtensions.TryCatch(Of T)(T, System.Action(Of T), System.Action(Of System.Exception))
  name.vb: TryCatch(Of T)(T, Action(Of T), Action(Of Exception))
  spec.csharp:
  - uid: OSharp.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
    name: TryCatch<T>
    nameWithType: TryCatchExtensions.TryCatch<T>
    fullName: OSharp.Extensions.TryCatchExtensions.TryCatch<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
    name: TryCatch(Of T)
    nameWithType: TryCatchExtensions.TryCatch(Of T)
    fullName: OSharp.Extensions.TryCatchExtensions.TryCatch(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
  commentId: M:OSharp.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
  isExternal: true
  name: TryCatch<T, TResult>(T, Func<T, TResult>, Action<Exception>, Action<T>)
  nameWithType: TryCatchExtensions.TryCatch<T, TResult>(T, Func<T, TResult>, Action<Exception>, Action<T>)
  fullName: OSharp.Extensions.TryCatchExtensions.TryCatch<T, TResult>(T, System.Func<T, TResult>, System.Action<System.Exception>, System.Action<T>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of T, TResult)(T, Func(Of T, TResult), Action(Of Exception), Action(Of T))
  fullName.vb: OSharp.Extensions.TryCatchExtensions.TryCatch(Of T, TResult)(T, System.Func(Of T, TResult), System.Action(Of System.Exception), System.Action(Of T))
  name.vb: TryCatch(Of T, TResult)(T, Func(Of T, TResult), Action(Of Exception), Action(Of T))
  spec.csharp:
  - uid: OSharp.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
    name: TryCatch<T, TResult>
    nameWithType: TryCatchExtensions.TryCatch<T, TResult>
    fullName: OSharp.Extensions.TryCatchExtensions.TryCatch<T, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
    name: TryCatch(Of T, TResult)
    nameWithType: TryCatchExtensions.TryCatch(Of T, TResult)
    fullName: OSharp.Extensions.TryCatchExtensions.TryCatch(Of T, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
  commentId: M:OSharp.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
  isExternal: true
  name: TryCatch<T, TResult>(T, Func<T, TResult>, Action<Exception>)
  nameWithType: TryCatchExtensions.TryCatch<T, TResult>(T, Func<T, TResult>, Action<Exception>)
  fullName: OSharp.Extensions.TryCatchExtensions.TryCatch<T, TResult>(T, System.Func<T, TResult>, System.Action<System.Exception>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of T, TResult)(T, Func(Of T, TResult), Action(Of Exception))
  fullName.vb: OSharp.Extensions.TryCatchExtensions.TryCatch(Of T, TResult)(T, System.Func(Of T, TResult), System.Action(Of System.Exception))
  name.vb: TryCatch(Of T, TResult)(T, Func(Of T, TResult), Action(Of Exception))
  spec.csharp:
  - uid: OSharp.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
    name: TryCatch<T, TResult>
    nameWithType: TryCatchExtensions.TryCatch<T, TResult>
    fullName: OSharp.Extensions.TryCatchExtensions.TryCatch<T, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
    name: TryCatch(Of T, TResult)
    nameWithType: TryCatchExtensions.TryCatch(Of T, TResult)
    fullName: OSharp.Extensions.TryCatchExtensions.TryCatch(Of T, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
  commentId: M:OSharp.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
  isExternal: true
  name: TryFinally<T>(T, Action<T>, Action<T>)
  nameWithType: TryCatchExtensions.TryFinally<T>(T, Action<T>, Action<T>)
  fullName: OSharp.Extensions.TryCatchExtensions.TryFinally<T>(T, System.Action<T>, System.Action<T>)
  nameWithType.vb: TryCatchExtensions.TryFinally(Of T)(T, Action(Of T), Action(Of T))
  fullName.vb: OSharp.Extensions.TryCatchExtensions.TryFinally(Of T)(T, System.Action(Of T), System.Action(Of T))
  name.vb: TryFinally(Of T)(T, Action(Of T), Action(Of T))
  spec.csharp:
  - uid: OSharp.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
    name: TryFinally<T>
    nameWithType: TryCatchExtensions.TryFinally<T>
    fullName: OSharp.Extensions.TryCatchExtensions.TryFinally<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
    name: TryFinally(Of T)
    nameWithType: TryCatchExtensions.TryFinally(Of T)
    fullName: OSharp.Extensions.TryCatchExtensions.TryFinally(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
  commentId: M:OSharp.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
  isExternal: true
  name: ToJsonString(Object, Boolean, Boolean)
  nameWithType: JsonExtensions.ToJsonString(Object, Boolean, Boolean)
  fullName: OSharp.Json.JsonExtensions.ToJsonString(System.Object, System.Boolean, System.Boolean)
  spec.csharp:
  - uid: OSharp.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
    name: ToJsonString
    nameWithType: JsonExtensions.ToJsonString
    fullName: OSharp.Json.JsonExtensions.ToJsonString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
    name: ToJsonString
    nameWithType: JsonExtensions.ToJsonString
    fullName: OSharp.Json.JsonExtensions.ToJsonString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Json.JsonExtensions
  commentId: T:OSharp.Json.JsonExtensions
  parent: OSharp.Json
  name: JsonExtensions
  nameWithType: JsonExtensions
  fullName: OSharp.Json.JsonExtensions
- uid: OSharp.Mapping.MapperExtensions.MapTo``1(System.Object)
  commentId: M:OSharp.Mapping.MapperExtensions.MapTo``1(System.Object)
  isExternal: true
  name: MapTo<TTarget>(Object)
  nameWithType: MapperExtensions.MapTo<TTarget>(Object)
  fullName: OSharp.Mapping.MapperExtensions.MapTo<TTarget>(System.Object)
  nameWithType.vb: MapperExtensions.MapTo(Of TTarget)(Object)
  fullName.vb: OSharp.Mapping.MapperExtensions.MapTo(Of TTarget)(System.Object)
  name.vb: MapTo(Of TTarget)(Object)
  spec.csharp:
  - uid: OSharp.Mapping.MapperExtensions.MapTo``1(System.Object)
    name: MapTo<TTarget>
    nameWithType: MapperExtensions.MapTo<TTarget>
    fullName: OSharp.Mapping.MapperExtensions.MapTo<TTarget>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Mapping.MapperExtensions.MapTo``1(System.Object)
    name: MapTo(Of TTarget)
    nameWithType: MapperExtensions.MapTo(Of TTarget)
    fullName: OSharp.Mapping.MapperExtensions.MapTo(Of TTarget)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Mapping.MapperExtensions
  commentId: T:OSharp.Mapping.MapperExtensions
  parent: OSharp.Mapping
  name: MapperExtensions
  nameWithType: MapperExtensions
  fullName: OSharp.Mapping.MapperExtensions
- uid: OSharp.Mapping.MapperExtensions.MapTo``2(``0,``1)
  commentId: M:OSharp.Mapping.MapperExtensions.MapTo``2(``0,``1)
  name: MapTo<TSource, TTarget>(TSource, TTarget)
  nameWithType: MapperExtensions.MapTo<TSource, TTarget>(TSource, TTarget)
  fullName: OSharp.Mapping.MapperExtensions.MapTo<TSource, TTarget>(TSource, TTarget)
  nameWithType.vb: MapperExtensions.MapTo(Of TSource, TTarget)(TSource, TTarget)
  fullName.vb: OSharp.Mapping.MapperExtensions.MapTo(Of TSource, TTarget)(TSource, TTarget)
  name.vb: MapTo(Of TSource, TTarget)(TSource, TTarget)
  spec.csharp:
  - uid: OSharp.Mapping.MapperExtensions.MapTo``2(``0,``1)
    name: MapTo<TSource, TTarget>
    nameWithType: MapperExtensions.MapTo<TSource, TTarget>
    fullName: OSharp.Mapping.MapperExtensions.MapTo<TSource, TTarget>
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Mapping.MapperExtensions.MapTo``2(``0,``1)
    name: MapTo(Of TSource, TTarget)
    nameWithType: MapperExtensions.MapTo(Of TSource, TTarget)
    fullName: OSharp.Mapping.MapperExtensions.MapTo(Of TSource, TTarget)
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Reflection.LockExtensions.Locking(System.Object,System.Action)
  commentId: M:OSharp.Reflection.LockExtensions.Locking(System.Object,System.Action)
  isExternal: true
  name: Locking(Object, Action)
  nameWithType: LockExtensions.Locking(Object, Action)
  fullName: OSharp.Reflection.LockExtensions.Locking(System.Object, System.Action)
  spec.csharp:
  - uid: OSharp.Reflection.LockExtensions.Locking(System.Object,System.Action)
    name: Locking
    nameWithType: LockExtensions.Locking
    fullName: OSharp.Reflection.LockExtensions.Locking
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Reflection.LockExtensions.Locking(System.Object,System.Action)
    name: Locking
    nameWithType: LockExtensions.Locking
    fullName: OSharp.Reflection.LockExtensions.Locking
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Reflection.LockExtensions
  commentId: T:OSharp.Reflection.LockExtensions
  parent: OSharp.Reflection
  name: LockExtensions
  nameWithType: LockExtensions
  fullName: OSharp.Reflection.LockExtensions
- uid: OSharp.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
  commentId: M:OSharp.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
  isExternal: true
  name: Locking<T>(T, Action<T>)
  nameWithType: LockExtensions.Locking<T>(T, Action<T>)
  fullName: OSharp.Reflection.LockExtensions.Locking<T>(T, System.Action<T>)
  nameWithType.vb: LockExtensions.Locking(Of T)(T, Action(Of T))
  fullName.vb: OSharp.Reflection.LockExtensions.Locking(Of T)(T, System.Action(Of T))
  name.vb: Locking(Of T)(T, Action(Of T))
  spec.csharp:
  - uid: OSharp.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
    name: Locking<T>
    nameWithType: LockExtensions.Locking<T>
    fullName: OSharp.Reflection.LockExtensions.Locking<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
    name: Locking(Of T)
    nameWithType: LockExtensions.Locking(Of T)
    fullName: OSharp.Reflection.LockExtensions.Locking(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
  commentId: M:OSharp.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
  isExternal: true
  name: Locking<TResult>(Object, Func<TResult>)
  nameWithType: LockExtensions.Locking<TResult>(Object, Func<TResult>)
  fullName: OSharp.Reflection.LockExtensions.Locking<TResult>(System.Object, System.Func<TResult>)
  nameWithType.vb: LockExtensions.Locking(Of TResult)(Object, Func(Of TResult))
  fullName.vb: OSharp.Reflection.LockExtensions.Locking(Of TResult)(System.Object, System.Func(Of TResult))
  name.vb: Locking(Of TResult)(Object, Func(Of TResult))
  spec.csharp:
  - uid: OSharp.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
    name: Locking<TResult>
    nameWithType: LockExtensions.Locking<TResult>
    fullName: OSharp.Reflection.LockExtensions.Locking<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
    name: Locking(Of TResult)
    nameWithType: LockExtensions.Locking(Of TResult)
    fullName: OSharp.Reflection.LockExtensions.Locking(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
  commentId: M:OSharp.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
  isExternal: true
  name: Locking<TSource, TResult>(TSource, Func<TSource, TResult>)
  nameWithType: LockExtensions.Locking<TSource, TResult>(TSource, Func<TSource, TResult>)
  fullName: OSharp.Reflection.LockExtensions.Locking<TSource, TResult>(TSource, System.Func<TSource, TResult>)
  nameWithType.vb: LockExtensions.Locking(Of TSource, TResult)(TSource, Func(Of TSource, TResult))
  fullName.vb: OSharp.Reflection.LockExtensions.Locking(Of TSource, TResult)(TSource, System.Func(Of TSource, TResult))
  name.vb: Locking(Of TSource, TResult)(TSource, Func(Of TSource, TResult))
  spec.csharp:
  - uid: OSharp.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
    name: Locking<TSource, TResult>
    nameWithType: LockExtensions.Locking<TSource, TResult>
    fullName: OSharp.Reflection.LockExtensions.Locking<TSource, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
    name: Locking(Of TSource, TResult)
    nameWithType: LockExtensions.Locking(Of TSource, TResult)
    fullName: OSharp.Reflection.LockExtensions.Locking(Of TSource, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.CollectionExtensions.AddIf``1(System.Collections.Generic.ICollection{``0},``0,System.Boolean)
  commentId: M:Hybrid.Extensions.CollectionExtensions.AddIf``1(System.Collections.Generic.ICollection{``0},``0,System.Boolean)
  isExternal: true
  name: AddIf<T>(ICollection<T>, T, Boolean)
  nameWithType: CollectionExtensions.AddIf<T>(ICollection<T>, T, Boolean)
  fullName: Hybrid.Extensions.CollectionExtensions.AddIf<T>(System.Collections.Generic.ICollection<T>, T, System.Boolean)
  nameWithType.vb: CollectionExtensions.AddIf(Of T)(ICollection(Of T), T, Boolean)
  fullName.vb: Hybrid.Extensions.CollectionExtensions.AddIf(Of T)(System.Collections.Generic.ICollection(Of T), T, System.Boolean)
  name.vb: AddIf(Of T)(ICollection(Of T), T, Boolean)
  spec.csharp:
  - uid: Hybrid.Extensions.CollectionExtensions.AddIf``1(System.Collections.Generic.ICollection{``0},``0,System.Boolean)
    name: AddIf<T>
    nameWithType: CollectionExtensions.AddIf<T>
    fullName: Hybrid.Extensions.CollectionExtensions.AddIf<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.CollectionExtensions.AddIf``1(System.Collections.Generic.ICollection{``0},``0,System.Boolean)
    name: AddIf(Of T)
    nameWithType: CollectionExtensions.AddIf(Of T)
    fullName: Hybrid.Extensions.CollectionExtensions.AddIf(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.CollectionExtensions
  commentId: T:Hybrid.Extensions.CollectionExtensions
  parent: Hybrid.Extensions
  name: CollectionExtensions
  nameWithType: CollectionExtensions
  fullName: Hybrid.Extensions.CollectionExtensions
- uid: Hybrid.Extensions.CollectionExtensions.AddIf``1(System.Collections.Generic.ICollection{``0},``0,System.Func{System.Boolean})
  commentId: M:Hybrid.Extensions.CollectionExtensions.AddIf``1(System.Collections.Generic.ICollection{``0},``0,System.Func{System.Boolean})
  isExternal: true
  name: AddIf<T>(ICollection<T>, T, Func<Boolean>)
  nameWithType: CollectionExtensions.AddIf<T>(ICollection<T>, T, Func<Boolean>)
  fullName: Hybrid.Extensions.CollectionExtensions.AddIf<T>(System.Collections.Generic.ICollection<T>, T, System.Func<System.Boolean>)
  nameWithType.vb: CollectionExtensions.AddIf(Of T)(ICollection(Of T), T, Func(Of Boolean))
  fullName.vb: Hybrid.Extensions.CollectionExtensions.AddIf(Of T)(System.Collections.Generic.ICollection(Of T), T, System.Func(Of System.Boolean))
  name.vb: AddIf(Of T)(ICollection(Of T), T, Func(Of Boolean))
  spec.csharp:
  - uid: Hybrid.Extensions.CollectionExtensions.AddIf``1(System.Collections.Generic.ICollection{``0},``0,System.Func{System.Boolean})
    name: AddIf<T>
    nameWithType: CollectionExtensions.AddIf<T>
    fullName: Hybrid.Extensions.CollectionExtensions.AddIf<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.CollectionExtensions.AddIf``1(System.Collections.Generic.ICollection{``0},``0,System.Func{System.Boolean})
    name: AddIf(Of T)
    nameWithType: CollectionExtensions.AddIf(Of T)
    fullName: Hybrid.Extensions.CollectionExtensions.AddIf(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.CollectionExtensions.AddIfNotExist``1(System.Collections.Generic.ICollection{``0},``0,System.Func{``0,System.Boolean})
  commentId: M:Hybrid.Extensions.CollectionExtensions.AddIfNotExist``1(System.Collections.Generic.ICollection{``0},``0,System.Func{``0,System.Boolean})
  isExternal: true
  name: AddIfNotExist<T>(ICollection<T>, T, Func<T, Boolean>)
  nameWithType: CollectionExtensions.AddIfNotExist<T>(ICollection<T>, T, Func<T, Boolean>)
  fullName: Hybrid.Extensions.CollectionExtensions.AddIfNotExist<T>(System.Collections.Generic.ICollection<T>, T, System.Func<T, System.Boolean>)
  nameWithType.vb: CollectionExtensions.AddIfNotExist(Of T)(ICollection(Of T), T, Func(Of T, Boolean))
  fullName.vb: Hybrid.Extensions.CollectionExtensions.AddIfNotExist(Of T)(System.Collections.Generic.ICollection(Of T), T, System.Func(Of T, System.Boolean))
  name.vb: AddIfNotExist(Of T)(ICollection(Of T), T, Func(Of T, Boolean))
  spec.csharp:
  - uid: Hybrid.Extensions.CollectionExtensions.AddIfNotExist``1(System.Collections.Generic.ICollection{``0},``0,System.Func{``0,System.Boolean})
    name: AddIfNotExist<T>
    nameWithType: CollectionExtensions.AddIfNotExist<T>
    fullName: Hybrid.Extensions.CollectionExtensions.AddIfNotExist<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.CollectionExtensions.AddIfNotExist``1(System.Collections.Generic.ICollection{``0},``0,System.Func{``0,System.Boolean})
    name: AddIfNotExist(Of T)
    nameWithType: CollectionExtensions.AddIfNotExist(Of T)
    fullName: Hybrid.Extensions.CollectionExtensions.AddIfNotExist(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.CollectionExtensions.AddIfNotNull``1(System.Collections.Generic.ICollection{``0},``0)
  commentId: M:Hybrid.Extensions.CollectionExtensions.AddIfNotNull``1(System.Collections.Generic.ICollection{``0},``0)
  isExternal: true
  name: AddIfNotNull<T>(ICollection<T>, T)
  nameWithType: CollectionExtensions.AddIfNotNull<T>(ICollection<T>, T)
  fullName: Hybrid.Extensions.CollectionExtensions.AddIfNotNull<T>(System.Collections.Generic.ICollection<T>, T)
  nameWithType.vb: CollectionExtensions.AddIfNotNull(Of T)(ICollection(Of T), T)
  fullName.vb: Hybrid.Extensions.CollectionExtensions.AddIfNotNull(Of T)(System.Collections.Generic.ICollection(Of T), T)
  name.vb: AddIfNotNull(Of T)(ICollection(Of T), T)
  spec.csharp:
  - uid: Hybrid.Extensions.CollectionExtensions.AddIfNotNull``1(System.Collections.Generic.ICollection{``0},``0)
    name: AddIfNotNull<T>
    nameWithType: CollectionExtensions.AddIfNotNull<T>
    fullName: Hybrid.Extensions.CollectionExtensions.AddIfNotNull<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.CollectionExtensions.AddIfNotNull``1(System.Collections.Generic.ICollection{``0},``0)
    name: AddIfNotNull(Of T)
    nameWithType: CollectionExtensions.AddIfNotNull(Of T)
    fullName: Hybrid.Extensions.CollectionExtensions.AddIfNotNull(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.CollectionExtensions.GetOrAdd``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Boolean},System.Func{``0})
  commentId: M:Hybrid.Extensions.CollectionExtensions.GetOrAdd``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Boolean},System.Func{``0})
  isExternal: true
  name: GetOrAdd<T>(ICollection<T>, Func<T, Boolean>, Func<T>)
  nameWithType: CollectionExtensions.GetOrAdd<T>(ICollection<T>, Func<T, Boolean>, Func<T>)
  fullName: Hybrid.Extensions.CollectionExtensions.GetOrAdd<T>(System.Collections.Generic.ICollection<T>, System.Func<T, System.Boolean>, System.Func<T>)
  nameWithType.vb: CollectionExtensions.GetOrAdd(Of T)(ICollection(Of T), Func(Of T, Boolean), Func(Of T))
  fullName.vb: Hybrid.Extensions.CollectionExtensions.GetOrAdd(Of T)(System.Collections.Generic.ICollection(Of T), System.Func(Of T, System.Boolean), System.Func(Of T))
  name.vb: GetOrAdd(Of T)(ICollection(Of T), Func(Of T, Boolean), Func(Of T))
  spec.csharp:
  - uid: Hybrid.Extensions.CollectionExtensions.GetOrAdd``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Boolean},System.Func{``0})
    name: GetOrAdd<T>
    nameWithType: CollectionExtensions.GetOrAdd<T>
    fullName: Hybrid.Extensions.CollectionExtensions.GetOrAdd<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.CollectionExtensions.GetOrAdd``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Boolean},System.Func{``0})
    name: GetOrAdd(Of T)
    nameWithType: CollectionExtensions.GetOrAdd(Of T)
    fullName: Hybrid.Extensions.CollectionExtensions.GetOrAdd(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.CollectionExtensions.IsNullOrEmpty``1(System.Collections.Generic.ICollection{``0})
  commentId: M:Hybrid.Extensions.CollectionExtensions.IsNullOrEmpty``1(System.Collections.Generic.ICollection{``0})
  isExternal: true
  name: IsNullOrEmpty<T>(ICollection<T>)
  nameWithType: CollectionExtensions.IsNullOrEmpty<T>(ICollection<T>)
  fullName: Hybrid.Extensions.CollectionExtensions.IsNullOrEmpty<T>(System.Collections.Generic.ICollection<T>)
  nameWithType.vb: CollectionExtensions.IsNullOrEmpty(Of T)(ICollection(Of T))
  fullName.vb: Hybrid.Extensions.CollectionExtensions.IsNullOrEmpty(Of T)(System.Collections.Generic.ICollection(Of T))
  name.vb: IsNullOrEmpty(Of T)(ICollection(Of T))
  spec.csharp:
  - uid: Hybrid.Extensions.CollectionExtensions.IsNullOrEmpty``1(System.Collections.Generic.ICollection{``0})
    name: IsNullOrEmpty<T>
    nameWithType: CollectionExtensions.IsNullOrEmpty<T>
    fullName: Hybrid.Extensions.CollectionExtensions.IsNullOrEmpty<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.CollectionExtensions.IsNullOrEmpty``1(System.Collections.Generic.ICollection{``0})
    name: IsNullOrEmpty(Of T)
    nameWithType: CollectionExtensions.IsNullOrEmpty(Of T)
    fullName: Hybrid.Extensions.CollectionExtensions.IsNullOrEmpty(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.CollectionExtensions.AddIfNotContains``1(System.Collections.Generic.ICollection{``0},``0)
  commentId: M:Hybrid.Extensions.CollectionExtensions.AddIfNotContains``1(System.Collections.Generic.ICollection{``0},``0)
  isExternal: true
  name: AddIfNotContains<T>(ICollection<T>, T)
  nameWithType: CollectionExtensions.AddIfNotContains<T>(ICollection<T>, T)
  fullName: Hybrid.Extensions.CollectionExtensions.AddIfNotContains<T>(System.Collections.Generic.ICollection<T>, T)
  nameWithType.vb: CollectionExtensions.AddIfNotContains(Of T)(ICollection(Of T), T)
  fullName.vb: Hybrid.Extensions.CollectionExtensions.AddIfNotContains(Of T)(System.Collections.Generic.ICollection(Of T), T)
  name.vb: AddIfNotContains(Of T)(ICollection(Of T), T)
  spec.csharp:
  - uid: Hybrid.Extensions.CollectionExtensions.AddIfNotContains``1(System.Collections.Generic.ICollection{``0},``0)
    name: AddIfNotContains<T>
    nameWithType: CollectionExtensions.AddIfNotContains<T>
    fullName: Hybrid.Extensions.CollectionExtensions.AddIfNotContains<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.CollectionExtensions.AddIfNotContains``1(System.Collections.Generic.ICollection{``0},``0)
    name: AddIfNotContains(Of T)
    nameWithType: CollectionExtensions.AddIfNotContains(Of T)
    fullName: Hybrid.Extensions.CollectionExtensions.AddIfNotContains(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.EnumerableExtensions.JoinAsString``1(System.Collections.Generic.IEnumerable{``0},System.String)
  commentId: M:Hybrid.Extensions.EnumerableExtensions.JoinAsString``1(System.Collections.Generic.IEnumerable{``0},System.String)
  isExternal: true
  name: JoinAsString<T>(IEnumerable<T>, String)
  nameWithType: EnumerableExtensions.JoinAsString<T>(IEnumerable<T>, String)
  fullName: Hybrid.Extensions.EnumerableExtensions.JoinAsString<T>(System.Collections.Generic.IEnumerable<T>, System.String)
  nameWithType.vb: EnumerableExtensions.JoinAsString(Of T)(IEnumerable(Of T), String)
  fullName.vb: Hybrid.Extensions.EnumerableExtensions.JoinAsString(Of T)(System.Collections.Generic.IEnumerable(Of T), System.String)
  name.vb: JoinAsString(Of T)(IEnumerable(Of T), String)
  spec.csharp:
  - uid: Hybrid.Extensions.EnumerableExtensions.JoinAsString``1(System.Collections.Generic.IEnumerable{``0},System.String)
    name: JoinAsString<T>
    nameWithType: EnumerableExtensions.JoinAsString<T>
    fullName: Hybrid.Extensions.EnumerableExtensions.JoinAsString<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.EnumerableExtensions.JoinAsString``1(System.Collections.Generic.IEnumerable{``0},System.String)
    name: JoinAsString(Of T)
    nameWithType: EnumerableExtensions.JoinAsString(Of T)
    fullName: Hybrid.Extensions.EnumerableExtensions.JoinAsString(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.EnumerableExtensions
  commentId: T:Hybrid.Extensions.EnumerableExtensions
  parent: Hybrid.Extensions
  name: EnumerableExtensions
  nameWithType: EnumerableExtensions
  fullName: Hybrid.Extensions.EnumerableExtensions
- uid: Hybrid.Extensions.EnumerableExtensions.WhereIf``1(System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Func{``0,System.Boolean})
  commentId: M:Hybrid.Extensions.EnumerableExtensions.WhereIf``1(System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Func{``0,System.Boolean})
  isExternal: true
  name: WhereIf<T>(IEnumerable<T>, Boolean, Func<T, Boolean>)
  nameWithType: EnumerableExtensions.WhereIf<T>(IEnumerable<T>, Boolean, Func<T, Boolean>)
  fullName: Hybrid.Extensions.EnumerableExtensions.WhereIf<T>(System.Collections.Generic.IEnumerable<T>, System.Boolean, System.Func<T, System.Boolean>)
  nameWithType.vb: EnumerableExtensions.WhereIf(Of T)(IEnumerable(Of T), Boolean, Func(Of T, Boolean))
  fullName.vb: Hybrid.Extensions.EnumerableExtensions.WhereIf(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Boolean, System.Func(Of T, System.Boolean))
  name.vb: WhereIf(Of T)(IEnumerable(Of T), Boolean, Func(Of T, Boolean))
  spec.csharp:
  - uid: Hybrid.Extensions.EnumerableExtensions.WhereIf``1(System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Func{``0,System.Boolean})
    name: WhereIf<T>
    nameWithType: EnumerableExtensions.WhereIf<T>
    fullName: Hybrid.Extensions.EnumerableExtensions.WhereIf<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.EnumerableExtensions.WhereIf``1(System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Func{``0,System.Boolean})
    name: WhereIf(Of T)
    nameWithType: EnumerableExtensions.WhereIf(Of T)
    fullName: Hybrid.Extensions.EnumerableExtensions.WhereIf(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.EnumerableExtensions.WhereIf``1(System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Func{``0,System.Int32,System.Boolean})
  commentId: M:Hybrid.Extensions.EnumerableExtensions.WhereIf``1(System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Func{``0,System.Int32,System.Boolean})
  isExternal: true
  name: WhereIf<T>(IEnumerable<T>, Boolean, Func<T, Int32, Boolean>)
  nameWithType: EnumerableExtensions.WhereIf<T>(IEnumerable<T>, Boolean, Func<T, Int32, Boolean>)
  fullName: Hybrid.Extensions.EnumerableExtensions.WhereIf<T>(System.Collections.Generic.IEnumerable<T>, System.Boolean, System.Func<T, System.Int32, System.Boolean>)
  nameWithType.vb: EnumerableExtensions.WhereIf(Of T)(IEnumerable(Of T), Boolean, Func(Of T, Int32, Boolean))
  fullName.vb: Hybrid.Extensions.EnumerableExtensions.WhereIf(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Boolean, System.Func(Of T, System.Int32, System.Boolean))
  name.vb: WhereIf(Of T)(IEnumerable(Of T), Boolean, Func(Of T, Int32, Boolean))
  spec.csharp:
  - uid: Hybrid.Extensions.EnumerableExtensions.WhereIf``1(System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Func{``0,System.Int32,System.Boolean})
    name: WhereIf<T>
    nameWithType: EnumerableExtensions.WhereIf<T>
    fullName: Hybrid.Extensions.EnumerableExtensions.WhereIf<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.EnumerableExtensions.WhereIf``1(System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Func{``0,System.Int32,System.Boolean})
    name: WhereIf(Of T)
    nameWithType: EnumerableExtensions.WhereIf(Of T)
    fullName: Hybrid.Extensions.EnumerableExtensions.WhereIf(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.EnumerableExtensions.Shuffle``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:Hybrid.Extensions.EnumerableExtensions.Shuffle``1(System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: Shuffle<TSource>(IEnumerable<TSource>)
  nameWithType: EnumerableExtensions.Shuffle<TSource>(IEnumerable<TSource>)
  fullName: Hybrid.Extensions.EnumerableExtensions.Shuffle<TSource>(System.Collections.Generic.IEnumerable<TSource>)
  nameWithType.vb: EnumerableExtensions.Shuffle(Of TSource)(IEnumerable(Of TSource))
  fullName.vb: Hybrid.Extensions.EnumerableExtensions.Shuffle(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: Shuffle(Of TSource)(IEnumerable(Of TSource))
  spec.csharp:
  - uid: Hybrid.Extensions.EnumerableExtensions.Shuffle``1(System.Collections.Generic.IEnumerable{``0})
    name: Shuffle<TSource>
    nameWithType: EnumerableExtensions.Shuffle<TSource>
    fullName: Hybrid.Extensions.EnumerableExtensions.Shuffle<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.EnumerableExtensions.Shuffle``1(System.Collections.Generic.IEnumerable{``0})
    name: Shuffle(Of TSource)
    nameWithType: EnumerableExtensions.Shuffle(Of TSource)
    fullName: Hybrid.Extensions.EnumerableExtensions.Shuffle(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.EnumerableExtensions.ExpandAndToString``1(System.Collections.Generic.IEnumerable{``0},System.String)
  commentId: M:Hybrid.Extensions.EnumerableExtensions.ExpandAndToString``1(System.Collections.Generic.IEnumerable{``0},System.String)
  isExternal: true
  name: ExpandAndToString<T>(IEnumerable<T>, String)
  nameWithType: EnumerableExtensions.ExpandAndToString<T>(IEnumerable<T>, String)
  fullName: Hybrid.Extensions.EnumerableExtensions.ExpandAndToString<T>(System.Collections.Generic.IEnumerable<T>, System.String)
  nameWithType.vb: EnumerableExtensions.ExpandAndToString(Of T)(IEnumerable(Of T), String)
  fullName.vb: Hybrid.Extensions.EnumerableExtensions.ExpandAndToString(Of T)(System.Collections.Generic.IEnumerable(Of T), System.String)
  name.vb: ExpandAndToString(Of T)(IEnumerable(Of T), String)
  spec.csharp:
  - uid: Hybrid.Extensions.EnumerableExtensions.ExpandAndToString``1(System.Collections.Generic.IEnumerable{``0},System.String)
    name: ExpandAndToString<T>
    nameWithType: EnumerableExtensions.ExpandAndToString<T>
    fullName: Hybrid.Extensions.EnumerableExtensions.ExpandAndToString<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.EnumerableExtensions.ExpandAndToString``1(System.Collections.Generic.IEnumerable{``0},System.String)
    name: ExpandAndToString(Of T)
    nameWithType: EnumerableExtensions.ExpandAndToString(Of T)
    fullName: Hybrid.Extensions.EnumerableExtensions.ExpandAndToString(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.EnumerableExtensions.ExpandAndToString``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.String)
  commentId: M:Hybrid.Extensions.EnumerableExtensions.ExpandAndToString``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.String)
  isExternal: true
  name: ExpandAndToString<T>(IEnumerable<T>, Func<T, String>, String)
  nameWithType: EnumerableExtensions.ExpandAndToString<T>(IEnumerable<T>, Func<T, String>, String)
  fullName: Hybrid.Extensions.EnumerableExtensions.ExpandAndToString<T>(System.Collections.Generic.IEnumerable<T>, System.Func<T, System.String>, System.String)
  nameWithType.vb: EnumerableExtensions.ExpandAndToString(Of T)(IEnumerable(Of T), Func(Of T, String), String)
  fullName.vb: Hybrid.Extensions.EnumerableExtensions.ExpandAndToString(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Func(Of T, System.String), System.String)
  name.vb: ExpandAndToString(Of T)(IEnumerable(Of T), Func(Of T, String), String)
  spec.csharp:
  - uid: Hybrid.Extensions.EnumerableExtensions.ExpandAndToString``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.String)
    name: ExpandAndToString<T>
    nameWithType: EnumerableExtensions.ExpandAndToString<T>
    fullName: Hybrid.Extensions.EnumerableExtensions.ExpandAndToString<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.EnumerableExtensions.ExpandAndToString``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.String)
    name: ExpandAndToString(Of T)
    nameWithType: EnumerableExtensions.ExpandAndToString(Of T)
    fullName: Hybrid.Extensions.EnumerableExtensions.ExpandAndToString(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.EnumerableExtensions.IsEmpty``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:Hybrid.Extensions.EnumerableExtensions.IsEmpty``1(System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: IsEmpty<T>(IEnumerable<T>)
  nameWithType: EnumerableExtensions.IsEmpty<T>(IEnumerable<T>)
  fullName: Hybrid.Extensions.EnumerableExtensions.IsEmpty<T>(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: EnumerableExtensions.IsEmpty(Of T)(IEnumerable(Of T))
  fullName.vb: Hybrid.Extensions.EnumerableExtensions.IsEmpty(Of T)(System.Collections.Generic.IEnumerable(Of T))
  name.vb: IsEmpty(Of T)(IEnumerable(Of T))
  spec.csharp:
  - uid: Hybrid.Extensions.EnumerableExtensions.IsEmpty``1(System.Collections.Generic.IEnumerable{``0})
    name: IsEmpty<T>
    nameWithType: EnumerableExtensions.IsEmpty<T>
    fullName: Hybrid.Extensions.EnumerableExtensions.IsEmpty<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.EnumerableExtensions.IsEmpty``1(System.Collections.Generic.IEnumerable{``0})
    name: IsEmpty(Of T)
    nameWithType: EnumerableExtensions.IsEmpty(Of T)
    fullName: Hybrid.Extensions.EnumerableExtensions.IsEmpty(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.EnumerableExtensions.WhereIf``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Boolean)
  commentId: M:Hybrid.Extensions.EnumerableExtensions.WhereIf``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Boolean)
  isExternal: true
  name: WhereIf<T>(IEnumerable<T>, Func<T, Boolean>, Boolean)
  nameWithType: EnumerableExtensions.WhereIf<T>(IEnumerable<T>, Func<T, Boolean>, Boolean)
  fullName: Hybrid.Extensions.EnumerableExtensions.WhereIf<T>(System.Collections.Generic.IEnumerable<T>, System.Func<T, System.Boolean>, System.Boolean)
  nameWithType.vb: EnumerableExtensions.WhereIf(Of T)(IEnumerable(Of T), Func(Of T, Boolean), Boolean)
  fullName.vb: Hybrid.Extensions.EnumerableExtensions.WhereIf(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Func(Of T, System.Boolean), System.Boolean)
  name.vb: WhereIf(Of T)(IEnumerable(Of T), Func(Of T, Boolean), Boolean)
  spec.csharp:
  - uid: Hybrid.Extensions.EnumerableExtensions.WhereIf``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Boolean)
    name: WhereIf<T>
    nameWithType: EnumerableExtensions.WhereIf<T>
    fullName: Hybrid.Extensions.EnumerableExtensions.WhereIf<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.EnumerableExtensions.WhereIf``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Boolean)
    name: WhereIf(Of T)
    nameWithType: EnumerableExtensions.WhereIf(Of T)
    fullName: Hybrid.Extensions.EnumerableExtensions.WhereIf(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.EnumerableExtensions.DistinctBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  commentId: M:Hybrid.Extensions.EnumerableExtensions.DistinctBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  isExternal: true
  name: DistinctBy<T, TKey>(IEnumerable<T>, Func<T, TKey>)
  nameWithType: EnumerableExtensions.DistinctBy<T, TKey>(IEnumerable<T>, Func<T, TKey>)
  fullName: Hybrid.Extensions.EnumerableExtensions.DistinctBy<T, TKey>(System.Collections.Generic.IEnumerable<T>, System.Func<T, TKey>)
  nameWithType.vb: EnumerableExtensions.DistinctBy(Of T, TKey)(IEnumerable(Of T), Func(Of T, TKey))
  fullName.vb: Hybrid.Extensions.EnumerableExtensions.DistinctBy(Of T, TKey)(System.Collections.Generic.IEnumerable(Of T), System.Func(Of T, TKey))
  name.vb: DistinctBy(Of T, TKey)(IEnumerable(Of T), Func(Of T, TKey))
  spec.csharp:
  - uid: Hybrid.Extensions.EnumerableExtensions.DistinctBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
    name: DistinctBy<T, TKey>
    nameWithType: EnumerableExtensions.DistinctBy<T, TKey>
    fullName: Hybrid.Extensions.EnumerableExtensions.DistinctBy<T, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.EnumerableExtensions.DistinctBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
    name: DistinctBy(Of T, TKey)
    nameWithType: EnumerableExtensions.DistinctBy(Of T, TKey)
    fullName: Hybrid.Extensions.EnumerableExtensions.DistinctBy(Of T, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.EnumerableExtensions.OrderBy``1(System.Collections.Generic.IEnumerable{``0},System.String,System.ComponentModel.ListSortDirection)
  commentId: M:Hybrid.Extensions.EnumerableExtensions.OrderBy``1(System.Collections.Generic.IEnumerable{``0},System.String,System.ComponentModel.ListSortDirection)
  isExternal: true
  name: OrderBy<T>(IEnumerable<T>, String, ListSortDirection)
  nameWithType: EnumerableExtensions.OrderBy<T>(IEnumerable<T>, String, ListSortDirection)
  fullName: Hybrid.Extensions.EnumerableExtensions.OrderBy<T>(System.Collections.Generic.IEnumerable<T>, System.String, System.ComponentModel.ListSortDirection)
  nameWithType.vb: EnumerableExtensions.OrderBy(Of T)(IEnumerable(Of T), String, ListSortDirection)
  fullName.vb: Hybrid.Extensions.EnumerableExtensions.OrderBy(Of T)(System.Collections.Generic.IEnumerable(Of T), System.String, System.ComponentModel.ListSortDirection)
  name.vb: OrderBy(Of T)(IEnumerable(Of T), String, ListSortDirection)
  spec.csharp:
  - uid: Hybrid.Extensions.EnumerableExtensions.OrderBy``1(System.Collections.Generic.IEnumerable{``0},System.String,System.ComponentModel.ListSortDirection)
    name: OrderBy<T>
    nameWithType: EnumerableExtensions.OrderBy<T>
    fullName: Hybrid.Extensions.EnumerableExtensions.OrderBy<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.ComponentModel.ListSortDirection
    name: ListSortDirection
    nameWithType: ListSortDirection
    fullName: System.ComponentModel.ListSortDirection
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.EnumerableExtensions.OrderBy``1(System.Collections.Generic.IEnumerable{``0},System.String,System.ComponentModel.ListSortDirection)
    name: OrderBy(Of T)
    nameWithType: EnumerableExtensions.OrderBy(Of T)
    fullName: Hybrid.Extensions.EnumerableExtensions.OrderBy(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.ComponentModel.ListSortDirection
    name: ListSortDirection
    nameWithType: ListSortDirection
    fullName: System.ComponentModel.ListSortDirection
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.EnumerableExtensions.OrderBy``1(System.Collections.Generic.IEnumerable{``0},Hybrid.Filter.SortCondition)
  commentId: M:Hybrid.Extensions.EnumerableExtensions.OrderBy``1(System.Collections.Generic.IEnumerable{``0},Hybrid.Filter.SortCondition)
  isExternal: true
  name: OrderBy<T>(IEnumerable<T>, SortCondition)
  nameWithType: EnumerableExtensions.OrderBy<T>(IEnumerable<T>, SortCondition)
  fullName: Hybrid.Extensions.EnumerableExtensions.OrderBy<T>(System.Collections.Generic.IEnumerable<T>, Hybrid.Filter.SortCondition)
  nameWithType.vb: EnumerableExtensions.OrderBy(Of T)(IEnumerable(Of T), SortCondition)
  fullName.vb: Hybrid.Extensions.EnumerableExtensions.OrderBy(Of T)(System.Collections.Generic.IEnumerable(Of T), Hybrid.Filter.SortCondition)
  name.vb: OrderBy(Of T)(IEnumerable(Of T), SortCondition)
  spec.csharp:
  - uid: Hybrid.Extensions.EnumerableExtensions.OrderBy``1(System.Collections.Generic.IEnumerable{``0},Hybrid.Filter.SortCondition)
    name: OrderBy<T>
    nameWithType: EnumerableExtensions.OrderBy<T>
    fullName: Hybrid.Extensions.EnumerableExtensions.OrderBy<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Hybrid.Filter.SortCondition
    name: SortCondition
    nameWithType: SortCondition
    fullName: Hybrid.Filter.SortCondition
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.EnumerableExtensions.OrderBy``1(System.Collections.Generic.IEnumerable{``0},Hybrid.Filter.SortCondition)
    name: OrderBy(Of T)
    nameWithType: EnumerableExtensions.OrderBy(Of T)
    fullName: Hybrid.Extensions.EnumerableExtensions.OrderBy(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Hybrid.Filter.SortCondition
    name: SortCondition
    nameWithType: SortCondition
    fullName: Hybrid.Filter.SortCondition
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.EnumerableExtensions.OrderBy``1(System.Collections.Generic.IEnumerable{``0},Hybrid.Filter.SortCondition{``0})
  commentId: M:Hybrid.Extensions.EnumerableExtensions.OrderBy``1(System.Collections.Generic.IEnumerable{``0},Hybrid.Filter.SortCondition{``0})
  isExternal: true
  name: OrderBy<T>(IEnumerable<T>, SortCondition<T>)
  nameWithType: EnumerableExtensions.OrderBy<T>(IEnumerable<T>, SortCondition<T>)
  fullName: Hybrid.Extensions.EnumerableExtensions.OrderBy<T>(System.Collections.Generic.IEnumerable<T>, Hybrid.Filter.SortCondition<T>)
  nameWithType.vb: EnumerableExtensions.OrderBy(Of T)(IEnumerable(Of T), SortCondition(Of T))
  fullName.vb: Hybrid.Extensions.EnumerableExtensions.OrderBy(Of T)(System.Collections.Generic.IEnumerable(Of T), Hybrid.Filter.SortCondition(Of T))
  name.vb: OrderBy(Of T)(IEnumerable(Of T), SortCondition(Of T))
  spec.csharp:
  - uid: Hybrid.Extensions.EnumerableExtensions.OrderBy``1(System.Collections.Generic.IEnumerable{``0},Hybrid.Filter.SortCondition{``0})
    name: OrderBy<T>
    nameWithType: EnumerableExtensions.OrderBy<T>
    fullName: Hybrid.Extensions.EnumerableExtensions.OrderBy<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Hybrid.Filter.SortCondition`1
    name: SortCondition
    nameWithType: SortCondition
    fullName: Hybrid.Filter.SortCondition
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.EnumerableExtensions.OrderBy``1(System.Collections.Generic.IEnumerable{``0},Hybrid.Filter.SortCondition{``0})
    name: OrderBy(Of T)
    nameWithType: EnumerableExtensions.OrderBy(Of T)
    fullName: Hybrid.Extensions.EnumerableExtensions.OrderBy(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Hybrid.Filter.SortCondition`1
    name: SortCondition
    nameWithType: SortCondition
    fullName: Hybrid.Filter.SortCondition
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.EnumerableExtensions.OrderByPrefixes``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.String[])
  commentId: M:Hybrid.Extensions.EnumerableExtensions.OrderByPrefixes``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.String[])
  isExternal: true
  name: OrderByPrefixes<T>(IEnumerable<T>, Func<T, String>, String[])
  nameWithType: EnumerableExtensions.OrderByPrefixes<T>(IEnumerable<T>, Func<T, String>, String[])
  fullName: Hybrid.Extensions.EnumerableExtensions.OrderByPrefixes<T>(System.Collections.Generic.IEnumerable<T>, System.Func<T, System.String>, System.String[])
  nameWithType.vb: EnumerableExtensions.OrderByPrefixes(Of T)(IEnumerable(Of T), Func(Of T, String), String())
  fullName.vb: Hybrid.Extensions.EnumerableExtensions.OrderByPrefixes(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Func(Of T, System.String), System.String())
  name.vb: OrderByPrefixes(Of T)(IEnumerable(Of T), Func(Of T, String), String())
  spec.csharp:
  - uid: Hybrid.Extensions.EnumerableExtensions.OrderByPrefixes``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.String[])
    name: OrderByPrefixes<T>
    nameWithType: EnumerableExtensions.OrderByPrefixes<T>
    fullName: Hybrid.Extensions.EnumerableExtensions.OrderByPrefixes<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.EnumerableExtensions.OrderByPrefixes``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.String[])
    name: OrderByPrefixes(Of T)
    nameWithType: EnumerableExtensions.OrderByPrefixes(Of T)
    fullName: Hybrid.Extensions.EnumerableExtensions.OrderByPrefixes(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
  commentId: M:Hybrid.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
  isExternal: true
  name: CastTo(Object, Type)
  nameWithType: ObjectExtensions.CastTo(Object, Type)
  fullName: Hybrid.Extensions.ObjectExtensions.CastTo(System.Object, System.Type)
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
    name: CastTo
    nameWithType: ObjectExtensions.CastTo
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
    name: CastTo
    nameWithType: ObjectExtensions.CastTo
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ObjectExtensions
  commentId: T:Hybrid.Extensions.ObjectExtensions
  parent: Hybrid.Extensions
  name: ObjectExtensions
  nameWithType: ObjectExtensions
  fullName: Hybrid.Extensions.ObjectExtensions
- uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object)
  commentId: M:Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object)
  isExternal: true
  name: CastTo<T>(Object)
  nameWithType: ObjectExtensions.CastTo<T>(Object)
  fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>(System.Object)
  nameWithType.vb: ObjectExtensions.CastTo(Of T)(Object)
  fullName.vb: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)(System.Object)
  name.vb: CastTo(Of T)(Object)
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object)
    name: CastTo<T>
    nameWithType: ObjectExtensions.CastTo<T>
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object)
    name: CastTo(Of T)
    nameWithType: ObjectExtensions.CastTo(Of T)
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
  commentId: M:Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
  isExternal: true
  name: CastTo<T>(Object, T)
  nameWithType: ObjectExtensions.CastTo<T>(Object, T)
  fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>(System.Object, T)
  nameWithType.vb: ObjectExtensions.CastTo(Of T)(Object, T)
  fullName.vb: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)(System.Object, T)
  name.vb: CastTo(Of T)(Object, T)
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
    name: CastTo<T>
    nameWithType: ObjectExtensions.CastTo<T>
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
    name: CastTo(Of T)
    nameWithType: ObjectExtensions.CastTo(Of T)
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
  commentId: M:Hybrid.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
  name: IsIn<T>(T, T[])
  nameWithType: ObjectExtensions.IsIn<T>(T, T[])
  fullName: Hybrid.Extensions.ObjectExtensions.IsIn<T>(T, T[])
  nameWithType.vb: ObjectExtensions.IsIn(Of T)(T, T())
  fullName.vb: Hybrid.Extensions.ObjectExtensions.IsIn(Of T)(T, T())
  name.vb: IsIn(Of T)(T, T())
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
    name: IsIn<T>
    nameWithType: ObjectExtensions.IsIn<T>
    fullName: Hybrid.Extensions.ObjectExtensions.IsIn<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
    name: IsIn(Of T)
    nameWithType: ObjectExtensions.IsIn(Of T)
    fullName: Hybrid.Extensions.ObjectExtensions.IsIn(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ObjectExtensions.ToDynamic(System.Object)
  commentId: M:Hybrid.Extensions.ObjectExtensions.ToDynamic(System.Object)
  isExternal: true
  name: ToDynamic(Object)
  nameWithType: ObjectExtensions.ToDynamic(Object)
  fullName: Hybrid.Extensions.ObjectExtensions.ToDynamic(System.Object)
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.ToDynamic(System.Object)
    name: ToDynamic
    nameWithType: ObjectExtensions.ToDynamic
    fullName: Hybrid.Extensions.ObjectExtensions.ToDynamic
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.ToDynamic(System.Object)
    name: ToDynamic
    nameWithType: ObjectExtensions.ToDynamic
    fullName: Hybrid.Extensions.ObjectExtensions.ToDynamic
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ObjectExtensions.DeepClone``1(``0)
  commentId: M:Hybrid.Extensions.ObjectExtensions.DeepClone``1(``0)
  name: DeepClone<T>(T)
  nameWithType: ObjectExtensions.DeepClone<T>(T)
  fullName: Hybrid.Extensions.ObjectExtensions.DeepClone<T>(T)
  nameWithType.vb: ObjectExtensions.DeepClone(Of T)(T)
  fullName.vb: Hybrid.Extensions.ObjectExtensions.DeepClone(Of T)(T)
  name.vb: DeepClone(Of T)(T)
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.DeepClone``1(``0)
    name: DeepClone<T>
    nameWithType: ObjectExtensions.DeepClone<T>
    fullName: Hybrid.Extensions.ObjectExtensions.DeepClone<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.DeepClone``1(``0)
    name: DeepClone(Of T)
    nameWithType: ObjectExtensions.DeepClone(Of T)
    fullName: Hybrid.Extensions.ObjectExtensions.DeepClone(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
  commentId: M:Hybrid.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
  isExternal: true
  name: Required<T>(T, Func<T, Boolean>, String)
  nameWithType: ParameterCheckExtensions.Required<T>(T, Func<T, Boolean>, String)
  fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<T>(T, System.Func<T, System.Boolean>, System.String)
  nameWithType.vb: ParameterCheckExtensions.Required(Of T)(T, Func(Of T, Boolean), String)
  fullName.vb: Hybrid.Extensions.ParameterCheckExtensions.Required(Of T)(T, System.Func(Of T, System.Boolean), System.String)
  name.vb: Required(Of T)(T, Func(Of T, Boolean), String)
  spec.csharp:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
    name: Required<T>
    nameWithType: ParameterCheckExtensions.Required<T>
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
    name: Required(Of T)
    nameWithType: ParameterCheckExtensions.Required(Of T)
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ParameterCheckExtensions
  commentId: T:Hybrid.Extensions.ParameterCheckExtensions
  parent: Hybrid.Extensions
  name: ParameterCheckExtensions
  nameWithType: ParameterCheckExtensions
  fullName: Hybrid.Extensions.ParameterCheckExtensions
- uid: Hybrid.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
  commentId: M:Hybrid.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
  isExternal: true
  name: Required<T, TException>(T, Func<T, Boolean>, String)
  nameWithType: ParameterCheckExtensions.Required<T, TException>(T, Func<T, Boolean>, String)
  fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<T, TException>(T, System.Func<T, System.Boolean>, System.String)
  nameWithType.vb: ParameterCheckExtensions.Required(Of T, TException)(T, Func(Of T, Boolean), String)
  fullName.vb: Hybrid.Extensions.ParameterCheckExtensions.Required(Of T, TException)(T, System.Func(Of T, System.Boolean), System.String)
  name.vb: Required(Of T, TException)(T, Func(Of T, Boolean), String)
  spec.csharp:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
    name: Required<T, TException>
    nameWithType: ParameterCheckExtensions.Required<T, TException>
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<T, TException>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
    name: Required(Of T, TException)
    nameWithType: ParameterCheckExtensions.Required(Of T, TException)
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required(Of T, TException)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
  commentId: M:Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
  isExternal: true
  name: CheckNotNull<T>(T, String)
  nameWithType: ParameterCheckExtensions.CheckNotNull<T>(T, String)
  fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull<T>(T, System.String)
  nameWithType.vb: ParameterCheckExtensions.CheckNotNull(Of T)(T, String)
  fullName.vb: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull(Of T)(T, System.String)
  name.vb: CheckNotNull(Of T)(T, String)
  spec.csharp:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
    name: CheckNotNull<T>
    nameWithType: ParameterCheckExtensions.CheckNotNull<T>
    fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
    name: CheckNotNull(Of T)
    nameWithType: ParameterCheckExtensions.CheckNotNull(Of T)
    fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0},System.String)
  commentId: M:Hybrid.Extensions.ParameterCheckExtensions.CheckNotNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0},System.String)
  isExternal: true
  name: CheckNotNullOrEmpty<T>(IEnumerable<T>, String)
  nameWithType: ParameterCheckExtensions.CheckNotNullOrEmpty<T>(IEnumerable<T>, String)
  fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNullOrEmpty<T>(System.Collections.Generic.IEnumerable<T>, System.String)
  nameWithType.vb: ParameterCheckExtensions.CheckNotNullOrEmpty(Of T)(IEnumerable(Of T), String)
  fullName.vb: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNullOrEmpty(Of T)(System.Collections.Generic.IEnumerable(Of T), System.String)
  name.vb: CheckNotNullOrEmpty(Of T)(IEnumerable(Of T), String)
  spec.csharp:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0},System.String)
    name: CheckNotNullOrEmpty<T>
    nameWithType: ParameterCheckExtensions.CheckNotNullOrEmpty<T>
    fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNullOrEmpty<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0},System.String)
    name: CheckNotNullOrEmpty(Of T)
    nameWithType: ParameterCheckExtensions.CheckNotNullOrEmpty(Of T)
    fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNullOrEmpty(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
  isExternal: true
  name: TryCatch<T>(T, Action<T>, Action<Exception>, Action<T>)
  nameWithType: TryCatchExtensions.TryCatch<T>(T, Action<T>, Action<Exception>, Action<T>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T>(T, System.Action<T>, System.Action<System.Exception>, System.Action<T>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of T)(T, Action(Of T), Action(Of Exception), Action(Of T))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T)(T, System.Action(Of T), System.Action(Of System.Exception), System.Action(Of T))
  name.vb: TryCatch(Of T)(T, Action(Of T), Action(Of Exception), Action(Of T))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
    name: TryCatch<T>
    nameWithType: TryCatchExtensions.TryCatch<T>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
    name: TryCatch(Of T)
    nameWithType: TryCatchExtensions.TryCatch(Of T)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.TryCatchExtensions
  commentId: T:Hybrid.Extensions.TryCatchExtensions
  parent: Hybrid.Extensions
  name: TryCatchExtensions
  nameWithType: TryCatchExtensions
  fullName: Hybrid.Extensions.TryCatchExtensions
- uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
  isExternal: true
  name: TryCatch<T>(T, Action<T>, Action<Exception>)
  nameWithType: TryCatchExtensions.TryCatch<T>(T, Action<T>, Action<Exception>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T>(T, System.Action<T>, System.Action<System.Exception>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of T)(T, Action(Of T), Action(Of Exception))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T)(T, System.Action(Of T), System.Action(Of System.Exception))
  name.vb: TryCatch(Of T)(T, Action(Of T), Action(Of Exception))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
    name: TryCatch<T>
    nameWithType: TryCatchExtensions.TryCatch<T>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
    name: TryCatch(Of T)
    nameWithType: TryCatchExtensions.TryCatch(Of T)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
  isExternal: true
  name: TryCatch<T, TResult>(T, Func<T, TResult>, Action<Exception>, Action<T>)
  nameWithType: TryCatchExtensions.TryCatch<T, TResult>(T, Func<T, TResult>, Action<Exception>, Action<T>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T, TResult>(T, System.Func<T, TResult>, System.Action<System.Exception>, System.Action<T>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of T, TResult)(T, Func(Of T, TResult), Action(Of Exception), Action(Of T))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T, TResult)(T, System.Func(Of T, TResult), System.Action(Of System.Exception), System.Action(Of T))
  name.vb: TryCatch(Of T, TResult)(T, Func(Of T, TResult), Action(Of Exception), Action(Of T))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
    name: TryCatch<T, TResult>
    nameWithType: TryCatchExtensions.TryCatch<T, TResult>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
    name: TryCatch(Of T, TResult)
    nameWithType: TryCatchExtensions.TryCatch(Of T, TResult)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
  isExternal: true
  name: TryCatch<T, TResult>(T, Func<T, TResult>, Action<Exception>)
  nameWithType: TryCatchExtensions.TryCatch<T, TResult>(T, Func<T, TResult>, Action<Exception>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T, TResult>(T, System.Func<T, TResult>, System.Action<System.Exception>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of T, TResult)(T, Func(Of T, TResult), Action(Of Exception))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T, TResult)(T, System.Func(Of T, TResult), System.Action(Of System.Exception))
  name.vb: TryCatch(Of T, TResult)(T, Func(Of T, TResult), Action(Of Exception))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
    name: TryCatch<T, TResult>
    nameWithType: TryCatchExtensions.TryCatch<T, TResult>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
    name: TryCatch(Of T, TResult)
    nameWithType: TryCatchExtensions.TryCatch(Of T, TResult)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
  isExternal: true
  name: TryFinally<T>(T, Action<T>, Action<T>)
  nameWithType: TryCatchExtensions.TryFinally<T>(T, Action<T>, Action<T>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryFinally<T>(T, System.Action<T>, System.Action<T>)
  nameWithType.vb: TryCatchExtensions.TryFinally(Of T)(T, Action(Of T), Action(Of T))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryFinally(Of T)(T, System.Action(Of T), System.Action(Of T))
  name.vb: TryFinally(Of T)(T, Action(Of T), Action(Of T))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
    name: TryFinally<T>
    nameWithType: TryCatchExtensions.TryFinally<T>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryFinally<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
    name: TryFinally(Of T)
    nameWithType: TryCatchExtensions.TryFinally(Of T)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryFinally(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
  commentId: M:Hybrid.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
  isExternal: true
  name: ToJsonString(Object, Boolean, Boolean)
  nameWithType: JsonExtensions.ToJsonString(Object, Boolean, Boolean)
  fullName: Hybrid.Json.JsonExtensions.ToJsonString(System.Object, System.Boolean, System.Boolean)
  spec.csharp:
  - uid: Hybrid.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
    name: ToJsonString
    nameWithType: JsonExtensions.ToJsonString
    fullName: Hybrid.Json.JsonExtensions.ToJsonString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
    name: ToJsonString
    nameWithType: JsonExtensions.ToJsonString
    fullName: Hybrid.Json.JsonExtensions.ToJsonString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Json.JsonExtensions
  commentId: T:Hybrid.Json.JsonExtensions
  parent: Hybrid.Json
  name: JsonExtensions
  nameWithType: JsonExtensions
  fullName: Hybrid.Json.JsonExtensions
- uid: Hybrid.Mapping.MapperExtensions.MapTo``1(System.Object)
  commentId: M:Hybrid.Mapping.MapperExtensions.MapTo``1(System.Object)
  isExternal: true
  name: MapTo<TTarget>(Object)
  nameWithType: MapperExtensions.MapTo<TTarget>(Object)
  fullName: Hybrid.Mapping.MapperExtensions.MapTo<TTarget>(System.Object)
  nameWithType.vb: MapperExtensions.MapTo(Of TTarget)(Object)
  fullName.vb: Hybrid.Mapping.MapperExtensions.MapTo(Of TTarget)(System.Object)
  name.vb: MapTo(Of TTarget)(Object)
  spec.csharp:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``1(System.Object)
    name: MapTo<TTarget>
    nameWithType: MapperExtensions.MapTo<TTarget>
    fullName: Hybrid.Mapping.MapperExtensions.MapTo<TTarget>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``1(System.Object)
    name: MapTo(Of TTarget)
    nameWithType: MapperExtensions.MapTo(Of TTarget)
    fullName: Hybrid.Mapping.MapperExtensions.MapTo(Of TTarget)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Mapping.MapperExtensions
  commentId: T:Hybrid.Mapping.MapperExtensions
  parent: Hybrid.Mapping
  name: MapperExtensions
  nameWithType: MapperExtensions
  fullName: Hybrid.Mapping.MapperExtensions
- uid: Hybrid.Mapping.MapperExtensions.MapTo``2(``0,``1)
  commentId: M:Hybrid.Mapping.MapperExtensions.MapTo``2(``0,``1)
  name: MapTo<TSource, TTarget>(TSource, TTarget)
  nameWithType: MapperExtensions.MapTo<TSource, TTarget>(TSource, TTarget)
  fullName: Hybrid.Mapping.MapperExtensions.MapTo<TSource, TTarget>(TSource, TTarget)
  nameWithType.vb: MapperExtensions.MapTo(Of TSource, TTarget)(TSource, TTarget)
  fullName.vb: Hybrid.Mapping.MapperExtensions.MapTo(Of TSource, TTarget)(TSource, TTarget)
  name.vb: MapTo(Of TSource, TTarget)(TSource, TTarget)
  spec.csharp:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``2(``0,``1)
    name: MapTo<TSource, TTarget>
    nameWithType: MapperExtensions.MapTo<TSource, TTarget>
    fullName: Hybrid.Mapping.MapperExtensions.MapTo<TSource, TTarget>
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``2(``0,``1)
    name: MapTo(Of TSource, TTarget)
    nameWithType: MapperExtensions.MapTo(Of TSource, TTarget)
    fullName: Hybrid.Mapping.MapperExtensions.MapTo(Of TSource, TTarget)
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Reflection.LockExtensions.Locking(System.Object,System.Action)
  commentId: M:Hybrid.Reflection.LockExtensions.Locking(System.Object,System.Action)
  isExternal: true
  name: Locking(Object, Action)
  nameWithType: LockExtensions.Locking(Object, Action)
  fullName: Hybrid.Reflection.LockExtensions.Locking(System.Object, System.Action)
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking(System.Object,System.Action)
    name: Locking
    nameWithType: LockExtensions.Locking
    fullName: Hybrid.Reflection.LockExtensions.Locking
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking(System.Object,System.Action)
    name: Locking
    nameWithType: LockExtensions.Locking
    fullName: Hybrid.Reflection.LockExtensions.Locking
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Reflection.LockExtensions
  commentId: T:Hybrid.Reflection.LockExtensions
  parent: Hybrid.Reflection
  name: LockExtensions
  nameWithType: LockExtensions
  fullName: Hybrid.Reflection.LockExtensions
- uid: Hybrid.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
  commentId: M:Hybrid.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
  isExternal: true
  name: Locking<T>(T, Action<T>)
  nameWithType: LockExtensions.Locking<T>(T, Action<T>)
  fullName: Hybrid.Reflection.LockExtensions.Locking<T>(T, System.Action<T>)
  nameWithType.vb: LockExtensions.Locking(Of T)(T, Action(Of T))
  fullName.vb: Hybrid.Reflection.LockExtensions.Locking(Of T)(T, System.Action(Of T))
  name.vb: Locking(Of T)(T, Action(Of T))
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
    name: Locking<T>
    nameWithType: LockExtensions.Locking<T>
    fullName: Hybrid.Reflection.LockExtensions.Locking<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
    name: Locking(Of T)
    nameWithType: LockExtensions.Locking(Of T)
    fullName: Hybrid.Reflection.LockExtensions.Locking(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
  commentId: M:Hybrid.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
  isExternal: true
  name: Locking<TResult>(Object, Func<TResult>)
  nameWithType: LockExtensions.Locking<TResult>(Object, Func<TResult>)
  fullName: Hybrid.Reflection.LockExtensions.Locking<TResult>(System.Object, System.Func<TResult>)
  nameWithType.vb: LockExtensions.Locking(Of TResult)(Object, Func(Of TResult))
  fullName.vb: Hybrid.Reflection.LockExtensions.Locking(Of TResult)(System.Object, System.Func(Of TResult))
  name.vb: Locking(Of TResult)(Object, Func(Of TResult))
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
    name: Locking<TResult>
    nameWithType: LockExtensions.Locking<TResult>
    fullName: Hybrid.Reflection.LockExtensions.Locking<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
    name: Locking(Of TResult)
    nameWithType: LockExtensions.Locking(Of TResult)
    fullName: Hybrid.Reflection.LockExtensions.Locking(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
  commentId: M:Hybrid.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
  isExternal: true
  name: Locking<TSource, TResult>(TSource, Func<TSource, TResult>)
  nameWithType: LockExtensions.Locking<TSource, TResult>(TSource, Func<TSource, TResult>)
  fullName: Hybrid.Reflection.LockExtensions.Locking<TSource, TResult>(TSource, System.Func<TSource, TResult>)
  nameWithType.vb: LockExtensions.Locking(Of TSource, TResult)(TSource, Func(Of TSource, TResult))
  fullName.vb: Hybrid.Reflection.LockExtensions.Locking(Of TSource, TResult)(TSource, System.Func(Of TSource, TResult))
  name.vb: Locking(Of TSource, TResult)(TSource, Func(Of TSource, TResult))
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
    name: Locking<TSource, TResult>
    nameWithType: LockExtensions.Locking<TSource, TResult>
    fullName: Hybrid.Reflection.LockExtensions.Locking<TSource, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
    name: Locking(Of TSource, TResult)
    nameWithType: LockExtensions.Locking(Of TSource, TResult)
    fullName: Hybrid.Reflection.LockExtensions.Locking(Of TSource, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2(``0)
  commentId: M:Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2(``0)
  name: CheckICreatedTime<TEntity, TKey>(TEntity)
  nameWithType: EntityExtensions.CheckICreatedTime<TEntity, TKey>(TEntity)
  fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime<TEntity, TKey>(TEntity)
  nameWithType.vb: EntityExtensions.CheckICreatedTime(Of TEntity, TKey)(TEntity)
  fullName.vb: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime(Of TEntity, TKey)(TEntity)
  name.vb: CheckICreatedTime(Of TEntity, TKey)(TEntity)
  spec.csharp:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2(``0)
    name: CheckICreatedTime<TEntity, TKey>
    nameWithType: EntityExtensions.CheckICreatedTime<TEntity, TKey>
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime<TEntity, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2(``0)
    name: CheckICreatedTime(Of TEntity, TKey)
    nameWithType: EntityExtensions.CheckICreatedTime(Of TEntity, TKey)
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime(Of TEntity, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Domain.Entities.EntityExtensions
  commentId: T:Hybrid.Domain.Entities.EntityExtensions
  parent: Hybrid.Domain.Entities
  name: EntityExtensions
  nameWithType: EntityExtensions
  fullName: Hybrid.Domain.Entities.EntityExtensions
- uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
  commentId: M:Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
  isExternal: true
  name: CheckICreationAudited<TEntity, TKey, TUserKey>(TEntity, IPrincipal)
  nameWithType: EntityExtensions.CheckICreationAudited<TEntity, TKey, TUserKey>(TEntity, IPrincipal)
  fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited<TEntity, TKey, TUserKey>(TEntity, System.Security.Principal.IPrincipal)
  nameWithType.vb: EntityExtensions.CheckICreationAudited(Of TEntity, TKey, TUserKey)(TEntity, IPrincipal)
  fullName.vb: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited(Of TEntity, TKey, TUserKey)(TEntity, System.Security.Principal.IPrincipal)
  name.vb: CheckICreationAudited(Of TEntity, TKey, TUserKey)(TEntity, IPrincipal)
  spec.csharp:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
    name: CheckICreationAudited<TEntity, TKey, TUserKey>
    nameWithType: EntityExtensions.CheckICreationAudited<TEntity, TKey, TUserKey>
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited<TEntity, TKey, TUserKey>
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
    name: CheckICreationAudited(Of TEntity, TKey, TUserKey)
    nameWithType: EntityExtensions.CheckICreationAudited(Of TEntity, TKey, TUserKey)
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited(Of TEntity, TKey, TUserKey)
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
  commentId: M:Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
  isExternal: true
  name: CheckIUpdateAudited<TEntity, TKey, TUserKey>(TEntity, IPrincipal)
  nameWithType: EntityExtensions.CheckIUpdateAudited<TEntity, TKey, TUserKey>(TEntity, IPrincipal)
  fullName: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited<TEntity, TKey, TUserKey>(TEntity, System.Security.Principal.IPrincipal)
  nameWithType.vb: EntityExtensions.CheckIUpdateAudited(Of TEntity, TKey, TUserKey)(TEntity, IPrincipal)
  fullName.vb: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited(Of TEntity, TKey, TUserKey)(TEntity, System.Security.Principal.IPrincipal)
  name.vb: CheckIUpdateAudited(Of TEntity, TKey, TUserKey)(TEntity, IPrincipal)
  spec.csharp:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
    name: CheckIUpdateAudited<TEntity, TKey, TUserKey>
    nameWithType: EntityExtensions.CheckIUpdateAudited<TEntity, TKey, TUserKey>
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited<TEntity, TKey, TUserKey>
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
    name: CheckIUpdateAudited(Of TEntity, TKey, TUserKey)
    nameWithType: EntityExtensions.CheckIUpdateAudited(Of TEntity, TKey, TUserKey)
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited(Of TEntity, TKey, TUserKey)
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: IdentityServer4.Extensions.IEnumerableExtensions.IsNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:IdentityServer4.Extensions.IEnumerableExtensions.IsNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: IsNullOrEmpty<T>(IEnumerable<T>)
  nameWithType: IEnumerableExtensions.IsNullOrEmpty<T>(IEnumerable<T>)
  fullName: IdentityServer4.Extensions.IEnumerableExtensions.IsNullOrEmpty<T>(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: IEnumerableExtensions.IsNullOrEmpty(Of T)(IEnumerable(Of T))
  fullName.vb: IdentityServer4.Extensions.IEnumerableExtensions.IsNullOrEmpty(Of T)(System.Collections.Generic.IEnumerable(Of T))
  name.vb: IsNullOrEmpty(Of T)(IEnumerable(Of T))
  spec.csharp:
  - uid: IdentityServer4.Extensions.IEnumerableExtensions.IsNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})
    name: IsNullOrEmpty<T>
    nameWithType: IEnumerableExtensions.IsNullOrEmpty<T>
    fullName: IdentityServer4.Extensions.IEnumerableExtensions.IsNullOrEmpty<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: IdentityServer4.Extensions.IEnumerableExtensions.IsNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})
    name: IsNullOrEmpty(Of T)
    nameWithType: IEnumerableExtensions.IsNullOrEmpty(Of T)
    fullName: IdentityServer4.Extensions.IEnumerableExtensions.IsNullOrEmpty(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: IdentityServer4.Extensions.IEnumerableExtensions
  commentId: T:IdentityServer4.Extensions.IEnumerableExtensions
  parent: IdentityServer4.Extensions
  name: IEnumerableExtensions
  nameWithType: IEnumerableExtensions
  fullName: IdentityServer4.Extensions.IEnumerableExtensions
- uid: IdentityServer4.Extensions.IEnumerableExtensions.HasDuplicates``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  commentId: M:IdentityServer4.Extensions.IEnumerableExtensions.HasDuplicates``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  isExternal: true
  name: HasDuplicates<T, TProp>(IEnumerable<T>, Func<T, TProp>)
  nameWithType: IEnumerableExtensions.HasDuplicates<T, TProp>(IEnumerable<T>, Func<T, TProp>)
  fullName: IdentityServer4.Extensions.IEnumerableExtensions.HasDuplicates<T, TProp>(System.Collections.Generic.IEnumerable<T>, System.Func<T, TProp>)
  nameWithType.vb: IEnumerableExtensions.HasDuplicates(Of T, TProp)(IEnumerable(Of T), Func(Of T, TProp))
  fullName.vb: IdentityServer4.Extensions.IEnumerableExtensions.HasDuplicates(Of T, TProp)(System.Collections.Generic.IEnumerable(Of T), System.Func(Of T, TProp))
  name.vb: HasDuplicates(Of T, TProp)(IEnumerable(Of T), Func(Of T, TProp))
  spec.csharp:
  - uid: IdentityServer4.Extensions.IEnumerableExtensions.HasDuplicates``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
    name: HasDuplicates<T, TProp>
    nameWithType: IEnumerableExtensions.HasDuplicates<T, TProp>
    fullName: IdentityServer4.Extensions.IEnumerableExtensions.HasDuplicates<T, TProp>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TProp
    nameWithType: TProp
    fullName: TProp
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: IdentityServer4.Extensions.IEnumerableExtensions.HasDuplicates``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
    name: HasDuplicates(Of T, TProp)
    nameWithType: IEnumerableExtensions.HasDuplicates(Of T, TProp)
    fullName: IdentityServer4.Extensions.IEnumerableExtensions.HasDuplicates(Of T, TProp)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TProp
    nameWithType: TProp
    fullName: TProp
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Collections
  commentId: N:OSharp.Collections
  name: OSharp.Collections
  nameWithType: OSharp.Collections
  fullName: OSharp.Collections
- uid: OSharp.Entity
  commentId: N:OSharp.Entity
  name: OSharp.Entity
  nameWithType: OSharp.Entity
  fullName: OSharp.Entity
- uid: OSharp.Extensions
  commentId: N:OSharp.Extensions
  name: OSharp.Extensions
  nameWithType: OSharp.Extensions
  fullName: OSharp.Extensions
- uid: OSharp.Json
  commentId: N:OSharp.Json
  name: OSharp.Json
  nameWithType: OSharp.Json
  fullName: OSharp.Json
- uid: OSharp.Mapping
  commentId: N:OSharp.Mapping
  name: OSharp.Mapping
  nameWithType: OSharp.Mapping
  fullName: OSharp.Mapping
- uid: OSharp.Reflection
  commentId: N:OSharp.Reflection
  name: OSharp.Reflection
  nameWithType: OSharp.Reflection
  fullName: OSharp.Reflection
- uid: Hybrid.Extensions
  commentId: N:Hybrid.Extensions
  name: Hybrid.Extensions
  nameWithType: Hybrid.Extensions
  fullName: Hybrid.Extensions
- uid: Hybrid.Json
  commentId: N:Hybrid.Json
  name: Hybrid.Json
  nameWithType: Hybrid.Json
  fullName: Hybrid.Json
- uid: Hybrid.Mapping
  commentId: N:Hybrid.Mapping
  name: Hybrid.Mapping
  nameWithType: Hybrid.Mapping
  fullName: Hybrid.Mapping
- uid: Hybrid.Reflection
  commentId: N:Hybrid.Reflection
  name: Hybrid.Reflection
  nameWithType: Hybrid.Reflection
  fullName: Hybrid.Reflection
- uid: Hybrid.Domain.Entities
  commentId: N:Hybrid.Domain.Entities
  name: Hybrid.Domain.Entities
  nameWithType: Hybrid.Domain.Entities
  fullName: Hybrid.Domain.Entities
- uid: IdentityServer4.Extensions
  commentId: N:IdentityServer4.Extensions
  name: IdentityServer4.Extensions
  nameWithType: IdentityServer4.Extensions
  fullName: IdentityServer4.Extensions
- uid: Hybrid.Localization.Configuration.ILocalizationSourceList.Extensions*
  commentId: Overload:Hybrid.Localization.Configuration.ILocalizationSourceList.Extensions
  name: Extensions
  nameWithType: ILocalizationSourceList.Extensions
  fullName: Hybrid.Localization.Configuration.ILocalizationSourceList.Extensions
- uid: System.Collections.Generic.IList{Hybrid.Localization.Sources.LocalizationSourceExtensionInfo}
  commentId: T:System.Collections.Generic.IList{Hybrid.Localization.Sources.LocalizationSourceExtensionInfo}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<LocalizationSourceExtensionInfo>
  nameWithType: IList<LocalizationSourceExtensionInfo>
  fullName: System.Collections.Generic.IList<Hybrid.Localization.Sources.LocalizationSourceExtensionInfo>
  nameWithType.vb: IList(Of LocalizationSourceExtensionInfo)
  fullName.vb: System.Collections.Generic.IList(Of Hybrid.Localization.Sources.LocalizationSourceExtensionInfo)
  name.vb: IList(Of LocalizationSourceExtensionInfo)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Localization.Sources.LocalizationSourceExtensionInfo
    name: LocalizationSourceExtensionInfo
    nameWithType: LocalizationSourceExtensionInfo
    fullName: Hybrid.Localization.Sources.LocalizationSourceExtensionInfo
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Localization.Sources.LocalizationSourceExtensionInfo
    name: LocalizationSourceExtensionInfo
    nameWithType: LocalizationSourceExtensionInfo
    fullName: Hybrid.Localization.Sources.LocalizationSourceExtensionInfo
  - name: )
    nameWithType: )
    fullName: )
