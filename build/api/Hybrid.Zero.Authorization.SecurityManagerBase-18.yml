### YamlMime:ManagedReference
items:
- uid: Hybrid.Zero.Authorization.SecurityManagerBase`18
  commentId: T:Hybrid.Zero.Authorization.SecurityManagerBase`18
  id: SecurityManagerBase`18
  parent: Hybrid.Zero.Authorization
  children:
  - Hybrid.Zero.Authorization.SecurityManagerBase`18.#ctor(Hybrid.EventBuses.IEventBus,Hybrid.Domain.Repositories.IRepository{`0,System.Guid},Hybrid.Domain.Repositories.IRepository{`2,System.Guid},Hybrid.Domain.Repositories.IRepository{`4,`6},Hybrid.Domain.Repositories.IRepository{`7,System.Guid},Hybrid.Domain.Repositories.IRepository{`8,System.Guid},Hybrid.Domain.Repositories.IRepository{`9,System.Guid},Hybrid.Domain.Repositories.IRepository{`10,System.Guid},Hybrid.Domain.Repositories.IRepository{`12,`13},Hybrid.Domain.Repositories.IRepository{`14,`15},Hybrid.Domain.Repositories.IRepository{`16,`17})
  - Hybrid.Zero.Authorization.SecurityManagerBase`18.CheckEntityInfoExists(System.Linq.Expressions.Expression{System.Func{`2,System.Boolean}},System.Guid)
  - Hybrid.Zero.Authorization.SecurityManagerBase`18.CheckEntityRoleExists(System.Linq.Expressions.Expression{System.Func{`10,System.Boolean}},System.Guid)
  - Hybrid.Zero.Authorization.SecurityManagerBase`18.CheckFunctionExists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Guid)
  - Hybrid.Zero.Authorization.SecurityManagerBase`18.CheckModuleExists(System.Linq.Expressions.Expression{System.Func{`4,System.Boolean}},`6)
  - Hybrid.Zero.Authorization.SecurityManagerBase`18.CheckModuleFunctionExists(System.Linq.Expressions.Expression{System.Func{`7,System.Boolean}},System.Guid)
  - Hybrid.Zero.Authorization.SecurityManagerBase`18.CheckModuleRoleExists(System.Linq.Expressions.Expression{System.Func{`8,System.Boolean}},System.Guid)
  - Hybrid.Zero.Authorization.SecurityManagerBase`18.CheckModuleUserExists(System.Linq.Expressions.Expression{System.Func{`9,System.Boolean}},System.Guid)
  - Hybrid.Zero.Authorization.SecurityManagerBase`18.CreateEntityRoles(`11[])
  - Hybrid.Zero.Authorization.SecurityManagerBase`18.CreateModule(`5)
  - Hybrid.Zero.Authorization.SecurityManagerBase`18.DeleteEntityRoles(System.Guid[])
  - Hybrid.Zero.Authorization.SecurityManagerBase`18.DeleteModule(`6)
  - Hybrid.Zero.Authorization.SecurityManagerBase`18.EntityInfos
  - Hybrid.Zero.Authorization.SecurityManagerBase`18.EntityRoles
  - Hybrid.Zero.Authorization.SecurityManagerBase`18.Functions
  - Hybrid.Zero.Authorization.SecurityManagerBase`18.GetEntityRoleFilterGroups(`15,System.Guid,Hybrid.Authorization.DataAuthOperation)
  - Hybrid.Zero.Authorization.SecurityManagerBase`18.GetModuleTreeIds(`6[])
  - Hybrid.Zero.Authorization.SecurityManagerBase`18.GetRoleModuleIds(`15)
  - Hybrid.Zero.Authorization.SecurityManagerBase`18.GetUserSelfModuleIds(`17)
  - Hybrid.Zero.Authorization.SecurityManagerBase`18.GetUserWithRoleModuleIds(`17)
  - Hybrid.Zero.Authorization.SecurityManagerBase`18.ModuleFunctions
  - Hybrid.Zero.Authorization.SecurityManagerBase`18.ModuleRoles
  - Hybrid.Zero.Authorization.SecurityManagerBase`18.Modules
  - Hybrid.Zero.Authorization.SecurityManagerBase`18.ModuleUsers
  - Hybrid.Zero.Authorization.SecurityManagerBase`18.SetModuleFunctions(`6,System.Guid[])
  - Hybrid.Zero.Authorization.SecurityManagerBase`18.SetRoleModules(`15,`6[])
  - Hybrid.Zero.Authorization.SecurityManagerBase`18.SetUserModules(`17,`6[])
  - Hybrid.Zero.Authorization.SecurityManagerBase`18.UpdateEntityInfos(`3[])
  - Hybrid.Zero.Authorization.SecurityManagerBase`18.UpdateEntityRoles(`11[])
  - Hybrid.Zero.Authorization.SecurityManagerBase`18.UpdateFunctions(`1[])
  - Hybrid.Zero.Authorization.SecurityManagerBase`18.UpdateModule(`5)
  langs:
  - csharp
  - vb
  name: SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>
  nameWithType: SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>
  fullName: Hybrid.Zero.Authorization.SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>
  type: Class
  source:
    remote:
      path: src/Hybrid.Zero/Authorization/SecurityManagerBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: SecurityManagerBase
    path: ../src/Hybrid.Zero/Authorization/SecurityManagerBase.cs
    startLine: 54
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Zero.Authorization
  summary: "\n权限安全管理器基类\n"
  example: []
  syntax:
    content: >-
      public abstract class SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey> : IFunctionStore<TFunction, TFunctionInputDto>, IEntityInfoStore<TEntityInfo, TEntityInfoInputDto>, IModuleStore<TModule, TModuleInputDto, TModuleKey>, IModuleFunctionStore<TModuleFunction, TModuleKey>, IModuleRoleStore<TModuleRole, TRoleKey, TModuleKey>, IModuleUserStore<TModuleUser, TUserKey, TModuleKey>, IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey> where TFunction : IFunction where TFunctionInputDto : FunctionInputDtoBase where TEntityInfo : IEntityInfo where TEntityInfoInputDto : EntityInfoInputDtoBase where TModule : ModuleBase<TModuleKey> where TModuleInputDto : ModuleInputDtoBase<TModuleKey> where TModuleKey : struct, IEquatable<TModuleKey> where TModuleFunction : ModuleFunctionBase<TModuleKey>, new()
          where TModuleRole : ModuleRoleBase<TModuleKey, TRoleKey>, new()
          where TModuleUser : ModuleUserBase<TModuleKey, TUserKey>, new()
          where TEntityRole : EntityRoleBase<TRoleKey> where TEntityRoleInputDto : EntityRoleInputDtoBase<TRoleKey> where TUserRole : UserRoleBase<TUserRoleKey, TUserKey, TRoleKey> where TUserRoleKey : IEquatable<TUserRoleKey> where TRole : RoleBase<TRoleKey> where TRoleKey : IEquatable<TRoleKey> where TUser : UserBase<TUserKey> where TUserKey : IEquatable<TUserKey>
    typeParameters:
    - id: TFunction
      description: 功能类型
    - id: TFunctionInputDto
      description: 功能输入DTO类型
    - id: TEntityInfo
      description: 数据实体类型
    - id: TEntityInfoInputDto
      description: 数据实体输入DTO类型
    - id: TModule
      description: 模块类型
    - id: TModuleInputDto
      description: 模块输入类型
    - id: TModuleKey
      description: 模块编号类型
    - id: TModuleFunction
      description: 模块功能类型
    - id: TModuleRole
      description: 模块角色类型
    - id: TModuleUser
      description: 模块用户类型
    - id: TEntityRole
      description: 实体角色类型
    - id: TEntityRoleInputDto
      description: 实体角色输入DTO类型
    - id: TUserRole
      description: 用户角色类型
    - id: TUserRoleKey
      description: 用户角色编号类型
    - id: TRole
      description: 角色类型
    - id: TRoleKey
      description: 角色编号类型
    - id: TUser
      description: 用户类型
    - id: TUserKey
      description: 用户编号类型
    content.vb: >-
      Public MustInherit Class SecurityManagerBase(Of TFunction As IFunction, TFunctionInputDto As FunctionInputDtoBase, TEntityInfo As IEntityInfo, TEntityInfoInputDto As EntityInfoInputDtoBase, TModule As ModuleBase(Of TModuleKey), TModuleInputDto As ModuleInputDtoBase(Of TModuleKey), TModuleKey As {Structure, IEquatable(Of TModuleKey)}, TModuleFunction As {ModuleFunctionBase(Of TModuleKey), New}, TModuleRole As {ModuleRoleBase(Of TModuleKey, TRoleKey), New}, TModuleUser As {ModuleUserBase(Of TModuleKey, TUserKey), New}, TEntityRole As EntityRoleBase(Of TRoleKey), TEntityRoleInputDto As EntityRoleInputDtoBase(Of TRoleKey), TUserRole As UserRoleBase(Of TUserRoleKey, TUserKey, TRoleKey), TUserRoleKey As IEquatable(Of TUserRoleKey), TRole As RoleBase(Of TRoleKey), TRoleKey As IEquatable(Of TRoleKey), TUser As UserBase(Of TUserKey), TUserKey As IEquatable(Of TUserKey))
          Implements IFunctionStore(Of TFunction, TFunctionInputDto), IEntityInfoStore(Of TEntityInfo, TEntityInfoInputDto), IModuleStore(Of TModule, TModuleInputDto, TModuleKey), IModuleFunctionStore(Of TModuleFunction, TModuleKey), IModuleRoleStore(Of TModuleRole, TRoleKey, TModuleKey), IModuleUserStore(Of TModuleUser, TUserKey, TModuleKey), IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey)
  inheritance:
  - System.Object
  implements:
  - Hybrid.Zero.Authorization.IFunctionStore{{TFunction},{TFunctionInputDto}}
  - Hybrid.Zero.Authorization.IEntityInfoStore{{TEntityInfo},{TEntityInfoInputDto}}
  - Hybrid.Zero.Authorization.IModuleStore{{TModule},{TModuleInputDto},{TModuleKey}}
  - Hybrid.Zero.Authorization.IModuleFunctionStore{{TModuleFunction},{TModuleKey}}
  - Hybrid.Zero.Authorization.IModuleRoleStore{{TModuleRole},{TRoleKey},{TModuleKey}}
  - Hybrid.Zero.Authorization.IModuleUserStore{{TModuleUser},{TUserKey},{TModuleKey}}
  - Hybrid.Zero.Authorization.IEntityRoleStore{{TEntityRole},{TEntityRoleInputDto},{TRoleKey}}
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - System.Object.Hybrid.Extensions.ObjectExtensions.CastTo(System.Type)
  - System.Object.Hybrid.Extensions.ObjectExtensions.CastTo``1
  - System.Object.Hybrid.Extensions.ObjectExtensions.CastTo``1({T})
  - Hybrid.Zero.Authorization.SecurityManagerBase`18.Hybrid.Extensions.ObjectExtensions.IsIn``1(Hybrid.Zero.Authorization.SecurityManagerBase{{TFunction},{TFunctionInputDto},{TEntityInfo},{TEntityInfoInputDto},{TModule},{TModuleInputDto},{TModuleKey},{TModuleFunction},{TModuleRole},{TModuleUser},{TEntityRole},{TEntityRoleInputDto},{TUserRole},{TUserRoleKey},{TRole},{TRoleKey},{TUser},{TUserKey}}[])
  - System.Object.Hybrid.Extensions.ObjectExtensions.ToDynamic
  - Hybrid.Zero.Authorization.SecurityManagerBase`18.Hybrid.Extensions.ObjectExtensions.DeepClone``1
  - Hybrid.Zero.Authorization.SecurityManagerBase`18.Hybrid.Extensions.ParameterCheckExtensions.Required``1(System.Func{Hybrid.Zero.Authorization.SecurityManagerBase{{TFunction},{TFunctionInputDto},{TEntityInfo},{TEntityInfoInputDto},{TModule},{TModuleInputDto},{TModuleKey},{TModuleFunction},{TModuleRole},{TModuleUser},{TEntityRole},{TEntityRoleInputDto},{TUserRole},{TUserRoleKey},{TRole},{TRoleKey},{TUser},{TUserKey}},System.Boolean},System.String)
  - Hybrid.Zero.Authorization.SecurityManagerBase`18.Hybrid.Extensions.ParameterCheckExtensions.Required``2(System.Func{Hybrid.Zero.Authorization.SecurityManagerBase{{TFunction},{TFunctionInputDto},{TEntityInfo},{TEntityInfoInputDto},{TModule},{TModuleInputDto},{TModuleKey},{TModuleFunction},{TModuleRole},{TModuleUser},{TEntityRole},{TEntityRoleInputDto},{TUserRole},{TUserRoleKey},{TRole},{TRoleKey},{TUser},{TUserKey}},System.Boolean},System.String)
  - Hybrid.Zero.Authorization.SecurityManagerBase`18.Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(System.String)
  - Hybrid.Zero.Authorization.SecurityManagerBase`18.Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{Hybrid.Zero.Authorization.SecurityManagerBase{{TFunction},{TFunctionInputDto},{TEntityInfo},{TEntityInfoInputDto},{TModule},{TModuleInputDto},{TModuleKey},{TModuleFunction},{TModuleRole},{TModuleUser},{TEntityRole},{TEntityRoleInputDto},{TUserRole},{TUserRoleKey},{TRole},{TRoleKey},{TUser},{TUserKey}}},System.Action{System.Exception},System.Action{Hybrid.Zero.Authorization.SecurityManagerBase{{TFunction},{TFunctionInputDto},{TEntityInfo},{TEntityInfoInputDto},{TModule},{TModuleInputDto},{TModuleKey},{TModuleFunction},{TModuleRole},{TModuleUser},{TEntityRole},{TEntityRoleInputDto},{TUserRole},{TUserRoleKey},{TRole},{TRoleKey},{TUser},{TUserKey}}})
  - Hybrid.Zero.Authorization.SecurityManagerBase`18.Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{Hybrid.Zero.Authorization.SecurityManagerBase{{TFunction},{TFunctionInputDto},{TEntityInfo},{TEntityInfoInputDto},{TModule},{TModuleInputDto},{TModuleKey},{TModuleFunction},{TModuleRole},{TModuleUser},{TEntityRole},{TEntityRoleInputDto},{TUserRole},{TUserRoleKey},{TRole},{TRoleKey},{TUser},{TUserKey}}},System.Action{System.Exception})
  - Hybrid.Zero.Authorization.SecurityManagerBase`18.Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{Hybrid.Zero.Authorization.SecurityManagerBase{{TFunction},{TFunctionInputDto},{TEntityInfo},{TEntityInfoInputDto},{TModule},{TModuleInputDto},{TModuleKey},{TModuleFunction},{TModuleRole},{TModuleUser},{TEntityRole},{TEntityRoleInputDto},{TUserRole},{TUserRoleKey},{TRole},{TRoleKey},{TUser},{TUserKey}},{TResult}},System.Action{System.Exception},System.Action{Hybrid.Zero.Authorization.SecurityManagerBase{{TFunction},{TFunctionInputDto},{TEntityInfo},{TEntityInfoInputDto},{TModule},{TModuleInputDto},{TModuleKey},{TModuleFunction},{TModuleRole},{TModuleUser},{TEntityRole},{TEntityRoleInputDto},{TUserRole},{TUserRoleKey},{TRole},{TRoleKey},{TUser},{TUserKey}}})
  - Hybrid.Zero.Authorization.SecurityManagerBase`18.Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{Hybrid.Zero.Authorization.SecurityManagerBase{{TFunction},{TFunctionInputDto},{TEntityInfo},{TEntityInfoInputDto},{TModule},{TModuleInputDto},{TModuleKey},{TModuleFunction},{TModuleRole},{TModuleUser},{TEntityRole},{TEntityRoleInputDto},{TUserRole},{TUserRoleKey},{TRole},{TRoleKey},{TUser},{TUserKey}},{TResult}},System.Action{System.Exception})
  - Hybrid.Zero.Authorization.SecurityManagerBase`18.Hybrid.Extensions.TryCatchExtensions.TryFinally``1(System.Action{Hybrid.Zero.Authorization.SecurityManagerBase{{TFunction},{TFunctionInputDto},{TEntityInfo},{TEntityInfoInputDto},{TModule},{TModuleInputDto},{TModuleKey},{TModuleFunction},{TModuleRole},{TModuleUser},{TEntityRole},{TEntityRoleInputDto},{TUserRole},{TUserRoleKey},{TRole},{TRoleKey},{TUser},{TUserKey}}},System.Action{Hybrid.Zero.Authorization.SecurityManagerBase{{TFunction},{TFunctionInputDto},{TEntityInfo},{TEntityInfoInputDto},{TModule},{TModuleInputDto},{TModuleKey},{TModuleFunction},{TModuleRole},{TModuleUser},{TEntityRole},{TEntityRoleInputDto},{TUserRole},{TUserRoleKey},{TRole},{TRoleKey},{TUser},{TUserKey}}})
  - System.Object.Hybrid.Json.JsonExtensions.ToJsonString(System.Boolean,System.Boolean)
  - System.Object.Hybrid.Mapping.MapperExtensions.MapTo``1
  - Hybrid.Zero.Authorization.SecurityManagerBase`18.Hybrid.Mapping.MapperExtensions.MapTo``2({TTarget})
  - System.Object.Hybrid.Reflection.LockExtensions.Locking(System.Action)
  - Hybrid.Zero.Authorization.SecurityManagerBase`18.Hybrid.Reflection.LockExtensions.Locking``1(System.Action{Hybrid.Zero.Authorization.SecurityManagerBase{{TFunction},{TFunctionInputDto},{TEntityInfo},{TEntityInfoInputDto},{TModule},{TModuleInputDto},{TModuleKey},{TModuleFunction},{TModuleRole},{TModuleUser},{TEntityRole},{TEntityRoleInputDto},{TUserRole},{TUserRoleKey},{TRole},{TRoleKey},{TUser},{TUserKey}}})
  - System.Object.Hybrid.Reflection.LockExtensions.Locking``1(System.Func{{TResult}})
  - Hybrid.Zero.Authorization.SecurityManagerBase`18.Hybrid.Reflection.LockExtensions.Locking``2(System.Func{Hybrid.Zero.Authorization.SecurityManagerBase{{TFunction},{TFunctionInputDto},{TEntityInfo},{TEntityInfoInputDto},{TModule},{TModuleInputDto},{TModuleKey},{TModuleFunction},{TModuleRole},{TModuleUser},{TEntityRole},{TEntityRoleInputDto},{TUserRole},{TUserRoleKey},{TRole},{TRoleKey},{TUser},{TUserKey}},{TResult}})
  - Hybrid.Zero.Authorization.SecurityManagerBase`18.Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2
  - Hybrid.Zero.Authorization.SecurityManagerBase`18.Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(System.Security.Principal.IPrincipal)
  - Hybrid.Zero.Authorization.SecurityManagerBase`18.Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(System.Security.Principal.IPrincipal)
  nameWithType.vb: SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey)
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  fullName.vb: Hybrid.Zero.Authorization.SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey)
  name.vb: SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey)
- uid: Hybrid.Zero.Authorization.SecurityManagerBase`18.#ctor(Hybrid.EventBuses.IEventBus,Hybrid.Domain.Repositories.IRepository{`0,System.Guid},Hybrid.Domain.Repositories.IRepository{`2,System.Guid},Hybrid.Domain.Repositories.IRepository{`4,`6},Hybrid.Domain.Repositories.IRepository{`7,System.Guid},Hybrid.Domain.Repositories.IRepository{`8,System.Guid},Hybrid.Domain.Repositories.IRepository{`9,System.Guid},Hybrid.Domain.Repositories.IRepository{`10,System.Guid},Hybrid.Domain.Repositories.IRepository{`12,`13},Hybrid.Domain.Repositories.IRepository{`14,`15},Hybrid.Domain.Repositories.IRepository{`16,`17})
  commentId: M:Hybrid.Zero.Authorization.SecurityManagerBase`18.#ctor(Hybrid.EventBuses.IEventBus,Hybrid.Domain.Repositories.IRepository{`0,System.Guid},Hybrid.Domain.Repositories.IRepository{`2,System.Guid},Hybrid.Domain.Repositories.IRepository{`4,`6},Hybrid.Domain.Repositories.IRepository{`7,System.Guid},Hybrid.Domain.Repositories.IRepository{`8,System.Guid},Hybrid.Domain.Repositories.IRepository{`9,System.Guid},Hybrid.Domain.Repositories.IRepository{`10,System.Guid},Hybrid.Domain.Repositories.IRepository{`12,`13},Hybrid.Domain.Repositories.IRepository{`14,`15},Hybrid.Domain.Repositories.IRepository{`16,`17})
  id: '#ctor(Hybrid.EventBuses.IEventBus,Hybrid.Domain.Repositories.IRepository{`0,System.Guid},Hybrid.Domain.Repositories.IRepository{`2,System.Guid},Hybrid.Domain.Repositories.IRepository{`4,`6},Hybrid.Domain.Repositories.IRepository{`7,System.Guid},Hybrid.Domain.Repositories.IRepository{`8,System.Guid},Hybrid.Domain.Repositories.IRepository{`9,System.Guid},Hybrid.Domain.Repositories.IRepository{`10,System.Guid},Hybrid.Domain.Repositories.IRepository{`12,`13},Hybrid.Domain.Repositories.IRepository{`14,`15},Hybrid.Domain.Repositories.IRepository{`16,`17})'
  parent: Hybrid.Zero.Authorization.SecurityManagerBase`18
  langs:
  - csharp
  - vb
  name: SecurityManagerBase(IEventBus, IRepository<TFunction, Guid>, IRepository<TEntityInfo, Guid>, IRepository<TModule, TModuleKey>, IRepository<TModuleFunction, Guid>, IRepository<TModuleRole, Guid>, IRepository<TModuleUser, Guid>, IRepository<TEntityRole, Guid>, IRepository<TUserRole, TUserRoleKey>, IRepository<TRole, TRoleKey>, IRepository<TUser, TUserKey>)
  nameWithType: SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>.SecurityManagerBase(IEventBus, IRepository<TFunction, Guid>, IRepository<TEntityInfo, Guid>, IRepository<TModule, TModuleKey>, IRepository<TModuleFunction, Guid>, IRepository<TModuleRole, Guid>, IRepository<TModuleUser, Guid>, IRepository<TEntityRole, Guid>, IRepository<TUserRole, TUserRoleKey>, IRepository<TRole, TRoleKey>, IRepository<TUser, TUserKey>)
  fullName: Hybrid.Zero.Authorization.SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>.SecurityManagerBase(Hybrid.EventBuses.IEventBus, Hybrid.Domain.Repositories.IRepository<TFunction, System.Guid>, Hybrid.Domain.Repositories.IRepository<TEntityInfo, System.Guid>, Hybrid.Domain.Repositories.IRepository<TModule, TModuleKey>, Hybrid.Domain.Repositories.IRepository<TModuleFunction, System.Guid>, Hybrid.Domain.Repositories.IRepository<TModuleRole, System.Guid>, Hybrid.Domain.Repositories.IRepository<TModuleUser, System.Guid>, Hybrid.Domain.Repositories.IRepository<TEntityRole, System.Guid>, Hybrid.Domain.Repositories.IRepository<TUserRole, TUserRoleKey>, Hybrid.Domain.Repositories.IRepository<TRole, TRoleKey>, Hybrid.Domain.Repositories.IRepository<TUser, TUserKey>)
  type: Constructor
  source:
    remote:
      path: src/Hybrid.Zero/Authorization/SecurityManagerBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: .ctor
    path: ../src/Hybrid.Zero/Authorization/SecurityManagerBase.cs
    startLine: 108
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Zero.Authorization
  summary: "\n初始化一个 SecurityManager 类型的新实例\n"
  example: []
  syntax:
    content: protected SecurityManagerBase(IEventBus eventBus, IRepository<TFunction, Guid> functionRepository, IRepository<TEntityInfo, Guid> entityInfoRepository, IRepository<TModule, TModuleKey> moduleRepository, IRepository<TModuleFunction, Guid> moduleFunctionRepository, IRepository<TModuleRole, Guid> moduleRoleRepository, IRepository<TModuleUser, Guid> moduleUserRepository, IRepository<TEntityRole, Guid> entityRoleRepository, IRepository<TUserRole, TUserRoleKey> userRoleRepository, IRepository<TRole, TRoleKey> roleRepository, IRepository<TUser, TUserKey> userRepository)
    parameters:
    - id: eventBus
      type: Hybrid.EventBuses.IEventBus
      description: 事件总线
    - id: functionRepository
      type: Hybrid.Domain.Repositories.IRepository{{TFunction},System.Guid}
      description: 功能仓储
    - id: entityInfoRepository
      type: Hybrid.Domain.Repositories.IRepository{{TEntityInfo},System.Guid}
      description: 实体仓储
    - id: moduleRepository
      type: Hybrid.Domain.Repositories.IRepository{{TModule},{TModuleKey}}
      description: 模块仓储
    - id: moduleFunctionRepository
      type: Hybrid.Domain.Repositories.IRepository{{TModuleFunction},System.Guid}
      description: 模块功能仓储
    - id: moduleRoleRepository
      type: Hybrid.Domain.Repositories.IRepository{{TModuleRole},System.Guid}
      description: 模块角色仓储
    - id: moduleUserRepository
      type: Hybrid.Domain.Repositories.IRepository{{TModuleUser},System.Guid}
      description: 模块用户仓储
    - id: entityRoleRepository
      type: Hybrid.Domain.Repositories.IRepository{{TEntityRole},System.Guid}
      description: 实体角色仓储
    - id: userRoleRepository
      type: Hybrid.Domain.Repositories.IRepository{{TUserRole},{TUserRoleKey}}
      description: 用户角色仓储
    - id: roleRepository
      type: Hybrid.Domain.Repositories.IRepository{{TRole},{TRoleKey}}
      description: 角色仓储
    - id: userRepository
      type: Hybrid.Domain.Repositories.IRepository{{TUser},{TUserKey}}
      description: 用户仓储
    content.vb: Protected Sub New(eventBus As IEventBus, functionRepository As IRepository(Of TFunction, Guid), entityInfoRepository As IRepository(Of TEntityInfo, Guid), moduleRepository As IRepository(Of TModule, TModuleKey), moduleFunctionRepository As IRepository(Of TModuleFunction, Guid), moduleRoleRepository As IRepository(Of TModuleRole, Guid), moduleUserRepository As IRepository(Of TModuleUser, Guid), entityRoleRepository As IRepository(Of TEntityRole, Guid), userRoleRepository As IRepository(Of TUserRole, TUserRoleKey), roleRepository As IRepository(Of TRole, TRoleKey), userRepository As IRepository(Of TUser, TUserKey))
  overload: Hybrid.Zero.Authorization.SecurityManagerBase`18.#ctor*
  nameWithType.vb: SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey).SecurityManagerBase(IEventBus, IRepository(Of TFunction, Guid), IRepository(Of TEntityInfo, Guid), IRepository(Of TModule, TModuleKey), IRepository(Of TModuleFunction, Guid), IRepository(Of TModuleRole, Guid), IRepository(Of TModuleUser, Guid), IRepository(Of TEntityRole, Guid), IRepository(Of TUserRole, TUserRoleKey), IRepository(Of TRole, TRoleKey), IRepository(Of TUser, TUserKey))
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Hybrid.Zero.Authorization.SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey).SecurityManagerBase(Hybrid.EventBuses.IEventBus, Hybrid.Domain.Repositories.IRepository(Of TFunction, System.Guid), Hybrid.Domain.Repositories.IRepository(Of TEntityInfo, System.Guid), Hybrid.Domain.Repositories.IRepository(Of TModule, TModuleKey), Hybrid.Domain.Repositories.IRepository(Of TModuleFunction, System.Guid), Hybrid.Domain.Repositories.IRepository(Of TModuleRole, System.Guid), Hybrid.Domain.Repositories.IRepository(Of TModuleUser, System.Guid), Hybrid.Domain.Repositories.IRepository(Of TEntityRole, System.Guid), Hybrid.Domain.Repositories.IRepository(Of TUserRole, TUserRoleKey), Hybrid.Domain.Repositories.IRepository(Of TRole, TRoleKey), Hybrid.Domain.Repositories.IRepository(Of TUser, TUserKey))
  name.vb: SecurityManagerBase(IEventBus, IRepository(Of TFunction, Guid), IRepository(Of TEntityInfo, Guid), IRepository(Of TModule, TModuleKey), IRepository(Of TModuleFunction, Guid), IRepository(Of TModuleRole, Guid), IRepository(Of TModuleUser, Guid), IRepository(Of TEntityRole, Guid), IRepository(Of TUserRole, TUserRoleKey), IRepository(Of TRole, TRoleKey), IRepository(Of TUser, TUserKey))
- uid: Hybrid.Zero.Authorization.SecurityManagerBase`18.Functions
  commentId: P:Hybrid.Zero.Authorization.SecurityManagerBase`18.Functions
  id: Functions
  parent: Hybrid.Zero.Authorization.SecurityManagerBase`18
  langs:
  - csharp
  - vb
  name: Functions
  nameWithType: SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>.Functions
  fullName: Hybrid.Zero.Authorization.SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>.Functions
  type: Property
  source:
    remote:
      path: src/Hybrid.Zero/Authorization/SecurityManagerBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: Functions
    path: ../src/Hybrid.Zero/Authorization/SecurityManagerBase.cs
    startLine: 140
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Zero.Authorization
  summary: "\n获取 功能信息查询数据集\n"
  example: []
  syntax:
    content: public IQueryable<TFunction> Functions { get; }
    parameters: []
    return:
      type: System.Linq.IQueryable{{TFunction}}
    content.vb: Public ReadOnly Property Functions As IQueryable(Of TFunction)
  overload: Hybrid.Zero.Authorization.SecurityManagerBase`18.Functions*
  implements:
  - Hybrid.Zero.Authorization.IFunctionStore{{TFunction},{TFunctionInputDto}}.Functions
  nameWithType.vb: SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey).Functions
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Hybrid.Zero.Authorization.SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey).Functions
- uid: Hybrid.Zero.Authorization.SecurityManagerBase`18.CheckFunctionExists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Guid)
  commentId: M:Hybrid.Zero.Authorization.SecurityManagerBase`18.CheckFunctionExists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Guid)
  id: CheckFunctionExists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Guid)
  parent: Hybrid.Zero.Authorization.SecurityManagerBase`18
  langs:
  - csharp
  - vb
  name: CheckFunctionExists(Expression<Func<TFunction, Boolean>>, Guid)
  nameWithType: SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>.CheckFunctionExists(Expression<Func<TFunction, Boolean>>, Guid)
  fullName: Hybrid.Zero.Authorization.SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>.CheckFunctionExists(System.Linq.Expressions.Expression<System.Func<TFunction, System.Boolean>>, System.Guid)
  type: Method
  source:
    remote:
      path: src/Hybrid.Zero/Authorization/SecurityManagerBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: CheckFunctionExists
    path: ../src/Hybrid.Zero/Authorization/SecurityManagerBase.cs
    startLine: 148
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Zero.Authorization
  summary: "\n检查功能信息是否存在\n"
  example: []
  syntax:
    content: public virtual Task<bool> CheckFunctionExists(Expression<Func<TFunction, bool>> predicate, Guid id = default(Guid))
    parameters:
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TFunction},System.Boolean}}
      description: 检查谓语表达式
    - id: id
      type: System.Guid
      description: 更新的功能信息编号
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: 功能信息是否存在
    content.vb: Public Overridable Function CheckFunctionExists(predicate As Expression(Of Func(Of TFunction, Boolean)), id As Guid = Nothing) As Task(Of Boolean)
  overload: Hybrid.Zero.Authorization.SecurityManagerBase`18.CheckFunctionExists*
  implements:
  - Hybrid.Zero.Authorization.IFunctionStore{{TFunction},{TFunctionInputDto}}.CheckFunctionExists(System.Linq.Expressions.Expression{System.Func{{TFunction},System.Boolean}},System.Guid)
  nameWithType.vb: SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey).CheckFunctionExists(Expression(Of Func(Of TFunction, Boolean)), Guid)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Hybrid.Zero.Authorization.SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey).CheckFunctionExists(System.Linq.Expressions.Expression(Of System.Func(Of TFunction, System.Boolean)), System.Guid)
  name.vb: CheckFunctionExists(Expression(Of Func(Of TFunction, Boolean)), Guid)
- uid: Hybrid.Zero.Authorization.SecurityManagerBase`18.UpdateFunctions(`1[])
  commentId: M:Hybrid.Zero.Authorization.SecurityManagerBase`18.UpdateFunctions(`1[])
  id: UpdateFunctions(`1[])
  parent: Hybrid.Zero.Authorization.SecurityManagerBase`18
  langs:
  - csharp
  - vb
  name: UpdateFunctions(TFunctionInputDto[])
  nameWithType: SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>.UpdateFunctions(TFunctionInputDto[])
  fullName: Hybrid.Zero.Authorization.SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>.UpdateFunctions(TFunctionInputDto[])
  type: Method
  source:
    remote:
      path: src/Hybrid.Zero/Authorization/SecurityManagerBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: UpdateFunctions
    path: ../src/Hybrid.Zero/Authorization/SecurityManagerBase.cs
    startLine: 158
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Zero.Authorization
  summary: "\n更新功能信息\n"
  example: []
  syntax:
    content: public virtual Task<OperationResult> UpdateFunctions(params TFunctionInputDto[] dtos)
    parameters:
    - id: dtos
      type: '{TFunctionInputDto}[]'
      description: 包含更新信息的功能信息DTO信息
    return:
      type: System.Threading.Tasks.Task{Hybrid.Data.OperationResult}
      description: 业务操作结果
    content.vb: Public Overridable Function UpdateFunctions(ParamArray dtos As TFunctionInputDto()) As Task(Of OperationResult)
  overload: Hybrid.Zero.Authorization.SecurityManagerBase`18.UpdateFunctions*
  implements:
  - Hybrid.Zero.Authorization.IFunctionStore{{TFunction},{TFunctionInputDto}}.UpdateFunctions({TFunctionInputDto}[])
  nameWithType.vb: SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey).UpdateFunctions(TFunctionInputDto())
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Hybrid.Zero.Authorization.SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey).UpdateFunctions(TFunctionInputDto())
  name.vb: UpdateFunctions(TFunctionInputDto())
- uid: Hybrid.Zero.Authorization.SecurityManagerBase`18.EntityInfos
  commentId: P:Hybrid.Zero.Authorization.SecurityManagerBase`18.EntityInfos
  id: EntityInfos
  parent: Hybrid.Zero.Authorization.SecurityManagerBase`18
  langs:
  - csharp
  - vb
  name: EntityInfos
  nameWithType: SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>.EntityInfos
  fullName: Hybrid.Zero.Authorization.SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>.EntityInfos
  type: Property
  source:
    remote:
      path: src/Hybrid.Zero/Authorization/SecurityManagerBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: EntityInfos
    path: ../src/Hybrid.Zero/Authorization/SecurityManagerBase.cs
    startLine: 207
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Zero.Authorization
  summary: "\n获取 实体信息查询数据集\n"
  example: []
  syntax:
    content: public IQueryable<TEntityInfo> EntityInfos { get; }
    parameters: []
    return:
      type: System.Linq.IQueryable{{TEntityInfo}}
    content.vb: Public ReadOnly Property EntityInfos As IQueryable(Of TEntityInfo)
  overload: Hybrid.Zero.Authorization.SecurityManagerBase`18.EntityInfos*
  implements:
  - Hybrid.Zero.Authorization.IEntityInfoStore{{TEntityInfo},{TEntityInfoInputDto}}.EntityInfos
  nameWithType.vb: SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey).EntityInfos
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Hybrid.Zero.Authorization.SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey).EntityInfos
- uid: Hybrid.Zero.Authorization.SecurityManagerBase`18.CheckEntityInfoExists(System.Linq.Expressions.Expression{System.Func{`2,System.Boolean}},System.Guid)
  commentId: M:Hybrid.Zero.Authorization.SecurityManagerBase`18.CheckEntityInfoExists(System.Linq.Expressions.Expression{System.Func{`2,System.Boolean}},System.Guid)
  id: CheckEntityInfoExists(System.Linq.Expressions.Expression{System.Func{`2,System.Boolean}},System.Guid)
  parent: Hybrid.Zero.Authorization.SecurityManagerBase`18
  langs:
  - csharp
  - vb
  name: CheckEntityInfoExists(Expression<Func<TEntityInfo, Boolean>>, Guid)
  nameWithType: SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>.CheckEntityInfoExists(Expression<Func<TEntityInfo, Boolean>>, Guid)
  fullName: Hybrid.Zero.Authorization.SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>.CheckEntityInfoExists(System.Linq.Expressions.Expression<System.Func<TEntityInfo, System.Boolean>>, System.Guid)
  type: Method
  source:
    remote:
      path: src/Hybrid.Zero/Authorization/SecurityManagerBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: CheckEntityInfoExists
    path: ../src/Hybrid.Zero/Authorization/SecurityManagerBase.cs
    startLine: 215
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Zero.Authorization
  summary: "\n检查实体信息是否存在\n"
  example: []
  syntax:
    content: public virtual Task<bool> CheckEntityInfoExists(Expression<Func<TEntityInfo, bool>> predicate, Guid id = default(Guid))
    parameters:
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TEntityInfo},System.Boolean}}
      description: 检查谓语表达式
    - id: id
      type: System.Guid
      description: 更新的实体信息编号
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: 实体信息是否存在
    content.vb: Public Overridable Function CheckEntityInfoExists(predicate As Expression(Of Func(Of TEntityInfo, Boolean)), id As Guid = Nothing) As Task(Of Boolean)
  overload: Hybrid.Zero.Authorization.SecurityManagerBase`18.CheckEntityInfoExists*
  implements:
  - Hybrid.Zero.Authorization.IEntityInfoStore{{TEntityInfo},{TEntityInfoInputDto}}.CheckEntityInfoExists(System.Linq.Expressions.Expression{System.Func{{TEntityInfo},System.Boolean}},System.Guid)
  nameWithType.vb: SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey).CheckEntityInfoExists(Expression(Of Func(Of TEntityInfo, Boolean)), Guid)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Hybrid.Zero.Authorization.SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey).CheckEntityInfoExists(System.Linq.Expressions.Expression(Of System.Func(Of TEntityInfo, System.Boolean)), System.Guid)
  name.vb: CheckEntityInfoExists(Expression(Of Func(Of TEntityInfo, Boolean)), Guid)
- uid: Hybrid.Zero.Authorization.SecurityManagerBase`18.UpdateEntityInfos(`3[])
  commentId: M:Hybrid.Zero.Authorization.SecurityManagerBase`18.UpdateEntityInfos(`3[])
  id: UpdateEntityInfos(`3[])
  parent: Hybrid.Zero.Authorization.SecurityManagerBase`18
  langs:
  - csharp
  - vb
  name: UpdateEntityInfos(TEntityInfoInputDto[])
  nameWithType: SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>.UpdateEntityInfos(TEntityInfoInputDto[])
  fullName: Hybrid.Zero.Authorization.SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>.UpdateEntityInfos(TEntityInfoInputDto[])
  type: Method
  source:
    remote:
      path: src/Hybrid.Zero/Authorization/SecurityManagerBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: UpdateEntityInfos
    path: ../src/Hybrid.Zero/Authorization/SecurityManagerBase.cs
    startLine: 225
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Zero.Authorization
  summary: "\n更新实体信息\n"
  example: []
  syntax:
    content: public virtual Task<OperationResult> UpdateEntityInfos(params TEntityInfoInputDto[] dtos)
    parameters:
    - id: dtos
      type: '{TEntityInfoInputDto}[]'
      description: 包含更新信息的实体信息DTO信息
    return:
      type: System.Threading.Tasks.Task{Hybrid.Data.OperationResult}
      description: 业务操作结果
    content.vb: Public Overridable Function UpdateEntityInfos(ParamArray dtos As TEntityInfoInputDto()) As Task(Of OperationResult)
  overload: Hybrid.Zero.Authorization.SecurityManagerBase`18.UpdateEntityInfos*
  implements:
  - Hybrid.Zero.Authorization.IEntityInfoStore{{TEntityInfo},{TEntityInfoInputDto}}.UpdateEntityInfos({TEntityInfoInputDto}[])
  nameWithType.vb: SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey).UpdateEntityInfos(TEntityInfoInputDto())
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Hybrid.Zero.Authorization.SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey).UpdateEntityInfos(TEntityInfoInputDto())
  name.vb: UpdateEntityInfos(TEntityInfoInputDto())
- uid: Hybrid.Zero.Authorization.SecurityManagerBase`18.Modules
  commentId: P:Hybrid.Zero.Authorization.SecurityManagerBase`18.Modules
  id: Modules
  parent: Hybrid.Zero.Authorization.SecurityManagerBase`18
  langs:
  - csharp
  - vb
  name: Modules
  nameWithType: SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>.Modules
  fullName: Hybrid.Zero.Authorization.SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>.Modules
  type: Property
  source:
    remote:
      path: src/Hybrid.Zero/Authorization/SecurityManagerBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: Modules
    path: ../src/Hybrid.Zero/Authorization/SecurityManagerBase.cs
    startLine: 238
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Zero.Authorization
  summary: "\n获取 模块信息查询数据集\n"
  example: []
  syntax:
    content: public IQueryable<TModule> Modules { get; }
    parameters: []
    return:
      type: System.Linq.IQueryable{{TModule}}
    content.vb: Public ReadOnly Property Modules As IQueryable(Of TModule)
  overload: Hybrid.Zero.Authorization.SecurityManagerBase`18.Modules*
  implements:
  - Hybrid.Zero.Authorization.IModuleStore{{TModule},{TModuleInputDto},{TModuleKey}}.Modules
  nameWithType.vb: SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey).Modules
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Hybrid.Zero.Authorization.SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey).Modules
- uid: Hybrid.Zero.Authorization.SecurityManagerBase`18.CheckModuleExists(System.Linq.Expressions.Expression{System.Func{`4,System.Boolean}},`6)
  commentId: M:Hybrid.Zero.Authorization.SecurityManagerBase`18.CheckModuleExists(System.Linq.Expressions.Expression{System.Func{`4,System.Boolean}},`6)
  id: CheckModuleExists(System.Linq.Expressions.Expression{System.Func{`4,System.Boolean}},`6)
  parent: Hybrid.Zero.Authorization.SecurityManagerBase`18
  langs:
  - csharp
  - vb
  name: CheckModuleExists(Expression<Func<TModule, Boolean>>, TModuleKey)
  nameWithType: SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>.CheckModuleExists(Expression<Func<TModule, Boolean>>, TModuleKey)
  fullName: Hybrid.Zero.Authorization.SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>.CheckModuleExists(System.Linq.Expressions.Expression<System.Func<TModule, System.Boolean>>, TModuleKey)
  type: Method
  source:
    remote:
      path: src/Hybrid.Zero/Authorization/SecurityManagerBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: CheckModuleExists
    path: ../src/Hybrid.Zero/Authorization/SecurityManagerBase.cs
    startLine: 246
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Zero.Authorization
  summary: "\n检查模块信息是否存在\n"
  example: []
  syntax:
    content: public virtual Task<bool> CheckModuleExists(Expression<Func<TModule, bool>> predicate, TModuleKey id = default(TModuleKey))
    parameters:
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TModule},System.Boolean}}
      description: 检查谓语表达式
    - id: id
      type: '{TModuleKey}'
      description: 更新的模块信息编号
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: 模块信息是否存在
    content.vb: Public Overridable Function CheckModuleExists(predicate As Expression(Of Func(Of TModule, Boolean)), id As TModuleKey = Nothing) As Task(Of Boolean)
  overload: Hybrid.Zero.Authorization.SecurityManagerBase`18.CheckModuleExists*
  implements:
  - Hybrid.Zero.Authorization.IModuleStore{{TModule},{TModuleInputDto},{TModuleKey}}.CheckModuleExists(System.Linq.Expressions.Expression{System.Func{{TModule},System.Boolean}},{TModuleKey})
  nameWithType.vb: SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey).CheckModuleExists(Expression(Of Func(Of TModule, Boolean)), TModuleKey)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Hybrid.Zero.Authorization.SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey).CheckModuleExists(System.Linq.Expressions.Expression(Of System.Func(Of TModule, System.Boolean)), TModuleKey)
  name.vb: CheckModuleExists(Expression(Of Func(Of TModule, Boolean)), TModuleKey)
- uid: Hybrid.Zero.Authorization.SecurityManagerBase`18.CreateModule(`5)
  commentId: M:Hybrid.Zero.Authorization.SecurityManagerBase`18.CreateModule(`5)
  id: CreateModule(`5)
  parent: Hybrid.Zero.Authorization.SecurityManagerBase`18
  langs:
  - csharp
  - vb
  name: CreateModule(TModuleInputDto)
  nameWithType: SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>.CreateModule(TModuleInputDto)
  fullName: Hybrid.Zero.Authorization.SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>.CreateModule(TModuleInputDto)
  type: Method
  source:
    remote:
      path: src/Hybrid.Zero/Authorization/SecurityManagerBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: CreateModule
    path: ../src/Hybrid.Zero/Authorization/SecurityManagerBase.cs
    startLine: 256
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Zero.Authorization
  summary: "\n添加模块信息\n"
  example: []
  syntax:
    content: public virtual Task<OperationResult> CreateModule(TModuleInputDto dto)
    parameters:
    - id: dto
      type: '{TModuleInputDto}'
      description: 要添加的模块信息DTO信息
    return:
      type: System.Threading.Tasks.Task{Hybrid.Data.OperationResult}
      description: 业务操作结果
    content.vb: Public Overridable Function CreateModule(dto As TModuleInputDto) As Task(Of OperationResult)
  overload: Hybrid.Zero.Authorization.SecurityManagerBase`18.CreateModule*
  implements:
  - Hybrid.Zero.Authorization.IModuleStore{{TModule},{TModuleInputDto},{TModuleKey}}.CreateModule({TModuleInputDto})
  nameWithType.vb: SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey).CreateModule(TModuleInputDto)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Hybrid.Zero.Authorization.SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey).CreateModule(TModuleInputDto)
- uid: Hybrid.Zero.Authorization.SecurityManagerBase`18.UpdateModule(`5)
  commentId: M:Hybrid.Zero.Authorization.SecurityManagerBase`18.UpdateModule(`5)
  id: UpdateModule(`5)
  parent: Hybrid.Zero.Authorization.SecurityManagerBase`18
  langs:
  - csharp
  - vb
  name: UpdateModule(TModuleInputDto)
  nameWithType: SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>.UpdateModule(TModuleInputDto)
  fullName: Hybrid.Zero.Authorization.SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>.UpdateModule(TModuleInputDto)
  type: Method
  source:
    remote:
      path: src/Hybrid.Zero/Authorization/SecurityManagerBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: UpdateModule
    path: ../src/Hybrid.Zero/Authorization/SecurityManagerBase.cs
    startLine: 321
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Zero.Authorization
  summary: "\n更新模块信息\n"
  example: []
  syntax:
    content: public virtual Task<OperationResult> UpdateModule(TModuleInputDto dto)
    parameters:
    - id: dto
      type: '{TModuleInputDto}'
      description: 包含更新信息的模块信息DTO信息
    return:
      type: System.Threading.Tasks.Task{Hybrid.Data.OperationResult}
      description: 业务操作结果
    content.vb: Public Overridable Function UpdateModule(dto As TModuleInputDto) As Task(Of OperationResult)
  overload: Hybrid.Zero.Authorization.SecurityManagerBase`18.UpdateModule*
  implements:
  - Hybrid.Zero.Authorization.IModuleStore{{TModule},{TModuleInputDto},{TModuleKey}}.UpdateModule({TModuleInputDto})
  nameWithType.vb: SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey).UpdateModule(TModuleInputDto)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Hybrid.Zero.Authorization.SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey).UpdateModule(TModuleInputDto)
- uid: Hybrid.Zero.Authorization.SecurityManagerBase`18.DeleteModule(`6)
  commentId: M:Hybrid.Zero.Authorization.SecurityManagerBase`18.DeleteModule(`6)
  id: DeleteModule(`6)
  parent: Hybrid.Zero.Authorization.SecurityManagerBase`18
  langs:
  - csharp
  - vb
  name: DeleteModule(TModuleKey)
  nameWithType: SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>.DeleteModule(TModuleKey)
  fullName: Hybrid.Zero.Authorization.SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>.DeleteModule(TModuleKey)
  type: Method
  source:
    remote:
      path: src/Hybrid.Zero/Authorization/SecurityManagerBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: DeleteModule
    path: ../src/Hybrid.Zero/Authorization/SecurityManagerBase.cs
    startLine: 375
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Zero.Authorization
  summary: "\n删除模块信息\n"
  example: []
  syntax:
    content: public virtual Task<OperationResult> DeleteModule(TModuleKey id)
    parameters:
    - id: id
      type: '{TModuleKey}'
      description: 要删除的模块信息编号
    return:
      type: System.Threading.Tasks.Task{Hybrid.Data.OperationResult}
      description: 业务操作结果
    content.vb: Public Overridable Function DeleteModule(id As TModuleKey) As Task(Of OperationResult)
  overload: Hybrid.Zero.Authorization.SecurityManagerBase`18.DeleteModule*
  implements:
  - Hybrid.Zero.Authorization.IModuleStore{{TModule},{TModuleInputDto},{TModuleKey}}.DeleteModule({TModuleKey})
  nameWithType.vb: SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey).DeleteModule(TModuleKey)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Hybrid.Zero.Authorization.SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey).DeleteModule(TModuleKey)
- uid: Hybrid.Zero.Authorization.SecurityManagerBase`18.GetModuleTreeIds(`6[])
  commentId: M:Hybrid.Zero.Authorization.SecurityManagerBase`18.GetModuleTreeIds(`6[])
  id: GetModuleTreeIds(`6[])
  parent: Hybrid.Zero.Authorization.SecurityManagerBase`18
  langs:
  - csharp
  - vb
  name: GetModuleTreeIds(TModuleKey[])
  nameWithType: SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>.GetModuleTreeIds(TModuleKey[])
  fullName: Hybrid.Zero.Authorization.SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>.GetModuleTreeIds(TModuleKey[])
  type: Method
  source:
    remote:
      path: src/Hybrid.Zero/Authorization/SecurityManagerBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: GetModuleTreeIds
    path: ../src/Hybrid.Zero/Authorization/SecurityManagerBase.cs
    startLine: 409
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Zero.Authorization
  summary: "\n获取树节点及其子节点的所有模块编号\n"
  example: []
  syntax:
    content: public virtual TModuleKey[] GetModuleTreeIds(params TModuleKey[] rootIds)
    parameters:
    - id: rootIds
      type: '{TModuleKey}[]'
      description: 树节点
    return:
      type: '{TModuleKey}[]'
      description: 模块编号集合
    content.vb: Public Overridable Function GetModuleTreeIds(ParamArray rootIds As TModuleKey()) As TModuleKey()
  overload: Hybrid.Zero.Authorization.SecurityManagerBase`18.GetModuleTreeIds*
  implements:
  - Hybrid.Zero.Authorization.IModuleStore{{TModule},{TModuleInputDto},{TModuleKey}}.GetModuleTreeIds({TModuleKey}[])
  nameWithType.vb: SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey).GetModuleTreeIds(TModuleKey())
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Hybrid.Zero.Authorization.SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey).GetModuleTreeIds(TModuleKey())
  name.vb: GetModuleTreeIds(TModuleKey())
- uid: Hybrid.Zero.Authorization.SecurityManagerBase`18.ModuleFunctions
  commentId: P:Hybrid.Zero.Authorization.SecurityManagerBase`18.ModuleFunctions
  id: ModuleFunctions
  parent: Hybrid.Zero.Authorization.SecurityManagerBase`18
  langs:
  - csharp
  - vb
  name: ModuleFunctions
  nameWithType: SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>.ModuleFunctions
  fullName: Hybrid.Zero.Authorization.SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>.ModuleFunctions
  type: Property
  source:
    remote:
      path: src/Hybrid.Zero/Authorization/SecurityManagerBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: ModuleFunctions
    path: ../src/Hybrid.Zero/Authorization/SecurityManagerBase.cs
    startLine: 427
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Zero.Authorization
  summary: "\n获取 模块功能信息查询数据集\n"
  example: []
  syntax:
    content: public IQueryable<TModuleFunction> ModuleFunctions { get; }
    parameters: []
    return:
      type: System.Linq.IQueryable{{TModuleFunction}}
    content.vb: Public ReadOnly Property ModuleFunctions As IQueryable(Of TModuleFunction)
  overload: Hybrid.Zero.Authorization.SecurityManagerBase`18.ModuleFunctions*
  implements:
  - Hybrid.Zero.Authorization.IModuleFunctionStore{{TModuleFunction},{TModuleKey}}.ModuleFunctions
  nameWithType.vb: SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey).ModuleFunctions
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Hybrid.Zero.Authorization.SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey).ModuleFunctions
- uid: Hybrid.Zero.Authorization.SecurityManagerBase`18.CheckModuleFunctionExists(System.Linq.Expressions.Expression{System.Func{`7,System.Boolean}},System.Guid)
  commentId: M:Hybrid.Zero.Authorization.SecurityManagerBase`18.CheckModuleFunctionExists(System.Linq.Expressions.Expression{System.Func{`7,System.Boolean}},System.Guid)
  id: CheckModuleFunctionExists(System.Linq.Expressions.Expression{System.Func{`7,System.Boolean}},System.Guid)
  parent: Hybrid.Zero.Authorization.SecurityManagerBase`18
  langs:
  - csharp
  - vb
  name: CheckModuleFunctionExists(Expression<Func<TModuleFunction, Boolean>>, Guid)
  nameWithType: SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>.CheckModuleFunctionExists(Expression<Func<TModuleFunction, Boolean>>, Guid)
  fullName: Hybrid.Zero.Authorization.SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>.CheckModuleFunctionExists(System.Linq.Expressions.Expression<System.Func<TModuleFunction, System.Boolean>>, System.Guid)
  type: Method
  source:
    remote:
      path: src/Hybrid.Zero/Authorization/SecurityManagerBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: CheckModuleFunctionExists
    path: ../src/Hybrid.Zero/Authorization/SecurityManagerBase.cs
    startLine: 435
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Zero.Authorization
  summary: "\n检查模块功能信息是否存在\n"
  example: []
  syntax:
    content: public virtual Task<bool> CheckModuleFunctionExists(Expression<Func<TModuleFunction, bool>> predicate, Guid id = default(Guid))
    parameters:
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TModuleFunction},System.Boolean}}
      description: 检查谓语表达式
    - id: id
      type: System.Guid
      description: 更新的模块功能信息编号
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: 模块功能信息是否存在
    content.vb: Public Overridable Function CheckModuleFunctionExists(predicate As Expression(Of Func(Of TModuleFunction, Boolean)), id As Guid = Nothing) As Task(Of Boolean)
  overload: Hybrid.Zero.Authorization.SecurityManagerBase`18.CheckModuleFunctionExists*
  implements:
  - Hybrid.Zero.Authorization.IModuleFunctionStore{{TModuleFunction},{TModuleKey}}.CheckModuleFunctionExists(System.Linq.Expressions.Expression{System.Func{{TModuleFunction},System.Boolean}},System.Guid)
  nameWithType.vb: SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey).CheckModuleFunctionExists(Expression(Of Func(Of TModuleFunction, Boolean)), Guid)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Hybrid.Zero.Authorization.SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey).CheckModuleFunctionExists(System.Linq.Expressions.Expression(Of System.Func(Of TModuleFunction, System.Boolean)), System.Guid)
  name.vb: CheckModuleFunctionExists(Expression(Of Func(Of TModuleFunction, Boolean)), Guid)
- uid: Hybrid.Zero.Authorization.SecurityManagerBase`18.SetModuleFunctions(`6,System.Guid[])
  commentId: M:Hybrid.Zero.Authorization.SecurityManagerBase`18.SetModuleFunctions(`6,System.Guid[])
  id: SetModuleFunctions(`6,System.Guid[])
  parent: Hybrid.Zero.Authorization.SecurityManagerBase`18
  langs:
  - csharp
  - vb
  name: SetModuleFunctions(TModuleKey, Guid[])
  nameWithType: SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>.SetModuleFunctions(TModuleKey, Guid[])
  fullName: Hybrid.Zero.Authorization.SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>.SetModuleFunctions(TModuleKey, System.Guid[])
  type: Method
  source:
    remote:
      path: src/Hybrid.Zero/Authorization/SecurityManagerBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: SetModuleFunctions
    path: ../src/Hybrid.Zero/Authorization/SecurityManagerBase.cs
    startLine: 446
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Zero.Authorization
  summary: "\n设置模块的功能信息\n"
  example: []
  syntax:
    content: public virtual Task<OperationResult> SetModuleFunctions(TModuleKey moduleId, Guid[] functionIds)
    parameters:
    - id: moduleId
      type: '{TModuleKey}'
      description: 模块编号
    - id: functionIds
      type: System.Guid[]
      description: 要设置的功能编号
    return:
      type: System.Threading.Tasks.Task{Hybrid.Data.OperationResult}
      description: 业务操作结果
    content.vb: Public Overridable Function SetModuleFunctions(moduleId As TModuleKey, functionIds As Guid()) As Task(Of OperationResult)
  overload: Hybrid.Zero.Authorization.SecurityManagerBase`18.SetModuleFunctions*
  implements:
  - Hybrid.Zero.Authorization.IModuleFunctionStore{{TModuleFunction},{TModuleKey}}.SetModuleFunctions({TModuleKey},System.Guid[])
  nameWithType.vb: SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey).SetModuleFunctions(TModuleKey, Guid())
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Hybrid.Zero.Authorization.SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey).SetModuleFunctions(TModuleKey, System.Guid())
  name.vb: SetModuleFunctions(TModuleKey, Guid())
- uid: Hybrid.Zero.Authorization.SecurityManagerBase`18.ModuleRoles
  commentId: P:Hybrid.Zero.Authorization.SecurityManagerBase`18.ModuleRoles
  id: ModuleRoles
  parent: Hybrid.Zero.Authorization.SecurityManagerBase`18
  langs:
  - csharp
  - vb
  name: ModuleRoles
  nameWithType: SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>.ModuleRoles
  fullName: Hybrid.Zero.Authorization.SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>.ModuleRoles
  type: Property
  source:
    remote:
      path: src/Hybrid.Zero/Authorization/SecurityManagerBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: ModuleRoles
    path: ../src/Hybrid.Zero/Authorization/SecurityManagerBase.cs
    startLine: 510
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Zero.Authorization
  summary: "\n获取 模块角色信息查询数据集\n"
  example: []
  syntax:
    content: public IQueryable<TModuleRole> ModuleRoles { get; }
    parameters: []
    return:
      type: System.Linq.IQueryable{{TModuleRole}}
    content.vb: Public ReadOnly Property ModuleRoles As IQueryable(Of TModuleRole)
  overload: Hybrid.Zero.Authorization.SecurityManagerBase`18.ModuleRoles*
  implements:
  - Hybrid.Zero.Authorization.IModuleRoleStore{{TModuleRole},{TRoleKey},{TModuleKey}}.ModuleRoles
  nameWithType.vb: SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey).ModuleRoles
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Hybrid.Zero.Authorization.SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey).ModuleRoles
- uid: Hybrid.Zero.Authorization.SecurityManagerBase`18.CheckModuleRoleExists(System.Linq.Expressions.Expression{System.Func{`8,System.Boolean}},System.Guid)
  commentId: M:Hybrid.Zero.Authorization.SecurityManagerBase`18.CheckModuleRoleExists(System.Linq.Expressions.Expression{System.Func{`8,System.Boolean}},System.Guid)
  id: CheckModuleRoleExists(System.Linq.Expressions.Expression{System.Func{`8,System.Boolean}},System.Guid)
  parent: Hybrid.Zero.Authorization.SecurityManagerBase`18
  langs:
  - csharp
  - vb
  name: CheckModuleRoleExists(Expression<Func<TModuleRole, Boolean>>, Guid)
  nameWithType: SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>.CheckModuleRoleExists(Expression<Func<TModuleRole, Boolean>>, Guid)
  fullName: Hybrid.Zero.Authorization.SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>.CheckModuleRoleExists(System.Linq.Expressions.Expression<System.Func<TModuleRole, System.Boolean>>, System.Guid)
  type: Method
  source:
    remote:
      path: src/Hybrid.Zero/Authorization/SecurityManagerBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: CheckModuleRoleExists
    path: ../src/Hybrid.Zero/Authorization/SecurityManagerBase.cs
    startLine: 518
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Zero.Authorization
  summary: "\n检查模块角色信息是否存在\n"
  example: []
  syntax:
    content: public virtual Task<bool> CheckModuleRoleExists(Expression<Func<TModuleRole, bool>> predicate, Guid id = default(Guid))
    parameters:
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TModuleRole},System.Boolean}}
      description: 检查谓语表达式
    - id: id
      type: System.Guid
      description: 更新的模块角色信息编号
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: 模块角色信息是否存在
    content.vb: Public Overridable Function CheckModuleRoleExists(predicate As Expression(Of Func(Of TModuleRole, Boolean)), id As Guid = Nothing) As Task(Of Boolean)
  overload: Hybrid.Zero.Authorization.SecurityManagerBase`18.CheckModuleRoleExists*
  implements:
  - Hybrid.Zero.Authorization.IModuleRoleStore{{TModuleRole},{TRoleKey},{TModuleKey}}.CheckModuleRoleExists(System.Linq.Expressions.Expression{System.Func{{TModuleRole},System.Boolean}},System.Guid)
  nameWithType.vb: SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey).CheckModuleRoleExists(Expression(Of Func(Of TModuleRole, Boolean)), Guid)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Hybrid.Zero.Authorization.SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey).CheckModuleRoleExists(System.Linq.Expressions.Expression(Of System.Func(Of TModuleRole, System.Boolean)), System.Guid)
  name.vb: CheckModuleRoleExists(Expression(Of Func(Of TModuleRole, Boolean)), Guid)
- uid: Hybrid.Zero.Authorization.SecurityManagerBase`18.SetRoleModules(`15,`6[])
  commentId: M:Hybrid.Zero.Authorization.SecurityManagerBase`18.SetRoleModules(`15,`6[])
  id: SetRoleModules(`15,`6[])
  parent: Hybrid.Zero.Authorization.SecurityManagerBase`18
  langs:
  - csharp
  - vb
  name: SetRoleModules(TRoleKey, TModuleKey[])
  nameWithType: SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>.SetRoleModules(TRoleKey, TModuleKey[])
  fullName: Hybrid.Zero.Authorization.SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>.SetRoleModules(TRoleKey, TModuleKey[])
  type: Method
  source:
    remote:
      path: src/Hybrid.Zero/Authorization/SecurityManagerBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: SetRoleModules
    path: ../src/Hybrid.Zero/Authorization/SecurityManagerBase.cs
    startLine: 529
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Zero.Authorization
  summary: "\n设置角色的可访问模块\n"
  example: []
  syntax:
    content: public virtual Task<OperationResult> SetRoleModules(TRoleKey roleId, TModuleKey[] moduleIds)
    parameters:
    - id: roleId
      type: '{TRoleKey}'
      description: 角色编号
    - id: moduleIds
      type: '{TModuleKey}[]'
      description: 要赋予的模块编号集合
    return:
      type: System.Threading.Tasks.Task{Hybrid.Data.OperationResult}
      description: 业务操作结果
    content.vb: Public Overridable Function SetRoleModules(roleId As TRoleKey, moduleIds As TModuleKey()) As Task(Of OperationResult)
  overload: Hybrid.Zero.Authorization.SecurityManagerBase`18.SetRoleModules*
  implements:
  - Hybrid.Zero.Authorization.IModuleRoleStore{{TModuleRole},{TRoleKey},{TModuleKey}}.SetRoleModules({TRoleKey},{TModuleKey}[])
  nameWithType.vb: SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey).SetRoleModules(TRoleKey, TModuleKey())
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Hybrid.Zero.Authorization.SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey).SetRoleModules(TRoleKey, TModuleKey())
  name.vb: SetRoleModules(TRoleKey, TModuleKey())
- uid: Hybrid.Zero.Authorization.SecurityManagerBase`18.GetRoleModuleIds(`15)
  commentId: M:Hybrid.Zero.Authorization.SecurityManagerBase`18.GetRoleModuleIds(`15)
  id: GetRoleModuleIds(`15)
  parent: Hybrid.Zero.Authorization.SecurityManagerBase`18
  langs:
  - csharp
  - vb
  name: GetRoleModuleIds(TRoleKey)
  nameWithType: SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>.GetRoleModuleIds(TRoleKey)
  fullName: Hybrid.Zero.Authorization.SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>.GetRoleModuleIds(TRoleKey)
  type: Method
  source:
    remote:
      path: src/Hybrid.Zero/Authorization/SecurityManagerBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: GetRoleModuleIds
    path: ../src/Hybrid.Zero/Authorization/SecurityManagerBase.cs
    startLine: 598
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Zero.Authorization
  summary: "\n获取角色可访问模块编号\n"
  example: []
  syntax:
    content: public virtual TModuleKey[] GetRoleModuleIds(TRoleKey roleId)
    parameters:
    - id: roleId
      type: '{TRoleKey}'
      description: 角色编号
    return:
      type: '{TModuleKey}[]'
      description: 模块编号集合
    content.vb: Public Overridable Function GetRoleModuleIds(roleId As TRoleKey) As TModuleKey()
  overload: Hybrid.Zero.Authorization.SecurityManagerBase`18.GetRoleModuleIds*
  implements:
  - Hybrid.Zero.Authorization.IModuleRoleStore{{TModuleRole},{TRoleKey},{TModuleKey}}.GetRoleModuleIds({TRoleKey})
  nameWithType.vb: SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey).GetRoleModuleIds(TRoleKey)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Hybrid.Zero.Authorization.SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey).GetRoleModuleIds(TRoleKey)
- uid: Hybrid.Zero.Authorization.SecurityManagerBase`18.ModuleUsers
  commentId: P:Hybrid.Zero.Authorization.SecurityManagerBase`18.ModuleUsers
  id: ModuleUsers
  parent: Hybrid.Zero.Authorization.SecurityManagerBase`18
  langs:
  - csharp
  - vb
  name: ModuleUsers
  nameWithType: SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>.ModuleUsers
  fullName: Hybrid.Zero.Authorization.SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>.ModuleUsers
  type: Property
  source:
    remote:
      path: src/Hybrid.Zero/Authorization/SecurityManagerBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: ModuleUsers
    path: ../src/Hybrid.Zero/Authorization/SecurityManagerBase.cs
    startLine: 611
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Zero.Authorization
  summary: "\n获取 模块用户信息查询数据集\n"
  example: []
  syntax:
    content: public IQueryable<TModuleUser> ModuleUsers { get; }
    parameters: []
    return:
      type: System.Linq.IQueryable{{TModuleUser}}
    content.vb: Public ReadOnly Property ModuleUsers As IQueryable(Of TModuleUser)
  overload: Hybrid.Zero.Authorization.SecurityManagerBase`18.ModuleUsers*
  implements:
  - Hybrid.Zero.Authorization.IModuleUserStore{{TModuleUser},{TUserKey},{TModuleKey}}.ModuleUsers
  nameWithType.vb: SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey).ModuleUsers
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Hybrid.Zero.Authorization.SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey).ModuleUsers
- uid: Hybrid.Zero.Authorization.SecurityManagerBase`18.CheckModuleUserExists(System.Linq.Expressions.Expression{System.Func{`9,System.Boolean}},System.Guid)
  commentId: M:Hybrid.Zero.Authorization.SecurityManagerBase`18.CheckModuleUserExists(System.Linq.Expressions.Expression{System.Func{`9,System.Boolean}},System.Guid)
  id: CheckModuleUserExists(System.Linq.Expressions.Expression{System.Func{`9,System.Boolean}},System.Guid)
  parent: Hybrid.Zero.Authorization.SecurityManagerBase`18
  langs:
  - csharp
  - vb
  name: CheckModuleUserExists(Expression<Func<TModuleUser, Boolean>>, Guid)
  nameWithType: SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>.CheckModuleUserExists(Expression<Func<TModuleUser, Boolean>>, Guid)
  fullName: Hybrid.Zero.Authorization.SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>.CheckModuleUserExists(System.Linq.Expressions.Expression<System.Func<TModuleUser, System.Boolean>>, System.Guid)
  type: Method
  source:
    remote:
      path: src/Hybrid.Zero/Authorization/SecurityManagerBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: CheckModuleUserExists
    path: ../src/Hybrid.Zero/Authorization/SecurityManagerBase.cs
    startLine: 619
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Zero.Authorization
  summary: "\n检查模块用户信息是否存在\n"
  example: []
  syntax:
    content: public virtual Task<bool> CheckModuleUserExists(Expression<Func<TModuleUser, bool>> predicate, Guid id = default(Guid))
    parameters:
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TModuleUser},System.Boolean}}
      description: 检查谓语表达式
    - id: id
      type: System.Guid
      description: 更新的模块用户信息编号
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: 模块用户信息是否存在
    content.vb: Public Overridable Function CheckModuleUserExists(predicate As Expression(Of Func(Of TModuleUser, Boolean)), id As Guid = Nothing) As Task(Of Boolean)
  overload: Hybrid.Zero.Authorization.SecurityManagerBase`18.CheckModuleUserExists*
  implements:
  - Hybrid.Zero.Authorization.IModuleUserStore{{TModuleUser},{TUserKey},{TModuleKey}}.CheckModuleUserExists(System.Linq.Expressions.Expression{System.Func{{TModuleUser},System.Boolean}},System.Guid)
  nameWithType.vb: SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey).CheckModuleUserExists(Expression(Of Func(Of TModuleUser, Boolean)), Guid)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Hybrid.Zero.Authorization.SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey).CheckModuleUserExists(System.Linq.Expressions.Expression(Of System.Func(Of TModuleUser, System.Boolean)), System.Guid)
  name.vb: CheckModuleUserExists(Expression(Of Func(Of TModuleUser, Boolean)), Guid)
- uid: Hybrid.Zero.Authorization.SecurityManagerBase`18.SetUserModules(`17,`6[])
  commentId: M:Hybrid.Zero.Authorization.SecurityManagerBase`18.SetUserModules(`17,`6[])
  id: SetUserModules(`17,`6[])
  parent: Hybrid.Zero.Authorization.SecurityManagerBase`18
  langs:
  - csharp
  - vb
  name: SetUserModules(TUserKey, TModuleKey[])
  nameWithType: SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>.SetUserModules(TUserKey, TModuleKey[])
  fullName: Hybrid.Zero.Authorization.SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>.SetUserModules(TUserKey, TModuleKey[])
  type: Method
  source:
    remote:
      path: src/Hybrid.Zero/Authorization/SecurityManagerBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: SetUserModules
    path: ../src/Hybrid.Zero/Authorization/SecurityManagerBase.cs
    startLine: 630
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Zero.Authorization
  summary: "\n设置用户的可访问模块\n"
  example: []
  syntax:
    content: public virtual Task<OperationResult> SetUserModules(TUserKey userId, TModuleKey[] moduleIds)
    parameters:
    - id: userId
      type: '{TUserKey}'
      description: 用户编号
    - id: moduleIds
      type: '{TModuleKey}[]'
      description: 要赋给用户的模块编号集合
    return:
      type: System.Threading.Tasks.Task{Hybrid.Data.OperationResult}
      description: 业务操作结果
    content.vb: Public Overridable Function SetUserModules(userId As TUserKey, moduleIds As TModuleKey()) As Task(Of OperationResult)
  overload: Hybrid.Zero.Authorization.SecurityManagerBase`18.SetUserModules*
  implements:
  - Hybrid.Zero.Authorization.IModuleUserStore{{TModuleUser},{TUserKey},{TModuleKey}}.SetUserModules({TUserKey},{TModuleKey}[])
  nameWithType.vb: SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey).SetUserModules(TUserKey, TModuleKey())
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Hybrid.Zero.Authorization.SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey).SetUserModules(TUserKey, TModuleKey())
  name.vb: SetUserModules(TUserKey, TModuleKey())
- uid: Hybrid.Zero.Authorization.SecurityManagerBase`18.GetUserSelfModuleIds(`17)
  commentId: M:Hybrid.Zero.Authorization.SecurityManagerBase`18.GetUserSelfModuleIds(`17)
  id: GetUserSelfModuleIds(`17)
  parent: Hybrid.Zero.Authorization.SecurityManagerBase`18
  langs:
  - csharp
  - vb
  name: GetUserSelfModuleIds(TUserKey)
  nameWithType: SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>.GetUserSelfModuleIds(TUserKey)
  fullName: Hybrid.Zero.Authorization.SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>.GetUserSelfModuleIds(TUserKey)
  type: Method
  source:
    remote:
      path: src/Hybrid.Zero/Authorization/SecurityManagerBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: GetUserSelfModuleIds
    path: ../src/Hybrid.Zero/Authorization/SecurityManagerBase.cs
    startLine: 695
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Zero.Authorization
  summary: "\n获取用户自己的可访问模块编号\n"
  example: []
  syntax:
    content: public virtual TModuleKey[] GetUserSelfModuleIds(TUserKey userId)
    parameters:
    - id: userId
      type: '{TUserKey}'
      description: 用户编号
    return:
      type: '{TModuleKey}[]'
      description: 模块编号集合
    content.vb: Public Overridable Function GetUserSelfModuleIds(userId As TUserKey) As TModuleKey()
  overload: Hybrid.Zero.Authorization.SecurityManagerBase`18.GetUserSelfModuleIds*
  implements:
  - Hybrid.Zero.Authorization.IModuleUserStore{{TModuleUser},{TUserKey},{TModuleKey}}.GetUserSelfModuleIds({TUserKey})
  nameWithType.vb: SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey).GetUserSelfModuleIds(TUserKey)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Hybrid.Zero.Authorization.SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey).GetUserSelfModuleIds(TUserKey)
- uid: Hybrid.Zero.Authorization.SecurityManagerBase`18.GetUserWithRoleModuleIds(`17)
  commentId: M:Hybrid.Zero.Authorization.SecurityManagerBase`18.GetUserWithRoleModuleIds(`17)
  id: GetUserWithRoleModuleIds(`17)
  parent: Hybrid.Zero.Authorization.SecurityManagerBase`18
  langs:
  - csharp
  - vb
  name: GetUserWithRoleModuleIds(TUserKey)
  nameWithType: SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>.GetUserWithRoleModuleIds(TUserKey)
  fullName: Hybrid.Zero.Authorization.SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>.GetUserWithRoleModuleIds(TUserKey)
  type: Method
  source:
    remote:
      path: src/Hybrid.Zero/Authorization/SecurityManagerBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: GetUserWithRoleModuleIds
    path: ../src/Hybrid.Zero/Authorization/SecurityManagerBase.cs
    startLine: 706
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Zero.Authorization
  summary: "\n获取用户及其拥有角色可访问模块编号\n"
  example: []
  syntax:
    content: public virtual TModuleKey[] GetUserWithRoleModuleIds(TUserKey userId)
    parameters:
    - id: userId
      type: '{TUserKey}'
      description: 用户编号
    return:
      type: '{TModuleKey}[]'
      description: 模块编号集合
    content.vb: Public Overridable Function GetUserWithRoleModuleIds(userId As TUserKey) As TModuleKey()
  overload: Hybrid.Zero.Authorization.SecurityManagerBase`18.GetUserWithRoleModuleIds*
  implements:
  - Hybrid.Zero.Authorization.IModuleUserStore{{TModuleUser},{TUserKey},{TModuleKey}}.GetUserWithRoleModuleIds({TUserKey})
  nameWithType.vb: SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey).GetUserWithRoleModuleIds(TUserKey)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Hybrid.Zero.Authorization.SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey).GetUserWithRoleModuleIds(TUserKey)
- uid: Hybrid.Zero.Authorization.SecurityManagerBase`18.EntityRoles
  commentId: P:Hybrid.Zero.Authorization.SecurityManagerBase`18.EntityRoles
  id: EntityRoles
  parent: Hybrid.Zero.Authorization.SecurityManagerBase`18
  langs:
  - csharp
  - vb
  name: EntityRoles
  nameWithType: SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>.EntityRoles
  fullName: Hybrid.Zero.Authorization.SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>.EntityRoles
  type: Property
  source:
    remote:
      path: src/Hybrid.Zero/Authorization/SecurityManagerBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: EntityRoles
    path: ../src/Hybrid.Zero/Authorization/SecurityManagerBase.cs
    startLine: 726
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Zero.Authorization
  summary: "\n获取 实体角色信息查询数据集\n"
  example: []
  syntax:
    content: public virtual IQueryable<TEntityRole> EntityRoles { get; }
    parameters: []
    return:
      type: System.Linq.IQueryable{{TEntityRole}}
    content.vb: Public Overridable ReadOnly Property EntityRoles As IQueryable(Of TEntityRole)
  overload: Hybrid.Zero.Authorization.SecurityManagerBase`18.EntityRoles*
  implements:
  - Hybrid.Zero.Authorization.IEntityRoleStore{{TEntityRole},{TEntityRoleInputDto},{TRoleKey}}.EntityRoles
  nameWithType.vb: SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey).EntityRoles
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
  fullName.vb: Hybrid.Zero.Authorization.SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey).EntityRoles
- uid: Hybrid.Zero.Authorization.SecurityManagerBase`18.CheckEntityRoleExists(System.Linq.Expressions.Expression{System.Func{`10,System.Boolean}},System.Guid)
  commentId: M:Hybrid.Zero.Authorization.SecurityManagerBase`18.CheckEntityRoleExists(System.Linq.Expressions.Expression{System.Func{`10,System.Boolean}},System.Guid)
  id: CheckEntityRoleExists(System.Linq.Expressions.Expression{System.Func{`10,System.Boolean}},System.Guid)
  parent: Hybrid.Zero.Authorization.SecurityManagerBase`18
  langs:
  - csharp
  - vb
  name: CheckEntityRoleExists(Expression<Func<TEntityRole, Boolean>>, Guid)
  nameWithType: SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>.CheckEntityRoleExists(Expression<Func<TEntityRole, Boolean>>, Guid)
  fullName: Hybrid.Zero.Authorization.SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>.CheckEntityRoleExists(System.Linq.Expressions.Expression<System.Func<TEntityRole, System.Boolean>>, System.Guid)
  type: Method
  source:
    remote:
      path: src/Hybrid.Zero/Authorization/SecurityManagerBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: CheckEntityRoleExists
    path: ../src/Hybrid.Zero/Authorization/SecurityManagerBase.cs
    startLine: 734
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Zero.Authorization
  summary: "\n检查实体角色信息是否存在\n"
  example: []
  syntax:
    content: public virtual Task<bool> CheckEntityRoleExists(Expression<Func<TEntityRole, bool>> predicate, Guid id = default(Guid))
    parameters:
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TEntityRole},System.Boolean}}
      description: 检查谓语表达式
    - id: id
      type: System.Guid
      description: 更新的实体角色信息编号
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: 实体角色信息是否存在
    content.vb: Public Overridable Function CheckEntityRoleExists(predicate As Expression(Of Func(Of TEntityRole, Boolean)), id As Guid = Nothing) As Task(Of Boolean)
  overload: Hybrid.Zero.Authorization.SecurityManagerBase`18.CheckEntityRoleExists*
  implements:
  - Hybrid.Zero.Authorization.IEntityRoleStore{{TEntityRole},{TEntityRoleInputDto},{TRoleKey}}.CheckEntityRoleExists(System.Linq.Expressions.Expression{System.Func{{TEntityRole},System.Boolean}},System.Guid)
  nameWithType.vb: SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey).CheckEntityRoleExists(Expression(Of Func(Of TEntityRole, Boolean)), Guid)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Hybrid.Zero.Authorization.SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey).CheckEntityRoleExists(System.Linq.Expressions.Expression(Of System.Func(Of TEntityRole, System.Boolean)), System.Guid)
  name.vb: CheckEntityRoleExists(Expression(Of Func(Of TEntityRole, Boolean)), Guid)
- uid: Hybrid.Zero.Authorization.SecurityManagerBase`18.GetEntityRoleFilterGroups(`15,System.Guid,Hybrid.Authorization.DataAuthOperation)
  commentId: M:Hybrid.Zero.Authorization.SecurityManagerBase`18.GetEntityRoleFilterGroups(`15,System.Guid,Hybrid.Authorization.DataAuthOperation)
  id: GetEntityRoleFilterGroups(`15,System.Guid,Hybrid.Authorization.DataAuthOperation)
  parent: Hybrid.Zero.Authorization.SecurityManagerBase`18
  langs:
  - csharp
  - vb
  name: GetEntityRoleFilterGroups(TRoleKey, Guid, DataAuthOperation)
  nameWithType: SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>.GetEntityRoleFilterGroups(TRoleKey, Guid, DataAuthOperation)
  fullName: Hybrid.Zero.Authorization.SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>.GetEntityRoleFilterGroups(TRoleKey, System.Guid, Hybrid.Authorization.DataAuthOperation)
  type: Method
  source:
    remote:
      path: src/Hybrid.Zero/Authorization/SecurityManagerBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: GetEntityRoleFilterGroups
    path: ../src/Hybrid.Zero/Authorization/SecurityManagerBase.cs
    startLine: 746
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Zero.Authorization
  summary: "\n获取指定角色和实体的过滤条件组\n"
  example: []
  syntax:
    content: public virtual FilterGroup[] GetEntityRoleFilterGroups(TRoleKey roleId, Guid entityId, DataAuthOperation operation)
    parameters:
    - id: roleId
      type: '{TRoleKey}'
      description: 角色编号
    - id: entityId
      type: System.Guid
      description: 实体编号
    - id: operation
      type: Hybrid.Authorization.DataAuthOperation
      description: 操作
    return:
      type: Hybrid.Filter.FilterGroup[]
      description: 过滤条件组
    content.vb: Public Overridable Function GetEntityRoleFilterGroups(roleId As TRoleKey, entityId As Guid, operation As DataAuthOperation) As FilterGroup()
  overload: Hybrid.Zero.Authorization.SecurityManagerBase`18.GetEntityRoleFilterGroups*
  implements:
  - Hybrid.Zero.Authorization.IEntityRoleStore{{TEntityRole},{TEntityRoleInputDto},{TRoleKey}}.GetEntityRoleFilterGroups({TRoleKey},System.Guid,Hybrid.Authorization.DataAuthOperation)
  nameWithType.vb: SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey).GetEntityRoleFilterGroups(TRoleKey, Guid, DataAuthOperation)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Hybrid.Zero.Authorization.SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey).GetEntityRoleFilterGroups(TRoleKey, System.Guid, Hybrid.Authorization.DataAuthOperation)
- uid: Hybrid.Zero.Authorization.SecurityManagerBase`18.CreateEntityRoles(`11[])
  commentId: M:Hybrid.Zero.Authorization.SecurityManagerBase`18.CreateEntityRoles(`11[])
  id: CreateEntityRoles(`11[])
  parent: Hybrid.Zero.Authorization.SecurityManagerBase`18
  langs:
  - csharp
  - vb
  name: CreateEntityRoles(TEntityRoleInputDto[])
  nameWithType: SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>.CreateEntityRoles(TEntityRoleInputDto[])
  fullName: Hybrid.Zero.Authorization.SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>.CreateEntityRoles(TEntityRoleInputDto[])
  type: Method
  source:
    remote:
      path: src/Hybrid.Zero/Authorization/SecurityManagerBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: CreateEntityRoles
    path: ../src/Hybrid.Zero/Authorization/SecurityManagerBase.cs
    startLine: 757
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Zero.Authorization
  summary: "\n添加实体角色信息\n"
  example: []
  syntax:
    content: public virtual Task<OperationResult> CreateEntityRoles(params TEntityRoleInputDto[] dtos)
    parameters:
    - id: dtos
      type: '{TEntityRoleInputDto}[]'
      description: 要添加的实体角色信息DTO信息
    return:
      type: System.Threading.Tasks.Task{Hybrid.Data.OperationResult}
      description: 业务操作结果
    content.vb: Public Overridable Function CreateEntityRoles(ParamArray dtos As TEntityRoleInputDto()) As Task(Of OperationResult)
  overload: Hybrid.Zero.Authorization.SecurityManagerBase`18.CreateEntityRoles*
  implements:
  - Hybrid.Zero.Authorization.IEntityRoleStore{{TEntityRole},{TEntityRoleInputDto},{TRoleKey}}.CreateEntityRoles({TEntityRoleInputDto}[])
  nameWithType.vb: SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey).CreateEntityRoles(TEntityRoleInputDto())
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Hybrid.Zero.Authorization.SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey).CreateEntityRoles(TEntityRoleInputDto())
  name.vb: CreateEntityRoles(TEntityRoleInputDto())
- uid: Hybrid.Zero.Authorization.SecurityManagerBase`18.UpdateEntityRoles(`11[])
  commentId: M:Hybrid.Zero.Authorization.SecurityManagerBase`18.UpdateEntityRoles(`11[])
  id: UpdateEntityRoles(`11[])
  parent: Hybrid.Zero.Authorization.SecurityManagerBase`18
  langs:
  - csharp
  - vb
  name: UpdateEntityRoles(TEntityRoleInputDto[])
  nameWithType: SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>.UpdateEntityRoles(TEntityRoleInputDto[])
  fullName: Hybrid.Zero.Authorization.SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>.UpdateEntityRoles(TEntityRoleInputDto[])
  type: Method
  source:
    remote:
      path: src/Hybrid.Zero/Authorization/SecurityManagerBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: UpdateEntityRoles
    path: ../src/Hybrid.Zero/Authorization/SecurityManagerBase.cs
    startLine: 807
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Zero.Authorization
  summary: "\n更新实体角色信息\n"
  example: []
  syntax:
    content: public virtual Task<OperationResult> UpdateEntityRoles(params TEntityRoleInputDto[] dtos)
    parameters:
    - id: dtos
      type: '{TEntityRoleInputDto}[]'
      description: 包含更新信息的实体角色信息DTO信息
    return:
      type: System.Threading.Tasks.Task{Hybrid.Data.OperationResult}
      description: 业务操作结果
    content.vb: Public Overridable Function UpdateEntityRoles(ParamArray dtos As TEntityRoleInputDto()) As Task(Of OperationResult)
  overload: Hybrid.Zero.Authorization.SecurityManagerBase`18.UpdateEntityRoles*
  implements:
  - Hybrid.Zero.Authorization.IEntityRoleStore{{TEntityRole},{TEntityRoleInputDto},{TRoleKey}}.UpdateEntityRoles({TEntityRoleInputDto}[])
  nameWithType.vb: SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey).UpdateEntityRoles(TEntityRoleInputDto())
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Hybrid.Zero.Authorization.SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey).UpdateEntityRoles(TEntityRoleInputDto())
  name.vb: UpdateEntityRoles(TEntityRoleInputDto())
- uid: Hybrid.Zero.Authorization.SecurityManagerBase`18.DeleteEntityRoles(System.Guid[])
  commentId: M:Hybrid.Zero.Authorization.SecurityManagerBase`18.DeleteEntityRoles(System.Guid[])
  id: DeleteEntityRoles(System.Guid[])
  parent: Hybrid.Zero.Authorization.SecurityManagerBase`18
  langs:
  - csharp
  - vb
  name: DeleteEntityRoles(Guid[])
  nameWithType: SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>.DeleteEntityRoles(Guid[])
  fullName: Hybrid.Zero.Authorization.SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>.DeleteEntityRoles(System.Guid[])
  type: Method
  source:
    remote:
      path: src/Hybrid.Zero/Authorization/SecurityManagerBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: DeleteEntityRoles
    path: ../src/Hybrid.Zero/Authorization/SecurityManagerBase.cs
    startLine: 863
  assemblies:
  - Hybrid.Zero
  namespace: Hybrid.Zero.Authorization
  summary: "\n删除实体角色信息\n"
  example: []
  syntax:
    content: public virtual Task<OperationResult> DeleteEntityRoles(params Guid[] ids)
    parameters:
    - id: ids
      type: System.Guid[]
      description: 要删除的实体角色信息编号
    return:
      type: System.Threading.Tasks.Task{Hybrid.Data.OperationResult}
      description: 业务操作结果
    content.vb: Public Overridable Function DeleteEntityRoles(ParamArray ids As Guid()) As Task(Of OperationResult)
  overload: Hybrid.Zero.Authorization.SecurityManagerBase`18.DeleteEntityRoles*
  implements:
  - Hybrid.Zero.Authorization.IEntityRoleStore{{TEntityRole},{TEntityRoleInputDto},{TRoleKey}}.DeleteEntityRoles(System.Guid[])
  nameWithType.vb: SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey).DeleteEntityRoles(Guid())
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Hybrid.Zero.Authorization.SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey).DeleteEntityRoles(System.Guid())
  name.vb: DeleteEntityRoles(Guid())
references:
- uid: Hybrid.Zero.Authorization
  commentId: N:Hybrid.Zero.Authorization
  name: Hybrid.Zero.Authorization
  nameWithType: Hybrid.Zero.Authorization
  fullName: Hybrid.Zero.Authorization
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Hybrid.Zero.Authorization.IFunctionStore{{TFunction},{TFunctionInputDto}}
  commentId: T:Hybrid.Zero.Authorization.IFunctionStore{`0,`1}
  parent: Hybrid.Zero.Authorization
  definition: Hybrid.Zero.Authorization.IFunctionStore`2
  name: IFunctionStore<TFunction, TFunctionInputDto>
  nameWithType: IFunctionStore<TFunction, TFunctionInputDto>
  fullName: Hybrid.Zero.Authorization.IFunctionStore<TFunction, TFunctionInputDto>
  nameWithType.vb: IFunctionStore(Of TFunction, TFunctionInputDto)
  fullName.vb: Hybrid.Zero.Authorization.IFunctionStore(Of TFunction, TFunctionInputDto)
  name.vb: IFunctionStore(Of TFunction, TFunctionInputDto)
  spec.csharp:
  - uid: Hybrid.Zero.Authorization.IFunctionStore`2
    name: IFunctionStore
    nameWithType: IFunctionStore
    fullName: Hybrid.Zero.Authorization.IFunctionStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TFunctionInputDto
    nameWithType: TFunctionInputDto
    fullName: TFunctionInputDto
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Hybrid.Zero.Authorization.IFunctionStore`2
    name: IFunctionStore
    nameWithType: IFunctionStore
    fullName: Hybrid.Zero.Authorization.IFunctionStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TFunctionInputDto
    nameWithType: TFunctionInputDto
    fullName: TFunctionInputDto
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Authorization.IEntityInfoStore{{TEntityInfo},{TEntityInfoInputDto}}
  commentId: T:Hybrid.Zero.Authorization.IEntityInfoStore{`2,`3}
  parent: Hybrid.Zero.Authorization
  definition: Hybrid.Zero.Authorization.IEntityInfoStore`2
  name: IEntityInfoStore<TEntityInfo, TEntityInfoInputDto>
  nameWithType: IEntityInfoStore<TEntityInfo, TEntityInfoInputDto>
  fullName: Hybrid.Zero.Authorization.IEntityInfoStore<TEntityInfo, TEntityInfoInputDto>
  nameWithType.vb: IEntityInfoStore(Of TEntityInfo, TEntityInfoInputDto)
  fullName.vb: Hybrid.Zero.Authorization.IEntityInfoStore(Of TEntityInfo, TEntityInfoInputDto)
  name.vb: IEntityInfoStore(Of TEntityInfo, TEntityInfoInputDto)
  spec.csharp:
  - uid: Hybrid.Zero.Authorization.IEntityInfoStore`2
    name: IEntityInfoStore
    nameWithType: IEntityInfoStore
    fullName: Hybrid.Zero.Authorization.IEntityInfoStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntityInfo
    nameWithType: TEntityInfo
    fullName: TEntityInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityInfoInputDto
    nameWithType: TEntityInfoInputDto
    fullName: TEntityInfoInputDto
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Hybrid.Zero.Authorization.IEntityInfoStore`2
    name: IEntityInfoStore
    nameWithType: IEntityInfoStore
    fullName: Hybrid.Zero.Authorization.IEntityInfoStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntityInfo
    nameWithType: TEntityInfo
    fullName: TEntityInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityInfoInputDto
    nameWithType: TEntityInfoInputDto
    fullName: TEntityInfoInputDto
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Authorization.IModuleStore{{TModule},{TModuleInputDto},{TModuleKey}}
  commentId: T:Hybrid.Zero.Authorization.IModuleStore{`4,`5,`6}
  parent: Hybrid.Zero.Authorization
  definition: Hybrid.Zero.Authorization.IModuleStore`3
  name: IModuleStore<TModule, TModuleInputDto, TModuleKey>
  nameWithType: IModuleStore<TModule, TModuleInputDto, TModuleKey>
  fullName: Hybrid.Zero.Authorization.IModuleStore<TModule, TModuleInputDto, TModuleKey>
  nameWithType.vb: IModuleStore(Of TModule, TModuleInputDto, TModuleKey)
  fullName.vb: Hybrid.Zero.Authorization.IModuleStore(Of TModule, TModuleInputDto, TModuleKey)
  name.vb: IModuleStore(Of TModule, TModuleInputDto, TModuleKey)
  spec.csharp:
  - uid: Hybrid.Zero.Authorization.IModuleStore`3
    name: IModuleStore
    nameWithType: IModuleStore
    fullName: Hybrid.Zero.Authorization.IModuleStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TModule
    nameWithType: TModule
    fullName: TModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleInputDto
    nameWithType: TModuleInputDto
    fullName: TModuleInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleKey
    nameWithType: TModuleKey
    fullName: TModuleKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Hybrid.Zero.Authorization.IModuleStore`3
    name: IModuleStore
    nameWithType: IModuleStore
    fullName: Hybrid.Zero.Authorization.IModuleStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModule
    nameWithType: TModule
    fullName: TModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleInputDto
    nameWithType: TModuleInputDto
    fullName: TModuleInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleKey
    nameWithType: TModuleKey
    fullName: TModuleKey
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Authorization.IModuleFunctionStore{{TModuleFunction},{TModuleKey}}
  commentId: T:Hybrid.Zero.Authorization.IModuleFunctionStore{`7,`6}
  parent: Hybrid.Zero.Authorization
  definition: Hybrid.Zero.Authorization.IModuleFunctionStore`2
  name: IModuleFunctionStore<TModuleFunction, TModuleKey>
  nameWithType: IModuleFunctionStore<TModuleFunction, TModuleKey>
  fullName: Hybrid.Zero.Authorization.IModuleFunctionStore<TModuleFunction, TModuleKey>
  nameWithType.vb: IModuleFunctionStore(Of TModuleFunction, TModuleKey)
  fullName.vb: Hybrid.Zero.Authorization.IModuleFunctionStore(Of TModuleFunction, TModuleKey)
  name.vb: IModuleFunctionStore(Of TModuleFunction, TModuleKey)
  spec.csharp:
  - uid: Hybrid.Zero.Authorization.IModuleFunctionStore`2
    name: IModuleFunctionStore
    nameWithType: IModuleFunctionStore
    fullName: Hybrid.Zero.Authorization.IModuleFunctionStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TModuleFunction
    nameWithType: TModuleFunction
    fullName: TModuleFunction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleKey
    nameWithType: TModuleKey
    fullName: TModuleKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Hybrid.Zero.Authorization.IModuleFunctionStore`2
    name: IModuleFunctionStore
    nameWithType: IModuleFunctionStore
    fullName: Hybrid.Zero.Authorization.IModuleFunctionStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModuleFunction
    nameWithType: TModuleFunction
    fullName: TModuleFunction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleKey
    nameWithType: TModuleKey
    fullName: TModuleKey
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Authorization.IModuleRoleStore{{TModuleRole},{TRoleKey},{TModuleKey}}
  commentId: T:Hybrid.Zero.Authorization.IModuleRoleStore{`8,`15,`6}
  parent: Hybrid.Zero.Authorization
  definition: Hybrid.Zero.Authorization.IModuleRoleStore`3
  name: IModuleRoleStore<TModuleRole, TRoleKey, TModuleKey>
  nameWithType: IModuleRoleStore<TModuleRole, TRoleKey, TModuleKey>
  fullName: Hybrid.Zero.Authorization.IModuleRoleStore<TModuleRole, TRoleKey, TModuleKey>
  nameWithType.vb: IModuleRoleStore(Of TModuleRole, TRoleKey, TModuleKey)
  fullName.vb: Hybrid.Zero.Authorization.IModuleRoleStore(Of TModuleRole, TRoleKey, TModuleKey)
  name.vb: IModuleRoleStore(Of TModuleRole, TRoleKey, TModuleKey)
  spec.csharp:
  - uid: Hybrid.Zero.Authorization.IModuleRoleStore`3
    name: IModuleRoleStore
    nameWithType: IModuleRoleStore
    fullName: Hybrid.Zero.Authorization.IModuleRoleStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TModuleRole
    nameWithType: TModuleRole
    fullName: TModuleRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleKey
    nameWithType: TModuleKey
    fullName: TModuleKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Hybrid.Zero.Authorization.IModuleRoleStore`3
    name: IModuleRoleStore
    nameWithType: IModuleRoleStore
    fullName: Hybrid.Zero.Authorization.IModuleRoleStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModuleRole
    nameWithType: TModuleRole
    fullName: TModuleRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleKey
    nameWithType: TModuleKey
    fullName: TModuleKey
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Authorization.IModuleUserStore{{TModuleUser},{TUserKey},{TModuleKey}}
  commentId: T:Hybrid.Zero.Authorization.IModuleUserStore{`9,`17,`6}
  parent: Hybrid.Zero.Authorization
  definition: Hybrid.Zero.Authorization.IModuleUserStore`3
  name: IModuleUserStore<TModuleUser, TUserKey, TModuleKey>
  nameWithType: IModuleUserStore<TModuleUser, TUserKey, TModuleKey>
  fullName: Hybrid.Zero.Authorization.IModuleUserStore<TModuleUser, TUserKey, TModuleKey>
  nameWithType.vb: IModuleUserStore(Of TModuleUser, TUserKey, TModuleKey)
  fullName.vb: Hybrid.Zero.Authorization.IModuleUserStore(Of TModuleUser, TUserKey, TModuleKey)
  name.vb: IModuleUserStore(Of TModuleUser, TUserKey, TModuleKey)
  spec.csharp:
  - uid: Hybrid.Zero.Authorization.IModuleUserStore`3
    name: IModuleUserStore
    nameWithType: IModuleUserStore
    fullName: Hybrid.Zero.Authorization.IModuleUserStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TModuleUser
    nameWithType: TModuleUser
    fullName: TModuleUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserKey
    nameWithType: TUserKey
    fullName: TUserKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleKey
    nameWithType: TModuleKey
    fullName: TModuleKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Hybrid.Zero.Authorization.IModuleUserStore`3
    name: IModuleUserStore
    nameWithType: IModuleUserStore
    fullName: Hybrid.Zero.Authorization.IModuleUserStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModuleUser
    nameWithType: TModuleUser
    fullName: TModuleUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserKey
    nameWithType: TUserKey
    fullName: TUserKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleKey
    nameWithType: TModuleKey
    fullName: TModuleKey
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Authorization.IEntityRoleStore{{TEntityRole},{TEntityRoleInputDto},{TRoleKey}}
  commentId: T:Hybrid.Zero.Authorization.IEntityRoleStore{`10,`11,`15}
  parent: Hybrid.Zero.Authorization
  definition: Hybrid.Zero.Authorization.IEntityRoleStore`3
  name: IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>
  nameWithType: IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>
  fullName: Hybrid.Zero.Authorization.IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>
  nameWithType.vb: IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey)
  fullName.vb: Hybrid.Zero.Authorization.IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey)
  name.vb: IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey)
  spec.csharp:
  - uid: Hybrid.Zero.Authorization.IEntityRoleStore`3
    name: IEntityRoleStore
    nameWithType: IEntityRoleStore
    fullName: Hybrid.Zero.Authorization.IEntityRoleStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntityRole
    nameWithType: TEntityRole
    fullName: TEntityRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityRoleInputDto
    nameWithType: TEntityRoleInputDto
    fullName: TEntityRoleInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Hybrid.Zero.Authorization.IEntityRoleStore`3
    name: IEntityRoleStore
    nameWithType: IEntityRoleStore
    fullName: Hybrid.Zero.Authorization.IEntityRoleStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntityRole
    nameWithType: TEntityRole
    fullName: TEntityRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityRoleInputDto
    nameWithType: TEntityRoleInputDto
    fullName: TEntityRoleInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Extensions.ObjectExtensions.CastTo(System.Type)
  commentId: M:Hybrid.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
  parent: Hybrid.Extensions.ObjectExtensions
  definition: Hybrid.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
  name: CastTo(Type)
  nameWithType: ObjectExtensions.CastTo(Type)
  fullName: Hybrid.Extensions.ObjectExtensions.CastTo(System.Type)
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo(System.Type)
    name: CastTo
    nameWithType: ObjectExtensions.CastTo
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo(System.Type)
    name: CastTo
    nameWithType: ObjectExtensions.CastTo
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Extensions.ObjectExtensions.CastTo``1
  commentId: M:Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object)
  parent: Hybrid.Extensions.ObjectExtensions
  definition: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object)
  name: CastTo<T>()
  nameWithType: ObjectExtensions.CastTo<T>()
  fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>()
  nameWithType.vb: ObjectExtensions.CastTo(Of T)()
  fullName.vb: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)()
  name.vb: CastTo(Of T)()
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1
    name: CastTo<T>
    nameWithType: ObjectExtensions.CastTo<T>
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1
    name: CastTo(Of T)
    nameWithType: ObjectExtensions.CastTo(Of T)
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Extensions.ObjectExtensions.CastTo``1({T})
  commentId: M:Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
  parent: Hybrid.Extensions.ObjectExtensions
  definition: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
  name: CastTo<T>(T)
  nameWithType: ObjectExtensions.CastTo<T>(T)
  fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>(T)
  nameWithType.vb: ObjectExtensions.CastTo(Of T)(T)
  fullName.vb: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)(T)
  name.vb: CastTo(Of T)(T)
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(``0)
    name: CastTo<T>
    nameWithType: ObjectExtensions.CastTo<T>
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(``0)
    name: CastTo(Of T)
    nameWithType: ObjectExtensions.CastTo(Of T)
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Authorization.SecurityManagerBase`18.Hybrid.Extensions.ObjectExtensions.IsIn``1(Hybrid.Zero.Authorization.SecurityManagerBase{{TFunction},{TFunctionInputDto},{TEntityInfo},{TEntityInfoInputDto},{TModule},{TModuleInputDto},{TModuleKey},{TModuleFunction},{TModuleRole},{TModuleUser},{TEntityRole},{TEntityRoleInputDto},{TUserRole},{TUserRoleKey},{TRole},{TRoleKey},{TUser},{TUserKey}}[])
  commentId: M:Hybrid.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
  parent: Hybrid.Extensions.ObjectExtensions
  definition: Hybrid.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
  name: IsIn<SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>>(SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>[])
  nameWithType: ObjectExtensions.IsIn<SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>>(SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>[])
  fullName: Hybrid.Extensions.ObjectExtensions.IsIn<Hybrid.Zero.Authorization.SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>>(Hybrid.Zero.Authorization.SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>[])
  nameWithType.vb: ObjectExtensions.IsIn(Of SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey))(SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey)())
  fullName.vb: Hybrid.Extensions.ObjectExtensions.IsIn(Of Hybrid.Zero.Authorization.SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey))(Hybrid.Zero.Authorization.SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey)())
  name.vb: IsIn(Of SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey))(SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey)())
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.IsIn``1(``0[])
    name: IsIn<SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>>
    nameWithType: ObjectExtensions.IsIn<SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>>
    fullName: Hybrid.Extensions.ObjectExtensions.IsIn<Hybrid.Zero.Authorization.SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Hybrid.Zero.Authorization.SecurityManagerBase`18
    name: SecurityManagerBase
    nameWithType: SecurityManagerBase
    fullName: Hybrid.Zero.Authorization.SecurityManagerBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TFunctionInputDto
    nameWithType: TFunctionInputDto
    fullName: TFunctionInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityInfo
    nameWithType: TEntityInfo
    fullName: TEntityInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityInfoInputDto
    nameWithType: TEntityInfoInputDto
    fullName: TEntityInfoInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModule
    nameWithType: TModule
    fullName: TModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleInputDto
    nameWithType: TModuleInputDto
    fullName: TModuleInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleKey
    nameWithType: TModuleKey
    fullName: TModuleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleFunction
    nameWithType: TModuleFunction
    fullName: TModuleFunction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleRole
    nameWithType: TModuleRole
    fullName: TModuleRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleUser
    nameWithType: TModuleUser
    fullName: TModuleUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityRole
    nameWithType: TEntityRole
    fullName: TEntityRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityRoleInputDto
    nameWithType: TEntityRoleInputDto
    fullName: TEntityRoleInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserRole
    nameWithType: TUserRole
    fullName: TUserRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserRoleKey
    nameWithType: TUserRoleKey
    fullName: TUserRoleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserKey
    nameWithType: TUserKey
    fullName: TUserKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.IsIn``1(``0[])
    name: IsIn(Of SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey))
    nameWithType: ObjectExtensions.IsIn(Of SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey))
    fullName: Hybrid.Extensions.ObjectExtensions.IsIn(Of Hybrid.Zero.Authorization.SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey))
  - name: (
    nameWithType: (
    fullName: (
  - uid: Hybrid.Zero.Authorization.SecurityManagerBase`18
    name: SecurityManagerBase
    nameWithType: SecurityManagerBase
    fullName: Hybrid.Zero.Authorization.SecurityManagerBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TFunctionInputDto
    nameWithType: TFunctionInputDto
    fullName: TFunctionInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityInfo
    nameWithType: TEntityInfo
    fullName: TEntityInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityInfoInputDto
    nameWithType: TEntityInfoInputDto
    fullName: TEntityInfoInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModule
    nameWithType: TModule
    fullName: TModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleInputDto
    nameWithType: TModuleInputDto
    fullName: TModuleInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleKey
    nameWithType: TModuleKey
    fullName: TModuleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleFunction
    nameWithType: TModuleFunction
    fullName: TModuleFunction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleRole
    nameWithType: TModuleRole
    fullName: TModuleRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleUser
    nameWithType: TModuleUser
    fullName: TModuleUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityRole
    nameWithType: TEntityRole
    fullName: TEntityRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityRoleInputDto
    nameWithType: TEntityRoleInputDto
    fullName: TEntityRoleInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserRole
    nameWithType: TUserRole
    fullName: TUserRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserRoleKey
    nameWithType: TUserRoleKey
    fullName: TUserRoleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserKey
    nameWithType: TUserKey
    fullName: TUserKey
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Extensions.ObjectExtensions.ToDynamic
  commentId: M:Hybrid.Extensions.ObjectExtensions.ToDynamic(System.Object)
  parent: Hybrid.Extensions.ObjectExtensions
  definition: Hybrid.Extensions.ObjectExtensions.ToDynamic(System.Object)
  name: ToDynamic()
  nameWithType: ObjectExtensions.ToDynamic()
  fullName: Hybrid.Extensions.ObjectExtensions.ToDynamic()
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.ToDynamic
    name: ToDynamic
    nameWithType: ObjectExtensions.ToDynamic
    fullName: Hybrid.Extensions.ObjectExtensions.ToDynamic
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.ToDynamic
    name: ToDynamic
    nameWithType: ObjectExtensions.ToDynamic
    fullName: Hybrid.Extensions.ObjectExtensions.ToDynamic
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Authorization.SecurityManagerBase`18.Hybrid.Extensions.ObjectExtensions.DeepClone``1
  commentId: M:Hybrid.Extensions.ObjectExtensions.DeepClone``1(``0)
  parent: Hybrid.Extensions.ObjectExtensions
  definition: Hybrid.Extensions.ObjectExtensions.DeepClone``1(``0)
  name: DeepClone<SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>>()
  nameWithType: ObjectExtensions.DeepClone<SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>>()
  fullName: Hybrid.Extensions.ObjectExtensions.DeepClone<Hybrid.Zero.Authorization.SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>>()
  nameWithType.vb: ObjectExtensions.DeepClone(Of SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey))()
  fullName.vb: Hybrid.Extensions.ObjectExtensions.DeepClone(Of Hybrid.Zero.Authorization.SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey))()
  name.vb: DeepClone(Of SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey))()
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.DeepClone``1
    name: DeepClone<SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>>
    nameWithType: ObjectExtensions.DeepClone<SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>>
    fullName: Hybrid.Extensions.ObjectExtensions.DeepClone<Hybrid.Zero.Authorization.SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.DeepClone``1
    name: DeepClone(Of SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey))
    nameWithType: ObjectExtensions.DeepClone(Of SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey))
    fullName: Hybrid.Extensions.ObjectExtensions.DeepClone(Of Hybrid.Zero.Authorization.SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey))
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Authorization.SecurityManagerBase`18.Hybrid.Extensions.ParameterCheckExtensions.Required``1(System.Func{Hybrid.Zero.Authorization.SecurityManagerBase{{TFunction},{TFunctionInputDto},{TEntityInfo},{TEntityInfoInputDto},{TModule},{TModuleInputDto},{TModuleKey},{TModuleFunction},{TModuleRole},{TModuleUser},{TEntityRole},{TEntityRoleInputDto},{TUserRole},{TUserRoleKey},{TRole},{TRoleKey},{TUser},{TUserKey}},System.Boolean},System.String)
  commentId: M:Hybrid.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
  parent: Hybrid.Extensions.ParameterCheckExtensions
  definition: Hybrid.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
  name: Required<SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>>(Func<SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>, Boolean>, String)
  nameWithType: ParameterCheckExtensions.Required<SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>>(Func<SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>, Boolean>, String)
  fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<Hybrid.Zero.Authorization.SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>>(System.Func<Hybrid.Zero.Authorization.SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>, System.Boolean>, System.String)
  nameWithType.vb: ParameterCheckExtensions.Required(Of SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey))(Func(Of SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey), Boolean), String)
  fullName.vb: Hybrid.Extensions.ParameterCheckExtensions.Required(Of Hybrid.Zero.Authorization.SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey))(System.Func(Of Hybrid.Zero.Authorization.SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey), System.Boolean), System.String)
  name.vb: Required(Of SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey))(Func(Of SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey), Boolean), String)
  spec.csharp:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``1(System.Func{``0,System.Boolean},System.String)
    name: Required<SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>>
    nameWithType: ParameterCheckExtensions.Required<SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>>
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<Hybrid.Zero.Authorization.SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Zero.Authorization.SecurityManagerBase`18
    name: SecurityManagerBase
    nameWithType: SecurityManagerBase
    fullName: Hybrid.Zero.Authorization.SecurityManagerBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TFunctionInputDto
    nameWithType: TFunctionInputDto
    fullName: TFunctionInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityInfo
    nameWithType: TEntityInfo
    fullName: TEntityInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityInfoInputDto
    nameWithType: TEntityInfoInputDto
    fullName: TEntityInfoInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModule
    nameWithType: TModule
    fullName: TModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleInputDto
    nameWithType: TModuleInputDto
    fullName: TModuleInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleKey
    nameWithType: TModuleKey
    fullName: TModuleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleFunction
    nameWithType: TModuleFunction
    fullName: TModuleFunction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleRole
    nameWithType: TModuleRole
    fullName: TModuleRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleUser
    nameWithType: TModuleUser
    fullName: TModuleUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityRole
    nameWithType: TEntityRole
    fullName: TEntityRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityRoleInputDto
    nameWithType: TEntityRoleInputDto
    fullName: TEntityRoleInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserRole
    nameWithType: TUserRole
    fullName: TUserRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserRoleKey
    nameWithType: TUserRoleKey
    fullName: TUserRoleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserKey
    nameWithType: TUserKey
    fullName: TUserKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``1(System.Func{``0,System.Boolean},System.String)
    name: Required(Of SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey))
    nameWithType: ParameterCheckExtensions.Required(Of SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey))
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required(Of Hybrid.Zero.Authorization.SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey))
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Zero.Authorization.SecurityManagerBase`18
    name: SecurityManagerBase
    nameWithType: SecurityManagerBase
    fullName: Hybrid.Zero.Authorization.SecurityManagerBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TFunctionInputDto
    nameWithType: TFunctionInputDto
    fullName: TFunctionInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityInfo
    nameWithType: TEntityInfo
    fullName: TEntityInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityInfoInputDto
    nameWithType: TEntityInfoInputDto
    fullName: TEntityInfoInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModule
    nameWithType: TModule
    fullName: TModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleInputDto
    nameWithType: TModuleInputDto
    fullName: TModuleInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleKey
    nameWithType: TModuleKey
    fullName: TModuleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleFunction
    nameWithType: TModuleFunction
    fullName: TModuleFunction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleRole
    nameWithType: TModuleRole
    fullName: TModuleRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleUser
    nameWithType: TModuleUser
    fullName: TModuleUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityRole
    nameWithType: TEntityRole
    fullName: TEntityRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityRoleInputDto
    nameWithType: TEntityRoleInputDto
    fullName: TEntityRoleInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserRole
    nameWithType: TUserRole
    fullName: TUserRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserRoleKey
    nameWithType: TUserRoleKey
    fullName: TUserRoleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserKey
    nameWithType: TUserKey
    fullName: TUserKey
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Authorization.SecurityManagerBase`18.Hybrid.Extensions.ParameterCheckExtensions.Required``2(System.Func{Hybrid.Zero.Authorization.SecurityManagerBase{{TFunction},{TFunctionInputDto},{TEntityInfo},{TEntityInfoInputDto},{TModule},{TModuleInputDto},{TModuleKey},{TModuleFunction},{TModuleRole},{TModuleUser},{TEntityRole},{TEntityRoleInputDto},{TUserRole},{TUserRoleKey},{TRole},{TRoleKey},{TUser},{TUserKey}},System.Boolean},System.String)
  commentId: M:Hybrid.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
  parent: Hybrid.Extensions.ParameterCheckExtensions
  definition: Hybrid.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
  name: Required<SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>, TException>(Func<SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>, Boolean>, String)
  nameWithType: ParameterCheckExtensions.Required<SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>, TException>(Func<SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>, Boolean>, String)
  fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<Hybrid.Zero.Authorization.SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>, TException>(System.Func<Hybrid.Zero.Authorization.SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>, System.Boolean>, System.String)
  nameWithType.vb: ParameterCheckExtensions.Required(Of SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey), TException)(Func(Of SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey), Boolean), String)
  fullName.vb: Hybrid.Extensions.ParameterCheckExtensions.Required(Of Hybrid.Zero.Authorization.SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey), TException)(System.Func(Of Hybrid.Zero.Authorization.SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey), System.Boolean), System.String)
  name.vb: Required(Of SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey), TException)(Func(Of SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey), Boolean), String)
  spec.csharp:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``2(System.Func{``0,System.Boolean},System.String)
    name: Required<SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>, TException>
    nameWithType: ParameterCheckExtensions.Required<SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>, TException>
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<Hybrid.Zero.Authorization.SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>, TException>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Zero.Authorization.SecurityManagerBase`18
    name: SecurityManagerBase
    nameWithType: SecurityManagerBase
    fullName: Hybrid.Zero.Authorization.SecurityManagerBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TFunctionInputDto
    nameWithType: TFunctionInputDto
    fullName: TFunctionInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityInfo
    nameWithType: TEntityInfo
    fullName: TEntityInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityInfoInputDto
    nameWithType: TEntityInfoInputDto
    fullName: TEntityInfoInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModule
    nameWithType: TModule
    fullName: TModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleInputDto
    nameWithType: TModuleInputDto
    fullName: TModuleInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleKey
    nameWithType: TModuleKey
    fullName: TModuleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleFunction
    nameWithType: TModuleFunction
    fullName: TModuleFunction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleRole
    nameWithType: TModuleRole
    fullName: TModuleRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleUser
    nameWithType: TModuleUser
    fullName: TModuleUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityRole
    nameWithType: TEntityRole
    fullName: TEntityRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityRoleInputDto
    nameWithType: TEntityRoleInputDto
    fullName: TEntityRoleInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserRole
    nameWithType: TUserRole
    fullName: TUserRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserRoleKey
    nameWithType: TUserRoleKey
    fullName: TUserRoleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserKey
    nameWithType: TUserKey
    fullName: TUserKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``2(System.Func{``0,System.Boolean},System.String)
    name: Required(Of SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey), TException)
    nameWithType: ParameterCheckExtensions.Required(Of SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey), TException)
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required(Of Hybrid.Zero.Authorization.SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey), TException)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Zero.Authorization.SecurityManagerBase`18
    name: SecurityManagerBase
    nameWithType: SecurityManagerBase
    fullName: Hybrid.Zero.Authorization.SecurityManagerBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TFunctionInputDto
    nameWithType: TFunctionInputDto
    fullName: TFunctionInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityInfo
    nameWithType: TEntityInfo
    fullName: TEntityInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityInfoInputDto
    nameWithType: TEntityInfoInputDto
    fullName: TEntityInfoInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModule
    nameWithType: TModule
    fullName: TModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleInputDto
    nameWithType: TModuleInputDto
    fullName: TModuleInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleKey
    nameWithType: TModuleKey
    fullName: TModuleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleFunction
    nameWithType: TModuleFunction
    fullName: TModuleFunction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleRole
    nameWithType: TModuleRole
    fullName: TModuleRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleUser
    nameWithType: TModuleUser
    fullName: TModuleUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityRole
    nameWithType: TEntityRole
    fullName: TEntityRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityRoleInputDto
    nameWithType: TEntityRoleInputDto
    fullName: TEntityRoleInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserRole
    nameWithType: TUserRole
    fullName: TUserRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserRoleKey
    nameWithType: TUserRoleKey
    fullName: TUserRoleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserKey
    nameWithType: TUserKey
    fullName: TUserKey
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Authorization.SecurityManagerBase`18.Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(System.String)
  commentId: M:Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
  parent: Hybrid.Extensions.ParameterCheckExtensions
  definition: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
  name: CheckNotNull<SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>>(String)
  nameWithType: ParameterCheckExtensions.CheckNotNull<SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>>(String)
  fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull<Hybrid.Zero.Authorization.SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>>(System.String)
  nameWithType.vb: ParameterCheckExtensions.CheckNotNull(Of SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey))(String)
  fullName.vb: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull(Of Hybrid.Zero.Authorization.SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey))(System.String)
  name.vb: CheckNotNull(Of SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey))(String)
  spec.csharp:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(System.String)
    name: CheckNotNull<SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>>
    nameWithType: ParameterCheckExtensions.CheckNotNull<SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>>
    fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull<Hybrid.Zero.Authorization.SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(System.String)
    name: CheckNotNull(Of SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey))
    nameWithType: ParameterCheckExtensions.CheckNotNull(Of SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey))
    fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull(Of Hybrid.Zero.Authorization.SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey))
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Authorization.SecurityManagerBase`18.Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{Hybrid.Zero.Authorization.SecurityManagerBase{{TFunction},{TFunctionInputDto},{TEntityInfo},{TEntityInfoInputDto},{TModule},{TModuleInputDto},{TModuleKey},{TModuleFunction},{TModuleRole},{TModuleUser},{TEntityRole},{TEntityRoleInputDto},{TUserRole},{TUserRoleKey},{TRole},{TRoleKey},{TUser},{TUserKey}}},System.Action{System.Exception},System.Action{Hybrid.Zero.Authorization.SecurityManagerBase{{TFunction},{TFunctionInputDto},{TEntityInfo},{TEntityInfoInputDto},{TModule},{TModuleInputDto},{TModuleKey},{TModuleFunction},{TModuleRole},{TModuleUser},{TEntityRole},{TEntityRoleInputDto},{TUserRole},{TUserRoleKey},{TRole},{TRoleKey},{TUser},{TUserKey}}})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
  parent: Hybrid.Extensions.TryCatchExtensions
  definition: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
  name: TryCatch<SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>>(Action<SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>>, Action<Exception>, Action<SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>>)
  nameWithType: TryCatchExtensions.TryCatch<SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>>(Action<SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>>, Action<Exception>, Action<SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.Zero.Authorization.SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>>(System.Action<Hybrid.Zero.Authorization.SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>>, System.Action<System.Exception>, System.Action<Hybrid.Zero.Authorization.SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey))(Action(Of SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey)), Action(Of Exception), Action(Of SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey)))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.Zero.Authorization.SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey))(System.Action(Of Hybrid.Zero.Authorization.SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey)), System.Action(Of System.Exception), System.Action(Of Hybrid.Zero.Authorization.SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey)))
  name.vb: TryCatch(Of SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey))(Action(Of SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey)), Action(Of Exception), Action(Of SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey)))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{``0},System.Action{System.Exception},System.Action{``0})
    name: TryCatch<SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>>
    nameWithType: TryCatchExtensions.TryCatch<SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.Zero.Authorization.SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Zero.Authorization.SecurityManagerBase`18
    name: SecurityManagerBase
    nameWithType: SecurityManagerBase
    fullName: Hybrid.Zero.Authorization.SecurityManagerBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TFunctionInputDto
    nameWithType: TFunctionInputDto
    fullName: TFunctionInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityInfo
    nameWithType: TEntityInfo
    fullName: TEntityInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityInfoInputDto
    nameWithType: TEntityInfoInputDto
    fullName: TEntityInfoInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModule
    nameWithType: TModule
    fullName: TModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleInputDto
    nameWithType: TModuleInputDto
    fullName: TModuleInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleKey
    nameWithType: TModuleKey
    fullName: TModuleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleFunction
    nameWithType: TModuleFunction
    fullName: TModuleFunction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleRole
    nameWithType: TModuleRole
    fullName: TModuleRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleUser
    nameWithType: TModuleUser
    fullName: TModuleUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityRole
    nameWithType: TEntityRole
    fullName: TEntityRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityRoleInputDto
    nameWithType: TEntityRoleInputDto
    fullName: TEntityRoleInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserRole
    nameWithType: TUserRole
    fullName: TUserRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserRoleKey
    nameWithType: TUserRoleKey
    fullName: TUserRoleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserKey
    nameWithType: TUserKey
    fullName: TUserKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Zero.Authorization.SecurityManagerBase`18
    name: SecurityManagerBase
    nameWithType: SecurityManagerBase
    fullName: Hybrid.Zero.Authorization.SecurityManagerBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TFunctionInputDto
    nameWithType: TFunctionInputDto
    fullName: TFunctionInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityInfo
    nameWithType: TEntityInfo
    fullName: TEntityInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityInfoInputDto
    nameWithType: TEntityInfoInputDto
    fullName: TEntityInfoInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModule
    nameWithType: TModule
    fullName: TModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleInputDto
    nameWithType: TModuleInputDto
    fullName: TModuleInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleKey
    nameWithType: TModuleKey
    fullName: TModuleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleFunction
    nameWithType: TModuleFunction
    fullName: TModuleFunction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleRole
    nameWithType: TModuleRole
    fullName: TModuleRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleUser
    nameWithType: TModuleUser
    fullName: TModuleUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityRole
    nameWithType: TEntityRole
    fullName: TEntityRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityRoleInputDto
    nameWithType: TEntityRoleInputDto
    fullName: TEntityRoleInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserRole
    nameWithType: TUserRole
    fullName: TUserRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserRoleKey
    nameWithType: TUserRoleKey
    fullName: TUserRoleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserKey
    nameWithType: TUserKey
    fullName: TUserKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{``0},System.Action{System.Exception},System.Action{``0})
    name: TryCatch(Of SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey))
    nameWithType: TryCatchExtensions.TryCatch(Of SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey))
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.Zero.Authorization.SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey))
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Zero.Authorization.SecurityManagerBase`18
    name: SecurityManagerBase
    nameWithType: SecurityManagerBase
    fullName: Hybrid.Zero.Authorization.SecurityManagerBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TFunctionInputDto
    nameWithType: TFunctionInputDto
    fullName: TFunctionInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityInfo
    nameWithType: TEntityInfo
    fullName: TEntityInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityInfoInputDto
    nameWithType: TEntityInfoInputDto
    fullName: TEntityInfoInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModule
    nameWithType: TModule
    fullName: TModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleInputDto
    nameWithType: TModuleInputDto
    fullName: TModuleInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleKey
    nameWithType: TModuleKey
    fullName: TModuleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleFunction
    nameWithType: TModuleFunction
    fullName: TModuleFunction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleRole
    nameWithType: TModuleRole
    fullName: TModuleRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleUser
    nameWithType: TModuleUser
    fullName: TModuleUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityRole
    nameWithType: TEntityRole
    fullName: TEntityRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityRoleInputDto
    nameWithType: TEntityRoleInputDto
    fullName: TEntityRoleInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserRole
    nameWithType: TUserRole
    fullName: TUserRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserRoleKey
    nameWithType: TUserRoleKey
    fullName: TUserRoleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserKey
    nameWithType: TUserKey
    fullName: TUserKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Zero.Authorization.SecurityManagerBase`18
    name: SecurityManagerBase
    nameWithType: SecurityManagerBase
    fullName: Hybrid.Zero.Authorization.SecurityManagerBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TFunctionInputDto
    nameWithType: TFunctionInputDto
    fullName: TFunctionInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityInfo
    nameWithType: TEntityInfo
    fullName: TEntityInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityInfoInputDto
    nameWithType: TEntityInfoInputDto
    fullName: TEntityInfoInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModule
    nameWithType: TModule
    fullName: TModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleInputDto
    nameWithType: TModuleInputDto
    fullName: TModuleInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleKey
    nameWithType: TModuleKey
    fullName: TModuleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleFunction
    nameWithType: TModuleFunction
    fullName: TModuleFunction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleRole
    nameWithType: TModuleRole
    fullName: TModuleRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleUser
    nameWithType: TModuleUser
    fullName: TModuleUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityRole
    nameWithType: TEntityRole
    fullName: TEntityRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityRoleInputDto
    nameWithType: TEntityRoleInputDto
    fullName: TEntityRoleInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserRole
    nameWithType: TUserRole
    fullName: TUserRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserRoleKey
    nameWithType: TUserRoleKey
    fullName: TUserRoleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserKey
    nameWithType: TUserKey
    fullName: TUserKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Authorization.SecurityManagerBase`18.Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{Hybrid.Zero.Authorization.SecurityManagerBase{{TFunction},{TFunctionInputDto},{TEntityInfo},{TEntityInfoInputDto},{TModule},{TModuleInputDto},{TModuleKey},{TModuleFunction},{TModuleRole},{TModuleUser},{TEntityRole},{TEntityRoleInputDto},{TUserRole},{TUserRoleKey},{TRole},{TRoleKey},{TUser},{TUserKey}}},System.Action{System.Exception})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
  parent: Hybrid.Extensions.TryCatchExtensions
  definition: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
  name: TryCatch<SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>>(Action<SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>>, Action<Exception>)
  nameWithType: TryCatchExtensions.TryCatch<SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>>(Action<SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>>, Action<Exception>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.Zero.Authorization.SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>>(System.Action<Hybrid.Zero.Authorization.SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>>, System.Action<System.Exception>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey))(Action(Of SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey)), Action(Of Exception))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.Zero.Authorization.SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey))(System.Action(Of Hybrid.Zero.Authorization.SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey)), System.Action(Of System.Exception))
  name.vb: TryCatch(Of SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey))(Action(Of SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey)), Action(Of Exception))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{``0},System.Action{System.Exception})
    name: TryCatch<SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>>
    nameWithType: TryCatchExtensions.TryCatch<SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.Zero.Authorization.SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Zero.Authorization.SecurityManagerBase`18
    name: SecurityManagerBase
    nameWithType: SecurityManagerBase
    fullName: Hybrid.Zero.Authorization.SecurityManagerBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TFunctionInputDto
    nameWithType: TFunctionInputDto
    fullName: TFunctionInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityInfo
    nameWithType: TEntityInfo
    fullName: TEntityInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityInfoInputDto
    nameWithType: TEntityInfoInputDto
    fullName: TEntityInfoInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModule
    nameWithType: TModule
    fullName: TModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleInputDto
    nameWithType: TModuleInputDto
    fullName: TModuleInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleKey
    nameWithType: TModuleKey
    fullName: TModuleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleFunction
    nameWithType: TModuleFunction
    fullName: TModuleFunction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleRole
    nameWithType: TModuleRole
    fullName: TModuleRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleUser
    nameWithType: TModuleUser
    fullName: TModuleUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityRole
    nameWithType: TEntityRole
    fullName: TEntityRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityRoleInputDto
    nameWithType: TEntityRoleInputDto
    fullName: TEntityRoleInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserRole
    nameWithType: TUserRole
    fullName: TUserRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserRoleKey
    nameWithType: TUserRoleKey
    fullName: TUserRoleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserKey
    nameWithType: TUserKey
    fullName: TUserKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{``0},System.Action{System.Exception})
    name: TryCatch(Of SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey))
    nameWithType: TryCatchExtensions.TryCatch(Of SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey))
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.Zero.Authorization.SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey))
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Zero.Authorization.SecurityManagerBase`18
    name: SecurityManagerBase
    nameWithType: SecurityManagerBase
    fullName: Hybrid.Zero.Authorization.SecurityManagerBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TFunctionInputDto
    nameWithType: TFunctionInputDto
    fullName: TFunctionInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityInfo
    nameWithType: TEntityInfo
    fullName: TEntityInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityInfoInputDto
    nameWithType: TEntityInfoInputDto
    fullName: TEntityInfoInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModule
    nameWithType: TModule
    fullName: TModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleInputDto
    nameWithType: TModuleInputDto
    fullName: TModuleInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleKey
    nameWithType: TModuleKey
    fullName: TModuleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleFunction
    nameWithType: TModuleFunction
    fullName: TModuleFunction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleRole
    nameWithType: TModuleRole
    fullName: TModuleRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleUser
    nameWithType: TModuleUser
    fullName: TModuleUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityRole
    nameWithType: TEntityRole
    fullName: TEntityRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityRoleInputDto
    nameWithType: TEntityRoleInputDto
    fullName: TEntityRoleInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserRole
    nameWithType: TUserRole
    fullName: TUserRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserRoleKey
    nameWithType: TUserRoleKey
    fullName: TUserRoleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserKey
    nameWithType: TUserKey
    fullName: TUserKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Authorization.SecurityManagerBase`18.Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{Hybrid.Zero.Authorization.SecurityManagerBase{{TFunction},{TFunctionInputDto},{TEntityInfo},{TEntityInfoInputDto},{TModule},{TModuleInputDto},{TModuleKey},{TModuleFunction},{TModuleRole},{TModuleUser},{TEntityRole},{TEntityRoleInputDto},{TUserRole},{TUserRoleKey},{TRole},{TRoleKey},{TUser},{TUserKey}},{TResult}},System.Action{System.Exception},System.Action{Hybrid.Zero.Authorization.SecurityManagerBase{{TFunction},{TFunctionInputDto},{TEntityInfo},{TEntityInfoInputDto},{TModule},{TModuleInputDto},{TModuleKey},{TModuleFunction},{TModuleRole},{TModuleUser},{TEntityRole},{TEntityRoleInputDto},{TUserRole},{TUserRoleKey},{TRole},{TRoleKey},{TUser},{TUserKey}}})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
  parent: Hybrid.Extensions.TryCatchExtensions
  definition: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
  name: TryCatch<SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>, TResult>(Func<SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>, TResult>, Action<Exception>, Action<SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>>)
  nameWithType: TryCatchExtensions.TryCatch<SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>, TResult>(Func<SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>, TResult>, Action<Exception>, Action<SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.Zero.Authorization.SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>, TResult>(System.Func<Hybrid.Zero.Authorization.SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>, TResult>, System.Action<System.Exception>, System.Action<Hybrid.Zero.Authorization.SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey), TResult)(Func(Of SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey), TResult), Action(Of Exception), Action(Of SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey)))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.Zero.Authorization.SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey), TResult)(System.Func(Of Hybrid.Zero.Authorization.SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey), TResult), System.Action(Of System.Exception), System.Action(Of Hybrid.Zero.Authorization.SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey)))
  name.vb: TryCatch(Of SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey), TResult)(Func(Of SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey), TResult), Action(Of Exception), Action(Of SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey)))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
    name: TryCatch<SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>, TResult>
    nameWithType: TryCatchExtensions.TryCatch<SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>, TResult>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.Zero.Authorization.SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Zero.Authorization.SecurityManagerBase`18
    name: SecurityManagerBase
    nameWithType: SecurityManagerBase
    fullName: Hybrid.Zero.Authorization.SecurityManagerBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TFunctionInputDto
    nameWithType: TFunctionInputDto
    fullName: TFunctionInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityInfo
    nameWithType: TEntityInfo
    fullName: TEntityInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityInfoInputDto
    nameWithType: TEntityInfoInputDto
    fullName: TEntityInfoInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModule
    nameWithType: TModule
    fullName: TModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleInputDto
    nameWithType: TModuleInputDto
    fullName: TModuleInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleKey
    nameWithType: TModuleKey
    fullName: TModuleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleFunction
    nameWithType: TModuleFunction
    fullName: TModuleFunction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleRole
    nameWithType: TModuleRole
    fullName: TModuleRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleUser
    nameWithType: TModuleUser
    fullName: TModuleUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityRole
    nameWithType: TEntityRole
    fullName: TEntityRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityRoleInputDto
    nameWithType: TEntityRoleInputDto
    fullName: TEntityRoleInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserRole
    nameWithType: TUserRole
    fullName: TUserRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserRoleKey
    nameWithType: TUserRoleKey
    fullName: TUserRoleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserKey
    nameWithType: TUserKey
    fullName: TUserKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Zero.Authorization.SecurityManagerBase`18
    name: SecurityManagerBase
    nameWithType: SecurityManagerBase
    fullName: Hybrid.Zero.Authorization.SecurityManagerBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TFunctionInputDto
    nameWithType: TFunctionInputDto
    fullName: TFunctionInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityInfo
    nameWithType: TEntityInfo
    fullName: TEntityInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityInfoInputDto
    nameWithType: TEntityInfoInputDto
    fullName: TEntityInfoInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModule
    nameWithType: TModule
    fullName: TModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleInputDto
    nameWithType: TModuleInputDto
    fullName: TModuleInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleKey
    nameWithType: TModuleKey
    fullName: TModuleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleFunction
    nameWithType: TModuleFunction
    fullName: TModuleFunction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleRole
    nameWithType: TModuleRole
    fullName: TModuleRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleUser
    nameWithType: TModuleUser
    fullName: TModuleUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityRole
    nameWithType: TEntityRole
    fullName: TEntityRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityRoleInputDto
    nameWithType: TEntityRoleInputDto
    fullName: TEntityRoleInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserRole
    nameWithType: TUserRole
    fullName: TUserRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserRoleKey
    nameWithType: TUserRoleKey
    fullName: TUserRoleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserKey
    nameWithType: TUserKey
    fullName: TUserKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
    name: TryCatch(Of SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey), TResult)
    nameWithType: TryCatchExtensions.TryCatch(Of SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey), TResult)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.Zero.Authorization.SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey), TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Zero.Authorization.SecurityManagerBase`18
    name: SecurityManagerBase
    nameWithType: SecurityManagerBase
    fullName: Hybrid.Zero.Authorization.SecurityManagerBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TFunctionInputDto
    nameWithType: TFunctionInputDto
    fullName: TFunctionInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityInfo
    nameWithType: TEntityInfo
    fullName: TEntityInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityInfoInputDto
    nameWithType: TEntityInfoInputDto
    fullName: TEntityInfoInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModule
    nameWithType: TModule
    fullName: TModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleInputDto
    nameWithType: TModuleInputDto
    fullName: TModuleInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleKey
    nameWithType: TModuleKey
    fullName: TModuleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleFunction
    nameWithType: TModuleFunction
    fullName: TModuleFunction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleRole
    nameWithType: TModuleRole
    fullName: TModuleRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleUser
    nameWithType: TModuleUser
    fullName: TModuleUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityRole
    nameWithType: TEntityRole
    fullName: TEntityRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityRoleInputDto
    nameWithType: TEntityRoleInputDto
    fullName: TEntityRoleInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserRole
    nameWithType: TUserRole
    fullName: TUserRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserRoleKey
    nameWithType: TUserRoleKey
    fullName: TUserRoleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserKey
    nameWithType: TUserKey
    fullName: TUserKey
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Zero.Authorization.SecurityManagerBase`18
    name: SecurityManagerBase
    nameWithType: SecurityManagerBase
    fullName: Hybrid.Zero.Authorization.SecurityManagerBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TFunctionInputDto
    nameWithType: TFunctionInputDto
    fullName: TFunctionInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityInfo
    nameWithType: TEntityInfo
    fullName: TEntityInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityInfoInputDto
    nameWithType: TEntityInfoInputDto
    fullName: TEntityInfoInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModule
    nameWithType: TModule
    fullName: TModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleInputDto
    nameWithType: TModuleInputDto
    fullName: TModuleInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleKey
    nameWithType: TModuleKey
    fullName: TModuleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleFunction
    nameWithType: TModuleFunction
    fullName: TModuleFunction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleRole
    nameWithType: TModuleRole
    fullName: TModuleRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleUser
    nameWithType: TModuleUser
    fullName: TModuleUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityRole
    nameWithType: TEntityRole
    fullName: TEntityRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityRoleInputDto
    nameWithType: TEntityRoleInputDto
    fullName: TEntityRoleInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserRole
    nameWithType: TUserRole
    fullName: TUserRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserRoleKey
    nameWithType: TUserRoleKey
    fullName: TUserRoleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserKey
    nameWithType: TUserKey
    fullName: TUserKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Authorization.SecurityManagerBase`18.Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{Hybrid.Zero.Authorization.SecurityManagerBase{{TFunction},{TFunctionInputDto},{TEntityInfo},{TEntityInfoInputDto},{TModule},{TModuleInputDto},{TModuleKey},{TModuleFunction},{TModuleRole},{TModuleUser},{TEntityRole},{TEntityRoleInputDto},{TUserRole},{TUserRoleKey},{TRole},{TRoleKey},{TUser},{TUserKey}},{TResult}},System.Action{System.Exception})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
  parent: Hybrid.Extensions.TryCatchExtensions
  definition: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
  name: TryCatch<SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>, TResult>(Func<SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>, TResult>, Action<Exception>)
  nameWithType: TryCatchExtensions.TryCatch<SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>, TResult>(Func<SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>, TResult>, Action<Exception>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.Zero.Authorization.SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>, TResult>(System.Func<Hybrid.Zero.Authorization.SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>, TResult>, System.Action<System.Exception>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey), TResult)(Func(Of SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey), TResult), Action(Of Exception))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.Zero.Authorization.SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey), TResult)(System.Func(Of Hybrid.Zero.Authorization.SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey), TResult), System.Action(Of System.Exception))
  name.vb: TryCatch(Of SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey), TResult)(Func(Of SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey), TResult), Action(Of Exception))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{``0,``1},System.Action{System.Exception})
    name: TryCatch<SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>, TResult>
    nameWithType: TryCatchExtensions.TryCatch<SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>, TResult>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.Zero.Authorization.SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Zero.Authorization.SecurityManagerBase`18
    name: SecurityManagerBase
    nameWithType: SecurityManagerBase
    fullName: Hybrid.Zero.Authorization.SecurityManagerBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TFunctionInputDto
    nameWithType: TFunctionInputDto
    fullName: TFunctionInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityInfo
    nameWithType: TEntityInfo
    fullName: TEntityInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityInfoInputDto
    nameWithType: TEntityInfoInputDto
    fullName: TEntityInfoInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModule
    nameWithType: TModule
    fullName: TModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleInputDto
    nameWithType: TModuleInputDto
    fullName: TModuleInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleKey
    nameWithType: TModuleKey
    fullName: TModuleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleFunction
    nameWithType: TModuleFunction
    fullName: TModuleFunction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleRole
    nameWithType: TModuleRole
    fullName: TModuleRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleUser
    nameWithType: TModuleUser
    fullName: TModuleUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityRole
    nameWithType: TEntityRole
    fullName: TEntityRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityRoleInputDto
    nameWithType: TEntityRoleInputDto
    fullName: TEntityRoleInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserRole
    nameWithType: TUserRole
    fullName: TUserRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserRoleKey
    nameWithType: TUserRoleKey
    fullName: TUserRoleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserKey
    nameWithType: TUserKey
    fullName: TUserKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{``0,``1},System.Action{System.Exception})
    name: TryCatch(Of SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey), TResult)
    nameWithType: TryCatchExtensions.TryCatch(Of SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey), TResult)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.Zero.Authorization.SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey), TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Zero.Authorization.SecurityManagerBase`18
    name: SecurityManagerBase
    nameWithType: SecurityManagerBase
    fullName: Hybrid.Zero.Authorization.SecurityManagerBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TFunctionInputDto
    nameWithType: TFunctionInputDto
    fullName: TFunctionInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityInfo
    nameWithType: TEntityInfo
    fullName: TEntityInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityInfoInputDto
    nameWithType: TEntityInfoInputDto
    fullName: TEntityInfoInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModule
    nameWithType: TModule
    fullName: TModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleInputDto
    nameWithType: TModuleInputDto
    fullName: TModuleInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleKey
    nameWithType: TModuleKey
    fullName: TModuleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleFunction
    nameWithType: TModuleFunction
    fullName: TModuleFunction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleRole
    nameWithType: TModuleRole
    fullName: TModuleRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleUser
    nameWithType: TModuleUser
    fullName: TModuleUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityRole
    nameWithType: TEntityRole
    fullName: TEntityRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityRoleInputDto
    nameWithType: TEntityRoleInputDto
    fullName: TEntityRoleInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserRole
    nameWithType: TUserRole
    fullName: TUserRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserRoleKey
    nameWithType: TUserRoleKey
    fullName: TUserRoleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserKey
    nameWithType: TUserKey
    fullName: TUserKey
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Authorization.SecurityManagerBase`18.Hybrid.Extensions.TryCatchExtensions.TryFinally``1(System.Action{Hybrid.Zero.Authorization.SecurityManagerBase{{TFunction},{TFunctionInputDto},{TEntityInfo},{TEntityInfoInputDto},{TModule},{TModuleInputDto},{TModuleKey},{TModuleFunction},{TModuleRole},{TModuleUser},{TEntityRole},{TEntityRoleInputDto},{TUserRole},{TUserRoleKey},{TRole},{TRoleKey},{TUser},{TUserKey}}},System.Action{Hybrid.Zero.Authorization.SecurityManagerBase{{TFunction},{TFunctionInputDto},{TEntityInfo},{TEntityInfoInputDto},{TModule},{TModuleInputDto},{TModuleKey},{TModuleFunction},{TModuleRole},{TModuleUser},{TEntityRole},{TEntityRoleInputDto},{TUserRole},{TUserRoleKey},{TRole},{TRoleKey},{TUser},{TUserKey}}})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
  parent: Hybrid.Extensions.TryCatchExtensions
  definition: Hybrid.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
  name: TryFinally<SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>>(Action<SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>>, Action<SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>>)
  nameWithType: TryCatchExtensions.TryFinally<SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>>(Action<SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>>, Action<SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryFinally<Hybrid.Zero.Authorization.SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>>(System.Action<Hybrid.Zero.Authorization.SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>>, System.Action<Hybrid.Zero.Authorization.SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>>)
  nameWithType.vb: TryCatchExtensions.TryFinally(Of SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey))(Action(Of SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey)), Action(Of SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey)))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryFinally(Of Hybrid.Zero.Authorization.SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey))(System.Action(Of Hybrid.Zero.Authorization.SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey)), System.Action(Of Hybrid.Zero.Authorization.SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey)))
  name.vb: TryFinally(Of SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey))(Action(Of SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey)), Action(Of SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey)))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryFinally``1(System.Action{``0},System.Action{``0})
    name: TryFinally<SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>>
    nameWithType: TryCatchExtensions.TryFinally<SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryFinally<Hybrid.Zero.Authorization.SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Zero.Authorization.SecurityManagerBase`18
    name: SecurityManagerBase
    nameWithType: SecurityManagerBase
    fullName: Hybrid.Zero.Authorization.SecurityManagerBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TFunctionInputDto
    nameWithType: TFunctionInputDto
    fullName: TFunctionInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityInfo
    nameWithType: TEntityInfo
    fullName: TEntityInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityInfoInputDto
    nameWithType: TEntityInfoInputDto
    fullName: TEntityInfoInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModule
    nameWithType: TModule
    fullName: TModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleInputDto
    nameWithType: TModuleInputDto
    fullName: TModuleInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleKey
    nameWithType: TModuleKey
    fullName: TModuleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleFunction
    nameWithType: TModuleFunction
    fullName: TModuleFunction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleRole
    nameWithType: TModuleRole
    fullName: TModuleRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleUser
    nameWithType: TModuleUser
    fullName: TModuleUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityRole
    nameWithType: TEntityRole
    fullName: TEntityRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityRoleInputDto
    nameWithType: TEntityRoleInputDto
    fullName: TEntityRoleInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserRole
    nameWithType: TUserRole
    fullName: TUserRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserRoleKey
    nameWithType: TUserRoleKey
    fullName: TUserRoleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserKey
    nameWithType: TUserKey
    fullName: TUserKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Zero.Authorization.SecurityManagerBase`18
    name: SecurityManagerBase
    nameWithType: SecurityManagerBase
    fullName: Hybrid.Zero.Authorization.SecurityManagerBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TFunctionInputDto
    nameWithType: TFunctionInputDto
    fullName: TFunctionInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityInfo
    nameWithType: TEntityInfo
    fullName: TEntityInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityInfoInputDto
    nameWithType: TEntityInfoInputDto
    fullName: TEntityInfoInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModule
    nameWithType: TModule
    fullName: TModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleInputDto
    nameWithType: TModuleInputDto
    fullName: TModuleInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleKey
    nameWithType: TModuleKey
    fullName: TModuleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleFunction
    nameWithType: TModuleFunction
    fullName: TModuleFunction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleRole
    nameWithType: TModuleRole
    fullName: TModuleRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleUser
    nameWithType: TModuleUser
    fullName: TModuleUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityRole
    nameWithType: TEntityRole
    fullName: TEntityRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityRoleInputDto
    nameWithType: TEntityRoleInputDto
    fullName: TEntityRoleInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserRole
    nameWithType: TUserRole
    fullName: TUserRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserRoleKey
    nameWithType: TUserRoleKey
    fullName: TUserRoleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserKey
    nameWithType: TUserKey
    fullName: TUserKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryFinally``1(System.Action{``0},System.Action{``0})
    name: TryFinally(Of SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey))
    nameWithType: TryCatchExtensions.TryFinally(Of SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey))
    fullName: Hybrid.Extensions.TryCatchExtensions.TryFinally(Of Hybrid.Zero.Authorization.SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey))
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Zero.Authorization.SecurityManagerBase`18
    name: SecurityManagerBase
    nameWithType: SecurityManagerBase
    fullName: Hybrid.Zero.Authorization.SecurityManagerBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TFunctionInputDto
    nameWithType: TFunctionInputDto
    fullName: TFunctionInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityInfo
    nameWithType: TEntityInfo
    fullName: TEntityInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityInfoInputDto
    nameWithType: TEntityInfoInputDto
    fullName: TEntityInfoInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModule
    nameWithType: TModule
    fullName: TModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleInputDto
    nameWithType: TModuleInputDto
    fullName: TModuleInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleKey
    nameWithType: TModuleKey
    fullName: TModuleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleFunction
    nameWithType: TModuleFunction
    fullName: TModuleFunction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleRole
    nameWithType: TModuleRole
    fullName: TModuleRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleUser
    nameWithType: TModuleUser
    fullName: TModuleUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityRole
    nameWithType: TEntityRole
    fullName: TEntityRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityRoleInputDto
    nameWithType: TEntityRoleInputDto
    fullName: TEntityRoleInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserRole
    nameWithType: TUserRole
    fullName: TUserRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserRoleKey
    nameWithType: TUserRoleKey
    fullName: TUserRoleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserKey
    nameWithType: TUserKey
    fullName: TUserKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Zero.Authorization.SecurityManagerBase`18
    name: SecurityManagerBase
    nameWithType: SecurityManagerBase
    fullName: Hybrid.Zero.Authorization.SecurityManagerBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TFunctionInputDto
    nameWithType: TFunctionInputDto
    fullName: TFunctionInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityInfo
    nameWithType: TEntityInfo
    fullName: TEntityInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityInfoInputDto
    nameWithType: TEntityInfoInputDto
    fullName: TEntityInfoInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModule
    nameWithType: TModule
    fullName: TModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleInputDto
    nameWithType: TModuleInputDto
    fullName: TModuleInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleKey
    nameWithType: TModuleKey
    fullName: TModuleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleFunction
    nameWithType: TModuleFunction
    fullName: TModuleFunction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleRole
    nameWithType: TModuleRole
    fullName: TModuleRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleUser
    nameWithType: TModuleUser
    fullName: TModuleUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityRole
    nameWithType: TEntityRole
    fullName: TEntityRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityRoleInputDto
    nameWithType: TEntityRoleInputDto
    fullName: TEntityRoleInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserRole
    nameWithType: TUserRole
    fullName: TUserRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserRoleKey
    nameWithType: TUserRoleKey
    fullName: TUserRoleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserKey
    nameWithType: TUserKey
    fullName: TUserKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Json.JsonExtensions.ToJsonString(System.Boolean,System.Boolean)
  commentId: M:Hybrid.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
  parent: Hybrid.Json.JsonExtensions
  definition: Hybrid.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
  name: ToJsonString(Boolean, Boolean)
  nameWithType: JsonExtensions.ToJsonString(Boolean, Boolean)
  fullName: Hybrid.Json.JsonExtensions.ToJsonString(System.Boolean, System.Boolean)
  spec.csharp:
  - uid: Hybrid.Json.JsonExtensions.ToJsonString(System.Boolean,System.Boolean)
    name: ToJsonString
    nameWithType: JsonExtensions.ToJsonString
    fullName: Hybrid.Json.JsonExtensions.ToJsonString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Json.JsonExtensions.ToJsonString(System.Boolean,System.Boolean)
    name: ToJsonString
    nameWithType: JsonExtensions.ToJsonString
    fullName: Hybrid.Json.JsonExtensions.ToJsonString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Mapping.MapperExtensions.MapTo``1
  commentId: M:Hybrid.Mapping.MapperExtensions.MapTo``1(System.Object)
  parent: Hybrid.Mapping.MapperExtensions
  definition: Hybrid.Mapping.MapperExtensions.MapTo``1(System.Object)
  name: MapTo<TTarget>()
  nameWithType: MapperExtensions.MapTo<TTarget>()
  fullName: Hybrid.Mapping.MapperExtensions.MapTo<TTarget>()
  nameWithType.vb: MapperExtensions.MapTo(Of TTarget)()
  fullName.vb: Hybrid.Mapping.MapperExtensions.MapTo(Of TTarget)()
  name.vb: MapTo(Of TTarget)()
  spec.csharp:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``1
    name: MapTo<TTarget>
    nameWithType: MapperExtensions.MapTo<TTarget>
    fullName: Hybrid.Mapping.MapperExtensions.MapTo<TTarget>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``1
    name: MapTo(Of TTarget)
    nameWithType: MapperExtensions.MapTo(Of TTarget)
    fullName: Hybrid.Mapping.MapperExtensions.MapTo(Of TTarget)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Authorization.SecurityManagerBase`18.Hybrid.Mapping.MapperExtensions.MapTo``2({TTarget})
  commentId: M:Hybrid.Mapping.MapperExtensions.MapTo``2(``0,``1)
  parent: Hybrid.Mapping.MapperExtensions
  definition: Hybrid.Mapping.MapperExtensions.MapTo``2(``0,``1)
  name: MapTo<SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>, TTarget>(TTarget)
  nameWithType: MapperExtensions.MapTo<SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>, TTarget>(TTarget)
  fullName: Hybrid.Mapping.MapperExtensions.MapTo<Hybrid.Zero.Authorization.SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>, TTarget>(TTarget)
  nameWithType.vb: MapperExtensions.MapTo(Of SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey), TTarget)(TTarget)
  fullName.vb: Hybrid.Mapping.MapperExtensions.MapTo(Of Hybrid.Zero.Authorization.SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey), TTarget)(TTarget)
  name.vb: MapTo(Of SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey), TTarget)(TTarget)
  spec.csharp:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``2(``1)
    name: MapTo<SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>, TTarget>
    nameWithType: MapperExtensions.MapTo<SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>, TTarget>
    fullName: Hybrid.Mapping.MapperExtensions.MapTo<Hybrid.Zero.Authorization.SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>, TTarget>
  - name: (
    nameWithType: (
    fullName: (
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``2(``1)
    name: MapTo(Of SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey), TTarget)
    nameWithType: MapperExtensions.MapTo(Of SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey), TTarget)
    fullName: Hybrid.Mapping.MapperExtensions.MapTo(Of Hybrid.Zero.Authorization.SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey), TTarget)
  - name: (
    nameWithType: (
    fullName: (
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Reflection.LockExtensions.Locking(System.Action)
  commentId: M:Hybrid.Reflection.LockExtensions.Locking(System.Object,System.Action)
  parent: Hybrid.Reflection.LockExtensions
  definition: Hybrid.Reflection.LockExtensions.Locking(System.Object,System.Action)
  name: Locking(Action)
  nameWithType: LockExtensions.Locking(Action)
  fullName: Hybrid.Reflection.LockExtensions.Locking(System.Action)
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking(System.Action)
    name: Locking
    nameWithType: LockExtensions.Locking
    fullName: Hybrid.Reflection.LockExtensions.Locking
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking(System.Action)
    name: Locking
    nameWithType: LockExtensions.Locking
    fullName: Hybrid.Reflection.LockExtensions.Locking
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Authorization.SecurityManagerBase`18.Hybrid.Reflection.LockExtensions.Locking``1(System.Action{Hybrid.Zero.Authorization.SecurityManagerBase{{TFunction},{TFunctionInputDto},{TEntityInfo},{TEntityInfoInputDto},{TModule},{TModuleInputDto},{TModuleKey},{TModuleFunction},{TModuleRole},{TModuleUser},{TEntityRole},{TEntityRoleInputDto},{TUserRole},{TUserRoleKey},{TRole},{TRoleKey},{TUser},{TUserKey}}})
  commentId: M:Hybrid.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
  parent: Hybrid.Reflection.LockExtensions
  definition: Hybrid.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
  name: Locking<SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>>(Action<SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>>)
  nameWithType: LockExtensions.Locking<SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>>(Action<SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>>)
  fullName: Hybrid.Reflection.LockExtensions.Locking<Hybrid.Zero.Authorization.SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>>(System.Action<Hybrid.Zero.Authorization.SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>>)
  nameWithType.vb: LockExtensions.Locking(Of SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey))(Action(Of SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey)))
  fullName.vb: Hybrid.Reflection.LockExtensions.Locking(Of Hybrid.Zero.Authorization.SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey))(System.Action(Of Hybrid.Zero.Authorization.SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey)))
  name.vb: Locking(Of SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey))(Action(Of SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey)))
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(System.Action{``0})
    name: Locking<SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>>
    nameWithType: LockExtensions.Locking<SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>>
    fullName: Hybrid.Reflection.LockExtensions.Locking<Hybrid.Zero.Authorization.SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Zero.Authorization.SecurityManagerBase`18
    name: SecurityManagerBase
    nameWithType: SecurityManagerBase
    fullName: Hybrid.Zero.Authorization.SecurityManagerBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TFunctionInputDto
    nameWithType: TFunctionInputDto
    fullName: TFunctionInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityInfo
    nameWithType: TEntityInfo
    fullName: TEntityInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityInfoInputDto
    nameWithType: TEntityInfoInputDto
    fullName: TEntityInfoInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModule
    nameWithType: TModule
    fullName: TModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleInputDto
    nameWithType: TModuleInputDto
    fullName: TModuleInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleKey
    nameWithType: TModuleKey
    fullName: TModuleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleFunction
    nameWithType: TModuleFunction
    fullName: TModuleFunction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleRole
    nameWithType: TModuleRole
    fullName: TModuleRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleUser
    nameWithType: TModuleUser
    fullName: TModuleUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityRole
    nameWithType: TEntityRole
    fullName: TEntityRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityRoleInputDto
    nameWithType: TEntityRoleInputDto
    fullName: TEntityRoleInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserRole
    nameWithType: TUserRole
    fullName: TUserRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserRoleKey
    nameWithType: TUserRoleKey
    fullName: TUserRoleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserKey
    nameWithType: TUserKey
    fullName: TUserKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(System.Action{``0})
    name: Locking(Of SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey))
    nameWithType: LockExtensions.Locking(Of SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey))
    fullName: Hybrid.Reflection.LockExtensions.Locking(Of Hybrid.Zero.Authorization.SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey))
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Zero.Authorization.SecurityManagerBase`18
    name: SecurityManagerBase
    nameWithType: SecurityManagerBase
    fullName: Hybrid.Zero.Authorization.SecurityManagerBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TFunctionInputDto
    nameWithType: TFunctionInputDto
    fullName: TFunctionInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityInfo
    nameWithType: TEntityInfo
    fullName: TEntityInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityInfoInputDto
    nameWithType: TEntityInfoInputDto
    fullName: TEntityInfoInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModule
    nameWithType: TModule
    fullName: TModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleInputDto
    nameWithType: TModuleInputDto
    fullName: TModuleInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleKey
    nameWithType: TModuleKey
    fullName: TModuleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleFunction
    nameWithType: TModuleFunction
    fullName: TModuleFunction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleRole
    nameWithType: TModuleRole
    fullName: TModuleRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleUser
    nameWithType: TModuleUser
    fullName: TModuleUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityRole
    nameWithType: TEntityRole
    fullName: TEntityRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityRoleInputDto
    nameWithType: TEntityRoleInputDto
    fullName: TEntityRoleInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserRole
    nameWithType: TUserRole
    fullName: TUserRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserRoleKey
    nameWithType: TUserRoleKey
    fullName: TUserRoleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserKey
    nameWithType: TUserKey
    fullName: TUserKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Reflection.LockExtensions.Locking``1(System.Func{{TResult}})
  commentId: M:Hybrid.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
  parent: Hybrid.Reflection.LockExtensions
  definition: Hybrid.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
  name: Locking<TResult>(Func<TResult>)
  nameWithType: LockExtensions.Locking<TResult>(Func<TResult>)
  fullName: Hybrid.Reflection.LockExtensions.Locking<TResult>(System.Func<TResult>)
  nameWithType.vb: LockExtensions.Locking(Of TResult)(Func(Of TResult))
  fullName.vb: Hybrid.Reflection.LockExtensions.Locking(Of TResult)(System.Func(Of TResult))
  name.vb: Locking(Of TResult)(Func(Of TResult))
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(System.Func{``0})
    name: Locking<TResult>
    nameWithType: LockExtensions.Locking<TResult>
    fullName: Hybrid.Reflection.LockExtensions.Locking<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(System.Func{``0})
    name: Locking(Of TResult)
    nameWithType: LockExtensions.Locking(Of TResult)
    fullName: Hybrid.Reflection.LockExtensions.Locking(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Authorization.SecurityManagerBase`18.Hybrid.Reflection.LockExtensions.Locking``2(System.Func{Hybrid.Zero.Authorization.SecurityManagerBase{{TFunction},{TFunctionInputDto},{TEntityInfo},{TEntityInfoInputDto},{TModule},{TModuleInputDto},{TModuleKey},{TModuleFunction},{TModuleRole},{TModuleUser},{TEntityRole},{TEntityRoleInputDto},{TUserRole},{TUserRoleKey},{TRole},{TRoleKey},{TUser},{TUserKey}},{TResult}})
  commentId: M:Hybrid.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
  parent: Hybrid.Reflection.LockExtensions
  definition: Hybrid.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
  name: Locking<SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>, TResult>(Func<SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>, TResult>)
  nameWithType: LockExtensions.Locking<SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>, TResult>(Func<SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>, TResult>)
  fullName: Hybrid.Reflection.LockExtensions.Locking<Hybrid.Zero.Authorization.SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>, TResult>(System.Func<Hybrid.Zero.Authorization.SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>, TResult>)
  nameWithType.vb: LockExtensions.Locking(Of SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey), TResult)(Func(Of SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey), TResult))
  fullName.vb: Hybrid.Reflection.LockExtensions.Locking(Of Hybrid.Zero.Authorization.SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey), TResult)(System.Func(Of Hybrid.Zero.Authorization.SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey), TResult))
  name.vb: Locking(Of SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey), TResult)(Func(Of SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey), TResult))
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking``2(System.Func{``0,``1})
    name: Locking<SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>, TResult>
    nameWithType: LockExtensions.Locking<SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>, TResult>
    fullName: Hybrid.Reflection.LockExtensions.Locking<Hybrid.Zero.Authorization.SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Zero.Authorization.SecurityManagerBase`18
    name: SecurityManagerBase
    nameWithType: SecurityManagerBase
    fullName: Hybrid.Zero.Authorization.SecurityManagerBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TFunctionInputDto
    nameWithType: TFunctionInputDto
    fullName: TFunctionInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityInfo
    nameWithType: TEntityInfo
    fullName: TEntityInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityInfoInputDto
    nameWithType: TEntityInfoInputDto
    fullName: TEntityInfoInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModule
    nameWithType: TModule
    fullName: TModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleInputDto
    nameWithType: TModuleInputDto
    fullName: TModuleInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleKey
    nameWithType: TModuleKey
    fullName: TModuleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleFunction
    nameWithType: TModuleFunction
    fullName: TModuleFunction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleRole
    nameWithType: TModuleRole
    fullName: TModuleRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleUser
    nameWithType: TModuleUser
    fullName: TModuleUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityRole
    nameWithType: TEntityRole
    fullName: TEntityRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityRoleInputDto
    nameWithType: TEntityRoleInputDto
    fullName: TEntityRoleInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserRole
    nameWithType: TUserRole
    fullName: TUserRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserRoleKey
    nameWithType: TUserRoleKey
    fullName: TUserRoleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserKey
    nameWithType: TUserKey
    fullName: TUserKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking``2(System.Func{``0,``1})
    name: Locking(Of SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey), TResult)
    nameWithType: LockExtensions.Locking(Of SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey), TResult)
    fullName: Hybrid.Reflection.LockExtensions.Locking(Of Hybrid.Zero.Authorization.SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey), TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Zero.Authorization.SecurityManagerBase`18
    name: SecurityManagerBase
    nameWithType: SecurityManagerBase
    fullName: Hybrid.Zero.Authorization.SecurityManagerBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TFunctionInputDto
    nameWithType: TFunctionInputDto
    fullName: TFunctionInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityInfo
    nameWithType: TEntityInfo
    fullName: TEntityInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityInfoInputDto
    nameWithType: TEntityInfoInputDto
    fullName: TEntityInfoInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModule
    nameWithType: TModule
    fullName: TModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleInputDto
    nameWithType: TModuleInputDto
    fullName: TModuleInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleKey
    nameWithType: TModuleKey
    fullName: TModuleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleFunction
    nameWithType: TModuleFunction
    fullName: TModuleFunction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleRole
    nameWithType: TModuleRole
    fullName: TModuleRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleUser
    nameWithType: TModuleUser
    fullName: TModuleUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityRole
    nameWithType: TEntityRole
    fullName: TEntityRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityRoleInputDto
    nameWithType: TEntityRoleInputDto
    fullName: TEntityRoleInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserRole
    nameWithType: TUserRole
    fullName: TUserRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserRoleKey
    nameWithType: TUserRoleKey
    fullName: TUserRoleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserKey
    nameWithType: TUserKey
    fullName: TUserKey
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Authorization.SecurityManagerBase`18.Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2
  commentId: M:Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2(``0)
  parent: Hybrid.Domain.Entities.EntityExtensions
  definition: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2(``0)
  name: CheckICreatedTime<SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>, TKey>()
  nameWithType: EntityExtensions.CheckICreatedTime<SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>, TKey>()
  fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime<Hybrid.Zero.Authorization.SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>, TKey>()
  nameWithType.vb: EntityExtensions.CheckICreatedTime(Of SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey), TKey)()
  fullName.vb: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime(Of Hybrid.Zero.Authorization.SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey), TKey)()
  name.vb: CheckICreatedTime(Of SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey), TKey)()
  spec.csharp:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2
    name: CheckICreatedTime<SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>, TKey>
    nameWithType: EntityExtensions.CheckICreatedTime<SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>, TKey>
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime<Hybrid.Zero.Authorization.SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2
    name: CheckICreatedTime(Of SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey), TKey)
    nameWithType: EntityExtensions.CheckICreatedTime(Of SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey), TKey)
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime(Of Hybrid.Zero.Authorization.SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey), TKey)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Authorization.SecurityManagerBase`18.Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(System.Security.Principal.IPrincipal)
  commentId: M:Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
  parent: Hybrid.Domain.Entities.EntityExtensions
  definition: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
  name: CheckICreationAudited<SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>, TKey, TUserKey>(IPrincipal)
  nameWithType: EntityExtensions.CheckICreationAudited<SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>, TKey, TUserKey>(IPrincipal)
  fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited<Hybrid.Zero.Authorization.SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>, TKey, TUserKey>(System.Security.Principal.IPrincipal)
  nameWithType.vb: EntityExtensions.CheckICreationAudited(Of SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey), TKey, TUserKey)(IPrincipal)
  fullName.vb: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited(Of Hybrid.Zero.Authorization.SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey), TKey, TUserKey)(System.Security.Principal.IPrincipal)
  name.vb: CheckICreationAudited(Of SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey), TKey, TUserKey)(IPrincipal)
  spec.csharp:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(System.Security.Principal.IPrincipal)
    name: CheckICreationAudited<SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>, TKey, TUserKey>
    nameWithType: EntityExtensions.CheckICreationAudited<SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>, TKey, TUserKey>
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited<Hybrid.Zero.Authorization.SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>, TKey, TUserKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(System.Security.Principal.IPrincipal)
    name: CheckICreationAudited(Of SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey), TKey, TUserKey)
    nameWithType: EntityExtensions.CheckICreationAudited(Of SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey), TKey, TUserKey)
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited(Of Hybrid.Zero.Authorization.SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey), TKey, TUserKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Authorization.SecurityManagerBase`18.Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(System.Security.Principal.IPrincipal)
  commentId: M:Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
  parent: Hybrid.Domain.Entities.EntityExtensions
  definition: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
  name: CheckIUpdateAudited<SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>, TKey, TUserKey>(IPrincipal)
  nameWithType: EntityExtensions.CheckIUpdateAudited<SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>, TKey, TUserKey>(IPrincipal)
  fullName: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited<Hybrid.Zero.Authorization.SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>, TKey, TUserKey>(System.Security.Principal.IPrincipal)
  nameWithType.vb: EntityExtensions.CheckIUpdateAudited(Of SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey), TKey, TUserKey)(IPrincipal)
  fullName.vb: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited(Of Hybrid.Zero.Authorization.SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey), TKey, TUserKey)(System.Security.Principal.IPrincipal)
  name.vb: CheckIUpdateAudited(Of SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey), TKey, TUserKey)(IPrincipal)
  spec.csharp:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(System.Security.Principal.IPrincipal)
    name: CheckIUpdateAudited<SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>, TKey, TUserKey>
    nameWithType: EntityExtensions.CheckIUpdateAudited<SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>, TKey, TUserKey>
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited<Hybrid.Zero.Authorization.SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>, TKey, TUserKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(System.Security.Principal.IPrincipal)
    name: CheckIUpdateAudited(Of SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey), TKey, TUserKey)
    nameWithType: EntityExtensions.CheckIUpdateAudited(Of SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey), TKey, TUserKey)
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited(Of Hybrid.Zero.Authorization.SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey), TKey, TUserKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Hybrid.Zero.Authorization.IFunctionStore`2
  commentId: T:Hybrid.Zero.Authorization.IFunctionStore`2
  name: IFunctionStore<TFunction, TFunctionInputDto>
  nameWithType: IFunctionStore<TFunction, TFunctionInputDto>
  fullName: Hybrid.Zero.Authorization.IFunctionStore<TFunction, TFunctionInputDto>
  nameWithType.vb: IFunctionStore(Of TFunction, TFunctionInputDto)
  fullName.vb: Hybrid.Zero.Authorization.IFunctionStore(Of TFunction, TFunctionInputDto)
  name.vb: IFunctionStore(Of TFunction, TFunctionInputDto)
  spec.csharp:
  - uid: Hybrid.Zero.Authorization.IFunctionStore`2
    name: IFunctionStore
    nameWithType: IFunctionStore
    fullName: Hybrid.Zero.Authorization.IFunctionStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TFunctionInputDto
    nameWithType: TFunctionInputDto
    fullName: TFunctionInputDto
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Hybrid.Zero.Authorization.IFunctionStore`2
    name: IFunctionStore
    nameWithType: IFunctionStore
    fullName: Hybrid.Zero.Authorization.IFunctionStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TFunctionInputDto
    nameWithType: TFunctionInputDto
    fullName: TFunctionInputDto
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Authorization.IEntityInfoStore`2
  commentId: T:Hybrid.Zero.Authorization.IEntityInfoStore`2
  name: IEntityInfoStore<TEntityInfo, TEntityInfoInputDto>
  nameWithType: IEntityInfoStore<TEntityInfo, TEntityInfoInputDto>
  fullName: Hybrid.Zero.Authorization.IEntityInfoStore<TEntityInfo, TEntityInfoInputDto>
  nameWithType.vb: IEntityInfoStore(Of TEntityInfo, TEntityInfoInputDto)
  fullName.vb: Hybrid.Zero.Authorization.IEntityInfoStore(Of TEntityInfo, TEntityInfoInputDto)
  name.vb: IEntityInfoStore(Of TEntityInfo, TEntityInfoInputDto)
  spec.csharp:
  - uid: Hybrid.Zero.Authorization.IEntityInfoStore`2
    name: IEntityInfoStore
    nameWithType: IEntityInfoStore
    fullName: Hybrid.Zero.Authorization.IEntityInfoStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntityInfo
    nameWithType: TEntityInfo
    fullName: TEntityInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityInfoInputDto
    nameWithType: TEntityInfoInputDto
    fullName: TEntityInfoInputDto
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Hybrid.Zero.Authorization.IEntityInfoStore`2
    name: IEntityInfoStore
    nameWithType: IEntityInfoStore
    fullName: Hybrid.Zero.Authorization.IEntityInfoStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntityInfo
    nameWithType: TEntityInfo
    fullName: TEntityInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityInfoInputDto
    nameWithType: TEntityInfoInputDto
    fullName: TEntityInfoInputDto
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Authorization.IModuleStore`3
  commentId: T:Hybrid.Zero.Authorization.IModuleStore`3
  name: IModuleStore<TModule, TModuleInputDto, TModuleKey>
  nameWithType: IModuleStore<TModule, TModuleInputDto, TModuleKey>
  fullName: Hybrid.Zero.Authorization.IModuleStore<TModule, TModuleInputDto, TModuleKey>
  nameWithType.vb: IModuleStore(Of TModule, TModuleInputDto, TModuleKey)
  fullName.vb: Hybrid.Zero.Authorization.IModuleStore(Of TModule, TModuleInputDto, TModuleKey)
  name.vb: IModuleStore(Of TModule, TModuleInputDto, TModuleKey)
  spec.csharp:
  - uid: Hybrid.Zero.Authorization.IModuleStore`3
    name: IModuleStore
    nameWithType: IModuleStore
    fullName: Hybrid.Zero.Authorization.IModuleStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TModule
    nameWithType: TModule
    fullName: TModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleInputDto
    nameWithType: TModuleInputDto
    fullName: TModuleInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleKey
    nameWithType: TModuleKey
    fullName: TModuleKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Hybrid.Zero.Authorization.IModuleStore`3
    name: IModuleStore
    nameWithType: IModuleStore
    fullName: Hybrid.Zero.Authorization.IModuleStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModule
    nameWithType: TModule
    fullName: TModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleInputDto
    nameWithType: TModuleInputDto
    fullName: TModuleInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleKey
    nameWithType: TModuleKey
    fullName: TModuleKey
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Authorization.IModuleFunctionStore`2
  commentId: T:Hybrid.Zero.Authorization.IModuleFunctionStore`2
  name: IModuleFunctionStore<TModuleFunction, TModuleKey>
  nameWithType: IModuleFunctionStore<TModuleFunction, TModuleKey>
  fullName: Hybrid.Zero.Authorization.IModuleFunctionStore<TModuleFunction, TModuleKey>
  nameWithType.vb: IModuleFunctionStore(Of TModuleFunction, TModuleKey)
  fullName.vb: Hybrid.Zero.Authorization.IModuleFunctionStore(Of TModuleFunction, TModuleKey)
  name.vb: IModuleFunctionStore(Of TModuleFunction, TModuleKey)
  spec.csharp:
  - uid: Hybrid.Zero.Authorization.IModuleFunctionStore`2
    name: IModuleFunctionStore
    nameWithType: IModuleFunctionStore
    fullName: Hybrid.Zero.Authorization.IModuleFunctionStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TModuleFunction
    nameWithType: TModuleFunction
    fullName: TModuleFunction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleKey
    nameWithType: TModuleKey
    fullName: TModuleKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Hybrid.Zero.Authorization.IModuleFunctionStore`2
    name: IModuleFunctionStore
    nameWithType: IModuleFunctionStore
    fullName: Hybrid.Zero.Authorization.IModuleFunctionStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModuleFunction
    nameWithType: TModuleFunction
    fullName: TModuleFunction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleKey
    nameWithType: TModuleKey
    fullName: TModuleKey
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Authorization.IModuleRoleStore`3
  commentId: T:Hybrid.Zero.Authorization.IModuleRoleStore`3
  name: IModuleRoleStore<TModuleRole, TRoleKey, TModuleKey>
  nameWithType: IModuleRoleStore<TModuleRole, TRoleKey, TModuleKey>
  fullName: Hybrid.Zero.Authorization.IModuleRoleStore<TModuleRole, TRoleKey, TModuleKey>
  nameWithType.vb: IModuleRoleStore(Of TModuleRole, TRoleKey, TModuleKey)
  fullName.vb: Hybrid.Zero.Authorization.IModuleRoleStore(Of TModuleRole, TRoleKey, TModuleKey)
  name.vb: IModuleRoleStore(Of TModuleRole, TRoleKey, TModuleKey)
  spec.csharp:
  - uid: Hybrid.Zero.Authorization.IModuleRoleStore`3
    name: IModuleRoleStore
    nameWithType: IModuleRoleStore
    fullName: Hybrid.Zero.Authorization.IModuleRoleStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TModuleRole
    nameWithType: TModuleRole
    fullName: TModuleRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleKey
    nameWithType: TModuleKey
    fullName: TModuleKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Hybrid.Zero.Authorization.IModuleRoleStore`3
    name: IModuleRoleStore
    nameWithType: IModuleRoleStore
    fullName: Hybrid.Zero.Authorization.IModuleRoleStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModuleRole
    nameWithType: TModuleRole
    fullName: TModuleRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleKey
    nameWithType: TModuleKey
    fullName: TModuleKey
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Authorization.IModuleUserStore`3
  commentId: T:Hybrid.Zero.Authorization.IModuleUserStore`3
  name: IModuleUserStore<TModuleUser, TUserKey, TModuleKey>
  nameWithType: IModuleUserStore<TModuleUser, TUserKey, TModuleKey>
  fullName: Hybrid.Zero.Authorization.IModuleUserStore<TModuleUser, TUserKey, TModuleKey>
  nameWithType.vb: IModuleUserStore(Of TModuleUser, TUserKey, TModuleKey)
  fullName.vb: Hybrid.Zero.Authorization.IModuleUserStore(Of TModuleUser, TUserKey, TModuleKey)
  name.vb: IModuleUserStore(Of TModuleUser, TUserKey, TModuleKey)
  spec.csharp:
  - uid: Hybrid.Zero.Authorization.IModuleUserStore`3
    name: IModuleUserStore
    nameWithType: IModuleUserStore
    fullName: Hybrid.Zero.Authorization.IModuleUserStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TModuleUser
    nameWithType: TModuleUser
    fullName: TModuleUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserKey
    nameWithType: TUserKey
    fullName: TUserKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleKey
    nameWithType: TModuleKey
    fullName: TModuleKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Hybrid.Zero.Authorization.IModuleUserStore`3
    name: IModuleUserStore
    nameWithType: IModuleUserStore
    fullName: Hybrid.Zero.Authorization.IModuleUserStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModuleUser
    nameWithType: TModuleUser
    fullName: TModuleUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserKey
    nameWithType: TUserKey
    fullName: TUserKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleKey
    nameWithType: TModuleKey
    fullName: TModuleKey
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Authorization.IEntityRoleStore`3
  commentId: T:Hybrid.Zero.Authorization.IEntityRoleStore`3
  name: IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>
  nameWithType: IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>
  fullName: Hybrid.Zero.Authorization.IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>
  nameWithType.vb: IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey)
  fullName.vb: Hybrid.Zero.Authorization.IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey)
  name.vb: IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey)
  spec.csharp:
  - uid: Hybrid.Zero.Authorization.IEntityRoleStore`3
    name: IEntityRoleStore
    nameWithType: IEntityRoleStore
    fullName: Hybrid.Zero.Authorization.IEntityRoleStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntityRole
    nameWithType: TEntityRole
    fullName: TEntityRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityRoleInputDto
    nameWithType: TEntityRoleInputDto
    fullName: TEntityRoleInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Hybrid.Zero.Authorization.IEntityRoleStore`3
    name: IEntityRoleStore
    nameWithType: IEntityRoleStore
    fullName: Hybrid.Zero.Authorization.IEntityRoleStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntityRole
    nameWithType: TEntityRole
    fullName: TEntityRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityRoleInputDto
    nameWithType: TEntityRoleInputDto
    fullName: TEntityRoleInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
  commentId: M:Hybrid.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
  isExternal: true
  name: CastTo(Object, Type)
  nameWithType: ObjectExtensions.CastTo(Object, Type)
  fullName: Hybrid.Extensions.ObjectExtensions.CastTo(System.Object, System.Type)
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
    name: CastTo
    nameWithType: ObjectExtensions.CastTo
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
    name: CastTo
    nameWithType: ObjectExtensions.CastTo
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ObjectExtensions
  commentId: T:Hybrid.Extensions.ObjectExtensions
  parent: Hybrid.Extensions
  name: ObjectExtensions
  nameWithType: ObjectExtensions
  fullName: Hybrid.Extensions.ObjectExtensions
- uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object)
  commentId: M:Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object)
  isExternal: true
  name: CastTo<T>(Object)
  nameWithType: ObjectExtensions.CastTo<T>(Object)
  fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>(System.Object)
  nameWithType.vb: ObjectExtensions.CastTo(Of T)(Object)
  fullName.vb: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)(System.Object)
  name.vb: CastTo(Of T)(Object)
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object)
    name: CastTo<T>
    nameWithType: ObjectExtensions.CastTo<T>
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object)
    name: CastTo(Of T)
    nameWithType: ObjectExtensions.CastTo(Of T)
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
  commentId: M:Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
  isExternal: true
  name: CastTo<T>(Object, T)
  nameWithType: ObjectExtensions.CastTo<T>(Object, T)
  fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>(System.Object, T)
  nameWithType.vb: ObjectExtensions.CastTo(Of T)(Object, T)
  fullName.vb: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)(System.Object, T)
  name.vb: CastTo(Of T)(Object, T)
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
    name: CastTo<T>
    nameWithType: ObjectExtensions.CastTo<T>
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
    name: CastTo(Of T)
    nameWithType: ObjectExtensions.CastTo(Of T)
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
  commentId: M:Hybrid.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
  name: IsIn<T>(T, T[])
  nameWithType: ObjectExtensions.IsIn<T>(T, T[])
  fullName: Hybrid.Extensions.ObjectExtensions.IsIn<T>(T, T[])
  nameWithType.vb: ObjectExtensions.IsIn(Of T)(T, T())
  fullName.vb: Hybrid.Extensions.ObjectExtensions.IsIn(Of T)(T, T())
  name.vb: IsIn(Of T)(T, T())
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
    name: IsIn<T>
    nameWithType: ObjectExtensions.IsIn<T>
    fullName: Hybrid.Extensions.ObjectExtensions.IsIn<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
    name: IsIn(Of T)
    nameWithType: ObjectExtensions.IsIn(Of T)
    fullName: Hybrid.Extensions.ObjectExtensions.IsIn(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ObjectExtensions.ToDynamic(System.Object)
  commentId: M:Hybrid.Extensions.ObjectExtensions.ToDynamic(System.Object)
  isExternal: true
  name: ToDynamic(Object)
  nameWithType: ObjectExtensions.ToDynamic(Object)
  fullName: Hybrid.Extensions.ObjectExtensions.ToDynamic(System.Object)
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.ToDynamic(System.Object)
    name: ToDynamic
    nameWithType: ObjectExtensions.ToDynamic
    fullName: Hybrid.Extensions.ObjectExtensions.ToDynamic
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.ToDynamic(System.Object)
    name: ToDynamic
    nameWithType: ObjectExtensions.ToDynamic
    fullName: Hybrid.Extensions.ObjectExtensions.ToDynamic
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ObjectExtensions.DeepClone``1(``0)
  commentId: M:Hybrid.Extensions.ObjectExtensions.DeepClone``1(``0)
  name: DeepClone<T>(T)
  nameWithType: ObjectExtensions.DeepClone<T>(T)
  fullName: Hybrid.Extensions.ObjectExtensions.DeepClone<T>(T)
  nameWithType.vb: ObjectExtensions.DeepClone(Of T)(T)
  fullName.vb: Hybrid.Extensions.ObjectExtensions.DeepClone(Of T)(T)
  name.vb: DeepClone(Of T)(T)
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.DeepClone``1(``0)
    name: DeepClone<T>
    nameWithType: ObjectExtensions.DeepClone<T>
    fullName: Hybrid.Extensions.ObjectExtensions.DeepClone<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.DeepClone``1(``0)
    name: DeepClone(Of T)
    nameWithType: ObjectExtensions.DeepClone(Of T)
    fullName: Hybrid.Extensions.ObjectExtensions.DeepClone(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
  commentId: M:Hybrid.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
  isExternal: true
  name: Required<T>(T, Func<T, Boolean>, String)
  nameWithType: ParameterCheckExtensions.Required<T>(T, Func<T, Boolean>, String)
  fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<T>(T, System.Func<T, System.Boolean>, System.String)
  nameWithType.vb: ParameterCheckExtensions.Required(Of T)(T, Func(Of T, Boolean), String)
  fullName.vb: Hybrid.Extensions.ParameterCheckExtensions.Required(Of T)(T, System.Func(Of T, System.Boolean), System.String)
  name.vb: Required(Of T)(T, Func(Of T, Boolean), String)
  spec.csharp:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
    name: Required<T>
    nameWithType: ParameterCheckExtensions.Required<T>
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
    name: Required(Of T)
    nameWithType: ParameterCheckExtensions.Required(Of T)
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ParameterCheckExtensions
  commentId: T:Hybrid.Extensions.ParameterCheckExtensions
  parent: Hybrid.Extensions
  name: ParameterCheckExtensions
  nameWithType: ParameterCheckExtensions
  fullName: Hybrid.Extensions.ParameterCheckExtensions
- uid: Hybrid.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
  commentId: M:Hybrid.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
  isExternal: true
  name: Required<T, TException>(T, Func<T, Boolean>, String)
  nameWithType: ParameterCheckExtensions.Required<T, TException>(T, Func<T, Boolean>, String)
  fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<T, TException>(T, System.Func<T, System.Boolean>, System.String)
  nameWithType.vb: ParameterCheckExtensions.Required(Of T, TException)(T, Func(Of T, Boolean), String)
  fullName.vb: Hybrid.Extensions.ParameterCheckExtensions.Required(Of T, TException)(T, System.Func(Of T, System.Boolean), System.String)
  name.vb: Required(Of T, TException)(T, Func(Of T, Boolean), String)
  spec.csharp:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
    name: Required<T, TException>
    nameWithType: ParameterCheckExtensions.Required<T, TException>
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<T, TException>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
    name: Required(Of T, TException)
    nameWithType: ParameterCheckExtensions.Required(Of T, TException)
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required(Of T, TException)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
  commentId: M:Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
  isExternal: true
  name: CheckNotNull<T>(T, String)
  nameWithType: ParameterCheckExtensions.CheckNotNull<T>(T, String)
  fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull<T>(T, System.String)
  nameWithType.vb: ParameterCheckExtensions.CheckNotNull(Of T)(T, String)
  fullName.vb: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull(Of T)(T, System.String)
  name.vb: CheckNotNull(Of T)(T, String)
  spec.csharp:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
    name: CheckNotNull<T>
    nameWithType: ParameterCheckExtensions.CheckNotNull<T>
    fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
    name: CheckNotNull(Of T)
    nameWithType: ParameterCheckExtensions.CheckNotNull(Of T)
    fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
  isExternal: true
  name: TryCatch<T>(T, Action<T>, Action<Exception>, Action<T>)
  nameWithType: TryCatchExtensions.TryCatch<T>(T, Action<T>, Action<Exception>, Action<T>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T>(T, System.Action<T>, System.Action<System.Exception>, System.Action<T>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of T)(T, Action(Of T), Action(Of Exception), Action(Of T))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T)(T, System.Action(Of T), System.Action(Of System.Exception), System.Action(Of T))
  name.vb: TryCatch(Of T)(T, Action(Of T), Action(Of Exception), Action(Of T))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
    name: TryCatch<T>
    nameWithType: TryCatchExtensions.TryCatch<T>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
    name: TryCatch(Of T)
    nameWithType: TryCatchExtensions.TryCatch(Of T)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.TryCatchExtensions
  commentId: T:Hybrid.Extensions.TryCatchExtensions
  parent: Hybrid.Extensions
  name: TryCatchExtensions
  nameWithType: TryCatchExtensions
  fullName: Hybrid.Extensions.TryCatchExtensions
- uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
  isExternal: true
  name: TryCatch<T>(T, Action<T>, Action<Exception>)
  nameWithType: TryCatchExtensions.TryCatch<T>(T, Action<T>, Action<Exception>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T>(T, System.Action<T>, System.Action<System.Exception>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of T)(T, Action(Of T), Action(Of Exception))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T)(T, System.Action(Of T), System.Action(Of System.Exception))
  name.vb: TryCatch(Of T)(T, Action(Of T), Action(Of Exception))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
    name: TryCatch<T>
    nameWithType: TryCatchExtensions.TryCatch<T>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
    name: TryCatch(Of T)
    nameWithType: TryCatchExtensions.TryCatch(Of T)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
  isExternal: true
  name: TryCatch<T, TResult>(T, Func<T, TResult>, Action<Exception>, Action<T>)
  nameWithType: TryCatchExtensions.TryCatch<T, TResult>(T, Func<T, TResult>, Action<Exception>, Action<T>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T, TResult>(T, System.Func<T, TResult>, System.Action<System.Exception>, System.Action<T>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of T, TResult)(T, Func(Of T, TResult), Action(Of Exception), Action(Of T))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T, TResult)(T, System.Func(Of T, TResult), System.Action(Of System.Exception), System.Action(Of T))
  name.vb: TryCatch(Of T, TResult)(T, Func(Of T, TResult), Action(Of Exception), Action(Of T))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
    name: TryCatch<T, TResult>
    nameWithType: TryCatchExtensions.TryCatch<T, TResult>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
    name: TryCatch(Of T, TResult)
    nameWithType: TryCatchExtensions.TryCatch(Of T, TResult)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
  isExternal: true
  name: TryCatch<T, TResult>(T, Func<T, TResult>, Action<Exception>)
  nameWithType: TryCatchExtensions.TryCatch<T, TResult>(T, Func<T, TResult>, Action<Exception>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T, TResult>(T, System.Func<T, TResult>, System.Action<System.Exception>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of T, TResult)(T, Func(Of T, TResult), Action(Of Exception))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T, TResult)(T, System.Func(Of T, TResult), System.Action(Of System.Exception))
  name.vb: TryCatch(Of T, TResult)(T, Func(Of T, TResult), Action(Of Exception))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
    name: TryCatch<T, TResult>
    nameWithType: TryCatchExtensions.TryCatch<T, TResult>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
    name: TryCatch(Of T, TResult)
    nameWithType: TryCatchExtensions.TryCatch(Of T, TResult)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
  isExternal: true
  name: TryFinally<T>(T, Action<T>, Action<T>)
  nameWithType: TryCatchExtensions.TryFinally<T>(T, Action<T>, Action<T>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryFinally<T>(T, System.Action<T>, System.Action<T>)
  nameWithType.vb: TryCatchExtensions.TryFinally(Of T)(T, Action(Of T), Action(Of T))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryFinally(Of T)(T, System.Action(Of T), System.Action(Of T))
  name.vb: TryFinally(Of T)(T, Action(Of T), Action(Of T))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
    name: TryFinally<T>
    nameWithType: TryCatchExtensions.TryFinally<T>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryFinally<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
    name: TryFinally(Of T)
    nameWithType: TryCatchExtensions.TryFinally(Of T)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryFinally(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
  commentId: M:Hybrid.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
  isExternal: true
  name: ToJsonString(Object, Boolean, Boolean)
  nameWithType: JsonExtensions.ToJsonString(Object, Boolean, Boolean)
  fullName: Hybrid.Json.JsonExtensions.ToJsonString(System.Object, System.Boolean, System.Boolean)
  spec.csharp:
  - uid: Hybrid.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
    name: ToJsonString
    nameWithType: JsonExtensions.ToJsonString
    fullName: Hybrid.Json.JsonExtensions.ToJsonString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
    name: ToJsonString
    nameWithType: JsonExtensions.ToJsonString
    fullName: Hybrid.Json.JsonExtensions.ToJsonString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Json.JsonExtensions
  commentId: T:Hybrid.Json.JsonExtensions
  parent: Hybrid.Json
  name: JsonExtensions
  nameWithType: JsonExtensions
  fullName: Hybrid.Json.JsonExtensions
- uid: Hybrid.Mapping.MapperExtensions.MapTo``1(System.Object)
  commentId: M:Hybrid.Mapping.MapperExtensions.MapTo``1(System.Object)
  isExternal: true
  name: MapTo<TTarget>(Object)
  nameWithType: MapperExtensions.MapTo<TTarget>(Object)
  fullName: Hybrid.Mapping.MapperExtensions.MapTo<TTarget>(System.Object)
  nameWithType.vb: MapperExtensions.MapTo(Of TTarget)(Object)
  fullName.vb: Hybrid.Mapping.MapperExtensions.MapTo(Of TTarget)(System.Object)
  name.vb: MapTo(Of TTarget)(Object)
  spec.csharp:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``1(System.Object)
    name: MapTo<TTarget>
    nameWithType: MapperExtensions.MapTo<TTarget>
    fullName: Hybrid.Mapping.MapperExtensions.MapTo<TTarget>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``1(System.Object)
    name: MapTo(Of TTarget)
    nameWithType: MapperExtensions.MapTo(Of TTarget)
    fullName: Hybrid.Mapping.MapperExtensions.MapTo(Of TTarget)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Mapping.MapperExtensions
  commentId: T:Hybrid.Mapping.MapperExtensions
  parent: Hybrid.Mapping
  name: MapperExtensions
  nameWithType: MapperExtensions
  fullName: Hybrid.Mapping.MapperExtensions
- uid: Hybrid.Mapping.MapperExtensions.MapTo``2(``0,``1)
  commentId: M:Hybrid.Mapping.MapperExtensions.MapTo``2(``0,``1)
  name: MapTo<TSource, TTarget>(TSource, TTarget)
  nameWithType: MapperExtensions.MapTo<TSource, TTarget>(TSource, TTarget)
  fullName: Hybrid.Mapping.MapperExtensions.MapTo<TSource, TTarget>(TSource, TTarget)
  nameWithType.vb: MapperExtensions.MapTo(Of TSource, TTarget)(TSource, TTarget)
  fullName.vb: Hybrid.Mapping.MapperExtensions.MapTo(Of TSource, TTarget)(TSource, TTarget)
  name.vb: MapTo(Of TSource, TTarget)(TSource, TTarget)
  spec.csharp:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``2(``0,``1)
    name: MapTo<TSource, TTarget>
    nameWithType: MapperExtensions.MapTo<TSource, TTarget>
    fullName: Hybrid.Mapping.MapperExtensions.MapTo<TSource, TTarget>
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``2(``0,``1)
    name: MapTo(Of TSource, TTarget)
    nameWithType: MapperExtensions.MapTo(Of TSource, TTarget)
    fullName: Hybrid.Mapping.MapperExtensions.MapTo(Of TSource, TTarget)
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Reflection.LockExtensions.Locking(System.Object,System.Action)
  commentId: M:Hybrid.Reflection.LockExtensions.Locking(System.Object,System.Action)
  isExternal: true
  name: Locking(Object, Action)
  nameWithType: LockExtensions.Locking(Object, Action)
  fullName: Hybrid.Reflection.LockExtensions.Locking(System.Object, System.Action)
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking(System.Object,System.Action)
    name: Locking
    nameWithType: LockExtensions.Locking
    fullName: Hybrid.Reflection.LockExtensions.Locking
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking(System.Object,System.Action)
    name: Locking
    nameWithType: LockExtensions.Locking
    fullName: Hybrid.Reflection.LockExtensions.Locking
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Reflection.LockExtensions
  commentId: T:Hybrid.Reflection.LockExtensions
  parent: Hybrid.Reflection
  name: LockExtensions
  nameWithType: LockExtensions
  fullName: Hybrid.Reflection.LockExtensions
- uid: Hybrid.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
  commentId: M:Hybrid.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
  isExternal: true
  name: Locking<T>(T, Action<T>)
  nameWithType: LockExtensions.Locking<T>(T, Action<T>)
  fullName: Hybrid.Reflection.LockExtensions.Locking<T>(T, System.Action<T>)
  nameWithType.vb: LockExtensions.Locking(Of T)(T, Action(Of T))
  fullName.vb: Hybrid.Reflection.LockExtensions.Locking(Of T)(T, System.Action(Of T))
  name.vb: Locking(Of T)(T, Action(Of T))
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
    name: Locking<T>
    nameWithType: LockExtensions.Locking<T>
    fullName: Hybrid.Reflection.LockExtensions.Locking<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
    name: Locking(Of T)
    nameWithType: LockExtensions.Locking(Of T)
    fullName: Hybrid.Reflection.LockExtensions.Locking(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
  commentId: M:Hybrid.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
  isExternal: true
  name: Locking<TResult>(Object, Func<TResult>)
  nameWithType: LockExtensions.Locking<TResult>(Object, Func<TResult>)
  fullName: Hybrid.Reflection.LockExtensions.Locking<TResult>(System.Object, System.Func<TResult>)
  nameWithType.vb: LockExtensions.Locking(Of TResult)(Object, Func(Of TResult))
  fullName.vb: Hybrid.Reflection.LockExtensions.Locking(Of TResult)(System.Object, System.Func(Of TResult))
  name.vb: Locking(Of TResult)(Object, Func(Of TResult))
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
    name: Locking<TResult>
    nameWithType: LockExtensions.Locking<TResult>
    fullName: Hybrid.Reflection.LockExtensions.Locking<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
    name: Locking(Of TResult)
    nameWithType: LockExtensions.Locking(Of TResult)
    fullName: Hybrid.Reflection.LockExtensions.Locking(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
  commentId: M:Hybrid.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
  isExternal: true
  name: Locking<TSource, TResult>(TSource, Func<TSource, TResult>)
  nameWithType: LockExtensions.Locking<TSource, TResult>(TSource, Func<TSource, TResult>)
  fullName: Hybrid.Reflection.LockExtensions.Locking<TSource, TResult>(TSource, System.Func<TSource, TResult>)
  nameWithType.vb: LockExtensions.Locking(Of TSource, TResult)(TSource, Func(Of TSource, TResult))
  fullName.vb: Hybrid.Reflection.LockExtensions.Locking(Of TSource, TResult)(TSource, System.Func(Of TSource, TResult))
  name.vb: Locking(Of TSource, TResult)(TSource, Func(Of TSource, TResult))
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
    name: Locking<TSource, TResult>
    nameWithType: LockExtensions.Locking<TSource, TResult>
    fullName: Hybrid.Reflection.LockExtensions.Locking<TSource, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
    name: Locking(Of TSource, TResult)
    nameWithType: LockExtensions.Locking(Of TSource, TResult)
    fullName: Hybrid.Reflection.LockExtensions.Locking(Of TSource, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2(``0)
  commentId: M:Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2(``0)
  name: CheckICreatedTime<TEntity, TKey>(TEntity)
  nameWithType: EntityExtensions.CheckICreatedTime<TEntity, TKey>(TEntity)
  fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime<TEntity, TKey>(TEntity)
  nameWithType.vb: EntityExtensions.CheckICreatedTime(Of TEntity, TKey)(TEntity)
  fullName.vb: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime(Of TEntity, TKey)(TEntity)
  name.vb: CheckICreatedTime(Of TEntity, TKey)(TEntity)
  spec.csharp:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2(``0)
    name: CheckICreatedTime<TEntity, TKey>
    nameWithType: EntityExtensions.CheckICreatedTime<TEntity, TKey>
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime<TEntity, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2(``0)
    name: CheckICreatedTime(Of TEntity, TKey)
    nameWithType: EntityExtensions.CheckICreatedTime(Of TEntity, TKey)
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime(Of TEntity, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Domain.Entities.EntityExtensions
  commentId: T:Hybrid.Domain.Entities.EntityExtensions
  parent: Hybrid.Domain.Entities
  name: EntityExtensions
  nameWithType: EntityExtensions
  fullName: Hybrid.Domain.Entities.EntityExtensions
- uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
  commentId: M:Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
  isExternal: true
  name: CheckICreationAudited<TEntity, TKey, TUserKey>(TEntity, IPrincipal)
  nameWithType: EntityExtensions.CheckICreationAudited<TEntity, TKey, TUserKey>(TEntity, IPrincipal)
  fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited<TEntity, TKey, TUserKey>(TEntity, System.Security.Principal.IPrincipal)
  nameWithType.vb: EntityExtensions.CheckICreationAudited(Of TEntity, TKey, TUserKey)(TEntity, IPrincipal)
  fullName.vb: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited(Of TEntity, TKey, TUserKey)(TEntity, System.Security.Principal.IPrincipal)
  name.vb: CheckICreationAudited(Of TEntity, TKey, TUserKey)(TEntity, IPrincipal)
  spec.csharp:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
    name: CheckICreationAudited<TEntity, TKey, TUserKey>
    nameWithType: EntityExtensions.CheckICreationAudited<TEntity, TKey, TUserKey>
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited<TEntity, TKey, TUserKey>
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
    name: CheckICreationAudited(Of TEntity, TKey, TUserKey)
    nameWithType: EntityExtensions.CheckICreationAudited(Of TEntity, TKey, TUserKey)
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited(Of TEntity, TKey, TUserKey)
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
  commentId: M:Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
  isExternal: true
  name: CheckIUpdateAudited<TEntity, TKey, TUserKey>(TEntity, IPrincipal)
  nameWithType: EntityExtensions.CheckIUpdateAudited<TEntity, TKey, TUserKey>(TEntity, IPrincipal)
  fullName: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited<TEntity, TKey, TUserKey>(TEntity, System.Security.Principal.IPrincipal)
  nameWithType.vb: EntityExtensions.CheckIUpdateAudited(Of TEntity, TKey, TUserKey)(TEntity, IPrincipal)
  fullName.vb: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited(Of TEntity, TKey, TUserKey)(TEntity, System.Security.Principal.IPrincipal)
  name.vb: CheckIUpdateAudited(Of TEntity, TKey, TUserKey)(TEntity, IPrincipal)
  spec.csharp:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
    name: CheckIUpdateAudited<TEntity, TKey, TUserKey>
    nameWithType: EntityExtensions.CheckIUpdateAudited<TEntity, TKey, TUserKey>
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited<TEntity, TKey, TUserKey>
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
    name: CheckIUpdateAudited(Of TEntity, TKey, TUserKey)
    nameWithType: EntityExtensions.CheckIUpdateAudited(Of TEntity, TKey, TUserKey)
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited(Of TEntity, TKey, TUserKey)
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions
  commentId: N:Hybrid.Extensions
  name: Hybrid.Extensions
  nameWithType: Hybrid.Extensions
  fullName: Hybrid.Extensions
- uid: Hybrid.Json
  commentId: N:Hybrid.Json
  name: Hybrid.Json
  nameWithType: Hybrid.Json
  fullName: Hybrid.Json
- uid: Hybrid.Mapping
  commentId: N:Hybrid.Mapping
  name: Hybrid.Mapping
  nameWithType: Hybrid.Mapping
  fullName: Hybrid.Mapping
- uid: Hybrid.Reflection
  commentId: N:Hybrid.Reflection
  name: Hybrid.Reflection
  nameWithType: Hybrid.Reflection
  fullName: Hybrid.Reflection
- uid: Hybrid.Domain.Entities
  commentId: N:Hybrid.Domain.Entities
  name: Hybrid.Domain.Entities
  nameWithType: Hybrid.Domain.Entities
  fullName: Hybrid.Domain.Entities
- uid: Hybrid.Zero.Authorization.SecurityManagerBase`18.#ctor*
  commentId: Overload:Hybrid.Zero.Authorization.SecurityManagerBase`18.#ctor
  name: SecurityManagerBase
  nameWithType: SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>.SecurityManagerBase
  fullName: Hybrid.Zero.Authorization.SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>.SecurityManagerBase
  nameWithType.vb: SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey).SecurityManagerBase
  fullName.vb: Hybrid.Zero.Authorization.SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey).SecurityManagerBase
- uid: Hybrid.EventBuses.IEventBus
  commentId: T:Hybrid.EventBuses.IEventBus
  parent: Hybrid.EventBuses
  name: IEventBus
  nameWithType: IEventBus
  fullName: Hybrid.EventBuses.IEventBus
- uid: Hybrid.Domain.Repositories.IRepository{{TFunction},System.Guid}
  commentId: T:Hybrid.Domain.Repositories.IRepository{`0,System.Guid}
  parent: Hybrid.Domain.Repositories
  definition: Hybrid.Domain.Repositories.IRepository`2
  name: IRepository<TFunction, Guid>
  nameWithType: IRepository<TFunction, Guid>
  fullName: Hybrid.Domain.Repositories.IRepository<TFunction, System.Guid>
  nameWithType.vb: IRepository(Of TFunction, Guid)
  fullName.vb: Hybrid.Domain.Repositories.IRepository(Of TFunction, System.Guid)
  name.vb: IRepository(Of TFunction, Guid)
  spec.csharp:
  - uid: Hybrid.Domain.Repositories.IRepository`2
    name: IRepository
    nameWithType: IRepository
    fullName: Hybrid.Domain.Repositories.IRepository
  - name: <
    nameWithType: <
    fullName: <
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Hybrid.Domain.Repositories.IRepository`2
    name: IRepository
    nameWithType: IRepository
    fullName: Hybrid.Domain.Repositories.IRepository
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Domain.Repositories.IRepository{{TEntityInfo},System.Guid}
  commentId: T:Hybrid.Domain.Repositories.IRepository{`2,System.Guid}
  parent: Hybrid.Domain.Repositories
  definition: Hybrid.Domain.Repositories.IRepository`2
  name: IRepository<TEntityInfo, Guid>
  nameWithType: IRepository<TEntityInfo, Guid>
  fullName: Hybrid.Domain.Repositories.IRepository<TEntityInfo, System.Guid>
  nameWithType.vb: IRepository(Of TEntityInfo, Guid)
  fullName.vb: Hybrid.Domain.Repositories.IRepository(Of TEntityInfo, System.Guid)
  name.vb: IRepository(Of TEntityInfo, Guid)
  spec.csharp:
  - uid: Hybrid.Domain.Repositories.IRepository`2
    name: IRepository
    nameWithType: IRepository
    fullName: Hybrid.Domain.Repositories.IRepository
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntityInfo
    nameWithType: TEntityInfo
    fullName: TEntityInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Hybrid.Domain.Repositories.IRepository`2
    name: IRepository
    nameWithType: IRepository
    fullName: Hybrid.Domain.Repositories.IRepository
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntityInfo
    nameWithType: TEntityInfo
    fullName: TEntityInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Domain.Repositories.IRepository{{TModule},{TModuleKey}}
  commentId: T:Hybrid.Domain.Repositories.IRepository{`4,`6}
  parent: Hybrid.Domain.Repositories
  definition: Hybrid.Domain.Repositories.IRepository`2
  name: IRepository<TModule, TModuleKey>
  nameWithType: IRepository<TModule, TModuleKey>
  fullName: Hybrid.Domain.Repositories.IRepository<TModule, TModuleKey>
  nameWithType.vb: IRepository(Of TModule, TModuleKey)
  fullName.vb: Hybrid.Domain.Repositories.IRepository(Of TModule, TModuleKey)
  name.vb: IRepository(Of TModule, TModuleKey)
  spec.csharp:
  - uid: Hybrid.Domain.Repositories.IRepository`2
    name: IRepository
    nameWithType: IRepository
    fullName: Hybrid.Domain.Repositories.IRepository
  - name: <
    nameWithType: <
    fullName: <
  - name: TModule
    nameWithType: TModule
    fullName: TModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleKey
    nameWithType: TModuleKey
    fullName: TModuleKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Hybrid.Domain.Repositories.IRepository`2
    name: IRepository
    nameWithType: IRepository
    fullName: Hybrid.Domain.Repositories.IRepository
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModule
    nameWithType: TModule
    fullName: TModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleKey
    nameWithType: TModuleKey
    fullName: TModuleKey
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Domain.Repositories.IRepository{{TModuleFunction},System.Guid}
  commentId: T:Hybrid.Domain.Repositories.IRepository{`7,System.Guid}
  parent: Hybrid.Domain.Repositories
  definition: Hybrid.Domain.Repositories.IRepository`2
  name: IRepository<TModuleFunction, Guid>
  nameWithType: IRepository<TModuleFunction, Guid>
  fullName: Hybrid.Domain.Repositories.IRepository<TModuleFunction, System.Guid>
  nameWithType.vb: IRepository(Of TModuleFunction, Guid)
  fullName.vb: Hybrid.Domain.Repositories.IRepository(Of TModuleFunction, System.Guid)
  name.vb: IRepository(Of TModuleFunction, Guid)
  spec.csharp:
  - uid: Hybrid.Domain.Repositories.IRepository`2
    name: IRepository
    nameWithType: IRepository
    fullName: Hybrid.Domain.Repositories.IRepository
  - name: <
    nameWithType: <
    fullName: <
  - name: TModuleFunction
    nameWithType: TModuleFunction
    fullName: TModuleFunction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Hybrid.Domain.Repositories.IRepository`2
    name: IRepository
    nameWithType: IRepository
    fullName: Hybrid.Domain.Repositories.IRepository
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModuleFunction
    nameWithType: TModuleFunction
    fullName: TModuleFunction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Domain.Repositories.IRepository{{TModuleRole},System.Guid}
  commentId: T:Hybrid.Domain.Repositories.IRepository{`8,System.Guid}
  parent: Hybrid.Domain.Repositories
  definition: Hybrid.Domain.Repositories.IRepository`2
  name: IRepository<TModuleRole, Guid>
  nameWithType: IRepository<TModuleRole, Guid>
  fullName: Hybrid.Domain.Repositories.IRepository<TModuleRole, System.Guid>
  nameWithType.vb: IRepository(Of TModuleRole, Guid)
  fullName.vb: Hybrid.Domain.Repositories.IRepository(Of TModuleRole, System.Guid)
  name.vb: IRepository(Of TModuleRole, Guid)
  spec.csharp:
  - uid: Hybrid.Domain.Repositories.IRepository`2
    name: IRepository
    nameWithType: IRepository
    fullName: Hybrid.Domain.Repositories.IRepository
  - name: <
    nameWithType: <
    fullName: <
  - name: TModuleRole
    nameWithType: TModuleRole
    fullName: TModuleRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Hybrid.Domain.Repositories.IRepository`2
    name: IRepository
    nameWithType: IRepository
    fullName: Hybrid.Domain.Repositories.IRepository
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModuleRole
    nameWithType: TModuleRole
    fullName: TModuleRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Domain.Repositories.IRepository{{TModuleUser},System.Guid}
  commentId: T:Hybrid.Domain.Repositories.IRepository{`9,System.Guid}
  parent: Hybrid.Domain.Repositories
  definition: Hybrid.Domain.Repositories.IRepository`2
  name: IRepository<TModuleUser, Guid>
  nameWithType: IRepository<TModuleUser, Guid>
  fullName: Hybrid.Domain.Repositories.IRepository<TModuleUser, System.Guid>
  nameWithType.vb: IRepository(Of TModuleUser, Guid)
  fullName.vb: Hybrid.Domain.Repositories.IRepository(Of TModuleUser, System.Guid)
  name.vb: IRepository(Of TModuleUser, Guid)
  spec.csharp:
  - uid: Hybrid.Domain.Repositories.IRepository`2
    name: IRepository
    nameWithType: IRepository
    fullName: Hybrid.Domain.Repositories.IRepository
  - name: <
    nameWithType: <
    fullName: <
  - name: TModuleUser
    nameWithType: TModuleUser
    fullName: TModuleUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Hybrid.Domain.Repositories.IRepository`2
    name: IRepository
    nameWithType: IRepository
    fullName: Hybrid.Domain.Repositories.IRepository
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModuleUser
    nameWithType: TModuleUser
    fullName: TModuleUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Domain.Repositories.IRepository{{TEntityRole},System.Guid}
  commentId: T:Hybrid.Domain.Repositories.IRepository{`10,System.Guid}
  parent: Hybrid.Domain.Repositories
  definition: Hybrid.Domain.Repositories.IRepository`2
  name: IRepository<TEntityRole, Guid>
  nameWithType: IRepository<TEntityRole, Guid>
  fullName: Hybrid.Domain.Repositories.IRepository<TEntityRole, System.Guid>
  nameWithType.vb: IRepository(Of TEntityRole, Guid)
  fullName.vb: Hybrid.Domain.Repositories.IRepository(Of TEntityRole, System.Guid)
  name.vb: IRepository(Of TEntityRole, Guid)
  spec.csharp:
  - uid: Hybrid.Domain.Repositories.IRepository`2
    name: IRepository
    nameWithType: IRepository
    fullName: Hybrid.Domain.Repositories.IRepository
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntityRole
    nameWithType: TEntityRole
    fullName: TEntityRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Hybrid.Domain.Repositories.IRepository`2
    name: IRepository
    nameWithType: IRepository
    fullName: Hybrid.Domain.Repositories.IRepository
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntityRole
    nameWithType: TEntityRole
    fullName: TEntityRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Domain.Repositories.IRepository{{TUserRole},{TUserRoleKey}}
  commentId: T:Hybrid.Domain.Repositories.IRepository{`12,`13}
  parent: Hybrid.Domain.Repositories
  definition: Hybrid.Domain.Repositories.IRepository`2
  name: IRepository<TUserRole, TUserRoleKey>
  nameWithType: IRepository<TUserRole, TUserRoleKey>
  fullName: Hybrid.Domain.Repositories.IRepository<TUserRole, TUserRoleKey>
  nameWithType.vb: IRepository(Of TUserRole, TUserRoleKey)
  fullName.vb: Hybrid.Domain.Repositories.IRepository(Of TUserRole, TUserRoleKey)
  name.vb: IRepository(Of TUserRole, TUserRoleKey)
  spec.csharp:
  - uid: Hybrid.Domain.Repositories.IRepository`2
    name: IRepository
    nameWithType: IRepository
    fullName: Hybrid.Domain.Repositories.IRepository
  - name: <
    nameWithType: <
    fullName: <
  - name: TUserRole
    nameWithType: TUserRole
    fullName: TUserRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserRoleKey
    nameWithType: TUserRoleKey
    fullName: TUserRoleKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Hybrid.Domain.Repositories.IRepository`2
    name: IRepository
    nameWithType: IRepository
    fullName: Hybrid.Domain.Repositories.IRepository
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUserRole
    nameWithType: TUserRole
    fullName: TUserRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserRoleKey
    nameWithType: TUserRoleKey
    fullName: TUserRoleKey
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Domain.Repositories.IRepository{{TRole},{TRoleKey}}
  commentId: T:Hybrid.Domain.Repositories.IRepository{`14,`15}
  parent: Hybrid.Domain.Repositories
  definition: Hybrid.Domain.Repositories.IRepository`2
  name: IRepository<TRole, TRoleKey>
  nameWithType: IRepository<TRole, TRoleKey>
  fullName: Hybrid.Domain.Repositories.IRepository<TRole, TRoleKey>
  nameWithType.vb: IRepository(Of TRole, TRoleKey)
  fullName.vb: Hybrid.Domain.Repositories.IRepository(Of TRole, TRoleKey)
  name.vb: IRepository(Of TRole, TRoleKey)
  spec.csharp:
  - uid: Hybrid.Domain.Repositories.IRepository`2
    name: IRepository
    nameWithType: IRepository
    fullName: Hybrid.Domain.Repositories.IRepository
  - name: <
    nameWithType: <
    fullName: <
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Hybrid.Domain.Repositories.IRepository`2
    name: IRepository
    nameWithType: IRepository
    fullName: Hybrid.Domain.Repositories.IRepository
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Domain.Repositories.IRepository{{TUser},{TUserKey}}
  commentId: T:Hybrid.Domain.Repositories.IRepository{`16,`17}
  parent: Hybrid.Domain.Repositories
  definition: Hybrid.Domain.Repositories.IRepository`2
  name: IRepository<TUser, TUserKey>
  nameWithType: IRepository<TUser, TUserKey>
  fullName: Hybrid.Domain.Repositories.IRepository<TUser, TUserKey>
  nameWithType.vb: IRepository(Of TUser, TUserKey)
  fullName.vb: Hybrid.Domain.Repositories.IRepository(Of TUser, TUserKey)
  name.vb: IRepository(Of TUser, TUserKey)
  spec.csharp:
  - uid: Hybrid.Domain.Repositories.IRepository`2
    name: IRepository
    nameWithType: IRepository
    fullName: Hybrid.Domain.Repositories.IRepository
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserKey
    nameWithType: TUserKey
    fullName: TUserKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Hybrid.Domain.Repositories.IRepository`2
    name: IRepository
    nameWithType: IRepository
    fullName: Hybrid.Domain.Repositories.IRepository
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUserKey
    nameWithType: TUserKey
    fullName: TUserKey
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EventBuses
  commentId: N:Hybrid.EventBuses
  name: Hybrid.EventBuses
  nameWithType: Hybrid.EventBuses
  fullName: Hybrid.EventBuses
- uid: Hybrid.Domain.Repositories.IRepository`2
  commentId: T:Hybrid.Domain.Repositories.IRepository`2
  name: IRepository<TEntity, TKey>
  nameWithType: IRepository<TEntity, TKey>
  fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>
  nameWithType.vb: IRepository(Of TEntity, TKey)
  fullName.vb: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey)
  name.vb: IRepository(Of TEntity, TKey)
  spec.csharp:
  - uid: Hybrid.Domain.Repositories.IRepository`2
    name: IRepository
    nameWithType: IRepository
    fullName: Hybrid.Domain.Repositories.IRepository
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Hybrid.Domain.Repositories.IRepository`2
    name: IRepository
    nameWithType: IRepository
    fullName: Hybrid.Domain.Repositories.IRepository
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Domain.Repositories
  commentId: N:Hybrid.Domain.Repositories
  name: Hybrid.Domain.Repositories
  nameWithType: Hybrid.Domain.Repositories
  fullName: Hybrid.Domain.Repositories
- uid: Hybrid.Zero.Authorization.SecurityManagerBase`18.Functions*
  commentId: Overload:Hybrid.Zero.Authorization.SecurityManagerBase`18.Functions
  name: Functions
  nameWithType: SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>.Functions
  fullName: Hybrid.Zero.Authorization.SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>.Functions
  nameWithType.vb: SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey).Functions
  fullName.vb: Hybrid.Zero.Authorization.SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey).Functions
- uid: Hybrid.Zero.Authorization.IFunctionStore{{TFunction},{TFunctionInputDto}}.Functions
  commentId: P:Hybrid.Zero.Authorization.IFunctionStore{`0,`1}.Functions
  parent: Hybrid.Zero.Authorization.IFunctionStore{{TFunction},{TFunctionInputDto}}
  definition: Hybrid.Zero.Authorization.IFunctionStore`2.Functions
  name: Functions
  nameWithType: IFunctionStore<TFunction, TFunctionInputDto>.Functions
  fullName: Hybrid.Zero.Authorization.IFunctionStore<TFunction, TFunctionInputDto>.Functions
  nameWithType.vb: IFunctionStore(Of TFunction, TFunctionInputDto).Functions
  fullName.vb: Hybrid.Zero.Authorization.IFunctionStore(Of TFunction, TFunctionInputDto).Functions
- uid: System.Linq.IQueryable{{TFunction}}
  commentId: T:System.Linq.IQueryable{`0}
  parent: System.Linq
  definition: System.Linq.IQueryable`1
  name: IQueryable<TFunction>
  nameWithType: IQueryable<TFunction>
  fullName: System.Linq.IQueryable<TFunction>
  nameWithType.vb: IQueryable(Of TFunction)
  fullName.vb: System.Linq.IQueryable(Of TFunction)
  name.vb: IQueryable(Of TFunction)
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Authorization.IFunctionStore`2.Functions
  commentId: P:Hybrid.Zero.Authorization.IFunctionStore`2.Functions
  name: Functions
  nameWithType: IFunctionStore<TFunction, TFunctionInputDto>.Functions
  fullName: Hybrid.Zero.Authorization.IFunctionStore<TFunction, TFunctionInputDto>.Functions
  nameWithType.vb: IFunctionStore(Of TFunction, TFunctionInputDto).Functions
  fullName.vb: Hybrid.Zero.Authorization.IFunctionStore(Of TFunction, TFunctionInputDto).Functions
- uid: System.Linq.IQueryable`1
  commentId: T:System.Linq.IQueryable`1
  isExternal: true
  name: IQueryable<T>
  nameWithType: IQueryable<T>
  fullName: System.Linq.IQueryable<T>
  nameWithType.vb: IQueryable(Of T)
  fullName.vb: System.Linq.IQueryable(Of T)
  name.vb: IQueryable(Of T)
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq
  commentId: N:System.Linq
  isExternal: true
  name: System.Linq
  nameWithType: System.Linq
  fullName: System.Linq
- uid: Hybrid.Zero.Authorization.SecurityManagerBase`18.CheckFunctionExists*
  commentId: Overload:Hybrid.Zero.Authorization.SecurityManagerBase`18.CheckFunctionExists
  name: CheckFunctionExists
  nameWithType: SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>.CheckFunctionExists
  fullName: Hybrid.Zero.Authorization.SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>.CheckFunctionExists
  nameWithType.vb: SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey).CheckFunctionExists
  fullName.vb: Hybrid.Zero.Authorization.SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey).CheckFunctionExists
- uid: Hybrid.Zero.Authorization.IFunctionStore{{TFunction},{TFunctionInputDto}}.CheckFunctionExists(System.Linq.Expressions.Expression{System.Func{{TFunction},System.Boolean}},System.Guid)
  commentId: M:Hybrid.Zero.Authorization.IFunctionStore{`0,`1}.CheckFunctionExists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Guid)
  parent: Hybrid.Zero.Authorization.IFunctionStore{{TFunction},{TFunctionInputDto}}
  definition: Hybrid.Zero.Authorization.IFunctionStore`2.CheckFunctionExists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Guid)
  name: CheckFunctionExists(Expression<Func<TFunction, Boolean>>, Guid)
  nameWithType: IFunctionStore<TFunction, TFunctionInputDto>.CheckFunctionExists(Expression<Func<TFunction, Boolean>>, Guid)
  fullName: Hybrid.Zero.Authorization.IFunctionStore<TFunction, TFunctionInputDto>.CheckFunctionExists(System.Linq.Expressions.Expression<System.Func<TFunction, System.Boolean>>, System.Guid)
  nameWithType.vb: IFunctionStore(Of TFunction, TFunctionInputDto).CheckFunctionExists(Expression(Of Func(Of TFunction, Boolean)), Guid)
  fullName.vb: Hybrid.Zero.Authorization.IFunctionStore(Of TFunction, TFunctionInputDto).CheckFunctionExists(System.Linq.Expressions.Expression(Of System.Func(Of TFunction, System.Boolean)), System.Guid)
  name.vb: CheckFunctionExists(Expression(Of Func(Of TFunction, Boolean)), Guid)
  spec.csharp:
  - uid: Hybrid.Zero.Authorization.IFunctionStore`2.CheckFunctionExists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Guid)
    name: CheckFunctionExists
    nameWithType: IFunctionStore<TFunction, TFunctionInputDto>.CheckFunctionExists
    fullName: Hybrid.Zero.Authorization.IFunctionStore<TFunction, TFunctionInputDto>.CheckFunctionExists
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Zero.Authorization.IFunctionStore`2.CheckFunctionExists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Guid)
    name: CheckFunctionExists
    nameWithType: IFunctionStore(Of TFunction, TFunctionInputDto).CheckFunctionExists
    fullName: Hybrid.Zero.Authorization.IFunctionStore(Of TFunction, TFunctionInputDto).CheckFunctionExists
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{TFunction},System.Boolean}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TFunction, Boolean>>
  nameWithType: Expression<Func<TFunction, Boolean>>
  fullName: System.Linq.Expressions.Expression<System.Func<TFunction, System.Boolean>>
  nameWithType.vb: Expression(Of Func(Of TFunction, Boolean))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TFunction, System.Boolean))
  name.vb: Expression(Of Func(Of TFunction, Boolean))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Guid
  commentId: T:System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Threading.Tasks.Task{System.Boolean}
  commentId: T:System.Threading.Tasks.Task{System.Boolean}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Boolean>
  nameWithType: Task<Boolean>
  fullName: System.Threading.Tasks.Task<System.Boolean>
  nameWithType.vb: Task(Of Boolean)
  fullName.vb: System.Threading.Tasks.Task(Of System.Boolean)
  name.vb: Task(Of Boolean)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Authorization.IFunctionStore`2.CheckFunctionExists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Guid)
  commentId: M:Hybrid.Zero.Authorization.IFunctionStore`2.CheckFunctionExists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Guid)
  isExternal: true
  name: CheckFunctionExists(Expression<Func<TFunction, Boolean>>, Guid)
  nameWithType: IFunctionStore<TFunction, TFunctionInputDto>.CheckFunctionExists(Expression<Func<TFunction, Boolean>>, Guid)
  fullName: Hybrid.Zero.Authorization.IFunctionStore<TFunction, TFunctionInputDto>.CheckFunctionExists(System.Linq.Expressions.Expression<System.Func<TFunction, System.Boolean>>, System.Guid)
  nameWithType.vb: IFunctionStore(Of TFunction, TFunctionInputDto).CheckFunctionExists(Expression(Of Func(Of TFunction, Boolean)), Guid)
  fullName.vb: Hybrid.Zero.Authorization.IFunctionStore(Of TFunction, TFunctionInputDto).CheckFunctionExists(System.Linq.Expressions.Expression(Of System.Func(Of TFunction, System.Boolean)), System.Guid)
  name.vb: CheckFunctionExists(Expression(Of Func(Of TFunction, Boolean)), Guid)
  spec.csharp:
  - uid: Hybrid.Zero.Authorization.IFunctionStore`2.CheckFunctionExists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Guid)
    name: CheckFunctionExists
    nameWithType: IFunctionStore<TFunction, TFunctionInputDto>.CheckFunctionExists
    fullName: Hybrid.Zero.Authorization.IFunctionStore<TFunction, TFunctionInputDto>.CheckFunctionExists
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Zero.Authorization.IFunctionStore`2.CheckFunctionExists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Guid)
    name: CheckFunctionExists
    nameWithType: IFunctionStore(Of TFunction, TFunctionInputDto).CheckFunctionExists
    fullName: Hybrid.Zero.Authorization.IFunctionStore(Of TFunction, TFunctionInputDto).CheckFunctionExists
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression`1
  commentId: T:System.Linq.Expressions.Expression`1
  isExternal: true
  name: Expression<TDelegate>
  nameWithType: Expression<TDelegate>
  fullName: System.Linq.Expressions.Expression<TDelegate>
  nameWithType.vb: Expression(Of TDelegate)
  fullName.vb: System.Linq.Expressions.Expression(Of TDelegate)
  name.vb: Expression(Of TDelegate)
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TDelegate
    nameWithType: TDelegate
    fullName: TDelegate
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TDelegate
    nameWithType: TDelegate
    fullName: TDelegate
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions
  commentId: N:System.Linq.Expressions
  isExternal: true
  name: System.Linq.Expressions
  nameWithType: System.Linq.Expressions
  fullName: System.Linq.Expressions
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Hybrid.Zero.Authorization.SecurityManagerBase`18.UpdateFunctions*
  commentId: Overload:Hybrid.Zero.Authorization.SecurityManagerBase`18.UpdateFunctions
  name: UpdateFunctions
  nameWithType: SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>.UpdateFunctions
  fullName: Hybrid.Zero.Authorization.SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>.UpdateFunctions
  nameWithType.vb: SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey).UpdateFunctions
  fullName.vb: Hybrid.Zero.Authorization.SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey).UpdateFunctions
- uid: Hybrid.Zero.Authorization.IFunctionStore{{TFunction},{TFunctionInputDto}}.UpdateFunctions({TFunctionInputDto}[])
  commentId: M:Hybrid.Zero.Authorization.IFunctionStore{`0,`1}.UpdateFunctions(`1[])
  parent: Hybrid.Zero.Authorization.IFunctionStore{{TFunction},{TFunctionInputDto}}
  definition: Hybrid.Zero.Authorization.IFunctionStore`2.UpdateFunctions(`1[])
  name: UpdateFunctions(TFunctionInputDto[])
  nameWithType: IFunctionStore<TFunction, TFunctionInputDto>.UpdateFunctions(TFunctionInputDto[])
  fullName: Hybrid.Zero.Authorization.IFunctionStore<TFunction, TFunctionInputDto>.UpdateFunctions(TFunctionInputDto[])
  nameWithType.vb: IFunctionStore(Of TFunction, TFunctionInputDto).UpdateFunctions(TFunctionInputDto())
  fullName.vb: Hybrid.Zero.Authorization.IFunctionStore(Of TFunction, TFunctionInputDto).UpdateFunctions(TFunctionInputDto())
  name.vb: UpdateFunctions(TFunctionInputDto())
  spec.csharp:
  - uid: Hybrid.Zero.Authorization.IFunctionStore`2.UpdateFunctions(`1[])
    name: UpdateFunctions
    nameWithType: IFunctionStore<TFunction, TFunctionInputDto>.UpdateFunctions
    fullName: Hybrid.Zero.Authorization.IFunctionStore<TFunction, TFunctionInputDto>.UpdateFunctions
  - name: (
    nameWithType: (
    fullName: (
  - name: TFunctionInputDto
    nameWithType: TFunctionInputDto
    fullName: TFunctionInputDto
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Zero.Authorization.IFunctionStore`2.UpdateFunctions(`1[])
    name: UpdateFunctions
    nameWithType: IFunctionStore(Of TFunction, TFunctionInputDto).UpdateFunctions
    fullName: Hybrid.Zero.Authorization.IFunctionStore(Of TFunction, TFunctionInputDto).UpdateFunctions
  - name: (
    nameWithType: (
    fullName: (
  - name: TFunctionInputDto
    nameWithType: TFunctionInputDto
    fullName: TFunctionInputDto
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TFunctionInputDto}[]'
  isExternal: true
  name: TFunctionInputDto[]
  nameWithType: TFunctionInputDto[]
  fullName: TFunctionInputDto[]
  nameWithType.vb: TFunctionInputDto()
  fullName.vb: TFunctionInputDto()
  name.vb: TFunctionInputDto()
  spec.csharp:
  - name: TFunctionInputDto
    nameWithType: TFunctionInputDto
    fullName: TFunctionInputDto
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - name: TFunctionInputDto
    nameWithType: TFunctionInputDto
    fullName: TFunctionInputDto
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Threading.Tasks.Task{Hybrid.Data.OperationResult}
  commentId: T:System.Threading.Tasks.Task{Hybrid.Data.OperationResult}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<OperationResult>
  nameWithType: Task<OperationResult>
  fullName: System.Threading.Tasks.Task<Hybrid.Data.OperationResult>
  nameWithType.vb: Task(Of OperationResult)
  fullName.vb: System.Threading.Tasks.Task(Of Hybrid.Data.OperationResult)
  name.vb: Task(Of OperationResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Data.OperationResult
    name: OperationResult
    nameWithType: OperationResult
    fullName: Hybrid.Data.OperationResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Data.OperationResult
    name: OperationResult
    nameWithType: OperationResult
    fullName: Hybrid.Data.OperationResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Authorization.IFunctionStore`2.UpdateFunctions(`1[])
  commentId: M:Hybrid.Zero.Authorization.IFunctionStore`2.UpdateFunctions(`1[])
  name: UpdateFunctions(TFunctionInputDto[])
  nameWithType: IFunctionStore<TFunction, TFunctionInputDto>.UpdateFunctions(TFunctionInputDto[])
  fullName: Hybrid.Zero.Authorization.IFunctionStore<TFunction, TFunctionInputDto>.UpdateFunctions(TFunctionInputDto[])
  nameWithType.vb: IFunctionStore(Of TFunction, TFunctionInputDto).UpdateFunctions(TFunctionInputDto())
  fullName.vb: Hybrid.Zero.Authorization.IFunctionStore(Of TFunction, TFunctionInputDto).UpdateFunctions(TFunctionInputDto())
  name.vb: UpdateFunctions(TFunctionInputDto())
  spec.csharp:
  - uid: Hybrid.Zero.Authorization.IFunctionStore`2.UpdateFunctions(`1[])
    name: UpdateFunctions
    nameWithType: IFunctionStore<TFunction, TFunctionInputDto>.UpdateFunctions
    fullName: Hybrid.Zero.Authorization.IFunctionStore<TFunction, TFunctionInputDto>.UpdateFunctions
  - name: (
    nameWithType: (
    fullName: (
  - name: TFunctionInputDto
    nameWithType: TFunctionInputDto
    fullName: TFunctionInputDto
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Zero.Authorization.IFunctionStore`2.UpdateFunctions(`1[])
    name: UpdateFunctions
    nameWithType: IFunctionStore(Of TFunction, TFunctionInputDto).UpdateFunctions
    fullName: Hybrid.Zero.Authorization.IFunctionStore(Of TFunction, TFunctionInputDto).UpdateFunctions
  - name: (
    nameWithType: (
    fullName: (
  - name: TFunctionInputDto
    nameWithType: TFunctionInputDto
    fullName: TFunctionInputDto
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Authorization.SecurityManagerBase`18.EntityInfos*
  commentId: Overload:Hybrid.Zero.Authorization.SecurityManagerBase`18.EntityInfos
  name: EntityInfos
  nameWithType: SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>.EntityInfos
  fullName: Hybrid.Zero.Authorization.SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>.EntityInfos
  nameWithType.vb: SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey).EntityInfos
  fullName.vb: Hybrid.Zero.Authorization.SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey).EntityInfos
- uid: Hybrid.Zero.Authorization.IEntityInfoStore{{TEntityInfo},{TEntityInfoInputDto}}.EntityInfos
  commentId: P:Hybrid.Zero.Authorization.IEntityInfoStore{`2,`3}.EntityInfos
  parent: Hybrid.Zero.Authorization.IEntityInfoStore{{TEntityInfo},{TEntityInfoInputDto}}
  definition: Hybrid.Zero.Authorization.IEntityInfoStore`2.EntityInfos
  name: EntityInfos
  nameWithType: IEntityInfoStore<TEntityInfo, TEntityInfoInputDto>.EntityInfos
  fullName: Hybrid.Zero.Authorization.IEntityInfoStore<TEntityInfo, TEntityInfoInputDto>.EntityInfos
  nameWithType.vb: IEntityInfoStore(Of TEntityInfo, TEntityInfoInputDto).EntityInfos
  fullName.vb: Hybrid.Zero.Authorization.IEntityInfoStore(Of TEntityInfo, TEntityInfoInputDto).EntityInfos
- uid: System.Linq.IQueryable{{TEntityInfo}}
  commentId: T:System.Linq.IQueryable{`0}
  parent: System.Linq
  definition: System.Linq.IQueryable`1
  name: IQueryable<TEntityInfo>
  nameWithType: IQueryable<TEntityInfo>
  fullName: System.Linq.IQueryable<TEntityInfo>
  nameWithType.vb: IQueryable(Of TEntityInfo)
  fullName.vb: System.Linq.IQueryable(Of TEntityInfo)
  name.vb: IQueryable(Of TEntityInfo)
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntityInfo
    nameWithType: TEntityInfo
    fullName: TEntityInfo
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntityInfo
    nameWithType: TEntityInfo
    fullName: TEntityInfo
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Authorization.IEntityInfoStore`2.EntityInfos
  commentId: P:Hybrid.Zero.Authorization.IEntityInfoStore`2.EntityInfos
  name: EntityInfos
  nameWithType: IEntityInfoStore<TEntityInfo, TEntityInfoInputDto>.EntityInfos
  fullName: Hybrid.Zero.Authorization.IEntityInfoStore<TEntityInfo, TEntityInfoInputDto>.EntityInfos
  nameWithType.vb: IEntityInfoStore(Of TEntityInfo, TEntityInfoInputDto).EntityInfos
  fullName.vb: Hybrid.Zero.Authorization.IEntityInfoStore(Of TEntityInfo, TEntityInfoInputDto).EntityInfos
- uid: Hybrid.Zero.Authorization.SecurityManagerBase`18.CheckEntityInfoExists*
  commentId: Overload:Hybrid.Zero.Authorization.SecurityManagerBase`18.CheckEntityInfoExists
  name: CheckEntityInfoExists
  nameWithType: SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>.CheckEntityInfoExists
  fullName: Hybrid.Zero.Authorization.SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>.CheckEntityInfoExists
  nameWithType.vb: SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey).CheckEntityInfoExists
  fullName.vb: Hybrid.Zero.Authorization.SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey).CheckEntityInfoExists
- uid: Hybrid.Zero.Authorization.IEntityInfoStore{{TEntityInfo},{TEntityInfoInputDto}}.CheckEntityInfoExists(System.Linq.Expressions.Expression{System.Func{{TEntityInfo},System.Boolean}},System.Guid)
  commentId: M:Hybrid.Zero.Authorization.IEntityInfoStore{`2,`3}.CheckEntityInfoExists(System.Linq.Expressions.Expression{System.Func{`2,System.Boolean}},System.Guid)
  parent: Hybrid.Zero.Authorization.IEntityInfoStore{{TEntityInfo},{TEntityInfoInputDto}}
  definition: Hybrid.Zero.Authorization.IEntityInfoStore`2.CheckEntityInfoExists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Guid)
  name: CheckEntityInfoExists(Expression<Func<TEntityInfo, Boolean>>, Guid)
  nameWithType: IEntityInfoStore<TEntityInfo, TEntityInfoInputDto>.CheckEntityInfoExists(Expression<Func<TEntityInfo, Boolean>>, Guid)
  fullName: Hybrid.Zero.Authorization.IEntityInfoStore<TEntityInfo, TEntityInfoInputDto>.CheckEntityInfoExists(System.Linq.Expressions.Expression<System.Func<TEntityInfo, System.Boolean>>, System.Guid)
  nameWithType.vb: IEntityInfoStore(Of TEntityInfo, TEntityInfoInputDto).CheckEntityInfoExists(Expression(Of Func(Of TEntityInfo, Boolean)), Guid)
  fullName.vb: Hybrid.Zero.Authorization.IEntityInfoStore(Of TEntityInfo, TEntityInfoInputDto).CheckEntityInfoExists(System.Linq.Expressions.Expression(Of System.Func(Of TEntityInfo, System.Boolean)), System.Guid)
  name.vb: CheckEntityInfoExists(Expression(Of Func(Of TEntityInfo, Boolean)), Guid)
  spec.csharp:
  - uid: Hybrid.Zero.Authorization.IEntityInfoStore`2.CheckEntityInfoExists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Guid)
    name: CheckEntityInfoExists
    nameWithType: IEntityInfoStore<TEntityInfo, TEntityInfoInputDto>.CheckEntityInfoExists
    fullName: Hybrid.Zero.Authorization.IEntityInfoStore<TEntityInfo, TEntityInfoInputDto>.CheckEntityInfoExists
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntityInfo
    nameWithType: TEntityInfo
    fullName: TEntityInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Zero.Authorization.IEntityInfoStore`2.CheckEntityInfoExists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Guid)
    name: CheckEntityInfoExists
    nameWithType: IEntityInfoStore(Of TEntityInfo, TEntityInfoInputDto).CheckEntityInfoExists
    fullName: Hybrid.Zero.Authorization.IEntityInfoStore(Of TEntityInfo, TEntityInfoInputDto).CheckEntityInfoExists
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntityInfo
    nameWithType: TEntityInfo
    fullName: TEntityInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{TEntityInfo},System.Boolean}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TEntityInfo, Boolean>>
  nameWithType: Expression<Func<TEntityInfo, Boolean>>
  fullName: System.Linq.Expressions.Expression<System.Func<TEntityInfo, System.Boolean>>
  nameWithType.vb: Expression(Of Func(Of TEntityInfo, Boolean))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TEntityInfo, System.Boolean))
  name.vb: Expression(Of Func(Of TEntityInfo, Boolean))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntityInfo
    nameWithType: TEntityInfo
    fullName: TEntityInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntityInfo
    nameWithType: TEntityInfo
    fullName: TEntityInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Authorization.IEntityInfoStore`2.CheckEntityInfoExists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Guid)
  commentId: M:Hybrid.Zero.Authorization.IEntityInfoStore`2.CheckEntityInfoExists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Guid)
  isExternal: true
  name: CheckEntityInfoExists(Expression<Func<TEntityInfo, Boolean>>, Guid)
  nameWithType: IEntityInfoStore<TEntityInfo, TEntityInfoInputDto>.CheckEntityInfoExists(Expression<Func<TEntityInfo, Boolean>>, Guid)
  fullName: Hybrid.Zero.Authorization.IEntityInfoStore<TEntityInfo, TEntityInfoInputDto>.CheckEntityInfoExists(System.Linq.Expressions.Expression<System.Func<TEntityInfo, System.Boolean>>, System.Guid)
  nameWithType.vb: IEntityInfoStore(Of TEntityInfo, TEntityInfoInputDto).CheckEntityInfoExists(Expression(Of Func(Of TEntityInfo, Boolean)), Guid)
  fullName.vb: Hybrid.Zero.Authorization.IEntityInfoStore(Of TEntityInfo, TEntityInfoInputDto).CheckEntityInfoExists(System.Linq.Expressions.Expression(Of System.Func(Of TEntityInfo, System.Boolean)), System.Guid)
  name.vb: CheckEntityInfoExists(Expression(Of Func(Of TEntityInfo, Boolean)), Guid)
  spec.csharp:
  - uid: Hybrid.Zero.Authorization.IEntityInfoStore`2.CheckEntityInfoExists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Guid)
    name: CheckEntityInfoExists
    nameWithType: IEntityInfoStore<TEntityInfo, TEntityInfoInputDto>.CheckEntityInfoExists
    fullName: Hybrid.Zero.Authorization.IEntityInfoStore<TEntityInfo, TEntityInfoInputDto>.CheckEntityInfoExists
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntityInfo
    nameWithType: TEntityInfo
    fullName: TEntityInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Zero.Authorization.IEntityInfoStore`2.CheckEntityInfoExists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Guid)
    name: CheckEntityInfoExists
    nameWithType: IEntityInfoStore(Of TEntityInfo, TEntityInfoInputDto).CheckEntityInfoExists
    fullName: Hybrid.Zero.Authorization.IEntityInfoStore(Of TEntityInfo, TEntityInfoInputDto).CheckEntityInfoExists
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntityInfo
    nameWithType: TEntityInfo
    fullName: TEntityInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Authorization.SecurityManagerBase`18.UpdateEntityInfos*
  commentId: Overload:Hybrid.Zero.Authorization.SecurityManagerBase`18.UpdateEntityInfos
  name: UpdateEntityInfos
  nameWithType: SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>.UpdateEntityInfos
  fullName: Hybrid.Zero.Authorization.SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>.UpdateEntityInfos
  nameWithType.vb: SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey).UpdateEntityInfos
  fullName.vb: Hybrid.Zero.Authorization.SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey).UpdateEntityInfos
- uid: Hybrid.Zero.Authorization.IEntityInfoStore{{TEntityInfo},{TEntityInfoInputDto}}.UpdateEntityInfos({TEntityInfoInputDto}[])
  commentId: M:Hybrid.Zero.Authorization.IEntityInfoStore{`2,`3}.UpdateEntityInfos(`3[])
  parent: Hybrid.Zero.Authorization.IEntityInfoStore{{TEntityInfo},{TEntityInfoInputDto}}
  definition: Hybrid.Zero.Authorization.IEntityInfoStore`2.UpdateEntityInfos(`1[])
  name: UpdateEntityInfos(TEntityInfoInputDto[])
  nameWithType: IEntityInfoStore<TEntityInfo, TEntityInfoInputDto>.UpdateEntityInfos(TEntityInfoInputDto[])
  fullName: Hybrid.Zero.Authorization.IEntityInfoStore<TEntityInfo, TEntityInfoInputDto>.UpdateEntityInfos(TEntityInfoInputDto[])
  nameWithType.vb: IEntityInfoStore(Of TEntityInfo, TEntityInfoInputDto).UpdateEntityInfos(TEntityInfoInputDto())
  fullName.vb: Hybrid.Zero.Authorization.IEntityInfoStore(Of TEntityInfo, TEntityInfoInputDto).UpdateEntityInfos(TEntityInfoInputDto())
  name.vb: UpdateEntityInfos(TEntityInfoInputDto())
  spec.csharp:
  - uid: Hybrid.Zero.Authorization.IEntityInfoStore`2.UpdateEntityInfos(`1[])
    name: UpdateEntityInfos
    nameWithType: IEntityInfoStore<TEntityInfo, TEntityInfoInputDto>.UpdateEntityInfos
    fullName: Hybrid.Zero.Authorization.IEntityInfoStore<TEntityInfo, TEntityInfoInputDto>.UpdateEntityInfos
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntityInfoInputDto
    nameWithType: TEntityInfoInputDto
    fullName: TEntityInfoInputDto
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Zero.Authorization.IEntityInfoStore`2.UpdateEntityInfos(`1[])
    name: UpdateEntityInfos
    nameWithType: IEntityInfoStore(Of TEntityInfo, TEntityInfoInputDto).UpdateEntityInfos
    fullName: Hybrid.Zero.Authorization.IEntityInfoStore(Of TEntityInfo, TEntityInfoInputDto).UpdateEntityInfos
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntityInfoInputDto
    nameWithType: TEntityInfoInputDto
    fullName: TEntityInfoInputDto
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TEntityInfoInputDto}[]'
  isExternal: true
  name: TEntityInfoInputDto[]
  nameWithType: TEntityInfoInputDto[]
  fullName: TEntityInfoInputDto[]
  nameWithType.vb: TEntityInfoInputDto()
  fullName.vb: TEntityInfoInputDto()
  name.vb: TEntityInfoInputDto()
  spec.csharp:
  - name: TEntityInfoInputDto
    nameWithType: TEntityInfoInputDto
    fullName: TEntityInfoInputDto
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - name: TEntityInfoInputDto
    nameWithType: TEntityInfoInputDto
    fullName: TEntityInfoInputDto
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Hybrid.Zero.Authorization.IEntityInfoStore`2.UpdateEntityInfos(`1[])
  commentId: M:Hybrid.Zero.Authorization.IEntityInfoStore`2.UpdateEntityInfos(`1[])
  name: UpdateEntityInfos(TEntityInfoInputDto[])
  nameWithType: IEntityInfoStore<TEntityInfo, TEntityInfoInputDto>.UpdateEntityInfos(TEntityInfoInputDto[])
  fullName: Hybrid.Zero.Authorization.IEntityInfoStore<TEntityInfo, TEntityInfoInputDto>.UpdateEntityInfos(TEntityInfoInputDto[])
  nameWithType.vb: IEntityInfoStore(Of TEntityInfo, TEntityInfoInputDto).UpdateEntityInfos(TEntityInfoInputDto())
  fullName.vb: Hybrid.Zero.Authorization.IEntityInfoStore(Of TEntityInfo, TEntityInfoInputDto).UpdateEntityInfos(TEntityInfoInputDto())
  name.vb: UpdateEntityInfos(TEntityInfoInputDto())
  spec.csharp:
  - uid: Hybrid.Zero.Authorization.IEntityInfoStore`2.UpdateEntityInfos(`1[])
    name: UpdateEntityInfos
    nameWithType: IEntityInfoStore<TEntityInfo, TEntityInfoInputDto>.UpdateEntityInfos
    fullName: Hybrid.Zero.Authorization.IEntityInfoStore<TEntityInfo, TEntityInfoInputDto>.UpdateEntityInfos
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntityInfoInputDto
    nameWithType: TEntityInfoInputDto
    fullName: TEntityInfoInputDto
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Zero.Authorization.IEntityInfoStore`2.UpdateEntityInfos(`1[])
    name: UpdateEntityInfos
    nameWithType: IEntityInfoStore(Of TEntityInfo, TEntityInfoInputDto).UpdateEntityInfos
    fullName: Hybrid.Zero.Authorization.IEntityInfoStore(Of TEntityInfo, TEntityInfoInputDto).UpdateEntityInfos
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntityInfoInputDto
    nameWithType: TEntityInfoInputDto
    fullName: TEntityInfoInputDto
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Authorization.SecurityManagerBase`18.Modules*
  commentId: Overload:Hybrid.Zero.Authorization.SecurityManagerBase`18.Modules
  name: Modules
  nameWithType: SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>.Modules
  fullName: Hybrid.Zero.Authorization.SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>.Modules
  nameWithType.vb: SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey).Modules
  fullName.vb: Hybrid.Zero.Authorization.SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey).Modules
- uid: Hybrid.Zero.Authorization.IModuleStore{{TModule},{TModuleInputDto},{TModuleKey}}.Modules
  commentId: P:Hybrid.Zero.Authorization.IModuleStore{`4,`5,`6}.Modules
  parent: Hybrid.Zero.Authorization.IModuleStore{{TModule},{TModuleInputDto},{TModuleKey}}
  definition: Hybrid.Zero.Authorization.IModuleStore`3.Modules
  name: Modules
  nameWithType: IModuleStore<TModule, TModuleInputDto, TModuleKey>.Modules
  fullName: Hybrid.Zero.Authorization.IModuleStore<TModule, TModuleInputDto, TModuleKey>.Modules
  nameWithType.vb: IModuleStore(Of TModule, TModuleInputDto, TModuleKey).Modules
  fullName.vb: Hybrid.Zero.Authorization.IModuleStore(Of TModule, TModuleInputDto, TModuleKey).Modules
- uid: System.Linq.IQueryable{{TModule}}
  commentId: T:System.Linq.IQueryable{`0}
  parent: System.Linq
  definition: System.Linq.IQueryable`1
  name: IQueryable<TModule>
  nameWithType: IQueryable<TModule>
  fullName: System.Linq.IQueryable<TModule>
  nameWithType.vb: IQueryable(Of TModule)
  fullName.vb: System.Linq.IQueryable(Of TModule)
  name.vb: IQueryable(Of TModule)
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModule
    nameWithType: TModule
    fullName: TModule
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModule
    nameWithType: TModule
    fullName: TModule
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Authorization.IModuleStore`3.Modules
  commentId: P:Hybrid.Zero.Authorization.IModuleStore`3.Modules
  name: Modules
  nameWithType: IModuleStore<TModule, TModuleInputDto, TModuleKey>.Modules
  fullName: Hybrid.Zero.Authorization.IModuleStore<TModule, TModuleInputDto, TModuleKey>.Modules
  nameWithType.vb: IModuleStore(Of TModule, TModuleInputDto, TModuleKey).Modules
  fullName.vb: Hybrid.Zero.Authorization.IModuleStore(Of TModule, TModuleInputDto, TModuleKey).Modules
- uid: Hybrid.Zero.Authorization.SecurityManagerBase`18.CheckModuleExists*
  commentId: Overload:Hybrid.Zero.Authorization.SecurityManagerBase`18.CheckModuleExists
  name: CheckModuleExists
  nameWithType: SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>.CheckModuleExists
  fullName: Hybrid.Zero.Authorization.SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>.CheckModuleExists
  nameWithType.vb: SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey).CheckModuleExists
  fullName.vb: Hybrid.Zero.Authorization.SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey).CheckModuleExists
- uid: Hybrid.Zero.Authorization.IModuleStore{{TModule},{TModuleInputDto},{TModuleKey}}.CheckModuleExists(System.Linq.Expressions.Expression{System.Func{{TModule},System.Boolean}},{TModuleKey})
  commentId: M:Hybrid.Zero.Authorization.IModuleStore{`4,`5,`6}.CheckModuleExists(System.Linq.Expressions.Expression{System.Func{`4,System.Boolean}},`6)
  parent: Hybrid.Zero.Authorization.IModuleStore{{TModule},{TModuleInputDto},{TModuleKey}}
  definition: Hybrid.Zero.Authorization.IModuleStore`3.CheckModuleExists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},`2)
  name: CheckModuleExists(Expression<Func<TModule, Boolean>>, TModuleKey)
  nameWithType: IModuleStore<TModule, TModuleInputDto, TModuleKey>.CheckModuleExists(Expression<Func<TModule, Boolean>>, TModuleKey)
  fullName: Hybrid.Zero.Authorization.IModuleStore<TModule, TModuleInputDto, TModuleKey>.CheckModuleExists(System.Linq.Expressions.Expression<System.Func<TModule, System.Boolean>>, TModuleKey)
  nameWithType.vb: IModuleStore(Of TModule, TModuleInputDto, TModuleKey).CheckModuleExists(Expression(Of Func(Of TModule, Boolean)), TModuleKey)
  fullName.vb: Hybrid.Zero.Authorization.IModuleStore(Of TModule, TModuleInputDto, TModuleKey).CheckModuleExists(System.Linq.Expressions.Expression(Of System.Func(Of TModule, System.Boolean)), TModuleKey)
  name.vb: CheckModuleExists(Expression(Of Func(Of TModule, Boolean)), TModuleKey)
  spec.csharp:
  - uid: Hybrid.Zero.Authorization.IModuleStore`3.CheckModuleExists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},`2)
    name: CheckModuleExists
    nameWithType: IModuleStore<TModule, TModuleInputDto, TModuleKey>.CheckModuleExists
    fullName: Hybrid.Zero.Authorization.IModuleStore<TModule, TModuleInputDto, TModuleKey>.CheckModuleExists
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModule
    nameWithType: TModule
    fullName: TModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleKey
    nameWithType: TModuleKey
    fullName: TModuleKey
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Zero.Authorization.IModuleStore`3.CheckModuleExists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},`2)
    name: CheckModuleExists
    nameWithType: IModuleStore(Of TModule, TModuleInputDto, TModuleKey).CheckModuleExists
    fullName: Hybrid.Zero.Authorization.IModuleStore(Of TModule, TModuleInputDto, TModuleKey).CheckModuleExists
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModule
    nameWithType: TModule
    fullName: TModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleKey
    nameWithType: TModuleKey
    fullName: TModuleKey
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{TModule},System.Boolean}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TModule, Boolean>>
  nameWithType: Expression<Func<TModule, Boolean>>
  fullName: System.Linq.Expressions.Expression<System.Func<TModule, System.Boolean>>
  nameWithType.vb: Expression(Of Func(Of TModule, Boolean))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TModule, System.Boolean))
  name.vb: Expression(Of Func(Of TModule, Boolean))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModule
    nameWithType: TModule
    fullName: TModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModule
    nameWithType: TModule
    fullName: TModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TModuleKey}'
  commentId: '!:TModuleKey'
  definition: TModuleKey
  name: TModuleKey
  nameWithType: TModuleKey
  fullName: TModuleKey
- uid: Hybrid.Zero.Authorization.IModuleStore`3.CheckModuleExists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},`2)
  commentId: M:Hybrid.Zero.Authorization.IModuleStore`3.CheckModuleExists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},`2)
  isExternal: true
  name: CheckModuleExists(Expression<Func<TModule, Boolean>>, TModuleKey)
  nameWithType: IModuleStore<TModule, TModuleInputDto, TModuleKey>.CheckModuleExists(Expression<Func<TModule, Boolean>>, TModuleKey)
  fullName: Hybrid.Zero.Authorization.IModuleStore<TModule, TModuleInputDto, TModuleKey>.CheckModuleExists(System.Linq.Expressions.Expression<System.Func<TModule, System.Boolean>>, TModuleKey)
  nameWithType.vb: IModuleStore(Of TModule, TModuleInputDto, TModuleKey).CheckModuleExists(Expression(Of Func(Of TModule, Boolean)), TModuleKey)
  fullName.vb: Hybrid.Zero.Authorization.IModuleStore(Of TModule, TModuleInputDto, TModuleKey).CheckModuleExists(System.Linq.Expressions.Expression(Of System.Func(Of TModule, System.Boolean)), TModuleKey)
  name.vb: CheckModuleExists(Expression(Of Func(Of TModule, Boolean)), TModuleKey)
  spec.csharp:
  - uid: Hybrid.Zero.Authorization.IModuleStore`3.CheckModuleExists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},`2)
    name: CheckModuleExists
    nameWithType: IModuleStore<TModule, TModuleInputDto, TModuleKey>.CheckModuleExists
    fullName: Hybrid.Zero.Authorization.IModuleStore<TModule, TModuleInputDto, TModuleKey>.CheckModuleExists
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModule
    nameWithType: TModule
    fullName: TModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleKey
    nameWithType: TModuleKey
    fullName: TModuleKey
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Zero.Authorization.IModuleStore`3.CheckModuleExists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},`2)
    name: CheckModuleExists
    nameWithType: IModuleStore(Of TModule, TModuleInputDto, TModuleKey).CheckModuleExists
    fullName: Hybrid.Zero.Authorization.IModuleStore(Of TModule, TModuleInputDto, TModuleKey).CheckModuleExists
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModule
    nameWithType: TModule
    fullName: TModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleKey
    nameWithType: TModuleKey
    fullName: TModuleKey
  - name: )
    nameWithType: )
    fullName: )
- uid: TModuleKey
  name: TModuleKey
  nameWithType: TModuleKey
  fullName: TModuleKey
- uid: Hybrid.Zero.Authorization.SecurityManagerBase`18.CreateModule*
  commentId: Overload:Hybrid.Zero.Authorization.SecurityManagerBase`18.CreateModule
  name: CreateModule
  nameWithType: SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>.CreateModule
  fullName: Hybrid.Zero.Authorization.SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>.CreateModule
  nameWithType.vb: SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey).CreateModule
  fullName.vb: Hybrid.Zero.Authorization.SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey).CreateModule
- uid: Hybrid.Zero.Authorization.IModuleStore{{TModule},{TModuleInputDto},{TModuleKey}}.CreateModule({TModuleInputDto})
  commentId: M:Hybrid.Zero.Authorization.IModuleStore{`4,`5,`6}.CreateModule(`5)
  parent: Hybrid.Zero.Authorization.IModuleStore{{TModule},{TModuleInputDto},{TModuleKey}}
  definition: Hybrid.Zero.Authorization.IModuleStore`3.CreateModule(`1)
  name: CreateModule(TModuleInputDto)
  nameWithType: IModuleStore<TModule, TModuleInputDto, TModuleKey>.CreateModule(TModuleInputDto)
  fullName: Hybrid.Zero.Authorization.IModuleStore<TModule, TModuleInputDto, TModuleKey>.CreateModule(TModuleInputDto)
  nameWithType.vb: IModuleStore(Of TModule, TModuleInputDto, TModuleKey).CreateModule(TModuleInputDto)
  fullName.vb: Hybrid.Zero.Authorization.IModuleStore(Of TModule, TModuleInputDto, TModuleKey).CreateModule(TModuleInputDto)
  spec.csharp:
  - uid: Hybrid.Zero.Authorization.IModuleStore`3.CreateModule(`1)
    name: CreateModule
    nameWithType: IModuleStore<TModule, TModuleInputDto, TModuleKey>.CreateModule
    fullName: Hybrid.Zero.Authorization.IModuleStore<TModule, TModuleInputDto, TModuleKey>.CreateModule
  - name: (
    nameWithType: (
    fullName: (
  - name: TModuleInputDto
    nameWithType: TModuleInputDto
    fullName: TModuleInputDto
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Zero.Authorization.IModuleStore`3.CreateModule(`1)
    name: CreateModule
    nameWithType: IModuleStore(Of TModule, TModuleInputDto, TModuleKey).CreateModule
    fullName: Hybrid.Zero.Authorization.IModuleStore(Of TModule, TModuleInputDto, TModuleKey).CreateModule
  - name: (
    nameWithType: (
    fullName: (
  - name: TModuleInputDto
    nameWithType: TModuleInputDto
    fullName: TModuleInputDto
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TModuleInputDto}'
  commentId: '!:TModuleInputDto'
  definition: TModuleInputDto
  name: TModuleInputDto
  nameWithType: TModuleInputDto
  fullName: TModuleInputDto
- uid: Hybrid.Zero.Authorization.IModuleStore`3.CreateModule(`1)
  commentId: M:Hybrid.Zero.Authorization.IModuleStore`3.CreateModule(`1)
  name: CreateModule(TModuleInputDto)
  nameWithType: IModuleStore<TModule, TModuleInputDto, TModuleKey>.CreateModule(TModuleInputDto)
  fullName: Hybrid.Zero.Authorization.IModuleStore<TModule, TModuleInputDto, TModuleKey>.CreateModule(TModuleInputDto)
  nameWithType.vb: IModuleStore(Of TModule, TModuleInputDto, TModuleKey).CreateModule(TModuleInputDto)
  fullName.vb: Hybrid.Zero.Authorization.IModuleStore(Of TModule, TModuleInputDto, TModuleKey).CreateModule(TModuleInputDto)
  spec.csharp:
  - uid: Hybrid.Zero.Authorization.IModuleStore`3.CreateModule(`1)
    name: CreateModule
    nameWithType: IModuleStore<TModule, TModuleInputDto, TModuleKey>.CreateModule
    fullName: Hybrid.Zero.Authorization.IModuleStore<TModule, TModuleInputDto, TModuleKey>.CreateModule
  - name: (
    nameWithType: (
    fullName: (
  - name: TModuleInputDto
    nameWithType: TModuleInputDto
    fullName: TModuleInputDto
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Zero.Authorization.IModuleStore`3.CreateModule(`1)
    name: CreateModule
    nameWithType: IModuleStore(Of TModule, TModuleInputDto, TModuleKey).CreateModule
    fullName: Hybrid.Zero.Authorization.IModuleStore(Of TModule, TModuleInputDto, TModuleKey).CreateModule
  - name: (
    nameWithType: (
    fullName: (
  - name: TModuleInputDto
    nameWithType: TModuleInputDto
    fullName: TModuleInputDto
  - name: )
    nameWithType: )
    fullName: )
- uid: TModuleInputDto
  name: TModuleInputDto
  nameWithType: TModuleInputDto
  fullName: TModuleInputDto
- uid: Hybrid.Zero.Authorization.SecurityManagerBase`18.UpdateModule*
  commentId: Overload:Hybrid.Zero.Authorization.SecurityManagerBase`18.UpdateModule
  name: UpdateModule
  nameWithType: SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>.UpdateModule
  fullName: Hybrid.Zero.Authorization.SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>.UpdateModule
  nameWithType.vb: SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey).UpdateModule
  fullName.vb: Hybrid.Zero.Authorization.SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey).UpdateModule
- uid: Hybrid.Zero.Authorization.IModuleStore{{TModule},{TModuleInputDto},{TModuleKey}}.UpdateModule({TModuleInputDto})
  commentId: M:Hybrid.Zero.Authorization.IModuleStore{`4,`5,`6}.UpdateModule(`5)
  parent: Hybrid.Zero.Authorization.IModuleStore{{TModule},{TModuleInputDto},{TModuleKey}}
  definition: Hybrid.Zero.Authorization.IModuleStore`3.UpdateModule(`1)
  name: UpdateModule(TModuleInputDto)
  nameWithType: IModuleStore<TModule, TModuleInputDto, TModuleKey>.UpdateModule(TModuleInputDto)
  fullName: Hybrid.Zero.Authorization.IModuleStore<TModule, TModuleInputDto, TModuleKey>.UpdateModule(TModuleInputDto)
  nameWithType.vb: IModuleStore(Of TModule, TModuleInputDto, TModuleKey).UpdateModule(TModuleInputDto)
  fullName.vb: Hybrid.Zero.Authorization.IModuleStore(Of TModule, TModuleInputDto, TModuleKey).UpdateModule(TModuleInputDto)
  spec.csharp:
  - uid: Hybrid.Zero.Authorization.IModuleStore`3.UpdateModule(`1)
    name: UpdateModule
    nameWithType: IModuleStore<TModule, TModuleInputDto, TModuleKey>.UpdateModule
    fullName: Hybrid.Zero.Authorization.IModuleStore<TModule, TModuleInputDto, TModuleKey>.UpdateModule
  - name: (
    nameWithType: (
    fullName: (
  - name: TModuleInputDto
    nameWithType: TModuleInputDto
    fullName: TModuleInputDto
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Zero.Authorization.IModuleStore`3.UpdateModule(`1)
    name: UpdateModule
    nameWithType: IModuleStore(Of TModule, TModuleInputDto, TModuleKey).UpdateModule
    fullName: Hybrid.Zero.Authorization.IModuleStore(Of TModule, TModuleInputDto, TModuleKey).UpdateModule
  - name: (
    nameWithType: (
    fullName: (
  - name: TModuleInputDto
    nameWithType: TModuleInputDto
    fullName: TModuleInputDto
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Authorization.IModuleStore`3.UpdateModule(`1)
  commentId: M:Hybrid.Zero.Authorization.IModuleStore`3.UpdateModule(`1)
  name: UpdateModule(TModuleInputDto)
  nameWithType: IModuleStore<TModule, TModuleInputDto, TModuleKey>.UpdateModule(TModuleInputDto)
  fullName: Hybrid.Zero.Authorization.IModuleStore<TModule, TModuleInputDto, TModuleKey>.UpdateModule(TModuleInputDto)
  nameWithType.vb: IModuleStore(Of TModule, TModuleInputDto, TModuleKey).UpdateModule(TModuleInputDto)
  fullName.vb: Hybrid.Zero.Authorization.IModuleStore(Of TModule, TModuleInputDto, TModuleKey).UpdateModule(TModuleInputDto)
  spec.csharp:
  - uid: Hybrid.Zero.Authorization.IModuleStore`3.UpdateModule(`1)
    name: UpdateModule
    nameWithType: IModuleStore<TModule, TModuleInputDto, TModuleKey>.UpdateModule
    fullName: Hybrid.Zero.Authorization.IModuleStore<TModule, TModuleInputDto, TModuleKey>.UpdateModule
  - name: (
    nameWithType: (
    fullName: (
  - name: TModuleInputDto
    nameWithType: TModuleInputDto
    fullName: TModuleInputDto
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Zero.Authorization.IModuleStore`3.UpdateModule(`1)
    name: UpdateModule
    nameWithType: IModuleStore(Of TModule, TModuleInputDto, TModuleKey).UpdateModule
    fullName: Hybrid.Zero.Authorization.IModuleStore(Of TModule, TModuleInputDto, TModuleKey).UpdateModule
  - name: (
    nameWithType: (
    fullName: (
  - name: TModuleInputDto
    nameWithType: TModuleInputDto
    fullName: TModuleInputDto
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Authorization.SecurityManagerBase`18.DeleteModule*
  commentId: Overload:Hybrid.Zero.Authorization.SecurityManagerBase`18.DeleteModule
  name: DeleteModule
  nameWithType: SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>.DeleteModule
  fullName: Hybrid.Zero.Authorization.SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>.DeleteModule
  nameWithType.vb: SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey).DeleteModule
  fullName.vb: Hybrid.Zero.Authorization.SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey).DeleteModule
- uid: Hybrid.Zero.Authorization.IModuleStore{{TModule},{TModuleInputDto},{TModuleKey}}.DeleteModule({TModuleKey})
  commentId: M:Hybrid.Zero.Authorization.IModuleStore{`4,`5,`6}.DeleteModule(`6)
  parent: Hybrid.Zero.Authorization.IModuleStore{{TModule},{TModuleInputDto},{TModuleKey}}
  definition: Hybrid.Zero.Authorization.IModuleStore`3.DeleteModule(`2)
  name: DeleteModule(TModuleKey)
  nameWithType: IModuleStore<TModule, TModuleInputDto, TModuleKey>.DeleteModule(TModuleKey)
  fullName: Hybrid.Zero.Authorization.IModuleStore<TModule, TModuleInputDto, TModuleKey>.DeleteModule(TModuleKey)
  nameWithType.vb: IModuleStore(Of TModule, TModuleInputDto, TModuleKey).DeleteModule(TModuleKey)
  fullName.vb: Hybrid.Zero.Authorization.IModuleStore(Of TModule, TModuleInputDto, TModuleKey).DeleteModule(TModuleKey)
  spec.csharp:
  - uid: Hybrid.Zero.Authorization.IModuleStore`3.DeleteModule(`2)
    name: DeleteModule
    nameWithType: IModuleStore<TModule, TModuleInputDto, TModuleKey>.DeleteModule
    fullName: Hybrid.Zero.Authorization.IModuleStore<TModule, TModuleInputDto, TModuleKey>.DeleteModule
  - name: (
    nameWithType: (
    fullName: (
  - name: TModuleKey
    nameWithType: TModuleKey
    fullName: TModuleKey
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Zero.Authorization.IModuleStore`3.DeleteModule(`2)
    name: DeleteModule
    nameWithType: IModuleStore(Of TModule, TModuleInputDto, TModuleKey).DeleteModule
    fullName: Hybrid.Zero.Authorization.IModuleStore(Of TModule, TModuleInputDto, TModuleKey).DeleteModule
  - name: (
    nameWithType: (
    fullName: (
  - name: TModuleKey
    nameWithType: TModuleKey
    fullName: TModuleKey
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Authorization.IModuleStore`3.DeleteModule(`2)
  commentId: M:Hybrid.Zero.Authorization.IModuleStore`3.DeleteModule(`2)
  name: DeleteModule(TModuleKey)
  nameWithType: IModuleStore<TModule, TModuleInputDto, TModuleKey>.DeleteModule(TModuleKey)
  fullName: Hybrid.Zero.Authorization.IModuleStore<TModule, TModuleInputDto, TModuleKey>.DeleteModule(TModuleKey)
  nameWithType.vb: IModuleStore(Of TModule, TModuleInputDto, TModuleKey).DeleteModule(TModuleKey)
  fullName.vb: Hybrid.Zero.Authorization.IModuleStore(Of TModule, TModuleInputDto, TModuleKey).DeleteModule(TModuleKey)
  spec.csharp:
  - uid: Hybrid.Zero.Authorization.IModuleStore`3.DeleteModule(`2)
    name: DeleteModule
    nameWithType: IModuleStore<TModule, TModuleInputDto, TModuleKey>.DeleteModule
    fullName: Hybrid.Zero.Authorization.IModuleStore<TModule, TModuleInputDto, TModuleKey>.DeleteModule
  - name: (
    nameWithType: (
    fullName: (
  - name: TModuleKey
    nameWithType: TModuleKey
    fullName: TModuleKey
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Zero.Authorization.IModuleStore`3.DeleteModule(`2)
    name: DeleteModule
    nameWithType: IModuleStore(Of TModule, TModuleInputDto, TModuleKey).DeleteModule
    fullName: Hybrid.Zero.Authorization.IModuleStore(Of TModule, TModuleInputDto, TModuleKey).DeleteModule
  - name: (
    nameWithType: (
    fullName: (
  - name: TModuleKey
    nameWithType: TModuleKey
    fullName: TModuleKey
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Authorization.SecurityManagerBase`18.GetModuleTreeIds*
  commentId: Overload:Hybrid.Zero.Authorization.SecurityManagerBase`18.GetModuleTreeIds
  name: GetModuleTreeIds
  nameWithType: SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>.GetModuleTreeIds
  fullName: Hybrid.Zero.Authorization.SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>.GetModuleTreeIds
  nameWithType.vb: SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey).GetModuleTreeIds
  fullName.vb: Hybrid.Zero.Authorization.SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey).GetModuleTreeIds
- uid: Hybrid.Zero.Authorization.IModuleStore{{TModule},{TModuleInputDto},{TModuleKey}}.GetModuleTreeIds({TModuleKey}[])
  commentId: M:Hybrid.Zero.Authorization.IModuleStore{`4,`5,`6}.GetModuleTreeIds(`6[])
  parent: Hybrid.Zero.Authorization.IModuleStore{{TModule},{TModuleInputDto},{TModuleKey}}
  definition: Hybrid.Zero.Authorization.IModuleStore`3.GetModuleTreeIds(`2[])
  name: GetModuleTreeIds(TModuleKey[])
  nameWithType: IModuleStore<TModule, TModuleInputDto, TModuleKey>.GetModuleTreeIds(TModuleKey[])
  fullName: Hybrid.Zero.Authorization.IModuleStore<TModule, TModuleInputDto, TModuleKey>.GetModuleTreeIds(TModuleKey[])
  nameWithType.vb: IModuleStore(Of TModule, TModuleInputDto, TModuleKey).GetModuleTreeIds(TModuleKey())
  fullName.vb: Hybrid.Zero.Authorization.IModuleStore(Of TModule, TModuleInputDto, TModuleKey).GetModuleTreeIds(TModuleKey())
  name.vb: GetModuleTreeIds(TModuleKey())
  spec.csharp:
  - uid: Hybrid.Zero.Authorization.IModuleStore`3.GetModuleTreeIds(`2[])
    name: GetModuleTreeIds
    nameWithType: IModuleStore<TModule, TModuleInputDto, TModuleKey>.GetModuleTreeIds
    fullName: Hybrid.Zero.Authorization.IModuleStore<TModule, TModuleInputDto, TModuleKey>.GetModuleTreeIds
  - name: (
    nameWithType: (
    fullName: (
  - name: TModuleKey
    nameWithType: TModuleKey
    fullName: TModuleKey
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Zero.Authorization.IModuleStore`3.GetModuleTreeIds(`2[])
    name: GetModuleTreeIds
    nameWithType: IModuleStore(Of TModule, TModuleInputDto, TModuleKey).GetModuleTreeIds
    fullName: Hybrid.Zero.Authorization.IModuleStore(Of TModule, TModuleInputDto, TModuleKey).GetModuleTreeIds
  - name: (
    nameWithType: (
    fullName: (
  - name: TModuleKey
    nameWithType: TModuleKey
    fullName: TModuleKey
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TModuleKey}[]'
  isExternal: true
  name: TModuleKey[]
  nameWithType: TModuleKey[]
  fullName: TModuleKey[]
  nameWithType.vb: TModuleKey()
  fullName.vb: TModuleKey()
  name.vb: TModuleKey()
  spec.csharp:
  - name: TModuleKey
    nameWithType: TModuleKey
    fullName: TModuleKey
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - name: TModuleKey
    nameWithType: TModuleKey
    fullName: TModuleKey
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Hybrid.Zero.Authorization.IModuleStore`3.GetModuleTreeIds(`2[])
  commentId: M:Hybrid.Zero.Authorization.IModuleStore`3.GetModuleTreeIds(`2[])
  name: GetModuleTreeIds(TModuleKey[])
  nameWithType: IModuleStore<TModule, TModuleInputDto, TModuleKey>.GetModuleTreeIds(TModuleKey[])
  fullName: Hybrid.Zero.Authorization.IModuleStore<TModule, TModuleInputDto, TModuleKey>.GetModuleTreeIds(TModuleKey[])
  nameWithType.vb: IModuleStore(Of TModule, TModuleInputDto, TModuleKey).GetModuleTreeIds(TModuleKey())
  fullName.vb: Hybrid.Zero.Authorization.IModuleStore(Of TModule, TModuleInputDto, TModuleKey).GetModuleTreeIds(TModuleKey())
  name.vb: GetModuleTreeIds(TModuleKey())
  spec.csharp:
  - uid: Hybrid.Zero.Authorization.IModuleStore`3.GetModuleTreeIds(`2[])
    name: GetModuleTreeIds
    nameWithType: IModuleStore<TModule, TModuleInputDto, TModuleKey>.GetModuleTreeIds
    fullName: Hybrid.Zero.Authorization.IModuleStore<TModule, TModuleInputDto, TModuleKey>.GetModuleTreeIds
  - name: (
    nameWithType: (
    fullName: (
  - name: TModuleKey
    nameWithType: TModuleKey
    fullName: TModuleKey
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Zero.Authorization.IModuleStore`3.GetModuleTreeIds(`2[])
    name: GetModuleTreeIds
    nameWithType: IModuleStore(Of TModule, TModuleInputDto, TModuleKey).GetModuleTreeIds
    fullName: Hybrid.Zero.Authorization.IModuleStore(Of TModule, TModuleInputDto, TModuleKey).GetModuleTreeIds
  - name: (
    nameWithType: (
    fullName: (
  - name: TModuleKey
    nameWithType: TModuleKey
    fullName: TModuleKey
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Authorization.SecurityManagerBase`18.ModuleFunctions*
  commentId: Overload:Hybrid.Zero.Authorization.SecurityManagerBase`18.ModuleFunctions
  name: ModuleFunctions
  nameWithType: SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>.ModuleFunctions
  fullName: Hybrid.Zero.Authorization.SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>.ModuleFunctions
  nameWithType.vb: SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey).ModuleFunctions
  fullName.vb: Hybrid.Zero.Authorization.SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey).ModuleFunctions
- uid: Hybrid.Zero.Authorization.IModuleFunctionStore{{TModuleFunction},{TModuleKey}}.ModuleFunctions
  commentId: P:Hybrid.Zero.Authorization.IModuleFunctionStore{`7,`6}.ModuleFunctions
  parent: Hybrid.Zero.Authorization.IModuleFunctionStore{{TModuleFunction},{TModuleKey}}
  definition: Hybrid.Zero.Authorization.IModuleFunctionStore`2.ModuleFunctions
  name: ModuleFunctions
  nameWithType: IModuleFunctionStore<TModuleFunction, TModuleKey>.ModuleFunctions
  fullName: Hybrid.Zero.Authorization.IModuleFunctionStore<TModuleFunction, TModuleKey>.ModuleFunctions
  nameWithType.vb: IModuleFunctionStore(Of TModuleFunction, TModuleKey).ModuleFunctions
  fullName.vb: Hybrid.Zero.Authorization.IModuleFunctionStore(Of TModuleFunction, TModuleKey).ModuleFunctions
- uid: System.Linq.IQueryable{{TModuleFunction}}
  commentId: T:System.Linq.IQueryable{`0}
  parent: System.Linq
  definition: System.Linq.IQueryable`1
  name: IQueryable<TModuleFunction>
  nameWithType: IQueryable<TModuleFunction>
  fullName: System.Linq.IQueryable<TModuleFunction>
  nameWithType.vb: IQueryable(Of TModuleFunction)
  fullName.vb: System.Linq.IQueryable(Of TModuleFunction)
  name.vb: IQueryable(Of TModuleFunction)
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModuleFunction
    nameWithType: TModuleFunction
    fullName: TModuleFunction
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModuleFunction
    nameWithType: TModuleFunction
    fullName: TModuleFunction
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Authorization.IModuleFunctionStore`2.ModuleFunctions
  commentId: P:Hybrid.Zero.Authorization.IModuleFunctionStore`2.ModuleFunctions
  name: ModuleFunctions
  nameWithType: IModuleFunctionStore<TModuleFunction, TModuleKey>.ModuleFunctions
  fullName: Hybrid.Zero.Authorization.IModuleFunctionStore<TModuleFunction, TModuleKey>.ModuleFunctions
  nameWithType.vb: IModuleFunctionStore(Of TModuleFunction, TModuleKey).ModuleFunctions
  fullName.vb: Hybrid.Zero.Authorization.IModuleFunctionStore(Of TModuleFunction, TModuleKey).ModuleFunctions
- uid: Hybrid.Zero.Authorization.SecurityManagerBase`18.CheckModuleFunctionExists*
  commentId: Overload:Hybrid.Zero.Authorization.SecurityManagerBase`18.CheckModuleFunctionExists
  name: CheckModuleFunctionExists
  nameWithType: SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>.CheckModuleFunctionExists
  fullName: Hybrid.Zero.Authorization.SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>.CheckModuleFunctionExists
  nameWithType.vb: SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey).CheckModuleFunctionExists
  fullName.vb: Hybrid.Zero.Authorization.SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey).CheckModuleFunctionExists
- uid: Hybrid.Zero.Authorization.IModuleFunctionStore{{TModuleFunction},{TModuleKey}}.CheckModuleFunctionExists(System.Linq.Expressions.Expression{System.Func{{TModuleFunction},System.Boolean}},System.Guid)
  commentId: M:Hybrid.Zero.Authorization.IModuleFunctionStore{`7,`6}.CheckModuleFunctionExists(System.Linq.Expressions.Expression{System.Func{`7,System.Boolean}},System.Guid)
  parent: Hybrid.Zero.Authorization.IModuleFunctionStore{{TModuleFunction},{TModuleKey}}
  definition: Hybrid.Zero.Authorization.IModuleFunctionStore`2.CheckModuleFunctionExists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Guid)
  name: CheckModuleFunctionExists(Expression<Func<TModuleFunction, Boolean>>, Guid)
  nameWithType: IModuleFunctionStore<TModuleFunction, TModuleKey>.CheckModuleFunctionExists(Expression<Func<TModuleFunction, Boolean>>, Guid)
  fullName: Hybrid.Zero.Authorization.IModuleFunctionStore<TModuleFunction, TModuleKey>.CheckModuleFunctionExists(System.Linq.Expressions.Expression<System.Func<TModuleFunction, System.Boolean>>, System.Guid)
  nameWithType.vb: IModuleFunctionStore(Of TModuleFunction, TModuleKey).CheckModuleFunctionExists(Expression(Of Func(Of TModuleFunction, Boolean)), Guid)
  fullName.vb: Hybrid.Zero.Authorization.IModuleFunctionStore(Of TModuleFunction, TModuleKey).CheckModuleFunctionExists(System.Linq.Expressions.Expression(Of System.Func(Of TModuleFunction, System.Boolean)), System.Guid)
  name.vb: CheckModuleFunctionExists(Expression(Of Func(Of TModuleFunction, Boolean)), Guid)
  spec.csharp:
  - uid: Hybrid.Zero.Authorization.IModuleFunctionStore`2.CheckModuleFunctionExists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Guid)
    name: CheckModuleFunctionExists
    nameWithType: IModuleFunctionStore<TModuleFunction, TModuleKey>.CheckModuleFunctionExists
    fullName: Hybrid.Zero.Authorization.IModuleFunctionStore<TModuleFunction, TModuleKey>.CheckModuleFunctionExists
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModuleFunction
    nameWithType: TModuleFunction
    fullName: TModuleFunction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Zero.Authorization.IModuleFunctionStore`2.CheckModuleFunctionExists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Guid)
    name: CheckModuleFunctionExists
    nameWithType: IModuleFunctionStore(Of TModuleFunction, TModuleKey).CheckModuleFunctionExists
    fullName: Hybrid.Zero.Authorization.IModuleFunctionStore(Of TModuleFunction, TModuleKey).CheckModuleFunctionExists
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModuleFunction
    nameWithType: TModuleFunction
    fullName: TModuleFunction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{TModuleFunction},System.Boolean}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TModuleFunction, Boolean>>
  nameWithType: Expression<Func<TModuleFunction, Boolean>>
  fullName: System.Linq.Expressions.Expression<System.Func<TModuleFunction, System.Boolean>>
  nameWithType.vb: Expression(Of Func(Of TModuleFunction, Boolean))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TModuleFunction, System.Boolean))
  name.vb: Expression(Of Func(Of TModuleFunction, Boolean))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModuleFunction
    nameWithType: TModuleFunction
    fullName: TModuleFunction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModuleFunction
    nameWithType: TModuleFunction
    fullName: TModuleFunction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Authorization.IModuleFunctionStore`2.CheckModuleFunctionExists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Guid)
  commentId: M:Hybrid.Zero.Authorization.IModuleFunctionStore`2.CheckModuleFunctionExists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Guid)
  isExternal: true
  name: CheckModuleFunctionExists(Expression<Func<TModuleFunction, Boolean>>, Guid)
  nameWithType: IModuleFunctionStore<TModuleFunction, TModuleKey>.CheckModuleFunctionExists(Expression<Func<TModuleFunction, Boolean>>, Guid)
  fullName: Hybrid.Zero.Authorization.IModuleFunctionStore<TModuleFunction, TModuleKey>.CheckModuleFunctionExists(System.Linq.Expressions.Expression<System.Func<TModuleFunction, System.Boolean>>, System.Guid)
  nameWithType.vb: IModuleFunctionStore(Of TModuleFunction, TModuleKey).CheckModuleFunctionExists(Expression(Of Func(Of TModuleFunction, Boolean)), Guid)
  fullName.vb: Hybrid.Zero.Authorization.IModuleFunctionStore(Of TModuleFunction, TModuleKey).CheckModuleFunctionExists(System.Linq.Expressions.Expression(Of System.Func(Of TModuleFunction, System.Boolean)), System.Guid)
  name.vb: CheckModuleFunctionExists(Expression(Of Func(Of TModuleFunction, Boolean)), Guid)
  spec.csharp:
  - uid: Hybrid.Zero.Authorization.IModuleFunctionStore`2.CheckModuleFunctionExists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Guid)
    name: CheckModuleFunctionExists
    nameWithType: IModuleFunctionStore<TModuleFunction, TModuleKey>.CheckModuleFunctionExists
    fullName: Hybrid.Zero.Authorization.IModuleFunctionStore<TModuleFunction, TModuleKey>.CheckModuleFunctionExists
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModuleFunction
    nameWithType: TModuleFunction
    fullName: TModuleFunction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Zero.Authorization.IModuleFunctionStore`2.CheckModuleFunctionExists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Guid)
    name: CheckModuleFunctionExists
    nameWithType: IModuleFunctionStore(Of TModuleFunction, TModuleKey).CheckModuleFunctionExists
    fullName: Hybrid.Zero.Authorization.IModuleFunctionStore(Of TModuleFunction, TModuleKey).CheckModuleFunctionExists
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModuleFunction
    nameWithType: TModuleFunction
    fullName: TModuleFunction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Authorization.SecurityManagerBase`18.SetModuleFunctions*
  commentId: Overload:Hybrid.Zero.Authorization.SecurityManagerBase`18.SetModuleFunctions
  name: SetModuleFunctions
  nameWithType: SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>.SetModuleFunctions
  fullName: Hybrid.Zero.Authorization.SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>.SetModuleFunctions
  nameWithType.vb: SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey).SetModuleFunctions
  fullName.vb: Hybrid.Zero.Authorization.SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey).SetModuleFunctions
- uid: Hybrid.Zero.Authorization.IModuleFunctionStore{{TModuleFunction},{TModuleKey}}.SetModuleFunctions({TModuleKey},System.Guid[])
  commentId: M:Hybrid.Zero.Authorization.IModuleFunctionStore{`7,`6}.SetModuleFunctions(`6,System.Guid[])
  parent: Hybrid.Zero.Authorization.IModuleFunctionStore{{TModuleFunction},{TModuleKey}}
  definition: Hybrid.Zero.Authorization.IModuleFunctionStore`2.SetModuleFunctions(`1,System.Guid[])
  name: SetModuleFunctions(TModuleKey, Guid[])
  nameWithType: IModuleFunctionStore<TModuleFunction, TModuleKey>.SetModuleFunctions(TModuleKey, Guid[])
  fullName: Hybrid.Zero.Authorization.IModuleFunctionStore<TModuleFunction, TModuleKey>.SetModuleFunctions(TModuleKey, System.Guid[])
  nameWithType.vb: IModuleFunctionStore(Of TModuleFunction, TModuleKey).SetModuleFunctions(TModuleKey, Guid())
  fullName.vb: Hybrid.Zero.Authorization.IModuleFunctionStore(Of TModuleFunction, TModuleKey).SetModuleFunctions(TModuleKey, System.Guid())
  name.vb: SetModuleFunctions(TModuleKey, Guid())
  spec.csharp:
  - uid: Hybrid.Zero.Authorization.IModuleFunctionStore`2.SetModuleFunctions(`1,System.Guid[])
    name: SetModuleFunctions
    nameWithType: IModuleFunctionStore<TModuleFunction, TModuleKey>.SetModuleFunctions
    fullName: Hybrid.Zero.Authorization.IModuleFunctionStore<TModuleFunction, TModuleKey>.SetModuleFunctions
  - name: (
    nameWithType: (
    fullName: (
  - name: TModuleKey
    nameWithType: TModuleKey
    fullName: TModuleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Zero.Authorization.IModuleFunctionStore`2.SetModuleFunctions(`1,System.Guid[])
    name: SetModuleFunctions
    nameWithType: IModuleFunctionStore(Of TModuleFunction, TModuleKey).SetModuleFunctions
    fullName: Hybrid.Zero.Authorization.IModuleFunctionStore(Of TModuleFunction, TModuleKey).SetModuleFunctions
  - name: (
    nameWithType: (
    fullName: (
  - name: TModuleKey
    nameWithType: TModuleKey
    fullName: TModuleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Guid[]
  isExternal: true
  name: Guid[]
  nameWithType: Guid[]
  fullName: System.Guid[]
  nameWithType.vb: Guid()
  fullName.vb: System.Guid()
  name.vb: Guid()
  spec.csharp:
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Hybrid.Zero.Authorization.IModuleFunctionStore`2.SetModuleFunctions(`1,System.Guid[])
  commentId: M:Hybrid.Zero.Authorization.IModuleFunctionStore`2.SetModuleFunctions(`1,System.Guid[])
  isExternal: true
  name: SetModuleFunctions(TModuleKey, Guid[])
  nameWithType: IModuleFunctionStore<TModuleFunction, TModuleKey>.SetModuleFunctions(TModuleKey, Guid[])
  fullName: Hybrid.Zero.Authorization.IModuleFunctionStore<TModuleFunction, TModuleKey>.SetModuleFunctions(TModuleKey, System.Guid[])
  nameWithType.vb: IModuleFunctionStore(Of TModuleFunction, TModuleKey).SetModuleFunctions(TModuleKey, Guid())
  fullName.vb: Hybrid.Zero.Authorization.IModuleFunctionStore(Of TModuleFunction, TModuleKey).SetModuleFunctions(TModuleKey, System.Guid())
  name.vb: SetModuleFunctions(TModuleKey, Guid())
  spec.csharp:
  - uid: Hybrid.Zero.Authorization.IModuleFunctionStore`2.SetModuleFunctions(`1,System.Guid[])
    name: SetModuleFunctions
    nameWithType: IModuleFunctionStore<TModuleFunction, TModuleKey>.SetModuleFunctions
    fullName: Hybrid.Zero.Authorization.IModuleFunctionStore<TModuleFunction, TModuleKey>.SetModuleFunctions
  - name: (
    nameWithType: (
    fullName: (
  - name: TModuleKey
    nameWithType: TModuleKey
    fullName: TModuleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Zero.Authorization.IModuleFunctionStore`2.SetModuleFunctions(`1,System.Guid[])
    name: SetModuleFunctions
    nameWithType: IModuleFunctionStore(Of TModuleFunction, TModuleKey).SetModuleFunctions
    fullName: Hybrid.Zero.Authorization.IModuleFunctionStore(Of TModuleFunction, TModuleKey).SetModuleFunctions
  - name: (
    nameWithType: (
    fullName: (
  - name: TModuleKey
    nameWithType: TModuleKey
    fullName: TModuleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Authorization.SecurityManagerBase`18.ModuleRoles*
  commentId: Overload:Hybrid.Zero.Authorization.SecurityManagerBase`18.ModuleRoles
  name: ModuleRoles
  nameWithType: SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>.ModuleRoles
  fullName: Hybrid.Zero.Authorization.SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>.ModuleRoles
  nameWithType.vb: SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey).ModuleRoles
  fullName.vb: Hybrid.Zero.Authorization.SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey).ModuleRoles
- uid: Hybrid.Zero.Authorization.IModuleRoleStore{{TModuleRole},{TRoleKey},{TModuleKey}}.ModuleRoles
  commentId: P:Hybrid.Zero.Authorization.IModuleRoleStore{`8,`15,`6}.ModuleRoles
  parent: Hybrid.Zero.Authorization.IModuleRoleStore{{TModuleRole},{TRoleKey},{TModuleKey}}
  definition: Hybrid.Zero.Authorization.IModuleRoleStore`3.ModuleRoles
  name: ModuleRoles
  nameWithType: IModuleRoleStore<TModuleRole, TRoleKey, TModuleKey>.ModuleRoles
  fullName: Hybrid.Zero.Authorization.IModuleRoleStore<TModuleRole, TRoleKey, TModuleKey>.ModuleRoles
  nameWithType.vb: IModuleRoleStore(Of TModuleRole, TRoleKey, TModuleKey).ModuleRoles
  fullName.vb: Hybrid.Zero.Authorization.IModuleRoleStore(Of TModuleRole, TRoleKey, TModuleKey).ModuleRoles
- uid: System.Linq.IQueryable{{TModuleRole}}
  commentId: T:System.Linq.IQueryable{`0}
  parent: System.Linq
  definition: System.Linq.IQueryable`1
  name: IQueryable<TModuleRole>
  nameWithType: IQueryable<TModuleRole>
  fullName: System.Linq.IQueryable<TModuleRole>
  nameWithType.vb: IQueryable(Of TModuleRole)
  fullName.vb: System.Linq.IQueryable(Of TModuleRole)
  name.vb: IQueryable(Of TModuleRole)
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModuleRole
    nameWithType: TModuleRole
    fullName: TModuleRole
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModuleRole
    nameWithType: TModuleRole
    fullName: TModuleRole
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Authorization.IModuleRoleStore`3.ModuleRoles
  commentId: P:Hybrid.Zero.Authorization.IModuleRoleStore`3.ModuleRoles
  name: ModuleRoles
  nameWithType: IModuleRoleStore<TModuleRole, TRoleKey, TModuleKey>.ModuleRoles
  fullName: Hybrid.Zero.Authorization.IModuleRoleStore<TModuleRole, TRoleKey, TModuleKey>.ModuleRoles
  nameWithType.vb: IModuleRoleStore(Of TModuleRole, TRoleKey, TModuleKey).ModuleRoles
  fullName.vb: Hybrid.Zero.Authorization.IModuleRoleStore(Of TModuleRole, TRoleKey, TModuleKey).ModuleRoles
- uid: Hybrid.Zero.Authorization.SecurityManagerBase`18.CheckModuleRoleExists*
  commentId: Overload:Hybrid.Zero.Authorization.SecurityManagerBase`18.CheckModuleRoleExists
  name: CheckModuleRoleExists
  nameWithType: SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>.CheckModuleRoleExists
  fullName: Hybrid.Zero.Authorization.SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>.CheckModuleRoleExists
  nameWithType.vb: SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey).CheckModuleRoleExists
  fullName.vb: Hybrid.Zero.Authorization.SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey).CheckModuleRoleExists
- uid: Hybrid.Zero.Authorization.IModuleRoleStore{{TModuleRole},{TRoleKey},{TModuleKey}}.CheckModuleRoleExists(System.Linq.Expressions.Expression{System.Func{{TModuleRole},System.Boolean}},System.Guid)
  commentId: M:Hybrid.Zero.Authorization.IModuleRoleStore{`8,`15,`6}.CheckModuleRoleExists(System.Linq.Expressions.Expression{System.Func{`8,System.Boolean}},System.Guid)
  parent: Hybrid.Zero.Authorization.IModuleRoleStore{{TModuleRole},{TRoleKey},{TModuleKey}}
  definition: Hybrid.Zero.Authorization.IModuleRoleStore`3.CheckModuleRoleExists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Guid)
  name: CheckModuleRoleExists(Expression<Func<TModuleRole, Boolean>>, Guid)
  nameWithType: IModuleRoleStore<TModuleRole, TRoleKey, TModuleKey>.CheckModuleRoleExists(Expression<Func<TModuleRole, Boolean>>, Guid)
  fullName: Hybrid.Zero.Authorization.IModuleRoleStore<TModuleRole, TRoleKey, TModuleKey>.CheckModuleRoleExists(System.Linq.Expressions.Expression<System.Func<TModuleRole, System.Boolean>>, System.Guid)
  nameWithType.vb: IModuleRoleStore(Of TModuleRole, TRoleKey, TModuleKey).CheckModuleRoleExists(Expression(Of Func(Of TModuleRole, Boolean)), Guid)
  fullName.vb: Hybrid.Zero.Authorization.IModuleRoleStore(Of TModuleRole, TRoleKey, TModuleKey).CheckModuleRoleExists(System.Linq.Expressions.Expression(Of System.Func(Of TModuleRole, System.Boolean)), System.Guid)
  name.vb: CheckModuleRoleExists(Expression(Of Func(Of TModuleRole, Boolean)), Guid)
  spec.csharp:
  - uid: Hybrid.Zero.Authorization.IModuleRoleStore`3.CheckModuleRoleExists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Guid)
    name: CheckModuleRoleExists
    nameWithType: IModuleRoleStore<TModuleRole, TRoleKey, TModuleKey>.CheckModuleRoleExists
    fullName: Hybrid.Zero.Authorization.IModuleRoleStore<TModuleRole, TRoleKey, TModuleKey>.CheckModuleRoleExists
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModuleRole
    nameWithType: TModuleRole
    fullName: TModuleRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Zero.Authorization.IModuleRoleStore`3.CheckModuleRoleExists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Guid)
    name: CheckModuleRoleExists
    nameWithType: IModuleRoleStore(Of TModuleRole, TRoleKey, TModuleKey).CheckModuleRoleExists
    fullName: Hybrid.Zero.Authorization.IModuleRoleStore(Of TModuleRole, TRoleKey, TModuleKey).CheckModuleRoleExists
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModuleRole
    nameWithType: TModuleRole
    fullName: TModuleRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{TModuleRole},System.Boolean}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TModuleRole, Boolean>>
  nameWithType: Expression<Func<TModuleRole, Boolean>>
  fullName: System.Linq.Expressions.Expression<System.Func<TModuleRole, System.Boolean>>
  nameWithType.vb: Expression(Of Func(Of TModuleRole, Boolean))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TModuleRole, System.Boolean))
  name.vb: Expression(Of Func(Of TModuleRole, Boolean))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModuleRole
    nameWithType: TModuleRole
    fullName: TModuleRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModuleRole
    nameWithType: TModuleRole
    fullName: TModuleRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Authorization.IModuleRoleStore`3.CheckModuleRoleExists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Guid)
  commentId: M:Hybrid.Zero.Authorization.IModuleRoleStore`3.CheckModuleRoleExists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Guid)
  isExternal: true
  name: CheckModuleRoleExists(Expression<Func<TModuleRole, Boolean>>, Guid)
  nameWithType: IModuleRoleStore<TModuleRole, TRoleKey, TModuleKey>.CheckModuleRoleExists(Expression<Func<TModuleRole, Boolean>>, Guid)
  fullName: Hybrid.Zero.Authorization.IModuleRoleStore<TModuleRole, TRoleKey, TModuleKey>.CheckModuleRoleExists(System.Linq.Expressions.Expression<System.Func<TModuleRole, System.Boolean>>, System.Guid)
  nameWithType.vb: IModuleRoleStore(Of TModuleRole, TRoleKey, TModuleKey).CheckModuleRoleExists(Expression(Of Func(Of TModuleRole, Boolean)), Guid)
  fullName.vb: Hybrid.Zero.Authorization.IModuleRoleStore(Of TModuleRole, TRoleKey, TModuleKey).CheckModuleRoleExists(System.Linq.Expressions.Expression(Of System.Func(Of TModuleRole, System.Boolean)), System.Guid)
  name.vb: CheckModuleRoleExists(Expression(Of Func(Of TModuleRole, Boolean)), Guid)
  spec.csharp:
  - uid: Hybrid.Zero.Authorization.IModuleRoleStore`3.CheckModuleRoleExists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Guid)
    name: CheckModuleRoleExists
    nameWithType: IModuleRoleStore<TModuleRole, TRoleKey, TModuleKey>.CheckModuleRoleExists
    fullName: Hybrid.Zero.Authorization.IModuleRoleStore<TModuleRole, TRoleKey, TModuleKey>.CheckModuleRoleExists
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModuleRole
    nameWithType: TModuleRole
    fullName: TModuleRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Zero.Authorization.IModuleRoleStore`3.CheckModuleRoleExists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Guid)
    name: CheckModuleRoleExists
    nameWithType: IModuleRoleStore(Of TModuleRole, TRoleKey, TModuleKey).CheckModuleRoleExists
    fullName: Hybrid.Zero.Authorization.IModuleRoleStore(Of TModuleRole, TRoleKey, TModuleKey).CheckModuleRoleExists
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModuleRole
    nameWithType: TModuleRole
    fullName: TModuleRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Authorization.SecurityManagerBase`18.SetRoleModules*
  commentId: Overload:Hybrid.Zero.Authorization.SecurityManagerBase`18.SetRoleModules
  name: SetRoleModules
  nameWithType: SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>.SetRoleModules
  fullName: Hybrid.Zero.Authorization.SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>.SetRoleModules
  nameWithType.vb: SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey).SetRoleModules
  fullName.vb: Hybrid.Zero.Authorization.SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey).SetRoleModules
- uid: Hybrid.Zero.Authorization.IModuleRoleStore{{TModuleRole},{TRoleKey},{TModuleKey}}.SetRoleModules({TRoleKey},{TModuleKey}[])
  commentId: M:Hybrid.Zero.Authorization.IModuleRoleStore{`8,`15,`6}.SetRoleModules(`15,`6[])
  parent: Hybrid.Zero.Authorization.IModuleRoleStore{{TModuleRole},{TRoleKey},{TModuleKey}}
  definition: Hybrid.Zero.Authorization.IModuleRoleStore`3.SetRoleModules(`1,`2[])
  name: SetRoleModules(TRoleKey, TModuleKey[])
  nameWithType: IModuleRoleStore<TModuleRole, TRoleKey, TModuleKey>.SetRoleModules(TRoleKey, TModuleKey[])
  fullName: Hybrid.Zero.Authorization.IModuleRoleStore<TModuleRole, TRoleKey, TModuleKey>.SetRoleModules(TRoleKey, TModuleKey[])
  nameWithType.vb: IModuleRoleStore(Of TModuleRole, TRoleKey, TModuleKey).SetRoleModules(TRoleKey, TModuleKey())
  fullName.vb: Hybrid.Zero.Authorization.IModuleRoleStore(Of TModuleRole, TRoleKey, TModuleKey).SetRoleModules(TRoleKey, TModuleKey())
  name.vb: SetRoleModules(TRoleKey, TModuleKey())
  spec.csharp:
  - uid: Hybrid.Zero.Authorization.IModuleRoleStore`3.SetRoleModules(`1,`2[])
    name: SetRoleModules
    nameWithType: IModuleRoleStore<TModuleRole, TRoleKey, TModuleKey>.SetRoleModules
    fullName: Hybrid.Zero.Authorization.IModuleRoleStore<TModuleRole, TRoleKey, TModuleKey>.SetRoleModules
  - name: (
    nameWithType: (
    fullName: (
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleKey
    nameWithType: TModuleKey
    fullName: TModuleKey
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Zero.Authorization.IModuleRoleStore`3.SetRoleModules(`1,`2[])
    name: SetRoleModules
    nameWithType: IModuleRoleStore(Of TModuleRole, TRoleKey, TModuleKey).SetRoleModules
    fullName: Hybrid.Zero.Authorization.IModuleRoleStore(Of TModuleRole, TRoleKey, TModuleKey).SetRoleModules
  - name: (
    nameWithType: (
    fullName: (
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleKey
    nameWithType: TModuleKey
    fullName: TModuleKey
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TRoleKey}'
  commentId: '!:TRoleKey'
  definition: TRoleKey
  name: TRoleKey
  nameWithType: TRoleKey
  fullName: TRoleKey
- uid: Hybrid.Zero.Authorization.IModuleRoleStore`3.SetRoleModules(`1,`2[])
  commentId: M:Hybrid.Zero.Authorization.IModuleRoleStore`3.SetRoleModules(`1,`2[])
  name: SetRoleModules(TRoleKey, TModuleKey[])
  nameWithType: IModuleRoleStore<TModuleRole, TRoleKey, TModuleKey>.SetRoleModules(TRoleKey, TModuleKey[])
  fullName: Hybrid.Zero.Authorization.IModuleRoleStore<TModuleRole, TRoleKey, TModuleKey>.SetRoleModules(TRoleKey, TModuleKey[])
  nameWithType.vb: IModuleRoleStore(Of TModuleRole, TRoleKey, TModuleKey).SetRoleModules(TRoleKey, TModuleKey())
  fullName.vb: Hybrid.Zero.Authorization.IModuleRoleStore(Of TModuleRole, TRoleKey, TModuleKey).SetRoleModules(TRoleKey, TModuleKey())
  name.vb: SetRoleModules(TRoleKey, TModuleKey())
  spec.csharp:
  - uid: Hybrid.Zero.Authorization.IModuleRoleStore`3.SetRoleModules(`1,`2[])
    name: SetRoleModules
    nameWithType: IModuleRoleStore<TModuleRole, TRoleKey, TModuleKey>.SetRoleModules
    fullName: Hybrid.Zero.Authorization.IModuleRoleStore<TModuleRole, TRoleKey, TModuleKey>.SetRoleModules
  - name: (
    nameWithType: (
    fullName: (
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleKey
    nameWithType: TModuleKey
    fullName: TModuleKey
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Zero.Authorization.IModuleRoleStore`3.SetRoleModules(`1,`2[])
    name: SetRoleModules
    nameWithType: IModuleRoleStore(Of TModuleRole, TRoleKey, TModuleKey).SetRoleModules
    fullName: Hybrid.Zero.Authorization.IModuleRoleStore(Of TModuleRole, TRoleKey, TModuleKey).SetRoleModules
  - name: (
    nameWithType: (
    fullName: (
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleKey
    nameWithType: TModuleKey
    fullName: TModuleKey
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: TRoleKey
  name: TRoleKey
  nameWithType: TRoleKey
  fullName: TRoleKey
- uid: Hybrid.Zero.Authorization.SecurityManagerBase`18.GetRoleModuleIds*
  commentId: Overload:Hybrid.Zero.Authorization.SecurityManagerBase`18.GetRoleModuleIds
  name: GetRoleModuleIds
  nameWithType: SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>.GetRoleModuleIds
  fullName: Hybrid.Zero.Authorization.SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>.GetRoleModuleIds
  nameWithType.vb: SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey).GetRoleModuleIds
  fullName.vb: Hybrid.Zero.Authorization.SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey).GetRoleModuleIds
- uid: Hybrid.Zero.Authorization.IModuleRoleStore{{TModuleRole},{TRoleKey},{TModuleKey}}.GetRoleModuleIds({TRoleKey})
  commentId: M:Hybrid.Zero.Authorization.IModuleRoleStore{`8,`15,`6}.GetRoleModuleIds(`15)
  parent: Hybrid.Zero.Authorization.IModuleRoleStore{{TModuleRole},{TRoleKey},{TModuleKey}}
  definition: Hybrid.Zero.Authorization.IModuleRoleStore`3.GetRoleModuleIds(`1)
  name: GetRoleModuleIds(TRoleKey)
  nameWithType: IModuleRoleStore<TModuleRole, TRoleKey, TModuleKey>.GetRoleModuleIds(TRoleKey)
  fullName: Hybrid.Zero.Authorization.IModuleRoleStore<TModuleRole, TRoleKey, TModuleKey>.GetRoleModuleIds(TRoleKey)
  nameWithType.vb: IModuleRoleStore(Of TModuleRole, TRoleKey, TModuleKey).GetRoleModuleIds(TRoleKey)
  fullName.vb: Hybrid.Zero.Authorization.IModuleRoleStore(Of TModuleRole, TRoleKey, TModuleKey).GetRoleModuleIds(TRoleKey)
  spec.csharp:
  - uid: Hybrid.Zero.Authorization.IModuleRoleStore`3.GetRoleModuleIds(`1)
    name: GetRoleModuleIds
    nameWithType: IModuleRoleStore<TModuleRole, TRoleKey, TModuleKey>.GetRoleModuleIds
    fullName: Hybrid.Zero.Authorization.IModuleRoleStore<TModuleRole, TRoleKey, TModuleKey>.GetRoleModuleIds
  - name: (
    nameWithType: (
    fullName: (
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Zero.Authorization.IModuleRoleStore`3.GetRoleModuleIds(`1)
    name: GetRoleModuleIds
    nameWithType: IModuleRoleStore(Of TModuleRole, TRoleKey, TModuleKey).GetRoleModuleIds
    fullName: Hybrid.Zero.Authorization.IModuleRoleStore(Of TModuleRole, TRoleKey, TModuleKey).GetRoleModuleIds
  - name: (
    nameWithType: (
    fullName: (
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Authorization.IModuleRoleStore`3.GetRoleModuleIds(`1)
  commentId: M:Hybrid.Zero.Authorization.IModuleRoleStore`3.GetRoleModuleIds(`1)
  name: GetRoleModuleIds(TRoleKey)
  nameWithType: IModuleRoleStore<TModuleRole, TRoleKey, TModuleKey>.GetRoleModuleIds(TRoleKey)
  fullName: Hybrid.Zero.Authorization.IModuleRoleStore<TModuleRole, TRoleKey, TModuleKey>.GetRoleModuleIds(TRoleKey)
  nameWithType.vb: IModuleRoleStore(Of TModuleRole, TRoleKey, TModuleKey).GetRoleModuleIds(TRoleKey)
  fullName.vb: Hybrid.Zero.Authorization.IModuleRoleStore(Of TModuleRole, TRoleKey, TModuleKey).GetRoleModuleIds(TRoleKey)
  spec.csharp:
  - uid: Hybrid.Zero.Authorization.IModuleRoleStore`3.GetRoleModuleIds(`1)
    name: GetRoleModuleIds
    nameWithType: IModuleRoleStore<TModuleRole, TRoleKey, TModuleKey>.GetRoleModuleIds
    fullName: Hybrid.Zero.Authorization.IModuleRoleStore<TModuleRole, TRoleKey, TModuleKey>.GetRoleModuleIds
  - name: (
    nameWithType: (
    fullName: (
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Zero.Authorization.IModuleRoleStore`3.GetRoleModuleIds(`1)
    name: GetRoleModuleIds
    nameWithType: IModuleRoleStore(Of TModuleRole, TRoleKey, TModuleKey).GetRoleModuleIds
    fullName: Hybrid.Zero.Authorization.IModuleRoleStore(Of TModuleRole, TRoleKey, TModuleKey).GetRoleModuleIds
  - name: (
    nameWithType: (
    fullName: (
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Authorization.SecurityManagerBase`18.ModuleUsers*
  commentId: Overload:Hybrid.Zero.Authorization.SecurityManagerBase`18.ModuleUsers
  name: ModuleUsers
  nameWithType: SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>.ModuleUsers
  fullName: Hybrid.Zero.Authorization.SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>.ModuleUsers
  nameWithType.vb: SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey).ModuleUsers
  fullName.vb: Hybrid.Zero.Authorization.SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey).ModuleUsers
- uid: Hybrid.Zero.Authorization.IModuleUserStore{{TModuleUser},{TUserKey},{TModuleKey}}.ModuleUsers
  commentId: P:Hybrid.Zero.Authorization.IModuleUserStore{`9,`17,`6}.ModuleUsers
  parent: Hybrid.Zero.Authorization.IModuleUserStore{{TModuleUser},{TUserKey},{TModuleKey}}
  definition: Hybrid.Zero.Authorization.IModuleUserStore`3.ModuleUsers
  name: ModuleUsers
  nameWithType: IModuleUserStore<TModuleUser, TUserKey, TModuleKey>.ModuleUsers
  fullName: Hybrid.Zero.Authorization.IModuleUserStore<TModuleUser, TUserKey, TModuleKey>.ModuleUsers
  nameWithType.vb: IModuleUserStore(Of TModuleUser, TUserKey, TModuleKey).ModuleUsers
  fullName.vb: Hybrid.Zero.Authorization.IModuleUserStore(Of TModuleUser, TUserKey, TModuleKey).ModuleUsers
- uid: System.Linq.IQueryable{{TModuleUser}}
  commentId: T:System.Linq.IQueryable{`0}
  parent: System.Linq
  definition: System.Linq.IQueryable`1
  name: IQueryable<TModuleUser>
  nameWithType: IQueryable<TModuleUser>
  fullName: System.Linq.IQueryable<TModuleUser>
  nameWithType.vb: IQueryable(Of TModuleUser)
  fullName.vb: System.Linq.IQueryable(Of TModuleUser)
  name.vb: IQueryable(Of TModuleUser)
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModuleUser
    nameWithType: TModuleUser
    fullName: TModuleUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModuleUser
    nameWithType: TModuleUser
    fullName: TModuleUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Authorization.IModuleUserStore`3.ModuleUsers
  commentId: P:Hybrid.Zero.Authorization.IModuleUserStore`3.ModuleUsers
  name: ModuleUsers
  nameWithType: IModuleUserStore<TModuleUser, TUserKey, TModuleKey>.ModuleUsers
  fullName: Hybrid.Zero.Authorization.IModuleUserStore<TModuleUser, TUserKey, TModuleKey>.ModuleUsers
  nameWithType.vb: IModuleUserStore(Of TModuleUser, TUserKey, TModuleKey).ModuleUsers
  fullName.vb: Hybrid.Zero.Authorization.IModuleUserStore(Of TModuleUser, TUserKey, TModuleKey).ModuleUsers
- uid: Hybrid.Zero.Authorization.SecurityManagerBase`18.CheckModuleUserExists*
  commentId: Overload:Hybrid.Zero.Authorization.SecurityManagerBase`18.CheckModuleUserExists
  name: CheckModuleUserExists
  nameWithType: SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>.CheckModuleUserExists
  fullName: Hybrid.Zero.Authorization.SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>.CheckModuleUserExists
  nameWithType.vb: SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey).CheckModuleUserExists
  fullName.vb: Hybrid.Zero.Authorization.SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey).CheckModuleUserExists
- uid: Hybrid.Zero.Authorization.IModuleUserStore{{TModuleUser},{TUserKey},{TModuleKey}}.CheckModuleUserExists(System.Linq.Expressions.Expression{System.Func{{TModuleUser},System.Boolean}},System.Guid)
  commentId: M:Hybrid.Zero.Authorization.IModuleUserStore{`9,`17,`6}.CheckModuleUserExists(System.Linq.Expressions.Expression{System.Func{`9,System.Boolean}},System.Guid)
  parent: Hybrid.Zero.Authorization.IModuleUserStore{{TModuleUser},{TUserKey},{TModuleKey}}
  definition: Hybrid.Zero.Authorization.IModuleUserStore`3.CheckModuleUserExists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Guid)
  name: CheckModuleUserExists(Expression<Func<TModuleUser, Boolean>>, Guid)
  nameWithType: IModuleUserStore<TModuleUser, TUserKey, TModuleKey>.CheckModuleUserExists(Expression<Func<TModuleUser, Boolean>>, Guid)
  fullName: Hybrid.Zero.Authorization.IModuleUserStore<TModuleUser, TUserKey, TModuleKey>.CheckModuleUserExists(System.Linq.Expressions.Expression<System.Func<TModuleUser, System.Boolean>>, System.Guid)
  nameWithType.vb: IModuleUserStore(Of TModuleUser, TUserKey, TModuleKey).CheckModuleUserExists(Expression(Of Func(Of TModuleUser, Boolean)), Guid)
  fullName.vb: Hybrid.Zero.Authorization.IModuleUserStore(Of TModuleUser, TUserKey, TModuleKey).CheckModuleUserExists(System.Linq.Expressions.Expression(Of System.Func(Of TModuleUser, System.Boolean)), System.Guid)
  name.vb: CheckModuleUserExists(Expression(Of Func(Of TModuleUser, Boolean)), Guid)
  spec.csharp:
  - uid: Hybrid.Zero.Authorization.IModuleUserStore`3.CheckModuleUserExists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Guid)
    name: CheckModuleUserExists
    nameWithType: IModuleUserStore<TModuleUser, TUserKey, TModuleKey>.CheckModuleUserExists
    fullName: Hybrid.Zero.Authorization.IModuleUserStore<TModuleUser, TUserKey, TModuleKey>.CheckModuleUserExists
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModuleUser
    nameWithType: TModuleUser
    fullName: TModuleUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Zero.Authorization.IModuleUserStore`3.CheckModuleUserExists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Guid)
    name: CheckModuleUserExists
    nameWithType: IModuleUserStore(Of TModuleUser, TUserKey, TModuleKey).CheckModuleUserExists
    fullName: Hybrid.Zero.Authorization.IModuleUserStore(Of TModuleUser, TUserKey, TModuleKey).CheckModuleUserExists
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModuleUser
    nameWithType: TModuleUser
    fullName: TModuleUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{TModuleUser},System.Boolean}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TModuleUser, Boolean>>
  nameWithType: Expression<Func<TModuleUser, Boolean>>
  fullName: System.Linq.Expressions.Expression<System.Func<TModuleUser, System.Boolean>>
  nameWithType.vb: Expression(Of Func(Of TModuleUser, Boolean))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TModuleUser, System.Boolean))
  name.vb: Expression(Of Func(Of TModuleUser, Boolean))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModuleUser
    nameWithType: TModuleUser
    fullName: TModuleUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModuleUser
    nameWithType: TModuleUser
    fullName: TModuleUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Authorization.IModuleUserStore`3.CheckModuleUserExists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Guid)
  commentId: M:Hybrid.Zero.Authorization.IModuleUserStore`3.CheckModuleUserExists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Guid)
  isExternal: true
  name: CheckModuleUserExists(Expression<Func<TModuleUser, Boolean>>, Guid)
  nameWithType: IModuleUserStore<TModuleUser, TUserKey, TModuleKey>.CheckModuleUserExists(Expression<Func<TModuleUser, Boolean>>, Guid)
  fullName: Hybrid.Zero.Authorization.IModuleUserStore<TModuleUser, TUserKey, TModuleKey>.CheckModuleUserExists(System.Linq.Expressions.Expression<System.Func<TModuleUser, System.Boolean>>, System.Guid)
  nameWithType.vb: IModuleUserStore(Of TModuleUser, TUserKey, TModuleKey).CheckModuleUserExists(Expression(Of Func(Of TModuleUser, Boolean)), Guid)
  fullName.vb: Hybrid.Zero.Authorization.IModuleUserStore(Of TModuleUser, TUserKey, TModuleKey).CheckModuleUserExists(System.Linq.Expressions.Expression(Of System.Func(Of TModuleUser, System.Boolean)), System.Guid)
  name.vb: CheckModuleUserExists(Expression(Of Func(Of TModuleUser, Boolean)), Guid)
  spec.csharp:
  - uid: Hybrid.Zero.Authorization.IModuleUserStore`3.CheckModuleUserExists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Guid)
    name: CheckModuleUserExists
    nameWithType: IModuleUserStore<TModuleUser, TUserKey, TModuleKey>.CheckModuleUserExists
    fullName: Hybrid.Zero.Authorization.IModuleUserStore<TModuleUser, TUserKey, TModuleKey>.CheckModuleUserExists
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModuleUser
    nameWithType: TModuleUser
    fullName: TModuleUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Zero.Authorization.IModuleUserStore`3.CheckModuleUserExists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Guid)
    name: CheckModuleUserExists
    nameWithType: IModuleUserStore(Of TModuleUser, TUserKey, TModuleKey).CheckModuleUserExists
    fullName: Hybrid.Zero.Authorization.IModuleUserStore(Of TModuleUser, TUserKey, TModuleKey).CheckModuleUserExists
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModuleUser
    nameWithType: TModuleUser
    fullName: TModuleUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Authorization.SecurityManagerBase`18.SetUserModules*
  commentId: Overload:Hybrid.Zero.Authorization.SecurityManagerBase`18.SetUserModules
  name: SetUserModules
  nameWithType: SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>.SetUserModules
  fullName: Hybrid.Zero.Authorization.SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>.SetUserModules
  nameWithType.vb: SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey).SetUserModules
  fullName.vb: Hybrid.Zero.Authorization.SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey).SetUserModules
- uid: Hybrid.Zero.Authorization.IModuleUserStore{{TModuleUser},{TUserKey},{TModuleKey}}.SetUserModules({TUserKey},{TModuleKey}[])
  commentId: M:Hybrid.Zero.Authorization.IModuleUserStore{`9,`17,`6}.SetUserModules(`17,`6[])
  parent: Hybrid.Zero.Authorization.IModuleUserStore{{TModuleUser},{TUserKey},{TModuleKey}}
  definition: Hybrid.Zero.Authorization.IModuleUserStore`3.SetUserModules(`1,`2[])
  name: SetUserModules(TUserKey, TModuleKey[])
  nameWithType: IModuleUserStore<TModuleUser, TUserKey, TModuleKey>.SetUserModules(TUserKey, TModuleKey[])
  fullName: Hybrid.Zero.Authorization.IModuleUserStore<TModuleUser, TUserKey, TModuleKey>.SetUserModules(TUserKey, TModuleKey[])
  nameWithType.vb: IModuleUserStore(Of TModuleUser, TUserKey, TModuleKey).SetUserModules(TUserKey, TModuleKey())
  fullName.vb: Hybrid.Zero.Authorization.IModuleUserStore(Of TModuleUser, TUserKey, TModuleKey).SetUserModules(TUserKey, TModuleKey())
  name.vb: SetUserModules(TUserKey, TModuleKey())
  spec.csharp:
  - uid: Hybrid.Zero.Authorization.IModuleUserStore`3.SetUserModules(`1,`2[])
    name: SetUserModules
    nameWithType: IModuleUserStore<TModuleUser, TUserKey, TModuleKey>.SetUserModules
    fullName: Hybrid.Zero.Authorization.IModuleUserStore<TModuleUser, TUserKey, TModuleKey>.SetUserModules
  - name: (
    nameWithType: (
    fullName: (
  - name: TUserKey
    nameWithType: TUserKey
    fullName: TUserKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleKey
    nameWithType: TModuleKey
    fullName: TModuleKey
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Zero.Authorization.IModuleUserStore`3.SetUserModules(`1,`2[])
    name: SetUserModules
    nameWithType: IModuleUserStore(Of TModuleUser, TUserKey, TModuleKey).SetUserModules
    fullName: Hybrid.Zero.Authorization.IModuleUserStore(Of TModuleUser, TUserKey, TModuleKey).SetUserModules
  - name: (
    nameWithType: (
    fullName: (
  - name: TUserKey
    nameWithType: TUserKey
    fullName: TUserKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleKey
    nameWithType: TModuleKey
    fullName: TModuleKey
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TUserKey}'
  commentId: '!:TUserKey'
  definition: TUserKey
  name: TUserKey
  nameWithType: TUserKey
  fullName: TUserKey
- uid: Hybrid.Zero.Authorization.IModuleUserStore`3.SetUserModules(`1,`2[])
  commentId: M:Hybrid.Zero.Authorization.IModuleUserStore`3.SetUserModules(`1,`2[])
  name: SetUserModules(TUserKey, TModuleKey[])
  nameWithType: IModuleUserStore<TModuleUser, TUserKey, TModuleKey>.SetUserModules(TUserKey, TModuleKey[])
  fullName: Hybrid.Zero.Authorization.IModuleUserStore<TModuleUser, TUserKey, TModuleKey>.SetUserModules(TUserKey, TModuleKey[])
  nameWithType.vb: IModuleUserStore(Of TModuleUser, TUserKey, TModuleKey).SetUserModules(TUserKey, TModuleKey())
  fullName.vb: Hybrid.Zero.Authorization.IModuleUserStore(Of TModuleUser, TUserKey, TModuleKey).SetUserModules(TUserKey, TModuleKey())
  name.vb: SetUserModules(TUserKey, TModuleKey())
  spec.csharp:
  - uid: Hybrid.Zero.Authorization.IModuleUserStore`3.SetUserModules(`1,`2[])
    name: SetUserModules
    nameWithType: IModuleUserStore<TModuleUser, TUserKey, TModuleKey>.SetUserModules
    fullName: Hybrid.Zero.Authorization.IModuleUserStore<TModuleUser, TUserKey, TModuleKey>.SetUserModules
  - name: (
    nameWithType: (
    fullName: (
  - name: TUserKey
    nameWithType: TUserKey
    fullName: TUserKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleKey
    nameWithType: TModuleKey
    fullName: TModuleKey
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Zero.Authorization.IModuleUserStore`3.SetUserModules(`1,`2[])
    name: SetUserModules
    nameWithType: IModuleUserStore(Of TModuleUser, TUserKey, TModuleKey).SetUserModules
    fullName: Hybrid.Zero.Authorization.IModuleUserStore(Of TModuleUser, TUserKey, TModuleKey).SetUserModules
  - name: (
    nameWithType: (
    fullName: (
  - name: TUserKey
    nameWithType: TUserKey
    fullName: TUserKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModuleKey
    nameWithType: TModuleKey
    fullName: TModuleKey
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: TUserKey
  name: TUserKey
  nameWithType: TUserKey
  fullName: TUserKey
- uid: Hybrid.Zero.Authorization.SecurityManagerBase`18.GetUserSelfModuleIds*
  commentId: Overload:Hybrid.Zero.Authorization.SecurityManagerBase`18.GetUserSelfModuleIds
  name: GetUserSelfModuleIds
  nameWithType: SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>.GetUserSelfModuleIds
  fullName: Hybrid.Zero.Authorization.SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>.GetUserSelfModuleIds
  nameWithType.vb: SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey).GetUserSelfModuleIds
  fullName.vb: Hybrid.Zero.Authorization.SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey).GetUserSelfModuleIds
- uid: Hybrid.Zero.Authorization.IModuleUserStore{{TModuleUser},{TUserKey},{TModuleKey}}.GetUserSelfModuleIds({TUserKey})
  commentId: M:Hybrid.Zero.Authorization.IModuleUserStore{`9,`17,`6}.GetUserSelfModuleIds(`17)
  parent: Hybrid.Zero.Authorization.IModuleUserStore{{TModuleUser},{TUserKey},{TModuleKey}}
  definition: Hybrid.Zero.Authorization.IModuleUserStore`3.GetUserSelfModuleIds(`1)
  name: GetUserSelfModuleIds(TUserKey)
  nameWithType: IModuleUserStore<TModuleUser, TUserKey, TModuleKey>.GetUserSelfModuleIds(TUserKey)
  fullName: Hybrid.Zero.Authorization.IModuleUserStore<TModuleUser, TUserKey, TModuleKey>.GetUserSelfModuleIds(TUserKey)
  nameWithType.vb: IModuleUserStore(Of TModuleUser, TUserKey, TModuleKey).GetUserSelfModuleIds(TUserKey)
  fullName.vb: Hybrid.Zero.Authorization.IModuleUserStore(Of TModuleUser, TUserKey, TModuleKey).GetUserSelfModuleIds(TUserKey)
  spec.csharp:
  - uid: Hybrid.Zero.Authorization.IModuleUserStore`3.GetUserSelfModuleIds(`1)
    name: GetUserSelfModuleIds
    nameWithType: IModuleUserStore<TModuleUser, TUserKey, TModuleKey>.GetUserSelfModuleIds
    fullName: Hybrid.Zero.Authorization.IModuleUserStore<TModuleUser, TUserKey, TModuleKey>.GetUserSelfModuleIds
  - name: (
    nameWithType: (
    fullName: (
  - name: TUserKey
    nameWithType: TUserKey
    fullName: TUserKey
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Zero.Authorization.IModuleUserStore`3.GetUserSelfModuleIds(`1)
    name: GetUserSelfModuleIds
    nameWithType: IModuleUserStore(Of TModuleUser, TUserKey, TModuleKey).GetUserSelfModuleIds
    fullName: Hybrid.Zero.Authorization.IModuleUserStore(Of TModuleUser, TUserKey, TModuleKey).GetUserSelfModuleIds
  - name: (
    nameWithType: (
    fullName: (
  - name: TUserKey
    nameWithType: TUserKey
    fullName: TUserKey
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Authorization.IModuleUserStore`3.GetUserSelfModuleIds(`1)
  commentId: M:Hybrid.Zero.Authorization.IModuleUserStore`3.GetUserSelfModuleIds(`1)
  name: GetUserSelfModuleIds(TUserKey)
  nameWithType: IModuleUserStore<TModuleUser, TUserKey, TModuleKey>.GetUserSelfModuleIds(TUserKey)
  fullName: Hybrid.Zero.Authorization.IModuleUserStore<TModuleUser, TUserKey, TModuleKey>.GetUserSelfModuleIds(TUserKey)
  nameWithType.vb: IModuleUserStore(Of TModuleUser, TUserKey, TModuleKey).GetUserSelfModuleIds(TUserKey)
  fullName.vb: Hybrid.Zero.Authorization.IModuleUserStore(Of TModuleUser, TUserKey, TModuleKey).GetUserSelfModuleIds(TUserKey)
  spec.csharp:
  - uid: Hybrid.Zero.Authorization.IModuleUserStore`3.GetUserSelfModuleIds(`1)
    name: GetUserSelfModuleIds
    nameWithType: IModuleUserStore<TModuleUser, TUserKey, TModuleKey>.GetUserSelfModuleIds
    fullName: Hybrid.Zero.Authorization.IModuleUserStore<TModuleUser, TUserKey, TModuleKey>.GetUserSelfModuleIds
  - name: (
    nameWithType: (
    fullName: (
  - name: TUserKey
    nameWithType: TUserKey
    fullName: TUserKey
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Zero.Authorization.IModuleUserStore`3.GetUserSelfModuleIds(`1)
    name: GetUserSelfModuleIds
    nameWithType: IModuleUserStore(Of TModuleUser, TUserKey, TModuleKey).GetUserSelfModuleIds
    fullName: Hybrid.Zero.Authorization.IModuleUserStore(Of TModuleUser, TUserKey, TModuleKey).GetUserSelfModuleIds
  - name: (
    nameWithType: (
    fullName: (
  - name: TUserKey
    nameWithType: TUserKey
    fullName: TUserKey
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Authorization.SecurityManagerBase`18.GetUserWithRoleModuleIds*
  commentId: Overload:Hybrid.Zero.Authorization.SecurityManagerBase`18.GetUserWithRoleModuleIds
  name: GetUserWithRoleModuleIds
  nameWithType: SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>.GetUserWithRoleModuleIds
  fullName: Hybrid.Zero.Authorization.SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>.GetUserWithRoleModuleIds
  nameWithType.vb: SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey).GetUserWithRoleModuleIds
  fullName.vb: Hybrid.Zero.Authorization.SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey).GetUserWithRoleModuleIds
- uid: Hybrid.Zero.Authorization.IModuleUserStore{{TModuleUser},{TUserKey},{TModuleKey}}.GetUserWithRoleModuleIds({TUserKey})
  commentId: M:Hybrid.Zero.Authorization.IModuleUserStore{`9,`17,`6}.GetUserWithRoleModuleIds(`17)
  parent: Hybrid.Zero.Authorization.IModuleUserStore{{TModuleUser},{TUserKey},{TModuleKey}}
  definition: Hybrid.Zero.Authorization.IModuleUserStore`3.GetUserWithRoleModuleIds(`1)
  name: GetUserWithRoleModuleIds(TUserKey)
  nameWithType: IModuleUserStore<TModuleUser, TUserKey, TModuleKey>.GetUserWithRoleModuleIds(TUserKey)
  fullName: Hybrid.Zero.Authorization.IModuleUserStore<TModuleUser, TUserKey, TModuleKey>.GetUserWithRoleModuleIds(TUserKey)
  nameWithType.vb: IModuleUserStore(Of TModuleUser, TUserKey, TModuleKey).GetUserWithRoleModuleIds(TUserKey)
  fullName.vb: Hybrid.Zero.Authorization.IModuleUserStore(Of TModuleUser, TUserKey, TModuleKey).GetUserWithRoleModuleIds(TUserKey)
  spec.csharp:
  - uid: Hybrid.Zero.Authorization.IModuleUserStore`3.GetUserWithRoleModuleIds(`1)
    name: GetUserWithRoleModuleIds
    nameWithType: IModuleUserStore<TModuleUser, TUserKey, TModuleKey>.GetUserWithRoleModuleIds
    fullName: Hybrid.Zero.Authorization.IModuleUserStore<TModuleUser, TUserKey, TModuleKey>.GetUserWithRoleModuleIds
  - name: (
    nameWithType: (
    fullName: (
  - name: TUserKey
    nameWithType: TUserKey
    fullName: TUserKey
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Zero.Authorization.IModuleUserStore`3.GetUserWithRoleModuleIds(`1)
    name: GetUserWithRoleModuleIds
    nameWithType: IModuleUserStore(Of TModuleUser, TUserKey, TModuleKey).GetUserWithRoleModuleIds
    fullName: Hybrid.Zero.Authorization.IModuleUserStore(Of TModuleUser, TUserKey, TModuleKey).GetUserWithRoleModuleIds
  - name: (
    nameWithType: (
    fullName: (
  - name: TUserKey
    nameWithType: TUserKey
    fullName: TUserKey
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Authorization.IModuleUserStore`3.GetUserWithRoleModuleIds(`1)
  commentId: M:Hybrid.Zero.Authorization.IModuleUserStore`3.GetUserWithRoleModuleIds(`1)
  name: GetUserWithRoleModuleIds(TUserKey)
  nameWithType: IModuleUserStore<TModuleUser, TUserKey, TModuleKey>.GetUserWithRoleModuleIds(TUserKey)
  fullName: Hybrid.Zero.Authorization.IModuleUserStore<TModuleUser, TUserKey, TModuleKey>.GetUserWithRoleModuleIds(TUserKey)
  nameWithType.vb: IModuleUserStore(Of TModuleUser, TUserKey, TModuleKey).GetUserWithRoleModuleIds(TUserKey)
  fullName.vb: Hybrid.Zero.Authorization.IModuleUserStore(Of TModuleUser, TUserKey, TModuleKey).GetUserWithRoleModuleIds(TUserKey)
  spec.csharp:
  - uid: Hybrid.Zero.Authorization.IModuleUserStore`3.GetUserWithRoleModuleIds(`1)
    name: GetUserWithRoleModuleIds
    nameWithType: IModuleUserStore<TModuleUser, TUserKey, TModuleKey>.GetUserWithRoleModuleIds
    fullName: Hybrid.Zero.Authorization.IModuleUserStore<TModuleUser, TUserKey, TModuleKey>.GetUserWithRoleModuleIds
  - name: (
    nameWithType: (
    fullName: (
  - name: TUserKey
    nameWithType: TUserKey
    fullName: TUserKey
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Zero.Authorization.IModuleUserStore`3.GetUserWithRoleModuleIds(`1)
    name: GetUserWithRoleModuleIds
    nameWithType: IModuleUserStore(Of TModuleUser, TUserKey, TModuleKey).GetUserWithRoleModuleIds
    fullName: Hybrid.Zero.Authorization.IModuleUserStore(Of TModuleUser, TUserKey, TModuleKey).GetUserWithRoleModuleIds
  - name: (
    nameWithType: (
    fullName: (
  - name: TUserKey
    nameWithType: TUserKey
    fullName: TUserKey
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Authorization.SecurityManagerBase`18.EntityRoles*
  commentId: Overload:Hybrid.Zero.Authorization.SecurityManagerBase`18.EntityRoles
  name: EntityRoles
  nameWithType: SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>.EntityRoles
  fullName: Hybrid.Zero.Authorization.SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>.EntityRoles
  nameWithType.vb: SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey).EntityRoles
  fullName.vb: Hybrid.Zero.Authorization.SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey).EntityRoles
- uid: Hybrid.Zero.Authorization.IEntityRoleStore{{TEntityRole},{TEntityRoleInputDto},{TRoleKey}}.EntityRoles
  commentId: P:Hybrid.Zero.Authorization.IEntityRoleStore{`10,`11,`15}.EntityRoles
  parent: Hybrid.Zero.Authorization.IEntityRoleStore{{TEntityRole},{TEntityRoleInputDto},{TRoleKey}}
  definition: Hybrid.Zero.Authorization.IEntityRoleStore`3.EntityRoles
  name: EntityRoles
  nameWithType: IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>.EntityRoles
  fullName: Hybrid.Zero.Authorization.IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>.EntityRoles
  nameWithType.vb: IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey).EntityRoles
  fullName.vb: Hybrid.Zero.Authorization.IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey).EntityRoles
- uid: System.Linq.IQueryable{{TEntityRole}}
  commentId: T:System.Linq.IQueryable{`0}
  parent: System.Linq
  definition: System.Linq.IQueryable`1
  name: IQueryable<TEntityRole>
  nameWithType: IQueryable<TEntityRole>
  fullName: System.Linq.IQueryable<TEntityRole>
  nameWithType.vb: IQueryable(Of TEntityRole)
  fullName.vb: System.Linq.IQueryable(Of TEntityRole)
  name.vb: IQueryable(Of TEntityRole)
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntityRole
    nameWithType: TEntityRole
    fullName: TEntityRole
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntityRole
    nameWithType: TEntityRole
    fullName: TEntityRole
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Authorization.IEntityRoleStore`3.EntityRoles
  commentId: P:Hybrid.Zero.Authorization.IEntityRoleStore`3.EntityRoles
  name: EntityRoles
  nameWithType: IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>.EntityRoles
  fullName: Hybrid.Zero.Authorization.IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>.EntityRoles
  nameWithType.vb: IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey).EntityRoles
  fullName.vb: Hybrid.Zero.Authorization.IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey).EntityRoles
- uid: Hybrid.Zero.Authorization.SecurityManagerBase`18.CheckEntityRoleExists*
  commentId: Overload:Hybrid.Zero.Authorization.SecurityManagerBase`18.CheckEntityRoleExists
  name: CheckEntityRoleExists
  nameWithType: SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>.CheckEntityRoleExists
  fullName: Hybrid.Zero.Authorization.SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>.CheckEntityRoleExists
  nameWithType.vb: SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey).CheckEntityRoleExists
  fullName.vb: Hybrid.Zero.Authorization.SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey).CheckEntityRoleExists
- uid: Hybrid.Zero.Authorization.IEntityRoleStore{{TEntityRole},{TEntityRoleInputDto},{TRoleKey}}.CheckEntityRoleExists(System.Linq.Expressions.Expression{System.Func{{TEntityRole},System.Boolean}},System.Guid)
  commentId: M:Hybrid.Zero.Authorization.IEntityRoleStore{`10,`11,`15}.CheckEntityRoleExists(System.Linq.Expressions.Expression{System.Func{`10,System.Boolean}},System.Guid)
  parent: Hybrid.Zero.Authorization.IEntityRoleStore{{TEntityRole},{TEntityRoleInputDto},{TRoleKey}}
  definition: Hybrid.Zero.Authorization.IEntityRoleStore`3.CheckEntityRoleExists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Guid)
  name: CheckEntityRoleExists(Expression<Func<TEntityRole, Boolean>>, Guid)
  nameWithType: IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>.CheckEntityRoleExists(Expression<Func<TEntityRole, Boolean>>, Guid)
  fullName: Hybrid.Zero.Authorization.IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>.CheckEntityRoleExists(System.Linq.Expressions.Expression<System.Func<TEntityRole, System.Boolean>>, System.Guid)
  nameWithType.vb: IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey).CheckEntityRoleExists(Expression(Of Func(Of TEntityRole, Boolean)), Guid)
  fullName.vb: Hybrid.Zero.Authorization.IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey).CheckEntityRoleExists(System.Linq.Expressions.Expression(Of System.Func(Of TEntityRole, System.Boolean)), System.Guid)
  name.vb: CheckEntityRoleExists(Expression(Of Func(Of TEntityRole, Boolean)), Guid)
  spec.csharp:
  - uid: Hybrid.Zero.Authorization.IEntityRoleStore`3.CheckEntityRoleExists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Guid)
    name: CheckEntityRoleExists
    nameWithType: IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>.CheckEntityRoleExists
    fullName: Hybrid.Zero.Authorization.IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>.CheckEntityRoleExists
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntityRole
    nameWithType: TEntityRole
    fullName: TEntityRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Zero.Authorization.IEntityRoleStore`3.CheckEntityRoleExists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Guid)
    name: CheckEntityRoleExists
    nameWithType: IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey).CheckEntityRoleExists
    fullName: Hybrid.Zero.Authorization.IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey).CheckEntityRoleExists
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntityRole
    nameWithType: TEntityRole
    fullName: TEntityRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{TEntityRole},System.Boolean}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TEntityRole, Boolean>>
  nameWithType: Expression<Func<TEntityRole, Boolean>>
  fullName: System.Linq.Expressions.Expression<System.Func<TEntityRole, System.Boolean>>
  nameWithType.vb: Expression(Of Func(Of TEntityRole, Boolean))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TEntityRole, System.Boolean))
  name.vb: Expression(Of Func(Of TEntityRole, Boolean))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntityRole
    nameWithType: TEntityRole
    fullName: TEntityRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntityRole
    nameWithType: TEntityRole
    fullName: TEntityRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Authorization.IEntityRoleStore`3.CheckEntityRoleExists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Guid)
  commentId: M:Hybrid.Zero.Authorization.IEntityRoleStore`3.CheckEntityRoleExists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Guid)
  isExternal: true
  name: CheckEntityRoleExists(Expression<Func<TEntityRole, Boolean>>, Guid)
  nameWithType: IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>.CheckEntityRoleExists(Expression<Func<TEntityRole, Boolean>>, Guid)
  fullName: Hybrid.Zero.Authorization.IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>.CheckEntityRoleExists(System.Linq.Expressions.Expression<System.Func<TEntityRole, System.Boolean>>, System.Guid)
  nameWithType.vb: IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey).CheckEntityRoleExists(Expression(Of Func(Of TEntityRole, Boolean)), Guid)
  fullName.vb: Hybrid.Zero.Authorization.IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey).CheckEntityRoleExists(System.Linq.Expressions.Expression(Of System.Func(Of TEntityRole, System.Boolean)), System.Guid)
  name.vb: CheckEntityRoleExists(Expression(Of Func(Of TEntityRole, Boolean)), Guid)
  spec.csharp:
  - uid: Hybrid.Zero.Authorization.IEntityRoleStore`3.CheckEntityRoleExists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Guid)
    name: CheckEntityRoleExists
    nameWithType: IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>.CheckEntityRoleExists
    fullName: Hybrid.Zero.Authorization.IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>.CheckEntityRoleExists
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntityRole
    nameWithType: TEntityRole
    fullName: TEntityRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Zero.Authorization.IEntityRoleStore`3.CheckEntityRoleExists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Guid)
    name: CheckEntityRoleExists
    nameWithType: IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey).CheckEntityRoleExists
    fullName: Hybrid.Zero.Authorization.IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey).CheckEntityRoleExists
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntityRole
    nameWithType: TEntityRole
    fullName: TEntityRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Authorization.SecurityManagerBase`18.GetEntityRoleFilterGroups*
  commentId: Overload:Hybrid.Zero.Authorization.SecurityManagerBase`18.GetEntityRoleFilterGroups
  name: GetEntityRoleFilterGroups
  nameWithType: SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>.GetEntityRoleFilterGroups
  fullName: Hybrid.Zero.Authorization.SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>.GetEntityRoleFilterGroups
  nameWithType.vb: SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey).GetEntityRoleFilterGroups
  fullName.vb: Hybrid.Zero.Authorization.SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey).GetEntityRoleFilterGroups
- uid: Hybrid.Zero.Authorization.IEntityRoleStore{{TEntityRole},{TEntityRoleInputDto},{TRoleKey}}.GetEntityRoleFilterGroups({TRoleKey},System.Guid,Hybrid.Authorization.DataAuthOperation)
  commentId: M:Hybrid.Zero.Authorization.IEntityRoleStore{`10,`11,`15}.GetEntityRoleFilterGroups(`15,System.Guid,Hybrid.Authorization.DataAuthOperation)
  parent: Hybrid.Zero.Authorization.IEntityRoleStore{{TEntityRole},{TEntityRoleInputDto},{TRoleKey}}
  definition: Hybrid.Zero.Authorization.IEntityRoleStore`3.GetEntityRoleFilterGroups(`2,System.Guid,Hybrid.Authorization.DataAuthOperation)
  name: GetEntityRoleFilterGroups(TRoleKey, Guid, DataAuthOperation)
  nameWithType: IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>.GetEntityRoleFilterGroups(TRoleKey, Guid, DataAuthOperation)
  fullName: Hybrid.Zero.Authorization.IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>.GetEntityRoleFilterGroups(TRoleKey, System.Guid, Hybrid.Authorization.DataAuthOperation)
  nameWithType.vb: IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey).GetEntityRoleFilterGroups(TRoleKey, Guid, DataAuthOperation)
  fullName.vb: Hybrid.Zero.Authorization.IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey).GetEntityRoleFilterGroups(TRoleKey, System.Guid, Hybrid.Authorization.DataAuthOperation)
  spec.csharp:
  - uid: Hybrid.Zero.Authorization.IEntityRoleStore`3.GetEntityRoleFilterGroups(`2,System.Guid,Hybrid.Authorization.DataAuthOperation)
    name: GetEntityRoleFilterGroups
    nameWithType: IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>.GetEntityRoleFilterGroups
    fullName: Hybrid.Zero.Authorization.IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>.GetEntityRoleFilterGroups
  - name: (
    nameWithType: (
    fullName: (
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Hybrid.Authorization.DataAuthOperation
    name: DataAuthOperation
    nameWithType: DataAuthOperation
    fullName: Hybrid.Authorization.DataAuthOperation
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Zero.Authorization.IEntityRoleStore`3.GetEntityRoleFilterGroups(`2,System.Guid,Hybrid.Authorization.DataAuthOperation)
    name: GetEntityRoleFilterGroups
    nameWithType: IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey).GetEntityRoleFilterGroups
    fullName: Hybrid.Zero.Authorization.IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey).GetEntityRoleFilterGroups
  - name: (
    nameWithType: (
    fullName: (
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Hybrid.Authorization.DataAuthOperation
    name: DataAuthOperation
    nameWithType: DataAuthOperation
    fullName: Hybrid.Authorization.DataAuthOperation
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Authorization.DataAuthOperation
  commentId: T:Hybrid.Authorization.DataAuthOperation
  parent: Hybrid.Authorization
  name: DataAuthOperation
  nameWithType: DataAuthOperation
  fullName: Hybrid.Authorization.DataAuthOperation
- uid: Hybrid.Filter.FilterGroup[]
  isExternal: true
  name: FilterGroup[]
  nameWithType: FilterGroup[]
  fullName: Hybrid.Filter.FilterGroup[]
  nameWithType.vb: FilterGroup()
  fullName.vb: Hybrid.Filter.FilterGroup()
  name.vb: FilterGroup()
  spec.csharp:
  - uid: Hybrid.Filter.FilterGroup
    name: FilterGroup
    nameWithType: FilterGroup
    fullName: Hybrid.Filter.FilterGroup
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: Hybrid.Filter.FilterGroup
    name: FilterGroup
    nameWithType: FilterGroup
    fullName: Hybrid.Filter.FilterGroup
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Hybrid.Zero.Authorization.IEntityRoleStore`3.GetEntityRoleFilterGroups(`2,System.Guid,Hybrid.Authorization.DataAuthOperation)
  commentId: M:Hybrid.Zero.Authorization.IEntityRoleStore`3.GetEntityRoleFilterGroups(`2,System.Guid,Hybrid.Authorization.DataAuthOperation)
  isExternal: true
  name: GetEntityRoleFilterGroups(TRoleKey, Guid, DataAuthOperation)
  nameWithType: IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>.GetEntityRoleFilterGroups(TRoleKey, Guid, DataAuthOperation)
  fullName: Hybrid.Zero.Authorization.IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>.GetEntityRoleFilterGroups(TRoleKey, System.Guid, Hybrid.Authorization.DataAuthOperation)
  nameWithType.vb: IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey).GetEntityRoleFilterGroups(TRoleKey, Guid, DataAuthOperation)
  fullName.vb: Hybrid.Zero.Authorization.IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey).GetEntityRoleFilterGroups(TRoleKey, System.Guid, Hybrid.Authorization.DataAuthOperation)
  spec.csharp:
  - uid: Hybrid.Zero.Authorization.IEntityRoleStore`3.GetEntityRoleFilterGroups(`2,System.Guid,Hybrid.Authorization.DataAuthOperation)
    name: GetEntityRoleFilterGroups
    nameWithType: IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>.GetEntityRoleFilterGroups
    fullName: Hybrid.Zero.Authorization.IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>.GetEntityRoleFilterGroups
  - name: (
    nameWithType: (
    fullName: (
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Hybrid.Authorization.DataAuthOperation
    name: DataAuthOperation
    nameWithType: DataAuthOperation
    fullName: Hybrid.Authorization.DataAuthOperation
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Zero.Authorization.IEntityRoleStore`3.GetEntityRoleFilterGroups(`2,System.Guid,Hybrid.Authorization.DataAuthOperation)
    name: GetEntityRoleFilterGroups
    nameWithType: IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey).GetEntityRoleFilterGroups
    fullName: Hybrid.Zero.Authorization.IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey).GetEntityRoleFilterGroups
  - name: (
    nameWithType: (
    fullName: (
  - name: TRoleKey
    nameWithType: TRoleKey
    fullName: TRoleKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Hybrid.Authorization.DataAuthOperation
    name: DataAuthOperation
    nameWithType: DataAuthOperation
    fullName: Hybrid.Authorization.DataAuthOperation
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Authorization
  commentId: N:Hybrid.Authorization
  name: Hybrid.Authorization
  nameWithType: Hybrid.Authorization
  fullName: Hybrid.Authorization
- uid: Hybrid.Zero.Authorization.SecurityManagerBase`18.CreateEntityRoles*
  commentId: Overload:Hybrid.Zero.Authorization.SecurityManagerBase`18.CreateEntityRoles
  name: CreateEntityRoles
  nameWithType: SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>.CreateEntityRoles
  fullName: Hybrid.Zero.Authorization.SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>.CreateEntityRoles
  nameWithType.vb: SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey).CreateEntityRoles
  fullName.vb: Hybrid.Zero.Authorization.SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey).CreateEntityRoles
- uid: Hybrid.Zero.Authorization.IEntityRoleStore{{TEntityRole},{TEntityRoleInputDto},{TRoleKey}}.CreateEntityRoles({TEntityRoleInputDto}[])
  commentId: M:Hybrid.Zero.Authorization.IEntityRoleStore{`10,`11,`15}.CreateEntityRoles(`11[])
  parent: Hybrid.Zero.Authorization.IEntityRoleStore{{TEntityRole},{TEntityRoleInputDto},{TRoleKey}}
  definition: Hybrid.Zero.Authorization.IEntityRoleStore`3.CreateEntityRoles(`1[])
  name: CreateEntityRoles(TEntityRoleInputDto[])
  nameWithType: IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>.CreateEntityRoles(TEntityRoleInputDto[])
  fullName: Hybrid.Zero.Authorization.IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>.CreateEntityRoles(TEntityRoleInputDto[])
  nameWithType.vb: IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey).CreateEntityRoles(TEntityRoleInputDto())
  fullName.vb: Hybrid.Zero.Authorization.IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey).CreateEntityRoles(TEntityRoleInputDto())
  name.vb: CreateEntityRoles(TEntityRoleInputDto())
  spec.csharp:
  - uid: Hybrid.Zero.Authorization.IEntityRoleStore`3.CreateEntityRoles(`1[])
    name: CreateEntityRoles
    nameWithType: IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>.CreateEntityRoles
    fullName: Hybrid.Zero.Authorization.IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>.CreateEntityRoles
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntityRoleInputDto
    nameWithType: TEntityRoleInputDto
    fullName: TEntityRoleInputDto
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Zero.Authorization.IEntityRoleStore`3.CreateEntityRoles(`1[])
    name: CreateEntityRoles
    nameWithType: IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey).CreateEntityRoles
    fullName: Hybrid.Zero.Authorization.IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey).CreateEntityRoles
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntityRoleInputDto
    nameWithType: TEntityRoleInputDto
    fullName: TEntityRoleInputDto
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TEntityRoleInputDto}[]'
  isExternal: true
  name: TEntityRoleInputDto[]
  nameWithType: TEntityRoleInputDto[]
  fullName: TEntityRoleInputDto[]
  nameWithType.vb: TEntityRoleInputDto()
  fullName.vb: TEntityRoleInputDto()
  name.vb: TEntityRoleInputDto()
  spec.csharp:
  - name: TEntityRoleInputDto
    nameWithType: TEntityRoleInputDto
    fullName: TEntityRoleInputDto
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - name: TEntityRoleInputDto
    nameWithType: TEntityRoleInputDto
    fullName: TEntityRoleInputDto
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Hybrid.Zero.Authorization.IEntityRoleStore`3.CreateEntityRoles(`1[])
  commentId: M:Hybrid.Zero.Authorization.IEntityRoleStore`3.CreateEntityRoles(`1[])
  name: CreateEntityRoles(TEntityRoleInputDto[])
  nameWithType: IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>.CreateEntityRoles(TEntityRoleInputDto[])
  fullName: Hybrid.Zero.Authorization.IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>.CreateEntityRoles(TEntityRoleInputDto[])
  nameWithType.vb: IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey).CreateEntityRoles(TEntityRoleInputDto())
  fullName.vb: Hybrid.Zero.Authorization.IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey).CreateEntityRoles(TEntityRoleInputDto())
  name.vb: CreateEntityRoles(TEntityRoleInputDto())
  spec.csharp:
  - uid: Hybrid.Zero.Authorization.IEntityRoleStore`3.CreateEntityRoles(`1[])
    name: CreateEntityRoles
    nameWithType: IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>.CreateEntityRoles
    fullName: Hybrid.Zero.Authorization.IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>.CreateEntityRoles
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntityRoleInputDto
    nameWithType: TEntityRoleInputDto
    fullName: TEntityRoleInputDto
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Zero.Authorization.IEntityRoleStore`3.CreateEntityRoles(`1[])
    name: CreateEntityRoles
    nameWithType: IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey).CreateEntityRoles
    fullName: Hybrid.Zero.Authorization.IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey).CreateEntityRoles
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntityRoleInputDto
    nameWithType: TEntityRoleInputDto
    fullName: TEntityRoleInputDto
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Authorization.SecurityManagerBase`18.UpdateEntityRoles*
  commentId: Overload:Hybrid.Zero.Authorization.SecurityManagerBase`18.UpdateEntityRoles
  name: UpdateEntityRoles
  nameWithType: SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>.UpdateEntityRoles
  fullName: Hybrid.Zero.Authorization.SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>.UpdateEntityRoles
  nameWithType.vb: SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey).UpdateEntityRoles
  fullName.vb: Hybrid.Zero.Authorization.SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey).UpdateEntityRoles
- uid: Hybrid.Zero.Authorization.IEntityRoleStore{{TEntityRole},{TEntityRoleInputDto},{TRoleKey}}.UpdateEntityRoles({TEntityRoleInputDto}[])
  commentId: M:Hybrid.Zero.Authorization.IEntityRoleStore{`10,`11,`15}.UpdateEntityRoles(`11[])
  parent: Hybrid.Zero.Authorization.IEntityRoleStore{{TEntityRole},{TEntityRoleInputDto},{TRoleKey}}
  definition: Hybrid.Zero.Authorization.IEntityRoleStore`3.UpdateEntityRoles(`1[])
  name: UpdateEntityRoles(TEntityRoleInputDto[])
  nameWithType: IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>.UpdateEntityRoles(TEntityRoleInputDto[])
  fullName: Hybrid.Zero.Authorization.IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>.UpdateEntityRoles(TEntityRoleInputDto[])
  nameWithType.vb: IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey).UpdateEntityRoles(TEntityRoleInputDto())
  fullName.vb: Hybrid.Zero.Authorization.IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey).UpdateEntityRoles(TEntityRoleInputDto())
  name.vb: UpdateEntityRoles(TEntityRoleInputDto())
  spec.csharp:
  - uid: Hybrid.Zero.Authorization.IEntityRoleStore`3.UpdateEntityRoles(`1[])
    name: UpdateEntityRoles
    nameWithType: IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>.UpdateEntityRoles
    fullName: Hybrid.Zero.Authorization.IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>.UpdateEntityRoles
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntityRoleInputDto
    nameWithType: TEntityRoleInputDto
    fullName: TEntityRoleInputDto
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Zero.Authorization.IEntityRoleStore`3.UpdateEntityRoles(`1[])
    name: UpdateEntityRoles
    nameWithType: IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey).UpdateEntityRoles
    fullName: Hybrid.Zero.Authorization.IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey).UpdateEntityRoles
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntityRoleInputDto
    nameWithType: TEntityRoleInputDto
    fullName: TEntityRoleInputDto
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Authorization.IEntityRoleStore`3.UpdateEntityRoles(`1[])
  commentId: M:Hybrid.Zero.Authorization.IEntityRoleStore`3.UpdateEntityRoles(`1[])
  name: UpdateEntityRoles(TEntityRoleInputDto[])
  nameWithType: IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>.UpdateEntityRoles(TEntityRoleInputDto[])
  fullName: Hybrid.Zero.Authorization.IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>.UpdateEntityRoles(TEntityRoleInputDto[])
  nameWithType.vb: IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey).UpdateEntityRoles(TEntityRoleInputDto())
  fullName.vb: Hybrid.Zero.Authorization.IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey).UpdateEntityRoles(TEntityRoleInputDto())
  name.vb: UpdateEntityRoles(TEntityRoleInputDto())
  spec.csharp:
  - uid: Hybrid.Zero.Authorization.IEntityRoleStore`3.UpdateEntityRoles(`1[])
    name: UpdateEntityRoles
    nameWithType: IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>.UpdateEntityRoles
    fullName: Hybrid.Zero.Authorization.IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>.UpdateEntityRoles
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntityRoleInputDto
    nameWithType: TEntityRoleInputDto
    fullName: TEntityRoleInputDto
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Zero.Authorization.IEntityRoleStore`3.UpdateEntityRoles(`1[])
    name: UpdateEntityRoles
    nameWithType: IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey).UpdateEntityRoles
    fullName: Hybrid.Zero.Authorization.IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey).UpdateEntityRoles
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntityRoleInputDto
    nameWithType: TEntityRoleInputDto
    fullName: TEntityRoleInputDto
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Authorization.SecurityManagerBase`18.DeleteEntityRoles*
  commentId: Overload:Hybrid.Zero.Authorization.SecurityManagerBase`18.DeleteEntityRoles
  name: DeleteEntityRoles
  nameWithType: SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>.DeleteEntityRoles
  fullName: Hybrid.Zero.Authorization.SecurityManagerBase<TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey>.DeleteEntityRoles
  nameWithType.vb: SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey).DeleteEntityRoles
  fullName.vb: Hybrid.Zero.Authorization.SecurityManagerBase(Of TFunction, TFunctionInputDto, TEntityInfo, TEntityInfoInputDto, TModule, TModuleInputDto, TModuleKey, TModuleFunction, TModuleRole, TModuleUser, TEntityRole, TEntityRoleInputDto, TUserRole, TUserRoleKey, TRole, TRoleKey, TUser, TUserKey).DeleteEntityRoles
- uid: Hybrid.Zero.Authorization.IEntityRoleStore{{TEntityRole},{TEntityRoleInputDto},{TRoleKey}}.DeleteEntityRoles(System.Guid[])
  commentId: M:Hybrid.Zero.Authorization.IEntityRoleStore{`10,`11,`15}.DeleteEntityRoles(System.Guid[])
  parent: Hybrid.Zero.Authorization.IEntityRoleStore{{TEntityRole},{TEntityRoleInputDto},{TRoleKey}}
  definition: Hybrid.Zero.Authorization.IEntityRoleStore`3.DeleteEntityRoles(System.Guid[])
  name: DeleteEntityRoles(Guid[])
  nameWithType: IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>.DeleteEntityRoles(Guid[])
  fullName: Hybrid.Zero.Authorization.IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>.DeleteEntityRoles(System.Guid[])
  nameWithType.vb: IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey).DeleteEntityRoles(Guid())
  fullName.vb: Hybrid.Zero.Authorization.IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey).DeleteEntityRoles(System.Guid())
  name.vb: DeleteEntityRoles(Guid())
  spec.csharp:
  - uid: Hybrid.Zero.Authorization.IEntityRoleStore`3.DeleteEntityRoles(System.Guid[])
    name: DeleteEntityRoles
    nameWithType: IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>.DeleteEntityRoles
    fullName: Hybrid.Zero.Authorization.IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>.DeleteEntityRoles
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Zero.Authorization.IEntityRoleStore`3.DeleteEntityRoles(System.Guid[])
    name: DeleteEntityRoles
    nameWithType: IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey).DeleteEntityRoles
    fullName: Hybrid.Zero.Authorization.IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey).DeleteEntityRoles
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Zero.Authorization.IEntityRoleStore`3.DeleteEntityRoles(System.Guid[])
  commentId: M:Hybrid.Zero.Authorization.IEntityRoleStore`3.DeleteEntityRoles(System.Guid[])
  isExternal: true
  name: DeleteEntityRoles(Guid[])
  nameWithType: IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>.DeleteEntityRoles(Guid[])
  fullName: Hybrid.Zero.Authorization.IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>.DeleteEntityRoles(System.Guid[])
  nameWithType.vb: IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey).DeleteEntityRoles(Guid())
  fullName.vb: Hybrid.Zero.Authorization.IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey).DeleteEntityRoles(System.Guid())
  name.vb: DeleteEntityRoles(Guid())
  spec.csharp:
  - uid: Hybrid.Zero.Authorization.IEntityRoleStore`3.DeleteEntityRoles(System.Guid[])
    name: DeleteEntityRoles
    nameWithType: IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>.DeleteEntityRoles
    fullName: Hybrid.Zero.Authorization.IEntityRoleStore<TEntityRole, TEntityRoleInputDto, TRoleKey>.DeleteEntityRoles
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Zero.Authorization.IEntityRoleStore`3.DeleteEntityRoles(System.Guid[])
    name: DeleteEntityRoles
    nameWithType: IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey).DeleteEntityRoles
    fullName: Hybrid.Zero.Authorization.IEntityRoleStore(Of TEntityRole, TEntityRoleInputDto, TRoleKey).DeleteEntityRoles
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
