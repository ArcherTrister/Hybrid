### YamlMime:ManagedReference
items:
- uid: Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker
  commentId: T:Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker
  id: MvcModuleInfoPicker
  parent: Hybrid.AspNetCore.Mvc
  children:
  - Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker.#ctor(System.IServiceProvider)
  - Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker.GetModule(System.Reflection.MethodInfo,Hybrid.Authorization.ModuleInfos.ModuleInfo,System.Int32)
  - Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker.GetModules(System.Type,System.String[])
  langs:
  - csharp
  - vb
  name: MvcModuleInfoPicker
  nameWithType: MvcModuleInfoPicker
  fullName: Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker
  type: Class
  source:
    remote:
      path: src/Hybrid.AspNetCore/Mvc/MvcModuleInfoPicker.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: MvcModuleInfoPicker
    path: ../src/Hybrid.AspNetCore/Mvc/MvcModuleInfoPicker.cs
    startLine: 26
  assemblies:
  - Hybrid.AspNetCore
  namespace: Hybrid.AspNetCore.Mvc
  summary: "\nMVC模块信息提取器\n"
  example: []
  syntax:
    content: 'public class MvcModuleInfoPicker : ModuleInfoPickerBase<Function>, IModuleInfoPicker'
    content.vb: >-
      Public Class MvcModuleInfoPicker
          Inherits ModuleInfoPickerBase(Of  Function)
          Implements IModuleInfoPicker
  inheritance:
  - System.Object
  - Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase{Hybrid.Authorization.Functions.Function}
  implements:
  - Hybrid.Authorization.ModuleInfos.IModuleInfoPicker
  inheritedMembers:
  - Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase{Hybrid.Authorization.Functions.Function}.Logger
  - Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase{Hybrid.Authorization.Functions.Function}.FunctionHandler
  - Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase{Hybrid.Authorization.Functions.Function}.Pickup
  - Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase{Hybrid.Authorization.Functions.Function}.GetModules(System.Type[])
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - System.Object.Hybrid.Extensions.ObjectExtensions.CastTo(System.Type)
  - System.Object.Hybrid.Extensions.ObjectExtensions.CastTo``1
  - System.Object.Hybrid.Extensions.ObjectExtensions.CastTo``1({T})
  - Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker.Hybrid.Extensions.ObjectExtensions.IsIn``1(Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker[])
  - System.Object.Hybrid.Extensions.ObjectExtensions.ToDynamic
  - Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker.Hybrid.Extensions.ObjectExtensions.DeepClone``1
  - Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker.Hybrid.Extensions.ParameterCheckExtensions.Required``1(System.Func{Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker,System.Boolean},System.String)
  - Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker.Hybrid.Extensions.ParameterCheckExtensions.Required``2(System.Func{Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker,System.Boolean},System.String)
  - Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker.Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(System.String)
  - Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker.Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker},System.Action{System.Exception},System.Action{Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker})
  - Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker.Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker},System.Action{System.Exception})
  - Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker.Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker,{TResult}},System.Action{System.Exception},System.Action{Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker})
  - Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker.Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker,{TResult}},System.Action{System.Exception})
  - Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker.Hybrid.Extensions.TryCatchExtensions.TryFinally``1(System.Action{Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker},System.Action{Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker})
  - System.Object.Hybrid.Json.JsonExtensions.ToJsonString(System.Boolean,System.Boolean)
  - System.Object.Hybrid.Mapping.MapperExtensions.MapTo``1
  - Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker.Hybrid.Mapping.MapperExtensions.MapTo``2({TTarget})
  - System.Object.Hybrid.Reflection.LockExtensions.Locking(System.Action)
  - Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker.Hybrid.Reflection.LockExtensions.Locking``1(System.Action{Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker})
  - System.Object.Hybrid.Reflection.LockExtensions.Locking``1(System.Func{{TResult}})
  - Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker.Hybrid.Reflection.LockExtensions.Locking``2(System.Func{Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker,{TResult}})
  - Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker.Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2
  - Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker.Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(System.Security.Principal.IPrincipal)
  - Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker.Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(System.Security.Principal.IPrincipal)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker.#ctor(System.IServiceProvider)
  commentId: M:Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker.#ctor(System.IServiceProvider)
  id: '#ctor(System.IServiceProvider)'
  parent: Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker
  langs:
  - csharp
  - vb
  name: MvcModuleInfoPicker(IServiceProvider)
  nameWithType: MvcModuleInfoPicker.MvcModuleInfoPicker(IServiceProvider)
  fullName: Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker.MvcModuleInfoPicker(System.IServiceProvider)
  type: Constructor
  source:
    remote:
      path: src/Hybrid.AspNetCore/Mvc/MvcModuleInfoPicker.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: .ctor
    path: ../src/Hybrid.AspNetCore/Mvc/MvcModuleInfoPicker.cs
    startLine: 31
  assemblies:
  - Hybrid.AspNetCore
  namespace: Hybrid.AspNetCore.Mvc
  summary: "\n初始化一个<xref href=\"Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase%601\" data-throw-if-not-resolved=\"false\"></xref>类型的新实例\n"
  example: []
  syntax:
    content: public MvcModuleInfoPicker(IServiceProvider serviceProvider)
    parameters:
    - id: serviceProvider
      type: System.IServiceProvider
    content.vb: Public Sub New(serviceProvider As IServiceProvider)
  overload: Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker.GetModules(System.Type,System.String[])
  commentId: M:Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker.GetModules(System.Type,System.String[])
  id: GetModules(System.Type,System.String[])
  parent: Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker
  langs:
  - csharp
  - vb
  name: GetModules(Type, String[])
  nameWithType: MvcModuleInfoPicker.GetModules(Type, String[])
  fullName: Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker.GetModules(System.Type, System.String[])
  type: Method
  source:
    remote:
      path: src/Hybrid.AspNetCore/Mvc/MvcModuleInfoPicker.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: GetModules
    path: ../src/Hybrid.AspNetCore/Mvc/MvcModuleInfoPicker.cs
    startLine: 41
  assemblies:
  - Hybrid.AspNetCore
  namespace: Hybrid.AspNetCore.Mvc
  summary: "\n重写以实现从类型中提取模块信息\n"
  example: []
  syntax:
    content: protected override ModuleInfo[] GetModules(Type type, string[] existPaths)
    parameters:
    - id: type
      type: System.Type
      description: 类型信息
    - id: existPaths
      type: System.String[]
      description: 已存在的路径集合
    return:
      type: Hybrid.Authorization.ModuleInfos.ModuleInfo[]
      description: 提取到的模块信息
    content.vb: Protected Overrides Function GetModules(type As Type, existPaths As String()) As ModuleInfo()
  overridden: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase{Hybrid.Authorization.Functions.Function}.GetModules(System.Type,System.String[])
  overload: Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker.GetModules*
  nameWithType.vb: MvcModuleInfoPicker.GetModules(Type, String())
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
  fullName.vb: Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker.GetModules(System.Type, System.String())
  name.vb: GetModules(Type, String())
- uid: Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker.GetModule(System.Reflection.MethodInfo,Hybrid.Authorization.ModuleInfos.ModuleInfo,System.Int32)
  commentId: M:Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker.GetModule(System.Reflection.MethodInfo,Hybrid.Authorization.ModuleInfos.ModuleInfo,System.Int32)
  id: GetModule(System.Reflection.MethodInfo,Hybrid.Authorization.ModuleInfos.ModuleInfo,System.Int32)
  parent: Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker
  langs:
  - csharp
  - vb
  name: GetModule(MethodInfo, ModuleInfo, Int32)
  nameWithType: MvcModuleInfoPicker.GetModule(MethodInfo, ModuleInfo, Int32)
  fullName: Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker.GetModule(System.Reflection.MethodInfo, Hybrid.Authorization.ModuleInfos.ModuleInfo, System.Int32)
  type: Method
  source:
    remote:
      path: src/Hybrid.AspNetCore/Mvc/MvcModuleInfoPicker.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: GetModule
    path: ../src/Hybrid.AspNetCore/Mvc/MvcModuleInfoPicker.cs
    startLine: 107
  assemblies:
  - Hybrid.AspNetCore
  namespace: Hybrid.AspNetCore.Mvc
  summary: "\n重写以实现从方法信息中提取模块信息\n"
  example: []
  syntax:
    content: protected override ModuleInfo GetModule(MethodInfo method, ModuleInfo typeInfo, int index)
    parameters:
    - id: method
      type: System.Reflection.MethodInfo
      description: 方法信息
    - id: typeInfo
      type: Hybrid.Authorization.ModuleInfos.ModuleInfo
      description: 所在类型模块信息
    - id: index
      type: System.Int32
      description: 序号
    return:
      type: Hybrid.Authorization.ModuleInfos.ModuleInfo
      description: 提取到的模块信息
    content.vb: Protected Overrides Function GetModule(method As MethodInfo, typeInfo As ModuleInfo, index As Integer) As ModuleInfo
  overridden: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase{Hybrid.Authorization.Functions.Function}.GetModule(System.Reflection.MethodInfo,Hybrid.Authorization.ModuleInfos.ModuleInfo,System.Int32)
  overload: Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker.GetModule*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
references:
- uid: Hybrid.AspNetCore.Mvc
  commentId: N:Hybrid.AspNetCore.Mvc
  name: Hybrid.AspNetCore.Mvc
  nameWithType: Hybrid.AspNetCore.Mvc
  fullName: Hybrid.AspNetCore.Mvc
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase{Hybrid.Authorization.Functions.Function}
  commentId: T:Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase{Hybrid.Authorization.Functions.Function}
  parent: Hybrid.Authorization.ModuleInfos
  definition: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1
  name: ModuleInfoPickerBase<Function>
  nameWithType: ModuleInfoPickerBase<Function>
  fullName: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase<Hybrid.Authorization.Functions.Function>
  nameWithType.vb: ModuleInfoPickerBase(Of Function)
  fullName.vb: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase(Of Hybrid.Authorization.Functions.Function)
  name.vb: ModuleInfoPickerBase(Of Function)
  spec.csharp:
  - uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1
    name: ModuleInfoPickerBase
    nameWithType: ModuleInfoPickerBase
    fullName: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Authorization.Functions.Function
    name: Function
    nameWithType: Function
    fullName: Hybrid.Authorization.Functions.Function
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1
    name: ModuleInfoPickerBase
    nameWithType: ModuleInfoPickerBase
    fullName: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Authorization.Functions.Function
    name: Function
    nameWithType: Function
    fullName: Hybrid.Authorization.Functions.Function
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Authorization.ModuleInfos.IModuleInfoPicker
  commentId: T:Hybrid.Authorization.ModuleInfos.IModuleInfoPicker
  parent: Hybrid.Authorization.ModuleInfos
  name: IModuleInfoPicker
  nameWithType: IModuleInfoPicker
  fullName: Hybrid.Authorization.ModuleInfos.IModuleInfoPicker
- uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase{Hybrid.Authorization.Functions.Function}.Logger
  commentId: P:Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase{Hybrid.Authorization.Functions.Function}.Logger
  parent: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase{Hybrid.Authorization.Functions.Function}
  definition: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.Logger
  name: Logger
  nameWithType: ModuleInfoPickerBase<Function>.Logger
  fullName: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase<Hybrid.Authorization.Functions.Function>.Logger
  nameWithType.vb: ModuleInfoPickerBase(Of Function).Logger
  fullName.vb: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase(Of Hybrid.Authorization.Functions.Function).Logger
- uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase{Hybrid.Authorization.Functions.Function}.FunctionHandler
  commentId: P:Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase{Hybrid.Authorization.Functions.Function}.FunctionHandler
  parent: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase{Hybrid.Authorization.Functions.Function}
  definition: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.FunctionHandler
  name: FunctionHandler
  nameWithType: ModuleInfoPickerBase<Function>.FunctionHandler
  fullName: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase<Hybrid.Authorization.Functions.Function>.FunctionHandler
  nameWithType.vb: ModuleInfoPickerBase(Of Function).FunctionHandler
  fullName.vb: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase(Of Hybrid.Authorization.Functions.Function).FunctionHandler
- uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase{Hybrid.Authorization.Functions.Function}.Pickup
  commentId: M:Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase{Hybrid.Authorization.Functions.Function}.Pickup
  parent: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase{Hybrid.Authorization.Functions.Function}
  definition: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.Pickup
  name: Pickup()
  nameWithType: ModuleInfoPickerBase<Function>.Pickup()
  fullName: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase<Hybrid.Authorization.Functions.Function>.Pickup()
  nameWithType.vb: ModuleInfoPickerBase(Of Function).Pickup()
  fullName.vb: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase(Of Hybrid.Authorization.Functions.Function).Pickup()
  spec.csharp:
  - uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.Pickup
    name: Pickup
    nameWithType: ModuleInfoPickerBase<Function>.Pickup
    fullName: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase<Hybrid.Authorization.Functions.Function>.Pickup
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.Pickup
    name: Pickup
    nameWithType: ModuleInfoPickerBase(Of Function).Pickup
    fullName: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase(Of Hybrid.Authorization.Functions.Function).Pickup
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase{Hybrid.Authorization.Functions.Function}.GetModules(System.Type[])
  commentId: M:Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase{Hybrid.Authorization.Functions.Function}.GetModules(System.Type[])
  parent: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase{Hybrid.Authorization.Functions.Function}
  definition: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.GetModules(System.Type[])
  name: GetModules(Type[])
  nameWithType: ModuleInfoPickerBase<Function>.GetModules(Type[])
  fullName: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase<Hybrid.Authorization.Functions.Function>.GetModules(System.Type[])
  nameWithType.vb: ModuleInfoPickerBase(Of Function).GetModules(Type())
  fullName.vb: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase(Of Hybrid.Authorization.Functions.Function).GetModules(System.Type())
  name.vb: GetModules(Type())
  spec.csharp:
  - uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.GetModules(System.Type[])
    name: GetModules
    nameWithType: ModuleInfoPickerBase<Function>.GetModules
    fullName: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase<Hybrid.Authorization.Functions.Function>.GetModules
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.GetModules(System.Type[])
    name: GetModules
    nameWithType: ModuleInfoPickerBase(Of Function).GetModules
    fullName: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase(Of Hybrid.Authorization.Functions.Function).GetModules
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Extensions.ObjectExtensions.CastTo(System.Type)
  commentId: M:Hybrid.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
  parent: Hybrid.Extensions.ObjectExtensions
  definition: Hybrid.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
  name: CastTo(Type)
  nameWithType: ObjectExtensions.CastTo(Type)
  fullName: Hybrid.Extensions.ObjectExtensions.CastTo(System.Type)
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo(System.Type)
    name: CastTo
    nameWithType: ObjectExtensions.CastTo
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo(System.Type)
    name: CastTo
    nameWithType: ObjectExtensions.CastTo
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Extensions.ObjectExtensions.CastTo``1
  commentId: M:Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object)
  parent: Hybrid.Extensions.ObjectExtensions
  definition: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object)
  name: CastTo<T>()
  nameWithType: ObjectExtensions.CastTo<T>()
  fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>()
  nameWithType.vb: ObjectExtensions.CastTo(Of T)()
  fullName.vb: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)()
  name.vb: CastTo(Of T)()
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1
    name: CastTo<T>
    nameWithType: ObjectExtensions.CastTo<T>
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1
    name: CastTo(Of T)
    nameWithType: ObjectExtensions.CastTo(Of T)
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Extensions.ObjectExtensions.CastTo``1({T})
  commentId: M:Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
  parent: Hybrid.Extensions.ObjectExtensions
  definition: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
  name: CastTo<T>(T)
  nameWithType: ObjectExtensions.CastTo<T>(T)
  fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>(T)
  nameWithType.vb: ObjectExtensions.CastTo(Of T)(T)
  fullName.vb: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)(T)
  name.vb: CastTo(Of T)(T)
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(``0)
    name: CastTo<T>
    nameWithType: ObjectExtensions.CastTo<T>
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(``0)
    name: CastTo(Of T)
    nameWithType: ObjectExtensions.CastTo(Of T)
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker.Hybrid.Extensions.ObjectExtensions.IsIn``1(Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker[])
  commentId: M:Hybrid.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
  parent: Hybrid.Extensions.ObjectExtensions
  definition: Hybrid.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
  name: IsIn<MvcModuleInfoPicker>(MvcModuleInfoPicker[])
  nameWithType: ObjectExtensions.IsIn<MvcModuleInfoPicker>(MvcModuleInfoPicker[])
  fullName: Hybrid.Extensions.ObjectExtensions.IsIn<Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker>(Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker[])
  nameWithType.vb: ObjectExtensions.IsIn(Of MvcModuleInfoPicker)(MvcModuleInfoPicker())
  fullName.vb: Hybrid.Extensions.ObjectExtensions.IsIn(Of Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker)(Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker())
  name.vb: IsIn(Of MvcModuleInfoPicker)(MvcModuleInfoPicker())
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.IsIn``1(``0[])
    name: IsIn<MvcModuleInfoPicker>
    nameWithType: ObjectExtensions.IsIn<MvcModuleInfoPicker>
    fullName: Hybrid.Extensions.ObjectExtensions.IsIn<Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker
    name: MvcModuleInfoPicker
    nameWithType: MvcModuleInfoPicker
    fullName: Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.IsIn``1(``0[])
    name: IsIn(Of MvcModuleInfoPicker)
    nameWithType: ObjectExtensions.IsIn(Of MvcModuleInfoPicker)
    fullName: Hybrid.Extensions.ObjectExtensions.IsIn(Of Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker
    name: MvcModuleInfoPicker
    nameWithType: MvcModuleInfoPicker
    fullName: Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Extensions.ObjectExtensions.ToDynamic
  commentId: M:Hybrid.Extensions.ObjectExtensions.ToDynamic(System.Object)
  parent: Hybrid.Extensions.ObjectExtensions
  definition: Hybrid.Extensions.ObjectExtensions.ToDynamic(System.Object)
  name: ToDynamic()
  nameWithType: ObjectExtensions.ToDynamic()
  fullName: Hybrid.Extensions.ObjectExtensions.ToDynamic()
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.ToDynamic
    name: ToDynamic
    nameWithType: ObjectExtensions.ToDynamic
    fullName: Hybrid.Extensions.ObjectExtensions.ToDynamic
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.ToDynamic
    name: ToDynamic
    nameWithType: ObjectExtensions.ToDynamic
    fullName: Hybrid.Extensions.ObjectExtensions.ToDynamic
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker.Hybrid.Extensions.ObjectExtensions.DeepClone``1
  commentId: M:Hybrid.Extensions.ObjectExtensions.DeepClone``1(``0)
  parent: Hybrid.Extensions.ObjectExtensions
  definition: Hybrid.Extensions.ObjectExtensions.DeepClone``1(``0)
  name: DeepClone<MvcModuleInfoPicker>()
  nameWithType: ObjectExtensions.DeepClone<MvcModuleInfoPicker>()
  fullName: Hybrid.Extensions.ObjectExtensions.DeepClone<Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker>()
  nameWithType.vb: ObjectExtensions.DeepClone(Of MvcModuleInfoPicker)()
  fullName.vb: Hybrid.Extensions.ObjectExtensions.DeepClone(Of Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker)()
  name.vb: DeepClone(Of MvcModuleInfoPicker)()
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.DeepClone``1
    name: DeepClone<MvcModuleInfoPicker>
    nameWithType: ObjectExtensions.DeepClone<MvcModuleInfoPicker>
    fullName: Hybrid.Extensions.ObjectExtensions.DeepClone<Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.DeepClone``1
    name: DeepClone(Of MvcModuleInfoPicker)
    nameWithType: ObjectExtensions.DeepClone(Of MvcModuleInfoPicker)
    fullName: Hybrid.Extensions.ObjectExtensions.DeepClone(Of Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker.Hybrid.Extensions.ParameterCheckExtensions.Required``1(System.Func{Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker,System.Boolean},System.String)
  commentId: M:Hybrid.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
  parent: Hybrid.Extensions.ParameterCheckExtensions
  definition: Hybrid.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
  name: Required<MvcModuleInfoPicker>(Func<MvcModuleInfoPicker, Boolean>, String)
  nameWithType: ParameterCheckExtensions.Required<MvcModuleInfoPicker>(Func<MvcModuleInfoPicker, Boolean>, String)
  fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker>(System.Func<Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker, System.Boolean>, System.String)
  nameWithType.vb: ParameterCheckExtensions.Required(Of MvcModuleInfoPicker)(Func(Of MvcModuleInfoPicker, Boolean), String)
  fullName.vb: Hybrid.Extensions.ParameterCheckExtensions.Required(Of Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker)(System.Func(Of Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker, System.Boolean), System.String)
  name.vb: Required(Of MvcModuleInfoPicker)(Func(Of MvcModuleInfoPicker, Boolean), String)
  spec.csharp:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``1(System.Func{``0,System.Boolean},System.String)
    name: Required<MvcModuleInfoPicker>
    nameWithType: ParameterCheckExtensions.Required<MvcModuleInfoPicker>
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker
    name: MvcModuleInfoPicker
    nameWithType: MvcModuleInfoPicker
    fullName: Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``1(System.Func{``0,System.Boolean},System.String)
    name: Required(Of MvcModuleInfoPicker)
    nameWithType: ParameterCheckExtensions.Required(Of MvcModuleInfoPicker)
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required(Of Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker
    name: MvcModuleInfoPicker
    nameWithType: MvcModuleInfoPicker
    fullName: Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker.Hybrid.Extensions.ParameterCheckExtensions.Required``2(System.Func{Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker,System.Boolean},System.String)
  commentId: M:Hybrid.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
  parent: Hybrid.Extensions.ParameterCheckExtensions
  definition: Hybrid.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
  name: Required<MvcModuleInfoPicker, TException>(Func<MvcModuleInfoPicker, Boolean>, String)
  nameWithType: ParameterCheckExtensions.Required<MvcModuleInfoPicker, TException>(Func<MvcModuleInfoPicker, Boolean>, String)
  fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker, TException>(System.Func<Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker, System.Boolean>, System.String)
  nameWithType.vb: ParameterCheckExtensions.Required(Of MvcModuleInfoPicker, TException)(Func(Of MvcModuleInfoPicker, Boolean), String)
  fullName.vb: Hybrid.Extensions.ParameterCheckExtensions.Required(Of Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker, TException)(System.Func(Of Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker, System.Boolean), System.String)
  name.vb: Required(Of MvcModuleInfoPicker, TException)(Func(Of MvcModuleInfoPicker, Boolean), String)
  spec.csharp:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``2(System.Func{``0,System.Boolean},System.String)
    name: Required<MvcModuleInfoPicker, TException>
    nameWithType: ParameterCheckExtensions.Required<MvcModuleInfoPicker, TException>
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker, TException>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker
    name: MvcModuleInfoPicker
    nameWithType: MvcModuleInfoPicker
    fullName: Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``2(System.Func{``0,System.Boolean},System.String)
    name: Required(Of MvcModuleInfoPicker, TException)
    nameWithType: ParameterCheckExtensions.Required(Of MvcModuleInfoPicker, TException)
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required(Of Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker, TException)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker
    name: MvcModuleInfoPicker
    nameWithType: MvcModuleInfoPicker
    fullName: Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker.Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(System.String)
  commentId: M:Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
  parent: Hybrid.Extensions.ParameterCheckExtensions
  definition: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
  name: CheckNotNull<MvcModuleInfoPicker>(String)
  nameWithType: ParameterCheckExtensions.CheckNotNull<MvcModuleInfoPicker>(String)
  fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull<Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker>(System.String)
  nameWithType.vb: ParameterCheckExtensions.CheckNotNull(Of MvcModuleInfoPicker)(String)
  fullName.vb: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull(Of Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker)(System.String)
  name.vb: CheckNotNull(Of MvcModuleInfoPicker)(String)
  spec.csharp:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(System.String)
    name: CheckNotNull<MvcModuleInfoPicker>
    nameWithType: ParameterCheckExtensions.CheckNotNull<MvcModuleInfoPicker>
    fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull<Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(System.String)
    name: CheckNotNull(Of MvcModuleInfoPicker)
    nameWithType: ParameterCheckExtensions.CheckNotNull(Of MvcModuleInfoPicker)
    fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull(Of Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker.Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker},System.Action{System.Exception},System.Action{Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
  parent: Hybrid.Extensions.TryCatchExtensions
  definition: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
  name: TryCatch<MvcModuleInfoPicker>(Action<MvcModuleInfoPicker>, Action<Exception>, Action<MvcModuleInfoPicker>)
  nameWithType: TryCatchExtensions.TryCatch<MvcModuleInfoPicker>(Action<MvcModuleInfoPicker>, Action<Exception>, Action<MvcModuleInfoPicker>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker>(System.Action<Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker>, System.Action<System.Exception>, System.Action<Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of MvcModuleInfoPicker)(Action(Of MvcModuleInfoPicker), Action(Of Exception), Action(Of MvcModuleInfoPicker))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker)(System.Action(Of Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker), System.Action(Of System.Exception), System.Action(Of Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker))
  name.vb: TryCatch(Of MvcModuleInfoPicker)(Action(Of MvcModuleInfoPicker), Action(Of Exception), Action(Of MvcModuleInfoPicker))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{``0},System.Action{System.Exception},System.Action{``0})
    name: TryCatch<MvcModuleInfoPicker>
    nameWithType: TryCatchExtensions.TryCatch<MvcModuleInfoPicker>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker
    name: MvcModuleInfoPicker
    nameWithType: MvcModuleInfoPicker
    fullName: Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker
    name: MvcModuleInfoPicker
    nameWithType: MvcModuleInfoPicker
    fullName: Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{``0},System.Action{System.Exception},System.Action{``0})
    name: TryCatch(Of MvcModuleInfoPicker)
    nameWithType: TryCatchExtensions.TryCatch(Of MvcModuleInfoPicker)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker
    name: MvcModuleInfoPicker
    nameWithType: MvcModuleInfoPicker
    fullName: Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker
    name: MvcModuleInfoPicker
    nameWithType: MvcModuleInfoPicker
    fullName: Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker.Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker},System.Action{System.Exception})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
  parent: Hybrid.Extensions.TryCatchExtensions
  definition: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
  name: TryCatch<MvcModuleInfoPicker>(Action<MvcModuleInfoPicker>, Action<Exception>)
  nameWithType: TryCatchExtensions.TryCatch<MvcModuleInfoPicker>(Action<MvcModuleInfoPicker>, Action<Exception>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker>(System.Action<Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker>, System.Action<System.Exception>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of MvcModuleInfoPicker)(Action(Of MvcModuleInfoPicker), Action(Of Exception))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker)(System.Action(Of Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker), System.Action(Of System.Exception))
  name.vb: TryCatch(Of MvcModuleInfoPicker)(Action(Of MvcModuleInfoPicker), Action(Of Exception))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{``0},System.Action{System.Exception})
    name: TryCatch<MvcModuleInfoPicker>
    nameWithType: TryCatchExtensions.TryCatch<MvcModuleInfoPicker>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker
    name: MvcModuleInfoPicker
    nameWithType: MvcModuleInfoPicker
    fullName: Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{``0},System.Action{System.Exception})
    name: TryCatch(Of MvcModuleInfoPicker)
    nameWithType: TryCatchExtensions.TryCatch(Of MvcModuleInfoPicker)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker
    name: MvcModuleInfoPicker
    nameWithType: MvcModuleInfoPicker
    fullName: Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker.Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker,{TResult}},System.Action{System.Exception},System.Action{Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
  parent: Hybrid.Extensions.TryCatchExtensions
  definition: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
  name: TryCatch<MvcModuleInfoPicker, TResult>(Func<MvcModuleInfoPicker, TResult>, Action<Exception>, Action<MvcModuleInfoPicker>)
  nameWithType: TryCatchExtensions.TryCatch<MvcModuleInfoPicker, TResult>(Func<MvcModuleInfoPicker, TResult>, Action<Exception>, Action<MvcModuleInfoPicker>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker, TResult>(System.Func<Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker, TResult>, System.Action<System.Exception>, System.Action<Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of MvcModuleInfoPicker, TResult)(Func(Of MvcModuleInfoPicker, TResult), Action(Of Exception), Action(Of MvcModuleInfoPicker))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker, TResult)(System.Func(Of Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker, TResult), System.Action(Of System.Exception), System.Action(Of Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker))
  name.vb: TryCatch(Of MvcModuleInfoPicker, TResult)(Func(Of MvcModuleInfoPicker, TResult), Action(Of Exception), Action(Of MvcModuleInfoPicker))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
    name: TryCatch<MvcModuleInfoPicker, TResult>
    nameWithType: TryCatchExtensions.TryCatch<MvcModuleInfoPicker, TResult>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker
    name: MvcModuleInfoPicker
    nameWithType: MvcModuleInfoPicker
    fullName: Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker
    name: MvcModuleInfoPicker
    nameWithType: MvcModuleInfoPicker
    fullName: Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
    name: TryCatch(Of MvcModuleInfoPicker, TResult)
    nameWithType: TryCatchExtensions.TryCatch(Of MvcModuleInfoPicker, TResult)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker
    name: MvcModuleInfoPicker
    nameWithType: MvcModuleInfoPicker
    fullName: Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker
    name: MvcModuleInfoPicker
    nameWithType: MvcModuleInfoPicker
    fullName: Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker.Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker,{TResult}},System.Action{System.Exception})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
  parent: Hybrid.Extensions.TryCatchExtensions
  definition: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
  name: TryCatch<MvcModuleInfoPicker, TResult>(Func<MvcModuleInfoPicker, TResult>, Action<Exception>)
  nameWithType: TryCatchExtensions.TryCatch<MvcModuleInfoPicker, TResult>(Func<MvcModuleInfoPicker, TResult>, Action<Exception>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker, TResult>(System.Func<Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker, TResult>, System.Action<System.Exception>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of MvcModuleInfoPicker, TResult)(Func(Of MvcModuleInfoPicker, TResult), Action(Of Exception))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker, TResult)(System.Func(Of Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker, TResult), System.Action(Of System.Exception))
  name.vb: TryCatch(Of MvcModuleInfoPicker, TResult)(Func(Of MvcModuleInfoPicker, TResult), Action(Of Exception))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{``0,``1},System.Action{System.Exception})
    name: TryCatch<MvcModuleInfoPicker, TResult>
    nameWithType: TryCatchExtensions.TryCatch<MvcModuleInfoPicker, TResult>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker
    name: MvcModuleInfoPicker
    nameWithType: MvcModuleInfoPicker
    fullName: Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{``0,``1},System.Action{System.Exception})
    name: TryCatch(Of MvcModuleInfoPicker, TResult)
    nameWithType: TryCatchExtensions.TryCatch(Of MvcModuleInfoPicker, TResult)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker
    name: MvcModuleInfoPicker
    nameWithType: MvcModuleInfoPicker
    fullName: Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker.Hybrid.Extensions.TryCatchExtensions.TryFinally``1(System.Action{Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker},System.Action{Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
  parent: Hybrid.Extensions.TryCatchExtensions
  definition: Hybrid.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
  name: TryFinally<MvcModuleInfoPicker>(Action<MvcModuleInfoPicker>, Action<MvcModuleInfoPicker>)
  nameWithType: TryCatchExtensions.TryFinally<MvcModuleInfoPicker>(Action<MvcModuleInfoPicker>, Action<MvcModuleInfoPicker>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryFinally<Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker>(System.Action<Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker>, System.Action<Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker>)
  nameWithType.vb: TryCatchExtensions.TryFinally(Of MvcModuleInfoPicker)(Action(Of MvcModuleInfoPicker), Action(Of MvcModuleInfoPicker))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryFinally(Of Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker)(System.Action(Of Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker), System.Action(Of Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker))
  name.vb: TryFinally(Of MvcModuleInfoPicker)(Action(Of MvcModuleInfoPicker), Action(Of MvcModuleInfoPicker))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryFinally``1(System.Action{``0},System.Action{``0})
    name: TryFinally<MvcModuleInfoPicker>
    nameWithType: TryCatchExtensions.TryFinally<MvcModuleInfoPicker>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryFinally<Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker
    name: MvcModuleInfoPicker
    nameWithType: MvcModuleInfoPicker
    fullName: Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker
    name: MvcModuleInfoPicker
    nameWithType: MvcModuleInfoPicker
    fullName: Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryFinally``1(System.Action{``0},System.Action{``0})
    name: TryFinally(Of MvcModuleInfoPicker)
    nameWithType: TryCatchExtensions.TryFinally(Of MvcModuleInfoPicker)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryFinally(Of Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker
    name: MvcModuleInfoPicker
    nameWithType: MvcModuleInfoPicker
    fullName: Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker
    name: MvcModuleInfoPicker
    nameWithType: MvcModuleInfoPicker
    fullName: Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Json.JsonExtensions.ToJsonString(System.Boolean,System.Boolean)
  commentId: M:Hybrid.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
  parent: Hybrid.Json.JsonExtensions
  definition: Hybrid.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
  name: ToJsonString(Boolean, Boolean)
  nameWithType: JsonExtensions.ToJsonString(Boolean, Boolean)
  fullName: Hybrid.Json.JsonExtensions.ToJsonString(System.Boolean, System.Boolean)
  spec.csharp:
  - uid: Hybrid.Json.JsonExtensions.ToJsonString(System.Boolean,System.Boolean)
    name: ToJsonString
    nameWithType: JsonExtensions.ToJsonString
    fullName: Hybrid.Json.JsonExtensions.ToJsonString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Json.JsonExtensions.ToJsonString(System.Boolean,System.Boolean)
    name: ToJsonString
    nameWithType: JsonExtensions.ToJsonString
    fullName: Hybrid.Json.JsonExtensions.ToJsonString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Mapping.MapperExtensions.MapTo``1
  commentId: M:Hybrid.Mapping.MapperExtensions.MapTo``1(System.Object)
  parent: Hybrid.Mapping.MapperExtensions
  definition: Hybrid.Mapping.MapperExtensions.MapTo``1(System.Object)
  name: MapTo<TTarget>()
  nameWithType: MapperExtensions.MapTo<TTarget>()
  fullName: Hybrid.Mapping.MapperExtensions.MapTo<TTarget>()
  nameWithType.vb: MapperExtensions.MapTo(Of TTarget)()
  fullName.vb: Hybrid.Mapping.MapperExtensions.MapTo(Of TTarget)()
  name.vb: MapTo(Of TTarget)()
  spec.csharp:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``1
    name: MapTo<TTarget>
    nameWithType: MapperExtensions.MapTo<TTarget>
    fullName: Hybrid.Mapping.MapperExtensions.MapTo<TTarget>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``1
    name: MapTo(Of TTarget)
    nameWithType: MapperExtensions.MapTo(Of TTarget)
    fullName: Hybrid.Mapping.MapperExtensions.MapTo(Of TTarget)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker.Hybrid.Mapping.MapperExtensions.MapTo``2({TTarget})
  commentId: M:Hybrid.Mapping.MapperExtensions.MapTo``2(``0,``1)
  parent: Hybrid.Mapping.MapperExtensions
  definition: Hybrid.Mapping.MapperExtensions.MapTo``2(``0,``1)
  name: MapTo<MvcModuleInfoPicker, TTarget>(TTarget)
  nameWithType: MapperExtensions.MapTo<MvcModuleInfoPicker, TTarget>(TTarget)
  fullName: Hybrid.Mapping.MapperExtensions.MapTo<Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker, TTarget>(TTarget)
  nameWithType.vb: MapperExtensions.MapTo(Of MvcModuleInfoPicker, TTarget)(TTarget)
  fullName.vb: Hybrid.Mapping.MapperExtensions.MapTo(Of Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker, TTarget)(TTarget)
  name.vb: MapTo(Of MvcModuleInfoPicker, TTarget)(TTarget)
  spec.csharp:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``2(``1)
    name: MapTo<MvcModuleInfoPicker, TTarget>
    nameWithType: MapperExtensions.MapTo<MvcModuleInfoPicker, TTarget>
    fullName: Hybrid.Mapping.MapperExtensions.MapTo<Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker, TTarget>
  - name: (
    nameWithType: (
    fullName: (
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``2(``1)
    name: MapTo(Of MvcModuleInfoPicker, TTarget)
    nameWithType: MapperExtensions.MapTo(Of MvcModuleInfoPicker, TTarget)
    fullName: Hybrid.Mapping.MapperExtensions.MapTo(Of Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker, TTarget)
  - name: (
    nameWithType: (
    fullName: (
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Reflection.LockExtensions.Locking(System.Action)
  commentId: M:Hybrid.Reflection.LockExtensions.Locking(System.Object,System.Action)
  parent: Hybrid.Reflection.LockExtensions
  definition: Hybrid.Reflection.LockExtensions.Locking(System.Object,System.Action)
  name: Locking(Action)
  nameWithType: LockExtensions.Locking(Action)
  fullName: Hybrid.Reflection.LockExtensions.Locking(System.Action)
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking(System.Action)
    name: Locking
    nameWithType: LockExtensions.Locking
    fullName: Hybrid.Reflection.LockExtensions.Locking
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking(System.Action)
    name: Locking
    nameWithType: LockExtensions.Locking
    fullName: Hybrid.Reflection.LockExtensions.Locking
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker.Hybrid.Reflection.LockExtensions.Locking``1(System.Action{Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker})
  commentId: M:Hybrid.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
  parent: Hybrid.Reflection.LockExtensions
  definition: Hybrid.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
  name: Locking<MvcModuleInfoPicker>(Action<MvcModuleInfoPicker>)
  nameWithType: LockExtensions.Locking<MvcModuleInfoPicker>(Action<MvcModuleInfoPicker>)
  fullName: Hybrid.Reflection.LockExtensions.Locking<Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker>(System.Action<Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker>)
  nameWithType.vb: LockExtensions.Locking(Of MvcModuleInfoPicker)(Action(Of MvcModuleInfoPicker))
  fullName.vb: Hybrid.Reflection.LockExtensions.Locking(Of Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker)(System.Action(Of Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker))
  name.vb: Locking(Of MvcModuleInfoPicker)(Action(Of MvcModuleInfoPicker))
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(System.Action{``0})
    name: Locking<MvcModuleInfoPicker>
    nameWithType: LockExtensions.Locking<MvcModuleInfoPicker>
    fullName: Hybrid.Reflection.LockExtensions.Locking<Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker
    name: MvcModuleInfoPicker
    nameWithType: MvcModuleInfoPicker
    fullName: Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(System.Action{``0})
    name: Locking(Of MvcModuleInfoPicker)
    nameWithType: LockExtensions.Locking(Of MvcModuleInfoPicker)
    fullName: Hybrid.Reflection.LockExtensions.Locking(Of Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker
    name: MvcModuleInfoPicker
    nameWithType: MvcModuleInfoPicker
    fullName: Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Reflection.LockExtensions.Locking``1(System.Func{{TResult}})
  commentId: M:Hybrid.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
  parent: Hybrid.Reflection.LockExtensions
  definition: Hybrid.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
  name: Locking<TResult>(Func<TResult>)
  nameWithType: LockExtensions.Locking<TResult>(Func<TResult>)
  fullName: Hybrid.Reflection.LockExtensions.Locking<TResult>(System.Func<TResult>)
  nameWithType.vb: LockExtensions.Locking(Of TResult)(Func(Of TResult))
  fullName.vb: Hybrid.Reflection.LockExtensions.Locking(Of TResult)(System.Func(Of TResult))
  name.vb: Locking(Of TResult)(Func(Of TResult))
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(System.Func{``0})
    name: Locking<TResult>
    nameWithType: LockExtensions.Locking<TResult>
    fullName: Hybrid.Reflection.LockExtensions.Locking<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(System.Func{``0})
    name: Locking(Of TResult)
    nameWithType: LockExtensions.Locking(Of TResult)
    fullName: Hybrid.Reflection.LockExtensions.Locking(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker.Hybrid.Reflection.LockExtensions.Locking``2(System.Func{Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker,{TResult}})
  commentId: M:Hybrid.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
  parent: Hybrid.Reflection.LockExtensions
  definition: Hybrid.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
  name: Locking<MvcModuleInfoPicker, TResult>(Func<MvcModuleInfoPicker, TResult>)
  nameWithType: LockExtensions.Locking<MvcModuleInfoPicker, TResult>(Func<MvcModuleInfoPicker, TResult>)
  fullName: Hybrid.Reflection.LockExtensions.Locking<Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker, TResult>(System.Func<Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker, TResult>)
  nameWithType.vb: LockExtensions.Locking(Of MvcModuleInfoPicker, TResult)(Func(Of MvcModuleInfoPicker, TResult))
  fullName.vb: Hybrid.Reflection.LockExtensions.Locking(Of Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker, TResult)(System.Func(Of Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker, TResult))
  name.vb: Locking(Of MvcModuleInfoPicker, TResult)(Func(Of MvcModuleInfoPicker, TResult))
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking``2(System.Func{``0,``1})
    name: Locking<MvcModuleInfoPicker, TResult>
    nameWithType: LockExtensions.Locking<MvcModuleInfoPicker, TResult>
    fullName: Hybrid.Reflection.LockExtensions.Locking<Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker
    name: MvcModuleInfoPicker
    nameWithType: MvcModuleInfoPicker
    fullName: Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking``2(System.Func{``0,``1})
    name: Locking(Of MvcModuleInfoPicker, TResult)
    nameWithType: LockExtensions.Locking(Of MvcModuleInfoPicker, TResult)
    fullName: Hybrid.Reflection.LockExtensions.Locking(Of Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker
    name: MvcModuleInfoPicker
    nameWithType: MvcModuleInfoPicker
    fullName: Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker.Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2
  commentId: M:Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2(``0)
  parent: Hybrid.Domain.Entities.EntityExtensions
  definition: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2(``0)
  name: CheckICreatedTime<MvcModuleInfoPicker, TKey>()
  nameWithType: EntityExtensions.CheckICreatedTime<MvcModuleInfoPicker, TKey>()
  fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime<Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker, TKey>()
  nameWithType.vb: EntityExtensions.CheckICreatedTime(Of MvcModuleInfoPicker, TKey)()
  fullName.vb: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime(Of Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker, TKey)()
  name.vb: CheckICreatedTime(Of MvcModuleInfoPicker, TKey)()
  spec.csharp:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2
    name: CheckICreatedTime<MvcModuleInfoPicker, TKey>
    nameWithType: EntityExtensions.CheckICreatedTime<MvcModuleInfoPicker, TKey>
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime<Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2
    name: CheckICreatedTime(Of MvcModuleInfoPicker, TKey)
    nameWithType: EntityExtensions.CheckICreatedTime(Of MvcModuleInfoPicker, TKey)
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime(Of Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker.Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(System.Security.Principal.IPrincipal)
  commentId: M:Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
  parent: Hybrid.Domain.Entities.EntityExtensions
  definition: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
  name: CheckICreationAudited<MvcModuleInfoPicker, TKey, TUserKey>(IPrincipal)
  nameWithType: EntityExtensions.CheckICreationAudited<MvcModuleInfoPicker, TKey, TUserKey>(IPrincipal)
  fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited<Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker, TKey, TUserKey>(System.Security.Principal.IPrincipal)
  nameWithType.vb: EntityExtensions.CheckICreationAudited(Of MvcModuleInfoPicker, TKey, TUserKey)(IPrincipal)
  fullName.vb: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited(Of Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker, TKey, TUserKey)(System.Security.Principal.IPrincipal)
  name.vb: CheckICreationAudited(Of MvcModuleInfoPicker, TKey, TUserKey)(IPrincipal)
  spec.csharp:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(System.Security.Principal.IPrincipal)
    name: CheckICreationAudited<MvcModuleInfoPicker, TKey, TUserKey>
    nameWithType: EntityExtensions.CheckICreationAudited<MvcModuleInfoPicker, TKey, TUserKey>
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited<Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker, TKey, TUserKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(System.Security.Principal.IPrincipal)
    name: CheckICreationAudited(Of MvcModuleInfoPicker, TKey, TUserKey)
    nameWithType: EntityExtensions.CheckICreationAudited(Of MvcModuleInfoPicker, TKey, TUserKey)
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited(Of Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker, TKey, TUserKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker.Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(System.Security.Principal.IPrincipal)
  commentId: M:Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
  parent: Hybrid.Domain.Entities.EntityExtensions
  definition: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
  name: CheckIUpdateAudited<MvcModuleInfoPicker, TKey, TUserKey>(IPrincipal)
  nameWithType: EntityExtensions.CheckIUpdateAudited<MvcModuleInfoPicker, TKey, TUserKey>(IPrincipal)
  fullName: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited<Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker, TKey, TUserKey>(System.Security.Principal.IPrincipal)
  nameWithType.vb: EntityExtensions.CheckIUpdateAudited(Of MvcModuleInfoPicker, TKey, TUserKey)(IPrincipal)
  fullName.vb: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited(Of Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker, TKey, TUserKey)(System.Security.Principal.IPrincipal)
  name.vb: CheckIUpdateAudited(Of MvcModuleInfoPicker, TKey, TUserKey)(IPrincipal)
  spec.csharp:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(System.Security.Principal.IPrincipal)
    name: CheckIUpdateAudited<MvcModuleInfoPicker, TKey, TUserKey>
    nameWithType: EntityExtensions.CheckIUpdateAudited<MvcModuleInfoPicker, TKey, TUserKey>
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited<Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker, TKey, TUserKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(System.Security.Principal.IPrincipal)
    name: CheckIUpdateAudited(Of MvcModuleInfoPicker, TKey, TUserKey)
    nameWithType: EntityExtensions.CheckIUpdateAudited(Of MvcModuleInfoPicker, TKey, TUserKey)
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited(Of Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker, TKey, TUserKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1
  commentId: T:Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1
  name: ModuleInfoPickerBase<TFunction>
  nameWithType: ModuleInfoPickerBase<TFunction>
  fullName: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase<TFunction>
  nameWithType.vb: ModuleInfoPickerBase(Of TFunction)
  fullName.vb: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase(Of TFunction)
  name.vb: ModuleInfoPickerBase(Of TFunction)
  spec.csharp:
  - uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1
    name: ModuleInfoPickerBase
    nameWithType: ModuleInfoPickerBase
    fullName: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1
    name: ModuleInfoPickerBase
    nameWithType: ModuleInfoPickerBase
    fullName: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TFunction
    nameWithType: TFunction
    fullName: TFunction
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Authorization.ModuleInfos
  commentId: N:Hybrid.Authorization.ModuleInfos
  name: Hybrid.Authorization.ModuleInfos
  nameWithType: Hybrid.Authorization.ModuleInfos
  fullName: Hybrid.Authorization.ModuleInfos
- uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.Logger
  commentId: P:Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.Logger
  name: Logger
  nameWithType: ModuleInfoPickerBase<TFunction>.Logger
  fullName: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase<TFunction>.Logger
  nameWithType.vb: ModuleInfoPickerBase(Of TFunction).Logger
  fullName.vb: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase(Of TFunction).Logger
- uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.FunctionHandler
  commentId: P:Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.FunctionHandler
  name: FunctionHandler
  nameWithType: ModuleInfoPickerBase<TFunction>.FunctionHandler
  fullName: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase<TFunction>.FunctionHandler
  nameWithType.vb: ModuleInfoPickerBase(Of TFunction).FunctionHandler
  fullName.vb: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase(Of TFunction).FunctionHandler
- uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.Pickup
  commentId: M:Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.Pickup
  name: Pickup()
  nameWithType: ModuleInfoPickerBase<TFunction>.Pickup()
  fullName: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase<TFunction>.Pickup()
  nameWithType.vb: ModuleInfoPickerBase(Of TFunction).Pickup()
  fullName.vb: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase(Of TFunction).Pickup()
  spec.csharp:
  - uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.Pickup
    name: Pickup
    nameWithType: ModuleInfoPickerBase<TFunction>.Pickup
    fullName: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase<TFunction>.Pickup
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.Pickup
    name: Pickup
    nameWithType: ModuleInfoPickerBase(Of TFunction).Pickup
    fullName: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase(Of TFunction).Pickup
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.GetModules(System.Type[])
  commentId: M:Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.GetModules(System.Type[])
  isExternal: true
  name: GetModules(Type[])
  nameWithType: ModuleInfoPickerBase<TFunction>.GetModules(Type[])
  fullName: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase<TFunction>.GetModules(System.Type[])
  nameWithType.vb: ModuleInfoPickerBase(Of TFunction).GetModules(Type())
  fullName.vb: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase(Of TFunction).GetModules(System.Type())
  name.vb: GetModules(Type())
  spec.csharp:
  - uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.GetModules(System.Type[])
    name: GetModules
    nameWithType: ModuleInfoPickerBase<TFunction>.GetModules
    fullName: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase<TFunction>.GetModules
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.GetModules(System.Type[])
    name: GetModules
    nameWithType: ModuleInfoPickerBase(Of TFunction).GetModules
    fullName: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase(Of TFunction).GetModules
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
  commentId: M:Hybrid.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
  isExternal: true
  name: CastTo(Object, Type)
  nameWithType: ObjectExtensions.CastTo(Object, Type)
  fullName: Hybrid.Extensions.ObjectExtensions.CastTo(System.Object, System.Type)
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
    name: CastTo
    nameWithType: ObjectExtensions.CastTo
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
    name: CastTo
    nameWithType: ObjectExtensions.CastTo
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ObjectExtensions
  commentId: T:Hybrid.Extensions.ObjectExtensions
  parent: Hybrid.Extensions
  name: ObjectExtensions
  nameWithType: ObjectExtensions
  fullName: Hybrid.Extensions.ObjectExtensions
- uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object)
  commentId: M:Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object)
  isExternal: true
  name: CastTo<T>(Object)
  nameWithType: ObjectExtensions.CastTo<T>(Object)
  fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>(System.Object)
  nameWithType.vb: ObjectExtensions.CastTo(Of T)(Object)
  fullName.vb: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)(System.Object)
  name.vb: CastTo(Of T)(Object)
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object)
    name: CastTo<T>
    nameWithType: ObjectExtensions.CastTo<T>
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object)
    name: CastTo(Of T)
    nameWithType: ObjectExtensions.CastTo(Of T)
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
  commentId: M:Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
  isExternal: true
  name: CastTo<T>(Object, T)
  nameWithType: ObjectExtensions.CastTo<T>(Object, T)
  fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>(System.Object, T)
  nameWithType.vb: ObjectExtensions.CastTo(Of T)(Object, T)
  fullName.vb: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)(System.Object, T)
  name.vb: CastTo(Of T)(Object, T)
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
    name: CastTo<T>
    nameWithType: ObjectExtensions.CastTo<T>
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
    name: CastTo(Of T)
    nameWithType: ObjectExtensions.CastTo(Of T)
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
  commentId: M:Hybrid.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
  name: IsIn<T>(T, T[])
  nameWithType: ObjectExtensions.IsIn<T>(T, T[])
  fullName: Hybrid.Extensions.ObjectExtensions.IsIn<T>(T, T[])
  nameWithType.vb: ObjectExtensions.IsIn(Of T)(T, T())
  fullName.vb: Hybrid.Extensions.ObjectExtensions.IsIn(Of T)(T, T())
  name.vb: IsIn(Of T)(T, T())
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
    name: IsIn<T>
    nameWithType: ObjectExtensions.IsIn<T>
    fullName: Hybrid.Extensions.ObjectExtensions.IsIn<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
    name: IsIn(Of T)
    nameWithType: ObjectExtensions.IsIn(Of T)
    fullName: Hybrid.Extensions.ObjectExtensions.IsIn(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ObjectExtensions.ToDynamic(System.Object)
  commentId: M:Hybrid.Extensions.ObjectExtensions.ToDynamic(System.Object)
  isExternal: true
  name: ToDynamic(Object)
  nameWithType: ObjectExtensions.ToDynamic(Object)
  fullName: Hybrid.Extensions.ObjectExtensions.ToDynamic(System.Object)
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.ToDynamic(System.Object)
    name: ToDynamic
    nameWithType: ObjectExtensions.ToDynamic
    fullName: Hybrid.Extensions.ObjectExtensions.ToDynamic
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.ToDynamic(System.Object)
    name: ToDynamic
    nameWithType: ObjectExtensions.ToDynamic
    fullName: Hybrid.Extensions.ObjectExtensions.ToDynamic
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ObjectExtensions.DeepClone``1(``0)
  commentId: M:Hybrid.Extensions.ObjectExtensions.DeepClone``1(``0)
  name: DeepClone<T>(T)
  nameWithType: ObjectExtensions.DeepClone<T>(T)
  fullName: Hybrid.Extensions.ObjectExtensions.DeepClone<T>(T)
  nameWithType.vb: ObjectExtensions.DeepClone(Of T)(T)
  fullName.vb: Hybrid.Extensions.ObjectExtensions.DeepClone(Of T)(T)
  name.vb: DeepClone(Of T)(T)
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.DeepClone``1(``0)
    name: DeepClone<T>
    nameWithType: ObjectExtensions.DeepClone<T>
    fullName: Hybrid.Extensions.ObjectExtensions.DeepClone<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.DeepClone``1(``0)
    name: DeepClone(Of T)
    nameWithType: ObjectExtensions.DeepClone(Of T)
    fullName: Hybrid.Extensions.ObjectExtensions.DeepClone(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
  commentId: M:Hybrid.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
  isExternal: true
  name: Required<T>(T, Func<T, Boolean>, String)
  nameWithType: ParameterCheckExtensions.Required<T>(T, Func<T, Boolean>, String)
  fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<T>(T, System.Func<T, System.Boolean>, System.String)
  nameWithType.vb: ParameterCheckExtensions.Required(Of T)(T, Func(Of T, Boolean), String)
  fullName.vb: Hybrid.Extensions.ParameterCheckExtensions.Required(Of T)(T, System.Func(Of T, System.Boolean), System.String)
  name.vb: Required(Of T)(T, Func(Of T, Boolean), String)
  spec.csharp:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
    name: Required<T>
    nameWithType: ParameterCheckExtensions.Required<T>
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
    name: Required(Of T)
    nameWithType: ParameterCheckExtensions.Required(Of T)
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ParameterCheckExtensions
  commentId: T:Hybrid.Extensions.ParameterCheckExtensions
  parent: Hybrid.Extensions
  name: ParameterCheckExtensions
  nameWithType: ParameterCheckExtensions
  fullName: Hybrid.Extensions.ParameterCheckExtensions
- uid: Hybrid.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
  commentId: M:Hybrid.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
  isExternal: true
  name: Required<T, TException>(T, Func<T, Boolean>, String)
  nameWithType: ParameterCheckExtensions.Required<T, TException>(T, Func<T, Boolean>, String)
  fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<T, TException>(T, System.Func<T, System.Boolean>, System.String)
  nameWithType.vb: ParameterCheckExtensions.Required(Of T, TException)(T, Func(Of T, Boolean), String)
  fullName.vb: Hybrid.Extensions.ParameterCheckExtensions.Required(Of T, TException)(T, System.Func(Of T, System.Boolean), System.String)
  name.vb: Required(Of T, TException)(T, Func(Of T, Boolean), String)
  spec.csharp:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
    name: Required<T, TException>
    nameWithType: ParameterCheckExtensions.Required<T, TException>
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<T, TException>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
    name: Required(Of T, TException)
    nameWithType: ParameterCheckExtensions.Required(Of T, TException)
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required(Of T, TException)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
  commentId: M:Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
  isExternal: true
  name: CheckNotNull<T>(T, String)
  nameWithType: ParameterCheckExtensions.CheckNotNull<T>(T, String)
  fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull<T>(T, System.String)
  nameWithType.vb: ParameterCheckExtensions.CheckNotNull(Of T)(T, String)
  fullName.vb: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull(Of T)(T, System.String)
  name.vb: CheckNotNull(Of T)(T, String)
  spec.csharp:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
    name: CheckNotNull<T>
    nameWithType: ParameterCheckExtensions.CheckNotNull<T>
    fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
    name: CheckNotNull(Of T)
    nameWithType: ParameterCheckExtensions.CheckNotNull(Of T)
    fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
  isExternal: true
  name: TryCatch<T>(T, Action<T>, Action<Exception>, Action<T>)
  nameWithType: TryCatchExtensions.TryCatch<T>(T, Action<T>, Action<Exception>, Action<T>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T>(T, System.Action<T>, System.Action<System.Exception>, System.Action<T>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of T)(T, Action(Of T), Action(Of Exception), Action(Of T))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T)(T, System.Action(Of T), System.Action(Of System.Exception), System.Action(Of T))
  name.vb: TryCatch(Of T)(T, Action(Of T), Action(Of Exception), Action(Of T))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
    name: TryCatch<T>
    nameWithType: TryCatchExtensions.TryCatch<T>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
    name: TryCatch(Of T)
    nameWithType: TryCatchExtensions.TryCatch(Of T)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.TryCatchExtensions
  commentId: T:Hybrid.Extensions.TryCatchExtensions
  parent: Hybrid.Extensions
  name: TryCatchExtensions
  nameWithType: TryCatchExtensions
  fullName: Hybrid.Extensions.TryCatchExtensions
- uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
  isExternal: true
  name: TryCatch<T>(T, Action<T>, Action<Exception>)
  nameWithType: TryCatchExtensions.TryCatch<T>(T, Action<T>, Action<Exception>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T>(T, System.Action<T>, System.Action<System.Exception>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of T)(T, Action(Of T), Action(Of Exception))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T)(T, System.Action(Of T), System.Action(Of System.Exception))
  name.vb: TryCatch(Of T)(T, Action(Of T), Action(Of Exception))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
    name: TryCatch<T>
    nameWithType: TryCatchExtensions.TryCatch<T>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
    name: TryCatch(Of T)
    nameWithType: TryCatchExtensions.TryCatch(Of T)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
  isExternal: true
  name: TryCatch<T, TResult>(T, Func<T, TResult>, Action<Exception>, Action<T>)
  nameWithType: TryCatchExtensions.TryCatch<T, TResult>(T, Func<T, TResult>, Action<Exception>, Action<T>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T, TResult>(T, System.Func<T, TResult>, System.Action<System.Exception>, System.Action<T>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of T, TResult)(T, Func(Of T, TResult), Action(Of Exception), Action(Of T))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T, TResult)(T, System.Func(Of T, TResult), System.Action(Of System.Exception), System.Action(Of T))
  name.vb: TryCatch(Of T, TResult)(T, Func(Of T, TResult), Action(Of Exception), Action(Of T))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
    name: TryCatch<T, TResult>
    nameWithType: TryCatchExtensions.TryCatch<T, TResult>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
    name: TryCatch(Of T, TResult)
    nameWithType: TryCatchExtensions.TryCatch(Of T, TResult)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
  isExternal: true
  name: TryCatch<T, TResult>(T, Func<T, TResult>, Action<Exception>)
  nameWithType: TryCatchExtensions.TryCatch<T, TResult>(T, Func<T, TResult>, Action<Exception>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T, TResult>(T, System.Func<T, TResult>, System.Action<System.Exception>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of T, TResult)(T, Func(Of T, TResult), Action(Of Exception))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T, TResult)(T, System.Func(Of T, TResult), System.Action(Of System.Exception))
  name.vb: TryCatch(Of T, TResult)(T, Func(Of T, TResult), Action(Of Exception))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
    name: TryCatch<T, TResult>
    nameWithType: TryCatchExtensions.TryCatch<T, TResult>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
    name: TryCatch(Of T, TResult)
    nameWithType: TryCatchExtensions.TryCatch(Of T, TResult)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
  isExternal: true
  name: TryFinally<T>(T, Action<T>, Action<T>)
  nameWithType: TryCatchExtensions.TryFinally<T>(T, Action<T>, Action<T>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryFinally<T>(T, System.Action<T>, System.Action<T>)
  nameWithType.vb: TryCatchExtensions.TryFinally(Of T)(T, Action(Of T), Action(Of T))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryFinally(Of T)(T, System.Action(Of T), System.Action(Of T))
  name.vb: TryFinally(Of T)(T, Action(Of T), Action(Of T))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
    name: TryFinally<T>
    nameWithType: TryCatchExtensions.TryFinally<T>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryFinally<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
    name: TryFinally(Of T)
    nameWithType: TryCatchExtensions.TryFinally(Of T)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryFinally(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
  commentId: M:Hybrid.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
  isExternal: true
  name: ToJsonString(Object, Boolean, Boolean)
  nameWithType: JsonExtensions.ToJsonString(Object, Boolean, Boolean)
  fullName: Hybrid.Json.JsonExtensions.ToJsonString(System.Object, System.Boolean, System.Boolean)
  spec.csharp:
  - uid: Hybrid.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
    name: ToJsonString
    nameWithType: JsonExtensions.ToJsonString
    fullName: Hybrid.Json.JsonExtensions.ToJsonString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
    name: ToJsonString
    nameWithType: JsonExtensions.ToJsonString
    fullName: Hybrid.Json.JsonExtensions.ToJsonString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Json.JsonExtensions
  commentId: T:Hybrid.Json.JsonExtensions
  parent: Hybrid.Json
  name: JsonExtensions
  nameWithType: JsonExtensions
  fullName: Hybrid.Json.JsonExtensions
- uid: Hybrid.Mapping.MapperExtensions.MapTo``1(System.Object)
  commentId: M:Hybrid.Mapping.MapperExtensions.MapTo``1(System.Object)
  isExternal: true
  name: MapTo<TTarget>(Object)
  nameWithType: MapperExtensions.MapTo<TTarget>(Object)
  fullName: Hybrid.Mapping.MapperExtensions.MapTo<TTarget>(System.Object)
  nameWithType.vb: MapperExtensions.MapTo(Of TTarget)(Object)
  fullName.vb: Hybrid.Mapping.MapperExtensions.MapTo(Of TTarget)(System.Object)
  name.vb: MapTo(Of TTarget)(Object)
  spec.csharp:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``1(System.Object)
    name: MapTo<TTarget>
    nameWithType: MapperExtensions.MapTo<TTarget>
    fullName: Hybrid.Mapping.MapperExtensions.MapTo<TTarget>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``1(System.Object)
    name: MapTo(Of TTarget)
    nameWithType: MapperExtensions.MapTo(Of TTarget)
    fullName: Hybrid.Mapping.MapperExtensions.MapTo(Of TTarget)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Mapping.MapperExtensions
  commentId: T:Hybrid.Mapping.MapperExtensions
  parent: Hybrid.Mapping
  name: MapperExtensions
  nameWithType: MapperExtensions
  fullName: Hybrid.Mapping.MapperExtensions
- uid: Hybrid.Mapping.MapperExtensions.MapTo``2(``0,``1)
  commentId: M:Hybrid.Mapping.MapperExtensions.MapTo``2(``0,``1)
  name: MapTo<TSource, TTarget>(TSource, TTarget)
  nameWithType: MapperExtensions.MapTo<TSource, TTarget>(TSource, TTarget)
  fullName: Hybrid.Mapping.MapperExtensions.MapTo<TSource, TTarget>(TSource, TTarget)
  nameWithType.vb: MapperExtensions.MapTo(Of TSource, TTarget)(TSource, TTarget)
  fullName.vb: Hybrid.Mapping.MapperExtensions.MapTo(Of TSource, TTarget)(TSource, TTarget)
  name.vb: MapTo(Of TSource, TTarget)(TSource, TTarget)
  spec.csharp:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``2(``0,``1)
    name: MapTo<TSource, TTarget>
    nameWithType: MapperExtensions.MapTo<TSource, TTarget>
    fullName: Hybrid.Mapping.MapperExtensions.MapTo<TSource, TTarget>
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``2(``0,``1)
    name: MapTo(Of TSource, TTarget)
    nameWithType: MapperExtensions.MapTo(Of TSource, TTarget)
    fullName: Hybrid.Mapping.MapperExtensions.MapTo(Of TSource, TTarget)
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Reflection.LockExtensions.Locking(System.Object,System.Action)
  commentId: M:Hybrid.Reflection.LockExtensions.Locking(System.Object,System.Action)
  isExternal: true
  name: Locking(Object, Action)
  nameWithType: LockExtensions.Locking(Object, Action)
  fullName: Hybrid.Reflection.LockExtensions.Locking(System.Object, System.Action)
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking(System.Object,System.Action)
    name: Locking
    nameWithType: LockExtensions.Locking
    fullName: Hybrid.Reflection.LockExtensions.Locking
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking(System.Object,System.Action)
    name: Locking
    nameWithType: LockExtensions.Locking
    fullName: Hybrid.Reflection.LockExtensions.Locking
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Reflection.LockExtensions
  commentId: T:Hybrid.Reflection.LockExtensions
  parent: Hybrid.Reflection
  name: LockExtensions
  nameWithType: LockExtensions
  fullName: Hybrid.Reflection.LockExtensions
- uid: Hybrid.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
  commentId: M:Hybrid.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
  isExternal: true
  name: Locking<T>(T, Action<T>)
  nameWithType: LockExtensions.Locking<T>(T, Action<T>)
  fullName: Hybrid.Reflection.LockExtensions.Locking<T>(T, System.Action<T>)
  nameWithType.vb: LockExtensions.Locking(Of T)(T, Action(Of T))
  fullName.vb: Hybrid.Reflection.LockExtensions.Locking(Of T)(T, System.Action(Of T))
  name.vb: Locking(Of T)(T, Action(Of T))
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
    name: Locking<T>
    nameWithType: LockExtensions.Locking<T>
    fullName: Hybrid.Reflection.LockExtensions.Locking<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
    name: Locking(Of T)
    nameWithType: LockExtensions.Locking(Of T)
    fullName: Hybrid.Reflection.LockExtensions.Locking(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
  commentId: M:Hybrid.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
  isExternal: true
  name: Locking<TResult>(Object, Func<TResult>)
  nameWithType: LockExtensions.Locking<TResult>(Object, Func<TResult>)
  fullName: Hybrid.Reflection.LockExtensions.Locking<TResult>(System.Object, System.Func<TResult>)
  nameWithType.vb: LockExtensions.Locking(Of TResult)(Object, Func(Of TResult))
  fullName.vb: Hybrid.Reflection.LockExtensions.Locking(Of TResult)(System.Object, System.Func(Of TResult))
  name.vb: Locking(Of TResult)(Object, Func(Of TResult))
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
    name: Locking<TResult>
    nameWithType: LockExtensions.Locking<TResult>
    fullName: Hybrid.Reflection.LockExtensions.Locking<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
    name: Locking(Of TResult)
    nameWithType: LockExtensions.Locking(Of TResult)
    fullName: Hybrid.Reflection.LockExtensions.Locking(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
  commentId: M:Hybrid.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
  isExternal: true
  name: Locking<TSource, TResult>(TSource, Func<TSource, TResult>)
  nameWithType: LockExtensions.Locking<TSource, TResult>(TSource, Func<TSource, TResult>)
  fullName: Hybrid.Reflection.LockExtensions.Locking<TSource, TResult>(TSource, System.Func<TSource, TResult>)
  nameWithType.vb: LockExtensions.Locking(Of TSource, TResult)(TSource, Func(Of TSource, TResult))
  fullName.vb: Hybrid.Reflection.LockExtensions.Locking(Of TSource, TResult)(TSource, System.Func(Of TSource, TResult))
  name.vb: Locking(Of TSource, TResult)(TSource, Func(Of TSource, TResult))
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
    name: Locking<TSource, TResult>
    nameWithType: LockExtensions.Locking<TSource, TResult>
    fullName: Hybrid.Reflection.LockExtensions.Locking<TSource, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
    name: Locking(Of TSource, TResult)
    nameWithType: LockExtensions.Locking(Of TSource, TResult)
    fullName: Hybrid.Reflection.LockExtensions.Locking(Of TSource, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2(``0)
  commentId: M:Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2(``0)
  name: CheckICreatedTime<TEntity, TKey>(TEntity)
  nameWithType: EntityExtensions.CheckICreatedTime<TEntity, TKey>(TEntity)
  fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime<TEntity, TKey>(TEntity)
  nameWithType.vb: EntityExtensions.CheckICreatedTime(Of TEntity, TKey)(TEntity)
  fullName.vb: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime(Of TEntity, TKey)(TEntity)
  name.vb: CheckICreatedTime(Of TEntity, TKey)(TEntity)
  spec.csharp:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2(``0)
    name: CheckICreatedTime<TEntity, TKey>
    nameWithType: EntityExtensions.CheckICreatedTime<TEntity, TKey>
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime<TEntity, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2(``0)
    name: CheckICreatedTime(Of TEntity, TKey)
    nameWithType: EntityExtensions.CheckICreatedTime(Of TEntity, TKey)
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime(Of TEntity, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Domain.Entities.EntityExtensions
  commentId: T:Hybrid.Domain.Entities.EntityExtensions
  parent: Hybrid.Domain.Entities
  name: EntityExtensions
  nameWithType: EntityExtensions
  fullName: Hybrid.Domain.Entities.EntityExtensions
- uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
  commentId: M:Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
  isExternal: true
  name: CheckICreationAudited<TEntity, TKey, TUserKey>(TEntity, IPrincipal)
  nameWithType: EntityExtensions.CheckICreationAudited<TEntity, TKey, TUserKey>(TEntity, IPrincipal)
  fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited<TEntity, TKey, TUserKey>(TEntity, System.Security.Principal.IPrincipal)
  nameWithType.vb: EntityExtensions.CheckICreationAudited(Of TEntity, TKey, TUserKey)(TEntity, IPrincipal)
  fullName.vb: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited(Of TEntity, TKey, TUserKey)(TEntity, System.Security.Principal.IPrincipal)
  name.vb: CheckICreationAudited(Of TEntity, TKey, TUserKey)(TEntity, IPrincipal)
  spec.csharp:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
    name: CheckICreationAudited<TEntity, TKey, TUserKey>
    nameWithType: EntityExtensions.CheckICreationAudited<TEntity, TKey, TUserKey>
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited<TEntity, TKey, TUserKey>
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
    name: CheckICreationAudited(Of TEntity, TKey, TUserKey)
    nameWithType: EntityExtensions.CheckICreationAudited(Of TEntity, TKey, TUserKey)
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited(Of TEntity, TKey, TUserKey)
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
  commentId: M:Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
  isExternal: true
  name: CheckIUpdateAudited<TEntity, TKey, TUserKey>(TEntity, IPrincipal)
  nameWithType: EntityExtensions.CheckIUpdateAudited<TEntity, TKey, TUserKey>(TEntity, IPrincipal)
  fullName: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited<TEntity, TKey, TUserKey>(TEntity, System.Security.Principal.IPrincipal)
  nameWithType.vb: EntityExtensions.CheckIUpdateAudited(Of TEntity, TKey, TUserKey)(TEntity, IPrincipal)
  fullName.vb: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited(Of TEntity, TKey, TUserKey)(TEntity, System.Security.Principal.IPrincipal)
  name.vb: CheckIUpdateAudited(Of TEntity, TKey, TUserKey)(TEntity, IPrincipal)
  spec.csharp:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
    name: CheckIUpdateAudited<TEntity, TKey, TUserKey>
    nameWithType: EntityExtensions.CheckIUpdateAudited<TEntity, TKey, TUserKey>
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited<TEntity, TKey, TUserKey>
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
    name: CheckIUpdateAudited(Of TEntity, TKey, TUserKey)
    nameWithType: EntityExtensions.CheckIUpdateAudited(Of TEntity, TKey, TUserKey)
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited(Of TEntity, TKey, TUserKey)
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions
  commentId: N:Hybrid.Extensions
  name: Hybrid.Extensions
  nameWithType: Hybrid.Extensions
  fullName: Hybrid.Extensions
- uid: Hybrid.Json
  commentId: N:Hybrid.Json
  name: Hybrid.Json
  nameWithType: Hybrid.Json
  fullName: Hybrid.Json
- uid: Hybrid.Mapping
  commentId: N:Hybrid.Mapping
  name: Hybrid.Mapping
  nameWithType: Hybrid.Mapping
  fullName: Hybrid.Mapping
- uid: Hybrid.Reflection
  commentId: N:Hybrid.Reflection
  name: Hybrid.Reflection
  nameWithType: Hybrid.Reflection
  fullName: Hybrid.Reflection
- uid: Hybrid.Domain.Entities
  commentId: N:Hybrid.Domain.Entities
  name: Hybrid.Domain.Entities
  nameWithType: Hybrid.Domain.Entities
  fullName: Hybrid.Domain.Entities
- uid: Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker.#ctor*
  commentId: Overload:Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker.#ctor
  name: MvcModuleInfoPicker
  nameWithType: MvcModuleInfoPicker.MvcModuleInfoPicker
  fullName: Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker.MvcModuleInfoPicker
- uid: System.IServiceProvider
  commentId: T:System.IServiceProvider
  parent: System
  isExternal: true
  name: IServiceProvider
  nameWithType: IServiceProvider
  fullName: System.IServiceProvider
- uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase{Hybrid.Authorization.Functions.Function}.GetModules(System.Type,System.String[])
  commentId: M:Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase{Hybrid.Authorization.Functions.Function}.GetModules(System.Type,System.String[])
  parent: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase{Hybrid.Authorization.Functions.Function}
  definition: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.GetModules(System.Type,System.String[])
  name: GetModules(Type, String[])
  nameWithType: ModuleInfoPickerBase<Function>.GetModules(Type, String[])
  fullName: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase<Hybrid.Authorization.Functions.Function>.GetModules(System.Type, System.String[])
  nameWithType.vb: ModuleInfoPickerBase(Of Function).GetModules(Type, String())
  fullName.vb: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase(Of Hybrid.Authorization.Functions.Function).GetModules(System.Type, System.String())
  name.vb: GetModules(Type, String())
  spec.csharp:
  - uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.GetModules(System.Type,System.String[])
    name: GetModules
    nameWithType: ModuleInfoPickerBase<Function>.GetModules
    fullName: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase<Hybrid.Authorization.Functions.Function>.GetModules
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.GetModules(System.Type,System.String[])
    name: GetModules
    nameWithType: ModuleInfoPickerBase(Of Function).GetModules
    fullName: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase(Of Hybrid.Authorization.Functions.Function).GetModules
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker.GetModules*
  commentId: Overload:Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker.GetModules
  name: GetModules
  nameWithType: MvcModuleInfoPicker.GetModules
  fullName: Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker.GetModules
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Hybrid.Authorization.ModuleInfos.ModuleInfo[]
  isExternal: true
  name: ModuleInfo[]
  nameWithType: ModuleInfo[]
  fullName: Hybrid.Authorization.ModuleInfos.ModuleInfo[]
  nameWithType.vb: ModuleInfo()
  fullName.vb: Hybrid.Authorization.ModuleInfos.ModuleInfo()
  name.vb: ModuleInfo()
  spec.csharp:
  - uid: Hybrid.Authorization.ModuleInfos.ModuleInfo
    name: ModuleInfo
    nameWithType: ModuleInfo
    fullName: Hybrid.Authorization.ModuleInfos.ModuleInfo
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: Hybrid.Authorization.ModuleInfos.ModuleInfo
    name: ModuleInfo
    nameWithType: ModuleInfo
    fullName: Hybrid.Authorization.ModuleInfos.ModuleInfo
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.GetModules(System.Type,System.String[])
  commentId: M:Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.GetModules(System.Type,System.String[])
  isExternal: true
  name: GetModules(Type, String[])
  nameWithType: ModuleInfoPickerBase<TFunction>.GetModules(Type, String[])
  fullName: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase<TFunction>.GetModules(System.Type, System.String[])
  nameWithType.vb: ModuleInfoPickerBase(Of TFunction).GetModules(Type, String())
  fullName.vb: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase(Of TFunction).GetModules(System.Type, System.String())
  name.vb: GetModules(Type, String())
  spec.csharp:
  - uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.GetModules(System.Type,System.String[])
    name: GetModules
    nameWithType: ModuleInfoPickerBase<TFunction>.GetModules
    fullName: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase<TFunction>.GetModules
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.GetModules(System.Type,System.String[])
    name: GetModules
    nameWithType: ModuleInfoPickerBase(Of TFunction).GetModules
    fullName: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase(Of TFunction).GetModules
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase{Hybrid.Authorization.Functions.Function}.GetModule(System.Reflection.MethodInfo,Hybrid.Authorization.ModuleInfos.ModuleInfo,System.Int32)
  commentId: M:Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase{Hybrid.Authorization.Functions.Function}.GetModule(System.Reflection.MethodInfo,Hybrid.Authorization.ModuleInfos.ModuleInfo,System.Int32)
  parent: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase{Hybrid.Authorization.Functions.Function}
  definition: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.GetModule(System.Reflection.MethodInfo,Hybrid.Authorization.ModuleInfos.ModuleInfo,System.Int32)
  name: GetModule(MethodInfo, ModuleInfo, Int32)
  nameWithType: ModuleInfoPickerBase<Function>.GetModule(MethodInfo, ModuleInfo, Int32)
  fullName: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase<Hybrid.Authorization.Functions.Function>.GetModule(System.Reflection.MethodInfo, Hybrid.Authorization.ModuleInfos.ModuleInfo, System.Int32)
  nameWithType.vb: ModuleInfoPickerBase(Of Function).GetModule(MethodInfo, ModuleInfo, Int32)
  fullName.vb: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase(Of Hybrid.Authorization.Functions.Function).GetModule(System.Reflection.MethodInfo, Hybrid.Authorization.ModuleInfos.ModuleInfo, System.Int32)
  spec.csharp:
  - uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.GetModule(System.Reflection.MethodInfo,Hybrid.Authorization.ModuleInfos.ModuleInfo,System.Int32)
    name: GetModule
    nameWithType: ModuleInfoPickerBase<Function>.GetModule
    fullName: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase<Hybrid.Authorization.Functions.Function>.GetModule
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.MethodInfo
    name: MethodInfo
    nameWithType: MethodInfo
    fullName: System.Reflection.MethodInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Hybrid.Authorization.ModuleInfos.ModuleInfo
    name: ModuleInfo
    nameWithType: ModuleInfo
    fullName: Hybrid.Authorization.ModuleInfos.ModuleInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.GetModule(System.Reflection.MethodInfo,Hybrid.Authorization.ModuleInfos.ModuleInfo,System.Int32)
    name: GetModule
    nameWithType: ModuleInfoPickerBase(Of Function).GetModule
    fullName: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase(Of Hybrid.Authorization.Functions.Function).GetModule
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.MethodInfo
    name: MethodInfo
    nameWithType: MethodInfo
    fullName: System.Reflection.MethodInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Hybrid.Authorization.ModuleInfos.ModuleInfo
    name: ModuleInfo
    nameWithType: ModuleInfo
    fullName: Hybrid.Authorization.ModuleInfos.ModuleInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker.GetModule*
  commentId: Overload:Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker.GetModule
  name: GetModule
  nameWithType: MvcModuleInfoPicker.GetModule
  fullName: Hybrid.AspNetCore.Mvc.MvcModuleInfoPicker.GetModule
- uid: System.Reflection.MethodInfo
  commentId: T:System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: true
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: Hybrid.Authorization.ModuleInfos.ModuleInfo
  commentId: T:Hybrid.Authorization.ModuleInfos.ModuleInfo
  parent: Hybrid.Authorization.ModuleInfos
  name: ModuleInfo
  nameWithType: ModuleInfo
  fullName: Hybrid.Authorization.ModuleInfos.ModuleInfo
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.GetModule(System.Reflection.MethodInfo,Hybrid.Authorization.ModuleInfos.ModuleInfo,System.Int32)
  commentId: M:Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.GetModule(System.Reflection.MethodInfo,Hybrid.Authorization.ModuleInfos.ModuleInfo,System.Int32)
  isExternal: true
  name: GetModule(MethodInfo, ModuleInfo, Int32)
  nameWithType: ModuleInfoPickerBase<TFunction>.GetModule(MethodInfo, ModuleInfo, Int32)
  fullName: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase<TFunction>.GetModule(System.Reflection.MethodInfo, Hybrid.Authorization.ModuleInfos.ModuleInfo, System.Int32)
  nameWithType.vb: ModuleInfoPickerBase(Of TFunction).GetModule(MethodInfo, ModuleInfo, Int32)
  fullName.vb: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase(Of TFunction).GetModule(System.Reflection.MethodInfo, Hybrid.Authorization.ModuleInfos.ModuleInfo, System.Int32)
  spec.csharp:
  - uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.GetModule(System.Reflection.MethodInfo,Hybrid.Authorization.ModuleInfos.ModuleInfo,System.Int32)
    name: GetModule
    nameWithType: ModuleInfoPickerBase<TFunction>.GetModule
    fullName: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase<TFunction>.GetModule
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.MethodInfo
    name: MethodInfo
    nameWithType: MethodInfo
    fullName: System.Reflection.MethodInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Hybrid.Authorization.ModuleInfos.ModuleInfo
    name: ModuleInfo
    nameWithType: ModuleInfo
    fullName: Hybrid.Authorization.ModuleInfos.ModuleInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase`1.GetModule(System.Reflection.MethodInfo,Hybrid.Authorization.ModuleInfos.ModuleInfo,System.Int32)
    name: GetModule
    nameWithType: ModuleInfoPickerBase(Of TFunction).GetModule
    fullName: Hybrid.Authorization.ModuleInfos.ModuleInfoPickerBase(Of TFunction).GetModule
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.MethodInfo
    name: MethodInfo
    nameWithType: MethodInfo
    fullName: System.Reflection.MethodInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Hybrid.Authorization.ModuleInfos.ModuleInfo
    name: ModuleInfo
    nameWithType: ModuleInfo
    fullName: Hybrid.Authorization.ModuleInfos.ModuleInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection
  commentId: N:System.Reflection
  isExternal: true
  name: System.Reflection
  nameWithType: System.Reflection
  fullName: System.Reflection
