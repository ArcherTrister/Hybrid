### YamlMime:ManagedReference
items:
- uid: Hybrid.EntityFrameworkCore.DbContextExtensions
  commentId: T:Hybrid.EntityFrameworkCore.DbContextExtensions
  id: DbContextExtensions
  parent: Hybrid.EntityFrameworkCore
  children:
  - Hybrid.EntityFrameworkCore.DbContextExtensions.CheckAndMigration(Microsoft.EntityFrameworkCore.DbContext)
  - Hybrid.EntityFrameworkCore.DbContextExtensions.ExecuteSqlCommand(Hybrid.Domain.EntityFramework.IDbContext,System.String,System.Object[])
  - Hybrid.EntityFrameworkCore.DbContextExtensions.ExecuteSqlCommandAsync(Hybrid.Domain.EntityFramework.IDbContext,System.String,System.Object[])
  - Hybrid.EntityFrameworkCore.DbContextExtensions.ExecuteSqlInterpolated(Hybrid.Domain.EntityFramework.IDbContext,System.FormattableString)
  - Hybrid.EntityFrameworkCore.DbContextExtensions.ExecuteSqlInterpolatedAsync(Hybrid.Domain.EntityFramework.IDbContext,System.FormattableString)
  - Hybrid.EntityFrameworkCore.DbContextExtensions.ExecuteSqlRaw(Hybrid.Domain.EntityFramework.IDbContext,System.String,System.Object[])
  - Hybrid.EntityFrameworkCore.DbContextExtensions.ExecuteSqlRawAsync(Hybrid.Domain.EntityFramework.IDbContext,System.String,System.Object[])
  - Hybrid.EntityFrameworkCore.DbContextExtensions.ExistsRelationalDatabase(Microsoft.EntityFrameworkCore.DbContext)
  - Hybrid.EntityFrameworkCore.DbContextExtensions.GetDatabaseType(Hybrid.Domain.EntityFramework.IDbContext)
  - Hybrid.EntityFrameworkCore.DbContextExtensions.IsRelationalTransaction(Microsoft.EntityFrameworkCore.DbContext)
  - Hybrid.EntityFrameworkCore.DbContextExtensions.Update``2(Microsoft.EntityFrameworkCore.DbContext,``0[])
  langs:
  - csharp
  - vb
  name: DbContextExtensions
  nameWithType: DbContextExtensions
  fullName: Hybrid.EntityFrameworkCore.DbContextExtensions
  type: Class
  source:
    remote:
      path: src/Hybrid.EntityFrameworkCore/DbContextExtensions.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: DbContextExtensions
    path: ../src/Hybrid.EntityFrameworkCore/DbContextExtensions.cs
    startLine: 32
  assemblies:
  - Hybrid.EntityFrameworkCore
  namespace: Hybrid.EntityFrameworkCore
  summary: "\n数据上下文扩展方法\n"
  example: []
  syntax:
    content: public static class DbContextExtensions
    content.vb: Public Module DbContextExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Hybrid.EntityFrameworkCore.DbContextExtensions.IsRelationalTransaction(Microsoft.EntityFrameworkCore.DbContext)
  commentId: M:Hybrid.EntityFrameworkCore.DbContextExtensions.IsRelationalTransaction(Microsoft.EntityFrameworkCore.DbContext)
  id: IsRelationalTransaction(Microsoft.EntityFrameworkCore.DbContext)
  isExtensionMethod: true
  parent: Hybrid.EntityFrameworkCore.DbContextExtensions
  langs:
  - csharp
  - vb
  name: IsRelationalTransaction(DbContext)
  nameWithType: DbContextExtensions.IsRelationalTransaction(DbContext)
  fullName: Hybrid.EntityFrameworkCore.DbContextExtensions.IsRelationalTransaction(Microsoft.EntityFrameworkCore.DbContext)
  type: Method
  source:
    remote:
      path: src/Hybrid.EntityFrameworkCore/DbContextExtensions.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: IsRelationalTransaction
    path: ../src/Hybrid.EntityFrameworkCore/DbContextExtensions.cs
    startLine: 37
  assemblies:
  - Hybrid.EntityFrameworkCore
  namespace: Hybrid.EntityFrameworkCore
  summary: "\n当前上下文是否是关系型数据库\n"
  example: []
  syntax:
    content: public static bool IsRelationalTransaction(this DbContext context)
    parameters:
    - id: context
      type: Microsoft.EntityFrameworkCore.DbContext
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsRelationalTransaction(context As DbContext) As Boolean
  overload: Hybrid.EntityFrameworkCore.DbContextExtensions.IsRelationalTransaction*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Hybrid.EntityFrameworkCore.DbContextExtensions.ExistsRelationalDatabase(Microsoft.EntityFrameworkCore.DbContext)
  commentId: M:Hybrid.EntityFrameworkCore.DbContextExtensions.ExistsRelationalDatabase(Microsoft.EntityFrameworkCore.DbContext)
  id: ExistsRelationalDatabase(Microsoft.EntityFrameworkCore.DbContext)
  isExtensionMethod: true
  parent: Hybrid.EntityFrameworkCore.DbContextExtensions
  langs:
  - csharp
  - vb
  name: ExistsRelationalDatabase(DbContext)
  nameWithType: DbContextExtensions.ExistsRelationalDatabase(DbContext)
  fullName: Hybrid.EntityFrameworkCore.DbContextExtensions.ExistsRelationalDatabase(Microsoft.EntityFrameworkCore.DbContext)
  type: Method
  source:
    remote:
      path: src/Hybrid.EntityFrameworkCore/DbContextExtensions.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: ExistsRelationalDatabase
    path: ../src/Hybrid.EntityFrameworkCore/DbContextExtensions.cs
    startLine: 45
  assemblies:
  - Hybrid.EntityFrameworkCore
  namespace: Hybrid.EntityFrameworkCore
  summary: "\n检测关系型数据库是否存在\n"
  example: []
  syntax:
    content: public static bool ExistsRelationalDatabase(this DbContext context)
    parameters:
    - id: context
      type: Microsoft.EntityFrameworkCore.DbContext
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ExistsRelationalDatabase(context As DbContext) As Boolean
  overload: Hybrid.EntityFrameworkCore.DbContextExtensions.ExistsRelationalDatabase*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Hybrid.EntityFrameworkCore.DbContextExtensions.CheckAndMigration(Microsoft.EntityFrameworkCore.DbContext)
  commentId: M:Hybrid.EntityFrameworkCore.DbContextExtensions.CheckAndMigration(Microsoft.EntityFrameworkCore.DbContext)
  id: CheckAndMigration(Microsoft.EntityFrameworkCore.DbContext)
  isExtensionMethod: true
  parent: Hybrid.EntityFrameworkCore.DbContextExtensions
  langs:
  - csharp
  - vb
  name: CheckAndMigration(DbContext)
  nameWithType: DbContextExtensions.CheckAndMigration(DbContext)
  fullName: Hybrid.EntityFrameworkCore.DbContextExtensions.CheckAndMigration(Microsoft.EntityFrameworkCore.DbContext)
  type: Method
  source:
    remote:
      path: src/Hybrid.EntityFrameworkCore/DbContextExtensions.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: CheckAndMigration
    path: ../src/Hybrid.EntityFrameworkCore/DbContextExtensions.cs
    startLine: 54
  assemblies:
  - Hybrid.EntityFrameworkCore
  namespace: Hybrid.EntityFrameworkCore
  summary: "\n获取未提交的迁移记录并提交迁移\n"
  example: []
  syntax:
    content: public static void CheckAndMigration(this DbContext dbContext)
    parameters:
    - id: dbContext
      type: Microsoft.EntityFrameworkCore.DbContext
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub CheckAndMigration(dbContext As DbContext)
  overload: Hybrid.EntityFrameworkCore.DbContextExtensions.CheckAndMigration*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Hybrid.EntityFrameworkCore.DbContextExtensions.ExecuteSqlCommand(Hybrid.Domain.EntityFramework.IDbContext,System.String,System.Object[])
  commentId: M:Hybrid.EntityFrameworkCore.DbContextExtensions.ExecuteSqlCommand(Hybrid.Domain.EntityFramework.IDbContext,System.String,System.Object[])
  id: ExecuteSqlCommand(Hybrid.Domain.EntityFramework.IDbContext,System.String,System.Object[])
  isExtensionMethod: true
  parent: Hybrid.EntityFrameworkCore.DbContextExtensions
  langs:
  - csharp
  - vb
  name: ExecuteSqlCommand(IDbContext, String, Object[])
  nameWithType: DbContextExtensions.ExecuteSqlCommand(IDbContext, String, Object[])
  fullName: Hybrid.EntityFrameworkCore.DbContextExtensions.ExecuteSqlCommand(Hybrid.Domain.EntityFramework.IDbContext, System.String, System.Object[])
  type: Method
  source:
    remote:
      path: src/Hybrid.EntityFrameworkCore/DbContextExtensions.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: ExecuteSqlCommand
    path: ../src/Hybrid.EntityFrameworkCore/DbContextExtensions.cs
    startLine: 69
  assemblies:
  - Hybrid.EntityFrameworkCore
  namespace: Hybrid.EntityFrameworkCore
  summary: "\n执行指定的Sql语句\n"
  example: []
  syntax:
    content: >-
      [Obsolete("使用 ExecuteSqlRaw 代替")]

      public static int ExecuteSqlCommand(this IDbContext dbContext, string sql, params object[] parameters)
    parameters:
    - id: dbContext
      type: Hybrid.Domain.EntityFramework.IDbContext
    - id: sql
      type: System.String
    - id: parameters
      type: System.Object[]
    return:
      type: System.Int32
    content.vb: >-
      <Obsolete("使用 ExecuteSqlRaw 代替")>

      <ExtensionAttribute>

      Public Shared Function ExecuteSqlCommand(dbContext As IDbContext, sql As String, ParamArray parameters As Object()) As Integer
  overload: Hybrid.EntityFrameworkCore.DbContextExtensions.ExecuteSqlCommand*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: 使用 ExecuteSqlRaw 代替
  nameWithType.vb: DbContextExtensions.ExecuteSqlCommand(IDbContext, String, Object())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Hybrid.EntityFrameworkCore.DbContextExtensions.ExecuteSqlCommand(Hybrid.Domain.EntityFramework.IDbContext, System.String, System.Object())
  name.vb: ExecuteSqlCommand(IDbContext, String, Object())
- uid: Hybrid.EntityFrameworkCore.DbContextExtensions.ExecuteSqlCommandAsync(Hybrid.Domain.EntityFramework.IDbContext,System.String,System.Object[])
  commentId: M:Hybrid.EntityFrameworkCore.DbContextExtensions.ExecuteSqlCommandAsync(Hybrid.Domain.EntityFramework.IDbContext,System.String,System.Object[])
  id: ExecuteSqlCommandAsync(Hybrid.Domain.EntityFramework.IDbContext,System.String,System.Object[])
  isExtensionMethod: true
  parent: Hybrid.EntityFrameworkCore.DbContextExtensions
  langs:
  - csharp
  - vb
  name: ExecuteSqlCommandAsync(IDbContext, String, Object[])
  nameWithType: DbContextExtensions.ExecuteSqlCommandAsync(IDbContext, String, Object[])
  fullName: Hybrid.EntityFrameworkCore.DbContextExtensions.ExecuteSqlCommandAsync(Hybrid.Domain.EntityFramework.IDbContext, System.String, System.Object[])
  type: Method
  source:
    remote:
      path: src/Hybrid.EntityFrameworkCore/DbContextExtensions.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: ExecuteSqlCommandAsync
    path: ../src/Hybrid.EntityFrameworkCore/DbContextExtensions.cs
    startLine: 82
  assemblies:
  - Hybrid.EntityFrameworkCore
  namespace: Hybrid.EntityFrameworkCore
  summary: "\n异步执行指定的Sql语句\n"
  example: []
  syntax:
    content: >-
      [Obsolete("使用 ExecuteSqlRawAsync 代替")]

      public static Task<int> ExecuteSqlCommandAsync(this IDbContext dbContext, string sql, params object[] parameters)
    parameters:
    - id: dbContext
      type: Hybrid.Domain.EntityFramework.IDbContext
    - id: sql
      type: System.String
    - id: parameters
      type: System.Object[]
    return:
      type: System.Threading.Tasks.Task{System.Int32}
    content.vb: >-
      <Obsolete("使用 ExecuteSqlRawAsync 代替")>

      <ExtensionAttribute>

      Public Shared Function ExecuteSqlCommandAsync(dbContext As IDbContext, sql As String, ParamArray parameters As Object()) As Task(Of Integer)
  overload: Hybrid.EntityFrameworkCore.DbContextExtensions.ExecuteSqlCommandAsync*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: 使用 ExecuteSqlRawAsync 代替
  nameWithType.vb: DbContextExtensions.ExecuteSqlCommandAsync(IDbContext, String, Object())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Hybrid.EntityFrameworkCore.DbContextExtensions.ExecuteSqlCommandAsync(Hybrid.Domain.EntityFramework.IDbContext, System.String, System.Object())
  name.vb: ExecuteSqlCommandAsync(IDbContext, String, Object())
- uid: Hybrid.EntityFrameworkCore.DbContextExtensions.ExecuteSqlRaw(Hybrid.Domain.EntityFramework.IDbContext,System.String,System.Object[])
  commentId: M:Hybrid.EntityFrameworkCore.DbContextExtensions.ExecuteSqlRaw(Hybrid.Domain.EntityFramework.IDbContext,System.String,System.Object[])
  id: ExecuteSqlRaw(Hybrid.Domain.EntityFramework.IDbContext,System.String,System.Object[])
  isExtensionMethod: true
  parent: Hybrid.EntityFrameworkCore.DbContextExtensions
  langs:
  - csharp
  - vb
  name: ExecuteSqlRaw(IDbContext, String, Object[])
  nameWithType: DbContextExtensions.ExecuteSqlRaw(IDbContext, String, Object[])
  fullName: Hybrid.EntityFrameworkCore.DbContextExtensions.ExecuteSqlRaw(Hybrid.Domain.EntityFramework.IDbContext, System.String, System.Object[])
  type: Method
  source:
    remote:
      path: src/Hybrid.EntityFrameworkCore/DbContextExtensions.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: ExecuteSqlRaw
    path: ../src/Hybrid.EntityFrameworkCore/DbContextExtensions.cs
    startLine: 95
  assemblies:
  - Hybrid.EntityFrameworkCore
  namespace: Hybrid.EntityFrameworkCore
  summary: "\n执行指定的Sql语句\n"
  example: []
  syntax:
    content: public static int ExecuteSqlRaw(this IDbContext dbContext, string sql, params object[] parameters)
    parameters:
    - id: dbContext
      type: Hybrid.Domain.EntityFramework.IDbContext
    - id: sql
      type: System.String
    - id: parameters
      type: System.Object[]
    return:
      type: System.Int32
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ExecuteSqlRaw(dbContext As IDbContext, sql As String, ParamArray parameters As Object()) As Integer
  overload: Hybrid.EntityFrameworkCore.DbContextExtensions.ExecuteSqlRaw*
  nameWithType.vb: DbContextExtensions.ExecuteSqlRaw(IDbContext, String, Object())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Hybrid.EntityFrameworkCore.DbContextExtensions.ExecuteSqlRaw(Hybrid.Domain.EntityFramework.IDbContext, System.String, System.Object())
  name.vb: ExecuteSqlRaw(IDbContext, String, Object())
- uid: Hybrid.EntityFrameworkCore.DbContextExtensions.ExecuteSqlRawAsync(Hybrid.Domain.EntityFramework.IDbContext,System.String,System.Object[])
  commentId: M:Hybrid.EntityFrameworkCore.DbContextExtensions.ExecuteSqlRawAsync(Hybrid.Domain.EntityFramework.IDbContext,System.String,System.Object[])
  id: ExecuteSqlRawAsync(Hybrid.Domain.EntityFramework.IDbContext,System.String,System.Object[])
  isExtensionMethod: true
  parent: Hybrid.EntityFrameworkCore.DbContextExtensions
  langs:
  - csharp
  - vb
  name: ExecuteSqlRawAsync(IDbContext, String, Object[])
  nameWithType: DbContextExtensions.ExecuteSqlRawAsync(IDbContext, String, Object[])
  fullName: Hybrid.EntityFrameworkCore.DbContextExtensions.ExecuteSqlRawAsync(Hybrid.Domain.EntityFramework.IDbContext, System.String, System.Object[])
  type: Method
  source:
    remote:
      path: src/Hybrid.EntityFrameworkCore/DbContextExtensions.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: ExecuteSqlRawAsync
    path: ../src/Hybrid.EntityFrameworkCore/DbContextExtensions.cs
    startLine: 107
  assemblies:
  - Hybrid.EntityFrameworkCore
  namespace: Hybrid.EntityFrameworkCore
  summary: "\n异步执行指定的Sql语句\n"
  example: []
  syntax:
    content: public static Task<int> ExecuteSqlRawAsync(this IDbContext dbContext, string sql, params object[] parameters)
    parameters:
    - id: dbContext
      type: Hybrid.Domain.EntityFramework.IDbContext
    - id: sql
      type: System.String
    - id: parameters
      type: System.Object[]
    return:
      type: System.Threading.Tasks.Task{System.Int32}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ExecuteSqlRawAsync(dbContext As IDbContext, sql As String, ParamArray parameters As Object()) As Task(Of Integer)
  overload: Hybrid.EntityFrameworkCore.DbContextExtensions.ExecuteSqlRawAsync*
  nameWithType.vb: DbContextExtensions.ExecuteSqlRawAsync(IDbContext, String, Object())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Hybrid.EntityFrameworkCore.DbContextExtensions.ExecuteSqlRawAsync(Hybrid.Domain.EntityFramework.IDbContext, System.String, System.Object())
  name.vb: ExecuteSqlRawAsync(IDbContext, String, Object())
- uid: Hybrid.EntityFrameworkCore.DbContextExtensions.ExecuteSqlInterpolated(Hybrid.Domain.EntityFramework.IDbContext,System.FormattableString)
  commentId: M:Hybrid.EntityFrameworkCore.DbContextExtensions.ExecuteSqlInterpolated(Hybrid.Domain.EntityFramework.IDbContext,System.FormattableString)
  id: ExecuteSqlInterpolated(Hybrid.Domain.EntityFramework.IDbContext,System.FormattableString)
  isExtensionMethod: true
  parent: Hybrid.EntityFrameworkCore.DbContextExtensions
  langs:
  - csharp
  - vb
  name: ExecuteSqlInterpolated(IDbContext, FormattableString)
  nameWithType: DbContextExtensions.ExecuteSqlInterpolated(IDbContext, FormattableString)
  fullName: Hybrid.EntityFrameworkCore.DbContextExtensions.ExecuteSqlInterpolated(Hybrid.Domain.EntityFramework.IDbContext, System.FormattableString)
  type: Method
  source:
    remote:
      path: src/Hybrid.EntityFrameworkCore/DbContextExtensions.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: ExecuteSqlInterpolated
    path: ../src/Hybrid.EntityFrameworkCore/DbContextExtensions.cs
    startLine: 119
  assemblies:
  - Hybrid.EntityFrameworkCore
  namespace: Hybrid.EntityFrameworkCore
  summary: "\n执行指定的格式化Sql语句\n"
  example: []
  syntax:
    content: public static int ExecuteSqlInterpolated(this IDbContext dbContext, FormattableString sql)
    parameters:
    - id: dbContext
      type: Hybrid.Domain.EntityFramework.IDbContext
    - id: sql
      type: System.FormattableString
    return:
      type: System.Int32
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ExecuteSqlInterpolated(dbContext As IDbContext, sql As FormattableString) As Integer
  overload: Hybrid.EntityFrameworkCore.DbContextExtensions.ExecuteSqlInterpolated*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Hybrid.EntityFrameworkCore.DbContextExtensions.ExecuteSqlInterpolatedAsync(Hybrid.Domain.EntityFramework.IDbContext,System.FormattableString)
  commentId: M:Hybrid.EntityFrameworkCore.DbContextExtensions.ExecuteSqlInterpolatedAsync(Hybrid.Domain.EntityFramework.IDbContext,System.FormattableString)
  id: ExecuteSqlInterpolatedAsync(Hybrid.Domain.EntityFramework.IDbContext,System.FormattableString)
  isExtensionMethod: true
  parent: Hybrid.EntityFrameworkCore.DbContextExtensions
  langs:
  - csharp
  - vb
  name: ExecuteSqlInterpolatedAsync(IDbContext, FormattableString)
  nameWithType: DbContextExtensions.ExecuteSqlInterpolatedAsync(IDbContext, FormattableString)
  fullName: Hybrid.EntityFrameworkCore.DbContextExtensions.ExecuteSqlInterpolatedAsync(Hybrid.Domain.EntityFramework.IDbContext, System.FormattableString)
  type: Method
  source:
    remote:
      path: src/Hybrid.EntityFrameworkCore/DbContextExtensions.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: ExecuteSqlInterpolatedAsync
    path: ../src/Hybrid.EntityFrameworkCore/DbContextExtensions.cs
    startLine: 131
  assemblies:
  - Hybrid.EntityFrameworkCore
  namespace: Hybrid.EntityFrameworkCore
  summary: "\n异步执行指定的格式化Sql语句\n"
  example: []
  syntax:
    content: public static Task<int> ExecuteSqlInterpolatedAsync(this IDbContext dbContext, FormattableString sql)
    parameters:
    - id: dbContext
      type: Hybrid.Domain.EntityFramework.IDbContext
    - id: sql
      type: System.FormattableString
    return:
      type: System.Threading.Tasks.Task{System.Int32}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ExecuteSqlInterpolatedAsync(dbContext As IDbContext, sql As FormattableString) As Task(Of Integer)
  overload: Hybrid.EntityFrameworkCore.DbContextExtensions.ExecuteSqlInterpolatedAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Hybrid.EntityFrameworkCore.DbContextExtensions.GetDatabaseType(Hybrid.Domain.EntityFramework.IDbContext)
  commentId: M:Hybrid.EntityFrameworkCore.DbContextExtensions.GetDatabaseType(Hybrid.Domain.EntityFramework.IDbContext)
  id: GetDatabaseType(Hybrid.Domain.EntityFramework.IDbContext)
  isExtensionMethod: true
  parent: Hybrid.EntityFrameworkCore.DbContextExtensions
  langs:
  - csharp
  - vb
  name: GetDatabaseType(IDbContext)
  nameWithType: DbContextExtensions.GetDatabaseType(IDbContext)
  fullName: Hybrid.EntityFrameworkCore.DbContextExtensions.GetDatabaseType(Hybrid.Domain.EntityFramework.IDbContext)
  type: Method
  source:
    remote:
      path: src/Hybrid.EntityFrameworkCore/DbContextExtensions.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: GetDatabaseType
    path: ../src/Hybrid.EntityFrameworkCore/DbContextExtensions.cs
    startLine: 143
  assemblies:
  - Hybrid.EntityFrameworkCore
  namespace: Hybrid.EntityFrameworkCore
  summary: "\n获取实体上下文所属的数据库类型\n"
  example: []
  syntax:
    content: public static DatabaseType GetDatabaseType(this IDbContext dbContext)
    parameters:
    - id: dbContext
      type: Hybrid.Domain.EntityFramework.IDbContext
    return:
      type: Hybrid.Domain.EntityFramework.DatabaseType
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetDatabaseType(dbContext As IDbContext) As DatabaseType
  overload: Hybrid.EntityFrameworkCore.DbContextExtensions.GetDatabaseType*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Hybrid.EntityFrameworkCore.DbContextExtensions.Update``2(Microsoft.EntityFrameworkCore.DbContext,``0[])
  commentId: M:Hybrid.EntityFrameworkCore.DbContextExtensions.Update``2(Microsoft.EntityFrameworkCore.DbContext,``0[])
  id: Update``2(Microsoft.EntityFrameworkCore.DbContext,``0[])
  isExtensionMethod: true
  parent: Hybrid.EntityFrameworkCore.DbContextExtensions
  langs:
  - csharp
  - vb
  name: Update<TEntity, TKey>(DbContext, TEntity[])
  nameWithType: DbContextExtensions.Update<TEntity, TKey>(DbContext, TEntity[])
  fullName: Hybrid.EntityFrameworkCore.DbContextExtensions.Update<TEntity, TKey>(Microsoft.EntityFrameworkCore.DbContext, TEntity[])
  type: Method
  source:
    remote:
      path: src/Hybrid.EntityFrameworkCore/DbContextExtensions.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: Update
    path: ../src/Hybrid.EntityFrameworkCore/DbContextExtensions.cs
    startLine: 166
  assemblies:
  - Hybrid.EntityFrameworkCore
  namespace: Hybrid.EntityFrameworkCore
  summary: "\n更新上下文中指定实体的状态\n"
  example: []
  syntax:
    content: >-
      public static void Update<TEntity, TKey>(this DbContext context, params TEntity[] entities)

          where TEntity : class, IEntity<TKey>
    parameters:
    - id: context
      type: Microsoft.EntityFrameworkCore.DbContext
      description: 上下文对象
    - id: entities
      type: '{TEntity}[]'
      description: 要更新的实体类型
    typeParameters:
    - id: TEntity
      description: 实体类型
    - id: TKey
      description: 主键类型
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub Update(Of TEntity As {Class, IEntity(Of TKey)}, TKey)(context As DbContext, ParamArray entities As TEntity())
  overload: Hybrid.EntityFrameworkCore.DbContextExtensions.Update*
  nameWithType.vb: DbContextExtensions.Update(Of TEntity, TKey)(DbContext, TEntity())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Hybrid.EntityFrameworkCore.DbContextExtensions.Update(Of TEntity, TKey)(Microsoft.EntityFrameworkCore.DbContext, TEntity())
  name.vb: Update(Of TEntity, TKey)(DbContext, TEntity())
references:
- uid: Hybrid.EntityFrameworkCore
  commentId: N:Hybrid.EntityFrameworkCore
  name: Hybrid.EntityFrameworkCore
  nameWithType: Hybrid.EntityFrameworkCore
  fullName: Hybrid.EntityFrameworkCore
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Hybrid.EntityFrameworkCore.DbContextExtensions.IsRelationalTransaction*
  commentId: Overload:Hybrid.EntityFrameworkCore.DbContextExtensions.IsRelationalTransaction
  name: IsRelationalTransaction
  nameWithType: DbContextExtensions.IsRelationalTransaction
  fullName: Hybrid.EntityFrameworkCore.DbContextExtensions.IsRelationalTransaction
- uid: Microsoft.EntityFrameworkCore.DbContext
  commentId: T:Microsoft.EntityFrameworkCore.DbContext
  parent: Microsoft.EntityFrameworkCore
  isExternal: true
  name: DbContext
  nameWithType: DbContext
  fullName: Microsoft.EntityFrameworkCore.DbContext
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.EntityFrameworkCore
  commentId: N:Microsoft.EntityFrameworkCore
  isExternal: true
  name: Microsoft.EntityFrameworkCore
  nameWithType: Microsoft.EntityFrameworkCore
  fullName: Microsoft.EntityFrameworkCore
- uid: Hybrid.EntityFrameworkCore.DbContextExtensions.ExistsRelationalDatabase*
  commentId: Overload:Hybrid.EntityFrameworkCore.DbContextExtensions.ExistsRelationalDatabase
  name: ExistsRelationalDatabase
  nameWithType: DbContextExtensions.ExistsRelationalDatabase
  fullName: Hybrid.EntityFrameworkCore.DbContextExtensions.ExistsRelationalDatabase
- uid: Hybrid.EntityFrameworkCore.DbContextExtensions.CheckAndMigration*
  commentId: Overload:Hybrid.EntityFrameworkCore.DbContextExtensions.CheckAndMigration
  name: CheckAndMigration
  nameWithType: DbContextExtensions.CheckAndMigration
  fullName: Hybrid.EntityFrameworkCore.DbContextExtensions.CheckAndMigration
- uid: Hybrid.EntityFrameworkCore.DbContextExtensions.ExecuteSqlCommand*
  commentId: Overload:Hybrid.EntityFrameworkCore.DbContextExtensions.ExecuteSqlCommand
  name: ExecuteSqlCommand
  nameWithType: DbContextExtensions.ExecuteSqlCommand
  fullName: Hybrid.EntityFrameworkCore.DbContextExtensions.ExecuteSqlCommand
- uid: Hybrid.Domain.EntityFramework.IDbContext
  commentId: T:Hybrid.Domain.EntityFramework.IDbContext
  parent: Hybrid.Domain.EntityFramework
  name: IDbContext
  nameWithType: IDbContext
  fullName: Hybrid.Domain.EntityFramework.IDbContext
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Object[]
  isExternal: true
  name: Object[]
  nameWithType: Object[]
  fullName: System.Object[]
  nameWithType.vb: Object()
  fullName.vb: System.Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Hybrid.Domain.EntityFramework
  commentId: N:Hybrid.Domain.EntityFramework
  name: Hybrid.Domain.EntityFramework
  nameWithType: Hybrid.Domain.EntityFramework
  fullName: Hybrid.Domain.EntityFramework
- uid: Hybrid.EntityFrameworkCore.DbContextExtensions.ExecuteSqlCommandAsync*
  commentId: Overload:Hybrid.EntityFrameworkCore.DbContextExtensions.ExecuteSqlCommandAsync
  name: ExecuteSqlCommandAsync
  nameWithType: DbContextExtensions.ExecuteSqlCommandAsync
  fullName: Hybrid.EntityFrameworkCore.DbContextExtensions.ExecuteSqlCommandAsync
- uid: System.Threading.Tasks.Task{System.Int32}
  commentId: T:System.Threading.Tasks.Task{System.Int32}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Int32>
  nameWithType: Task<Int32>
  fullName: System.Threading.Tasks.Task<System.Int32>
  nameWithType.vb: Task(Of Int32)
  fullName.vb: System.Threading.Tasks.Task(Of System.Int32)
  name.vb: Task(Of Int32)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Hybrid.EntityFrameworkCore.DbContextExtensions.ExecuteSqlRaw*
  commentId: Overload:Hybrid.EntityFrameworkCore.DbContextExtensions.ExecuteSqlRaw
  name: ExecuteSqlRaw
  nameWithType: DbContextExtensions.ExecuteSqlRaw
  fullName: Hybrid.EntityFrameworkCore.DbContextExtensions.ExecuteSqlRaw
- uid: Hybrid.EntityFrameworkCore.DbContextExtensions.ExecuteSqlRawAsync*
  commentId: Overload:Hybrid.EntityFrameworkCore.DbContextExtensions.ExecuteSqlRawAsync
  name: ExecuteSqlRawAsync
  nameWithType: DbContextExtensions.ExecuteSqlRawAsync
  fullName: Hybrid.EntityFrameworkCore.DbContextExtensions.ExecuteSqlRawAsync
- uid: Hybrid.EntityFrameworkCore.DbContextExtensions.ExecuteSqlInterpolated*
  commentId: Overload:Hybrid.EntityFrameworkCore.DbContextExtensions.ExecuteSqlInterpolated
  name: ExecuteSqlInterpolated
  nameWithType: DbContextExtensions.ExecuteSqlInterpolated
  fullName: Hybrid.EntityFrameworkCore.DbContextExtensions.ExecuteSqlInterpolated
- uid: System.FormattableString
  commentId: T:System.FormattableString
  parent: System
  isExternal: true
  name: FormattableString
  nameWithType: FormattableString
  fullName: System.FormattableString
- uid: Hybrid.EntityFrameworkCore.DbContextExtensions.ExecuteSqlInterpolatedAsync*
  commentId: Overload:Hybrid.EntityFrameworkCore.DbContextExtensions.ExecuteSqlInterpolatedAsync
  name: ExecuteSqlInterpolatedAsync
  nameWithType: DbContextExtensions.ExecuteSqlInterpolatedAsync
  fullName: Hybrid.EntityFrameworkCore.DbContextExtensions.ExecuteSqlInterpolatedAsync
- uid: Hybrid.EntityFrameworkCore.DbContextExtensions.GetDatabaseType*
  commentId: Overload:Hybrid.EntityFrameworkCore.DbContextExtensions.GetDatabaseType
  name: GetDatabaseType
  nameWithType: DbContextExtensions.GetDatabaseType
  fullName: Hybrid.EntityFrameworkCore.DbContextExtensions.GetDatabaseType
- uid: Hybrid.Domain.EntityFramework.DatabaseType
  commentId: T:Hybrid.Domain.EntityFramework.DatabaseType
  parent: Hybrid.Domain.EntityFramework
  name: DatabaseType
  nameWithType: DatabaseType
  fullName: Hybrid.Domain.EntityFramework.DatabaseType
- uid: Hybrid.EntityFrameworkCore.DbContextExtensions.Update*
  commentId: Overload:Hybrid.EntityFrameworkCore.DbContextExtensions.Update
  name: Update
  nameWithType: DbContextExtensions.Update
  fullName: Hybrid.EntityFrameworkCore.DbContextExtensions.Update
- uid: '{TEntity}[]'
  isExternal: true
  name: TEntity[]
  nameWithType: TEntity[]
  fullName: TEntity[]
  nameWithType.vb: TEntity()
  fullName.vb: TEntity()
  name.vb: TEntity()
  spec.csharp:
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ()
    nameWithType: ()
    fullName: ()
