### YamlMime:ManagedReference
items:
- uid: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin
  commentId: T:Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin
  id: LiveLogPlugin
  parent: Hybrid.Quartz.Plugins.LiveLog
  children:
  - Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.#ctor(System.IServiceProvider)
  - Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.HubContent
  - Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.JobAdded(Quartz.IJobDetail,System.Threading.CancellationToken)
  - Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.JobDeleted(Quartz.JobKey,System.Threading.CancellationToken)
  - Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.JobExecutionVetoed(Quartz.IJobExecutionContext,System.Threading.CancellationToken)
  - Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.JobInterrupted(Quartz.JobKey,System.Threading.CancellationToken)
  - Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.JobPaused(Quartz.JobKey,System.Threading.CancellationToken)
  - Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.JobResumed(Quartz.JobKey,System.Threading.CancellationToken)
  - Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.JobScheduled(Quartz.ITrigger,System.Threading.CancellationToken)
  - Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.JobsPaused(System.String,System.Threading.CancellationToken)
  - Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.JobsResumed(System.String,System.Threading.CancellationToken)
  - Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.JobToBeExecuted(Quartz.IJobExecutionContext,System.Threading.CancellationToken)
  - Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.JobUnscheduled(Quartz.TriggerKey,System.Threading.CancellationToken)
  - Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.JobWasExecuted(Quartz.IJobExecutionContext,Quartz.JobExecutionException,System.Threading.CancellationToken)
  - Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.Name
  - Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.SchedulerError(System.String,Quartz.SchedulerException,System.Threading.CancellationToken)
  - Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.SchedulerInStandbyMode(System.Threading.CancellationToken)
  - Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.SchedulerShutdown(System.Threading.CancellationToken)
  - Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.SchedulerShuttingdown(System.Threading.CancellationToken)
  - Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.SchedulerStarted(System.Threading.CancellationToken)
  - Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.SchedulerStarting(System.Threading.CancellationToken)
  - Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.SchedulingDataCleared(System.Threading.CancellationToken)
  - Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.TriggerComplete(Quartz.ITrigger,Quartz.IJobExecutionContext,Quartz.SchedulerInstruction,System.Threading.CancellationToken)
  - Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.TriggerFinalized(Quartz.ITrigger,System.Threading.CancellationToken)
  - Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.TriggerFired(Quartz.ITrigger,Quartz.IJobExecutionContext,System.Threading.CancellationToken)
  - Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.TriggerMisfired(Quartz.ITrigger,System.Threading.CancellationToken)
  - Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.TriggerPaused(Quartz.TriggerKey,System.Threading.CancellationToken)
  - Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.TriggerResumed(Quartz.TriggerKey,System.Threading.CancellationToken)
  - Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.TriggersPaused(System.String,System.Threading.CancellationToken)
  - Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.TriggersResumed(System.String,System.Threading.CancellationToken)
  - Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.VetoJobExecution(Quartz.ITrigger,Quartz.IJobExecutionContext,System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: LiveLogPlugin
  nameWithType: LiveLogPlugin
  fullName: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin
  type: Class
  source:
    remote:
      path: src/Hybrid.Quartz/Plugins/LiveLog/LiveLogPlugin.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: LiveLogPlugin
    path: ../src/Hybrid.Quartz/Plugins/LiveLog/LiveLogPlugin.cs
    startLine: 12
  assemblies:
  - Hybrid.Quartz
  namespace: Hybrid.Quartz.Plugins.LiveLog
  syntax:
    content: 'public class LiveLogPlugin : ITriggerListener, IJobListener, ISchedulerListener'
    content.vb: >-
      Public Class LiveLogPlugin
          Implements ITriggerListener, IJobListener, ISchedulerListener
  inheritance:
  - System.Object
  implements:
  - Quartz.ITriggerListener
  - Quartz.IJobListener
  - Quartz.ISchedulerListener
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - System.Object.Hybrid.Extensions.ObjectExtensions.CastTo(System.Type)
  - System.Object.Hybrid.Extensions.ObjectExtensions.CastTo``1
  - System.Object.Hybrid.Extensions.ObjectExtensions.CastTo``1({T})
  - Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.Hybrid.Extensions.ObjectExtensions.IsIn``1(Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin[])
  - System.Object.Hybrid.Extensions.ObjectExtensions.ToDynamic
  - Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.Hybrid.Extensions.ObjectExtensions.DeepClone``1
  - Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.Hybrid.Extensions.ParameterCheckExtensions.Required``1(System.Func{Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin,System.Boolean},System.String)
  - Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.Hybrid.Extensions.ParameterCheckExtensions.Required``2(System.Func{Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin,System.Boolean},System.String)
  - Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(System.String)
  - Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin},System.Action{System.Exception},System.Action{Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin})
  - Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin},System.Action{System.Exception})
  - Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin,{TResult}},System.Action{System.Exception},System.Action{Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin})
  - Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin,{TResult}},System.Action{System.Exception})
  - Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.Hybrid.Extensions.TryCatchExtensions.TryFinally``1(System.Action{Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin},System.Action{Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin})
  - System.Object.Hybrid.Json.JsonExtensions.ToJsonString(System.Boolean,System.Boolean)
  - System.Object.Hybrid.Mapping.MapperExtensions.MapTo``1
  - Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.Hybrid.Mapping.MapperExtensions.MapTo``2({TTarget})
  - System.Object.Hybrid.Reflection.LockExtensions.Locking(System.Action)
  - Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.Hybrid.Reflection.LockExtensions.Locking``1(System.Action{Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin})
  - System.Object.Hybrid.Reflection.LockExtensions.Locking``1(System.Func{{TResult}})
  - Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.Hybrid.Reflection.LockExtensions.Locking``2(System.Func{Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin,{TResult}})
  - Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2
  - Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(System.Security.Principal.IPrincipal)
  - Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(System.Security.Principal.IPrincipal)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.#ctor(System.IServiceProvider)
  commentId: M:Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.#ctor(System.IServiceProvider)
  id: '#ctor(System.IServiceProvider)'
  parent: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin
  langs:
  - csharp
  - vb
  name: LiveLogPlugin(IServiceProvider)
  nameWithType: LiveLogPlugin.LiveLogPlugin(IServiceProvider)
  fullName: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.LiveLogPlugin(System.IServiceProvider)
  type: Constructor
  source:
    remote:
      path: src/Hybrid.Quartz/Plugins/LiveLog/LiveLogPlugin.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: .ctor
    path: ../src/Hybrid.Quartz/Plugins/LiveLog/LiveLogPlugin.cs
    startLine: 16
  assemblies:
  - Hybrid.Quartz
  namespace: Hybrid.Quartz.Plugins.LiveLog
  syntax:
    content: public LiveLogPlugin(IServiceProvider serviceProvider)
    parameters:
    - id: serviceProvider
      type: System.IServiceProvider
    content.vb: Public Sub New(serviceProvider As IServiceProvider)
  overload: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.HubContent
  commentId: P:Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.HubContent
  id: HubContent
  parent: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin
  langs:
  - csharp
  - vb
  name: HubContent
  nameWithType: LiveLogPlugin.HubContent
  fullName: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.HubContent
  type: Property
  source:
    remote:
      path: src/Hybrid.Quartz/Plugins/LiveLog/LiveLogPlugin.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: HubContent
    path: ../src/Hybrid.Quartz/Plugins/LiveLog/LiveLogPlugin.cs
    startLine: 21
  assemblies:
  - Hybrid.Quartz
  namespace: Hybrid.Quartz.Plugins.LiveLog
  syntax:
    content: protected IHubContext<LiveLogHub> HubContent { get; }
    parameters: []
    return:
      type: Microsoft.AspNetCore.SignalR.IHubContext{Hybrid.Quartz.Plugins.LiveLog.LiveLogHub}
    content.vb: Protected ReadOnly Property HubContent As IHubContext(Of LiveLogHub)
  overload: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.HubContent*
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.TriggerComplete(Quartz.ITrigger,Quartz.IJobExecutionContext,Quartz.SchedulerInstruction,System.Threading.CancellationToken)
  commentId: M:Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.TriggerComplete(Quartz.ITrigger,Quartz.IJobExecutionContext,Quartz.SchedulerInstruction,System.Threading.CancellationToken)
  id: TriggerComplete(Quartz.ITrigger,Quartz.IJobExecutionContext,Quartz.SchedulerInstruction,System.Threading.CancellationToken)
  parent: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin
  langs:
  - csharp
  - vb
  name: TriggerComplete(ITrigger, IJobExecutionContext, SchedulerInstruction, CancellationToken)
  nameWithType: LiveLogPlugin.TriggerComplete(ITrigger, IJobExecutionContext, SchedulerInstruction, CancellationToken)
  fullName: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.TriggerComplete(Quartz.ITrigger, Quartz.IJobExecutionContext, Quartz.SchedulerInstruction, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Hybrid.Quartz/Plugins/LiveLog/LiveLogPlugin.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: TriggerComplete
    path: ../src/Hybrid.Quartz/Plugins/LiveLog/LiveLogPlugin.cs
    startLine: 33
  assemblies:
  - Hybrid.Quartz
  namespace: Hybrid.Quartz.Plugins.LiveLog
  summary: "\n触发器完成\n"
  example: []
  syntax:
    content: public Task TriggerComplete(ITrigger trigger, IJobExecutionContext context, SchedulerInstruction triggerInstructionCode, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: trigger
      type: Quartz.ITrigger
      description: ''
    - id: context
      type: Quartz.IJobExecutionContext
      description: ''
    - id: triggerInstructionCode
      type: Quartz.SchedulerInstruction
      description: ''
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: ''
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: Public Function TriggerComplete(trigger As ITrigger, context As IJobExecutionContext, triggerInstructionCode As SchedulerInstruction, cancellationToken As CancellationToken = Nothing) As Task
  overload: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.TriggerComplete*
  implements:
  - Quartz.ITriggerListener.TriggerComplete(Quartz.ITrigger,Quartz.IJobExecutionContext,Quartz.SchedulerInstruction,System.Threading.CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.TriggerFired(Quartz.ITrigger,Quartz.IJobExecutionContext,System.Threading.CancellationToken)
  commentId: M:Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.TriggerFired(Quartz.ITrigger,Quartz.IJobExecutionContext,System.Threading.CancellationToken)
  id: TriggerFired(Quartz.ITrigger,Quartz.IJobExecutionContext,System.Threading.CancellationToken)
  parent: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin
  langs:
  - csharp
  - vb
  name: TriggerFired(ITrigger, IJobExecutionContext, CancellationToken)
  nameWithType: LiveLogPlugin.TriggerFired(ITrigger, IJobExecutionContext, CancellationToken)
  fullName: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.TriggerFired(Quartz.ITrigger, Quartz.IJobExecutionContext, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Hybrid.Quartz/Plugins/LiveLog/LiveLogPlugin.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: TriggerFired
    path: ../src/Hybrid.Quartz/Plugins/LiveLog/LiveLogPlugin.cs
    startLine: 46
  assemblies:
  - Hybrid.Quartz
  namespace: Hybrid.Quartz.Plugins.LiveLog
  summary: "\n触发器触发\n"
  example: []
  syntax:
    content: public Task TriggerFired(ITrigger trigger, IJobExecutionContext context, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: trigger
      type: Quartz.ITrigger
      description: ''
    - id: context
      type: Quartz.IJobExecutionContext
      description: ''
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: ''
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: Public Function TriggerFired(trigger As ITrigger, context As IJobExecutionContext, cancellationToken As CancellationToken = Nothing) As Task
  overload: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.TriggerFired*
  implements:
  - Quartz.ITriggerListener.TriggerFired(Quartz.ITrigger,Quartz.IJobExecutionContext,System.Threading.CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.TriggerMisfired(Quartz.ITrigger,System.Threading.CancellationToken)
  commentId: M:Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.TriggerMisfired(Quartz.ITrigger,System.Threading.CancellationToken)
  id: TriggerMisfired(Quartz.ITrigger,System.Threading.CancellationToken)
  parent: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin
  langs:
  - csharp
  - vb
  name: TriggerMisfired(ITrigger, CancellationToken)
  nameWithType: LiveLogPlugin.TriggerMisfired(ITrigger, CancellationToken)
  fullName: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.TriggerMisfired(Quartz.ITrigger, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Hybrid.Quartz/Plugins/LiveLog/LiveLogPlugin.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: TriggerMisfired
    path: ../src/Hybrid.Quartz/Plugins/LiveLog/LiveLogPlugin.cs
    startLine: 52
  assemblies:
  - Hybrid.Quartz
  namespace: Hybrid.Quartz.Plugins.LiveLog
  syntax:
    content: public Task TriggerMisfired(ITrigger trigger, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: trigger
      type: Quartz.ITrigger
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Function TriggerMisfired(trigger As ITrigger, cancellationToken As CancellationToken = Nothing) As Task
  overload: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.TriggerMisfired*
  implements:
  - Quartz.ITriggerListener.TriggerMisfired(Quartz.ITrigger,System.Threading.CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.VetoJobExecution(Quartz.ITrigger,Quartz.IJobExecutionContext,System.Threading.CancellationToken)
  commentId: M:Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.VetoJobExecution(Quartz.ITrigger,Quartz.IJobExecutionContext,System.Threading.CancellationToken)
  id: VetoJobExecution(Quartz.ITrigger,Quartz.IJobExecutionContext,System.Threading.CancellationToken)
  parent: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin
  langs:
  - csharp
  - vb
  name: VetoJobExecution(ITrigger, IJobExecutionContext, CancellationToken)
  nameWithType: LiveLogPlugin.VetoJobExecution(ITrigger, IJobExecutionContext, CancellationToken)
  fullName: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.VetoJobExecution(Quartz.ITrigger, Quartz.IJobExecutionContext, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Hybrid.Quartz/Plugins/LiveLog/LiveLogPlugin.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: VetoJobExecution
    path: ../src/Hybrid.Quartz/Plugins/LiveLog/LiveLogPlugin.cs
    startLine: 65
  assemblies:
  - Hybrid.Quartz
  namespace: Hybrid.Quartz.Plugins.LiveLog
  summary: "\n否决任务执行\n"
  example: []
  syntax:
    content: public Task<bool> VetoJobExecution(ITrigger trigger, IJobExecutionContext context, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: trigger
      type: Quartz.ITrigger
      description: ''
    - id: context
      type: Quartz.IJobExecutionContext
      description: ''
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: ''
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: ''
    content.vb: Public Function VetoJobExecution(trigger As ITrigger, context As IJobExecutionContext, cancellationToken As CancellationToken = Nothing) As Task(Of Boolean)
  overload: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.VetoJobExecution*
  implements:
  - Quartz.ITriggerListener.VetoJobExecution(Quartz.ITrigger,Quartz.IJobExecutionContext,System.Threading.CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.Name
  commentId: P:Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.Name
  id: Name
  parent: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: LiveLogPlugin.Name
  fullName: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.Name
  type: Property
  source:
    remote:
      path: src/Hybrid.Quartz/Plugins/LiveLog/LiveLogPlugin.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: Name
    path: ../src/Hybrid.Quartz/Plugins/LiveLog/LiveLogPlugin.cs
    startLine: 74
  assemblies:
  - Hybrid.Quartz
  namespace: Hybrid.Quartz.Plugins.LiveLog
  syntax:
    content: public string Name { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Name As String
  overload: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.Name*
  implements:
  - Quartz.ITriggerListener.Name
  - Quartz.IJobListener.Name
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.JobExecutionVetoed(Quartz.IJobExecutionContext,System.Threading.CancellationToken)
  commentId: M:Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.JobExecutionVetoed(Quartz.IJobExecutionContext,System.Threading.CancellationToken)
  id: JobExecutionVetoed(Quartz.IJobExecutionContext,System.Threading.CancellationToken)
  parent: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin
  langs:
  - csharp
  - vb
  name: JobExecutionVetoed(IJobExecutionContext, CancellationToken)
  nameWithType: LiveLogPlugin.JobExecutionVetoed(IJobExecutionContext, CancellationToken)
  fullName: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.JobExecutionVetoed(Quartz.IJobExecutionContext, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Hybrid.Quartz/Plugins/LiveLog/LiveLogPlugin.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: JobExecutionVetoed
    path: ../src/Hybrid.Quartz/Plugins/LiveLog/LiveLogPlugin.cs
    startLine: 82
  assemblies:
  - Hybrid.Quartz
  namespace: Hybrid.Quartz.Plugins.LiveLog
  summary: "\n任务执行被否决\n"
  example: []
  syntax:
    content: public Task JobExecutionVetoed(IJobExecutionContext context, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: context
      type: Quartz.IJobExecutionContext
      description: ''
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: ''
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: Public Function JobExecutionVetoed(context As IJobExecutionContext, cancellationToken As CancellationToken = Nothing) As Task
  overload: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.JobExecutionVetoed*
  implements:
  - Quartz.IJobListener.JobExecutionVetoed(Quartz.IJobExecutionContext,System.Threading.CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.JobToBeExecuted(Quartz.IJobExecutionContext,System.Threading.CancellationToken)
  commentId: M:Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.JobToBeExecuted(Quartz.IJobExecutionContext,System.Threading.CancellationToken)
  id: JobToBeExecuted(Quartz.IJobExecutionContext,System.Threading.CancellationToken)
  parent: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin
  langs:
  - csharp
  - vb
  name: JobToBeExecuted(IJobExecutionContext, CancellationToken)
  nameWithType: LiveLogPlugin.JobToBeExecuted(IJobExecutionContext, CancellationToken)
  fullName: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.JobToBeExecuted(Quartz.IJobExecutionContext, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Hybrid.Quartz/Plugins/LiveLog/LiveLogPlugin.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: JobToBeExecuted
    path: ../src/Hybrid.Quartz/Plugins/LiveLog/LiveLogPlugin.cs
    startLine: 93
  assemblies:
  - Hybrid.Quartz
  namespace: Hybrid.Quartz.Plugins.LiveLog
  summary: "\n要执行的任务\n"
  example: []
  syntax:
    content: public Task JobToBeExecuted(IJobExecutionContext context, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: context
      type: Quartz.IJobExecutionContext
      description: ''
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: ''
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: Public Function JobToBeExecuted(context As IJobExecutionContext, cancellationToken As CancellationToken = Nothing) As Task
  overload: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.JobToBeExecuted*
  implements:
  - Quartz.IJobListener.JobToBeExecuted(Quartz.IJobExecutionContext,System.Threading.CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.JobWasExecuted(Quartz.IJobExecutionContext,Quartz.JobExecutionException,System.Threading.CancellationToken)
  commentId: M:Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.JobWasExecuted(Quartz.IJobExecutionContext,Quartz.JobExecutionException,System.Threading.CancellationToken)
  id: JobWasExecuted(Quartz.IJobExecutionContext,Quartz.JobExecutionException,System.Threading.CancellationToken)
  parent: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin
  langs:
  - csharp
  - vb
  name: JobWasExecuted(IJobExecutionContext, JobExecutionException, CancellationToken)
  nameWithType: LiveLogPlugin.JobWasExecuted(IJobExecutionContext, JobExecutionException, CancellationToken)
  fullName: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.JobWasExecuted(Quartz.IJobExecutionContext, Quartz.JobExecutionException, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Hybrid.Quartz/Plugins/LiveLog/LiveLogPlugin.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: JobWasExecuted
    path: ../src/Hybrid.Quartz/Plugins/LiveLog/LiveLogPlugin.cs
    startLine: 106
  assemblies:
  - Hybrid.Quartz
  namespace: Hybrid.Quartz.Plugins.LiveLog
  summary: "\n任务已执行\n"
  example: []
  syntax:
    content: public Task JobWasExecuted(IJobExecutionContext context, JobExecutionException jobException, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: context
      type: Quartz.IJobExecutionContext
      description: ''
    - id: jobException
      type: Quartz.JobExecutionException
      description: ''
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: ''
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: Public Function JobWasExecuted(context As IJobExecutionContext, jobException As JobExecutionException, cancellationToken As CancellationToken = Nothing) As Task
  overload: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.JobWasExecuted*
  implements:
  - Quartz.IJobListener.JobWasExecuted(Quartz.IJobExecutionContext,Quartz.JobExecutionException,System.Threading.CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.JobAdded(Quartz.IJobDetail,System.Threading.CancellationToken)
  commentId: M:Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.JobAdded(Quartz.IJobDetail,System.Threading.CancellationToken)
  id: JobAdded(Quartz.IJobDetail,System.Threading.CancellationToken)
  parent: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin
  langs:
  - csharp
  - vb
  name: JobAdded(IJobDetail, CancellationToken)
  nameWithType: LiveLogPlugin.JobAdded(IJobDetail, CancellationToken)
  fullName: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.JobAdded(Quartz.IJobDetail, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Hybrid.Quartz/Plugins/LiveLog/LiveLogPlugin.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: JobAdded
    path: ../src/Hybrid.Quartz/Plugins/LiveLog/LiveLogPlugin.cs
    startLine: 116
  assemblies:
  - Hybrid.Quartz
  namespace: Hybrid.Quartz.Plugins.LiveLog
  syntax:
    content: public Task JobAdded(IJobDetail jobDetail, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: jobDetail
      type: Quartz.IJobDetail
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Function JobAdded(jobDetail As IJobDetail, cancellationToken As CancellationToken = Nothing) As Task
  overload: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.JobAdded*
  implements:
  - Quartz.ISchedulerListener.JobAdded(Quartz.IJobDetail,System.Threading.CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.JobDeleted(Quartz.JobKey,System.Threading.CancellationToken)
  commentId: M:Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.JobDeleted(Quartz.JobKey,System.Threading.CancellationToken)
  id: JobDeleted(Quartz.JobKey,System.Threading.CancellationToken)
  parent: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin
  langs:
  - csharp
  - vb
  name: JobDeleted(JobKey, CancellationToken)
  nameWithType: LiveLogPlugin.JobDeleted(JobKey, CancellationToken)
  fullName: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.JobDeleted(Quartz.JobKey, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Hybrid.Quartz/Plugins/LiveLog/LiveLogPlugin.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: JobDeleted
    path: ../src/Hybrid.Quartz/Plugins/LiveLog/LiveLogPlugin.cs
    startLine: 127
  assemblies:
  - Hybrid.Quartz
  namespace: Hybrid.Quartz.Plugins.LiveLog
  summary: "\n删除任务\n"
  example: []
  syntax:
    content: public Task JobDeleted(JobKey jobKey, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: jobKey
      type: Quartz.JobKey
      description: ''
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: ''
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: Public Function JobDeleted(jobKey As JobKey, cancellationToken As CancellationToken = Nothing) As Task
  overload: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.JobDeleted*
  implements:
  - Quartz.ISchedulerListener.JobDeleted(Quartz.JobKey,System.Threading.CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.JobInterrupted(Quartz.JobKey,System.Threading.CancellationToken)
  commentId: M:Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.JobInterrupted(Quartz.JobKey,System.Threading.CancellationToken)
  id: JobInterrupted(Quartz.JobKey,System.Threading.CancellationToken)
  parent: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin
  langs:
  - csharp
  - vb
  name: JobInterrupted(JobKey, CancellationToken)
  nameWithType: LiveLogPlugin.JobInterrupted(JobKey, CancellationToken)
  fullName: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.JobInterrupted(Quartz.JobKey, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Hybrid.Quartz/Plugins/LiveLog/LiveLogPlugin.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: JobInterrupted
    path: ../src/Hybrid.Quartz/Plugins/LiveLog/LiveLogPlugin.cs
    startLine: 139
  assemblies:
  - Hybrid.Quartz
  namespace: Hybrid.Quartz.Plugins.LiveLog
  summary: "\n任务中断\n"
  example: []
  syntax:
    content: public Task JobInterrupted(JobKey jobKey, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: jobKey
      type: Quartz.JobKey
      description: ''
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: ''
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: Public Function JobInterrupted(jobKey As JobKey, cancellationToken As CancellationToken = Nothing) As Task
  overload: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.JobInterrupted*
  implements:
  - Quartz.ISchedulerListener.JobInterrupted(Quartz.JobKey,System.Threading.CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.JobPaused(Quartz.JobKey,System.Threading.CancellationToken)
  commentId: M:Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.JobPaused(Quartz.JobKey,System.Threading.CancellationToken)
  id: JobPaused(Quartz.JobKey,System.Threading.CancellationToken)
  parent: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin
  langs:
  - csharp
  - vb
  name: JobPaused(JobKey, CancellationToken)
  nameWithType: LiveLogPlugin.JobPaused(JobKey, CancellationToken)
  fullName: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.JobPaused(Quartz.JobKey, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Hybrid.Quartz/Plugins/LiveLog/LiveLogPlugin.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: JobPaused
    path: ../src/Hybrid.Quartz/Plugins/LiveLog/LiveLogPlugin.cs
    startLine: 151
  assemblies:
  - Hybrid.Quartz
  namespace: Hybrid.Quartz.Plugins.LiveLog
  summary: "\n暂停任务\n"
  example: []
  syntax:
    content: public Task JobPaused(JobKey jobKey, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: jobKey
      type: Quartz.JobKey
      description: ''
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: ''
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: Public Function JobPaused(jobKey As JobKey, cancellationToken As CancellationToken = Nothing) As Task
  overload: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.JobPaused*
  implements:
  - Quartz.ISchedulerListener.JobPaused(Quartz.JobKey,System.Threading.CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.JobResumed(Quartz.JobKey,System.Threading.CancellationToken)
  commentId: M:Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.JobResumed(Quartz.JobKey,System.Threading.CancellationToken)
  id: JobResumed(Quartz.JobKey,System.Threading.CancellationToken)
  parent: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin
  langs:
  - csharp
  - vb
  name: JobResumed(JobKey, CancellationToken)
  nameWithType: LiveLogPlugin.JobResumed(JobKey, CancellationToken)
  fullName: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.JobResumed(Quartz.JobKey, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Hybrid.Quartz/Plugins/LiveLog/LiveLogPlugin.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: JobResumed
    path: ../src/Hybrid.Quartz/Plugins/LiveLog/LiveLogPlugin.cs
    startLine: 163
  assemblies:
  - Hybrid.Quartz
  namespace: Hybrid.Quartz.Plugins.LiveLog
  summary: "\n恢复任务\n"
  example: []
  syntax:
    content: public Task JobResumed(JobKey jobKey, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: jobKey
      type: Quartz.JobKey
      description: ''
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: ''
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: Public Function JobResumed(jobKey As JobKey, cancellationToken As CancellationToken = Nothing) As Task
  overload: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.JobResumed*
  implements:
  - Quartz.ISchedulerListener.JobResumed(Quartz.JobKey,System.Threading.CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.JobScheduled(Quartz.ITrigger,System.Threading.CancellationToken)
  commentId: M:Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.JobScheduled(Quartz.ITrigger,System.Threading.CancellationToken)
  id: JobScheduled(Quartz.ITrigger,System.Threading.CancellationToken)
  parent: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin
  langs:
  - csharp
  - vb
  name: JobScheduled(ITrigger, CancellationToken)
  nameWithType: LiveLogPlugin.JobScheduled(ITrigger, CancellationToken)
  fullName: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.JobScheduled(Quartz.ITrigger, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Hybrid.Quartz/Plugins/LiveLog/LiveLogPlugin.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: JobScheduled
    path: ../src/Hybrid.Quartz/Plugins/LiveLog/LiveLogPlugin.cs
    startLine: 175
  assemblies:
  - Hybrid.Quartz
  namespace: Hybrid.Quartz.Plugins.LiveLog
  summary: "\n任务已计划\n"
  example: []
  syntax:
    content: public Task JobScheduled(ITrigger trigger, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: trigger
      type: Quartz.ITrigger
      description: ''
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: ''
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: Public Function JobScheduled(trigger As ITrigger, cancellationToken As CancellationToken = Nothing) As Task
  overload: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.JobScheduled*
  implements:
  - Quartz.ISchedulerListener.JobScheduled(Quartz.ITrigger,System.Threading.CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.JobsPaused(System.String,System.Threading.CancellationToken)
  commentId: M:Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.JobsPaused(System.String,System.Threading.CancellationToken)
  id: JobsPaused(System.String,System.Threading.CancellationToken)
  parent: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin
  langs:
  - csharp
  - vb
  name: JobsPaused(String, CancellationToken)
  nameWithType: LiveLogPlugin.JobsPaused(String, CancellationToken)
  fullName: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.JobsPaused(System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Hybrid.Quartz/Plugins/LiveLog/LiveLogPlugin.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: JobsPaused
    path: ../src/Hybrid.Quartz/Plugins/LiveLog/LiveLogPlugin.cs
    startLine: 186
  assemblies:
  - Hybrid.Quartz
  namespace: Hybrid.Quartz.Plugins.LiveLog
  summary: "\n暂停整个分组任务\n"
  example: []
  syntax:
    content: public Task JobsPaused(string jobGroup, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: jobGroup
      type: System.String
      description: ''
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: ''
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: Public Function JobsPaused(jobGroup As String, cancellationToken As CancellationToken = Nothing) As Task
  overload: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.JobsPaused*
  implements:
  - Quartz.ISchedulerListener.JobsPaused(System.String,System.Threading.CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.JobsResumed(System.String,System.Threading.CancellationToken)
  commentId: M:Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.JobsResumed(System.String,System.Threading.CancellationToken)
  id: JobsResumed(System.String,System.Threading.CancellationToken)
  parent: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin
  langs:
  - csharp
  - vb
  name: JobsResumed(String, CancellationToken)
  nameWithType: LiveLogPlugin.JobsResumed(String, CancellationToken)
  fullName: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.JobsResumed(System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Hybrid.Quartz/Plugins/LiveLog/LiveLogPlugin.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: JobsResumed
    path: ../src/Hybrid.Quartz/Plugins/LiveLog/LiveLogPlugin.cs
    startLine: 197
  assemblies:
  - Hybrid.Quartz
  namespace: Hybrid.Quartz.Plugins.LiveLog
  summary: "\n恢复整个分组任务\n"
  example: []
  syntax:
    content: public Task JobsResumed(string jobGroup, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: jobGroup
      type: System.String
      description: ''
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: ''
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: Public Function JobsResumed(jobGroup As String, cancellationToken As CancellationToken = Nothing) As Task
  overload: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.JobsResumed*
  implements:
  - Quartz.ISchedulerListener.JobsResumed(System.String,System.Threading.CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.JobUnscheduled(Quartz.TriggerKey,System.Threading.CancellationToken)
  commentId: M:Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.JobUnscheduled(Quartz.TriggerKey,System.Threading.CancellationToken)
  id: JobUnscheduled(Quartz.TriggerKey,System.Threading.CancellationToken)
  parent: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin
  langs:
  - csharp
  - vb
  name: JobUnscheduled(TriggerKey, CancellationToken)
  nameWithType: LiveLogPlugin.JobUnscheduled(TriggerKey, CancellationToken)
  fullName: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.JobUnscheduled(Quartz.TriggerKey, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Hybrid.Quartz/Plugins/LiveLog/LiveLogPlugin.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: JobUnscheduled
    path: ../src/Hybrid.Quartz/Plugins/LiveLog/LiveLogPlugin.cs
    startLine: 208
  assemblies:
  - Hybrid.Quartz
  namespace: Hybrid.Quartz.Plugins.LiveLog
  summary: "\n未计划的任务\n"
  example: []
  syntax:
    content: public Task JobUnscheduled(TriggerKey triggerKey, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: triggerKey
      type: Quartz.TriggerKey
      description: ''
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: ''
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: Public Function JobUnscheduled(triggerKey As TriggerKey, cancellationToken As CancellationToken = Nothing) As Task
  overload: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.JobUnscheduled*
  implements:
  - Quartz.ISchedulerListener.JobUnscheduled(Quartz.TriggerKey,System.Threading.CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.SchedulerError(System.String,Quartz.SchedulerException,System.Threading.CancellationToken)
  commentId: M:Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.SchedulerError(System.String,Quartz.SchedulerException,System.Threading.CancellationToken)
  id: SchedulerError(System.String,Quartz.SchedulerException,System.Threading.CancellationToken)
  parent: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin
  langs:
  - csharp
  - vb
  name: SchedulerError(String, SchedulerException, CancellationToken)
  nameWithType: LiveLogPlugin.SchedulerError(String, SchedulerException, CancellationToken)
  fullName: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.SchedulerError(System.String, Quartz.SchedulerException, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Hybrid.Quartz/Plugins/LiveLog/LiveLogPlugin.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: SchedulerError
    path: ../src/Hybrid.Quartz/Plugins/LiveLog/LiveLogPlugin.cs
    startLine: 213
  assemblies:
  - Hybrid.Quartz
  namespace: Hybrid.Quartz.Plugins.LiveLog
  syntax:
    content: public Task SchedulerError(string msg, SchedulerException cause, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: msg
      type: System.String
    - id: cause
      type: Quartz.SchedulerException
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Function SchedulerError(msg As String, cause As SchedulerException, cancellationToken As CancellationToken = Nothing) As Task
  overload: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.SchedulerError*
  implements:
  - Quartz.ISchedulerListener.SchedulerError(System.String,Quartz.SchedulerException,System.Threading.CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.SchedulerInStandbyMode(System.Threading.CancellationToken)
  commentId: M:Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.SchedulerInStandbyMode(System.Threading.CancellationToken)
  id: SchedulerInStandbyMode(System.Threading.CancellationToken)
  parent: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin
  langs:
  - csharp
  - vb
  name: SchedulerInStandbyMode(CancellationToken)
  nameWithType: LiveLogPlugin.SchedulerInStandbyMode(CancellationToken)
  fullName: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.SchedulerInStandbyMode(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Hybrid.Quartz/Plugins/LiveLog/LiveLogPlugin.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: SchedulerInStandbyMode
    path: ../src/Hybrid.Quartz/Plugins/LiveLog/LiveLogPlugin.cs
    startLine: 218
  assemblies:
  - Hybrid.Quartz
  namespace: Hybrid.Quartz.Plugins.LiveLog
  syntax:
    content: public Task SchedulerInStandbyMode(CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Function SchedulerInStandbyMode(cancellationToken As CancellationToken = Nothing) As Task
  overload: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.SchedulerInStandbyMode*
  implements:
  - Quartz.ISchedulerListener.SchedulerInStandbyMode(System.Threading.CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.SchedulerShutdown(System.Threading.CancellationToken)
  commentId: M:Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.SchedulerShutdown(System.Threading.CancellationToken)
  id: SchedulerShutdown(System.Threading.CancellationToken)
  parent: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin
  langs:
  - csharp
  - vb
  name: SchedulerShutdown(CancellationToken)
  nameWithType: LiveLogPlugin.SchedulerShutdown(CancellationToken)
  fullName: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.SchedulerShutdown(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Hybrid.Quartz/Plugins/LiveLog/LiveLogPlugin.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: SchedulerShutdown
    path: ../src/Hybrid.Quartz/Plugins/LiveLog/LiveLogPlugin.cs
    startLine: 223
  assemblies:
  - Hybrid.Quartz
  namespace: Hybrid.Quartz.Plugins.LiveLog
  syntax:
    content: public Task SchedulerShutdown(CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Function SchedulerShutdown(cancellationToken As CancellationToken = Nothing) As Task
  overload: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.SchedulerShutdown*
  implements:
  - Quartz.ISchedulerListener.SchedulerShutdown(System.Threading.CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.SchedulerShuttingdown(System.Threading.CancellationToken)
  commentId: M:Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.SchedulerShuttingdown(System.Threading.CancellationToken)
  id: SchedulerShuttingdown(System.Threading.CancellationToken)
  parent: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin
  langs:
  - csharp
  - vb
  name: SchedulerShuttingdown(CancellationToken)
  nameWithType: LiveLogPlugin.SchedulerShuttingdown(CancellationToken)
  fullName: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.SchedulerShuttingdown(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Hybrid.Quartz/Plugins/LiveLog/LiveLogPlugin.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: SchedulerShuttingdown
    path: ../src/Hybrid.Quartz/Plugins/LiveLog/LiveLogPlugin.cs
    startLine: 228
  assemblies:
  - Hybrid.Quartz
  namespace: Hybrid.Quartz.Plugins.LiveLog
  syntax:
    content: public Task SchedulerShuttingdown(CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Function SchedulerShuttingdown(cancellationToken As CancellationToken = Nothing) As Task
  overload: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.SchedulerShuttingdown*
  implements:
  - Quartz.ISchedulerListener.SchedulerShuttingdown(System.Threading.CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.SchedulerStarted(System.Threading.CancellationToken)
  commentId: M:Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.SchedulerStarted(System.Threading.CancellationToken)
  id: SchedulerStarted(System.Threading.CancellationToken)
  parent: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin
  langs:
  - csharp
  - vb
  name: SchedulerStarted(CancellationToken)
  nameWithType: LiveLogPlugin.SchedulerStarted(CancellationToken)
  fullName: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.SchedulerStarted(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Hybrid.Quartz/Plugins/LiveLog/LiveLogPlugin.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: SchedulerStarted
    path: ../src/Hybrid.Quartz/Plugins/LiveLog/LiveLogPlugin.cs
    startLine: 233
  assemblies:
  - Hybrid.Quartz
  namespace: Hybrid.Quartz.Plugins.LiveLog
  syntax:
    content: public Task SchedulerStarted(CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Function SchedulerStarted(cancellationToken As CancellationToken = Nothing) As Task
  overload: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.SchedulerStarted*
  implements:
  - Quartz.ISchedulerListener.SchedulerStarted(System.Threading.CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.SchedulerStarting(System.Threading.CancellationToken)
  commentId: M:Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.SchedulerStarting(System.Threading.CancellationToken)
  id: SchedulerStarting(System.Threading.CancellationToken)
  parent: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin
  langs:
  - csharp
  - vb
  name: SchedulerStarting(CancellationToken)
  nameWithType: LiveLogPlugin.SchedulerStarting(CancellationToken)
  fullName: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.SchedulerStarting(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Hybrid.Quartz/Plugins/LiveLog/LiveLogPlugin.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: SchedulerStarting
    path: ../src/Hybrid.Quartz/Plugins/LiveLog/LiveLogPlugin.cs
    startLine: 238
  assemblies:
  - Hybrid.Quartz
  namespace: Hybrid.Quartz.Plugins.LiveLog
  syntax:
    content: public Task SchedulerStarting(CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Function SchedulerStarting(cancellationToken As CancellationToken = Nothing) As Task
  overload: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.SchedulerStarting*
  implements:
  - Quartz.ISchedulerListener.SchedulerStarting(System.Threading.CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.SchedulingDataCleared(System.Threading.CancellationToken)
  commentId: M:Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.SchedulingDataCleared(System.Threading.CancellationToken)
  id: SchedulingDataCleared(System.Threading.CancellationToken)
  parent: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin
  langs:
  - csharp
  - vb
  name: SchedulingDataCleared(CancellationToken)
  nameWithType: LiveLogPlugin.SchedulingDataCleared(CancellationToken)
  fullName: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.SchedulingDataCleared(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Hybrid.Quartz/Plugins/LiveLog/LiveLogPlugin.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: SchedulingDataCleared
    path: ../src/Hybrid.Quartz/Plugins/LiveLog/LiveLogPlugin.cs
    startLine: 243
  assemblies:
  - Hybrid.Quartz
  namespace: Hybrid.Quartz.Plugins.LiveLog
  syntax:
    content: public Task SchedulingDataCleared(CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Function SchedulingDataCleared(cancellationToken As CancellationToken = Nothing) As Task
  overload: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.SchedulingDataCleared*
  implements:
  - Quartz.ISchedulerListener.SchedulingDataCleared(System.Threading.CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.TriggerFinalized(Quartz.ITrigger,System.Threading.CancellationToken)
  commentId: M:Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.TriggerFinalized(Quartz.ITrigger,System.Threading.CancellationToken)
  id: TriggerFinalized(Quartz.ITrigger,System.Threading.CancellationToken)
  parent: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin
  langs:
  - csharp
  - vb
  name: TriggerFinalized(ITrigger, CancellationToken)
  nameWithType: LiveLogPlugin.TriggerFinalized(ITrigger, CancellationToken)
  fullName: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.TriggerFinalized(Quartz.ITrigger, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Hybrid.Quartz/Plugins/LiveLog/LiveLogPlugin.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: TriggerFinalized
    path: ../src/Hybrid.Quartz/Plugins/LiveLog/LiveLogPlugin.cs
    startLine: 248
  assemblies:
  - Hybrid.Quartz
  namespace: Hybrid.Quartz.Plugins.LiveLog
  syntax:
    content: public Task TriggerFinalized(ITrigger trigger, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: trigger
      type: Quartz.ITrigger
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Function TriggerFinalized(trigger As ITrigger, cancellationToken As CancellationToken = Nothing) As Task
  overload: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.TriggerFinalized*
  implements:
  - Quartz.ISchedulerListener.TriggerFinalized(Quartz.ITrigger,System.Threading.CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.TriggerPaused(Quartz.TriggerKey,System.Threading.CancellationToken)
  commentId: M:Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.TriggerPaused(Quartz.TriggerKey,System.Threading.CancellationToken)
  id: TriggerPaused(Quartz.TriggerKey,System.Threading.CancellationToken)
  parent: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin
  langs:
  - csharp
  - vb
  name: TriggerPaused(TriggerKey, CancellationToken)
  nameWithType: LiveLogPlugin.TriggerPaused(TriggerKey, CancellationToken)
  fullName: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.TriggerPaused(Quartz.TriggerKey, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Hybrid.Quartz/Plugins/LiveLog/LiveLogPlugin.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: TriggerPaused
    path: ../src/Hybrid.Quartz/Plugins/LiveLog/LiveLogPlugin.cs
    startLine: 253
  assemblies:
  - Hybrid.Quartz
  namespace: Hybrid.Quartz.Plugins.LiveLog
  syntax:
    content: public Task TriggerPaused(TriggerKey triggerKey, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: triggerKey
      type: Quartz.TriggerKey
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Function TriggerPaused(triggerKey As TriggerKey, cancellationToken As CancellationToken = Nothing) As Task
  overload: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.TriggerPaused*
  implements:
  - Quartz.ISchedulerListener.TriggerPaused(Quartz.TriggerKey,System.Threading.CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.TriggerResumed(Quartz.TriggerKey,System.Threading.CancellationToken)
  commentId: M:Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.TriggerResumed(Quartz.TriggerKey,System.Threading.CancellationToken)
  id: TriggerResumed(Quartz.TriggerKey,System.Threading.CancellationToken)
  parent: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin
  langs:
  - csharp
  - vb
  name: TriggerResumed(TriggerKey, CancellationToken)
  nameWithType: LiveLogPlugin.TriggerResumed(TriggerKey, CancellationToken)
  fullName: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.TriggerResumed(Quartz.TriggerKey, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Hybrid.Quartz/Plugins/LiveLog/LiveLogPlugin.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: TriggerResumed
    path: ../src/Hybrid.Quartz/Plugins/LiveLog/LiveLogPlugin.cs
    startLine: 259
  assemblies:
  - Hybrid.Quartz
  namespace: Hybrid.Quartz.Plugins.LiveLog
  syntax:
    content: public Task TriggerResumed(TriggerKey triggerKey, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: triggerKey
      type: Quartz.TriggerKey
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Function TriggerResumed(triggerKey As TriggerKey, cancellationToken As CancellationToken = Nothing) As Task
  overload: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.TriggerResumed*
  implements:
  - Quartz.ISchedulerListener.TriggerResumed(Quartz.TriggerKey,System.Threading.CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.TriggersPaused(System.String,System.Threading.CancellationToken)
  commentId: M:Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.TriggersPaused(System.String,System.Threading.CancellationToken)
  id: TriggersPaused(System.String,System.Threading.CancellationToken)
  parent: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin
  langs:
  - csharp
  - vb
  name: TriggersPaused(String, CancellationToken)
  nameWithType: LiveLogPlugin.TriggersPaused(String, CancellationToken)
  fullName: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.TriggersPaused(System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Hybrid.Quartz/Plugins/LiveLog/LiveLogPlugin.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: TriggersPaused
    path: ../src/Hybrid.Quartz/Plugins/LiveLog/LiveLogPlugin.cs
    startLine: 265
  assemblies:
  - Hybrid.Quartz
  namespace: Hybrid.Quartz.Plugins.LiveLog
  syntax:
    content: public Task TriggersPaused(string triggerGroup, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: triggerGroup
      type: System.String
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Function TriggersPaused(triggerGroup As String, cancellationToken As CancellationToken = Nothing) As Task
  overload: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.TriggersPaused*
  implements:
  - Quartz.ISchedulerListener.TriggersPaused(System.String,System.Threading.CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.TriggersResumed(System.String,System.Threading.CancellationToken)
  commentId: M:Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.TriggersResumed(System.String,System.Threading.CancellationToken)
  id: TriggersResumed(System.String,System.Threading.CancellationToken)
  parent: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin
  langs:
  - csharp
  - vb
  name: TriggersResumed(String, CancellationToken)
  nameWithType: LiveLogPlugin.TriggersResumed(String, CancellationToken)
  fullName: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.TriggersResumed(System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Hybrid.Quartz/Plugins/LiveLog/LiveLogPlugin.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: TriggersResumed
    path: ../src/Hybrid.Quartz/Plugins/LiveLog/LiveLogPlugin.cs
    startLine: 270
  assemblies:
  - Hybrid.Quartz
  namespace: Hybrid.Quartz.Plugins.LiveLog
  syntax:
    content: public Task TriggersResumed(string triggerGroup, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: triggerGroup
      type: System.String
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Function TriggersResumed(triggerGroup As String, cancellationToken As CancellationToken = Nothing) As Task
  overload: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.TriggersResumed*
  implements:
  - Quartz.ISchedulerListener.TriggersResumed(System.String,System.Threading.CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Hybrid.Quartz.Plugins.LiveLog
  commentId: N:Hybrid.Quartz.Plugins.LiveLog
  name: Hybrid.Quartz.Plugins.LiveLog
  nameWithType: Hybrid.Quartz.Plugins.LiveLog
  fullName: Hybrid.Quartz.Plugins.LiveLog
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Quartz.ITriggerListener
  commentId: T:Quartz.ITriggerListener
  parent: Quartz
  isExternal: true
  name: ITriggerListener
  nameWithType: ITriggerListener
  fullName: Quartz.ITriggerListener
- uid: Quartz.IJobListener
  commentId: T:Quartz.IJobListener
  parent: Quartz
  isExternal: true
  name: IJobListener
  nameWithType: IJobListener
  fullName: Quartz.IJobListener
- uid: Quartz.ISchedulerListener
  commentId: T:Quartz.ISchedulerListener
  parent: Quartz
  isExternal: true
  name: ISchedulerListener
  nameWithType: ISchedulerListener
  fullName: Quartz.ISchedulerListener
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Extensions.ObjectExtensions.CastTo(System.Type)
  commentId: M:Hybrid.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
  parent: Hybrid.Extensions.ObjectExtensions
  definition: Hybrid.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
  name: CastTo(Type)
  nameWithType: ObjectExtensions.CastTo(Type)
  fullName: Hybrid.Extensions.ObjectExtensions.CastTo(System.Type)
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo(System.Type)
    name: CastTo
    nameWithType: ObjectExtensions.CastTo
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo(System.Type)
    name: CastTo
    nameWithType: ObjectExtensions.CastTo
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Extensions.ObjectExtensions.CastTo``1
  commentId: M:Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object)
  parent: Hybrid.Extensions.ObjectExtensions
  definition: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object)
  name: CastTo<T>()
  nameWithType: ObjectExtensions.CastTo<T>()
  fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>()
  nameWithType.vb: ObjectExtensions.CastTo(Of T)()
  fullName.vb: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)()
  name.vb: CastTo(Of T)()
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1
    name: CastTo<T>
    nameWithType: ObjectExtensions.CastTo<T>
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1
    name: CastTo(Of T)
    nameWithType: ObjectExtensions.CastTo(Of T)
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Extensions.ObjectExtensions.CastTo``1({T})
  commentId: M:Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
  parent: Hybrid.Extensions.ObjectExtensions
  definition: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
  name: CastTo<T>(T)
  nameWithType: ObjectExtensions.CastTo<T>(T)
  fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>(T)
  nameWithType.vb: ObjectExtensions.CastTo(Of T)(T)
  fullName.vb: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)(T)
  name.vb: CastTo(Of T)(T)
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(``0)
    name: CastTo<T>
    nameWithType: ObjectExtensions.CastTo<T>
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(``0)
    name: CastTo(Of T)
    nameWithType: ObjectExtensions.CastTo(Of T)
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.Hybrid.Extensions.ObjectExtensions.IsIn``1(Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin[])
  commentId: M:Hybrid.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
  parent: Hybrid.Extensions.ObjectExtensions
  definition: Hybrid.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
  name: IsIn<LiveLogPlugin>(LiveLogPlugin[])
  nameWithType: ObjectExtensions.IsIn<LiveLogPlugin>(LiveLogPlugin[])
  fullName: Hybrid.Extensions.ObjectExtensions.IsIn<Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin>(Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin[])
  nameWithType.vb: ObjectExtensions.IsIn(Of LiveLogPlugin)(LiveLogPlugin())
  fullName.vb: Hybrid.Extensions.ObjectExtensions.IsIn(Of Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin)(Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin())
  name.vb: IsIn(Of LiveLogPlugin)(LiveLogPlugin())
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.IsIn``1(``0[])
    name: IsIn<LiveLogPlugin>
    nameWithType: ObjectExtensions.IsIn<LiveLogPlugin>
    fullName: Hybrid.Extensions.ObjectExtensions.IsIn<Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin
    name: LiveLogPlugin
    nameWithType: LiveLogPlugin
    fullName: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.IsIn``1(``0[])
    name: IsIn(Of LiveLogPlugin)
    nameWithType: ObjectExtensions.IsIn(Of LiveLogPlugin)
    fullName: Hybrid.Extensions.ObjectExtensions.IsIn(Of Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin
    name: LiveLogPlugin
    nameWithType: LiveLogPlugin
    fullName: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Extensions.ObjectExtensions.ToDynamic
  commentId: M:Hybrid.Extensions.ObjectExtensions.ToDynamic(System.Object)
  parent: Hybrid.Extensions.ObjectExtensions
  definition: Hybrid.Extensions.ObjectExtensions.ToDynamic(System.Object)
  name: ToDynamic()
  nameWithType: ObjectExtensions.ToDynamic()
  fullName: Hybrid.Extensions.ObjectExtensions.ToDynamic()
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.ToDynamic
    name: ToDynamic
    nameWithType: ObjectExtensions.ToDynamic
    fullName: Hybrid.Extensions.ObjectExtensions.ToDynamic
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.ToDynamic
    name: ToDynamic
    nameWithType: ObjectExtensions.ToDynamic
    fullName: Hybrid.Extensions.ObjectExtensions.ToDynamic
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.Hybrid.Extensions.ObjectExtensions.DeepClone``1
  commentId: M:Hybrid.Extensions.ObjectExtensions.DeepClone``1(``0)
  parent: Hybrid.Extensions.ObjectExtensions
  definition: Hybrid.Extensions.ObjectExtensions.DeepClone``1(``0)
  name: DeepClone<LiveLogPlugin>()
  nameWithType: ObjectExtensions.DeepClone<LiveLogPlugin>()
  fullName: Hybrid.Extensions.ObjectExtensions.DeepClone<Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin>()
  nameWithType.vb: ObjectExtensions.DeepClone(Of LiveLogPlugin)()
  fullName.vb: Hybrid.Extensions.ObjectExtensions.DeepClone(Of Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin)()
  name.vb: DeepClone(Of LiveLogPlugin)()
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.DeepClone``1
    name: DeepClone<LiveLogPlugin>
    nameWithType: ObjectExtensions.DeepClone<LiveLogPlugin>
    fullName: Hybrid.Extensions.ObjectExtensions.DeepClone<Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.DeepClone``1
    name: DeepClone(Of LiveLogPlugin)
    nameWithType: ObjectExtensions.DeepClone(Of LiveLogPlugin)
    fullName: Hybrid.Extensions.ObjectExtensions.DeepClone(Of Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.Hybrid.Extensions.ParameterCheckExtensions.Required``1(System.Func{Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin,System.Boolean},System.String)
  commentId: M:Hybrid.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
  parent: Hybrid.Extensions.ParameterCheckExtensions
  definition: Hybrid.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
  name: Required<LiveLogPlugin>(Func<LiveLogPlugin, Boolean>, String)
  nameWithType: ParameterCheckExtensions.Required<LiveLogPlugin>(Func<LiveLogPlugin, Boolean>, String)
  fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin>(System.Func<Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin, System.Boolean>, System.String)
  nameWithType.vb: ParameterCheckExtensions.Required(Of LiveLogPlugin)(Func(Of LiveLogPlugin, Boolean), String)
  fullName.vb: Hybrid.Extensions.ParameterCheckExtensions.Required(Of Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin)(System.Func(Of Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin, System.Boolean), System.String)
  name.vb: Required(Of LiveLogPlugin)(Func(Of LiveLogPlugin, Boolean), String)
  spec.csharp:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``1(System.Func{``0,System.Boolean},System.String)
    name: Required<LiveLogPlugin>
    nameWithType: ParameterCheckExtensions.Required<LiveLogPlugin>
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin
    name: LiveLogPlugin
    nameWithType: LiveLogPlugin
    fullName: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``1(System.Func{``0,System.Boolean},System.String)
    name: Required(Of LiveLogPlugin)
    nameWithType: ParameterCheckExtensions.Required(Of LiveLogPlugin)
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required(Of Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin
    name: LiveLogPlugin
    nameWithType: LiveLogPlugin
    fullName: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.Hybrid.Extensions.ParameterCheckExtensions.Required``2(System.Func{Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin,System.Boolean},System.String)
  commentId: M:Hybrid.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
  parent: Hybrid.Extensions.ParameterCheckExtensions
  definition: Hybrid.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
  name: Required<LiveLogPlugin, TException>(Func<LiveLogPlugin, Boolean>, String)
  nameWithType: ParameterCheckExtensions.Required<LiveLogPlugin, TException>(Func<LiveLogPlugin, Boolean>, String)
  fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin, TException>(System.Func<Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin, System.Boolean>, System.String)
  nameWithType.vb: ParameterCheckExtensions.Required(Of LiveLogPlugin, TException)(Func(Of LiveLogPlugin, Boolean), String)
  fullName.vb: Hybrid.Extensions.ParameterCheckExtensions.Required(Of Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin, TException)(System.Func(Of Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin, System.Boolean), System.String)
  name.vb: Required(Of LiveLogPlugin, TException)(Func(Of LiveLogPlugin, Boolean), String)
  spec.csharp:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``2(System.Func{``0,System.Boolean},System.String)
    name: Required<LiveLogPlugin, TException>
    nameWithType: ParameterCheckExtensions.Required<LiveLogPlugin, TException>
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin, TException>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin
    name: LiveLogPlugin
    nameWithType: LiveLogPlugin
    fullName: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``2(System.Func{``0,System.Boolean},System.String)
    name: Required(Of LiveLogPlugin, TException)
    nameWithType: ParameterCheckExtensions.Required(Of LiveLogPlugin, TException)
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required(Of Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin, TException)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin
    name: LiveLogPlugin
    nameWithType: LiveLogPlugin
    fullName: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(System.String)
  commentId: M:Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
  parent: Hybrid.Extensions.ParameterCheckExtensions
  definition: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
  name: CheckNotNull<LiveLogPlugin>(String)
  nameWithType: ParameterCheckExtensions.CheckNotNull<LiveLogPlugin>(String)
  fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull<Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin>(System.String)
  nameWithType.vb: ParameterCheckExtensions.CheckNotNull(Of LiveLogPlugin)(String)
  fullName.vb: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull(Of Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin)(System.String)
  name.vb: CheckNotNull(Of LiveLogPlugin)(String)
  spec.csharp:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(System.String)
    name: CheckNotNull<LiveLogPlugin>
    nameWithType: ParameterCheckExtensions.CheckNotNull<LiveLogPlugin>
    fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull<Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(System.String)
    name: CheckNotNull(Of LiveLogPlugin)
    nameWithType: ParameterCheckExtensions.CheckNotNull(Of LiveLogPlugin)
    fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull(Of Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin},System.Action{System.Exception},System.Action{Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
  parent: Hybrid.Extensions.TryCatchExtensions
  definition: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
  name: TryCatch<LiveLogPlugin>(Action<LiveLogPlugin>, Action<Exception>, Action<LiveLogPlugin>)
  nameWithType: TryCatchExtensions.TryCatch<LiveLogPlugin>(Action<LiveLogPlugin>, Action<Exception>, Action<LiveLogPlugin>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin>(System.Action<Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin>, System.Action<System.Exception>, System.Action<Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of LiveLogPlugin)(Action(Of LiveLogPlugin), Action(Of Exception), Action(Of LiveLogPlugin))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin)(System.Action(Of Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin), System.Action(Of System.Exception), System.Action(Of Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin))
  name.vb: TryCatch(Of LiveLogPlugin)(Action(Of LiveLogPlugin), Action(Of Exception), Action(Of LiveLogPlugin))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{``0},System.Action{System.Exception},System.Action{``0})
    name: TryCatch<LiveLogPlugin>
    nameWithType: TryCatchExtensions.TryCatch<LiveLogPlugin>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin
    name: LiveLogPlugin
    nameWithType: LiveLogPlugin
    fullName: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin
    name: LiveLogPlugin
    nameWithType: LiveLogPlugin
    fullName: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{``0},System.Action{System.Exception},System.Action{``0})
    name: TryCatch(Of LiveLogPlugin)
    nameWithType: TryCatchExtensions.TryCatch(Of LiveLogPlugin)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin
    name: LiveLogPlugin
    nameWithType: LiveLogPlugin
    fullName: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin
    name: LiveLogPlugin
    nameWithType: LiveLogPlugin
    fullName: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin},System.Action{System.Exception})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
  parent: Hybrid.Extensions.TryCatchExtensions
  definition: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
  name: TryCatch<LiveLogPlugin>(Action<LiveLogPlugin>, Action<Exception>)
  nameWithType: TryCatchExtensions.TryCatch<LiveLogPlugin>(Action<LiveLogPlugin>, Action<Exception>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin>(System.Action<Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin>, System.Action<System.Exception>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of LiveLogPlugin)(Action(Of LiveLogPlugin), Action(Of Exception))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin)(System.Action(Of Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin), System.Action(Of System.Exception))
  name.vb: TryCatch(Of LiveLogPlugin)(Action(Of LiveLogPlugin), Action(Of Exception))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{``0},System.Action{System.Exception})
    name: TryCatch<LiveLogPlugin>
    nameWithType: TryCatchExtensions.TryCatch<LiveLogPlugin>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin
    name: LiveLogPlugin
    nameWithType: LiveLogPlugin
    fullName: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{``0},System.Action{System.Exception})
    name: TryCatch(Of LiveLogPlugin)
    nameWithType: TryCatchExtensions.TryCatch(Of LiveLogPlugin)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin
    name: LiveLogPlugin
    nameWithType: LiveLogPlugin
    fullName: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin,{TResult}},System.Action{System.Exception},System.Action{Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
  parent: Hybrid.Extensions.TryCatchExtensions
  definition: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
  name: TryCatch<LiveLogPlugin, TResult>(Func<LiveLogPlugin, TResult>, Action<Exception>, Action<LiveLogPlugin>)
  nameWithType: TryCatchExtensions.TryCatch<LiveLogPlugin, TResult>(Func<LiveLogPlugin, TResult>, Action<Exception>, Action<LiveLogPlugin>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin, TResult>(System.Func<Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin, TResult>, System.Action<System.Exception>, System.Action<Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of LiveLogPlugin, TResult)(Func(Of LiveLogPlugin, TResult), Action(Of Exception), Action(Of LiveLogPlugin))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin, TResult)(System.Func(Of Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin, TResult), System.Action(Of System.Exception), System.Action(Of Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin))
  name.vb: TryCatch(Of LiveLogPlugin, TResult)(Func(Of LiveLogPlugin, TResult), Action(Of Exception), Action(Of LiveLogPlugin))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
    name: TryCatch<LiveLogPlugin, TResult>
    nameWithType: TryCatchExtensions.TryCatch<LiveLogPlugin, TResult>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin
    name: LiveLogPlugin
    nameWithType: LiveLogPlugin
    fullName: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin
    name: LiveLogPlugin
    nameWithType: LiveLogPlugin
    fullName: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
    name: TryCatch(Of LiveLogPlugin, TResult)
    nameWithType: TryCatchExtensions.TryCatch(Of LiveLogPlugin, TResult)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin
    name: LiveLogPlugin
    nameWithType: LiveLogPlugin
    fullName: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin
    name: LiveLogPlugin
    nameWithType: LiveLogPlugin
    fullName: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin,{TResult}},System.Action{System.Exception})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
  parent: Hybrid.Extensions.TryCatchExtensions
  definition: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
  name: TryCatch<LiveLogPlugin, TResult>(Func<LiveLogPlugin, TResult>, Action<Exception>)
  nameWithType: TryCatchExtensions.TryCatch<LiveLogPlugin, TResult>(Func<LiveLogPlugin, TResult>, Action<Exception>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin, TResult>(System.Func<Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin, TResult>, System.Action<System.Exception>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of LiveLogPlugin, TResult)(Func(Of LiveLogPlugin, TResult), Action(Of Exception))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin, TResult)(System.Func(Of Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin, TResult), System.Action(Of System.Exception))
  name.vb: TryCatch(Of LiveLogPlugin, TResult)(Func(Of LiveLogPlugin, TResult), Action(Of Exception))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{``0,``1},System.Action{System.Exception})
    name: TryCatch<LiveLogPlugin, TResult>
    nameWithType: TryCatchExtensions.TryCatch<LiveLogPlugin, TResult>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin
    name: LiveLogPlugin
    nameWithType: LiveLogPlugin
    fullName: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{``0,``1},System.Action{System.Exception})
    name: TryCatch(Of LiveLogPlugin, TResult)
    nameWithType: TryCatchExtensions.TryCatch(Of LiveLogPlugin, TResult)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin
    name: LiveLogPlugin
    nameWithType: LiveLogPlugin
    fullName: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.Hybrid.Extensions.TryCatchExtensions.TryFinally``1(System.Action{Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin},System.Action{Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
  parent: Hybrid.Extensions.TryCatchExtensions
  definition: Hybrid.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
  name: TryFinally<LiveLogPlugin>(Action<LiveLogPlugin>, Action<LiveLogPlugin>)
  nameWithType: TryCatchExtensions.TryFinally<LiveLogPlugin>(Action<LiveLogPlugin>, Action<LiveLogPlugin>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryFinally<Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin>(System.Action<Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin>, System.Action<Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin>)
  nameWithType.vb: TryCatchExtensions.TryFinally(Of LiveLogPlugin)(Action(Of LiveLogPlugin), Action(Of LiveLogPlugin))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryFinally(Of Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin)(System.Action(Of Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin), System.Action(Of Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin))
  name.vb: TryFinally(Of LiveLogPlugin)(Action(Of LiveLogPlugin), Action(Of LiveLogPlugin))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryFinally``1(System.Action{``0},System.Action{``0})
    name: TryFinally<LiveLogPlugin>
    nameWithType: TryCatchExtensions.TryFinally<LiveLogPlugin>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryFinally<Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin
    name: LiveLogPlugin
    nameWithType: LiveLogPlugin
    fullName: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin
    name: LiveLogPlugin
    nameWithType: LiveLogPlugin
    fullName: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryFinally``1(System.Action{``0},System.Action{``0})
    name: TryFinally(Of LiveLogPlugin)
    nameWithType: TryCatchExtensions.TryFinally(Of LiveLogPlugin)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryFinally(Of Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin
    name: LiveLogPlugin
    nameWithType: LiveLogPlugin
    fullName: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin
    name: LiveLogPlugin
    nameWithType: LiveLogPlugin
    fullName: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Json.JsonExtensions.ToJsonString(System.Boolean,System.Boolean)
  commentId: M:Hybrid.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
  parent: Hybrid.Json.JsonExtensions
  definition: Hybrid.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
  name: ToJsonString(Boolean, Boolean)
  nameWithType: JsonExtensions.ToJsonString(Boolean, Boolean)
  fullName: Hybrid.Json.JsonExtensions.ToJsonString(System.Boolean, System.Boolean)
  spec.csharp:
  - uid: Hybrid.Json.JsonExtensions.ToJsonString(System.Boolean,System.Boolean)
    name: ToJsonString
    nameWithType: JsonExtensions.ToJsonString
    fullName: Hybrid.Json.JsonExtensions.ToJsonString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Json.JsonExtensions.ToJsonString(System.Boolean,System.Boolean)
    name: ToJsonString
    nameWithType: JsonExtensions.ToJsonString
    fullName: Hybrid.Json.JsonExtensions.ToJsonString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Mapping.MapperExtensions.MapTo``1
  commentId: M:Hybrid.Mapping.MapperExtensions.MapTo``1(System.Object)
  parent: Hybrid.Mapping.MapperExtensions
  definition: Hybrid.Mapping.MapperExtensions.MapTo``1(System.Object)
  name: MapTo<TTarget>()
  nameWithType: MapperExtensions.MapTo<TTarget>()
  fullName: Hybrid.Mapping.MapperExtensions.MapTo<TTarget>()
  nameWithType.vb: MapperExtensions.MapTo(Of TTarget)()
  fullName.vb: Hybrid.Mapping.MapperExtensions.MapTo(Of TTarget)()
  name.vb: MapTo(Of TTarget)()
  spec.csharp:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``1
    name: MapTo<TTarget>
    nameWithType: MapperExtensions.MapTo<TTarget>
    fullName: Hybrid.Mapping.MapperExtensions.MapTo<TTarget>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``1
    name: MapTo(Of TTarget)
    nameWithType: MapperExtensions.MapTo(Of TTarget)
    fullName: Hybrid.Mapping.MapperExtensions.MapTo(Of TTarget)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.Hybrid.Mapping.MapperExtensions.MapTo``2({TTarget})
  commentId: M:Hybrid.Mapping.MapperExtensions.MapTo``2(``0,``1)
  parent: Hybrid.Mapping.MapperExtensions
  definition: Hybrid.Mapping.MapperExtensions.MapTo``2(``0,``1)
  name: MapTo<LiveLogPlugin, TTarget>(TTarget)
  nameWithType: MapperExtensions.MapTo<LiveLogPlugin, TTarget>(TTarget)
  fullName: Hybrid.Mapping.MapperExtensions.MapTo<Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin, TTarget>(TTarget)
  nameWithType.vb: MapperExtensions.MapTo(Of LiveLogPlugin, TTarget)(TTarget)
  fullName.vb: Hybrid.Mapping.MapperExtensions.MapTo(Of Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin, TTarget)(TTarget)
  name.vb: MapTo(Of LiveLogPlugin, TTarget)(TTarget)
  spec.csharp:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``2(``1)
    name: MapTo<LiveLogPlugin, TTarget>
    nameWithType: MapperExtensions.MapTo<LiveLogPlugin, TTarget>
    fullName: Hybrid.Mapping.MapperExtensions.MapTo<Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin, TTarget>
  - name: (
    nameWithType: (
    fullName: (
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``2(``1)
    name: MapTo(Of LiveLogPlugin, TTarget)
    nameWithType: MapperExtensions.MapTo(Of LiveLogPlugin, TTarget)
    fullName: Hybrid.Mapping.MapperExtensions.MapTo(Of Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin, TTarget)
  - name: (
    nameWithType: (
    fullName: (
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Reflection.LockExtensions.Locking(System.Action)
  commentId: M:Hybrid.Reflection.LockExtensions.Locking(System.Object,System.Action)
  parent: Hybrid.Reflection.LockExtensions
  definition: Hybrid.Reflection.LockExtensions.Locking(System.Object,System.Action)
  name: Locking(Action)
  nameWithType: LockExtensions.Locking(Action)
  fullName: Hybrid.Reflection.LockExtensions.Locking(System.Action)
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking(System.Action)
    name: Locking
    nameWithType: LockExtensions.Locking
    fullName: Hybrid.Reflection.LockExtensions.Locking
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking(System.Action)
    name: Locking
    nameWithType: LockExtensions.Locking
    fullName: Hybrid.Reflection.LockExtensions.Locking
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.Hybrid.Reflection.LockExtensions.Locking``1(System.Action{Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin})
  commentId: M:Hybrid.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
  parent: Hybrid.Reflection.LockExtensions
  definition: Hybrid.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
  name: Locking<LiveLogPlugin>(Action<LiveLogPlugin>)
  nameWithType: LockExtensions.Locking<LiveLogPlugin>(Action<LiveLogPlugin>)
  fullName: Hybrid.Reflection.LockExtensions.Locking<Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin>(System.Action<Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin>)
  nameWithType.vb: LockExtensions.Locking(Of LiveLogPlugin)(Action(Of LiveLogPlugin))
  fullName.vb: Hybrid.Reflection.LockExtensions.Locking(Of Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin)(System.Action(Of Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin))
  name.vb: Locking(Of LiveLogPlugin)(Action(Of LiveLogPlugin))
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(System.Action{``0})
    name: Locking<LiveLogPlugin>
    nameWithType: LockExtensions.Locking<LiveLogPlugin>
    fullName: Hybrid.Reflection.LockExtensions.Locking<Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin
    name: LiveLogPlugin
    nameWithType: LiveLogPlugin
    fullName: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(System.Action{``0})
    name: Locking(Of LiveLogPlugin)
    nameWithType: LockExtensions.Locking(Of LiveLogPlugin)
    fullName: Hybrid.Reflection.LockExtensions.Locking(Of Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin
    name: LiveLogPlugin
    nameWithType: LiveLogPlugin
    fullName: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Reflection.LockExtensions.Locking``1(System.Func{{TResult}})
  commentId: M:Hybrid.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
  parent: Hybrid.Reflection.LockExtensions
  definition: Hybrid.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
  name: Locking<TResult>(Func<TResult>)
  nameWithType: LockExtensions.Locking<TResult>(Func<TResult>)
  fullName: Hybrid.Reflection.LockExtensions.Locking<TResult>(System.Func<TResult>)
  nameWithType.vb: LockExtensions.Locking(Of TResult)(Func(Of TResult))
  fullName.vb: Hybrid.Reflection.LockExtensions.Locking(Of TResult)(System.Func(Of TResult))
  name.vb: Locking(Of TResult)(Func(Of TResult))
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(System.Func{``0})
    name: Locking<TResult>
    nameWithType: LockExtensions.Locking<TResult>
    fullName: Hybrid.Reflection.LockExtensions.Locking<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(System.Func{``0})
    name: Locking(Of TResult)
    nameWithType: LockExtensions.Locking(Of TResult)
    fullName: Hybrid.Reflection.LockExtensions.Locking(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.Hybrid.Reflection.LockExtensions.Locking``2(System.Func{Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin,{TResult}})
  commentId: M:Hybrid.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
  parent: Hybrid.Reflection.LockExtensions
  definition: Hybrid.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
  name: Locking<LiveLogPlugin, TResult>(Func<LiveLogPlugin, TResult>)
  nameWithType: LockExtensions.Locking<LiveLogPlugin, TResult>(Func<LiveLogPlugin, TResult>)
  fullName: Hybrid.Reflection.LockExtensions.Locking<Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin, TResult>(System.Func<Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin, TResult>)
  nameWithType.vb: LockExtensions.Locking(Of LiveLogPlugin, TResult)(Func(Of LiveLogPlugin, TResult))
  fullName.vb: Hybrid.Reflection.LockExtensions.Locking(Of Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin, TResult)(System.Func(Of Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin, TResult))
  name.vb: Locking(Of LiveLogPlugin, TResult)(Func(Of LiveLogPlugin, TResult))
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking``2(System.Func{``0,``1})
    name: Locking<LiveLogPlugin, TResult>
    nameWithType: LockExtensions.Locking<LiveLogPlugin, TResult>
    fullName: Hybrid.Reflection.LockExtensions.Locking<Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin
    name: LiveLogPlugin
    nameWithType: LiveLogPlugin
    fullName: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking``2(System.Func{``0,``1})
    name: Locking(Of LiveLogPlugin, TResult)
    nameWithType: LockExtensions.Locking(Of LiveLogPlugin, TResult)
    fullName: Hybrid.Reflection.LockExtensions.Locking(Of Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin
    name: LiveLogPlugin
    nameWithType: LiveLogPlugin
    fullName: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2
  commentId: M:Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2(``0)
  parent: Hybrid.Domain.Entities.EntityExtensions
  definition: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2(``0)
  name: CheckICreatedTime<LiveLogPlugin, TKey>()
  nameWithType: EntityExtensions.CheckICreatedTime<LiveLogPlugin, TKey>()
  fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime<Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin, TKey>()
  nameWithType.vb: EntityExtensions.CheckICreatedTime(Of LiveLogPlugin, TKey)()
  fullName.vb: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime(Of Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin, TKey)()
  name.vb: CheckICreatedTime(Of LiveLogPlugin, TKey)()
  spec.csharp:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2
    name: CheckICreatedTime<LiveLogPlugin, TKey>
    nameWithType: EntityExtensions.CheckICreatedTime<LiveLogPlugin, TKey>
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime<Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2
    name: CheckICreatedTime(Of LiveLogPlugin, TKey)
    nameWithType: EntityExtensions.CheckICreatedTime(Of LiveLogPlugin, TKey)
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime(Of Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(System.Security.Principal.IPrincipal)
  commentId: M:Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
  parent: Hybrid.Domain.Entities.EntityExtensions
  definition: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
  name: CheckICreationAudited<LiveLogPlugin, TKey, TUserKey>(IPrincipal)
  nameWithType: EntityExtensions.CheckICreationAudited<LiveLogPlugin, TKey, TUserKey>(IPrincipal)
  fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited<Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin, TKey, TUserKey>(System.Security.Principal.IPrincipal)
  nameWithType.vb: EntityExtensions.CheckICreationAudited(Of LiveLogPlugin, TKey, TUserKey)(IPrincipal)
  fullName.vb: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited(Of Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin, TKey, TUserKey)(System.Security.Principal.IPrincipal)
  name.vb: CheckICreationAudited(Of LiveLogPlugin, TKey, TUserKey)(IPrincipal)
  spec.csharp:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(System.Security.Principal.IPrincipal)
    name: CheckICreationAudited<LiveLogPlugin, TKey, TUserKey>
    nameWithType: EntityExtensions.CheckICreationAudited<LiveLogPlugin, TKey, TUserKey>
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited<Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin, TKey, TUserKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(System.Security.Principal.IPrincipal)
    name: CheckICreationAudited(Of LiveLogPlugin, TKey, TUserKey)
    nameWithType: EntityExtensions.CheckICreationAudited(Of LiveLogPlugin, TKey, TUserKey)
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited(Of Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin, TKey, TUserKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(System.Security.Principal.IPrincipal)
  commentId: M:Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
  parent: Hybrid.Domain.Entities.EntityExtensions
  definition: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
  name: CheckIUpdateAudited<LiveLogPlugin, TKey, TUserKey>(IPrincipal)
  nameWithType: EntityExtensions.CheckIUpdateAudited<LiveLogPlugin, TKey, TUserKey>(IPrincipal)
  fullName: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited<Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin, TKey, TUserKey>(System.Security.Principal.IPrincipal)
  nameWithType.vb: EntityExtensions.CheckIUpdateAudited(Of LiveLogPlugin, TKey, TUserKey)(IPrincipal)
  fullName.vb: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited(Of Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin, TKey, TUserKey)(System.Security.Principal.IPrincipal)
  name.vb: CheckIUpdateAudited(Of LiveLogPlugin, TKey, TUserKey)(IPrincipal)
  spec.csharp:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(System.Security.Principal.IPrincipal)
    name: CheckIUpdateAudited<LiveLogPlugin, TKey, TUserKey>
    nameWithType: EntityExtensions.CheckIUpdateAudited<LiveLogPlugin, TKey, TUserKey>
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited<Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin, TKey, TUserKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(System.Security.Principal.IPrincipal)
    name: CheckIUpdateAudited(Of LiveLogPlugin, TKey, TUserKey)
    nameWithType: EntityExtensions.CheckIUpdateAudited(Of LiveLogPlugin, TKey, TUserKey)
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited(Of Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin, TKey, TUserKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Quartz
  commentId: N:Quartz
  isExternal: true
  name: Quartz
  nameWithType: Quartz
  fullName: Quartz
- uid: Hybrid.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
  commentId: M:Hybrid.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
  isExternal: true
  name: CastTo(Object, Type)
  nameWithType: ObjectExtensions.CastTo(Object, Type)
  fullName: Hybrid.Extensions.ObjectExtensions.CastTo(System.Object, System.Type)
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
    name: CastTo
    nameWithType: ObjectExtensions.CastTo
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
    name: CastTo
    nameWithType: ObjectExtensions.CastTo
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ObjectExtensions
  commentId: T:Hybrid.Extensions.ObjectExtensions
  parent: Hybrid.Extensions
  name: ObjectExtensions
  nameWithType: ObjectExtensions
  fullName: Hybrid.Extensions.ObjectExtensions
- uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object)
  commentId: M:Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object)
  isExternal: true
  name: CastTo<T>(Object)
  nameWithType: ObjectExtensions.CastTo<T>(Object)
  fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>(System.Object)
  nameWithType.vb: ObjectExtensions.CastTo(Of T)(Object)
  fullName.vb: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)(System.Object)
  name.vb: CastTo(Of T)(Object)
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object)
    name: CastTo<T>
    nameWithType: ObjectExtensions.CastTo<T>
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object)
    name: CastTo(Of T)
    nameWithType: ObjectExtensions.CastTo(Of T)
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
  commentId: M:Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
  isExternal: true
  name: CastTo<T>(Object, T)
  nameWithType: ObjectExtensions.CastTo<T>(Object, T)
  fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>(System.Object, T)
  nameWithType.vb: ObjectExtensions.CastTo(Of T)(Object, T)
  fullName.vb: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)(System.Object, T)
  name.vb: CastTo(Of T)(Object, T)
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
    name: CastTo<T>
    nameWithType: ObjectExtensions.CastTo<T>
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
    name: CastTo(Of T)
    nameWithType: ObjectExtensions.CastTo(Of T)
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
  commentId: M:Hybrid.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
  name: IsIn<T>(T, T[])
  nameWithType: ObjectExtensions.IsIn<T>(T, T[])
  fullName: Hybrid.Extensions.ObjectExtensions.IsIn<T>(T, T[])
  nameWithType.vb: ObjectExtensions.IsIn(Of T)(T, T())
  fullName.vb: Hybrid.Extensions.ObjectExtensions.IsIn(Of T)(T, T())
  name.vb: IsIn(Of T)(T, T())
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
    name: IsIn<T>
    nameWithType: ObjectExtensions.IsIn<T>
    fullName: Hybrid.Extensions.ObjectExtensions.IsIn<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
    name: IsIn(Of T)
    nameWithType: ObjectExtensions.IsIn(Of T)
    fullName: Hybrid.Extensions.ObjectExtensions.IsIn(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ObjectExtensions.ToDynamic(System.Object)
  commentId: M:Hybrid.Extensions.ObjectExtensions.ToDynamic(System.Object)
  isExternal: true
  name: ToDynamic(Object)
  nameWithType: ObjectExtensions.ToDynamic(Object)
  fullName: Hybrid.Extensions.ObjectExtensions.ToDynamic(System.Object)
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.ToDynamic(System.Object)
    name: ToDynamic
    nameWithType: ObjectExtensions.ToDynamic
    fullName: Hybrid.Extensions.ObjectExtensions.ToDynamic
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.ToDynamic(System.Object)
    name: ToDynamic
    nameWithType: ObjectExtensions.ToDynamic
    fullName: Hybrid.Extensions.ObjectExtensions.ToDynamic
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ObjectExtensions.DeepClone``1(``0)
  commentId: M:Hybrid.Extensions.ObjectExtensions.DeepClone``1(``0)
  name: DeepClone<T>(T)
  nameWithType: ObjectExtensions.DeepClone<T>(T)
  fullName: Hybrid.Extensions.ObjectExtensions.DeepClone<T>(T)
  nameWithType.vb: ObjectExtensions.DeepClone(Of T)(T)
  fullName.vb: Hybrid.Extensions.ObjectExtensions.DeepClone(Of T)(T)
  name.vb: DeepClone(Of T)(T)
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.DeepClone``1(``0)
    name: DeepClone<T>
    nameWithType: ObjectExtensions.DeepClone<T>
    fullName: Hybrid.Extensions.ObjectExtensions.DeepClone<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.DeepClone``1(``0)
    name: DeepClone(Of T)
    nameWithType: ObjectExtensions.DeepClone(Of T)
    fullName: Hybrid.Extensions.ObjectExtensions.DeepClone(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
  commentId: M:Hybrid.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
  isExternal: true
  name: Required<T>(T, Func<T, Boolean>, String)
  nameWithType: ParameterCheckExtensions.Required<T>(T, Func<T, Boolean>, String)
  fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<T>(T, System.Func<T, System.Boolean>, System.String)
  nameWithType.vb: ParameterCheckExtensions.Required(Of T)(T, Func(Of T, Boolean), String)
  fullName.vb: Hybrid.Extensions.ParameterCheckExtensions.Required(Of T)(T, System.Func(Of T, System.Boolean), System.String)
  name.vb: Required(Of T)(T, Func(Of T, Boolean), String)
  spec.csharp:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
    name: Required<T>
    nameWithType: ParameterCheckExtensions.Required<T>
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
    name: Required(Of T)
    nameWithType: ParameterCheckExtensions.Required(Of T)
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ParameterCheckExtensions
  commentId: T:Hybrid.Extensions.ParameterCheckExtensions
  parent: Hybrid.Extensions
  name: ParameterCheckExtensions
  nameWithType: ParameterCheckExtensions
  fullName: Hybrid.Extensions.ParameterCheckExtensions
- uid: Hybrid.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
  commentId: M:Hybrid.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
  isExternal: true
  name: Required<T, TException>(T, Func<T, Boolean>, String)
  nameWithType: ParameterCheckExtensions.Required<T, TException>(T, Func<T, Boolean>, String)
  fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<T, TException>(T, System.Func<T, System.Boolean>, System.String)
  nameWithType.vb: ParameterCheckExtensions.Required(Of T, TException)(T, Func(Of T, Boolean), String)
  fullName.vb: Hybrid.Extensions.ParameterCheckExtensions.Required(Of T, TException)(T, System.Func(Of T, System.Boolean), System.String)
  name.vb: Required(Of T, TException)(T, Func(Of T, Boolean), String)
  spec.csharp:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
    name: Required<T, TException>
    nameWithType: ParameterCheckExtensions.Required<T, TException>
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<T, TException>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
    name: Required(Of T, TException)
    nameWithType: ParameterCheckExtensions.Required(Of T, TException)
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required(Of T, TException)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
  commentId: M:Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
  isExternal: true
  name: CheckNotNull<T>(T, String)
  nameWithType: ParameterCheckExtensions.CheckNotNull<T>(T, String)
  fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull<T>(T, System.String)
  nameWithType.vb: ParameterCheckExtensions.CheckNotNull(Of T)(T, String)
  fullName.vb: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull(Of T)(T, System.String)
  name.vb: CheckNotNull(Of T)(T, String)
  spec.csharp:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
    name: CheckNotNull<T>
    nameWithType: ParameterCheckExtensions.CheckNotNull<T>
    fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
    name: CheckNotNull(Of T)
    nameWithType: ParameterCheckExtensions.CheckNotNull(Of T)
    fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
  isExternal: true
  name: TryCatch<T>(T, Action<T>, Action<Exception>, Action<T>)
  nameWithType: TryCatchExtensions.TryCatch<T>(T, Action<T>, Action<Exception>, Action<T>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T>(T, System.Action<T>, System.Action<System.Exception>, System.Action<T>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of T)(T, Action(Of T), Action(Of Exception), Action(Of T))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T)(T, System.Action(Of T), System.Action(Of System.Exception), System.Action(Of T))
  name.vb: TryCatch(Of T)(T, Action(Of T), Action(Of Exception), Action(Of T))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
    name: TryCatch<T>
    nameWithType: TryCatchExtensions.TryCatch<T>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
    name: TryCatch(Of T)
    nameWithType: TryCatchExtensions.TryCatch(Of T)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.TryCatchExtensions
  commentId: T:Hybrid.Extensions.TryCatchExtensions
  parent: Hybrid.Extensions
  name: TryCatchExtensions
  nameWithType: TryCatchExtensions
  fullName: Hybrid.Extensions.TryCatchExtensions
- uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
  isExternal: true
  name: TryCatch<T>(T, Action<T>, Action<Exception>)
  nameWithType: TryCatchExtensions.TryCatch<T>(T, Action<T>, Action<Exception>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T>(T, System.Action<T>, System.Action<System.Exception>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of T)(T, Action(Of T), Action(Of Exception))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T)(T, System.Action(Of T), System.Action(Of System.Exception))
  name.vb: TryCatch(Of T)(T, Action(Of T), Action(Of Exception))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
    name: TryCatch<T>
    nameWithType: TryCatchExtensions.TryCatch<T>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
    name: TryCatch(Of T)
    nameWithType: TryCatchExtensions.TryCatch(Of T)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
  isExternal: true
  name: TryCatch<T, TResult>(T, Func<T, TResult>, Action<Exception>, Action<T>)
  nameWithType: TryCatchExtensions.TryCatch<T, TResult>(T, Func<T, TResult>, Action<Exception>, Action<T>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T, TResult>(T, System.Func<T, TResult>, System.Action<System.Exception>, System.Action<T>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of T, TResult)(T, Func(Of T, TResult), Action(Of Exception), Action(Of T))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T, TResult)(T, System.Func(Of T, TResult), System.Action(Of System.Exception), System.Action(Of T))
  name.vb: TryCatch(Of T, TResult)(T, Func(Of T, TResult), Action(Of Exception), Action(Of T))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
    name: TryCatch<T, TResult>
    nameWithType: TryCatchExtensions.TryCatch<T, TResult>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
    name: TryCatch(Of T, TResult)
    nameWithType: TryCatchExtensions.TryCatch(Of T, TResult)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
  isExternal: true
  name: TryCatch<T, TResult>(T, Func<T, TResult>, Action<Exception>)
  nameWithType: TryCatchExtensions.TryCatch<T, TResult>(T, Func<T, TResult>, Action<Exception>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T, TResult>(T, System.Func<T, TResult>, System.Action<System.Exception>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of T, TResult)(T, Func(Of T, TResult), Action(Of Exception))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T, TResult)(T, System.Func(Of T, TResult), System.Action(Of System.Exception))
  name.vb: TryCatch(Of T, TResult)(T, Func(Of T, TResult), Action(Of Exception))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
    name: TryCatch<T, TResult>
    nameWithType: TryCatchExtensions.TryCatch<T, TResult>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
    name: TryCatch(Of T, TResult)
    nameWithType: TryCatchExtensions.TryCatch(Of T, TResult)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
  isExternal: true
  name: TryFinally<T>(T, Action<T>, Action<T>)
  nameWithType: TryCatchExtensions.TryFinally<T>(T, Action<T>, Action<T>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryFinally<T>(T, System.Action<T>, System.Action<T>)
  nameWithType.vb: TryCatchExtensions.TryFinally(Of T)(T, Action(Of T), Action(Of T))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryFinally(Of T)(T, System.Action(Of T), System.Action(Of T))
  name.vb: TryFinally(Of T)(T, Action(Of T), Action(Of T))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
    name: TryFinally<T>
    nameWithType: TryCatchExtensions.TryFinally<T>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryFinally<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
    name: TryFinally(Of T)
    nameWithType: TryCatchExtensions.TryFinally(Of T)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryFinally(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
  commentId: M:Hybrid.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
  isExternal: true
  name: ToJsonString(Object, Boolean, Boolean)
  nameWithType: JsonExtensions.ToJsonString(Object, Boolean, Boolean)
  fullName: Hybrid.Json.JsonExtensions.ToJsonString(System.Object, System.Boolean, System.Boolean)
  spec.csharp:
  - uid: Hybrid.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
    name: ToJsonString
    nameWithType: JsonExtensions.ToJsonString
    fullName: Hybrid.Json.JsonExtensions.ToJsonString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
    name: ToJsonString
    nameWithType: JsonExtensions.ToJsonString
    fullName: Hybrid.Json.JsonExtensions.ToJsonString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Json.JsonExtensions
  commentId: T:Hybrid.Json.JsonExtensions
  parent: Hybrid.Json
  name: JsonExtensions
  nameWithType: JsonExtensions
  fullName: Hybrid.Json.JsonExtensions
- uid: Hybrid.Mapping.MapperExtensions.MapTo``1(System.Object)
  commentId: M:Hybrid.Mapping.MapperExtensions.MapTo``1(System.Object)
  isExternal: true
  name: MapTo<TTarget>(Object)
  nameWithType: MapperExtensions.MapTo<TTarget>(Object)
  fullName: Hybrid.Mapping.MapperExtensions.MapTo<TTarget>(System.Object)
  nameWithType.vb: MapperExtensions.MapTo(Of TTarget)(Object)
  fullName.vb: Hybrid.Mapping.MapperExtensions.MapTo(Of TTarget)(System.Object)
  name.vb: MapTo(Of TTarget)(Object)
  spec.csharp:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``1(System.Object)
    name: MapTo<TTarget>
    nameWithType: MapperExtensions.MapTo<TTarget>
    fullName: Hybrid.Mapping.MapperExtensions.MapTo<TTarget>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``1(System.Object)
    name: MapTo(Of TTarget)
    nameWithType: MapperExtensions.MapTo(Of TTarget)
    fullName: Hybrid.Mapping.MapperExtensions.MapTo(Of TTarget)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Mapping.MapperExtensions
  commentId: T:Hybrid.Mapping.MapperExtensions
  parent: Hybrid.Mapping
  name: MapperExtensions
  nameWithType: MapperExtensions
  fullName: Hybrid.Mapping.MapperExtensions
- uid: Hybrid.Mapping.MapperExtensions.MapTo``2(``0,``1)
  commentId: M:Hybrid.Mapping.MapperExtensions.MapTo``2(``0,``1)
  name: MapTo<TSource, TTarget>(TSource, TTarget)
  nameWithType: MapperExtensions.MapTo<TSource, TTarget>(TSource, TTarget)
  fullName: Hybrid.Mapping.MapperExtensions.MapTo<TSource, TTarget>(TSource, TTarget)
  nameWithType.vb: MapperExtensions.MapTo(Of TSource, TTarget)(TSource, TTarget)
  fullName.vb: Hybrid.Mapping.MapperExtensions.MapTo(Of TSource, TTarget)(TSource, TTarget)
  name.vb: MapTo(Of TSource, TTarget)(TSource, TTarget)
  spec.csharp:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``2(``0,``1)
    name: MapTo<TSource, TTarget>
    nameWithType: MapperExtensions.MapTo<TSource, TTarget>
    fullName: Hybrid.Mapping.MapperExtensions.MapTo<TSource, TTarget>
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``2(``0,``1)
    name: MapTo(Of TSource, TTarget)
    nameWithType: MapperExtensions.MapTo(Of TSource, TTarget)
    fullName: Hybrid.Mapping.MapperExtensions.MapTo(Of TSource, TTarget)
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Reflection.LockExtensions.Locking(System.Object,System.Action)
  commentId: M:Hybrid.Reflection.LockExtensions.Locking(System.Object,System.Action)
  isExternal: true
  name: Locking(Object, Action)
  nameWithType: LockExtensions.Locking(Object, Action)
  fullName: Hybrid.Reflection.LockExtensions.Locking(System.Object, System.Action)
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking(System.Object,System.Action)
    name: Locking
    nameWithType: LockExtensions.Locking
    fullName: Hybrid.Reflection.LockExtensions.Locking
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking(System.Object,System.Action)
    name: Locking
    nameWithType: LockExtensions.Locking
    fullName: Hybrid.Reflection.LockExtensions.Locking
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Reflection.LockExtensions
  commentId: T:Hybrid.Reflection.LockExtensions
  parent: Hybrid.Reflection
  name: LockExtensions
  nameWithType: LockExtensions
  fullName: Hybrid.Reflection.LockExtensions
- uid: Hybrid.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
  commentId: M:Hybrid.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
  isExternal: true
  name: Locking<T>(T, Action<T>)
  nameWithType: LockExtensions.Locking<T>(T, Action<T>)
  fullName: Hybrid.Reflection.LockExtensions.Locking<T>(T, System.Action<T>)
  nameWithType.vb: LockExtensions.Locking(Of T)(T, Action(Of T))
  fullName.vb: Hybrid.Reflection.LockExtensions.Locking(Of T)(T, System.Action(Of T))
  name.vb: Locking(Of T)(T, Action(Of T))
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
    name: Locking<T>
    nameWithType: LockExtensions.Locking<T>
    fullName: Hybrid.Reflection.LockExtensions.Locking<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
    name: Locking(Of T)
    nameWithType: LockExtensions.Locking(Of T)
    fullName: Hybrid.Reflection.LockExtensions.Locking(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
  commentId: M:Hybrid.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
  isExternal: true
  name: Locking<TResult>(Object, Func<TResult>)
  nameWithType: LockExtensions.Locking<TResult>(Object, Func<TResult>)
  fullName: Hybrid.Reflection.LockExtensions.Locking<TResult>(System.Object, System.Func<TResult>)
  nameWithType.vb: LockExtensions.Locking(Of TResult)(Object, Func(Of TResult))
  fullName.vb: Hybrid.Reflection.LockExtensions.Locking(Of TResult)(System.Object, System.Func(Of TResult))
  name.vb: Locking(Of TResult)(Object, Func(Of TResult))
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
    name: Locking<TResult>
    nameWithType: LockExtensions.Locking<TResult>
    fullName: Hybrid.Reflection.LockExtensions.Locking<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
    name: Locking(Of TResult)
    nameWithType: LockExtensions.Locking(Of TResult)
    fullName: Hybrid.Reflection.LockExtensions.Locking(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
  commentId: M:Hybrid.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
  isExternal: true
  name: Locking<TSource, TResult>(TSource, Func<TSource, TResult>)
  nameWithType: LockExtensions.Locking<TSource, TResult>(TSource, Func<TSource, TResult>)
  fullName: Hybrid.Reflection.LockExtensions.Locking<TSource, TResult>(TSource, System.Func<TSource, TResult>)
  nameWithType.vb: LockExtensions.Locking(Of TSource, TResult)(TSource, Func(Of TSource, TResult))
  fullName.vb: Hybrid.Reflection.LockExtensions.Locking(Of TSource, TResult)(TSource, System.Func(Of TSource, TResult))
  name.vb: Locking(Of TSource, TResult)(TSource, Func(Of TSource, TResult))
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
    name: Locking<TSource, TResult>
    nameWithType: LockExtensions.Locking<TSource, TResult>
    fullName: Hybrid.Reflection.LockExtensions.Locking<TSource, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
    name: Locking(Of TSource, TResult)
    nameWithType: LockExtensions.Locking(Of TSource, TResult)
    fullName: Hybrid.Reflection.LockExtensions.Locking(Of TSource, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2(``0)
  commentId: M:Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2(``0)
  name: CheckICreatedTime<TEntity, TKey>(TEntity)
  nameWithType: EntityExtensions.CheckICreatedTime<TEntity, TKey>(TEntity)
  fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime<TEntity, TKey>(TEntity)
  nameWithType.vb: EntityExtensions.CheckICreatedTime(Of TEntity, TKey)(TEntity)
  fullName.vb: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime(Of TEntity, TKey)(TEntity)
  name.vb: CheckICreatedTime(Of TEntity, TKey)(TEntity)
  spec.csharp:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2(``0)
    name: CheckICreatedTime<TEntity, TKey>
    nameWithType: EntityExtensions.CheckICreatedTime<TEntity, TKey>
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime<TEntity, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2(``0)
    name: CheckICreatedTime(Of TEntity, TKey)
    nameWithType: EntityExtensions.CheckICreatedTime(Of TEntity, TKey)
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime(Of TEntity, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Domain.Entities.EntityExtensions
  commentId: T:Hybrid.Domain.Entities.EntityExtensions
  parent: Hybrid.Domain.Entities
  name: EntityExtensions
  nameWithType: EntityExtensions
  fullName: Hybrid.Domain.Entities.EntityExtensions
- uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
  commentId: M:Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
  isExternal: true
  name: CheckICreationAudited<TEntity, TKey, TUserKey>(TEntity, IPrincipal)
  nameWithType: EntityExtensions.CheckICreationAudited<TEntity, TKey, TUserKey>(TEntity, IPrincipal)
  fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited<TEntity, TKey, TUserKey>(TEntity, System.Security.Principal.IPrincipal)
  nameWithType.vb: EntityExtensions.CheckICreationAudited(Of TEntity, TKey, TUserKey)(TEntity, IPrincipal)
  fullName.vb: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited(Of TEntity, TKey, TUserKey)(TEntity, System.Security.Principal.IPrincipal)
  name.vb: CheckICreationAudited(Of TEntity, TKey, TUserKey)(TEntity, IPrincipal)
  spec.csharp:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
    name: CheckICreationAudited<TEntity, TKey, TUserKey>
    nameWithType: EntityExtensions.CheckICreationAudited<TEntity, TKey, TUserKey>
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited<TEntity, TKey, TUserKey>
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
    name: CheckICreationAudited(Of TEntity, TKey, TUserKey)
    nameWithType: EntityExtensions.CheckICreationAudited(Of TEntity, TKey, TUserKey)
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited(Of TEntity, TKey, TUserKey)
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
  commentId: M:Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
  isExternal: true
  name: CheckIUpdateAudited<TEntity, TKey, TUserKey>(TEntity, IPrincipal)
  nameWithType: EntityExtensions.CheckIUpdateAudited<TEntity, TKey, TUserKey>(TEntity, IPrincipal)
  fullName: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited<TEntity, TKey, TUserKey>(TEntity, System.Security.Principal.IPrincipal)
  nameWithType.vb: EntityExtensions.CheckIUpdateAudited(Of TEntity, TKey, TUserKey)(TEntity, IPrincipal)
  fullName.vb: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited(Of TEntity, TKey, TUserKey)(TEntity, System.Security.Principal.IPrincipal)
  name.vb: CheckIUpdateAudited(Of TEntity, TKey, TUserKey)(TEntity, IPrincipal)
  spec.csharp:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
    name: CheckIUpdateAudited<TEntity, TKey, TUserKey>
    nameWithType: EntityExtensions.CheckIUpdateAudited<TEntity, TKey, TUserKey>
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited<TEntity, TKey, TUserKey>
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
    name: CheckIUpdateAudited(Of TEntity, TKey, TUserKey)
    nameWithType: EntityExtensions.CheckIUpdateAudited(Of TEntity, TKey, TUserKey)
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited(Of TEntity, TKey, TUserKey)
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions
  commentId: N:Hybrid.Extensions
  name: Hybrid.Extensions
  nameWithType: Hybrid.Extensions
  fullName: Hybrid.Extensions
- uid: Hybrid.Json
  commentId: N:Hybrid.Json
  name: Hybrid.Json
  nameWithType: Hybrid.Json
  fullName: Hybrid.Json
- uid: Hybrid.Mapping
  commentId: N:Hybrid.Mapping
  name: Hybrid.Mapping
  nameWithType: Hybrid.Mapping
  fullName: Hybrid.Mapping
- uid: Hybrid.Reflection
  commentId: N:Hybrid.Reflection
  name: Hybrid.Reflection
  nameWithType: Hybrid.Reflection
  fullName: Hybrid.Reflection
- uid: Hybrid.Domain.Entities
  commentId: N:Hybrid.Domain.Entities
  name: Hybrid.Domain.Entities
  nameWithType: Hybrid.Domain.Entities
  fullName: Hybrid.Domain.Entities
- uid: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.#ctor*
  commentId: Overload:Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.#ctor
  name: LiveLogPlugin
  nameWithType: LiveLogPlugin.LiveLogPlugin
  fullName: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.LiveLogPlugin
- uid: System.IServiceProvider
  commentId: T:System.IServiceProvider
  parent: System
  isExternal: true
  name: IServiceProvider
  nameWithType: IServiceProvider
  fullName: System.IServiceProvider
- uid: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.HubContent*
  commentId: Overload:Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.HubContent
  name: HubContent
  nameWithType: LiveLogPlugin.HubContent
  fullName: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.HubContent
- uid: Microsoft.AspNetCore.SignalR.IHubContext{Hybrid.Quartz.Plugins.LiveLog.LiveLogHub}
  commentId: T:Microsoft.AspNetCore.SignalR.IHubContext{Hybrid.Quartz.Plugins.LiveLog.LiveLogHub}
  parent: Microsoft.AspNetCore.SignalR
  definition: Microsoft.AspNetCore.SignalR.IHubContext`1
  name: IHubContext<LiveLogHub>
  nameWithType: IHubContext<LiveLogHub>
  fullName: Microsoft.AspNetCore.SignalR.IHubContext<Hybrid.Quartz.Plugins.LiveLog.LiveLogHub>
  nameWithType.vb: IHubContext(Of LiveLogHub)
  fullName.vb: Microsoft.AspNetCore.SignalR.IHubContext(Of Hybrid.Quartz.Plugins.LiveLog.LiveLogHub)
  name.vb: IHubContext(Of LiveLogHub)
  spec.csharp:
  - uid: Microsoft.AspNetCore.SignalR.IHubContext`1
    name: IHubContext
    nameWithType: IHubContext
    fullName: Microsoft.AspNetCore.SignalR.IHubContext
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Quartz.Plugins.LiveLog.LiveLogHub
    name: LiveLogHub
    nameWithType: LiveLogHub
    fullName: Hybrid.Quartz.Plugins.LiveLog.LiveLogHub
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.SignalR.IHubContext`1
    name: IHubContext
    nameWithType: IHubContext
    fullName: Microsoft.AspNetCore.SignalR.IHubContext
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Quartz.Plugins.LiveLog.LiveLogHub
    name: LiveLogHub
    nameWithType: LiveLogHub
    fullName: Hybrid.Quartz.Plugins.LiveLog.LiveLogHub
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.SignalR.IHubContext`1
  commentId: T:Microsoft.AspNetCore.SignalR.IHubContext`1
  isExternal: true
  name: IHubContext<THub>
  nameWithType: IHubContext<THub>
  fullName: Microsoft.AspNetCore.SignalR.IHubContext<THub>
  nameWithType.vb: IHubContext(Of THub)
  fullName.vb: Microsoft.AspNetCore.SignalR.IHubContext(Of THub)
  name.vb: IHubContext(Of THub)
  spec.csharp:
  - uid: Microsoft.AspNetCore.SignalR.IHubContext`1
    name: IHubContext
    nameWithType: IHubContext
    fullName: Microsoft.AspNetCore.SignalR.IHubContext
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: THub
    nameWithType: THub
    fullName: THub
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.SignalR.IHubContext`1
    name: IHubContext
    nameWithType: IHubContext
    fullName: Microsoft.AspNetCore.SignalR.IHubContext
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: THub
    nameWithType: THub
    fullName: THub
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.SignalR
  commentId: N:Microsoft.AspNetCore.SignalR
  isExternal: true
  name: Microsoft.AspNetCore.SignalR
  nameWithType: Microsoft.AspNetCore.SignalR
  fullName: Microsoft.AspNetCore.SignalR
- uid: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.TriggerComplete*
  commentId: Overload:Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.TriggerComplete
  name: TriggerComplete
  nameWithType: LiveLogPlugin.TriggerComplete
  fullName: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.TriggerComplete
- uid: Quartz.ITriggerListener.TriggerComplete(Quartz.ITrigger,Quartz.IJobExecutionContext,Quartz.SchedulerInstruction,System.Threading.CancellationToken)
  commentId: M:Quartz.ITriggerListener.TriggerComplete(Quartz.ITrigger,Quartz.IJobExecutionContext,Quartz.SchedulerInstruction,System.Threading.CancellationToken)
  parent: Quartz.ITriggerListener
  isExternal: true
  name: TriggerComplete(ITrigger, IJobExecutionContext, SchedulerInstruction, CancellationToken)
  nameWithType: ITriggerListener.TriggerComplete(ITrigger, IJobExecutionContext, SchedulerInstruction, CancellationToken)
  fullName: Quartz.ITriggerListener.TriggerComplete(Quartz.ITrigger, Quartz.IJobExecutionContext, Quartz.SchedulerInstruction, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Quartz.ITriggerListener.TriggerComplete(Quartz.ITrigger,Quartz.IJobExecutionContext,Quartz.SchedulerInstruction,System.Threading.CancellationToken)
    name: TriggerComplete
    nameWithType: ITriggerListener.TriggerComplete
    fullName: Quartz.ITriggerListener.TriggerComplete
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Quartz.ITrigger
    name: ITrigger
    nameWithType: ITrigger
    fullName: Quartz.ITrigger
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Quartz.IJobExecutionContext
    name: IJobExecutionContext
    nameWithType: IJobExecutionContext
    fullName: Quartz.IJobExecutionContext
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Quartz.SchedulerInstruction
    name: SchedulerInstruction
    nameWithType: SchedulerInstruction
    fullName: Quartz.SchedulerInstruction
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Quartz.ITriggerListener.TriggerComplete(Quartz.ITrigger,Quartz.IJobExecutionContext,Quartz.SchedulerInstruction,System.Threading.CancellationToken)
    name: TriggerComplete
    nameWithType: ITriggerListener.TriggerComplete
    fullName: Quartz.ITriggerListener.TriggerComplete
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Quartz.ITrigger
    name: ITrigger
    nameWithType: ITrigger
    fullName: Quartz.ITrigger
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Quartz.IJobExecutionContext
    name: IJobExecutionContext
    nameWithType: IJobExecutionContext
    fullName: Quartz.IJobExecutionContext
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Quartz.SchedulerInstruction
    name: SchedulerInstruction
    nameWithType: SchedulerInstruction
    fullName: Quartz.SchedulerInstruction
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Quartz.ITrigger
  commentId: T:Quartz.ITrigger
  parent: Quartz
  isExternal: true
  name: ITrigger
  nameWithType: ITrigger
  fullName: Quartz.ITrigger
- uid: Quartz.IJobExecutionContext
  commentId: T:Quartz.IJobExecutionContext
  parent: Quartz
  isExternal: true
  name: IJobExecutionContext
  nameWithType: IJobExecutionContext
  fullName: Quartz.IJobExecutionContext
- uid: Quartz.SchedulerInstruction
  commentId: T:Quartz.SchedulerInstruction
  parent: Quartz
  isExternal: true
  name: SchedulerInstruction
  nameWithType: SchedulerInstruction
  fullName: Quartz.SchedulerInstruction
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: true
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.TriggerFired*
  commentId: Overload:Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.TriggerFired
  name: TriggerFired
  nameWithType: LiveLogPlugin.TriggerFired
  fullName: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.TriggerFired
- uid: Quartz.ITriggerListener.TriggerFired(Quartz.ITrigger,Quartz.IJobExecutionContext,System.Threading.CancellationToken)
  commentId: M:Quartz.ITriggerListener.TriggerFired(Quartz.ITrigger,Quartz.IJobExecutionContext,System.Threading.CancellationToken)
  parent: Quartz.ITriggerListener
  isExternal: true
  name: TriggerFired(ITrigger, IJobExecutionContext, CancellationToken)
  nameWithType: ITriggerListener.TriggerFired(ITrigger, IJobExecutionContext, CancellationToken)
  fullName: Quartz.ITriggerListener.TriggerFired(Quartz.ITrigger, Quartz.IJobExecutionContext, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Quartz.ITriggerListener.TriggerFired(Quartz.ITrigger,Quartz.IJobExecutionContext,System.Threading.CancellationToken)
    name: TriggerFired
    nameWithType: ITriggerListener.TriggerFired
    fullName: Quartz.ITriggerListener.TriggerFired
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Quartz.ITrigger
    name: ITrigger
    nameWithType: ITrigger
    fullName: Quartz.ITrigger
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Quartz.IJobExecutionContext
    name: IJobExecutionContext
    nameWithType: IJobExecutionContext
    fullName: Quartz.IJobExecutionContext
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Quartz.ITriggerListener.TriggerFired(Quartz.ITrigger,Quartz.IJobExecutionContext,System.Threading.CancellationToken)
    name: TriggerFired
    nameWithType: ITriggerListener.TriggerFired
    fullName: Quartz.ITriggerListener.TriggerFired
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Quartz.ITrigger
    name: ITrigger
    nameWithType: ITrigger
    fullName: Quartz.ITrigger
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Quartz.IJobExecutionContext
    name: IJobExecutionContext
    nameWithType: IJobExecutionContext
    fullName: Quartz.IJobExecutionContext
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.TriggerMisfired*
  commentId: Overload:Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.TriggerMisfired
  name: TriggerMisfired
  nameWithType: LiveLogPlugin.TriggerMisfired
  fullName: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.TriggerMisfired
- uid: Quartz.ITriggerListener.TriggerMisfired(Quartz.ITrigger,System.Threading.CancellationToken)
  commentId: M:Quartz.ITriggerListener.TriggerMisfired(Quartz.ITrigger,System.Threading.CancellationToken)
  parent: Quartz.ITriggerListener
  isExternal: true
  name: TriggerMisfired(ITrigger, CancellationToken)
  nameWithType: ITriggerListener.TriggerMisfired(ITrigger, CancellationToken)
  fullName: Quartz.ITriggerListener.TriggerMisfired(Quartz.ITrigger, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Quartz.ITriggerListener.TriggerMisfired(Quartz.ITrigger,System.Threading.CancellationToken)
    name: TriggerMisfired
    nameWithType: ITriggerListener.TriggerMisfired
    fullName: Quartz.ITriggerListener.TriggerMisfired
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Quartz.ITrigger
    name: ITrigger
    nameWithType: ITrigger
    fullName: Quartz.ITrigger
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Quartz.ITriggerListener.TriggerMisfired(Quartz.ITrigger,System.Threading.CancellationToken)
    name: TriggerMisfired
    nameWithType: ITriggerListener.TriggerMisfired
    fullName: Quartz.ITriggerListener.TriggerMisfired
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Quartz.ITrigger
    name: ITrigger
    nameWithType: ITrigger
    fullName: Quartz.ITrigger
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.VetoJobExecution*
  commentId: Overload:Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.VetoJobExecution
  name: VetoJobExecution
  nameWithType: LiveLogPlugin.VetoJobExecution
  fullName: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.VetoJobExecution
- uid: Quartz.ITriggerListener.VetoJobExecution(Quartz.ITrigger,Quartz.IJobExecutionContext,System.Threading.CancellationToken)
  commentId: M:Quartz.ITriggerListener.VetoJobExecution(Quartz.ITrigger,Quartz.IJobExecutionContext,System.Threading.CancellationToken)
  parent: Quartz.ITriggerListener
  isExternal: true
  name: VetoJobExecution(ITrigger, IJobExecutionContext, CancellationToken)
  nameWithType: ITriggerListener.VetoJobExecution(ITrigger, IJobExecutionContext, CancellationToken)
  fullName: Quartz.ITriggerListener.VetoJobExecution(Quartz.ITrigger, Quartz.IJobExecutionContext, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Quartz.ITriggerListener.VetoJobExecution(Quartz.ITrigger,Quartz.IJobExecutionContext,System.Threading.CancellationToken)
    name: VetoJobExecution
    nameWithType: ITriggerListener.VetoJobExecution
    fullName: Quartz.ITriggerListener.VetoJobExecution
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Quartz.ITrigger
    name: ITrigger
    nameWithType: ITrigger
    fullName: Quartz.ITrigger
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Quartz.IJobExecutionContext
    name: IJobExecutionContext
    nameWithType: IJobExecutionContext
    fullName: Quartz.IJobExecutionContext
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Quartz.ITriggerListener.VetoJobExecution(Quartz.ITrigger,Quartz.IJobExecutionContext,System.Threading.CancellationToken)
    name: VetoJobExecution
    nameWithType: ITriggerListener.VetoJobExecution
    fullName: Quartz.ITriggerListener.VetoJobExecution
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Quartz.ITrigger
    name: ITrigger
    nameWithType: ITrigger
    fullName: Quartz.ITrigger
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Quartz.IJobExecutionContext
    name: IJobExecutionContext
    nameWithType: IJobExecutionContext
    fullName: Quartz.IJobExecutionContext
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.Boolean}
  commentId: T:System.Threading.Tasks.Task{System.Boolean}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Boolean>
  nameWithType: Task<Boolean>
  fullName: System.Threading.Tasks.Task<System.Boolean>
  nameWithType.vb: Task(Of Boolean)
  fullName.vb: System.Threading.Tasks.Task(Of System.Boolean)
  name.vb: Task(Of Boolean)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.Name*
  commentId: Overload:Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.Name
  name: Name
  nameWithType: LiveLogPlugin.Name
  fullName: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.Name
- uid: Quartz.ITriggerListener.Name
  commentId: P:Quartz.ITriggerListener.Name
  parent: Quartz.ITriggerListener
  isExternal: true
  name: Name
  nameWithType: ITriggerListener.Name
  fullName: Quartz.ITriggerListener.Name
- uid: Quartz.IJobListener.Name
  commentId: P:Quartz.IJobListener.Name
  parent: Quartz.IJobListener
  isExternal: true
  name: Name
  nameWithType: IJobListener.Name
  fullName: Quartz.IJobListener.Name
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.JobExecutionVetoed*
  commentId: Overload:Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.JobExecutionVetoed
  name: JobExecutionVetoed
  nameWithType: LiveLogPlugin.JobExecutionVetoed
  fullName: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.JobExecutionVetoed
- uid: Quartz.IJobListener.JobExecutionVetoed(Quartz.IJobExecutionContext,System.Threading.CancellationToken)
  commentId: M:Quartz.IJobListener.JobExecutionVetoed(Quartz.IJobExecutionContext,System.Threading.CancellationToken)
  parent: Quartz.IJobListener
  isExternal: true
  name: JobExecutionVetoed(IJobExecutionContext, CancellationToken)
  nameWithType: IJobListener.JobExecutionVetoed(IJobExecutionContext, CancellationToken)
  fullName: Quartz.IJobListener.JobExecutionVetoed(Quartz.IJobExecutionContext, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Quartz.IJobListener.JobExecutionVetoed(Quartz.IJobExecutionContext,System.Threading.CancellationToken)
    name: JobExecutionVetoed
    nameWithType: IJobListener.JobExecutionVetoed
    fullName: Quartz.IJobListener.JobExecutionVetoed
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Quartz.IJobExecutionContext
    name: IJobExecutionContext
    nameWithType: IJobExecutionContext
    fullName: Quartz.IJobExecutionContext
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Quartz.IJobListener.JobExecutionVetoed(Quartz.IJobExecutionContext,System.Threading.CancellationToken)
    name: JobExecutionVetoed
    nameWithType: IJobListener.JobExecutionVetoed
    fullName: Quartz.IJobListener.JobExecutionVetoed
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Quartz.IJobExecutionContext
    name: IJobExecutionContext
    nameWithType: IJobExecutionContext
    fullName: Quartz.IJobExecutionContext
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.JobToBeExecuted*
  commentId: Overload:Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.JobToBeExecuted
  name: JobToBeExecuted
  nameWithType: LiveLogPlugin.JobToBeExecuted
  fullName: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.JobToBeExecuted
- uid: Quartz.IJobListener.JobToBeExecuted(Quartz.IJobExecutionContext,System.Threading.CancellationToken)
  commentId: M:Quartz.IJobListener.JobToBeExecuted(Quartz.IJobExecutionContext,System.Threading.CancellationToken)
  parent: Quartz.IJobListener
  isExternal: true
  name: JobToBeExecuted(IJobExecutionContext, CancellationToken)
  nameWithType: IJobListener.JobToBeExecuted(IJobExecutionContext, CancellationToken)
  fullName: Quartz.IJobListener.JobToBeExecuted(Quartz.IJobExecutionContext, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Quartz.IJobListener.JobToBeExecuted(Quartz.IJobExecutionContext,System.Threading.CancellationToken)
    name: JobToBeExecuted
    nameWithType: IJobListener.JobToBeExecuted
    fullName: Quartz.IJobListener.JobToBeExecuted
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Quartz.IJobExecutionContext
    name: IJobExecutionContext
    nameWithType: IJobExecutionContext
    fullName: Quartz.IJobExecutionContext
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Quartz.IJobListener.JobToBeExecuted(Quartz.IJobExecutionContext,System.Threading.CancellationToken)
    name: JobToBeExecuted
    nameWithType: IJobListener.JobToBeExecuted
    fullName: Quartz.IJobListener.JobToBeExecuted
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Quartz.IJobExecutionContext
    name: IJobExecutionContext
    nameWithType: IJobExecutionContext
    fullName: Quartz.IJobExecutionContext
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.JobWasExecuted*
  commentId: Overload:Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.JobWasExecuted
  name: JobWasExecuted
  nameWithType: LiveLogPlugin.JobWasExecuted
  fullName: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.JobWasExecuted
- uid: Quartz.IJobListener.JobWasExecuted(Quartz.IJobExecutionContext,Quartz.JobExecutionException,System.Threading.CancellationToken)
  commentId: M:Quartz.IJobListener.JobWasExecuted(Quartz.IJobExecutionContext,Quartz.JobExecutionException,System.Threading.CancellationToken)
  parent: Quartz.IJobListener
  isExternal: true
  name: JobWasExecuted(IJobExecutionContext, JobExecutionException, CancellationToken)
  nameWithType: IJobListener.JobWasExecuted(IJobExecutionContext, JobExecutionException, CancellationToken)
  fullName: Quartz.IJobListener.JobWasExecuted(Quartz.IJobExecutionContext, Quartz.JobExecutionException, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Quartz.IJobListener.JobWasExecuted(Quartz.IJobExecutionContext,Quartz.JobExecutionException,System.Threading.CancellationToken)
    name: JobWasExecuted
    nameWithType: IJobListener.JobWasExecuted
    fullName: Quartz.IJobListener.JobWasExecuted
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Quartz.IJobExecutionContext
    name: IJobExecutionContext
    nameWithType: IJobExecutionContext
    fullName: Quartz.IJobExecutionContext
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Quartz.JobExecutionException
    name: JobExecutionException
    nameWithType: JobExecutionException
    fullName: Quartz.JobExecutionException
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Quartz.IJobListener.JobWasExecuted(Quartz.IJobExecutionContext,Quartz.JobExecutionException,System.Threading.CancellationToken)
    name: JobWasExecuted
    nameWithType: IJobListener.JobWasExecuted
    fullName: Quartz.IJobListener.JobWasExecuted
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Quartz.IJobExecutionContext
    name: IJobExecutionContext
    nameWithType: IJobExecutionContext
    fullName: Quartz.IJobExecutionContext
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Quartz.JobExecutionException
    name: JobExecutionException
    nameWithType: JobExecutionException
    fullName: Quartz.JobExecutionException
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Quartz.JobExecutionException
  commentId: T:Quartz.JobExecutionException
  parent: Quartz
  isExternal: true
  name: JobExecutionException
  nameWithType: JobExecutionException
  fullName: Quartz.JobExecutionException
- uid: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.JobAdded*
  commentId: Overload:Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.JobAdded
  name: JobAdded
  nameWithType: LiveLogPlugin.JobAdded
  fullName: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.JobAdded
- uid: Quartz.ISchedulerListener.JobAdded(Quartz.IJobDetail,System.Threading.CancellationToken)
  commentId: M:Quartz.ISchedulerListener.JobAdded(Quartz.IJobDetail,System.Threading.CancellationToken)
  parent: Quartz.ISchedulerListener
  isExternal: true
  name: JobAdded(IJobDetail, CancellationToken)
  nameWithType: ISchedulerListener.JobAdded(IJobDetail, CancellationToken)
  fullName: Quartz.ISchedulerListener.JobAdded(Quartz.IJobDetail, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Quartz.ISchedulerListener.JobAdded(Quartz.IJobDetail,System.Threading.CancellationToken)
    name: JobAdded
    nameWithType: ISchedulerListener.JobAdded
    fullName: Quartz.ISchedulerListener.JobAdded
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Quartz.IJobDetail
    name: IJobDetail
    nameWithType: IJobDetail
    fullName: Quartz.IJobDetail
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Quartz.ISchedulerListener.JobAdded(Quartz.IJobDetail,System.Threading.CancellationToken)
    name: JobAdded
    nameWithType: ISchedulerListener.JobAdded
    fullName: Quartz.ISchedulerListener.JobAdded
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Quartz.IJobDetail
    name: IJobDetail
    nameWithType: IJobDetail
    fullName: Quartz.IJobDetail
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Quartz.IJobDetail
  commentId: T:Quartz.IJobDetail
  parent: Quartz
  isExternal: true
  name: IJobDetail
  nameWithType: IJobDetail
  fullName: Quartz.IJobDetail
- uid: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.JobDeleted*
  commentId: Overload:Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.JobDeleted
  name: JobDeleted
  nameWithType: LiveLogPlugin.JobDeleted
  fullName: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.JobDeleted
- uid: Quartz.ISchedulerListener.JobDeleted(Quartz.JobKey,System.Threading.CancellationToken)
  commentId: M:Quartz.ISchedulerListener.JobDeleted(Quartz.JobKey,System.Threading.CancellationToken)
  parent: Quartz.ISchedulerListener
  isExternal: true
  name: JobDeleted(JobKey, CancellationToken)
  nameWithType: ISchedulerListener.JobDeleted(JobKey, CancellationToken)
  fullName: Quartz.ISchedulerListener.JobDeleted(Quartz.JobKey, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Quartz.ISchedulerListener.JobDeleted(Quartz.JobKey,System.Threading.CancellationToken)
    name: JobDeleted
    nameWithType: ISchedulerListener.JobDeleted
    fullName: Quartz.ISchedulerListener.JobDeleted
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Quartz.JobKey
    name: JobKey
    nameWithType: JobKey
    fullName: Quartz.JobKey
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Quartz.ISchedulerListener.JobDeleted(Quartz.JobKey,System.Threading.CancellationToken)
    name: JobDeleted
    nameWithType: ISchedulerListener.JobDeleted
    fullName: Quartz.ISchedulerListener.JobDeleted
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Quartz.JobKey
    name: JobKey
    nameWithType: JobKey
    fullName: Quartz.JobKey
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Quartz.JobKey
  commentId: T:Quartz.JobKey
  parent: Quartz
  isExternal: true
  name: JobKey
  nameWithType: JobKey
  fullName: Quartz.JobKey
- uid: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.JobInterrupted*
  commentId: Overload:Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.JobInterrupted
  name: JobInterrupted
  nameWithType: LiveLogPlugin.JobInterrupted
  fullName: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.JobInterrupted
- uid: Quartz.ISchedulerListener.JobInterrupted(Quartz.JobKey,System.Threading.CancellationToken)
  commentId: M:Quartz.ISchedulerListener.JobInterrupted(Quartz.JobKey,System.Threading.CancellationToken)
  parent: Quartz.ISchedulerListener
  isExternal: true
  name: JobInterrupted(JobKey, CancellationToken)
  nameWithType: ISchedulerListener.JobInterrupted(JobKey, CancellationToken)
  fullName: Quartz.ISchedulerListener.JobInterrupted(Quartz.JobKey, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Quartz.ISchedulerListener.JobInterrupted(Quartz.JobKey,System.Threading.CancellationToken)
    name: JobInterrupted
    nameWithType: ISchedulerListener.JobInterrupted
    fullName: Quartz.ISchedulerListener.JobInterrupted
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Quartz.JobKey
    name: JobKey
    nameWithType: JobKey
    fullName: Quartz.JobKey
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Quartz.ISchedulerListener.JobInterrupted(Quartz.JobKey,System.Threading.CancellationToken)
    name: JobInterrupted
    nameWithType: ISchedulerListener.JobInterrupted
    fullName: Quartz.ISchedulerListener.JobInterrupted
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Quartz.JobKey
    name: JobKey
    nameWithType: JobKey
    fullName: Quartz.JobKey
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.JobPaused*
  commentId: Overload:Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.JobPaused
  name: JobPaused
  nameWithType: LiveLogPlugin.JobPaused
  fullName: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.JobPaused
- uid: Quartz.ISchedulerListener.JobPaused(Quartz.JobKey,System.Threading.CancellationToken)
  commentId: M:Quartz.ISchedulerListener.JobPaused(Quartz.JobKey,System.Threading.CancellationToken)
  parent: Quartz.ISchedulerListener
  isExternal: true
  name: JobPaused(JobKey, CancellationToken)
  nameWithType: ISchedulerListener.JobPaused(JobKey, CancellationToken)
  fullName: Quartz.ISchedulerListener.JobPaused(Quartz.JobKey, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Quartz.ISchedulerListener.JobPaused(Quartz.JobKey,System.Threading.CancellationToken)
    name: JobPaused
    nameWithType: ISchedulerListener.JobPaused
    fullName: Quartz.ISchedulerListener.JobPaused
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Quartz.JobKey
    name: JobKey
    nameWithType: JobKey
    fullName: Quartz.JobKey
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Quartz.ISchedulerListener.JobPaused(Quartz.JobKey,System.Threading.CancellationToken)
    name: JobPaused
    nameWithType: ISchedulerListener.JobPaused
    fullName: Quartz.ISchedulerListener.JobPaused
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Quartz.JobKey
    name: JobKey
    nameWithType: JobKey
    fullName: Quartz.JobKey
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.JobResumed*
  commentId: Overload:Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.JobResumed
  name: JobResumed
  nameWithType: LiveLogPlugin.JobResumed
  fullName: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.JobResumed
- uid: Quartz.ISchedulerListener.JobResumed(Quartz.JobKey,System.Threading.CancellationToken)
  commentId: M:Quartz.ISchedulerListener.JobResumed(Quartz.JobKey,System.Threading.CancellationToken)
  parent: Quartz.ISchedulerListener
  isExternal: true
  name: JobResumed(JobKey, CancellationToken)
  nameWithType: ISchedulerListener.JobResumed(JobKey, CancellationToken)
  fullName: Quartz.ISchedulerListener.JobResumed(Quartz.JobKey, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Quartz.ISchedulerListener.JobResumed(Quartz.JobKey,System.Threading.CancellationToken)
    name: JobResumed
    nameWithType: ISchedulerListener.JobResumed
    fullName: Quartz.ISchedulerListener.JobResumed
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Quartz.JobKey
    name: JobKey
    nameWithType: JobKey
    fullName: Quartz.JobKey
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Quartz.ISchedulerListener.JobResumed(Quartz.JobKey,System.Threading.CancellationToken)
    name: JobResumed
    nameWithType: ISchedulerListener.JobResumed
    fullName: Quartz.ISchedulerListener.JobResumed
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Quartz.JobKey
    name: JobKey
    nameWithType: JobKey
    fullName: Quartz.JobKey
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.JobScheduled*
  commentId: Overload:Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.JobScheduled
  name: JobScheduled
  nameWithType: LiveLogPlugin.JobScheduled
  fullName: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.JobScheduled
- uid: Quartz.ISchedulerListener.JobScheduled(Quartz.ITrigger,System.Threading.CancellationToken)
  commentId: M:Quartz.ISchedulerListener.JobScheduled(Quartz.ITrigger,System.Threading.CancellationToken)
  parent: Quartz.ISchedulerListener
  isExternal: true
  name: JobScheduled(ITrigger, CancellationToken)
  nameWithType: ISchedulerListener.JobScheduled(ITrigger, CancellationToken)
  fullName: Quartz.ISchedulerListener.JobScheduled(Quartz.ITrigger, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Quartz.ISchedulerListener.JobScheduled(Quartz.ITrigger,System.Threading.CancellationToken)
    name: JobScheduled
    nameWithType: ISchedulerListener.JobScheduled
    fullName: Quartz.ISchedulerListener.JobScheduled
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Quartz.ITrigger
    name: ITrigger
    nameWithType: ITrigger
    fullName: Quartz.ITrigger
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Quartz.ISchedulerListener.JobScheduled(Quartz.ITrigger,System.Threading.CancellationToken)
    name: JobScheduled
    nameWithType: ISchedulerListener.JobScheduled
    fullName: Quartz.ISchedulerListener.JobScheduled
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Quartz.ITrigger
    name: ITrigger
    nameWithType: ITrigger
    fullName: Quartz.ITrigger
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.JobsPaused*
  commentId: Overload:Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.JobsPaused
  name: JobsPaused
  nameWithType: LiveLogPlugin.JobsPaused
  fullName: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.JobsPaused
- uid: Quartz.ISchedulerListener.JobsPaused(System.String,System.Threading.CancellationToken)
  commentId: M:Quartz.ISchedulerListener.JobsPaused(System.String,System.Threading.CancellationToken)
  parent: Quartz.ISchedulerListener
  isExternal: true
  name: JobsPaused(String, CancellationToken)
  nameWithType: ISchedulerListener.JobsPaused(String, CancellationToken)
  fullName: Quartz.ISchedulerListener.JobsPaused(System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Quartz.ISchedulerListener.JobsPaused(System.String,System.Threading.CancellationToken)
    name: JobsPaused
    nameWithType: ISchedulerListener.JobsPaused
    fullName: Quartz.ISchedulerListener.JobsPaused
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Quartz.ISchedulerListener.JobsPaused(System.String,System.Threading.CancellationToken)
    name: JobsPaused
    nameWithType: ISchedulerListener.JobsPaused
    fullName: Quartz.ISchedulerListener.JobsPaused
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.JobsResumed*
  commentId: Overload:Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.JobsResumed
  name: JobsResumed
  nameWithType: LiveLogPlugin.JobsResumed
  fullName: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.JobsResumed
- uid: Quartz.ISchedulerListener.JobsResumed(System.String,System.Threading.CancellationToken)
  commentId: M:Quartz.ISchedulerListener.JobsResumed(System.String,System.Threading.CancellationToken)
  parent: Quartz.ISchedulerListener
  isExternal: true
  name: JobsResumed(String, CancellationToken)
  nameWithType: ISchedulerListener.JobsResumed(String, CancellationToken)
  fullName: Quartz.ISchedulerListener.JobsResumed(System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Quartz.ISchedulerListener.JobsResumed(System.String,System.Threading.CancellationToken)
    name: JobsResumed
    nameWithType: ISchedulerListener.JobsResumed
    fullName: Quartz.ISchedulerListener.JobsResumed
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Quartz.ISchedulerListener.JobsResumed(System.String,System.Threading.CancellationToken)
    name: JobsResumed
    nameWithType: ISchedulerListener.JobsResumed
    fullName: Quartz.ISchedulerListener.JobsResumed
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.JobUnscheduled*
  commentId: Overload:Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.JobUnscheduled
  name: JobUnscheduled
  nameWithType: LiveLogPlugin.JobUnscheduled
  fullName: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.JobUnscheduled
- uid: Quartz.ISchedulerListener.JobUnscheduled(Quartz.TriggerKey,System.Threading.CancellationToken)
  commentId: M:Quartz.ISchedulerListener.JobUnscheduled(Quartz.TriggerKey,System.Threading.CancellationToken)
  parent: Quartz.ISchedulerListener
  isExternal: true
  name: JobUnscheduled(TriggerKey, CancellationToken)
  nameWithType: ISchedulerListener.JobUnscheduled(TriggerKey, CancellationToken)
  fullName: Quartz.ISchedulerListener.JobUnscheduled(Quartz.TriggerKey, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Quartz.ISchedulerListener.JobUnscheduled(Quartz.TriggerKey,System.Threading.CancellationToken)
    name: JobUnscheduled
    nameWithType: ISchedulerListener.JobUnscheduled
    fullName: Quartz.ISchedulerListener.JobUnscheduled
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Quartz.TriggerKey
    name: TriggerKey
    nameWithType: TriggerKey
    fullName: Quartz.TriggerKey
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Quartz.ISchedulerListener.JobUnscheduled(Quartz.TriggerKey,System.Threading.CancellationToken)
    name: JobUnscheduled
    nameWithType: ISchedulerListener.JobUnscheduled
    fullName: Quartz.ISchedulerListener.JobUnscheduled
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Quartz.TriggerKey
    name: TriggerKey
    nameWithType: TriggerKey
    fullName: Quartz.TriggerKey
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Quartz.TriggerKey
  commentId: T:Quartz.TriggerKey
  parent: Quartz
  isExternal: true
  name: TriggerKey
  nameWithType: TriggerKey
  fullName: Quartz.TriggerKey
- uid: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.SchedulerError*
  commentId: Overload:Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.SchedulerError
  name: SchedulerError
  nameWithType: LiveLogPlugin.SchedulerError
  fullName: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.SchedulerError
- uid: Quartz.ISchedulerListener.SchedulerError(System.String,Quartz.SchedulerException,System.Threading.CancellationToken)
  commentId: M:Quartz.ISchedulerListener.SchedulerError(System.String,Quartz.SchedulerException,System.Threading.CancellationToken)
  parent: Quartz.ISchedulerListener
  isExternal: true
  name: SchedulerError(String, SchedulerException, CancellationToken)
  nameWithType: ISchedulerListener.SchedulerError(String, SchedulerException, CancellationToken)
  fullName: Quartz.ISchedulerListener.SchedulerError(System.String, Quartz.SchedulerException, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Quartz.ISchedulerListener.SchedulerError(System.String,Quartz.SchedulerException,System.Threading.CancellationToken)
    name: SchedulerError
    nameWithType: ISchedulerListener.SchedulerError
    fullName: Quartz.ISchedulerListener.SchedulerError
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Quartz.SchedulerException
    name: SchedulerException
    nameWithType: SchedulerException
    fullName: Quartz.SchedulerException
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Quartz.ISchedulerListener.SchedulerError(System.String,Quartz.SchedulerException,System.Threading.CancellationToken)
    name: SchedulerError
    nameWithType: ISchedulerListener.SchedulerError
    fullName: Quartz.ISchedulerListener.SchedulerError
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Quartz.SchedulerException
    name: SchedulerException
    nameWithType: SchedulerException
    fullName: Quartz.SchedulerException
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Quartz.SchedulerException
  commentId: T:Quartz.SchedulerException
  parent: Quartz
  isExternal: true
  name: SchedulerException
  nameWithType: SchedulerException
  fullName: Quartz.SchedulerException
- uid: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.SchedulerInStandbyMode*
  commentId: Overload:Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.SchedulerInStandbyMode
  name: SchedulerInStandbyMode
  nameWithType: LiveLogPlugin.SchedulerInStandbyMode
  fullName: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.SchedulerInStandbyMode
- uid: Quartz.ISchedulerListener.SchedulerInStandbyMode(System.Threading.CancellationToken)
  commentId: M:Quartz.ISchedulerListener.SchedulerInStandbyMode(System.Threading.CancellationToken)
  parent: Quartz.ISchedulerListener
  isExternal: true
  name: SchedulerInStandbyMode(CancellationToken)
  nameWithType: ISchedulerListener.SchedulerInStandbyMode(CancellationToken)
  fullName: Quartz.ISchedulerListener.SchedulerInStandbyMode(System.Threading.CancellationToken)
  spec.csharp:
  - uid: Quartz.ISchedulerListener.SchedulerInStandbyMode(System.Threading.CancellationToken)
    name: SchedulerInStandbyMode
    nameWithType: ISchedulerListener.SchedulerInStandbyMode
    fullName: Quartz.ISchedulerListener.SchedulerInStandbyMode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Quartz.ISchedulerListener.SchedulerInStandbyMode(System.Threading.CancellationToken)
    name: SchedulerInStandbyMode
    nameWithType: ISchedulerListener.SchedulerInStandbyMode
    fullName: Quartz.ISchedulerListener.SchedulerInStandbyMode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.SchedulerShutdown*
  commentId: Overload:Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.SchedulerShutdown
  name: SchedulerShutdown
  nameWithType: LiveLogPlugin.SchedulerShutdown
  fullName: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.SchedulerShutdown
- uid: Quartz.ISchedulerListener.SchedulerShutdown(System.Threading.CancellationToken)
  commentId: M:Quartz.ISchedulerListener.SchedulerShutdown(System.Threading.CancellationToken)
  parent: Quartz.ISchedulerListener
  isExternal: true
  name: SchedulerShutdown(CancellationToken)
  nameWithType: ISchedulerListener.SchedulerShutdown(CancellationToken)
  fullName: Quartz.ISchedulerListener.SchedulerShutdown(System.Threading.CancellationToken)
  spec.csharp:
  - uid: Quartz.ISchedulerListener.SchedulerShutdown(System.Threading.CancellationToken)
    name: SchedulerShutdown
    nameWithType: ISchedulerListener.SchedulerShutdown
    fullName: Quartz.ISchedulerListener.SchedulerShutdown
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Quartz.ISchedulerListener.SchedulerShutdown(System.Threading.CancellationToken)
    name: SchedulerShutdown
    nameWithType: ISchedulerListener.SchedulerShutdown
    fullName: Quartz.ISchedulerListener.SchedulerShutdown
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.SchedulerShuttingdown*
  commentId: Overload:Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.SchedulerShuttingdown
  name: SchedulerShuttingdown
  nameWithType: LiveLogPlugin.SchedulerShuttingdown
  fullName: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.SchedulerShuttingdown
- uid: Quartz.ISchedulerListener.SchedulerShuttingdown(System.Threading.CancellationToken)
  commentId: M:Quartz.ISchedulerListener.SchedulerShuttingdown(System.Threading.CancellationToken)
  parent: Quartz.ISchedulerListener
  isExternal: true
  name: SchedulerShuttingdown(CancellationToken)
  nameWithType: ISchedulerListener.SchedulerShuttingdown(CancellationToken)
  fullName: Quartz.ISchedulerListener.SchedulerShuttingdown(System.Threading.CancellationToken)
  spec.csharp:
  - uid: Quartz.ISchedulerListener.SchedulerShuttingdown(System.Threading.CancellationToken)
    name: SchedulerShuttingdown
    nameWithType: ISchedulerListener.SchedulerShuttingdown
    fullName: Quartz.ISchedulerListener.SchedulerShuttingdown
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Quartz.ISchedulerListener.SchedulerShuttingdown(System.Threading.CancellationToken)
    name: SchedulerShuttingdown
    nameWithType: ISchedulerListener.SchedulerShuttingdown
    fullName: Quartz.ISchedulerListener.SchedulerShuttingdown
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.SchedulerStarted*
  commentId: Overload:Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.SchedulerStarted
  name: SchedulerStarted
  nameWithType: LiveLogPlugin.SchedulerStarted
  fullName: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.SchedulerStarted
- uid: Quartz.ISchedulerListener.SchedulerStarted(System.Threading.CancellationToken)
  commentId: M:Quartz.ISchedulerListener.SchedulerStarted(System.Threading.CancellationToken)
  parent: Quartz.ISchedulerListener
  isExternal: true
  name: SchedulerStarted(CancellationToken)
  nameWithType: ISchedulerListener.SchedulerStarted(CancellationToken)
  fullName: Quartz.ISchedulerListener.SchedulerStarted(System.Threading.CancellationToken)
  spec.csharp:
  - uid: Quartz.ISchedulerListener.SchedulerStarted(System.Threading.CancellationToken)
    name: SchedulerStarted
    nameWithType: ISchedulerListener.SchedulerStarted
    fullName: Quartz.ISchedulerListener.SchedulerStarted
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Quartz.ISchedulerListener.SchedulerStarted(System.Threading.CancellationToken)
    name: SchedulerStarted
    nameWithType: ISchedulerListener.SchedulerStarted
    fullName: Quartz.ISchedulerListener.SchedulerStarted
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.SchedulerStarting*
  commentId: Overload:Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.SchedulerStarting
  name: SchedulerStarting
  nameWithType: LiveLogPlugin.SchedulerStarting
  fullName: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.SchedulerStarting
- uid: Quartz.ISchedulerListener.SchedulerStarting(System.Threading.CancellationToken)
  commentId: M:Quartz.ISchedulerListener.SchedulerStarting(System.Threading.CancellationToken)
  parent: Quartz.ISchedulerListener
  isExternal: true
  name: SchedulerStarting(CancellationToken)
  nameWithType: ISchedulerListener.SchedulerStarting(CancellationToken)
  fullName: Quartz.ISchedulerListener.SchedulerStarting(System.Threading.CancellationToken)
  spec.csharp:
  - uid: Quartz.ISchedulerListener.SchedulerStarting(System.Threading.CancellationToken)
    name: SchedulerStarting
    nameWithType: ISchedulerListener.SchedulerStarting
    fullName: Quartz.ISchedulerListener.SchedulerStarting
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Quartz.ISchedulerListener.SchedulerStarting(System.Threading.CancellationToken)
    name: SchedulerStarting
    nameWithType: ISchedulerListener.SchedulerStarting
    fullName: Quartz.ISchedulerListener.SchedulerStarting
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.SchedulingDataCleared*
  commentId: Overload:Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.SchedulingDataCleared
  name: SchedulingDataCleared
  nameWithType: LiveLogPlugin.SchedulingDataCleared
  fullName: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.SchedulingDataCleared
- uid: Quartz.ISchedulerListener.SchedulingDataCleared(System.Threading.CancellationToken)
  commentId: M:Quartz.ISchedulerListener.SchedulingDataCleared(System.Threading.CancellationToken)
  parent: Quartz.ISchedulerListener
  isExternal: true
  name: SchedulingDataCleared(CancellationToken)
  nameWithType: ISchedulerListener.SchedulingDataCleared(CancellationToken)
  fullName: Quartz.ISchedulerListener.SchedulingDataCleared(System.Threading.CancellationToken)
  spec.csharp:
  - uid: Quartz.ISchedulerListener.SchedulingDataCleared(System.Threading.CancellationToken)
    name: SchedulingDataCleared
    nameWithType: ISchedulerListener.SchedulingDataCleared
    fullName: Quartz.ISchedulerListener.SchedulingDataCleared
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Quartz.ISchedulerListener.SchedulingDataCleared(System.Threading.CancellationToken)
    name: SchedulingDataCleared
    nameWithType: ISchedulerListener.SchedulingDataCleared
    fullName: Quartz.ISchedulerListener.SchedulingDataCleared
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.TriggerFinalized*
  commentId: Overload:Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.TriggerFinalized
  name: TriggerFinalized
  nameWithType: LiveLogPlugin.TriggerFinalized
  fullName: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.TriggerFinalized
- uid: Quartz.ISchedulerListener.TriggerFinalized(Quartz.ITrigger,System.Threading.CancellationToken)
  commentId: M:Quartz.ISchedulerListener.TriggerFinalized(Quartz.ITrigger,System.Threading.CancellationToken)
  parent: Quartz.ISchedulerListener
  isExternal: true
  name: TriggerFinalized(ITrigger, CancellationToken)
  nameWithType: ISchedulerListener.TriggerFinalized(ITrigger, CancellationToken)
  fullName: Quartz.ISchedulerListener.TriggerFinalized(Quartz.ITrigger, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Quartz.ISchedulerListener.TriggerFinalized(Quartz.ITrigger,System.Threading.CancellationToken)
    name: TriggerFinalized
    nameWithType: ISchedulerListener.TriggerFinalized
    fullName: Quartz.ISchedulerListener.TriggerFinalized
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Quartz.ITrigger
    name: ITrigger
    nameWithType: ITrigger
    fullName: Quartz.ITrigger
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Quartz.ISchedulerListener.TriggerFinalized(Quartz.ITrigger,System.Threading.CancellationToken)
    name: TriggerFinalized
    nameWithType: ISchedulerListener.TriggerFinalized
    fullName: Quartz.ISchedulerListener.TriggerFinalized
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Quartz.ITrigger
    name: ITrigger
    nameWithType: ITrigger
    fullName: Quartz.ITrigger
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.TriggerPaused*
  commentId: Overload:Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.TriggerPaused
  name: TriggerPaused
  nameWithType: LiveLogPlugin.TriggerPaused
  fullName: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.TriggerPaused
- uid: Quartz.ISchedulerListener.TriggerPaused(Quartz.TriggerKey,System.Threading.CancellationToken)
  commentId: M:Quartz.ISchedulerListener.TriggerPaused(Quartz.TriggerKey,System.Threading.CancellationToken)
  parent: Quartz.ISchedulerListener
  isExternal: true
  name: TriggerPaused(TriggerKey, CancellationToken)
  nameWithType: ISchedulerListener.TriggerPaused(TriggerKey, CancellationToken)
  fullName: Quartz.ISchedulerListener.TriggerPaused(Quartz.TriggerKey, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Quartz.ISchedulerListener.TriggerPaused(Quartz.TriggerKey,System.Threading.CancellationToken)
    name: TriggerPaused
    nameWithType: ISchedulerListener.TriggerPaused
    fullName: Quartz.ISchedulerListener.TriggerPaused
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Quartz.TriggerKey
    name: TriggerKey
    nameWithType: TriggerKey
    fullName: Quartz.TriggerKey
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Quartz.ISchedulerListener.TriggerPaused(Quartz.TriggerKey,System.Threading.CancellationToken)
    name: TriggerPaused
    nameWithType: ISchedulerListener.TriggerPaused
    fullName: Quartz.ISchedulerListener.TriggerPaused
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Quartz.TriggerKey
    name: TriggerKey
    nameWithType: TriggerKey
    fullName: Quartz.TriggerKey
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.TriggerResumed*
  commentId: Overload:Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.TriggerResumed
  name: TriggerResumed
  nameWithType: LiveLogPlugin.TriggerResumed
  fullName: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.TriggerResumed
- uid: Quartz.ISchedulerListener.TriggerResumed(Quartz.TriggerKey,System.Threading.CancellationToken)
  commentId: M:Quartz.ISchedulerListener.TriggerResumed(Quartz.TriggerKey,System.Threading.CancellationToken)
  parent: Quartz.ISchedulerListener
  isExternal: true
  name: TriggerResumed(TriggerKey, CancellationToken)
  nameWithType: ISchedulerListener.TriggerResumed(TriggerKey, CancellationToken)
  fullName: Quartz.ISchedulerListener.TriggerResumed(Quartz.TriggerKey, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Quartz.ISchedulerListener.TriggerResumed(Quartz.TriggerKey,System.Threading.CancellationToken)
    name: TriggerResumed
    nameWithType: ISchedulerListener.TriggerResumed
    fullName: Quartz.ISchedulerListener.TriggerResumed
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Quartz.TriggerKey
    name: TriggerKey
    nameWithType: TriggerKey
    fullName: Quartz.TriggerKey
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Quartz.ISchedulerListener.TriggerResumed(Quartz.TriggerKey,System.Threading.CancellationToken)
    name: TriggerResumed
    nameWithType: ISchedulerListener.TriggerResumed
    fullName: Quartz.ISchedulerListener.TriggerResumed
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Quartz.TriggerKey
    name: TriggerKey
    nameWithType: TriggerKey
    fullName: Quartz.TriggerKey
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.TriggersPaused*
  commentId: Overload:Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.TriggersPaused
  name: TriggersPaused
  nameWithType: LiveLogPlugin.TriggersPaused
  fullName: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.TriggersPaused
- uid: Quartz.ISchedulerListener.TriggersPaused(System.String,System.Threading.CancellationToken)
  commentId: M:Quartz.ISchedulerListener.TriggersPaused(System.String,System.Threading.CancellationToken)
  parent: Quartz.ISchedulerListener
  isExternal: true
  name: TriggersPaused(String, CancellationToken)
  nameWithType: ISchedulerListener.TriggersPaused(String, CancellationToken)
  fullName: Quartz.ISchedulerListener.TriggersPaused(System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Quartz.ISchedulerListener.TriggersPaused(System.String,System.Threading.CancellationToken)
    name: TriggersPaused
    nameWithType: ISchedulerListener.TriggersPaused
    fullName: Quartz.ISchedulerListener.TriggersPaused
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Quartz.ISchedulerListener.TriggersPaused(System.String,System.Threading.CancellationToken)
    name: TriggersPaused
    nameWithType: ISchedulerListener.TriggersPaused
    fullName: Quartz.ISchedulerListener.TriggersPaused
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.TriggersResumed*
  commentId: Overload:Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.TriggersResumed
  name: TriggersResumed
  nameWithType: LiveLogPlugin.TriggersResumed
  fullName: Hybrid.Quartz.Plugins.LiveLog.LiveLogPlugin.TriggersResumed
- uid: Quartz.ISchedulerListener.TriggersResumed(System.String,System.Threading.CancellationToken)
  commentId: M:Quartz.ISchedulerListener.TriggersResumed(System.String,System.Threading.CancellationToken)
  parent: Quartz.ISchedulerListener
  isExternal: true
  name: TriggersResumed(String, CancellationToken)
  nameWithType: ISchedulerListener.TriggersResumed(String, CancellationToken)
  fullName: Quartz.ISchedulerListener.TriggersResumed(System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Quartz.ISchedulerListener.TriggersResumed(System.String,System.Threading.CancellationToken)
    name: TriggersResumed
    nameWithType: ISchedulerListener.TriggersResumed
    fullName: Quartz.ISchedulerListener.TriggersResumed
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Quartz.ISchedulerListener.TriggersResumed(System.String,System.Threading.CancellationToken)
    name: TriggersResumed
    nameWithType: ISchedulerListener.TriggersResumed
    fullName: Quartz.ISchedulerListener.TriggersResumed
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
