### YamlMime:ManagedReference
items:
- uid: Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase
  commentId: T:Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase
  id: HealthChecksModuleBase
  parent: Hybrid.AspNetCore.Diagnostics
  children:
  - Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase.AddServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  - Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase.BuildHealthChecks(Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder,Microsoft.Extensions.Configuration.IConfiguration)
  - Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase.GetHealthCheckOptions(System.IServiceProvider)
  - Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase.Level
  - Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase.Order
  - Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase.UseModule(Microsoft.AspNetCore.Builder.IApplicationBuilder)
  langs:
  - csharp
  - vb
  name: HealthChecksModuleBase
  nameWithType: HealthChecksModuleBase
  fullName: Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase
  type: Class
  source:
    remote:
      path: src/Hybrid.AspNetCore.Diagnostics/HealthChecksModuleBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: HealthChecksModuleBase
    path: ../src/Hybrid.AspNetCore.Diagnostics/HealthChecksModuleBase.cs
    startLine: 31
  assemblies:
  - Hybrid.AspNetCore.Diagnostics
  namespace: Hybrid.AspNetCore.Diagnostics
  summary: "\n程序健康检查模块\n"
  example: []
  syntax:
    content: >-
      [DependsOnModules(new Type[]{typeof(AspNetCoreModule)})]

      public abstract class HealthChecksModuleBase : AspHybridModule
    content.vb: >-
      <DependsOnModules(New Type() {GetType(AspNetCoreModule)})>

      Public MustInherit Class HealthChecksModuleBase
          Inherits AspHybridModule
  inheritance:
  - System.Object
  - Hybrid.Core.Modules.HybridModule
  - Hybrid.AspNetCore.AspHybridModule
  derivedClasses:
  - Hybrid.AspNetCore.Diagnostics.HealthChecksModule
  inheritedMembers:
  - Hybrid.Core.Modules.HybridModule.IsEnabled
  - Hybrid.Core.Modules.HybridModule.UseModule(System.IServiceProvider)
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - System.Object.Hybrid.Extensions.ObjectExtensions.CastTo(System.Type)
  - System.Object.Hybrid.Extensions.ObjectExtensions.CastTo``1
  - System.Object.Hybrid.Extensions.ObjectExtensions.CastTo``1({T})
  - Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase.Hybrid.Extensions.ObjectExtensions.IsIn``1(Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase[])
  - System.Object.Hybrid.Extensions.ObjectExtensions.ToDynamic
  - Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase.Hybrid.Extensions.ObjectExtensions.DeepClone``1
  - Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase.Hybrid.Extensions.ParameterCheckExtensions.Required``1(System.Func{Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase,System.Boolean},System.String)
  - Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase.Hybrid.Extensions.ParameterCheckExtensions.Required``2(System.Func{Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase,System.Boolean},System.String)
  - Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase.Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(System.String)
  - Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase.Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase},System.Action{System.Exception},System.Action{Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase})
  - Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase.Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase},System.Action{System.Exception})
  - Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase.Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase,{TResult}},System.Action{System.Exception},System.Action{Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase})
  - Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase.Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase,{TResult}},System.Action{System.Exception})
  - Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase.Hybrid.Extensions.TryCatchExtensions.TryFinally``1(System.Action{Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase},System.Action{Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase})
  - System.Object.Hybrid.Json.JsonExtensions.ToJsonString(System.Boolean,System.Boolean)
  - System.Object.Hybrid.Mapping.MapperExtensions.MapTo``1
  - Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase.Hybrid.Mapping.MapperExtensions.MapTo``2({TTarget})
  - System.Object.Hybrid.Reflection.LockExtensions.Locking(System.Action)
  - Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase.Hybrid.Reflection.LockExtensions.Locking``1(System.Action{Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase})
  - System.Object.Hybrid.Reflection.LockExtensions.Locking``1(System.Func{{TResult}})
  - Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase.Hybrid.Reflection.LockExtensions.Locking``2(System.Func{Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase,{TResult}})
  - Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase.Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2
  - Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase.Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(System.Security.Principal.IPrincipal)
  - Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase.Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(System.Security.Principal.IPrincipal)
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase.Level
  commentId: P:Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase.Level
  id: Level
  parent: Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase
  langs:
  - csharp
  - vb
  name: Level
  nameWithType: HealthChecksModuleBase.Level
  fullName: Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase.Level
  type: Property
  source:
    remote:
      path: src/Hybrid.AspNetCore.Diagnostics/HealthChecksModuleBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: Level
    path: ../src/Hybrid.AspNetCore.Diagnostics/HealthChecksModuleBase.cs
    startLine: 37
  assemblies:
  - Hybrid.AspNetCore.Diagnostics
  namespace: Hybrid.AspNetCore.Diagnostics
  summary: "\n获取 模块级别，级别越小越先启动\n"
  example: []
  syntax:
    content: public override ModuleLevel Level { get; }
    parameters: []
    return:
      type: Hybrid.Core.Modules.ModuleLevel
    content.vb: Public Overrides ReadOnly Property Level As ModuleLevel
  overridden: Hybrid.Core.Modules.HybridModule.Level
  overload: Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase.Level*
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase.Order
  commentId: P:Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase.Order
  id: Order
  parent: Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase
  langs:
  - csharp
  - vb
  name: Order
  nameWithType: HealthChecksModuleBase.Order
  fullName: Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase.Order
  type: Property
  source:
    remote:
      path: src/Hybrid.AspNetCore.Diagnostics/HealthChecksModuleBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: Order
    path: ../src/Hybrid.AspNetCore.Diagnostics/HealthChecksModuleBase.cs
    startLine: 43
  assemblies:
  - Hybrid.AspNetCore.Diagnostics
  namespace: Hybrid.AspNetCore.Diagnostics
  summary: "\n获取 模块启动顺序，模块启动的顺序先按级别启动，同一级别内部再按此顺序启动，\n级别默认为0，表示无依赖，需要在同级别有依赖顺序的时候，再重写为>0的顺序值\n"
  example: []
  syntax:
    content: public override int Order { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Overrides ReadOnly Property Order As Integer
  overridden: Hybrid.Core.Modules.HybridModule.Order
  overload: Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase.Order*
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase.AddServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  commentId: M:Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase.AddServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  id: AddServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  parent: Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase
  langs:
  - csharp
  - vb
  name: AddServices(IServiceCollection)
  nameWithType: HealthChecksModuleBase.AddServices(IServiceCollection)
  fullName: Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase.AddServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  type: Method
  source:
    remote:
      path: src/Hybrid.AspNetCore.Diagnostics/HealthChecksModuleBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: AddServices
    path: ../src/Hybrid.AspNetCore.Diagnostics/HealthChecksModuleBase.cs
    startLine: 50
  assemblies:
  - Hybrid.AspNetCore.Diagnostics
  namespace: Hybrid.AspNetCore.Diagnostics
  summary: "\n将模块服务添加到依赖注入服务容器中\n"
  example: []
  syntax:
    content: public override IServiceCollection AddServices(IServiceCollection services)
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: 依赖注入服务容器
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: ''
    content.vb: Public Overrides Function AddServices(services As IServiceCollection) As IServiceCollection
  overridden: Hybrid.Core.Modules.HybridModule.AddServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  overload: Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase.AddServices*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase.UseModule(Microsoft.AspNetCore.Builder.IApplicationBuilder)
  commentId: M:Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase.UseModule(Microsoft.AspNetCore.Builder.IApplicationBuilder)
  id: UseModule(Microsoft.AspNetCore.Builder.IApplicationBuilder)
  parent: Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase
  langs:
  - csharp
  - vb
  name: UseModule(IApplicationBuilder)
  nameWithType: HealthChecksModuleBase.UseModule(IApplicationBuilder)
  fullName: Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase.UseModule(Microsoft.AspNetCore.Builder.IApplicationBuilder)
  type: Method
  source:
    remote:
      path: src/Hybrid.AspNetCore.Diagnostics/HealthChecksModuleBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: UseModule
    path: ../src/Hybrid.AspNetCore.Diagnostics/HealthChecksModuleBase.cs
    startLine: 68
  assemblies:
  - Hybrid.AspNetCore.Diagnostics
  namespace: Hybrid.AspNetCore.Diagnostics
  summary: "\n应用AspNetCore的服务业务\n"
  example: []
  syntax:
    content: public override void UseModule(IApplicationBuilder app)
    parameters:
    - id: app
      type: Microsoft.AspNetCore.Builder.IApplicationBuilder
      description: Asp应用程序构建器
    content.vb: Public Overrides Sub UseModule(app As IApplicationBuilder)
  overridden: Hybrid.AspNetCore.AspHybridModule.UseModule(Microsoft.AspNetCore.Builder.IApplicationBuilder)
  overload: Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase.UseModule*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase.BuildHealthChecks(Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder,Microsoft.Extensions.Configuration.IConfiguration)
  commentId: M:Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase.BuildHealthChecks(Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder,Microsoft.Extensions.Configuration.IConfiguration)
  id: BuildHealthChecks(Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder,Microsoft.Extensions.Configuration.IConfiguration)
  parent: Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase
  langs:
  - csharp
  - vb
  name: BuildHealthChecks(IHealthChecksBuilder, IConfiguration)
  nameWithType: HealthChecksModuleBase.BuildHealthChecks(IHealthChecksBuilder, IConfiguration)
  fullName: Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase.BuildHealthChecks(Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder, Microsoft.Extensions.Configuration.IConfiguration)
  type: Method
  source:
    remote:
      path: src/Hybrid.AspNetCore.Diagnostics/HealthChecksModuleBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: BuildHealthChecks
    path: ../src/Hybrid.AspNetCore.Diagnostics/HealthChecksModuleBase.cs
    startLine: 98
  assemblies:
  - Hybrid.AspNetCore.Diagnostics
  namespace: Hybrid.AspNetCore.Diagnostics
  summary: "\n建立HealthChecks服务\n"
  example: []
  syntax:
    content: protected virtual IHealthChecksBuilder BuildHealthChecks(IHealthChecksBuilder builder, IConfiguration configuration)
    parameters:
    - id: builder
      type: Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder
      description: HealthChecks服务创建者
    - id: configuration
      type: Microsoft.Extensions.Configuration.IConfiguration
      description: 应用程序配置
    return:
      type: Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder
      description: ''
    content.vb: Protected Overridable Function BuildHealthChecks(builder As IHealthChecksBuilder, configuration As IConfiguration) As IHealthChecksBuilder
  overload: Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase.BuildHealthChecks*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase.GetHealthCheckOptions(System.IServiceProvider)
  commentId: M:Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase.GetHealthCheckOptions(System.IServiceProvider)
  id: GetHealthCheckOptions(System.IServiceProvider)
  parent: Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase
  langs:
  - csharp
  - vb
  name: GetHealthCheckOptions(IServiceProvider)
  nameWithType: HealthChecksModuleBase.GetHealthCheckOptions(IServiceProvider)
  fullName: Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase.GetHealthCheckOptions(System.IServiceProvider)
  type: Method
  source:
    remote:
      path: src/Hybrid.AspNetCore.Diagnostics/HealthChecksModuleBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: GetHealthCheckOptions
    path: ../src/Hybrid.AspNetCore.Diagnostics/HealthChecksModuleBase.cs
    startLine: 176
  assemblies:
  - Hybrid.AspNetCore.Diagnostics
  namespace: Hybrid.AspNetCore.Diagnostics
  summary: "\n重写以创建HealthCheckOptions\n"
  example: []
  syntax:
    content: protected virtual HealthCheckOptions GetHealthCheckOptions(IServiceProvider provider)
    parameters:
    - id: provider
      type: System.IServiceProvider
    return:
      type: Microsoft.AspNetCore.Diagnostics.HealthChecks.HealthCheckOptions
    content.vb: Protected Overridable Function GetHealthCheckOptions(provider As IServiceProvider) As HealthCheckOptions
  overload: Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase.GetHealthCheckOptions*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
references:
- uid: Hybrid.AspNetCore.Diagnostics
  commentId: N:Hybrid.AspNetCore.Diagnostics
  name: Hybrid.AspNetCore.Diagnostics
  nameWithType: Hybrid.AspNetCore.Diagnostics
  fullName: Hybrid.AspNetCore.Diagnostics
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Hybrid.Core.Modules.HybridModule
  commentId: T:Hybrid.Core.Modules.HybridModule
  parent: Hybrid.Core.Modules
  name: HybridModule
  nameWithType: HybridModule
  fullName: Hybrid.Core.Modules.HybridModule
- uid: Hybrid.AspNetCore.AspHybridModule
  commentId: T:Hybrid.AspNetCore.AspHybridModule
  parent: Hybrid.AspNetCore
  name: AspHybridModule
  nameWithType: AspHybridModule
  fullName: Hybrid.AspNetCore.AspHybridModule
- uid: Hybrid.Core.Modules.HybridModule.IsEnabled
  commentId: P:Hybrid.Core.Modules.HybridModule.IsEnabled
  parent: Hybrid.Core.Modules.HybridModule
  name: IsEnabled
  nameWithType: HybridModule.IsEnabled
  fullName: Hybrid.Core.Modules.HybridModule.IsEnabled
- uid: Hybrid.Core.Modules.HybridModule.UseModule(System.IServiceProvider)
  commentId: M:Hybrid.Core.Modules.HybridModule.UseModule(System.IServiceProvider)
  parent: Hybrid.Core.Modules.HybridModule
  isExternal: true
  name: UseModule(IServiceProvider)
  nameWithType: HybridModule.UseModule(IServiceProvider)
  fullName: Hybrid.Core.Modules.HybridModule.UseModule(System.IServiceProvider)
  spec.csharp:
  - uid: Hybrid.Core.Modules.HybridModule.UseModule(System.IServiceProvider)
    name: UseModule
    nameWithType: HybridModule.UseModule
    fullName: Hybrid.Core.Modules.HybridModule.UseModule
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IServiceProvider
    name: IServiceProvider
    nameWithType: IServiceProvider
    fullName: System.IServiceProvider
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Core.Modules.HybridModule.UseModule(System.IServiceProvider)
    name: UseModule
    nameWithType: HybridModule.UseModule
    fullName: Hybrid.Core.Modules.HybridModule.UseModule
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IServiceProvider
    name: IServiceProvider
    nameWithType: IServiceProvider
    fullName: System.IServiceProvider
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Extensions.ObjectExtensions.CastTo(System.Type)
  commentId: M:Hybrid.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
  parent: Hybrid.Extensions.ObjectExtensions
  definition: Hybrid.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
  name: CastTo(Type)
  nameWithType: ObjectExtensions.CastTo(Type)
  fullName: Hybrid.Extensions.ObjectExtensions.CastTo(System.Type)
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo(System.Type)
    name: CastTo
    nameWithType: ObjectExtensions.CastTo
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo(System.Type)
    name: CastTo
    nameWithType: ObjectExtensions.CastTo
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Extensions.ObjectExtensions.CastTo``1
  commentId: M:Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object)
  parent: Hybrid.Extensions.ObjectExtensions
  definition: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object)
  name: CastTo<T>()
  nameWithType: ObjectExtensions.CastTo<T>()
  fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>()
  nameWithType.vb: ObjectExtensions.CastTo(Of T)()
  fullName.vb: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)()
  name.vb: CastTo(Of T)()
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1
    name: CastTo<T>
    nameWithType: ObjectExtensions.CastTo<T>
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1
    name: CastTo(Of T)
    nameWithType: ObjectExtensions.CastTo(Of T)
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Extensions.ObjectExtensions.CastTo``1({T})
  commentId: M:Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
  parent: Hybrid.Extensions.ObjectExtensions
  definition: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
  name: CastTo<T>(T)
  nameWithType: ObjectExtensions.CastTo<T>(T)
  fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>(T)
  nameWithType.vb: ObjectExtensions.CastTo(Of T)(T)
  fullName.vb: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)(T)
  name.vb: CastTo(Of T)(T)
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(``0)
    name: CastTo<T>
    nameWithType: ObjectExtensions.CastTo<T>
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(``0)
    name: CastTo(Of T)
    nameWithType: ObjectExtensions.CastTo(Of T)
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase.Hybrid.Extensions.ObjectExtensions.IsIn``1(Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase[])
  commentId: M:Hybrid.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
  parent: Hybrid.Extensions.ObjectExtensions
  definition: Hybrid.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
  name: IsIn<HealthChecksModuleBase>(HealthChecksModuleBase[])
  nameWithType: ObjectExtensions.IsIn<HealthChecksModuleBase>(HealthChecksModuleBase[])
  fullName: Hybrid.Extensions.ObjectExtensions.IsIn<Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase>(Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase[])
  nameWithType.vb: ObjectExtensions.IsIn(Of HealthChecksModuleBase)(HealthChecksModuleBase())
  fullName.vb: Hybrid.Extensions.ObjectExtensions.IsIn(Of Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase)(Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase())
  name.vb: IsIn(Of HealthChecksModuleBase)(HealthChecksModuleBase())
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.IsIn``1(``0[])
    name: IsIn<HealthChecksModuleBase>
    nameWithType: ObjectExtensions.IsIn<HealthChecksModuleBase>
    fullName: Hybrid.Extensions.ObjectExtensions.IsIn<Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase
    name: HealthChecksModuleBase
    nameWithType: HealthChecksModuleBase
    fullName: Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.IsIn``1(``0[])
    name: IsIn(Of HealthChecksModuleBase)
    nameWithType: ObjectExtensions.IsIn(Of HealthChecksModuleBase)
    fullName: Hybrid.Extensions.ObjectExtensions.IsIn(Of Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase
    name: HealthChecksModuleBase
    nameWithType: HealthChecksModuleBase
    fullName: Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Extensions.ObjectExtensions.ToDynamic
  commentId: M:Hybrid.Extensions.ObjectExtensions.ToDynamic(System.Object)
  parent: Hybrid.Extensions.ObjectExtensions
  definition: Hybrid.Extensions.ObjectExtensions.ToDynamic(System.Object)
  name: ToDynamic()
  nameWithType: ObjectExtensions.ToDynamic()
  fullName: Hybrid.Extensions.ObjectExtensions.ToDynamic()
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.ToDynamic
    name: ToDynamic
    nameWithType: ObjectExtensions.ToDynamic
    fullName: Hybrid.Extensions.ObjectExtensions.ToDynamic
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.ToDynamic
    name: ToDynamic
    nameWithType: ObjectExtensions.ToDynamic
    fullName: Hybrid.Extensions.ObjectExtensions.ToDynamic
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase.Hybrid.Extensions.ObjectExtensions.DeepClone``1
  commentId: M:Hybrid.Extensions.ObjectExtensions.DeepClone``1(``0)
  parent: Hybrid.Extensions.ObjectExtensions
  definition: Hybrid.Extensions.ObjectExtensions.DeepClone``1(``0)
  name: DeepClone<HealthChecksModuleBase>()
  nameWithType: ObjectExtensions.DeepClone<HealthChecksModuleBase>()
  fullName: Hybrid.Extensions.ObjectExtensions.DeepClone<Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase>()
  nameWithType.vb: ObjectExtensions.DeepClone(Of HealthChecksModuleBase)()
  fullName.vb: Hybrid.Extensions.ObjectExtensions.DeepClone(Of Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase)()
  name.vb: DeepClone(Of HealthChecksModuleBase)()
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.DeepClone``1
    name: DeepClone<HealthChecksModuleBase>
    nameWithType: ObjectExtensions.DeepClone<HealthChecksModuleBase>
    fullName: Hybrid.Extensions.ObjectExtensions.DeepClone<Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.DeepClone``1
    name: DeepClone(Of HealthChecksModuleBase)
    nameWithType: ObjectExtensions.DeepClone(Of HealthChecksModuleBase)
    fullName: Hybrid.Extensions.ObjectExtensions.DeepClone(Of Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase.Hybrid.Extensions.ParameterCheckExtensions.Required``1(System.Func{Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase,System.Boolean},System.String)
  commentId: M:Hybrid.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
  parent: Hybrid.Extensions.ParameterCheckExtensions
  definition: Hybrid.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
  name: Required<HealthChecksModuleBase>(Func<HealthChecksModuleBase, Boolean>, String)
  nameWithType: ParameterCheckExtensions.Required<HealthChecksModuleBase>(Func<HealthChecksModuleBase, Boolean>, String)
  fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase>(System.Func<Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase, System.Boolean>, System.String)
  nameWithType.vb: ParameterCheckExtensions.Required(Of HealthChecksModuleBase)(Func(Of HealthChecksModuleBase, Boolean), String)
  fullName.vb: Hybrid.Extensions.ParameterCheckExtensions.Required(Of Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase)(System.Func(Of Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase, System.Boolean), System.String)
  name.vb: Required(Of HealthChecksModuleBase)(Func(Of HealthChecksModuleBase, Boolean), String)
  spec.csharp:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``1(System.Func{``0,System.Boolean},System.String)
    name: Required<HealthChecksModuleBase>
    nameWithType: ParameterCheckExtensions.Required<HealthChecksModuleBase>
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase
    name: HealthChecksModuleBase
    nameWithType: HealthChecksModuleBase
    fullName: Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``1(System.Func{``0,System.Boolean},System.String)
    name: Required(Of HealthChecksModuleBase)
    nameWithType: ParameterCheckExtensions.Required(Of HealthChecksModuleBase)
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required(Of Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase
    name: HealthChecksModuleBase
    nameWithType: HealthChecksModuleBase
    fullName: Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase.Hybrid.Extensions.ParameterCheckExtensions.Required``2(System.Func{Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase,System.Boolean},System.String)
  commentId: M:Hybrid.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
  parent: Hybrid.Extensions.ParameterCheckExtensions
  definition: Hybrid.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
  name: Required<HealthChecksModuleBase, TException>(Func<HealthChecksModuleBase, Boolean>, String)
  nameWithType: ParameterCheckExtensions.Required<HealthChecksModuleBase, TException>(Func<HealthChecksModuleBase, Boolean>, String)
  fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase, TException>(System.Func<Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase, System.Boolean>, System.String)
  nameWithType.vb: ParameterCheckExtensions.Required(Of HealthChecksModuleBase, TException)(Func(Of HealthChecksModuleBase, Boolean), String)
  fullName.vb: Hybrid.Extensions.ParameterCheckExtensions.Required(Of Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase, TException)(System.Func(Of Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase, System.Boolean), System.String)
  name.vb: Required(Of HealthChecksModuleBase, TException)(Func(Of HealthChecksModuleBase, Boolean), String)
  spec.csharp:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``2(System.Func{``0,System.Boolean},System.String)
    name: Required<HealthChecksModuleBase, TException>
    nameWithType: ParameterCheckExtensions.Required<HealthChecksModuleBase, TException>
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase, TException>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase
    name: HealthChecksModuleBase
    nameWithType: HealthChecksModuleBase
    fullName: Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``2(System.Func{``0,System.Boolean},System.String)
    name: Required(Of HealthChecksModuleBase, TException)
    nameWithType: ParameterCheckExtensions.Required(Of HealthChecksModuleBase, TException)
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required(Of Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase, TException)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase
    name: HealthChecksModuleBase
    nameWithType: HealthChecksModuleBase
    fullName: Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase.Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(System.String)
  commentId: M:Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
  parent: Hybrid.Extensions.ParameterCheckExtensions
  definition: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
  name: CheckNotNull<HealthChecksModuleBase>(String)
  nameWithType: ParameterCheckExtensions.CheckNotNull<HealthChecksModuleBase>(String)
  fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull<Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase>(System.String)
  nameWithType.vb: ParameterCheckExtensions.CheckNotNull(Of HealthChecksModuleBase)(String)
  fullName.vb: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull(Of Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase)(System.String)
  name.vb: CheckNotNull(Of HealthChecksModuleBase)(String)
  spec.csharp:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(System.String)
    name: CheckNotNull<HealthChecksModuleBase>
    nameWithType: ParameterCheckExtensions.CheckNotNull<HealthChecksModuleBase>
    fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull<Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(System.String)
    name: CheckNotNull(Of HealthChecksModuleBase)
    nameWithType: ParameterCheckExtensions.CheckNotNull(Of HealthChecksModuleBase)
    fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull(Of Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase.Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase},System.Action{System.Exception},System.Action{Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
  parent: Hybrid.Extensions.TryCatchExtensions
  definition: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
  name: TryCatch<HealthChecksModuleBase>(Action<HealthChecksModuleBase>, Action<Exception>, Action<HealthChecksModuleBase>)
  nameWithType: TryCatchExtensions.TryCatch<HealthChecksModuleBase>(Action<HealthChecksModuleBase>, Action<Exception>, Action<HealthChecksModuleBase>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase>(System.Action<Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase>, System.Action<System.Exception>, System.Action<Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of HealthChecksModuleBase)(Action(Of HealthChecksModuleBase), Action(Of Exception), Action(Of HealthChecksModuleBase))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase)(System.Action(Of Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase), System.Action(Of System.Exception), System.Action(Of Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase))
  name.vb: TryCatch(Of HealthChecksModuleBase)(Action(Of HealthChecksModuleBase), Action(Of Exception), Action(Of HealthChecksModuleBase))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{``0},System.Action{System.Exception},System.Action{``0})
    name: TryCatch<HealthChecksModuleBase>
    nameWithType: TryCatchExtensions.TryCatch<HealthChecksModuleBase>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase
    name: HealthChecksModuleBase
    nameWithType: HealthChecksModuleBase
    fullName: Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase
    name: HealthChecksModuleBase
    nameWithType: HealthChecksModuleBase
    fullName: Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{``0},System.Action{System.Exception},System.Action{``0})
    name: TryCatch(Of HealthChecksModuleBase)
    nameWithType: TryCatchExtensions.TryCatch(Of HealthChecksModuleBase)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase
    name: HealthChecksModuleBase
    nameWithType: HealthChecksModuleBase
    fullName: Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase
    name: HealthChecksModuleBase
    nameWithType: HealthChecksModuleBase
    fullName: Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase.Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase},System.Action{System.Exception})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
  parent: Hybrid.Extensions.TryCatchExtensions
  definition: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
  name: TryCatch<HealthChecksModuleBase>(Action<HealthChecksModuleBase>, Action<Exception>)
  nameWithType: TryCatchExtensions.TryCatch<HealthChecksModuleBase>(Action<HealthChecksModuleBase>, Action<Exception>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase>(System.Action<Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase>, System.Action<System.Exception>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of HealthChecksModuleBase)(Action(Of HealthChecksModuleBase), Action(Of Exception))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase)(System.Action(Of Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase), System.Action(Of System.Exception))
  name.vb: TryCatch(Of HealthChecksModuleBase)(Action(Of HealthChecksModuleBase), Action(Of Exception))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{``0},System.Action{System.Exception})
    name: TryCatch<HealthChecksModuleBase>
    nameWithType: TryCatchExtensions.TryCatch<HealthChecksModuleBase>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase
    name: HealthChecksModuleBase
    nameWithType: HealthChecksModuleBase
    fullName: Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{``0},System.Action{System.Exception})
    name: TryCatch(Of HealthChecksModuleBase)
    nameWithType: TryCatchExtensions.TryCatch(Of HealthChecksModuleBase)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase
    name: HealthChecksModuleBase
    nameWithType: HealthChecksModuleBase
    fullName: Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase.Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase,{TResult}},System.Action{System.Exception},System.Action{Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
  parent: Hybrid.Extensions.TryCatchExtensions
  definition: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
  name: TryCatch<HealthChecksModuleBase, TResult>(Func<HealthChecksModuleBase, TResult>, Action<Exception>, Action<HealthChecksModuleBase>)
  nameWithType: TryCatchExtensions.TryCatch<HealthChecksModuleBase, TResult>(Func<HealthChecksModuleBase, TResult>, Action<Exception>, Action<HealthChecksModuleBase>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase, TResult>(System.Func<Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase, TResult>, System.Action<System.Exception>, System.Action<Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of HealthChecksModuleBase, TResult)(Func(Of HealthChecksModuleBase, TResult), Action(Of Exception), Action(Of HealthChecksModuleBase))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase, TResult)(System.Func(Of Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase, TResult), System.Action(Of System.Exception), System.Action(Of Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase))
  name.vb: TryCatch(Of HealthChecksModuleBase, TResult)(Func(Of HealthChecksModuleBase, TResult), Action(Of Exception), Action(Of HealthChecksModuleBase))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
    name: TryCatch<HealthChecksModuleBase, TResult>
    nameWithType: TryCatchExtensions.TryCatch<HealthChecksModuleBase, TResult>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase
    name: HealthChecksModuleBase
    nameWithType: HealthChecksModuleBase
    fullName: Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase
    name: HealthChecksModuleBase
    nameWithType: HealthChecksModuleBase
    fullName: Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
    name: TryCatch(Of HealthChecksModuleBase, TResult)
    nameWithType: TryCatchExtensions.TryCatch(Of HealthChecksModuleBase, TResult)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase
    name: HealthChecksModuleBase
    nameWithType: HealthChecksModuleBase
    fullName: Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase
    name: HealthChecksModuleBase
    nameWithType: HealthChecksModuleBase
    fullName: Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase.Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase,{TResult}},System.Action{System.Exception})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
  parent: Hybrid.Extensions.TryCatchExtensions
  definition: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
  name: TryCatch<HealthChecksModuleBase, TResult>(Func<HealthChecksModuleBase, TResult>, Action<Exception>)
  nameWithType: TryCatchExtensions.TryCatch<HealthChecksModuleBase, TResult>(Func<HealthChecksModuleBase, TResult>, Action<Exception>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase, TResult>(System.Func<Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase, TResult>, System.Action<System.Exception>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of HealthChecksModuleBase, TResult)(Func(Of HealthChecksModuleBase, TResult), Action(Of Exception))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase, TResult)(System.Func(Of Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase, TResult), System.Action(Of System.Exception))
  name.vb: TryCatch(Of HealthChecksModuleBase, TResult)(Func(Of HealthChecksModuleBase, TResult), Action(Of Exception))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{``0,``1},System.Action{System.Exception})
    name: TryCatch<HealthChecksModuleBase, TResult>
    nameWithType: TryCatchExtensions.TryCatch<HealthChecksModuleBase, TResult>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase
    name: HealthChecksModuleBase
    nameWithType: HealthChecksModuleBase
    fullName: Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{``0,``1},System.Action{System.Exception})
    name: TryCatch(Of HealthChecksModuleBase, TResult)
    nameWithType: TryCatchExtensions.TryCatch(Of HealthChecksModuleBase, TResult)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase
    name: HealthChecksModuleBase
    nameWithType: HealthChecksModuleBase
    fullName: Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase.Hybrid.Extensions.TryCatchExtensions.TryFinally``1(System.Action{Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase},System.Action{Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
  parent: Hybrid.Extensions.TryCatchExtensions
  definition: Hybrid.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
  name: TryFinally<HealthChecksModuleBase>(Action<HealthChecksModuleBase>, Action<HealthChecksModuleBase>)
  nameWithType: TryCatchExtensions.TryFinally<HealthChecksModuleBase>(Action<HealthChecksModuleBase>, Action<HealthChecksModuleBase>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryFinally<Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase>(System.Action<Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase>, System.Action<Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase>)
  nameWithType.vb: TryCatchExtensions.TryFinally(Of HealthChecksModuleBase)(Action(Of HealthChecksModuleBase), Action(Of HealthChecksModuleBase))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryFinally(Of Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase)(System.Action(Of Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase), System.Action(Of Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase))
  name.vb: TryFinally(Of HealthChecksModuleBase)(Action(Of HealthChecksModuleBase), Action(Of HealthChecksModuleBase))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryFinally``1(System.Action{``0},System.Action{``0})
    name: TryFinally<HealthChecksModuleBase>
    nameWithType: TryCatchExtensions.TryFinally<HealthChecksModuleBase>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryFinally<Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase
    name: HealthChecksModuleBase
    nameWithType: HealthChecksModuleBase
    fullName: Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase
    name: HealthChecksModuleBase
    nameWithType: HealthChecksModuleBase
    fullName: Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryFinally``1(System.Action{``0},System.Action{``0})
    name: TryFinally(Of HealthChecksModuleBase)
    nameWithType: TryCatchExtensions.TryFinally(Of HealthChecksModuleBase)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryFinally(Of Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase
    name: HealthChecksModuleBase
    nameWithType: HealthChecksModuleBase
    fullName: Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase
    name: HealthChecksModuleBase
    nameWithType: HealthChecksModuleBase
    fullName: Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Json.JsonExtensions.ToJsonString(System.Boolean,System.Boolean)
  commentId: M:Hybrid.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
  parent: Hybrid.Json.JsonExtensions
  definition: Hybrid.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
  name: ToJsonString(Boolean, Boolean)
  nameWithType: JsonExtensions.ToJsonString(Boolean, Boolean)
  fullName: Hybrid.Json.JsonExtensions.ToJsonString(System.Boolean, System.Boolean)
  spec.csharp:
  - uid: Hybrid.Json.JsonExtensions.ToJsonString(System.Boolean,System.Boolean)
    name: ToJsonString
    nameWithType: JsonExtensions.ToJsonString
    fullName: Hybrid.Json.JsonExtensions.ToJsonString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Json.JsonExtensions.ToJsonString(System.Boolean,System.Boolean)
    name: ToJsonString
    nameWithType: JsonExtensions.ToJsonString
    fullName: Hybrid.Json.JsonExtensions.ToJsonString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Mapping.MapperExtensions.MapTo``1
  commentId: M:Hybrid.Mapping.MapperExtensions.MapTo``1(System.Object)
  parent: Hybrid.Mapping.MapperExtensions
  definition: Hybrid.Mapping.MapperExtensions.MapTo``1(System.Object)
  name: MapTo<TTarget>()
  nameWithType: MapperExtensions.MapTo<TTarget>()
  fullName: Hybrid.Mapping.MapperExtensions.MapTo<TTarget>()
  nameWithType.vb: MapperExtensions.MapTo(Of TTarget)()
  fullName.vb: Hybrid.Mapping.MapperExtensions.MapTo(Of TTarget)()
  name.vb: MapTo(Of TTarget)()
  spec.csharp:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``1
    name: MapTo<TTarget>
    nameWithType: MapperExtensions.MapTo<TTarget>
    fullName: Hybrid.Mapping.MapperExtensions.MapTo<TTarget>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``1
    name: MapTo(Of TTarget)
    nameWithType: MapperExtensions.MapTo(Of TTarget)
    fullName: Hybrid.Mapping.MapperExtensions.MapTo(Of TTarget)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase.Hybrid.Mapping.MapperExtensions.MapTo``2({TTarget})
  commentId: M:Hybrid.Mapping.MapperExtensions.MapTo``2(``0,``1)
  parent: Hybrid.Mapping.MapperExtensions
  definition: Hybrid.Mapping.MapperExtensions.MapTo``2(``0,``1)
  name: MapTo<HealthChecksModuleBase, TTarget>(TTarget)
  nameWithType: MapperExtensions.MapTo<HealthChecksModuleBase, TTarget>(TTarget)
  fullName: Hybrid.Mapping.MapperExtensions.MapTo<Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase, TTarget>(TTarget)
  nameWithType.vb: MapperExtensions.MapTo(Of HealthChecksModuleBase, TTarget)(TTarget)
  fullName.vb: Hybrid.Mapping.MapperExtensions.MapTo(Of Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase, TTarget)(TTarget)
  name.vb: MapTo(Of HealthChecksModuleBase, TTarget)(TTarget)
  spec.csharp:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``2(``1)
    name: MapTo<HealthChecksModuleBase, TTarget>
    nameWithType: MapperExtensions.MapTo<HealthChecksModuleBase, TTarget>
    fullName: Hybrid.Mapping.MapperExtensions.MapTo<Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase, TTarget>
  - name: (
    nameWithType: (
    fullName: (
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``2(``1)
    name: MapTo(Of HealthChecksModuleBase, TTarget)
    nameWithType: MapperExtensions.MapTo(Of HealthChecksModuleBase, TTarget)
    fullName: Hybrid.Mapping.MapperExtensions.MapTo(Of Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase, TTarget)
  - name: (
    nameWithType: (
    fullName: (
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Reflection.LockExtensions.Locking(System.Action)
  commentId: M:Hybrid.Reflection.LockExtensions.Locking(System.Object,System.Action)
  parent: Hybrid.Reflection.LockExtensions
  definition: Hybrid.Reflection.LockExtensions.Locking(System.Object,System.Action)
  name: Locking(Action)
  nameWithType: LockExtensions.Locking(Action)
  fullName: Hybrid.Reflection.LockExtensions.Locking(System.Action)
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking(System.Action)
    name: Locking
    nameWithType: LockExtensions.Locking
    fullName: Hybrid.Reflection.LockExtensions.Locking
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking(System.Action)
    name: Locking
    nameWithType: LockExtensions.Locking
    fullName: Hybrid.Reflection.LockExtensions.Locking
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase.Hybrid.Reflection.LockExtensions.Locking``1(System.Action{Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase})
  commentId: M:Hybrid.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
  parent: Hybrid.Reflection.LockExtensions
  definition: Hybrid.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
  name: Locking<HealthChecksModuleBase>(Action<HealthChecksModuleBase>)
  nameWithType: LockExtensions.Locking<HealthChecksModuleBase>(Action<HealthChecksModuleBase>)
  fullName: Hybrid.Reflection.LockExtensions.Locking<Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase>(System.Action<Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase>)
  nameWithType.vb: LockExtensions.Locking(Of HealthChecksModuleBase)(Action(Of HealthChecksModuleBase))
  fullName.vb: Hybrid.Reflection.LockExtensions.Locking(Of Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase)(System.Action(Of Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase))
  name.vb: Locking(Of HealthChecksModuleBase)(Action(Of HealthChecksModuleBase))
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(System.Action{``0})
    name: Locking<HealthChecksModuleBase>
    nameWithType: LockExtensions.Locking<HealthChecksModuleBase>
    fullName: Hybrid.Reflection.LockExtensions.Locking<Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase
    name: HealthChecksModuleBase
    nameWithType: HealthChecksModuleBase
    fullName: Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(System.Action{``0})
    name: Locking(Of HealthChecksModuleBase)
    nameWithType: LockExtensions.Locking(Of HealthChecksModuleBase)
    fullName: Hybrid.Reflection.LockExtensions.Locking(Of Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase
    name: HealthChecksModuleBase
    nameWithType: HealthChecksModuleBase
    fullName: Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Reflection.LockExtensions.Locking``1(System.Func{{TResult}})
  commentId: M:Hybrid.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
  parent: Hybrid.Reflection.LockExtensions
  definition: Hybrid.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
  name: Locking<TResult>(Func<TResult>)
  nameWithType: LockExtensions.Locking<TResult>(Func<TResult>)
  fullName: Hybrid.Reflection.LockExtensions.Locking<TResult>(System.Func<TResult>)
  nameWithType.vb: LockExtensions.Locking(Of TResult)(Func(Of TResult))
  fullName.vb: Hybrid.Reflection.LockExtensions.Locking(Of TResult)(System.Func(Of TResult))
  name.vb: Locking(Of TResult)(Func(Of TResult))
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(System.Func{``0})
    name: Locking<TResult>
    nameWithType: LockExtensions.Locking<TResult>
    fullName: Hybrid.Reflection.LockExtensions.Locking<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(System.Func{``0})
    name: Locking(Of TResult)
    nameWithType: LockExtensions.Locking(Of TResult)
    fullName: Hybrid.Reflection.LockExtensions.Locking(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase.Hybrid.Reflection.LockExtensions.Locking``2(System.Func{Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase,{TResult}})
  commentId: M:Hybrid.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
  parent: Hybrid.Reflection.LockExtensions
  definition: Hybrid.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
  name: Locking<HealthChecksModuleBase, TResult>(Func<HealthChecksModuleBase, TResult>)
  nameWithType: LockExtensions.Locking<HealthChecksModuleBase, TResult>(Func<HealthChecksModuleBase, TResult>)
  fullName: Hybrid.Reflection.LockExtensions.Locking<Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase, TResult>(System.Func<Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase, TResult>)
  nameWithType.vb: LockExtensions.Locking(Of HealthChecksModuleBase, TResult)(Func(Of HealthChecksModuleBase, TResult))
  fullName.vb: Hybrid.Reflection.LockExtensions.Locking(Of Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase, TResult)(System.Func(Of Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase, TResult))
  name.vb: Locking(Of HealthChecksModuleBase, TResult)(Func(Of HealthChecksModuleBase, TResult))
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking``2(System.Func{``0,``1})
    name: Locking<HealthChecksModuleBase, TResult>
    nameWithType: LockExtensions.Locking<HealthChecksModuleBase, TResult>
    fullName: Hybrid.Reflection.LockExtensions.Locking<Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase
    name: HealthChecksModuleBase
    nameWithType: HealthChecksModuleBase
    fullName: Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking``2(System.Func{``0,``1})
    name: Locking(Of HealthChecksModuleBase, TResult)
    nameWithType: LockExtensions.Locking(Of HealthChecksModuleBase, TResult)
    fullName: Hybrid.Reflection.LockExtensions.Locking(Of Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase
    name: HealthChecksModuleBase
    nameWithType: HealthChecksModuleBase
    fullName: Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase.Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2
  commentId: M:Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2(``0)
  parent: Hybrid.Domain.Entities.EntityExtensions
  definition: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2(``0)
  name: CheckICreatedTime<HealthChecksModuleBase, TKey>()
  nameWithType: EntityExtensions.CheckICreatedTime<HealthChecksModuleBase, TKey>()
  fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime<Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase, TKey>()
  nameWithType.vb: EntityExtensions.CheckICreatedTime(Of HealthChecksModuleBase, TKey)()
  fullName.vb: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime(Of Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase, TKey)()
  name.vb: CheckICreatedTime(Of HealthChecksModuleBase, TKey)()
  spec.csharp:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2
    name: CheckICreatedTime<HealthChecksModuleBase, TKey>
    nameWithType: EntityExtensions.CheckICreatedTime<HealthChecksModuleBase, TKey>
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime<Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2
    name: CheckICreatedTime(Of HealthChecksModuleBase, TKey)
    nameWithType: EntityExtensions.CheckICreatedTime(Of HealthChecksModuleBase, TKey)
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime(Of Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase.Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(System.Security.Principal.IPrincipal)
  commentId: M:Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
  parent: Hybrid.Domain.Entities.EntityExtensions
  definition: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
  name: CheckICreationAudited<HealthChecksModuleBase, TKey, TUserKey>(IPrincipal)
  nameWithType: EntityExtensions.CheckICreationAudited<HealthChecksModuleBase, TKey, TUserKey>(IPrincipal)
  fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited<Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase, TKey, TUserKey>(System.Security.Principal.IPrincipal)
  nameWithType.vb: EntityExtensions.CheckICreationAudited(Of HealthChecksModuleBase, TKey, TUserKey)(IPrincipal)
  fullName.vb: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited(Of Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase, TKey, TUserKey)(System.Security.Principal.IPrincipal)
  name.vb: CheckICreationAudited(Of HealthChecksModuleBase, TKey, TUserKey)(IPrincipal)
  spec.csharp:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(System.Security.Principal.IPrincipal)
    name: CheckICreationAudited<HealthChecksModuleBase, TKey, TUserKey>
    nameWithType: EntityExtensions.CheckICreationAudited<HealthChecksModuleBase, TKey, TUserKey>
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited<Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase, TKey, TUserKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(System.Security.Principal.IPrincipal)
    name: CheckICreationAudited(Of HealthChecksModuleBase, TKey, TUserKey)
    nameWithType: EntityExtensions.CheckICreationAudited(Of HealthChecksModuleBase, TKey, TUserKey)
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited(Of Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase, TKey, TUserKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase.Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(System.Security.Principal.IPrincipal)
  commentId: M:Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
  parent: Hybrid.Domain.Entities.EntityExtensions
  definition: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
  name: CheckIUpdateAudited<HealthChecksModuleBase, TKey, TUserKey>(IPrincipal)
  nameWithType: EntityExtensions.CheckIUpdateAudited<HealthChecksModuleBase, TKey, TUserKey>(IPrincipal)
  fullName: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited<Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase, TKey, TUserKey>(System.Security.Principal.IPrincipal)
  nameWithType.vb: EntityExtensions.CheckIUpdateAudited(Of HealthChecksModuleBase, TKey, TUserKey)(IPrincipal)
  fullName.vb: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited(Of Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase, TKey, TUserKey)(System.Security.Principal.IPrincipal)
  name.vb: CheckIUpdateAudited(Of HealthChecksModuleBase, TKey, TUserKey)(IPrincipal)
  spec.csharp:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(System.Security.Principal.IPrincipal)
    name: CheckIUpdateAudited<HealthChecksModuleBase, TKey, TUserKey>
    nameWithType: EntityExtensions.CheckIUpdateAudited<HealthChecksModuleBase, TKey, TUserKey>
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited<Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase, TKey, TUserKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(System.Security.Principal.IPrincipal)
    name: CheckIUpdateAudited(Of HealthChecksModuleBase, TKey, TUserKey)
    nameWithType: EntityExtensions.CheckIUpdateAudited(Of HealthChecksModuleBase, TKey, TUserKey)
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited(Of Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase, TKey, TUserKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Hybrid.Core.Modules
  commentId: N:Hybrid.Core.Modules
  name: Hybrid.Core.Modules
  nameWithType: Hybrid.Core.Modules
  fullName: Hybrid.Core.Modules
- uid: Hybrid.AspNetCore
  commentId: N:Hybrid.AspNetCore
  name: Hybrid.AspNetCore
  nameWithType: Hybrid.AspNetCore
  fullName: Hybrid.AspNetCore
- uid: Hybrid.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
  commentId: M:Hybrid.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
  isExternal: true
  name: CastTo(Object, Type)
  nameWithType: ObjectExtensions.CastTo(Object, Type)
  fullName: Hybrid.Extensions.ObjectExtensions.CastTo(System.Object, System.Type)
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
    name: CastTo
    nameWithType: ObjectExtensions.CastTo
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
    name: CastTo
    nameWithType: ObjectExtensions.CastTo
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ObjectExtensions
  commentId: T:Hybrid.Extensions.ObjectExtensions
  parent: Hybrid.Extensions
  name: ObjectExtensions
  nameWithType: ObjectExtensions
  fullName: Hybrid.Extensions.ObjectExtensions
- uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object)
  commentId: M:Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object)
  isExternal: true
  name: CastTo<T>(Object)
  nameWithType: ObjectExtensions.CastTo<T>(Object)
  fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>(System.Object)
  nameWithType.vb: ObjectExtensions.CastTo(Of T)(Object)
  fullName.vb: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)(System.Object)
  name.vb: CastTo(Of T)(Object)
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object)
    name: CastTo<T>
    nameWithType: ObjectExtensions.CastTo<T>
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object)
    name: CastTo(Of T)
    nameWithType: ObjectExtensions.CastTo(Of T)
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
  commentId: M:Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
  isExternal: true
  name: CastTo<T>(Object, T)
  nameWithType: ObjectExtensions.CastTo<T>(Object, T)
  fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>(System.Object, T)
  nameWithType.vb: ObjectExtensions.CastTo(Of T)(Object, T)
  fullName.vb: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)(System.Object, T)
  name.vb: CastTo(Of T)(Object, T)
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
    name: CastTo<T>
    nameWithType: ObjectExtensions.CastTo<T>
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
    name: CastTo(Of T)
    nameWithType: ObjectExtensions.CastTo(Of T)
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
  commentId: M:Hybrid.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
  name: IsIn<T>(T, T[])
  nameWithType: ObjectExtensions.IsIn<T>(T, T[])
  fullName: Hybrid.Extensions.ObjectExtensions.IsIn<T>(T, T[])
  nameWithType.vb: ObjectExtensions.IsIn(Of T)(T, T())
  fullName.vb: Hybrid.Extensions.ObjectExtensions.IsIn(Of T)(T, T())
  name.vb: IsIn(Of T)(T, T())
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
    name: IsIn<T>
    nameWithType: ObjectExtensions.IsIn<T>
    fullName: Hybrid.Extensions.ObjectExtensions.IsIn<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
    name: IsIn(Of T)
    nameWithType: ObjectExtensions.IsIn(Of T)
    fullName: Hybrid.Extensions.ObjectExtensions.IsIn(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ObjectExtensions.ToDynamic(System.Object)
  commentId: M:Hybrid.Extensions.ObjectExtensions.ToDynamic(System.Object)
  isExternal: true
  name: ToDynamic(Object)
  nameWithType: ObjectExtensions.ToDynamic(Object)
  fullName: Hybrid.Extensions.ObjectExtensions.ToDynamic(System.Object)
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.ToDynamic(System.Object)
    name: ToDynamic
    nameWithType: ObjectExtensions.ToDynamic
    fullName: Hybrid.Extensions.ObjectExtensions.ToDynamic
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.ToDynamic(System.Object)
    name: ToDynamic
    nameWithType: ObjectExtensions.ToDynamic
    fullName: Hybrid.Extensions.ObjectExtensions.ToDynamic
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ObjectExtensions.DeepClone``1(``0)
  commentId: M:Hybrid.Extensions.ObjectExtensions.DeepClone``1(``0)
  name: DeepClone<T>(T)
  nameWithType: ObjectExtensions.DeepClone<T>(T)
  fullName: Hybrid.Extensions.ObjectExtensions.DeepClone<T>(T)
  nameWithType.vb: ObjectExtensions.DeepClone(Of T)(T)
  fullName.vb: Hybrid.Extensions.ObjectExtensions.DeepClone(Of T)(T)
  name.vb: DeepClone(Of T)(T)
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.DeepClone``1(``0)
    name: DeepClone<T>
    nameWithType: ObjectExtensions.DeepClone<T>
    fullName: Hybrid.Extensions.ObjectExtensions.DeepClone<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.DeepClone``1(``0)
    name: DeepClone(Of T)
    nameWithType: ObjectExtensions.DeepClone(Of T)
    fullName: Hybrid.Extensions.ObjectExtensions.DeepClone(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
  commentId: M:Hybrid.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
  isExternal: true
  name: Required<T>(T, Func<T, Boolean>, String)
  nameWithType: ParameterCheckExtensions.Required<T>(T, Func<T, Boolean>, String)
  fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<T>(T, System.Func<T, System.Boolean>, System.String)
  nameWithType.vb: ParameterCheckExtensions.Required(Of T)(T, Func(Of T, Boolean), String)
  fullName.vb: Hybrid.Extensions.ParameterCheckExtensions.Required(Of T)(T, System.Func(Of T, System.Boolean), System.String)
  name.vb: Required(Of T)(T, Func(Of T, Boolean), String)
  spec.csharp:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
    name: Required<T>
    nameWithType: ParameterCheckExtensions.Required<T>
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
    name: Required(Of T)
    nameWithType: ParameterCheckExtensions.Required(Of T)
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ParameterCheckExtensions
  commentId: T:Hybrid.Extensions.ParameterCheckExtensions
  parent: Hybrid.Extensions
  name: ParameterCheckExtensions
  nameWithType: ParameterCheckExtensions
  fullName: Hybrid.Extensions.ParameterCheckExtensions
- uid: Hybrid.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
  commentId: M:Hybrid.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
  isExternal: true
  name: Required<T, TException>(T, Func<T, Boolean>, String)
  nameWithType: ParameterCheckExtensions.Required<T, TException>(T, Func<T, Boolean>, String)
  fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<T, TException>(T, System.Func<T, System.Boolean>, System.String)
  nameWithType.vb: ParameterCheckExtensions.Required(Of T, TException)(T, Func(Of T, Boolean), String)
  fullName.vb: Hybrid.Extensions.ParameterCheckExtensions.Required(Of T, TException)(T, System.Func(Of T, System.Boolean), System.String)
  name.vb: Required(Of T, TException)(T, Func(Of T, Boolean), String)
  spec.csharp:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
    name: Required<T, TException>
    nameWithType: ParameterCheckExtensions.Required<T, TException>
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<T, TException>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
    name: Required(Of T, TException)
    nameWithType: ParameterCheckExtensions.Required(Of T, TException)
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required(Of T, TException)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
  commentId: M:Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
  isExternal: true
  name: CheckNotNull<T>(T, String)
  nameWithType: ParameterCheckExtensions.CheckNotNull<T>(T, String)
  fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull<T>(T, System.String)
  nameWithType.vb: ParameterCheckExtensions.CheckNotNull(Of T)(T, String)
  fullName.vb: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull(Of T)(T, System.String)
  name.vb: CheckNotNull(Of T)(T, String)
  spec.csharp:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
    name: CheckNotNull<T>
    nameWithType: ParameterCheckExtensions.CheckNotNull<T>
    fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
    name: CheckNotNull(Of T)
    nameWithType: ParameterCheckExtensions.CheckNotNull(Of T)
    fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
  isExternal: true
  name: TryCatch<T>(T, Action<T>, Action<Exception>, Action<T>)
  nameWithType: TryCatchExtensions.TryCatch<T>(T, Action<T>, Action<Exception>, Action<T>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T>(T, System.Action<T>, System.Action<System.Exception>, System.Action<T>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of T)(T, Action(Of T), Action(Of Exception), Action(Of T))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T)(T, System.Action(Of T), System.Action(Of System.Exception), System.Action(Of T))
  name.vb: TryCatch(Of T)(T, Action(Of T), Action(Of Exception), Action(Of T))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
    name: TryCatch<T>
    nameWithType: TryCatchExtensions.TryCatch<T>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
    name: TryCatch(Of T)
    nameWithType: TryCatchExtensions.TryCatch(Of T)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.TryCatchExtensions
  commentId: T:Hybrid.Extensions.TryCatchExtensions
  parent: Hybrid.Extensions
  name: TryCatchExtensions
  nameWithType: TryCatchExtensions
  fullName: Hybrid.Extensions.TryCatchExtensions
- uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
  isExternal: true
  name: TryCatch<T>(T, Action<T>, Action<Exception>)
  nameWithType: TryCatchExtensions.TryCatch<T>(T, Action<T>, Action<Exception>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T>(T, System.Action<T>, System.Action<System.Exception>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of T)(T, Action(Of T), Action(Of Exception))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T)(T, System.Action(Of T), System.Action(Of System.Exception))
  name.vb: TryCatch(Of T)(T, Action(Of T), Action(Of Exception))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
    name: TryCatch<T>
    nameWithType: TryCatchExtensions.TryCatch<T>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
    name: TryCatch(Of T)
    nameWithType: TryCatchExtensions.TryCatch(Of T)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
  isExternal: true
  name: TryCatch<T, TResult>(T, Func<T, TResult>, Action<Exception>, Action<T>)
  nameWithType: TryCatchExtensions.TryCatch<T, TResult>(T, Func<T, TResult>, Action<Exception>, Action<T>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T, TResult>(T, System.Func<T, TResult>, System.Action<System.Exception>, System.Action<T>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of T, TResult)(T, Func(Of T, TResult), Action(Of Exception), Action(Of T))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T, TResult)(T, System.Func(Of T, TResult), System.Action(Of System.Exception), System.Action(Of T))
  name.vb: TryCatch(Of T, TResult)(T, Func(Of T, TResult), Action(Of Exception), Action(Of T))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
    name: TryCatch<T, TResult>
    nameWithType: TryCatchExtensions.TryCatch<T, TResult>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
    name: TryCatch(Of T, TResult)
    nameWithType: TryCatchExtensions.TryCatch(Of T, TResult)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
  isExternal: true
  name: TryCatch<T, TResult>(T, Func<T, TResult>, Action<Exception>)
  nameWithType: TryCatchExtensions.TryCatch<T, TResult>(T, Func<T, TResult>, Action<Exception>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T, TResult>(T, System.Func<T, TResult>, System.Action<System.Exception>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of T, TResult)(T, Func(Of T, TResult), Action(Of Exception))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T, TResult)(T, System.Func(Of T, TResult), System.Action(Of System.Exception))
  name.vb: TryCatch(Of T, TResult)(T, Func(Of T, TResult), Action(Of Exception))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
    name: TryCatch<T, TResult>
    nameWithType: TryCatchExtensions.TryCatch<T, TResult>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
    name: TryCatch(Of T, TResult)
    nameWithType: TryCatchExtensions.TryCatch(Of T, TResult)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
  isExternal: true
  name: TryFinally<T>(T, Action<T>, Action<T>)
  nameWithType: TryCatchExtensions.TryFinally<T>(T, Action<T>, Action<T>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryFinally<T>(T, System.Action<T>, System.Action<T>)
  nameWithType.vb: TryCatchExtensions.TryFinally(Of T)(T, Action(Of T), Action(Of T))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryFinally(Of T)(T, System.Action(Of T), System.Action(Of T))
  name.vb: TryFinally(Of T)(T, Action(Of T), Action(Of T))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
    name: TryFinally<T>
    nameWithType: TryCatchExtensions.TryFinally<T>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryFinally<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
    name: TryFinally(Of T)
    nameWithType: TryCatchExtensions.TryFinally(Of T)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryFinally(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
  commentId: M:Hybrid.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
  isExternal: true
  name: ToJsonString(Object, Boolean, Boolean)
  nameWithType: JsonExtensions.ToJsonString(Object, Boolean, Boolean)
  fullName: Hybrid.Json.JsonExtensions.ToJsonString(System.Object, System.Boolean, System.Boolean)
  spec.csharp:
  - uid: Hybrid.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
    name: ToJsonString
    nameWithType: JsonExtensions.ToJsonString
    fullName: Hybrid.Json.JsonExtensions.ToJsonString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
    name: ToJsonString
    nameWithType: JsonExtensions.ToJsonString
    fullName: Hybrid.Json.JsonExtensions.ToJsonString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Json.JsonExtensions
  commentId: T:Hybrid.Json.JsonExtensions
  parent: Hybrid.Json
  name: JsonExtensions
  nameWithType: JsonExtensions
  fullName: Hybrid.Json.JsonExtensions
- uid: Hybrid.Mapping.MapperExtensions.MapTo``1(System.Object)
  commentId: M:Hybrid.Mapping.MapperExtensions.MapTo``1(System.Object)
  isExternal: true
  name: MapTo<TTarget>(Object)
  nameWithType: MapperExtensions.MapTo<TTarget>(Object)
  fullName: Hybrid.Mapping.MapperExtensions.MapTo<TTarget>(System.Object)
  nameWithType.vb: MapperExtensions.MapTo(Of TTarget)(Object)
  fullName.vb: Hybrid.Mapping.MapperExtensions.MapTo(Of TTarget)(System.Object)
  name.vb: MapTo(Of TTarget)(Object)
  spec.csharp:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``1(System.Object)
    name: MapTo<TTarget>
    nameWithType: MapperExtensions.MapTo<TTarget>
    fullName: Hybrid.Mapping.MapperExtensions.MapTo<TTarget>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``1(System.Object)
    name: MapTo(Of TTarget)
    nameWithType: MapperExtensions.MapTo(Of TTarget)
    fullName: Hybrid.Mapping.MapperExtensions.MapTo(Of TTarget)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Mapping.MapperExtensions
  commentId: T:Hybrid.Mapping.MapperExtensions
  parent: Hybrid.Mapping
  name: MapperExtensions
  nameWithType: MapperExtensions
  fullName: Hybrid.Mapping.MapperExtensions
- uid: Hybrid.Mapping.MapperExtensions.MapTo``2(``0,``1)
  commentId: M:Hybrid.Mapping.MapperExtensions.MapTo``2(``0,``1)
  name: MapTo<TSource, TTarget>(TSource, TTarget)
  nameWithType: MapperExtensions.MapTo<TSource, TTarget>(TSource, TTarget)
  fullName: Hybrid.Mapping.MapperExtensions.MapTo<TSource, TTarget>(TSource, TTarget)
  nameWithType.vb: MapperExtensions.MapTo(Of TSource, TTarget)(TSource, TTarget)
  fullName.vb: Hybrid.Mapping.MapperExtensions.MapTo(Of TSource, TTarget)(TSource, TTarget)
  name.vb: MapTo(Of TSource, TTarget)(TSource, TTarget)
  spec.csharp:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``2(``0,``1)
    name: MapTo<TSource, TTarget>
    nameWithType: MapperExtensions.MapTo<TSource, TTarget>
    fullName: Hybrid.Mapping.MapperExtensions.MapTo<TSource, TTarget>
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``2(``0,``1)
    name: MapTo(Of TSource, TTarget)
    nameWithType: MapperExtensions.MapTo(Of TSource, TTarget)
    fullName: Hybrid.Mapping.MapperExtensions.MapTo(Of TSource, TTarget)
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Reflection.LockExtensions.Locking(System.Object,System.Action)
  commentId: M:Hybrid.Reflection.LockExtensions.Locking(System.Object,System.Action)
  isExternal: true
  name: Locking(Object, Action)
  nameWithType: LockExtensions.Locking(Object, Action)
  fullName: Hybrid.Reflection.LockExtensions.Locking(System.Object, System.Action)
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking(System.Object,System.Action)
    name: Locking
    nameWithType: LockExtensions.Locking
    fullName: Hybrid.Reflection.LockExtensions.Locking
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking(System.Object,System.Action)
    name: Locking
    nameWithType: LockExtensions.Locking
    fullName: Hybrid.Reflection.LockExtensions.Locking
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Reflection.LockExtensions
  commentId: T:Hybrid.Reflection.LockExtensions
  parent: Hybrid.Reflection
  name: LockExtensions
  nameWithType: LockExtensions
  fullName: Hybrid.Reflection.LockExtensions
- uid: Hybrid.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
  commentId: M:Hybrid.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
  isExternal: true
  name: Locking<T>(T, Action<T>)
  nameWithType: LockExtensions.Locking<T>(T, Action<T>)
  fullName: Hybrid.Reflection.LockExtensions.Locking<T>(T, System.Action<T>)
  nameWithType.vb: LockExtensions.Locking(Of T)(T, Action(Of T))
  fullName.vb: Hybrid.Reflection.LockExtensions.Locking(Of T)(T, System.Action(Of T))
  name.vb: Locking(Of T)(T, Action(Of T))
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
    name: Locking<T>
    nameWithType: LockExtensions.Locking<T>
    fullName: Hybrid.Reflection.LockExtensions.Locking<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
    name: Locking(Of T)
    nameWithType: LockExtensions.Locking(Of T)
    fullName: Hybrid.Reflection.LockExtensions.Locking(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
  commentId: M:Hybrid.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
  isExternal: true
  name: Locking<TResult>(Object, Func<TResult>)
  nameWithType: LockExtensions.Locking<TResult>(Object, Func<TResult>)
  fullName: Hybrid.Reflection.LockExtensions.Locking<TResult>(System.Object, System.Func<TResult>)
  nameWithType.vb: LockExtensions.Locking(Of TResult)(Object, Func(Of TResult))
  fullName.vb: Hybrid.Reflection.LockExtensions.Locking(Of TResult)(System.Object, System.Func(Of TResult))
  name.vb: Locking(Of TResult)(Object, Func(Of TResult))
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
    name: Locking<TResult>
    nameWithType: LockExtensions.Locking<TResult>
    fullName: Hybrid.Reflection.LockExtensions.Locking<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
    name: Locking(Of TResult)
    nameWithType: LockExtensions.Locking(Of TResult)
    fullName: Hybrid.Reflection.LockExtensions.Locking(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
  commentId: M:Hybrid.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
  isExternal: true
  name: Locking<TSource, TResult>(TSource, Func<TSource, TResult>)
  nameWithType: LockExtensions.Locking<TSource, TResult>(TSource, Func<TSource, TResult>)
  fullName: Hybrid.Reflection.LockExtensions.Locking<TSource, TResult>(TSource, System.Func<TSource, TResult>)
  nameWithType.vb: LockExtensions.Locking(Of TSource, TResult)(TSource, Func(Of TSource, TResult))
  fullName.vb: Hybrid.Reflection.LockExtensions.Locking(Of TSource, TResult)(TSource, System.Func(Of TSource, TResult))
  name.vb: Locking(Of TSource, TResult)(TSource, Func(Of TSource, TResult))
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
    name: Locking<TSource, TResult>
    nameWithType: LockExtensions.Locking<TSource, TResult>
    fullName: Hybrid.Reflection.LockExtensions.Locking<TSource, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
    name: Locking(Of TSource, TResult)
    nameWithType: LockExtensions.Locking(Of TSource, TResult)
    fullName: Hybrid.Reflection.LockExtensions.Locking(Of TSource, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2(``0)
  commentId: M:Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2(``0)
  name: CheckICreatedTime<TEntity, TKey>(TEntity)
  nameWithType: EntityExtensions.CheckICreatedTime<TEntity, TKey>(TEntity)
  fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime<TEntity, TKey>(TEntity)
  nameWithType.vb: EntityExtensions.CheckICreatedTime(Of TEntity, TKey)(TEntity)
  fullName.vb: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime(Of TEntity, TKey)(TEntity)
  name.vb: CheckICreatedTime(Of TEntity, TKey)(TEntity)
  spec.csharp:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2(``0)
    name: CheckICreatedTime<TEntity, TKey>
    nameWithType: EntityExtensions.CheckICreatedTime<TEntity, TKey>
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime<TEntity, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2(``0)
    name: CheckICreatedTime(Of TEntity, TKey)
    nameWithType: EntityExtensions.CheckICreatedTime(Of TEntity, TKey)
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime(Of TEntity, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Domain.Entities.EntityExtensions
  commentId: T:Hybrid.Domain.Entities.EntityExtensions
  parent: Hybrid.Domain.Entities
  name: EntityExtensions
  nameWithType: EntityExtensions
  fullName: Hybrid.Domain.Entities.EntityExtensions
- uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
  commentId: M:Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
  isExternal: true
  name: CheckICreationAudited<TEntity, TKey, TUserKey>(TEntity, IPrincipal)
  nameWithType: EntityExtensions.CheckICreationAudited<TEntity, TKey, TUserKey>(TEntity, IPrincipal)
  fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited<TEntity, TKey, TUserKey>(TEntity, System.Security.Principal.IPrincipal)
  nameWithType.vb: EntityExtensions.CheckICreationAudited(Of TEntity, TKey, TUserKey)(TEntity, IPrincipal)
  fullName.vb: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited(Of TEntity, TKey, TUserKey)(TEntity, System.Security.Principal.IPrincipal)
  name.vb: CheckICreationAudited(Of TEntity, TKey, TUserKey)(TEntity, IPrincipal)
  spec.csharp:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
    name: CheckICreationAudited<TEntity, TKey, TUserKey>
    nameWithType: EntityExtensions.CheckICreationAudited<TEntity, TKey, TUserKey>
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited<TEntity, TKey, TUserKey>
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
    name: CheckICreationAudited(Of TEntity, TKey, TUserKey)
    nameWithType: EntityExtensions.CheckICreationAudited(Of TEntity, TKey, TUserKey)
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited(Of TEntity, TKey, TUserKey)
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
  commentId: M:Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
  isExternal: true
  name: CheckIUpdateAudited<TEntity, TKey, TUserKey>(TEntity, IPrincipal)
  nameWithType: EntityExtensions.CheckIUpdateAudited<TEntity, TKey, TUserKey>(TEntity, IPrincipal)
  fullName: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited<TEntity, TKey, TUserKey>(TEntity, System.Security.Principal.IPrincipal)
  nameWithType.vb: EntityExtensions.CheckIUpdateAudited(Of TEntity, TKey, TUserKey)(TEntity, IPrincipal)
  fullName.vb: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited(Of TEntity, TKey, TUserKey)(TEntity, System.Security.Principal.IPrincipal)
  name.vb: CheckIUpdateAudited(Of TEntity, TKey, TUserKey)(TEntity, IPrincipal)
  spec.csharp:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
    name: CheckIUpdateAudited<TEntity, TKey, TUserKey>
    nameWithType: EntityExtensions.CheckIUpdateAudited<TEntity, TKey, TUserKey>
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited<TEntity, TKey, TUserKey>
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
    name: CheckIUpdateAudited(Of TEntity, TKey, TUserKey)
    nameWithType: EntityExtensions.CheckIUpdateAudited(Of TEntity, TKey, TUserKey)
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited(Of TEntity, TKey, TUserKey)
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions
  commentId: N:Hybrid.Extensions
  name: Hybrid.Extensions
  nameWithType: Hybrid.Extensions
  fullName: Hybrid.Extensions
- uid: Hybrid.Json
  commentId: N:Hybrid.Json
  name: Hybrid.Json
  nameWithType: Hybrid.Json
  fullName: Hybrid.Json
- uid: Hybrid.Mapping
  commentId: N:Hybrid.Mapping
  name: Hybrid.Mapping
  nameWithType: Hybrid.Mapping
  fullName: Hybrid.Mapping
- uid: Hybrid.Reflection
  commentId: N:Hybrid.Reflection
  name: Hybrid.Reflection
  nameWithType: Hybrid.Reflection
  fullName: Hybrid.Reflection
- uid: Hybrid.Domain.Entities
  commentId: N:Hybrid.Domain.Entities
  name: Hybrid.Domain.Entities
  nameWithType: Hybrid.Domain.Entities
  fullName: Hybrid.Domain.Entities
- uid: Hybrid.Core.Modules.HybridModule.Level
  commentId: P:Hybrid.Core.Modules.HybridModule.Level
  parent: Hybrid.Core.Modules.HybridModule
  name: Level
  nameWithType: HybridModule.Level
  fullName: Hybrid.Core.Modules.HybridModule.Level
- uid: Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase.Level*
  commentId: Overload:Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase.Level
  name: Level
  nameWithType: HealthChecksModuleBase.Level
  fullName: Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase.Level
- uid: Hybrid.Core.Modules.ModuleLevel
  commentId: T:Hybrid.Core.Modules.ModuleLevel
  parent: Hybrid.Core.Modules
  name: ModuleLevel
  nameWithType: ModuleLevel
  fullName: Hybrid.Core.Modules.ModuleLevel
- uid: Hybrid.Core.Modules.HybridModule.Order
  commentId: P:Hybrid.Core.Modules.HybridModule.Order
  parent: Hybrid.Core.Modules.HybridModule
  name: Order
  nameWithType: HybridModule.Order
  fullName: Hybrid.Core.Modules.HybridModule.Order
- uid: Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase.Order*
  commentId: Overload:Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase.Order
  name: Order
  nameWithType: HealthChecksModuleBase.Order
  fullName: Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase.Order
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Hybrid.Core.Modules.HybridModule.AddServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  commentId: M:Hybrid.Core.Modules.HybridModule.AddServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  parent: Hybrid.Core.Modules.HybridModule
  isExternal: true
  name: AddServices(IServiceCollection)
  nameWithType: HybridModule.AddServices(IServiceCollection)
  fullName: Hybrid.Core.Modules.HybridModule.AddServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  spec.csharp:
  - uid: Hybrid.Core.Modules.HybridModule.AddServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)
    name: AddServices
    nameWithType: HybridModule.AddServices
    fullName: Hybrid.Core.Modules.HybridModule.AddServices
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Extensions.DependencyInjection.IServiceCollection
    name: IServiceCollection
    nameWithType: IServiceCollection
    fullName: Microsoft.Extensions.DependencyInjection.IServiceCollection
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Core.Modules.HybridModule.AddServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)
    name: AddServices
    nameWithType: HybridModule.AddServices
    fullName: Hybrid.Core.Modules.HybridModule.AddServices
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Extensions.DependencyInjection.IServiceCollection
    name: IServiceCollection
    nameWithType: IServiceCollection
    fullName: Microsoft.Extensions.DependencyInjection.IServiceCollection
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase.AddServices*
  commentId: Overload:Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase.AddServices
  name: AddServices
  nameWithType: HealthChecksModuleBase.AddServices
  fullName: Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase.AddServices
- uid: Microsoft.Extensions.DependencyInjection.IServiceCollection
  commentId: T:Microsoft.Extensions.DependencyInjection.IServiceCollection
  parent: Microsoft.Extensions.DependencyInjection
  isExternal: true
  name: IServiceCollection
  nameWithType: IServiceCollection
  fullName: Microsoft.Extensions.DependencyInjection.IServiceCollection
- uid: Microsoft.Extensions.DependencyInjection
  commentId: N:Microsoft.Extensions.DependencyInjection
  name: Microsoft.Extensions.DependencyInjection
  nameWithType: Microsoft.Extensions.DependencyInjection
  fullName: Microsoft.Extensions.DependencyInjection
- uid: Hybrid.AspNetCore.AspHybridModule.UseModule(Microsoft.AspNetCore.Builder.IApplicationBuilder)
  commentId: M:Hybrid.AspNetCore.AspHybridModule.UseModule(Microsoft.AspNetCore.Builder.IApplicationBuilder)
  parent: Hybrid.AspNetCore.AspHybridModule
  isExternal: true
  name: UseModule(IApplicationBuilder)
  nameWithType: AspHybridModule.UseModule(IApplicationBuilder)
  fullName: Hybrid.AspNetCore.AspHybridModule.UseModule(Microsoft.AspNetCore.Builder.IApplicationBuilder)
  spec.csharp:
  - uid: Hybrid.AspNetCore.AspHybridModule.UseModule(Microsoft.AspNetCore.Builder.IApplicationBuilder)
    name: UseModule
    nameWithType: AspHybridModule.UseModule
    fullName: Hybrid.AspNetCore.AspHybridModule.UseModule
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Builder.IApplicationBuilder
    name: IApplicationBuilder
    nameWithType: IApplicationBuilder
    fullName: Microsoft.AspNetCore.Builder.IApplicationBuilder
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.AspNetCore.AspHybridModule.UseModule(Microsoft.AspNetCore.Builder.IApplicationBuilder)
    name: UseModule
    nameWithType: AspHybridModule.UseModule
    fullName: Hybrid.AspNetCore.AspHybridModule.UseModule
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Builder.IApplicationBuilder
    name: IApplicationBuilder
    nameWithType: IApplicationBuilder
    fullName: Microsoft.AspNetCore.Builder.IApplicationBuilder
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase.UseModule*
  commentId: Overload:Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase.UseModule
  name: UseModule
  nameWithType: HealthChecksModuleBase.UseModule
  fullName: Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase.UseModule
- uid: Microsoft.AspNetCore.Builder.IApplicationBuilder
  commentId: T:Microsoft.AspNetCore.Builder.IApplicationBuilder
  parent: Microsoft.AspNetCore.Builder
  isExternal: true
  name: IApplicationBuilder
  nameWithType: IApplicationBuilder
  fullName: Microsoft.AspNetCore.Builder.IApplicationBuilder
- uid: Microsoft.AspNetCore.Builder
  commentId: N:Microsoft.AspNetCore.Builder
  name: Microsoft.AspNetCore.Builder
  nameWithType: Microsoft.AspNetCore.Builder
  fullName: Microsoft.AspNetCore.Builder
- uid: Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase.BuildHealthChecks*
  commentId: Overload:Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase.BuildHealthChecks
  name: BuildHealthChecks
  nameWithType: HealthChecksModuleBase.BuildHealthChecks
  fullName: Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase.BuildHealthChecks
- uid: Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder
  commentId: T:Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder
  parent: Microsoft.Extensions.DependencyInjection
  isExternal: true
  name: IHealthChecksBuilder
  nameWithType: IHealthChecksBuilder
  fullName: Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder
- uid: Microsoft.Extensions.Configuration.IConfiguration
  commentId: T:Microsoft.Extensions.Configuration.IConfiguration
  parent: Microsoft.Extensions.Configuration
  isExternal: true
  name: IConfiguration
  nameWithType: IConfiguration
  fullName: Microsoft.Extensions.Configuration.IConfiguration
- uid: Microsoft.Extensions.Configuration
  commentId: N:Microsoft.Extensions.Configuration
  isExternal: true
  name: Microsoft.Extensions.Configuration
  nameWithType: Microsoft.Extensions.Configuration
  fullName: Microsoft.Extensions.Configuration
- uid: Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase.GetHealthCheckOptions*
  commentId: Overload:Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase.GetHealthCheckOptions
  name: GetHealthCheckOptions
  nameWithType: HealthChecksModuleBase.GetHealthCheckOptions
  fullName: Hybrid.AspNetCore.Diagnostics.HealthChecksModuleBase.GetHealthCheckOptions
- uid: System.IServiceProvider
  commentId: T:System.IServiceProvider
  parent: System
  isExternal: true
  name: IServiceProvider
  nameWithType: IServiceProvider
  fullName: System.IServiceProvider
- uid: Microsoft.AspNetCore.Diagnostics.HealthChecks.HealthCheckOptions
  commentId: T:Microsoft.AspNetCore.Diagnostics.HealthChecks.HealthCheckOptions
  parent: Microsoft.AspNetCore.Diagnostics.HealthChecks
  isExternal: true
  name: HealthCheckOptions
  nameWithType: HealthCheckOptions
  fullName: Microsoft.AspNetCore.Diagnostics.HealthChecks.HealthCheckOptions
- uid: Microsoft.AspNetCore.Diagnostics.HealthChecks
  commentId: N:Microsoft.AspNetCore.Diagnostics.HealthChecks
  isExternal: true
  name: Microsoft.AspNetCore.Diagnostics.HealthChecks
  nameWithType: Microsoft.AspNetCore.Diagnostics.HealthChecks
  fullName: Microsoft.AspNetCore.Diagnostics.HealthChecks
