### YamlMime:ManagedReference
items:
- uid: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore
  commentId: T:Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore
  id: InMemoryExecutionHistoryStore
  parent: Hybrid.Quartz.Plugins.History
  children:
  - Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore.CreateJobHistoryEntry(Quartz.IJobExecutionContext,System.Threading.CancellationToken)
  - Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore.FilterLast(System.String,System.Int32,System.Threading.CancellationToken)
  - Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore.FilterLastOfEveryJob(System.String,System.Int32,System.Threading.CancellationToken)
  - Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore.FilterLastOfEveryTrigger(System.String,System.Int32,System.Threading.CancellationToken)
  - Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore.GetAllCount(System.String,System.Threading.CancellationToken)
  - Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore.GetJobHistoryEntry(System.String,System.String,System.Threading.CancellationToken)
  - Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore.GetPageJobHistoryEntries(System.String,System.Int32,System.Int32,System.String,System.Threading.CancellationToken)
  - Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore.GetTotalJobsExecuted(System.String,System.Threading.CancellationToken)
  - Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore.GetTotalJobsFailed(System.String,System.Threading.CancellationToken)
  - Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore.Purge(System.String,System.Threading.CancellationToken)
  - Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore.UpdateJobHistoryEntryError(Quartz.IJobExecutionContext,Quartz.JobExecutionException,System.Threading.CancellationToken)
  - Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore.UpdateJobHistoryEntryVetoed(Quartz.IJobExecutionContext,System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: InMemoryExecutionHistoryStore
  nameWithType: InMemoryExecutionHistoryStore
  fullName: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore
  type: Class
  source:
    remote:
      path: src/Hybrid.Quartz/Plugins/History/InMemoryExecutionHistoryStore.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: InMemoryExecutionHistoryStore
    path: ../src/Hybrid.Quartz/Plugins/History/InMemoryExecutionHistoryStore.cs
    startLine: 15
  assemblies:
  - Hybrid.Quartz
  namespace: Hybrid.Quartz.Plugins.History
  syntax:
    content: >-
      [Serializable]

      public class InMemoryExecutionHistoryStore : IExecutionHistoryStore
    content.vb: >-
      <Serializable>

      Public Class InMemoryExecutionHistoryStore
          Implements IExecutionHistoryStore
  inheritance:
  - System.Object
  implements:
  - Hybrid.Quartz.Plugins.History.IExecutionHistoryStore
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - System.Object.Hybrid.Extensions.ObjectExtensions.CastTo(System.Type)
  - System.Object.Hybrid.Extensions.ObjectExtensions.CastTo``1
  - System.Object.Hybrid.Extensions.ObjectExtensions.CastTo``1({T})
  - Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore.Hybrid.Extensions.ObjectExtensions.IsIn``1(Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore[])
  - System.Object.Hybrid.Extensions.ObjectExtensions.ToDynamic
  - Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore.Hybrid.Extensions.ObjectExtensions.DeepClone``1
  - Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore.Hybrid.Extensions.ParameterCheckExtensions.Required``1(System.Func{Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore,System.Boolean},System.String)
  - Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore.Hybrid.Extensions.ParameterCheckExtensions.Required``2(System.Func{Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore,System.Boolean},System.String)
  - Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore.Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(System.String)
  - Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore.Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore},System.Action{System.Exception},System.Action{Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore})
  - Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore.Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore},System.Action{System.Exception})
  - Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore.Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore,{TResult}},System.Action{System.Exception},System.Action{Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore})
  - Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore.Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore,{TResult}},System.Action{System.Exception})
  - Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore.Hybrid.Extensions.TryCatchExtensions.TryFinally``1(System.Action{Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore},System.Action{Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore})
  - System.Object.Hybrid.Json.JsonExtensions.ToJsonString(System.Boolean,System.Boolean)
  - System.Object.Hybrid.Mapping.MapperExtensions.MapTo``1
  - Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore.Hybrid.Mapping.MapperExtensions.MapTo``2({TTarget})
  - System.Object.Hybrid.Reflection.LockExtensions.Locking(System.Action)
  - Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore.Hybrid.Reflection.LockExtensions.Locking``1(System.Action{Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore})
  - System.Object.Hybrid.Reflection.LockExtensions.Locking``1(System.Func{{TResult}})
  - Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore.Hybrid.Reflection.LockExtensions.Locking``2(System.Func{Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore,{TResult}})
  - Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore.Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2
  - Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore.Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(System.Security.Principal.IPrincipal)
  - Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore.Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(System.Security.Principal.IPrincipal)
  attributes:
  - type: System.SerializableAttribute
    ctor: System.SerializableAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore.CreateJobHistoryEntry(Quartz.IJobExecutionContext,System.Threading.CancellationToken)
  commentId: M:Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore.CreateJobHistoryEntry(Quartz.IJobExecutionContext,System.Threading.CancellationToken)
  id: CreateJobHistoryEntry(Quartz.IJobExecutionContext,System.Threading.CancellationToken)
  parent: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore
  langs:
  - csharp
  - vb
  name: CreateJobHistoryEntry(IJobExecutionContext, CancellationToken)
  nameWithType: InMemoryExecutionHistoryStore.CreateJobHistoryEntry(IJobExecutionContext, CancellationToken)
  fullName: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore.CreateJobHistoryEntry(Quartz.IJobExecutionContext, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Hybrid.Quartz/Plugins/History/InMemoryExecutionHistoryStore.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: CreateJobHistoryEntry
    path: ../src/Hybrid.Quartz/Plugins/History/InMemoryExecutionHistoryStore.cs
    startLine: 37
  assemblies:
  - Hybrid.Quartz
  namespace: Hybrid.Quartz.Plugins.History
  summary: "\n创建执行任务历史记录\n"
  example: []
  syntax:
    content: public Task CreateJobHistoryEntry(IJobExecutionContext context, CancellationToken cancellationToken)
    parameters:
    - id: context
      type: Quartz.IJobExecutionContext
      description: ''
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: ''
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: Public Function CreateJobHistoryEntry(context As IJobExecutionContext, cancellationToken As CancellationToken) As Task
  overload: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore.CreateJobHistoryEntry*
  implements:
  - Hybrid.Quartz.Plugins.History.IExecutionHistoryStore.CreateJobHistoryEntry(Quartz.IJobExecutionContext,System.Threading.CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore.UpdateJobHistoryEntryError(Quartz.IJobExecutionContext,Quartz.JobExecutionException,System.Threading.CancellationToken)
  commentId: M:Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore.UpdateJobHistoryEntryError(Quartz.IJobExecutionContext,Quartz.JobExecutionException,System.Threading.CancellationToken)
  id: UpdateJobHistoryEntryError(Quartz.IJobExecutionContext,Quartz.JobExecutionException,System.Threading.CancellationToken)
  parent: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore
  langs:
  - csharp
  - vb
  name: UpdateJobHistoryEntryError(IJobExecutionContext, JobExecutionException, CancellationToken)
  nameWithType: InMemoryExecutionHistoryStore.UpdateJobHistoryEntryError(IJobExecutionContext, JobExecutionException, CancellationToken)
  fullName: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore.UpdateJobHistoryEntryError(Quartz.IJobExecutionContext, Quartz.JobExecutionException, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Hybrid.Quartz/Plugins/History/InMemoryExecutionHistoryStore.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: UpdateJobHistoryEntryError
    path: ../src/Hybrid.Quartz/Plugins/History/InMemoryExecutionHistoryStore.cs
    startLine: 60
  assemblies:
  - Hybrid.Quartz
  namespace: Hybrid.Quartz.Plugins.History
  summary: "\n\n"
  example: []
  syntax:
    content: public Task UpdateJobHistoryEntryError(IJobExecutionContext context, JobExecutionException jobException, CancellationToken cancellationToken)
    parameters:
    - id: context
      type: Quartz.IJobExecutionContext
      description: ''
    - id: jobException
      type: Quartz.JobExecutionException
      description: ''
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: ''
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: Public Function UpdateJobHistoryEntryError(context As IJobExecutionContext, jobException As JobExecutionException, cancellationToken As CancellationToken) As Task
  overload: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore.UpdateJobHistoryEntryError*
  implements:
  - Hybrid.Quartz.Plugins.History.IExecutionHistoryStore.UpdateJobHistoryEntryError(Quartz.IJobExecutionContext,Quartz.JobExecutionException,System.Threading.CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore.UpdateJobHistoryEntryVetoed(Quartz.IJobExecutionContext,System.Threading.CancellationToken)
  commentId: M:Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore.UpdateJobHistoryEntryVetoed(Quartz.IJobExecutionContext,System.Threading.CancellationToken)
  id: UpdateJobHistoryEntryVetoed(Quartz.IJobExecutionContext,System.Threading.CancellationToken)
  parent: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore
  langs:
  - csharp
  - vb
  name: UpdateJobHistoryEntryVetoed(IJobExecutionContext, CancellationToken)
  nameWithType: InMemoryExecutionHistoryStore.UpdateJobHistoryEntryVetoed(IJobExecutionContext, CancellationToken)
  fullName: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore.UpdateJobHistoryEntryVetoed(Quartz.IJobExecutionContext, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Hybrid.Quartz/Plugins/History/InMemoryExecutionHistoryStore.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: UpdateJobHistoryEntryVetoed
    path: ../src/Hybrid.Quartz/Plugins/History/InMemoryExecutionHistoryStore.cs
    startLine: 87
  assemblies:
  - Hybrid.Quartz
  namespace: Hybrid.Quartz.Plugins.History
  summary: "\n\n"
  example: []
  syntax:
    content: public Task UpdateJobHistoryEntryVetoed(IJobExecutionContext context, CancellationToken cancellationToken)
    parameters:
    - id: context
      type: Quartz.IJobExecutionContext
      description: ''
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: ''
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: Public Function UpdateJobHistoryEntryVetoed(context As IJobExecutionContext, cancellationToken As CancellationToken) As Task
  overload: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore.UpdateJobHistoryEntryVetoed*
  implements:
  - Hybrid.Quartz.Plugins.History.IExecutionHistoryStore.UpdateJobHistoryEntryVetoed(Quartz.IJobExecutionContext,System.Threading.CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore.GetAllCount(System.String,System.Threading.CancellationToken)
  commentId: M:Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore.GetAllCount(System.String,System.Threading.CancellationToken)
  id: GetAllCount(System.String,System.Threading.CancellationToken)
  parent: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore
  langs:
  - csharp
  - vb
  name: GetAllCount(String, CancellationToken)
  nameWithType: InMemoryExecutionHistoryStore.GetAllCount(String, CancellationToken)
  fullName: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore.GetAllCount(System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Hybrid.Quartz/Plugins/History/InMemoryExecutionHistoryStore.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: GetAllCount
    path: ../src/Hybrid.Quartz/Plugins/History/InMemoryExecutionHistoryStore.cs
    startLine: 97
  assemblies:
  - Hybrid.Quartz
  namespace: Hybrid.Quartz.Plugins.History
  syntax:
    content: public Task<int> GetAllCount(string schedulerName, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: schedulerName
      type: System.String
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Int32}
    content.vb: Public Function GetAllCount(schedulerName As String, cancellationToken As CancellationToken = Nothing) As Task(Of Integer)
  overload: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore.GetAllCount*
  implements:
  - Hybrid.Quartz.Plugins.History.IExecutionHistoryStore.GetAllCount(System.String,System.Threading.CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore.GetJobHistoryEntry(System.String,System.String,System.Threading.CancellationToken)
  commentId: M:Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore.GetJobHistoryEntry(System.String,System.String,System.Threading.CancellationToken)
  id: GetJobHistoryEntry(System.String,System.String,System.Threading.CancellationToken)
  parent: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore
  langs:
  - csharp
  - vb
  name: GetJobHistoryEntry(String, String, CancellationToken)
  nameWithType: InMemoryExecutionHistoryStore.GetJobHistoryEntry(String, String, CancellationToken)
  fullName: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore.GetJobHistoryEntry(System.String, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Hybrid.Quartz/Plugins/History/InMemoryExecutionHistoryStore.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: GetJobHistoryEntry
    path: ../src/Hybrid.Quartz/Plugins/History/InMemoryExecutionHistoryStore.cs
    startLine: 113
  assemblies:
  - Hybrid.Quartz
  namespace: Hybrid.Quartz.Plugins.History
  summary: "\n根据执行Id获取任务历史记录\n"
  example: []
  syntax:
    content: public Task<ExecutionHistoryEntry> GetJobHistoryEntry(string schedulerName, string fireInstanceId, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: schedulerName
      type: System.String
      description: 调度名称
    - id: fireInstanceId
      type: System.String
      description: ''
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: ''
    return:
      type: System.Threading.Tasks.Task{Hybrid.Quartz.Plugins.History.ExecutionHistoryEntry}
      description: ''
    content.vb: Public Function GetJobHistoryEntry(schedulerName As String, fireInstanceId As String, cancellationToken As CancellationToken = Nothing) As Task(Of ExecutionHistoryEntry)
  overload: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore.GetJobHistoryEntry*
  implements:
  - Hybrid.Quartz.Plugins.History.IExecutionHistoryStore.GetJobHistoryEntry(System.String,System.String,System.Threading.CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore.GetPageJobHistoryEntries(System.String,System.Int32,System.Int32,System.String,System.Threading.CancellationToken)
  commentId: M:Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore.GetPageJobHistoryEntries(System.String,System.Int32,System.Int32,System.String,System.Threading.CancellationToken)
  id: GetPageJobHistoryEntries(System.String,System.Int32,System.Int32,System.String,System.Threading.CancellationToken)
  parent: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore
  langs:
  - csharp
  - vb
  name: GetPageJobHistoryEntries(String, Int32, Int32, String, CancellationToken)
  nameWithType: InMemoryExecutionHistoryStore.GetPageJobHistoryEntries(String, Int32, Int32, String, CancellationToken)
  fullName: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore.GetPageJobHistoryEntries(System.String, System.Int32, System.Int32, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Hybrid.Quartz/Plugins/History/InMemoryExecutionHistoryStore.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: GetPageJobHistoryEntries
    path: ../src/Hybrid.Quartz/Plugins/History/InMemoryExecutionHistoryStore.cs
    startLine: 121
  assemblies:
  - Hybrid.Quartz
  namespace: Hybrid.Quartz.Plugins.History
  syntax:
    content: public Task<PagedResultDto<ExecutionHistoryEntry>> GetPageJobHistoryEntries(string schedulerName, int pageIndex, int pageSize, string orderByStr, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: schedulerName
      type: System.String
    - id: pageIndex
      type: System.Int32
    - id: pageSize
      type: System.Int32
    - id: orderByStr
      type: System.String
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{Hybrid.Application.Services.Dtos.PagedResultDto{Hybrid.Quartz.Plugins.History.ExecutionHistoryEntry}}
    content.vb: Public Function GetPageJobHistoryEntries(schedulerName As String, pageIndex As Integer, pageSize As Integer, orderByStr As String, cancellationToken As CancellationToken = Nothing) As Task(Of PagedResultDto(Of ExecutionHistoryEntry))
  overload: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore.GetPageJobHistoryEntries*
  implements:
  - Hybrid.Quartz.Plugins.History.IExecutionHistoryStore.GetPageJobHistoryEntries(System.String,System.Int32,System.Int32,System.String,System.Threading.CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore.Purge(System.String,System.Threading.CancellationToken)
  commentId: M:Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore.Purge(System.String,System.Threading.CancellationToken)
  id: Purge(System.String,System.Threading.CancellationToken)
  parent: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore
  langs:
  - csharp
  - vb
  name: Purge(String, CancellationToken)
  nameWithType: InMemoryExecutionHistoryStore.Purge(String, CancellationToken)
  fullName: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore.Purge(System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Hybrid.Quartz/Plugins/History/InMemoryExecutionHistoryStore.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: Purge
    path: ../src/Hybrid.Quartz/Plugins/History/InMemoryExecutionHistoryStore.cs
    startLine: 136
  assemblies:
  - Hybrid.Quartz
  namespace: Hybrid.Quartz.Plugins.History
  syntax:
    content: public Task Purge(string schedulerName, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: schedulerName
      type: System.String
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Function Purge(schedulerName As String, cancellationToken As CancellationToken = Nothing) As Task
  overload: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore.Purge*
  implements:
  - Hybrid.Quartz.Plugins.History.IExecutionHistoryStore.Purge(System.String,System.Threading.CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore.FilterLastOfEveryJob(System.String,System.Int32,System.Threading.CancellationToken)
  commentId: M:Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore.FilterLastOfEveryJob(System.String,System.Int32,System.Threading.CancellationToken)
  id: FilterLastOfEveryJob(System.String,System.Int32,System.Threading.CancellationToken)
  parent: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore
  langs:
  - csharp
  - vb
  name: FilterLastOfEveryJob(String, Int32, CancellationToken)
  nameWithType: InMemoryExecutionHistoryStore.FilterLastOfEveryJob(String, Int32, CancellationToken)
  fullName: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore.FilterLastOfEveryJob(System.String, System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Hybrid.Quartz/Plugins/History/InMemoryExecutionHistoryStore.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: FilterLastOfEveryJob
    path: ../src/Hybrid.Quartz/Plugins/History/InMemoryExecutionHistoryStore.cs
    startLine: 158
  assemblies:
  - Hybrid.Quartz
  namespace: Hybrid.Quartz.Plugins.History
  syntax:
    content: public Task<IEnumerable<ExecutionHistoryEntry>> FilterLastOfEveryJob(string schedulerName, int limitPerJob, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: schedulerName
      type: System.String
    - id: limitPerJob
      type: System.Int32
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Hybrid.Quartz.Plugins.History.ExecutionHistoryEntry}}
    content.vb: Public Function FilterLastOfEveryJob(schedulerName As String, limitPerJob As Integer, cancellationToken As CancellationToken = Nothing) As Task(Of IEnumerable(Of ExecutionHistoryEntry))
  overload: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore.FilterLastOfEveryJob*
  implements:
  - Hybrid.Quartz.Plugins.History.IExecutionHistoryStore.FilterLastOfEveryJob(System.String,System.Int32,System.Threading.CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore.FilterLastOfEveryTrigger(System.String,System.Int32,System.Threading.CancellationToken)
  commentId: M:Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore.FilterLastOfEveryTrigger(System.String,System.Int32,System.Threading.CancellationToken)
  id: FilterLastOfEveryTrigger(System.String,System.Int32,System.Threading.CancellationToken)
  parent: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore
  langs:
  - csharp
  - vb
  name: FilterLastOfEveryTrigger(String, Int32, CancellationToken)
  nameWithType: InMemoryExecutionHistoryStore.FilterLastOfEveryTrigger(String, Int32, CancellationToken)
  fullName: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore.FilterLastOfEveryTrigger(System.String, System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Hybrid.Quartz/Plugins/History/InMemoryExecutionHistoryStore.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: FilterLastOfEveryTrigger
    path: ../src/Hybrid.Quartz/Plugins/History/InMemoryExecutionHistoryStore.cs
    startLine: 171
  assemblies:
  - Hybrid.Quartz
  namespace: Hybrid.Quartz.Plugins.History
  syntax:
    content: public Task<IEnumerable<ExecutionHistoryEntry>> FilterLastOfEveryTrigger(string schedulerName, int limitPerTrigger, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: schedulerName
      type: System.String
    - id: limitPerTrigger
      type: System.Int32
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Hybrid.Quartz.Plugins.History.ExecutionHistoryEntry}}
    content.vb: Public Function FilterLastOfEveryTrigger(schedulerName As String, limitPerTrigger As Integer, cancellationToken As CancellationToken = Nothing) As Task(Of IEnumerable(Of ExecutionHistoryEntry))
  overload: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore.FilterLastOfEveryTrigger*
  implements:
  - Hybrid.Quartz.Plugins.History.IExecutionHistoryStore.FilterLastOfEveryTrigger(System.String,System.Int32,System.Threading.CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore.FilterLast(System.String,System.Int32,System.Threading.CancellationToken)
  commentId: M:Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore.FilterLast(System.String,System.Int32,System.Threading.CancellationToken)
  id: FilterLast(System.String,System.Int32,System.Threading.CancellationToken)
  parent: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore
  langs:
  - csharp
  - vb
  name: FilterLast(String, Int32, CancellationToken)
  nameWithType: InMemoryExecutionHistoryStore.FilterLast(String, Int32, CancellationToken)
  fullName: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore.FilterLast(System.String, System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Hybrid.Quartz/Plugins/History/InMemoryExecutionHistoryStore.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: FilterLast
    path: ../src/Hybrid.Quartz/Plugins/History/InMemoryExecutionHistoryStore.cs
    startLine: 184
  assemblies:
  - Hybrid.Quartz
  namespace: Hybrid.Quartz.Plugins.History
  syntax:
    content: public Task<IEnumerable<ExecutionHistoryEntry>> FilterLast(string schedulerName, int limit, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: schedulerName
      type: System.String
    - id: limit
      type: System.Int32
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Hybrid.Quartz.Plugins.History.ExecutionHistoryEntry}}
    content.vb: Public Function FilterLast(schedulerName As String, limit As Integer, cancellationToken As CancellationToken = Nothing) As Task(Of IEnumerable(Of ExecutionHistoryEntry))
  overload: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore.FilterLast*
  implements:
  - Hybrid.Quartz.Plugins.History.IExecutionHistoryStore.FilterLast(System.String,System.Int32,System.Threading.CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore.GetTotalJobsExecuted(System.String,System.Threading.CancellationToken)
  commentId: M:Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore.GetTotalJobsExecuted(System.String,System.Threading.CancellationToken)
  id: GetTotalJobsExecuted(System.String,System.Threading.CancellationToken)
  parent: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore
  langs:
  - csharp
  - vb
  name: GetTotalJobsExecuted(String, CancellationToken)
  nameWithType: InMemoryExecutionHistoryStore.GetTotalJobsExecuted(String, CancellationToken)
  fullName: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore.GetTotalJobsExecuted(System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Hybrid.Quartz/Plugins/History/InMemoryExecutionHistoryStore.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: GetTotalJobsExecuted
    path: ../src/Hybrid.Quartz/Plugins/History/InMemoryExecutionHistoryStore.cs
    startLine: 195
  assemblies:
  - Hybrid.Quartz
  namespace: Hybrid.Quartz.Plugins.History
  syntax:
    content: public Task<long> GetTotalJobsExecuted(string schedulerName, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: schedulerName
      type: System.String
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Int64}
    content.vb: Public Function GetTotalJobsExecuted(schedulerName As String, cancellationToken As CancellationToken = Nothing) As Task(Of Long)
  overload: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore.GetTotalJobsExecuted*
  implements:
  - Hybrid.Quartz.Plugins.History.IExecutionHistoryStore.GetTotalJobsExecuted(System.String,System.Threading.CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore.GetTotalJobsFailed(System.String,System.Threading.CancellationToken)
  commentId: M:Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore.GetTotalJobsFailed(System.String,System.Threading.CancellationToken)
  id: GetTotalJobsFailed(System.String,System.Threading.CancellationToken)
  parent: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore
  langs:
  - csharp
  - vb
  name: GetTotalJobsFailed(String, CancellationToken)
  nameWithType: InMemoryExecutionHistoryStore.GetTotalJobsFailed(String, CancellationToken)
  fullName: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore.GetTotalJobsFailed(System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Hybrid.Quartz/Plugins/History/InMemoryExecutionHistoryStore.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: GetTotalJobsFailed
    path: ../src/Hybrid.Quartz/Plugins/History/InMemoryExecutionHistoryStore.cs
    startLine: 204
  assemblies:
  - Hybrid.Quartz
  namespace: Hybrid.Quartz.Plugins.History
  syntax:
    content: public Task<long> GetTotalJobsFailed(string schedulerName, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: schedulerName
      type: System.String
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Int64}
    content.vb: Public Function GetTotalJobsFailed(schedulerName As String, cancellationToken As CancellationToken = Nothing) As Task(Of Long)
  overload: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore.GetTotalJobsFailed*
  implements:
  - Hybrid.Quartz.Plugins.History.IExecutionHistoryStore.GetTotalJobsFailed(System.String,System.Threading.CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Hybrid.Quartz.Plugins.History
  commentId: N:Hybrid.Quartz.Plugins.History
  name: Hybrid.Quartz.Plugins.History
  nameWithType: Hybrid.Quartz.Plugins.History
  fullName: Hybrid.Quartz.Plugins.History
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Hybrid.Quartz.Plugins.History.IExecutionHistoryStore
  commentId: T:Hybrid.Quartz.Plugins.History.IExecutionHistoryStore
  parent: Hybrid.Quartz.Plugins.History
  name: IExecutionHistoryStore
  nameWithType: IExecutionHistoryStore
  fullName: Hybrid.Quartz.Plugins.History.IExecutionHistoryStore
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Extensions.ObjectExtensions.CastTo(System.Type)
  commentId: M:Hybrid.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
  parent: Hybrid.Extensions.ObjectExtensions
  definition: Hybrid.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
  name: CastTo(Type)
  nameWithType: ObjectExtensions.CastTo(Type)
  fullName: Hybrid.Extensions.ObjectExtensions.CastTo(System.Type)
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo(System.Type)
    name: CastTo
    nameWithType: ObjectExtensions.CastTo
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo(System.Type)
    name: CastTo
    nameWithType: ObjectExtensions.CastTo
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Extensions.ObjectExtensions.CastTo``1
  commentId: M:Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object)
  parent: Hybrid.Extensions.ObjectExtensions
  definition: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object)
  name: CastTo<T>()
  nameWithType: ObjectExtensions.CastTo<T>()
  fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>()
  nameWithType.vb: ObjectExtensions.CastTo(Of T)()
  fullName.vb: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)()
  name.vb: CastTo(Of T)()
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1
    name: CastTo<T>
    nameWithType: ObjectExtensions.CastTo<T>
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1
    name: CastTo(Of T)
    nameWithType: ObjectExtensions.CastTo(Of T)
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Extensions.ObjectExtensions.CastTo``1({T})
  commentId: M:Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
  parent: Hybrid.Extensions.ObjectExtensions
  definition: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
  name: CastTo<T>(T)
  nameWithType: ObjectExtensions.CastTo<T>(T)
  fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>(T)
  nameWithType.vb: ObjectExtensions.CastTo(Of T)(T)
  fullName.vb: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)(T)
  name.vb: CastTo(Of T)(T)
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(``0)
    name: CastTo<T>
    nameWithType: ObjectExtensions.CastTo<T>
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(``0)
    name: CastTo(Of T)
    nameWithType: ObjectExtensions.CastTo(Of T)
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore.Hybrid.Extensions.ObjectExtensions.IsIn``1(Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore[])
  commentId: M:Hybrid.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
  parent: Hybrid.Extensions.ObjectExtensions
  definition: Hybrid.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
  name: IsIn<InMemoryExecutionHistoryStore>(InMemoryExecutionHistoryStore[])
  nameWithType: ObjectExtensions.IsIn<InMemoryExecutionHistoryStore>(InMemoryExecutionHistoryStore[])
  fullName: Hybrid.Extensions.ObjectExtensions.IsIn<Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore>(Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore[])
  nameWithType.vb: ObjectExtensions.IsIn(Of InMemoryExecutionHistoryStore)(InMemoryExecutionHistoryStore())
  fullName.vb: Hybrid.Extensions.ObjectExtensions.IsIn(Of Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore)(Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore())
  name.vb: IsIn(Of InMemoryExecutionHistoryStore)(InMemoryExecutionHistoryStore())
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.IsIn``1(``0[])
    name: IsIn<InMemoryExecutionHistoryStore>
    nameWithType: ObjectExtensions.IsIn<InMemoryExecutionHistoryStore>
    fullName: Hybrid.Extensions.ObjectExtensions.IsIn<Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore
    name: InMemoryExecutionHistoryStore
    nameWithType: InMemoryExecutionHistoryStore
    fullName: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.IsIn``1(``0[])
    name: IsIn(Of InMemoryExecutionHistoryStore)
    nameWithType: ObjectExtensions.IsIn(Of InMemoryExecutionHistoryStore)
    fullName: Hybrid.Extensions.ObjectExtensions.IsIn(Of Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore
    name: InMemoryExecutionHistoryStore
    nameWithType: InMemoryExecutionHistoryStore
    fullName: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Extensions.ObjectExtensions.ToDynamic
  commentId: M:Hybrid.Extensions.ObjectExtensions.ToDynamic(System.Object)
  parent: Hybrid.Extensions.ObjectExtensions
  definition: Hybrid.Extensions.ObjectExtensions.ToDynamic(System.Object)
  name: ToDynamic()
  nameWithType: ObjectExtensions.ToDynamic()
  fullName: Hybrid.Extensions.ObjectExtensions.ToDynamic()
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.ToDynamic
    name: ToDynamic
    nameWithType: ObjectExtensions.ToDynamic
    fullName: Hybrid.Extensions.ObjectExtensions.ToDynamic
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.ToDynamic
    name: ToDynamic
    nameWithType: ObjectExtensions.ToDynamic
    fullName: Hybrid.Extensions.ObjectExtensions.ToDynamic
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore.Hybrid.Extensions.ObjectExtensions.DeepClone``1
  commentId: M:Hybrid.Extensions.ObjectExtensions.DeepClone``1(``0)
  parent: Hybrid.Extensions.ObjectExtensions
  definition: Hybrid.Extensions.ObjectExtensions.DeepClone``1(``0)
  name: DeepClone<InMemoryExecutionHistoryStore>()
  nameWithType: ObjectExtensions.DeepClone<InMemoryExecutionHistoryStore>()
  fullName: Hybrid.Extensions.ObjectExtensions.DeepClone<Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore>()
  nameWithType.vb: ObjectExtensions.DeepClone(Of InMemoryExecutionHistoryStore)()
  fullName.vb: Hybrid.Extensions.ObjectExtensions.DeepClone(Of Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore)()
  name.vb: DeepClone(Of InMemoryExecutionHistoryStore)()
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.DeepClone``1
    name: DeepClone<InMemoryExecutionHistoryStore>
    nameWithType: ObjectExtensions.DeepClone<InMemoryExecutionHistoryStore>
    fullName: Hybrid.Extensions.ObjectExtensions.DeepClone<Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.DeepClone``1
    name: DeepClone(Of InMemoryExecutionHistoryStore)
    nameWithType: ObjectExtensions.DeepClone(Of InMemoryExecutionHistoryStore)
    fullName: Hybrid.Extensions.ObjectExtensions.DeepClone(Of Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore.Hybrid.Extensions.ParameterCheckExtensions.Required``1(System.Func{Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore,System.Boolean},System.String)
  commentId: M:Hybrid.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
  parent: Hybrid.Extensions.ParameterCheckExtensions
  definition: Hybrid.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
  name: Required<InMemoryExecutionHistoryStore>(Func<InMemoryExecutionHistoryStore, Boolean>, String)
  nameWithType: ParameterCheckExtensions.Required<InMemoryExecutionHistoryStore>(Func<InMemoryExecutionHistoryStore, Boolean>, String)
  fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore>(System.Func<Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore, System.Boolean>, System.String)
  nameWithType.vb: ParameterCheckExtensions.Required(Of InMemoryExecutionHistoryStore)(Func(Of InMemoryExecutionHistoryStore, Boolean), String)
  fullName.vb: Hybrid.Extensions.ParameterCheckExtensions.Required(Of Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore)(System.Func(Of Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore, System.Boolean), System.String)
  name.vb: Required(Of InMemoryExecutionHistoryStore)(Func(Of InMemoryExecutionHistoryStore, Boolean), String)
  spec.csharp:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``1(System.Func{``0,System.Boolean},System.String)
    name: Required<InMemoryExecutionHistoryStore>
    nameWithType: ParameterCheckExtensions.Required<InMemoryExecutionHistoryStore>
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore
    name: InMemoryExecutionHistoryStore
    nameWithType: InMemoryExecutionHistoryStore
    fullName: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``1(System.Func{``0,System.Boolean},System.String)
    name: Required(Of InMemoryExecutionHistoryStore)
    nameWithType: ParameterCheckExtensions.Required(Of InMemoryExecutionHistoryStore)
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required(Of Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore
    name: InMemoryExecutionHistoryStore
    nameWithType: InMemoryExecutionHistoryStore
    fullName: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore.Hybrid.Extensions.ParameterCheckExtensions.Required``2(System.Func{Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore,System.Boolean},System.String)
  commentId: M:Hybrid.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
  parent: Hybrid.Extensions.ParameterCheckExtensions
  definition: Hybrid.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
  name: Required<InMemoryExecutionHistoryStore, TException>(Func<InMemoryExecutionHistoryStore, Boolean>, String)
  nameWithType: ParameterCheckExtensions.Required<InMemoryExecutionHistoryStore, TException>(Func<InMemoryExecutionHistoryStore, Boolean>, String)
  fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore, TException>(System.Func<Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore, System.Boolean>, System.String)
  nameWithType.vb: ParameterCheckExtensions.Required(Of InMemoryExecutionHistoryStore, TException)(Func(Of InMemoryExecutionHistoryStore, Boolean), String)
  fullName.vb: Hybrid.Extensions.ParameterCheckExtensions.Required(Of Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore, TException)(System.Func(Of Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore, System.Boolean), System.String)
  name.vb: Required(Of InMemoryExecutionHistoryStore, TException)(Func(Of InMemoryExecutionHistoryStore, Boolean), String)
  spec.csharp:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``2(System.Func{``0,System.Boolean},System.String)
    name: Required<InMemoryExecutionHistoryStore, TException>
    nameWithType: ParameterCheckExtensions.Required<InMemoryExecutionHistoryStore, TException>
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore, TException>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore
    name: InMemoryExecutionHistoryStore
    nameWithType: InMemoryExecutionHistoryStore
    fullName: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``2(System.Func{``0,System.Boolean},System.String)
    name: Required(Of InMemoryExecutionHistoryStore, TException)
    nameWithType: ParameterCheckExtensions.Required(Of InMemoryExecutionHistoryStore, TException)
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required(Of Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore, TException)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore
    name: InMemoryExecutionHistoryStore
    nameWithType: InMemoryExecutionHistoryStore
    fullName: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore.Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(System.String)
  commentId: M:Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
  parent: Hybrid.Extensions.ParameterCheckExtensions
  definition: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
  name: CheckNotNull<InMemoryExecutionHistoryStore>(String)
  nameWithType: ParameterCheckExtensions.CheckNotNull<InMemoryExecutionHistoryStore>(String)
  fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull<Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore>(System.String)
  nameWithType.vb: ParameterCheckExtensions.CheckNotNull(Of InMemoryExecutionHistoryStore)(String)
  fullName.vb: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull(Of Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore)(System.String)
  name.vb: CheckNotNull(Of InMemoryExecutionHistoryStore)(String)
  spec.csharp:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(System.String)
    name: CheckNotNull<InMemoryExecutionHistoryStore>
    nameWithType: ParameterCheckExtensions.CheckNotNull<InMemoryExecutionHistoryStore>
    fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull<Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(System.String)
    name: CheckNotNull(Of InMemoryExecutionHistoryStore)
    nameWithType: ParameterCheckExtensions.CheckNotNull(Of InMemoryExecutionHistoryStore)
    fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull(Of Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore.Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore},System.Action{System.Exception},System.Action{Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
  parent: Hybrid.Extensions.TryCatchExtensions
  definition: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
  name: TryCatch<InMemoryExecutionHistoryStore>(Action<InMemoryExecutionHistoryStore>, Action<Exception>, Action<InMemoryExecutionHistoryStore>)
  nameWithType: TryCatchExtensions.TryCatch<InMemoryExecutionHistoryStore>(Action<InMemoryExecutionHistoryStore>, Action<Exception>, Action<InMemoryExecutionHistoryStore>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore>(System.Action<Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore>, System.Action<System.Exception>, System.Action<Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of InMemoryExecutionHistoryStore)(Action(Of InMemoryExecutionHistoryStore), Action(Of Exception), Action(Of InMemoryExecutionHistoryStore))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore)(System.Action(Of Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore), System.Action(Of System.Exception), System.Action(Of Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore))
  name.vb: TryCatch(Of InMemoryExecutionHistoryStore)(Action(Of InMemoryExecutionHistoryStore), Action(Of Exception), Action(Of InMemoryExecutionHistoryStore))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{``0},System.Action{System.Exception},System.Action{``0})
    name: TryCatch<InMemoryExecutionHistoryStore>
    nameWithType: TryCatchExtensions.TryCatch<InMemoryExecutionHistoryStore>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore
    name: InMemoryExecutionHistoryStore
    nameWithType: InMemoryExecutionHistoryStore
    fullName: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore
    name: InMemoryExecutionHistoryStore
    nameWithType: InMemoryExecutionHistoryStore
    fullName: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{``0},System.Action{System.Exception},System.Action{``0})
    name: TryCatch(Of InMemoryExecutionHistoryStore)
    nameWithType: TryCatchExtensions.TryCatch(Of InMemoryExecutionHistoryStore)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore
    name: InMemoryExecutionHistoryStore
    nameWithType: InMemoryExecutionHistoryStore
    fullName: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore
    name: InMemoryExecutionHistoryStore
    nameWithType: InMemoryExecutionHistoryStore
    fullName: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore.Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore},System.Action{System.Exception})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
  parent: Hybrid.Extensions.TryCatchExtensions
  definition: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
  name: TryCatch<InMemoryExecutionHistoryStore>(Action<InMemoryExecutionHistoryStore>, Action<Exception>)
  nameWithType: TryCatchExtensions.TryCatch<InMemoryExecutionHistoryStore>(Action<InMemoryExecutionHistoryStore>, Action<Exception>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore>(System.Action<Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore>, System.Action<System.Exception>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of InMemoryExecutionHistoryStore)(Action(Of InMemoryExecutionHistoryStore), Action(Of Exception))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore)(System.Action(Of Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore), System.Action(Of System.Exception))
  name.vb: TryCatch(Of InMemoryExecutionHistoryStore)(Action(Of InMemoryExecutionHistoryStore), Action(Of Exception))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{``0},System.Action{System.Exception})
    name: TryCatch<InMemoryExecutionHistoryStore>
    nameWithType: TryCatchExtensions.TryCatch<InMemoryExecutionHistoryStore>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore
    name: InMemoryExecutionHistoryStore
    nameWithType: InMemoryExecutionHistoryStore
    fullName: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{``0},System.Action{System.Exception})
    name: TryCatch(Of InMemoryExecutionHistoryStore)
    nameWithType: TryCatchExtensions.TryCatch(Of InMemoryExecutionHistoryStore)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore
    name: InMemoryExecutionHistoryStore
    nameWithType: InMemoryExecutionHistoryStore
    fullName: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore.Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore,{TResult}},System.Action{System.Exception},System.Action{Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
  parent: Hybrid.Extensions.TryCatchExtensions
  definition: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
  name: TryCatch<InMemoryExecutionHistoryStore, TResult>(Func<InMemoryExecutionHistoryStore, TResult>, Action<Exception>, Action<InMemoryExecutionHistoryStore>)
  nameWithType: TryCatchExtensions.TryCatch<InMemoryExecutionHistoryStore, TResult>(Func<InMemoryExecutionHistoryStore, TResult>, Action<Exception>, Action<InMemoryExecutionHistoryStore>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore, TResult>(System.Func<Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore, TResult>, System.Action<System.Exception>, System.Action<Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of InMemoryExecutionHistoryStore, TResult)(Func(Of InMemoryExecutionHistoryStore, TResult), Action(Of Exception), Action(Of InMemoryExecutionHistoryStore))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore, TResult)(System.Func(Of Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore, TResult), System.Action(Of System.Exception), System.Action(Of Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore))
  name.vb: TryCatch(Of InMemoryExecutionHistoryStore, TResult)(Func(Of InMemoryExecutionHistoryStore, TResult), Action(Of Exception), Action(Of InMemoryExecutionHistoryStore))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
    name: TryCatch<InMemoryExecutionHistoryStore, TResult>
    nameWithType: TryCatchExtensions.TryCatch<InMemoryExecutionHistoryStore, TResult>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore
    name: InMemoryExecutionHistoryStore
    nameWithType: InMemoryExecutionHistoryStore
    fullName: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore
    name: InMemoryExecutionHistoryStore
    nameWithType: InMemoryExecutionHistoryStore
    fullName: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
    name: TryCatch(Of InMemoryExecutionHistoryStore, TResult)
    nameWithType: TryCatchExtensions.TryCatch(Of InMemoryExecutionHistoryStore, TResult)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore
    name: InMemoryExecutionHistoryStore
    nameWithType: InMemoryExecutionHistoryStore
    fullName: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore
    name: InMemoryExecutionHistoryStore
    nameWithType: InMemoryExecutionHistoryStore
    fullName: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore.Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore,{TResult}},System.Action{System.Exception})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
  parent: Hybrid.Extensions.TryCatchExtensions
  definition: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
  name: TryCatch<InMemoryExecutionHistoryStore, TResult>(Func<InMemoryExecutionHistoryStore, TResult>, Action<Exception>)
  nameWithType: TryCatchExtensions.TryCatch<InMemoryExecutionHistoryStore, TResult>(Func<InMemoryExecutionHistoryStore, TResult>, Action<Exception>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore, TResult>(System.Func<Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore, TResult>, System.Action<System.Exception>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of InMemoryExecutionHistoryStore, TResult)(Func(Of InMemoryExecutionHistoryStore, TResult), Action(Of Exception))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore, TResult)(System.Func(Of Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore, TResult), System.Action(Of System.Exception))
  name.vb: TryCatch(Of InMemoryExecutionHistoryStore, TResult)(Func(Of InMemoryExecutionHistoryStore, TResult), Action(Of Exception))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{``0,``1},System.Action{System.Exception})
    name: TryCatch<InMemoryExecutionHistoryStore, TResult>
    nameWithType: TryCatchExtensions.TryCatch<InMemoryExecutionHistoryStore, TResult>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore
    name: InMemoryExecutionHistoryStore
    nameWithType: InMemoryExecutionHistoryStore
    fullName: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{``0,``1},System.Action{System.Exception})
    name: TryCatch(Of InMemoryExecutionHistoryStore, TResult)
    nameWithType: TryCatchExtensions.TryCatch(Of InMemoryExecutionHistoryStore, TResult)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore
    name: InMemoryExecutionHistoryStore
    nameWithType: InMemoryExecutionHistoryStore
    fullName: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore.Hybrid.Extensions.TryCatchExtensions.TryFinally``1(System.Action{Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore},System.Action{Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
  parent: Hybrid.Extensions.TryCatchExtensions
  definition: Hybrid.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
  name: TryFinally<InMemoryExecutionHistoryStore>(Action<InMemoryExecutionHistoryStore>, Action<InMemoryExecutionHistoryStore>)
  nameWithType: TryCatchExtensions.TryFinally<InMemoryExecutionHistoryStore>(Action<InMemoryExecutionHistoryStore>, Action<InMemoryExecutionHistoryStore>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryFinally<Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore>(System.Action<Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore>, System.Action<Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore>)
  nameWithType.vb: TryCatchExtensions.TryFinally(Of InMemoryExecutionHistoryStore)(Action(Of InMemoryExecutionHistoryStore), Action(Of InMemoryExecutionHistoryStore))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryFinally(Of Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore)(System.Action(Of Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore), System.Action(Of Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore))
  name.vb: TryFinally(Of InMemoryExecutionHistoryStore)(Action(Of InMemoryExecutionHistoryStore), Action(Of InMemoryExecutionHistoryStore))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryFinally``1(System.Action{``0},System.Action{``0})
    name: TryFinally<InMemoryExecutionHistoryStore>
    nameWithType: TryCatchExtensions.TryFinally<InMemoryExecutionHistoryStore>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryFinally<Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore
    name: InMemoryExecutionHistoryStore
    nameWithType: InMemoryExecutionHistoryStore
    fullName: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore
    name: InMemoryExecutionHistoryStore
    nameWithType: InMemoryExecutionHistoryStore
    fullName: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryFinally``1(System.Action{``0},System.Action{``0})
    name: TryFinally(Of InMemoryExecutionHistoryStore)
    nameWithType: TryCatchExtensions.TryFinally(Of InMemoryExecutionHistoryStore)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryFinally(Of Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore
    name: InMemoryExecutionHistoryStore
    nameWithType: InMemoryExecutionHistoryStore
    fullName: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore
    name: InMemoryExecutionHistoryStore
    nameWithType: InMemoryExecutionHistoryStore
    fullName: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Json.JsonExtensions.ToJsonString(System.Boolean,System.Boolean)
  commentId: M:Hybrid.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
  parent: Hybrid.Json.JsonExtensions
  definition: Hybrid.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
  name: ToJsonString(Boolean, Boolean)
  nameWithType: JsonExtensions.ToJsonString(Boolean, Boolean)
  fullName: Hybrid.Json.JsonExtensions.ToJsonString(System.Boolean, System.Boolean)
  spec.csharp:
  - uid: Hybrid.Json.JsonExtensions.ToJsonString(System.Boolean,System.Boolean)
    name: ToJsonString
    nameWithType: JsonExtensions.ToJsonString
    fullName: Hybrid.Json.JsonExtensions.ToJsonString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Json.JsonExtensions.ToJsonString(System.Boolean,System.Boolean)
    name: ToJsonString
    nameWithType: JsonExtensions.ToJsonString
    fullName: Hybrid.Json.JsonExtensions.ToJsonString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Mapping.MapperExtensions.MapTo``1
  commentId: M:Hybrid.Mapping.MapperExtensions.MapTo``1(System.Object)
  parent: Hybrid.Mapping.MapperExtensions
  definition: Hybrid.Mapping.MapperExtensions.MapTo``1(System.Object)
  name: MapTo<TTarget>()
  nameWithType: MapperExtensions.MapTo<TTarget>()
  fullName: Hybrid.Mapping.MapperExtensions.MapTo<TTarget>()
  nameWithType.vb: MapperExtensions.MapTo(Of TTarget)()
  fullName.vb: Hybrid.Mapping.MapperExtensions.MapTo(Of TTarget)()
  name.vb: MapTo(Of TTarget)()
  spec.csharp:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``1
    name: MapTo<TTarget>
    nameWithType: MapperExtensions.MapTo<TTarget>
    fullName: Hybrid.Mapping.MapperExtensions.MapTo<TTarget>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``1
    name: MapTo(Of TTarget)
    nameWithType: MapperExtensions.MapTo(Of TTarget)
    fullName: Hybrid.Mapping.MapperExtensions.MapTo(Of TTarget)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore.Hybrid.Mapping.MapperExtensions.MapTo``2({TTarget})
  commentId: M:Hybrid.Mapping.MapperExtensions.MapTo``2(``0,``1)
  parent: Hybrid.Mapping.MapperExtensions
  definition: Hybrid.Mapping.MapperExtensions.MapTo``2(``0,``1)
  name: MapTo<InMemoryExecutionHistoryStore, TTarget>(TTarget)
  nameWithType: MapperExtensions.MapTo<InMemoryExecutionHistoryStore, TTarget>(TTarget)
  fullName: Hybrid.Mapping.MapperExtensions.MapTo<Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore, TTarget>(TTarget)
  nameWithType.vb: MapperExtensions.MapTo(Of InMemoryExecutionHistoryStore, TTarget)(TTarget)
  fullName.vb: Hybrid.Mapping.MapperExtensions.MapTo(Of Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore, TTarget)(TTarget)
  name.vb: MapTo(Of InMemoryExecutionHistoryStore, TTarget)(TTarget)
  spec.csharp:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``2(``1)
    name: MapTo<InMemoryExecutionHistoryStore, TTarget>
    nameWithType: MapperExtensions.MapTo<InMemoryExecutionHistoryStore, TTarget>
    fullName: Hybrid.Mapping.MapperExtensions.MapTo<Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore, TTarget>
  - name: (
    nameWithType: (
    fullName: (
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``2(``1)
    name: MapTo(Of InMemoryExecutionHistoryStore, TTarget)
    nameWithType: MapperExtensions.MapTo(Of InMemoryExecutionHistoryStore, TTarget)
    fullName: Hybrid.Mapping.MapperExtensions.MapTo(Of Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore, TTarget)
  - name: (
    nameWithType: (
    fullName: (
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Reflection.LockExtensions.Locking(System.Action)
  commentId: M:Hybrid.Reflection.LockExtensions.Locking(System.Object,System.Action)
  parent: Hybrid.Reflection.LockExtensions
  definition: Hybrid.Reflection.LockExtensions.Locking(System.Object,System.Action)
  name: Locking(Action)
  nameWithType: LockExtensions.Locking(Action)
  fullName: Hybrid.Reflection.LockExtensions.Locking(System.Action)
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking(System.Action)
    name: Locking
    nameWithType: LockExtensions.Locking
    fullName: Hybrid.Reflection.LockExtensions.Locking
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking(System.Action)
    name: Locking
    nameWithType: LockExtensions.Locking
    fullName: Hybrid.Reflection.LockExtensions.Locking
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore.Hybrid.Reflection.LockExtensions.Locking``1(System.Action{Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore})
  commentId: M:Hybrid.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
  parent: Hybrid.Reflection.LockExtensions
  definition: Hybrid.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
  name: Locking<InMemoryExecutionHistoryStore>(Action<InMemoryExecutionHistoryStore>)
  nameWithType: LockExtensions.Locking<InMemoryExecutionHistoryStore>(Action<InMemoryExecutionHistoryStore>)
  fullName: Hybrid.Reflection.LockExtensions.Locking<Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore>(System.Action<Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore>)
  nameWithType.vb: LockExtensions.Locking(Of InMemoryExecutionHistoryStore)(Action(Of InMemoryExecutionHistoryStore))
  fullName.vb: Hybrid.Reflection.LockExtensions.Locking(Of Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore)(System.Action(Of Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore))
  name.vb: Locking(Of InMemoryExecutionHistoryStore)(Action(Of InMemoryExecutionHistoryStore))
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(System.Action{``0})
    name: Locking<InMemoryExecutionHistoryStore>
    nameWithType: LockExtensions.Locking<InMemoryExecutionHistoryStore>
    fullName: Hybrid.Reflection.LockExtensions.Locking<Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore
    name: InMemoryExecutionHistoryStore
    nameWithType: InMemoryExecutionHistoryStore
    fullName: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(System.Action{``0})
    name: Locking(Of InMemoryExecutionHistoryStore)
    nameWithType: LockExtensions.Locking(Of InMemoryExecutionHistoryStore)
    fullName: Hybrid.Reflection.LockExtensions.Locking(Of Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore
    name: InMemoryExecutionHistoryStore
    nameWithType: InMemoryExecutionHistoryStore
    fullName: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Reflection.LockExtensions.Locking``1(System.Func{{TResult}})
  commentId: M:Hybrid.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
  parent: Hybrid.Reflection.LockExtensions
  definition: Hybrid.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
  name: Locking<TResult>(Func<TResult>)
  nameWithType: LockExtensions.Locking<TResult>(Func<TResult>)
  fullName: Hybrid.Reflection.LockExtensions.Locking<TResult>(System.Func<TResult>)
  nameWithType.vb: LockExtensions.Locking(Of TResult)(Func(Of TResult))
  fullName.vb: Hybrid.Reflection.LockExtensions.Locking(Of TResult)(System.Func(Of TResult))
  name.vb: Locking(Of TResult)(Func(Of TResult))
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(System.Func{``0})
    name: Locking<TResult>
    nameWithType: LockExtensions.Locking<TResult>
    fullName: Hybrid.Reflection.LockExtensions.Locking<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(System.Func{``0})
    name: Locking(Of TResult)
    nameWithType: LockExtensions.Locking(Of TResult)
    fullName: Hybrid.Reflection.LockExtensions.Locking(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore.Hybrid.Reflection.LockExtensions.Locking``2(System.Func{Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore,{TResult}})
  commentId: M:Hybrid.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
  parent: Hybrid.Reflection.LockExtensions
  definition: Hybrid.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
  name: Locking<InMemoryExecutionHistoryStore, TResult>(Func<InMemoryExecutionHistoryStore, TResult>)
  nameWithType: LockExtensions.Locking<InMemoryExecutionHistoryStore, TResult>(Func<InMemoryExecutionHistoryStore, TResult>)
  fullName: Hybrid.Reflection.LockExtensions.Locking<Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore, TResult>(System.Func<Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore, TResult>)
  nameWithType.vb: LockExtensions.Locking(Of InMemoryExecutionHistoryStore, TResult)(Func(Of InMemoryExecutionHistoryStore, TResult))
  fullName.vb: Hybrid.Reflection.LockExtensions.Locking(Of Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore, TResult)(System.Func(Of Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore, TResult))
  name.vb: Locking(Of InMemoryExecutionHistoryStore, TResult)(Func(Of InMemoryExecutionHistoryStore, TResult))
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking``2(System.Func{``0,``1})
    name: Locking<InMemoryExecutionHistoryStore, TResult>
    nameWithType: LockExtensions.Locking<InMemoryExecutionHistoryStore, TResult>
    fullName: Hybrid.Reflection.LockExtensions.Locking<Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore
    name: InMemoryExecutionHistoryStore
    nameWithType: InMemoryExecutionHistoryStore
    fullName: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking``2(System.Func{``0,``1})
    name: Locking(Of InMemoryExecutionHistoryStore, TResult)
    nameWithType: LockExtensions.Locking(Of InMemoryExecutionHistoryStore, TResult)
    fullName: Hybrid.Reflection.LockExtensions.Locking(Of Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore
    name: InMemoryExecutionHistoryStore
    nameWithType: InMemoryExecutionHistoryStore
    fullName: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore.Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2
  commentId: M:Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2(``0)
  parent: Hybrid.Domain.Entities.EntityExtensions
  definition: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2(``0)
  name: CheckICreatedTime<InMemoryExecutionHistoryStore, TKey>()
  nameWithType: EntityExtensions.CheckICreatedTime<InMemoryExecutionHistoryStore, TKey>()
  fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime<Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore, TKey>()
  nameWithType.vb: EntityExtensions.CheckICreatedTime(Of InMemoryExecutionHistoryStore, TKey)()
  fullName.vb: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime(Of Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore, TKey)()
  name.vb: CheckICreatedTime(Of InMemoryExecutionHistoryStore, TKey)()
  spec.csharp:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2
    name: CheckICreatedTime<InMemoryExecutionHistoryStore, TKey>
    nameWithType: EntityExtensions.CheckICreatedTime<InMemoryExecutionHistoryStore, TKey>
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime<Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2
    name: CheckICreatedTime(Of InMemoryExecutionHistoryStore, TKey)
    nameWithType: EntityExtensions.CheckICreatedTime(Of InMemoryExecutionHistoryStore, TKey)
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime(Of Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore.Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(System.Security.Principal.IPrincipal)
  commentId: M:Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
  parent: Hybrid.Domain.Entities.EntityExtensions
  definition: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
  name: CheckICreationAudited<InMemoryExecutionHistoryStore, TKey, TUserKey>(IPrincipal)
  nameWithType: EntityExtensions.CheckICreationAudited<InMemoryExecutionHistoryStore, TKey, TUserKey>(IPrincipal)
  fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited<Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore, TKey, TUserKey>(System.Security.Principal.IPrincipal)
  nameWithType.vb: EntityExtensions.CheckICreationAudited(Of InMemoryExecutionHistoryStore, TKey, TUserKey)(IPrincipal)
  fullName.vb: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited(Of Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore, TKey, TUserKey)(System.Security.Principal.IPrincipal)
  name.vb: CheckICreationAudited(Of InMemoryExecutionHistoryStore, TKey, TUserKey)(IPrincipal)
  spec.csharp:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(System.Security.Principal.IPrincipal)
    name: CheckICreationAudited<InMemoryExecutionHistoryStore, TKey, TUserKey>
    nameWithType: EntityExtensions.CheckICreationAudited<InMemoryExecutionHistoryStore, TKey, TUserKey>
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited<Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore, TKey, TUserKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(System.Security.Principal.IPrincipal)
    name: CheckICreationAudited(Of InMemoryExecutionHistoryStore, TKey, TUserKey)
    nameWithType: EntityExtensions.CheckICreationAudited(Of InMemoryExecutionHistoryStore, TKey, TUserKey)
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited(Of Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore, TKey, TUserKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore.Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(System.Security.Principal.IPrincipal)
  commentId: M:Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
  parent: Hybrid.Domain.Entities.EntityExtensions
  definition: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
  name: CheckIUpdateAudited<InMemoryExecutionHistoryStore, TKey, TUserKey>(IPrincipal)
  nameWithType: EntityExtensions.CheckIUpdateAudited<InMemoryExecutionHistoryStore, TKey, TUserKey>(IPrincipal)
  fullName: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited<Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore, TKey, TUserKey>(System.Security.Principal.IPrincipal)
  nameWithType.vb: EntityExtensions.CheckIUpdateAudited(Of InMemoryExecutionHistoryStore, TKey, TUserKey)(IPrincipal)
  fullName.vb: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited(Of Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore, TKey, TUserKey)(System.Security.Principal.IPrincipal)
  name.vb: CheckIUpdateAudited(Of InMemoryExecutionHistoryStore, TKey, TUserKey)(IPrincipal)
  spec.csharp:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(System.Security.Principal.IPrincipal)
    name: CheckIUpdateAudited<InMemoryExecutionHistoryStore, TKey, TUserKey>
    nameWithType: EntityExtensions.CheckIUpdateAudited<InMemoryExecutionHistoryStore, TKey, TUserKey>
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited<Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore, TKey, TUserKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(System.Security.Principal.IPrincipal)
    name: CheckIUpdateAudited(Of InMemoryExecutionHistoryStore, TKey, TUserKey)
    nameWithType: EntityExtensions.CheckIUpdateAudited(Of InMemoryExecutionHistoryStore, TKey, TUserKey)
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited(Of Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore, TKey, TUserKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Hybrid.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
  commentId: M:Hybrid.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
  isExternal: true
  name: CastTo(Object, Type)
  nameWithType: ObjectExtensions.CastTo(Object, Type)
  fullName: Hybrid.Extensions.ObjectExtensions.CastTo(System.Object, System.Type)
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
    name: CastTo
    nameWithType: ObjectExtensions.CastTo
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
    name: CastTo
    nameWithType: ObjectExtensions.CastTo
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ObjectExtensions
  commentId: T:Hybrid.Extensions.ObjectExtensions
  parent: Hybrid.Extensions
  name: ObjectExtensions
  nameWithType: ObjectExtensions
  fullName: Hybrid.Extensions.ObjectExtensions
- uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object)
  commentId: M:Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object)
  isExternal: true
  name: CastTo<T>(Object)
  nameWithType: ObjectExtensions.CastTo<T>(Object)
  fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>(System.Object)
  nameWithType.vb: ObjectExtensions.CastTo(Of T)(Object)
  fullName.vb: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)(System.Object)
  name.vb: CastTo(Of T)(Object)
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object)
    name: CastTo<T>
    nameWithType: ObjectExtensions.CastTo<T>
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object)
    name: CastTo(Of T)
    nameWithType: ObjectExtensions.CastTo(Of T)
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
  commentId: M:Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
  isExternal: true
  name: CastTo<T>(Object, T)
  nameWithType: ObjectExtensions.CastTo<T>(Object, T)
  fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>(System.Object, T)
  nameWithType.vb: ObjectExtensions.CastTo(Of T)(Object, T)
  fullName.vb: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)(System.Object, T)
  name.vb: CastTo(Of T)(Object, T)
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
    name: CastTo<T>
    nameWithType: ObjectExtensions.CastTo<T>
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
    name: CastTo(Of T)
    nameWithType: ObjectExtensions.CastTo(Of T)
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
  commentId: M:Hybrid.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
  name: IsIn<T>(T, T[])
  nameWithType: ObjectExtensions.IsIn<T>(T, T[])
  fullName: Hybrid.Extensions.ObjectExtensions.IsIn<T>(T, T[])
  nameWithType.vb: ObjectExtensions.IsIn(Of T)(T, T())
  fullName.vb: Hybrid.Extensions.ObjectExtensions.IsIn(Of T)(T, T())
  name.vb: IsIn(Of T)(T, T())
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
    name: IsIn<T>
    nameWithType: ObjectExtensions.IsIn<T>
    fullName: Hybrid.Extensions.ObjectExtensions.IsIn<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
    name: IsIn(Of T)
    nameWithType: ObjectExtensions.IsIn(Of T)
    fullName: Hybrid.Extensions.ObjectExtensions.IsIn(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ObjectExtensions.ToDynamic(System.Object)
  commentId: M:Hybrid.Extensions.ObjectExtensions.ToDynamic(System.Object)
  isExternal: true
  name: ToDynamic(Object)
  nameWithType: ObjectExtensions.ToDynamic(Object)
  fullName: Hybrid.Extensions.ObjectExtensions.ToDynamic(System.Object)
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.ToDynamic(System.Object)
    name: ToDynamic
    nameWithType: ObjectExtensions.ToDynamic
    fullName: Hybrid.Extensions.ObjectExtensions.ToDynamic
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.ToDynamic(System.Object)
    name: ToDynamic
    nameWithType: ObjectExtensions.ToDynamic
    fullName: Hybrid.Extensions.ObjectExtensions.ToDynamic
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ObjectExtensions.DeepClone``1(``0)
  commentId: M:Hybrid.Extensions.ObjectExtensions.DeepClone``1(``0)
  name: DeepClone<T>(T)
  nameWithType: ObjectExtensions.DeepClone<T>(T)
  fullName: Hybrid.Extensions.ObjectExtensions.DeepClone<T>(T)
  nameWithType.vb: ObjectExtensions.DeepClone(Of T)(T)
  fullName.vb: Hybrid.Extensions.ObjectExtensions.DeepClone(Of T)(T)
  name.vb: DeepClone(Of T)(T)
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.DeepClone``1(``0)
    name: DeepClone<T>
    nameWithType: ObjectExtensions.DeepClone<T>
    fullName: Hybrid.Extensions.ObjectExtensions.DeepClone<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.DeepClone``1(``0)
    name: DeepClone(Of T)
    nameWithType: ObjectExtensions.DeepClone(Of T)
    fullName: Hybrid.Extensions.ObjectExtensions.DeepClone(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
  commentId: M:Hybrid.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
  isExternal: true
  name: Required<T>(T, Func<T, Boolean>, String)
  nameWithType: ParameterCheckExtensions.Required<T>(T, Func<T, Boolean>, String)
  fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<T>(T, System.Func<T, System.Boolean>, System.String)
  nameWithType.vb: ParameterCheckExtensions.Required(Of T)(T, Func(Of T, Boolean), String)
  fullName.vb: Hybrid.Extensions.ParameterCheckExtensions.Required(Of T)(T, System.Func(Of T, System.Boolean), System.String)
  name.vb: Required(Of T)(T, Func(Of T, Boolean), String)
  spec.csharp:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
    name: Required<T>
    nameWithType: ParameterCheckExtensions.Required<T>
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
    name: Required(Of T)
    nameWithType: ParameterCheckExtensions.Required(Of T)
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ParameterCheckExtensions
  commentId: T:Hybrid.Extensions.ParameterCheckExtensions
  parent: Hybrid.Extensions
  name: ParameterCheckExtensions
  nameWithType: ParameterCheckExtensions
  fullName: Hybrid.Extensions.ParameterCheckExtensions
- uid: Hybrid.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
  commentId: M:Hybrid.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
  isExternal: true
  name: Required<T, TException>(T, Func<T, Boolean>, String)
  nameWithType: ParameterCheckExtensions.Required<T, TException>(T, Func<T, Boolean>, String)
  fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<T, TException>(T, System.Func<T, System.Boolean>, System.String)
  nameWithType.vb: ParameterCheckExtensions.Required(Of T, TException)(T, Func(Of T, Boolean), String)
  fullName.vb: Hybrid.Extensions.ParameterCheckExtensions.Required(Of T, TException)(T, System.Func(Of T, System.Boolean), System.String)
  name.vb: Required(Of T, TException)(T, Func(Of T, Boolean), String)
  spec.csharp:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
    name: Required<T, TException>
    nameWithType: ParameterCheckExtensions.Required<T, TException>
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<T, TException>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
    name: Required(Of T, TException)
    nameWithType: ParameterCheckExtensions.Required(Of T, TException)
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required(Of T, TException)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
  commentId: M:Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
  isExternal: true
  name: CheckNotNull<T>(T, String)
  nameWithType: ParameterCheckExtensions.CheckNotNull<T>(T, String)
  fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull<T>(T, System.String)
  nameWithType.vb: ParameterCheckExtensions.CheckNotNull(Of T)(T, String)
  fullName.vb: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull(Of T)(T, System.String)
  name.vb: CheckNotNull(Of T)(T, String)
  spec.csharp:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
    name: CheckNotNull<T>
    nameWithType: ParameterCheckExtensions.CheckNotNull<T>
    fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
    name: CheckNotNull(Of T)
    nameWithType: ParameterCheckExtensions.CheckNotNull(Of T)
    fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
  isExternal: true
  name: TryCatch<T>(T, Action<T>, Action<Exception>, Action<T>)
  nameWithType: TryCatchExtensions.TryCatch<T>(T, Action<T>, Action<Exception>, Action<T>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T>(T, System.Action<T>, System.Action<System.Exception>, System.Action<T>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of T)(T, Action(Of T), Action(Of Exception), Action(Of T))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T)(T, System.Action(Of T), System.Action(Of System.Exception), System.Action(Of T))
  name.vb: TryCatch(Of T)(T, Action(Of T), Action(Of Exception), Action(Of T))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
    name: TryCatch<T>
    nameWithType: TryCatchExtensions.TryCatch<T>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
    name: TryCatch(Of T)
    nameWithType: TryCatchExtensions.TryCatch(Of T)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.TryCatchExtensions
  commentId: T:Hybrid.Extensions.TryCatchExtensions
  parent: Hybrid.Extensions
  name: TryCatchExtensions
  nameWithType: TryCatchExtensions
  fullName: Hybrid.Extensions.TryCatchExtensions
- uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
  isExternal: true
  name: TryCatch<T>(T, Action<T>, Action<Exception>)
  nameWithType: TryCatchExtensions.TryCatch<T>(T, Action<T>, Action<Exception>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T>(T, System.Action<T>, System.Action<System.Exception>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of T)(T, Action(Of T), Action(Of Exception))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T)(T, System.Action(Of T), System.Action(Of System.Exception))
  name.vb: TryCatch(Of T)(T, Action(Of T), Action(Of Exception))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
    name: TryCatch<T>
    nameWithType: TryCatchExtensions.TryCatch<T>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
    name: TryCatch(Of T)
    nameWithType: TryCatchExtensions.TryCatch(Of T)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
  isExternal: true
  name: TryCatch<T, TResult>(T, Func<T, TResult>, Action<Exception>, Action<T>)
  nameWithType: TryCatchExtensions.TryCatch<T, TResult>(T, Func<T, TResult>, Action<Exception>, Action<T>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T, TResult>(T, System.Func<T, TResult>, System.Action<System.Exception>, System.Action<T>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of T, TResult)(T, Func(Of T, TResult), Action(Of Exception), Action(Of T))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T, TResult)(T, System.Func(Of T, TResult), System.Action(Of System.Exception), System.Action(Of T))
  name.vb: TryCatch(Of T, TResult)(T, Func(Of T, TResult), Action(Of Exception), Action(Of T))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
    name: TryCatch<T, TResult>
    nameWithType: TryCatchExtensions.TryCatch<T, TResult>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
    name: TryCatch(Of T, TResult)
    nameWithType: TryCatchExtensions.TryCatch(Of T, TResult)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
  isExternal: true
  name: TryCatch<T, TResult>(T, Func<T, TResult>, Action<Exception>)
  nameWithType: TryCatchExtensions.TryCatch<T, TResult>(T, Func<T, TResult>, Action<Exception>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T, TResult>(T, System.Func<T, TResult>, System.Action<System.Exception>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of T, TResult)(T, Func(Of T, TResult), Action(Of Exception))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T, TResult)(T, System.Func(Of T, TResult), System.Action(Of System.Exception))
  name.vb: TryCatch(Of T, TResult)(T, Func(Of T, TResult), Action(Of Exception))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
    name: TryCatch<T, TResult>
    nameWithType: TryCatchExtensions.TryCatch<T, TResult>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
    name: TryCatch(Of T, TResult)
    nameWithType: TryCatchExtensions.TryCatch(Of T, TResult)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
  isExternal: true
  name: TryFinally<T>(T, Action<T>, Action<T>)
  nameWithType: TryCatchExtensions.TryFinally<T>(T, Action<T>, Action<T>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryFinally<T>(T, System.Action<T>, System.Action<T>)
  nameWithType.vb: TryCatchExtensions.TryFinally(Of T)(T, Action(Of T), Action(Of T))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryFinally(Of T)(T, System.Action(Of T), System.Action(Of T))
  name.vb: TryFinally(Of T)(T, Action(Of T), Action(Of T))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
    name: TryFinally<T>
    nameWithType: TryCatchExtensions.TryFinally<T>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryFinally<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
    name: TryFinally(Of T)
    nameWithType: TryCatchExtensions.TryFinally(Of T)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryFinally(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
  commentId: M:Hybrid.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
  isExternal: true
  name: ToJsonString(Object, Boolean, Boolean)
  nameWithType: JsonExtensions.ToJsonString(Object, Boolean, Boolean)
  fullName: Hybrid.Json.JsonExtensions.ToJsonString(System.Object, System.Boolean, System.Boolean)
  spec.csharp:
  - uid: Hybrid.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
    name: ToJsonString
    nameWithType: JsonExtensions.ToJsonString
    fullName: Hybrid.Json.JsonExtensions.ToJsonString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
    name: ToJsonString
    nameWithType: JsonExtensions.ToJsonString
    fullName: Hybrid.Json.JsonExtensions.ToJsonString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Json.JsonExtensions
  commentId: T:Hybrid.Json.JsonExtensions
  parent: Hybrid.Json
  name: JsonExtensions
  nameWithType: JsonExtensions
  fullName: Hybrid.Json.JsonExtensions
- uid: Hybrid.Mapping.MapperExtensions.MapTo``1(System.Object)
  commentId: M:Hybrid.Mapping.MapperExtensions.MapTo``1(System.Object)
  isExternal: true
  name: MapTo<TTarget>(Object)
  nameWithType: MapperExtensions.MapTo<TTarget>(Object)
  fullName: Hybrid.Mapping.MapperExtensions.MapTo<TTarget>(System.Object)
  nameWithType.vb: MapperExtensions.MapTo(Of TTarget)(Object)
  fullName.vb: Hybrid.Mapping.MapperExtensions.MapTo(Of TTarget)(System.Object)
  name.vb: MapTo(Of TTarget)(Object)
  spec.csharp:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``1(System.Object)
    name: MapTo<TTarget>
    nameWithType: MapperExtensions.MapTo<TTarget>
    fullName: Hybrid.Mapping.MapperExtensions.MapTo<TTarget>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``1(System.Object)
    name: MapTo(Of TTarget)
    nameWithType: MapperExtensions.MapTo(Of TTarget)
    fullName: Hybrid.Mapping.MapperExtensions.MapTo(Of TTarget)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Mapping.MapperExtensions
  commentId: T:Hybrid.Mapping.MapperExtensions
  parent: Hybrid.Mapping
  name: MapperExtensions
  nameWithType: MapperExtensions
  fullName: Hybrid.Mapping.MapperExtensions
- uid: Hybrid.Mapping.MapperExtensions.MapTo``2(``0,``1)
  commentId: M:Hybrid.Mapping.MapperExtensions.MapTo``2(``0,``1)
  name: MapTo<TSource, TTarget>(TSource, TTarget)
  nameWithType: MapperExtensions.MapTo<TSource, TTarget>(TSource, TTarget)
  fullName: Hybrid.Mapping.MapperExtensions.MapTo<TSource, TTarget>(TSource, TTarget)
  nameWithType.vb: MapperExtensions.MapTo(Of TSource, TTarget)(TSource, TTarget)
  fullName.vb: Hybrid.Mapping.MapperExtensions.MapTo(Of TSource, TTarget)(TSource, TTarget)
  name.vb: MapTo(Of TSource, TTarget)(TSource, TTarget)
  spec.csharp:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``2(``0,``1)
    name: MapTo<TSource, TTarget>
    nameWithType: MapperExtensions.MapTo<TSource, TTarget>
    fullName: Hybrid.Mapping.MapperExtensions.MapTo<TSource, TTarget>
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``2(``0,``1)
    name: MapTo(Of TSource, TTarget)
    nameWithType: MapperExtensions.MapTo(Of TSource, TTarget)
    fullName: Hybrid.Mapping.MapperExtensions.MapTo(Of TSource, TTarget)
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Reflection.LockExtensions.Locking(System.Object,System.Action)
  commentId: M:Hybrid.Reflection.LockExtensions.Locking(System.Object,System.Action)
  isExternal: true
  name: Locking(Object, Action)
  nameWithType: LockExtensions.Locking(Object, Action)
  fullName: Hybrid.Reflection.LockExtensions.Locking(System.Object, System.Action)
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking(System.Object,System.Action)
    name: Locking
    nameWithType: LockExtensions.Locking
    fullName: Hybrid.Reflection.LockExtensions.Locking
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking(System.Object,System.Action)
    name: Locking
    nameWithType: LockExtensions.Locking
    fullName: Hybrid.Reflection.LockExtensions.Locking
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Reflection.LockExtensions
  commentId: T:Hybrid.Reflection.LockExtensions
  parent: Hybrid.Reflection
  name: LockExtensions
  nameWithType: LockExtensions
  fullName: Hybrid.Reflection.LockExtensions
- uid: Hybrid.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
  commentId: M:Hybrid.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
  isExternal: true
  name: Locking<T>(T, Action<T>)
  nameWithType: LockExtensions.Locking<T>(T, Action<T>)
  fullName: Hybrid.Reflection.LockExtensions.Locking<T>(T, System.Action<T>)
  nameWithType.vb: LockExtensions.Locking(Of T)(T, Action(Of T))
  fullName.vb: Hybrid.Reflection.LockExtensions.Locking(Of T)(T, System.Action(Of T))
  name.vb: Locking(Of T)(T, Action(Of T))
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
    name: Locking<T>
    nameWithType: LockExtensions.Locking<T>
    fullName: Hybrid.Reflection.LockExtensions.Locking<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
    name: Locking(Of T)
    nameWithType: LockExtensions.Locking(Of T)
    fullName: Hybrid.Reflection.LockExtensions.Locking(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
  commentId: M:Hybrid.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
  isExternal: true
  name: Locking<TResult>(Object, Func<TResult>)
  nameWithType: LockExtensions.Locking<TResult>(Object, Func<TResult>)
  fullName: Hybrid.Reflection.LockExtensions.Locking<TResult>(System.Object, System.Func<TResult>)
  nameWithType.vb: LockExtensions.Locking(Of TResult)(Object, Func(Of TResult))
  fullName.vb: Hybrid.Reflection.LockExtensions.Locking(Of TResult)(System.Object, System.Func(Of TResult))
  name.vb: Locking(Of TResult)(Object, Func(Of TResult))
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
    name: Locking<TResult>
    nameWithType: LockExtensions.Locking<TResult>
    fullName: Hybrid.Reflection.LockExtensions.Locking<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
    name: Locking(Of TResult)
    nameWithType: LockExtensions.Locking(Of TResult)
    fullName: Hybrid.Reflection.LockExtensions.Locking(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
  commentId: M:Hybrid.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
  isExternal: true
  name: Locking<TSource, TResult>(TSource, Func<TSource, TResult>)
  nameWithType: LockExtensions.Locking<TSource, TResult>(TSource, Func<TSource, TResult>)
  fullName: Hybrid.Reflection.LockExtensions.Locking<TSource, TResult>(TSource, System.Func<TSource, TResult>)
  nameWithType.vb: LockExtensions.Locking(Of TSource, TResult)(TSource, Func(Of TSource, TResult))
  fullName.vb: Hybrid.Reflection.LockExtensions.Locking(Of TSource, TResult)(TSource, System.Func(Of TSource, TResult))
  name.vb: Locking(Of TSource, TResult)(TSource, Func(Of TSource, TResult))
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
    name: Locking<TSource, TResult>
    nameWithType: LockExtensions.Locking<TSource, TResult>
    fullName: Hybrid.Reflection.LockExtensions.Locking<TSource, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
    name: Locking(Of TSource, TResult)
    nameWithType: LockExtensions.Locking(Of TSource, TResult)
    fullName: Hybrid.Reflection.LockExtensions.Locking(Of TSource, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2(``0)
  commentId: M:Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2(``0)
  name: CheckICreatedTime<TEntity, TKey>(TEntity)
  nameWithType: EntityExtensions.CheckICreatedTime<TEntity, TKey>(TEntity)
  fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime<TEntity, TKey>(TEntity)
  nameWithType.vb: EntityExtensions.CheckICreatedTime(Of TEntity, TKey)(TEntity)
  fullName.vb: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime(Of TEntity, TKey)(TEntity)
  name.vb: CheckICreatedTime(Of TEntity, TKey)(TEntity)
  spec.csharp:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2(``0)
    name: CheckICreatedTime<TEntity, TKey>
    nameWithType: EntityExtensions.CheckICreatedTime<TEntity, TKey>
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime<TEntity, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2(``0)
    name: CheckICreatedTime(Of TEntity, TKey)
    nameWithType: EntityExtensions.CheckICreatedTime(Of TEntity, TKey)
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime(Of TEntity, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Domain.Entities.EntityExtensions
  commentId: T:Hybrid.Domain.Entities.EntityExtensions
  parent: Hybrid.Domain.Entities
  name: EntityExtensions
  nameWithType: EntityExtensions
  fullName: Hybrid.Domain.Entities.EntityExtensions
- uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
  commentId: M:Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
  isExternal: true
  name: CheckICreationAudited<TEntity, TKey, TUserKey>(TEntity, IPrincipal)
  nameWithType: EntityExtensions.CheckICreationAudited<TEntity, TKey, TUserKey>(TEntity, IPrincipal)
  fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited<TEntity, TKey, TUserKey>(TEntity, System.Security.Principal.IPrincipal)
  nameWithType.vb: EntityExtensions.CheckICreationAudited(Of TEntity, TKey, TUserKey)(TEntity, IPrincipal)
  fullName.vb: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited(Of TEntity, TKey, TUserKey)(TEntity, System.Security.Principal.IPrincipal)
  name.vb: CheckICreationAudited(Of TEntity, TKey, TUserKey)(TEntity, IPrincipal)
  spec.csharp:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
    name: CheckICreationAudited<TEntity, TKey, TUserKey>
    nameWithType: EntityExtensions.CheckICreationAudited<TEntity, TKey, TUserKey>
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited<TEntity, TKey, TUserKey>
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
    name: CheckICreationAudited(Of TEntity, TKey, TUserKey)
    nameWithType: EntityExtensions.CheckICreationAudited(Of TEntity, TKey, TUserKey)
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited(Of TEntity, TKey, TUserKey)
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
  commentId: M:Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
  isExternal: true
  name: CheckIUpdateAudited<TEntity, TKey, TUserKey>(TEntity, IPrincipal)
  nameWithType: EntityExtensions.CheckIUpdateAudited<TEntity, TKey, TUserKey>(TEntity, IPrincipal)
  fullName: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited<TEntity, TKey, TUserKey>(TEntity, System.Security.Principal.IPrincipal)
  nameWithType.vb: EntityExtensions.CheckIUpdateAudited(Of TEntity, TKey, TUserKey)(TEntity, IPrincipal)
  fullName.vb: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited(Of TEntity, TKey, TUserKey)(TEntity, System.Security.Principal.IPrincipal)
  name.vb: CheckIUpdateAudited(Of TEntity, TKey, TUserKey)(TEntity, IPrincipal)
  spec.csharp:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
    name: CheckIUpdateAudited<TEntity, TKey, TUserKey>
    nameWithType: EntityExtensions.CheckIUpdateAudited<TEntity, TKey, TUserKey>
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited<TEntity, TKey, TUserKey>
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
    name: CheckIUpdateAudited(Of TEntity, TKey, TUserKey)
    nameWithType: EntityExtensions.CheckIUpdateAudited(Of TEntity, TKey, TUserKey)
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited(Of TEntity, TKey, TUserKey)
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions
  commentId: N:Hybrid.Extensions
  name: Hybrid.Extensions
  nameWithType: Hybrid.Extensions
  fullName: Hybrid.Extensions
- uid: Hybrid.Json
  commentId: N:Hybrid.Json
  name: Hybrid.Json
  nameWithType: Hybrid.Json
  fullName: Hybrid.Json
- uid: Hybrid.Mapping
  commentId: N:Hybrid.Mapping
  name: Hybrid.Mapping
  nameWithType: Hybrid.Mapping
  fullName: Hybrid.Mapping
- uid: Hybrid.Reflection
  commentId: N:Hybrid.Reflection
  name: Hybrid.Reflection
  nameWithType: Hybrid.Reflection
  fullName: Hybrid.Reflection
- uid: Hybrid.Domain.Entities
  commentId: N:Hybrid.Domain.Entities
  name: Hybrid.Domain.Entities
  nameWithType: Hybrid.Domain.Entities
  fullName: Hybrid.Domain.Entities
- uid: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore.CreateJobHistoryEntry*
  commentId: Overload:Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore.CreateJobHistoryEntry
  name: CreateJobHistoryEntry
  nameWithType: InMemoryExecutionHistoryStore.CreateJobHistoryEntry
  fullName: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore.CreateJobHistoryEntry
- uid: Hybrid.Quartz.Plugins.History.IExecutionHistoryStore.CreateJobHistoryEntry(Quartz.IJobExecutionContext,System.Threading.CancellationToken)
  commentId: M:Hybrid.Quartz.Plugins.History.IExecutionHistoryStore.CreateJobHistoryEntry(Quartz.IJobExecutionContext,System.Threading.CancellationToken)
  parent: Hybrid.Quartz.Plugins.History.IExecutionHistoryStore
  isExternal: true
  name: CreateJobHistoryEntry(IJobExecutionContext, CancellationToken)
  nameWithType: IExecutionHistoryStore.CreateJobHistoryEntry(IJobExecutionContext, CancellationToken)
  fullName: Hybrid.Quartz.Plugins.History.IExecutionHistoryStore.CreateJobHistoryEntry(Quartz.IJobExecutionContext, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Hybrid.Quartz.Plugins.History.IExecutionHistoryStore.CreateJobHistoryEntry(Quartz.IJobExecutionContext,System.Threading.CancellationToken)
    name: CreateJobHistoryEntry
    nameWithType: IExecutionHistoryStore.CreateJobHistoryEntry
    fullName: Hybrid.Quartz.Plugins.History.IExecutionHistoryStore.CreateJobHistoryEntry
  - name: (
    nameWithType: (
    fullName: (
  - uid: Quartz.IJobExecutionContext
    name: IJobExecutionContext
    nameWithType: IJobExecutionContext
    fullName: Quartz.IJobExecutionContext
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Quartz.Plugins.History.IExecutionHistoryStore.CreateJobHistoryEntry(Quartz.IJobExecutionContext,System.Threading.CancellationToken)
    name: CreateJobHistoryEntry
    nameWithType: IExecutionHistoryStore.CreateJobHistoryEntry
    fullName: Hybrid.Quartz.Plugins.History.IExecutionHistoryStore.CreateJobHistoryEntry
  - name: (
    nameWithType: (
    fullName: (
  - uid: Quartz.IJobExecutionContext
    name: IJobExecutionContext
    nameWithType: IJobExecutionContext
    fullName: Quartz.IJobExecutionContext
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Quartz.IJobExecutionContext
  commentId: T:Quartz.IJobExecutionContext
  parent: Quartz
  isExternal: true
  name: IJobExecutionContext
  nameWithType: IJobExecutionContext
  fullName: Quartz.IJobExecutionContext
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: Quartz
  commentId: N:Quartz
  isExternal: true
  name: Quartz
  nameWithType: Quartz
  fullName: Quartz
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: true
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore.UpdateJobHistoryEntryError*
  commentId: Overload:Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore.UpdateJobHistoryEntryError
  name: UpdateJobHistoryEntryError
  nameWithType: InMemoryExecutionHistoryStore.UpdateJobHistoryEntryError
  fullName: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore.UpdateJobHistoryEntryError
- uid: Hybrid.Quartz.Plugins.History.IExecutionHistoryStore.UpdateJobHistoryEntryError(Quartz.IJobExecutionContext,Quartz.JobExecutionException,System.Threading.CancellationToken)
  commentId: M:Hybrid.Quartz.Plugins.History.IExecutionHistoryStore.UpdateJobHistoryEntryError(Quartz.IJobExecutionContext,Quartz.JobExecutionException,System.Threading.CancellationToken)
  parent: Hybrid.Quartz.Plugins.History.IExecutionHistoryStore
  isExternal: true
  name: UpdateJobHistoryEntryError(IJobExecutionContext, JobExecutionException, CancellationToken)
  nameWithType: IExecutionHistoryStore.UpdateJobHistoryEntryError(IJobExecutionContext, JobExecutionException, CancellationToken)
  fullName: Hybrid.Quartz.Plugins.History.IExecutionHistoryStore.UpdateJobHistoryEntryError(Quartz.IJobExecutionContext, Quartz.JobExecutionException, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Hybrid.Quartz.Plugins.History.IExecutionHistoryStore.UpdateJobHistoryEntryError(Quartz.IJobExecutionContext,Quartz.JobExecutionException,System.Threading.CancellationToken)
    name: UpdateJobHistoryEntryError
    nameWithType: IExecutionHistoryStore.UpdateJobHistoryEntryError
    fullName: Hybrid.Quartz.Plugins.History.IExecutionHistoryStore.UpdateJobHistoryEntryError
  - name: (
    nameWithType: (
    fullName: (
  - uid: Quartz.IJobExecutionContext
    name: IJobExecutionContext
    nameWithType: IJobExecutionContext
    fullName: Quartz.IJobExecutionContext
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Quartz.JobExecutionException
    name: JobExecutionException
    nameWithType: JobExecutionException
    fullName: Quartz.JobExecutionException
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Quartz.Plugins.History.IExecutionHistoryStore.UpdateJobHistoryEntryError(Quartz.IJobExecutionContext,Quartz.JobExecutionException,System.Threading.CancellationToken)
    name: UpdateJobHistoryEntryError
    nameWithType: IExecutionHistoryStore.UpdateJobHistoryEntryError
    fullName: Hybrid.Quartz.Plugins.History.IExecutionHistoryStore.UpdateJobHistoryEntryError
  - name: (
    nameWithType: (
    fullName: (
  - uid: Quartz.IJobExecutionContext
    name: IJobExecutionContext
    nameWithType: IJobExecutionContext
    fullName: Quartz.IJobExecutionContext
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Quartz.JobExecutionException
    name: JobExecutionException
    nameWithType: JobExecutionException
    fullName: Quartz.JobExecutionException
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Quartz.JobExecutionException
  commentId: T:Quartz.JobExecutionException
  parent: Quartz
  isExternal: true
  name: JobExecutionException
  nameWithType: JobExecutionException
  fullName: Quartz.JobExecutionException
- uid: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore.UpdateJobHistoryEntryVetoed*
  commentId: Overload:Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore.UpdateJobHistoryEntryVetoed
  name: UpdateJobHistoryEntryVetoed
  nameWithType: InMemoryExecutionHistoryStore.UpdateJobHistoryEntryVetoed
  fullName: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore.UpdateJobHistoryEntryVetoed
- uid: Hybrid.Quartz.Plugins.History.IExecutionHistoryStore.UpdateJobHistoryEntryVetoed(Quartz.IJobExecutionContext,System.Threading.CancellationToken)
  commentId: M:Hybrid.Quartz.Plugins.History.IExecutionHistoryStore.UpdateJobHistoryEntryVetoed(Quartz.IJobExecutionContext,System.Threading.CancellationToken)
  parent: Hybrid.Quartz.Plugins.History.IExecutionHistoryStore
  isExternal: true
  name: UpdateJobHistoryEntryVetoed(IJobExecutionContext, CancellationToken)
  nameWithType: IExecutionHistoryStore.UpdateJobHistoryEntryVetoed(IJobExecutionContext, CancellationToken)
  fullName: Hybrid.Quartz.Plugins.History.IExecutionHistoryStore.UpdateJobHistoryEntryVetoed(Quartz.IJobExecutionContext, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Hybrid.Quartz.Plugins.History.IExecutionHistoryStore.UpdateJobHistoryEntryVetoed(Quartz.IJobExecutionContext,System.Threading.CancellationToken)
    name: UpdateJobHistoryEntryVetoed
    nameWithType: IExecutionHistoryStore.UpdateJobHistoryEntryVetoed
    fullName: Hybrid.Quartz.Plugins.History.IExecutionHistoryStore.UpdateJobHistoryEntryVetoed
  - name: (
    nameWithType: (
    fullName: (
  - uid: Quartz.IJobExecutionContext
    name: IJobExecutionContext
    nameWithType: IJobExecutionContext
    fullName: Quartz.IJobExecutionContext
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Quartz.Plugins.History.IExecutionHistoryStore.UpdateJobHistoryEntryVetoed(Quartz.IJobExecutionContext,System.Threading.CancellationToken)
    name: UpdateJobHistoryEntryVetoed
    nameWithType: IExecutionHistoryStore.UpdateJobHistoryEntryVetoed
    fullName: Hybrid.Quartz.Plugins.History.IExecutionHistoryStore.UpdateJobHistoryEntryVetoed
  - name: (
    nameWithType: (
    fullName: (
  - uid: Quartz.IJobExecutionContext
    name: IJobExecutionContext
    nameWithType: IJobExecutionContext
    fullName: Quartz.IJobExecutionContext
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore.GetAllCount*
  commentId: Overload:Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore.GetAllCount
  name: GetAllCount
  nameWithType: InMemoryExecutionHistoryStore.GetAllCount
  fullName: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore.GetAllCount
- uid: Hybrid.Quartz.Plugins.History.IExecutionHistoryStore.GetAllCount(System.String,System.Threading.CancellationToken)
  commentId: M:Hybrid.Quartz.Plugins.History.IExecutionHistoryStore.GetAllCount(System.String,System.Threading.CancellationToken)
  parent: Hybrid.Quartz.Plugins.History.IExecutionHistoryStore
  isExternal: true
  name: GetAllCount(String, CancellationToken)
  nameWithType: IExecutionHistoryStore.GetAllCount(String, CancellationToken)
  fullName: Hybrid.Quartz.Plugins.History.IExecutionHistoryStore.GetAllCount(System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Hybrid.Quartz.Plugins.History.IExecutionHistoryStore.GetAllCount(System.String,System.Threading.CancellationToken)
    name: GetAllCount
    nameWithType: IExecutionHistoryStore.GetAllCount
    fullName: Hybrid.Quartz.Plugins.History.IExecutionHistoryStore.GetAllCount
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Quartz.Plugins.History.IExecutionHistoryStore.GetAllCount(System.String,System.Threading.CancellationToken)
    name: GetAllCount
    nameWithType: IExecutionHistoryStore.GetAllCount
    fullName: Hybrid.Quartz.Plugins.History.IExecutionHistoryStore.GetAllCount
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Threading.Tasks.Task{System.Int32}
  commentId: T:System.Threading.Tasks.Task{System.Int32}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Int32>
  nameWithType: Task<Int32>
  fullName: System.Threading.Tasks.Task<System.Int32>
  nameWithType.vb: Task(Of Int32)
  fullName.vb: System.Threading.Tasks.Task(Of System.Int32)
  name.vb: Task(Of Int32)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore.GetJobHistoryEntry*
  commentId: Overload:Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore.GetJobHistoryEntry
  name: GetJobHistoryEntry
  nameWithType: InMemoryExecutionHistoryStore.GetJobHistoryEntry
  fullName: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore.GetJobHistoryEntry
- uid: Hybrid.Quartz.Plugins.History.IExecutionHistoryStore.GetJobHistoryEntry(System.String,System.String,System.Threading.CancellationToken)
  commentId: M:Hybrid.Quartz.Plugins.History.IExecutionHistoryStore.GetJobHistoryEntry(System.String,System.String,System.Threading.CancellationToken)
  parent: Hybrid.Quartz.Plugins.History.IExecutionHistoryStore
  isExternal: true
  name: GetJobHistoryEntry(String, String, CancellationToken)
  nameWithType: IExecutionHistoryStore.GetJobHistoryEntry(String, String, CancellationToken)
  fullName: Hybrid.Quartz.Plugins.History.IExecutionHistoryStore.GetJobHistoryEntry(System.String, System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Hybrid.Quartz.Plugins.History.IExecutionHistoryStore.GetJobHistoryEntry(System.String,System.String,System.Threading.CancellationToken)
    name: GetJobHistoryEntry
    nameWithType: IExecutionHistoryStore.GetJobHistoryEntry
    fullName: Hybrid.Quartz.Plugins.History.IExecutionHistoryStore.GetJobHistoryEntry
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Quartz.Plugins.History.IExecutionHistoryStore.GetJobHistoryEntry(System.String,System.String,System.Threading.CancellationToken)
    name: GetJobHistoryEntry
    nameWithType: IExecutionHistoryStore.GetJobHistoryEntry
    fullName: Hybrid.Quartz.Plugins.History.IExecutionHistoryStore.GetJobHistoryEntry
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{Hybrid.Quartz.Plugins.History.ExecutionHistoryEntry}
  commentId: T:System.Threading.Tasks.Task{Hybrid.Quartz.Plugins.History.ExecutionHistoryEntry}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<ExecutionHistoryEntry>
  nameWithType: Task<ExecutionHistoryEntry>
  fullName: System.Threading.Tasks.Task<Hybrid.Quartz.Plugins.History.ExecutionHistoryEntry>
  nameWithType.vb: Task(Of ExecutionHistoryEntry)
  fullName.vb: System.Threading.Tasks.Task(Of Hybrid.Quartz.Plugins.History.ExecutionHistoryEntry)
  name.vb: Task(Of ExecutionHistoryEntry)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Quartz.Plugins.History.ExecutionHistoryEntry
    name: ExecutionHistoryEntry
    nameWithType: ExecutionHistoryEntry
    fullName: Hybrid.Quartz.Plugins.History.ExecutionHistoryEntry
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Quartz.Plugins.History.ExecutionHistoryEntry
    name: ExecutionHistoryEntry
    nameWithType: ExecutionHistoryEntry
    fullName: Hybrid.Quartz.Plugins.History.ExecutionHistoryEntry
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore.GetPageJobHistoryEntries*
  commentId: Overload:Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore.GetPageJobHistoryEntries
  name: GetPageJobHistoryEntries
  nameWithType: InMemoryExecutionHistoryStore.GetPageJobHistoryEntries
  fullName: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore.GetPageJobHistoryEntries
- uid: Hybrid.Quartz.Plugins.History.IExecutionHistoryStore.GetPageJobHistoryEntries(System.String,System.Int32,System.Int32,System.String,System.Threading.CancellationToken)
  commentId: M:Hybrid.Quartz.Plugins.History.IExecutionHistoryStore.GetPageJobHistoryEntries(System.String,System.Int32,System.Int32,System.String,System.Threading.CancellationToken)
  parent: Hybrid.Quartz.Plugins.History.IExecutionHistoryStore
  isExternal: true
  name: GetPageJobHistoryEntries(String, Int32, Int32, String, CancellationToken)
  nameWithType: IExecutionHistoryStore.GetPageJobHistoryEntries(String, Int32, Int32, String, CancellationToken)
  fullName: Hybrid.Quartz.Plugins.History.IExecutionHistoryStore.GetPageJobHistoryEntries(System.String, System.Int32, System.Int32, System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Hybrid.Quartz.Plugins.History.IExecutionHistoryStore.GetPageJobHistoryEntries(System.String,System.Int32,System.Int32,System.String,System.Threading.CancellationToken)
    name: GetPageJobHistoryEntries
    nameWithType: IExecutionHistoryStore.GetPageJobHistoryEntries
    fullName: Hybrid.Quartz.Plugins.History.IExecutionHistoryStore.GetPageJobHistoryEntries
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Quartz.Plugins.History.IExecutionHistoryStore.GetPageJobHistoryEntries(System.String,System.Int32,System.Int32,System.String,System.Threading.CancellationToken)
    name: GetPageJobHistoryEntries
    nameWithType: IExecutionHistoryStore.GetPageJobHistoryEntries
    fullName: Hybrid.Quartz.Plugins.History.IExecutionHistoryStore.GetPageJobHistoryEntries
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Threading.Tasks.Task{Hybrid.Application.Services.Dtos.PagedResultDto{Hybrid.Quartz.Plugins.History.ExecutionHistoryEntry}}
  commentId: T:System.Threading.Tasks.Task{Hybrid.Application.Services.Dtos.PagedResultDto{Hybrid.Quartz.Plugins.History.ExecutionHistoryEntry}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<PagedResultDto<ExecutionHistoryEntry>>
  nameWithType: Task<PagedResultDto<ExecutionHistoryEntry>>
  fullName: System.Threading.Tasks.Task<Hybrid.Application.Services.Dtos.PagedResultDto<Hybrid.Quartz.Plugins.History.ExecutionHistoryEntry>>
  nameWithType.vb: Task(Of PagedResultDto(Of ExecutionHistoryEntry))
  fullName.vb: System.Threading.Tasks.Task(Of Hybrid.Application.Services.Dtos.PagedResultDto(Of Hybrid.Quartz.Plugins.History.ExecutionHistoryEntry))
  name.vb: Task(Of PagedResultDto(Of ExecutionHistoryEntry))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Application.Services.Dtos.PagedResultDto`1
    name: PagedResultDto
    nameWithType: PagedResultDto
    fullName: Hybrid.Application.Services.Dtos.PagedResultDto
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Quartz.Plugins.History.ExecutionHistoryEntry
    name: ExecutionHistoryEntry
    nameWithType: ExecutionHistoryEntry
    fullName: Hybrid.Quartz.Plugins.History.ExecutionHistoryEntry
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Application.Services.Dtos.PagedResultDto`1
    name: PagedResultDto
    nameWithType: PagedResultDto
    fullName: Hybrid.Application.Services.Dtos.PagedResultDto
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Quartz.Plugins.History.ExecutionHistoryEntry
    name: ExecutionHistoryEntry
    nameWithType: ExecutionHistoryEntry
    fullName: Hybrid.Quartz.Plugins.History.ExecutionHistoryEntry
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore.Purge*
  commentId: Overload:Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore.Purge
  name: Purge
  nameWithType: InMemoryExecutionHistoryStore.Purge
  fullName: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore.Purge
- uid: Hybrid.Quartz.Plugins.History.IExecutionHistoryStore.Purge(System.String,System.Threading.CancellationToken)
  commentId: M:Hybrid.Quartz.Plugins.History.IExecutionHistoryStore.Purge(System.String,System.Threading.CancellationToken)
  parent: Hybrid.Quartz.Plugins.History.IExecutionHistoryStore
  isExternal: true
  name: Purge(String, CancellationToken)
  nameWithType: IExecutionHistoryStore.Purge(String, CancellationToken)
  fullName: Hybrid.Quartz.Plugins.History.IExecutionHistoryStore.Purge(System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Hybrid.Quartz.Plugins.History.IExecutionHistoryStore.Purge(System.String,System.Threading.CancellationToken)
    name: Purge
    nameWithType: IExecutionHistoryStore.Purge
    fullName: Hybrid.Quartz.Plugins.History.IExecutionHistoryStore.Purge
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Quartz.Plugins.History.IExecutionHistoryStore.Purge(System.String,System.Threading.CancellationToken)
    name: Purge
    nameWithType: IExecutionHistoryStore.Purge
    fullName: Hybrid.Quartz.Plugins.History.IExecutionHistoryStore.Purge
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore.FilterLastOfEveryJob*
  commentId: Overload:Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore.FilterLastOfEveryJob
  name: FilterLastOfEveryJob
  nameWithType: InMemoryExecutionHistoryStore.FilterLastOfEveryJob
  fullName: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore.FilterLastOfEveryJob
- uid: Hybrid.Quartz.Plugins.History.IExecutionHistoryStore.FilterLastOfEveryJob(System.String,System.Int32,System.Threading.CancellationToken)
  commentId: M:Hybrid.Quartz.Plugins.History.IExecutionHistoryStore.FilterLastOfEveryJob(System.String,System.Int32,System.Threading.CancellationToken)
  parent: Hybrid.Quartz.Plugins.History.IExecutionHistoryStore
  isExternal: true
  name: FilterLastOfEveryJob(String, Int32, CancellationToken)
  nameWithType: IExecutionHistoryStore.FilterLastOfEveryJob(String, Int32, CancellationToken)
  fullName: Hybrid.Quartz.Plugins.History.IExecutionHistoryStore.FilterLastOfEveryJob(System.String, System.Int32, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Hybrid.Quartz.Plugins.History.IExecutionHistoryStore.FilterLastOfEveryJob(System.String,System.Int32,System.Threading.CancellationToken)
    name: FilterLastOfEveryJob
    nameWithType: IExecutionHistoryStore.FilterLastOfEveryJob
    fullName: Hybrid.Quartz.Plugins.History.IExecutionHistoryStore.FilterLastOfEveryJob
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Quartz.Plugins.History.IExecutionHistoryStore.FilterLastOfEveryJob(System.String,System.Int32,System.Threading.CancellationToken)
    name: FilterLastOfEveryJob
    nameWithType: IExecutionHistoryStore.FilterLastOfEveryJob
    fullName: Hybrid.Quartz.Plugins.History.IExecutionHistoryStore.FilterLastOfEveryJob
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Hybrid.Quartz.Plugins.History.ExecutionHistoryEntry}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Hybrid.Quartz.Plugins.History.ExecutionHistoryEntry}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IEnumerable<ExecutionHistoryEntry>>
  nameWithType: Task<IEnumerable<ExecutionHistoryEntry>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Hybrid.Quartz.Plugins.History.ExecutionHistoryEntry>>
  nameWithType.vb: Task(Of IEnumerable(Of ExecutionHistoryEntry))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IEnumerable(Of Hybrid.Quartz.Plugins.History.ExecutionHistoryEntry))
  name.vb: Task(Of IEnumerable(Of ExecutionHistoryEntry))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Quartz.Plugins.History.ExecutionHistoryEntry
    name: ExecutionHistoryEntry
    nameWithType: ExecutionHistoryEntry
    fullName: Hybrid.Quartz.Plugins.History.ExecutionHistoryEntry
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Quartz.Plugins.History.ExecutionHistoryEntry
    name: ExecutionHistoryEntry
    nameWithType: ExecutionHistoryEntry
    fullName: Hybrid.Quartz.Plugins.History.ExecutionHistoryEntry
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore.FilterLastOfEveryTrigger*
  commentId: Overload:Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore.FilterLastOfEveryTrigger
  name: FilterLastOfEveryTrigger
  nameWithType: InMemoryExecutionHistoryStore.FilterLastOfEveryTrigger
  fullName: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore.FilterLastOfEveryTrigger
- uid: Hybrid.Quartz.Plugins.History.IExecutionHistoryStore.FilterLastOfEveryTrigger(System.String,System.Int32,System.Threading.CancellationToken)
  commentId: M:Hybrid.Quartz.Plugins.History.IExecutionHistoryStore.FilterLastOfEveryTrigger(System.String,System.Int32,System.Threading.CancellationToken)
  parent: Hybrid.Quartz.Plugins.History.IExecutionHistoryStore
  isExternal: true
  name: FilterLastOfEveryTrigger(String, Int32, CancellationToken)
  nameWithType: IExecutionHistoryStore.FilterLastOfEveryTrigger(String, Int32, CancellationToken)
  fullName: Hybrid.Quartz.Plugins.History.IExecutionHistoryStore.FilterLastOfEveryTrigger(System.String, System.Int32, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Hybrid.Quartz.Plugins.History.IExecutionHistoryStore.FilterLastOfEveryTrigger(System.String,System.Int32,System.Threading.CancellationToken)
    name: FilterLastOfEveryTrigger
    nameWithType: IExecutionHistoryStore.FilterLastOfEveryTrigger
    fullName: Hybrid.Quartz.Plugins.History.IExecutionHistoryStore.FilterLastOfEveryTrigger
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Quartz.Plugins.History.IExecutionHistoryStore.FilterLastOfEveryTrigger(System.String,System.Int32,System.Threading.CancellationToken)
    name: FilterLastOfEveryTrigger
    nameWithType: IExecutionHistoryStore.FilterLastOfEveryTrigger
    fullName: Hybrid.Quartz.Plugins.History.IExecutionHistoryStore.FilterLastOfEveryTrigger
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore.FilterLast*
  commentId: Overload:Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore.FilterLast
  name: FilterLast
  nameWithType: InMemoryExecutionHistoryStore.FilterLast
  fullName: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore.FilterLast
- uid: Hybrid.Quartz.Plugins.History.IExecutionHistoryStore.FilterLast(System.String,System.Int32,System.Threading.CancellationToken)
  commentId: M:Hybrid.Quartz.Plugins.History.IExecutionHistoryStore.FilterLast(System.String,System.Int32,System.Threading.CancellationToken)
  parent: Hybrid.Quartz.Plugins.History.IExecutionHistoryStore
  isExternal: true
  name: FilterLast(String, Int32, CancellationToken)
  nameWithType: IExecutionHistoryStore.FilterLast(String, Int32, CancellationToken)
  fullName: Hybrid.Quartz.Plugins.History.IExecutionHistoryStore.FilterLast(System.String, System.Int32, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Hybrid.Quartz.Plugins.History.IExecutionHistoryStore.FilterLast(System.String,System.Int32,System.Threading.CancellationToken)
    name: FilterLast
    nameWithType: IExecutionHistoryStore.FilterLast
    fullName: Hybrid.Quartz.Plugins.History.IExecutionHistoryStore.FilterLast
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Quartz.Plugins.History.IExecutionHistoryStore.FilterLast(System.String,System.Int32,System.Threading.CancellationToken)
    name: FilterLast
    nameWithType: IExecutionHistoryStore.FilterLast
    fullName: Hybrid.Quartz.Plugins.History.IExecutionHistoryStore.FilterLast
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore.GetTotalJobsExecuted*
  commentId: Overload:Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore.GetTotalJobsExecuted
  name: GetTotalJobsExecuted
  nameWithType: InMemoryExecutionHistoryStore.GetTotalJobsExecuted
  fullName: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore.GetTotalJobsExecuted
- uid: Hybrid.Quartz.Plugins.History.IExecutionHistoryStore.GetTotalJobsExecuted(System.String,System.Threading.CancellationToken)
  commentId: M:Hybrid.Quartz.Plugins.History.IExecutionHistoryStore.GetTotalJobsExecuted(System.String,System.Threading.CancellationToken)
  parent: Hybrid.Quartz.Plugins.History.IExecutionHistoryStore
  isExternal: true
  name: GetTotalJobsExecuted(String, CancellationToken)
  nameWithType: IExecutionHistoryStore.GetTotalJobsExecuted(String, CancellationToken)
  fullName: Hybrid.Quartz.Plugins.History.IExecutionHistoryStore.GetTotalJobsExecuted(System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Hybrid.Quartz.Plugins.History.IExecutionHistoryStore.GetTotalJobsExecuted(System.String,System.Threading.CancellationToken)
    name: GetTotalJobsExecuted
    nameWithType: IExecutionHistoryStore.GetTotalJobsExecuted
    fullName: Hybrid.Quartz.Plugins.History.IExecutionHistoryStore.GetTotalJobsExecuted
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Quartz.Plugins.History.IExecutionHistoryStore.GetTotalJobsExecuted(System.String,System.Threading.CancellationToken)
    name: GetTotalJobsExecuted
    nameWithType: IExecutionHistoryStore.GetTotalJobsExecuted
    fullName: Hybrid.Quartz.Plugins.History.IExecutionHistoryStore.GetTotalJobsExecuted
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.Int64}
  commentId: T:System.Threading.Tasks.Task{System.Int64}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Int64>
  nameWithType: Task<Int64>
  fullName: System.Threading.Tasks.Task<System.Int64>
  nameWithType.vb: Task(Of Int64)
  fullName.vb: System.Threading.Tasks.Task(Of System.Int64)
  name.vb: Task(Of Int64)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore.GetTotalJobsFailed*
  commentId: Overload:Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore.GetTotalJobsFailed
  name: GetTotalJobsFailed
  nameWithType: InMemoryExecutionHistoryStore.GetTotalJobsFailed
  fullName: Hybrid.Quartz.Plugins.History.InMemoryExecutionHistoryStore.GetTotalJobsFailed
- uid: Hybrid.Quartz.Plugins.History.IExecutionHistoryStore.GetTotalJobsFailed(System.String,System.Threading.CancellationToken)
  commentId: M:Hybrid.Quartz.Plugins.History.IExecutionHistoryStore.GetTotalJobsFailed(System.String,System.Threading.CancellationToken)
  parent: Hybrid.Quartz.Plugins.History.IExecutionHistoryStore
  isExternal: true
  name: GetTotalJobsFailed(String, CancellationToken)
  nameWithType: IExecutionHistoryStore.GetTotalJobsFailed(String, CancellationToken)
  fullName: Hybrid.Quartz.Plugins.History.IExecutionHistoryStore.GetTotalJobsFailed(System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Hybrid.Quartz.Plugins.History.IExecutionHistoryStore.GetTotalJobsFailed(System.String,System.Threading.CancellationToken)
    name: GetTotalJobsFailed
    nameWithType: IExecutionHistoryStore.GetTotalJobsFailed
    fullName: Hybrid.Quartz.Plugins.History.IExecutionHistoryStore.GetTotalJobsFailed
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Quartz.Plugins.History.IExecutionHistoryStore.GetTotalJobsFailed(System.String,System.Threading.CancellationToken)
    name: GetTotalJobsFailed
    nameWithType: IExecutionHistoryStore.GetTotalJobsFailed
    fullName: Hybrid.Quartz.Plugins.History.IExecutionHistoryStore.GetTotalJobsFailed
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
