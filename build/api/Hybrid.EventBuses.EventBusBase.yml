### YamlMime:ManagedReference
items:
- uid: Hybrid.EventBuses.EventBusBase
  commentId: T:Hybrid.EventBuses.EventBusBase
  id: EventBusBase
  parent: Hybrid.EventBuses
  children:
  - Hybrid.EventBuses.EventBusBase.#ctor(Hybrid.Dependency.IHybridServiceScopeFactory,System.IServiceProvider)
  - Hybrid.EventBuses.EventBusBase.EventStore
  - Hybrid.EventBuses.EventBusBase.InvokeHandler(Hybrid.EventBuses.IEventHandlerFactory,System.Type,Hybrid.EventBuses.IEventData,System.Boolean)
  - Hybrid.EventBuses.EventBusBase.InvokeHandlerAsync(Hybrid.EventBuses.IEventHandlerFactory,System.Type,Hybrid.EventBuses.IEventData,System.Boolean)
  - Hybrid.EventBuses.EventBusBase.Logger
  - Hybrid.EventBuses.EventBusBase.Publish(System.Type,Hybrid.EventBuses.IEventData,System.Boolean)
  - Hybrid.EventBuses.EventBusBase.Publish(System.Type,System.Object,Hybrid.EventBuses.IEventData,System.Boolean)
  - Hybrid.EventBuses.EventBusBase.Publish``1(``0,System.Boolean)
  - Hybrid.EventBuses.EventBusBase.Publish``1(System.Object,``0,System.Boolean)
  - Hybrid.EventBuses.EventBusBase.PublishAsync(System.Type,Hybrid.EventBuses.IEventData,System.Boolean)
  - Hybrid.EventBuses.EventBusBase.PublishAsync(System.Type,System.Object,Hybrid.EventBuses.IEventData,System.Boolean)
  - Hybrid.EventBuses.EventBusBase.PublishAsync``1(``0,System.Boolean)
  - Hybrid.EventBuses.EventBusBase.PublishAsync``1(System.Object,``0,System.Boolean)
  - Hybrid.EventBuses.EventBusBase.ServiceScopeFactory
  - Hybrid.EventBuses.EventBusBase.Subscribe(System.Type,Hybrid.EventBuses.IEventHandler)
  - Hybrid.EventBuses.EventBusBase.Subscribe``1(Hybrid.EventBuses.IEventHandler)
  - Hybrid.EventBuses.EventBusBase.Subscribe``1(System.Action{``0})
  - Hybrid.EventBuses.EventBusBase.Subscribe``2
  - Hybrid.EventBuses.EventBusBase.SubscribeAll(System.Type[])
  - Hybrid.EventBuses.EventBusBase.Unsubscribe(System.Type,Hybrid.EventBuses.IEventHandler)
  - Hybrid.EventBuses.EventBusBase.Unsubscribe``1(Hybrid.EventBuses.IEventHandler{``0})
  - Hybrid.EventBuses.EventBusBase.Unsubscribe``1(System.Action{``0})
  - Hybrid.EventBuses.EventBusBase.UnsubscribeAll(System.Type)
  - Hybrid.EventBuses.EventBusBase.UnsubscribeAll``1
  langs:
  - csharp
  - vb
  name: EventBusBase
  nameWithType: EventBusBase
  fullName: Hybrid.EventBuses.EventBusBase
  type: Class
  source:
    remote:
      path: src/Hybrid/EventBuses/EventBusBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: EventBusBase
    path: ../src/Hybrid/EventBuses/EventBusBase.cs
    startLine: 26
  assemblies:
  - Hybrid
  namespace: Hybrid.EventBuses
  summary: "\n事件总线基类\n"
  example: []
  syntax:
    content: 'public abstract class EventBusBase : IEventBus, IEventSubscriber, IEventPublisher'
    content.vb: >-
      Public MustInherit Class EventBusBase

          Implements IEventBus, IEventSubscriber, IEventPublisher
  inheritance:
  - System.Object
  implements:
  - Hybrid.EventBuses.IEventBus
  - Hybrid.EventBuses.IEventSubscriber
  - Hybrid.EventBuses.IEventPublisher
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - Hybrid.EventBuses.EventBusBase.OSharp.Entity.EntityExtensions.CheckICreatedTime``2
  - Hybrid.EventBuses.EventBusBase.OSharp.Entity.EntityExtensions.CheckICreationAudited``3(System.Security.Principal.IPrincipal)
  - Hybrid.EventBuses.EventBusBase.OSharp.Entity.EntityExtensions.CheckIUpdateAudited``3(System.Security.Principal.IPrincipal)
  - System.Object.OSharp.Extensions.ObjectExtensions.CastTo(System.Type)
  - System.Object.OSharp.Extensions.ObjectExtensions.CastTo``1
  - System.Object.OSharp.Extensions.ObjectExtensions.CastTo``1({T})
  - Hybrid.EventBuses.EventBusBase.OSharp.Extensions.ObjectExtensions.IsIn``1(Hybrid.EventBuses.EventBusBase[])
  - System.Object.OSharp.Extensions.ObjectExtensions.ToDynamic
  - Hybrid.EventBuses.EventBusBase.OSharp.Extensions.ObjectExtensions.DeepClone``1
  - Hybrid.EventBuses.EventBusBase.OSharp.Extensions.ParameterCheckExtensions.Required``1(System.Func{Hybrid.EventBuses.EventBusBase,System.Boolean},System.String)
  - Hybrid.EventBuses.EventBusBase.OSharp.Extensions.ParameterCheckExtensions.Required``2(System.Func{Hybrid.EventBuses.EventBusBase,System.Boolean},System.String)
  - Hybrid.EventBuses.EventBusBase.OSharp.Extensions.ParameterCheckExtensions.CheckNotNull``1(System.String)
  - Hybrid.EventBuses.EventBusBase.OSharp.Extensions.TryCatchExtensions.TryCatch``1(System.Action{Hybrid.EventBuses.EventBusBase},System.Action{System.Exception},System.Action{Hybrid.EventBuses.EventBusBase})
  - Hybrid.EventBuses.EventBusBase.OSharp.Extensions.TryCatchExtensions.TryCatch``1(System.Action{Hybrid.EventBuses.EventBusBase},System.Action{System.Exception})
  - Hybrid.EventBuses.EventBusBase.OSharp.Extensions.TryCatchExtensions.TryCatch``2(System.Func{Hybrid.EventBuses.EventBusBase,{TResult}},System.Action{System.Exception},System.Action{Hybrid.EventBuses.EventBusBase})
  - Hybrid.EventBuses.EventBusBase.OSharp.Extensions.TryCatchExtensions.TryCatch``2(System.Func{Hybrid.EventBuses.EventBusBase,{TResult}},System.Action{System.Exception})
  - Hybrid.EventBuses.EventBusBase.OSharp.Extensions.TryCatchExtensions.TryFinally``1(System.Action{Hybrid.EventBuses.EventBusBase},System.Action{Hybrid.EventBuses.EventBusBase})
  - System.Object.OSharp.Json.JsonExtensions.ToJsonString(System.Boolean,System.Boolean)
  - System.Object.OSharp.Mapping.MapperExtensions.MapTo``1
  - Hybrid.EventBuses.EventBusBase.OSharp.Mapping.MapperExtensions.MapTo``2({TTarget})
  - System.Object.OSharp.Reflection.LockExtensions.Locking(System.Action)
  - Hybrid.EventBuses.EventBusBase.OSharp.Reflection.LockExtensions.Locking``1(System.Action{Hybrid.EventBuses.EventBusBase})
  - System.Object.OSharp.Reflection.LockExtensions.Locking``1(System.Func{{TResult}})
  - Hybrid.EventBuses.EventBusBase.OSharp.Reflection.LockExtensions.Locking``2(System.Func{Hybrid.EventBuses.EventBusBase,{TResult}})
  - System.Object.Hybrid.Extensions.ObjectExtensions.CastTo(System.Type)
  - System.Object.Hybrid.Extensions.ObjectExtensions.CastTo``1
  - System.Object.Hybrid.Extensions.ObjectExtensions.CastTo``1({T})
  - Hybrid.EventBuses.EventBusBase.Hybrid.Extensions.ObjectExtensions.IsIn``1(Hybrid.EventBuses.EventBusBase[])
  - System.Object.Hybrid.Extensions.ObjectExtensions.ToDynamic
  - Hybrid.EventBuses.EventBusBase.Hybrid.Extensions.ObjectExtensions.DeepClone``1
  - Hybrid.EventBuses.EventBusBase.Hybrid.Extensions.ParameterCheckExtensions.Required``1(System.Func{Hybrid.EventBuses.EventBusBase,System.Boolean},System.String)
  - Hybrid.EventBuses.EventBusBase.Hybrid.Extensions.ParameterCheckExtensions.Required``2(System.Func{Hybrid.EventBuses.EventBusBase,System.Boolean},System.String)
  - Hybrid.EventBuses.EventBusBase.Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(System.String)
  - Hybrid.EventBuses.EventBusBase.Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{Hybrid.EventBuses.EventBusBase},System.Action{System.Exception},System.Action{Hybrid.EventBuses.EventBusBase})
  - Hybrid.EventBuses.EventBusBase.Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{Hybrid.EventBuses.EventBusBase},System.Action{System.Exception})
  - Hybrid.EventBuses.EventBusBase.Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{Hybrid.EventBuses.EventBusBase,{TResult}},System.Action{System.Exception},System.Action{Hybrid.EventBuses.EventBusBase})
  - Hybrid.EventBuses.EventBusBase.Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{Hybrid.EventBuses.EventBusBase,{TResult}},System.Action{System.Exception})
  - Hybrid.EventBuses.EventBusBase.Hybrid.Extensions.TryCatchExtensions.TryFinally``1(System.Action{Hybrid.EventBuses.EventBusBase},System.Action{Hybrid.EventBuses.EventBusBase})
  - System.Object.Hybrid.Json.JsonExtensions.ToJsonString(System.Boolean,System.Boolean)
  - System.Object.Hybrid.Mapping.MapperExtensions.MapTo``1
  - Hybrid.EventBuses.EventBusBase.Hybrid.Mapping.MapperExtensions.MapTo``2({TTarget})
  - System.Object.Hybrid.Reflection.LockExtensions.Locking(System.Action)
  - Hybrid.EventBuses.EventBusBase.Hybrid.Reflection.LockExtensions.Locking``1(System.Action{Hybrid.EventBuses.EventBusBase})
  - System.Object.Hybrid.Reflection.LockExtensions.Locking``1(System.Func{{TResult}})
  - Hybrid.EventBuses.EventBusBase.Hybrid.Reflection.LockExtensions.Locking``2(System.Func{Hybrid.EventBuses.EventBusBase,{TResult}})
  - Hybrid.EventBuses.EventBusBase.Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2
  - Hybrid.EventBuses.EventBusBase.Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(System.Security.Principal.IPrincipal)
  - Hybrid.EventBuses.EventBusBase.Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(System.Security.Principal.IPrincipal)
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: Hybrid.EventBuses.EventBusBase.#ctor(Hybrid.Dependency.IHybridServiceScopeFactory,System.IServiceProvider)
  commentId: M:Hybrid.EventBuses.EventBusBase.#ctor(Hybrid.Dependency.IHybridServiceScopeFactory,System.IServiceProvider)
  id: '#ctor(Hybrid.Dependency.IHybridServiceScopeFactory,System.IServiceProvider)'
  parent: Hybrid.EventBuses.EventBusBase
  langs:
  - csharp
  - vb
  name: EventBusBase(IHybridServiceScopeFactory, IServiceProvider)
  nameWithType: EventBusBase.EventBusBase(IHybridServiceScopeFactory, IServiceProvider)
  fullName: Hybrid.EventBuses.EventBusBase.EventBusBase(Hybrid.Dependency.IHybridServiceScopeFactory, System.IServiceProvider)
  type: Constructor
  source:
    remote:
      path: src/Hybrid/EventBuses/EventBusBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: .ctor
    path: ../src/Hybrid/EventBuses/EventBusBase.cs
    startLine: 33
  assemblies:
  - Hybrid
  namespace: Hybrid.EventBuses
  summary: "\n初始化一个<xref href=\"Hybrid.EventBuses.EventBusBase\" data-throw-if-not-resolved=\"false\"></xref>类型的新实例\n"
  example: []
  syntax:
    content: protected EventBusBase(IHybridServiceScopeFactory serviceScopeFactory, IServiceProvider serviceProvider)
    parameters:
    - id: serviceScopeFactory
      type: Hybrid.Dependency.IHybridServiceScopeFactory
    - id: serviceProvider
      type: System.IServiceProvider
    content.vb: Protected Sub New(serviceScopeFactory As IHybridServiceScopeFactory, serviceProvider As IServiceProvider)
  overload: Hybrid.EventBuses.EventBusBase.#ctor*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Hybrid.EventBuses.EventBusBase.ServiceScopeFactory
  commentId: P:Hybrid.EventBuses.EventBusBase.ServiceScopeFactory
  id: ServiceScopeFactory
  parent: Hybrid.EventBuses.EventBusBase
  langs:
  - csharp
  - vb
  name: ServiceScopeFactory
  nameWithType: EventBusBase.ServiceScopeFactory
  fullName: Hybrid.EventBuses.EventBusBase.ServiceScopeFactory
  type: Property
  source:
    remote:
      path: src/Hybrid/EventBuses/EventBusBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: ServiceScopeFactory
    path: ../src/Hybrid/EventBuses/EventBusBase.cs
    startLine: 44
  assemblies:
  - Hybrid
  namespace: Hybrid.EventBuses
  summary: "\n获取 服务作用域工厂\n"
  example: []
  syntax:
    content: protected IHybridServiceScopeFactory ServiceScopeFactory { get; }
    parameters: []
    return:
      type: Hybrid.Dependency.IHybridServiceScopeFactory
    content.vb: Protected ReadOnly Property ServiceScopeFactory As IHybridServiceScopeFactory
  overload: Hybrid.EventBuses.EventBusBase.ServiceScopeFactory*
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: Hybrid.EventBuses.EventBusBase.EventStore
  commentId: P:Hybrid.EventBuses.EventBusBase.EventStore
  id: EventStore
  parent: Hybrid.EventBuses.EventBusBase
  langs:
  - csharp
  - vb
  name: EventStore
  nameWithType: EventBusBase.EventStore
  fullName: Hybrid.EventBuses.EventBusBase.EventStore
  type: Property
  source:
    remote:
      path: src/Hybrid/EventBuses/EventBusBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: EventStore
    path: ../src/Hybrid/EventBuses/EventBusBase.cs
    startLine: 49
  assemblies:
  - Hybrid
  namespace: Hybrid.EventBuses
  summary: "\n获取 事件仓储\n"
  example: []
  syntax:
    content: protected IEventStore EventStore { get; }
    parameters: []
    return:
      type: Hybrid.EventBuses.IEventStore
    content.vb: Protected ReadOnly Property EventStore As IEventStore
  overload: Hybrid.EventBuses.EventBusBase.EventStore*
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: Hybrid.EventBuses.EventBusBase.Logger
  commentId: P:Hybrid.EventBuses.EventBusBase.Logger
  id: Logger
  parent: Hybrid.EventBuses.EventBusBase
  langs:
  - csharp
  - vb
  name: Logger
  nameWithType: EventBusBase.Logger
  fullName: Hybrid.EventBuses.EventBusBase.Logger
  type: Property
  source:
    remote:
      path: src/Hybrid/EventBuses/EventBusBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: Logger
    path: ../src/Hybrid/EventBuses/EventBusBase.cs
    startLine: 54
  assemblies:
  - Hybrid
  namespace: Hybrid.EventBuses
  summary: "\n获取 日志对象\n"
  example: []
  syntax:
    content: protected ILogger Logger { get; }
    parameters: []
    return:
      type: Microsoft.Extensions.Logging.ILogger
    content.vb: Protected ReadOnly Property Logger As ILogger
  overload: Hybrid.EventBuses.EventBusBase.Logger*
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: Hybrid.EventBuses.EventBusBase.Subscribe``2
  commentId: M:Hybrid.EventBuses.EventBusBase.Subscribe``2
  id: Subscribe``2
  parent: Hybrid.EventBuses.EventBusBase
  langs:
  - csharp
  - vb
  name: Subscribe<TEventData, TEventHandler>()
  nameWithType: EventBusBase.Subscribe<TEventData, TEventHandler>()
  fullName: Hybrid.EventBuses.EventBusBase.Subscribe<TEventData, TEventHandler>()
  type: Method
  source:
    remote:
      path: src/Hybrid/EventBuses/EventBusBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: Subscribe
    path: ../src/Hybrid/EventBuses/EventBusBase.cs
    startLine: 63
  assemblies:
  - Hybrid
  namespace: Hybrid.EventBuses
  summary: "\n订阅指定事件数据的事件处理类型\n"
  example: []
  syntax:
    content: >-
      public virtual void Subscribe<TEventData, TEventHandler>()

          where TEventData : IEventData where TEventHandler : IEventHandler, new()
    typeParameters:
    - id: TEventData
      description: 事件数据类型
    - id: TEventHandler
      description: 事件处理器类型
    content.vb: Public Overridable Sub Subscribe(Of TEventData As IEventData, TEventHandler As {IEventHandler, New})
  overload: Hybrid.EventBuses.EventBusBase.Subscribe*
  implements:
  - Hybrid.EventBuses.IEventSubscriber.Subscribe``2
  nameWithType.vb: EventBusBase.Subscribe(Of TEventData, TEventHandler)()
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Hybrid.EventBuses.EventBusBase.Subscribe(Of TEventData, TEventHandler)()
  name.vb: Subscribe(Of TEventData, TEventHandler)()
- uid: Hybrid.EventBuses.EventBusBase.Subscribe``1(System.Action{``0})
  commentId: M:Hybrid.EventBuses.EventBusBase.Subscribe``1(System.Action{``0})
  id: Subscribe``1(System.Action{``0})
  parent: Hybrid.EventBuses.EventBusBase
  langs:
  - csharp
  - vb
  name: Subscribe<TEventData>(Action<TEventData>)
  nameWithType: EventBusBase.Subscribe<TEventData>(Action<TEventData>)
  fullName: Hybrid.EventBuses.EventBusBase.Subscribe<TEventData>(System.Action<TEventData>)
  type: Method
  source:
    remote:
      path: src/Hybrid/EventBuses/EventBusBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: Subscribe
    path: ../src/Hybrid/EventBuses/EventBusBase.cs
    startLine: 73
  assemblies:
  - Hybrid
  namespace: Hybrid.EventBuses
  summary: "\n订阅指定事件数据的事件处理委托\n"
  example: []
  syntax:
    content: >-
      public virtual void Subscribe<TEventData>(Action<TEventData> action)

          where TEventData : IEventData
    parameters:
    - id: action
      type: System.Action{{TEventData}}
      description: 事件处理委托
    typeParameters:
    - id: TEventData
      description: 事件数据类型
    content.vb: Public Overridable Sub Subscribe(Of TEventData As IEventData)(action As Action(Of TEventData))
  overload: Hybrid.EventBuses.EventBusBase.Subscribe*
  implements:
  - Hybrid.EventBuses.IEventSubscriber.Subscribe``1(System.Action{{TEventData}})
  nameWithType.vb: EventBusBase.Subscribe(Of TEventData)(Action(Of TEventData))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Hybrid.EventBuses.EventBusBase.Subscribe(Of TEventData)(System.Action(Of TEventData))
  name.vb: Subscribe(Of TEventData)(Action(Of TEventData))
- uid: Hybrid.EventBuses.EventBusBase.Subscribe``1(Hybrid.EventBuses.IEventHandler)
  commentId: M:Hybrid.EventBuses.EventBusBase.Subscribe``1(Hybrid.EventBuses.IEventHandler)
  id: Subscribe``1(Hybrid.EventBuses.IEventHandler)
  parent: Hybrid.EventBuses.EventBusBase
  langs:
  - csharp
  - vb
  name: Subscribe<TEventData>(IEventHandler)
  nameWithType: EventBusBase.Subscribe<TEventData>(IEventHandler)
  fullName: Hybrid.EventBuses.EventBusBase.Subscribe<TEventData>(Hybrid.EventBuses.IEventHandler)
  type: Method
  source:
    remote:
      path: src/Hybrid/EventBuses/EventBusBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: Subscribe
    path: ../src/Hybrid/EventBuses/EventBusBase.cs
    startLine: 86
  assemblies:
  - Hybrid
  namespace: Hybrid.EventBuses
  summary: "\n订阅指定事件数据的事件处理对象\n"
  example: []
  syntax:
    content: >-
      public virtual void Subscribe<TEventData>(IEventHandler eventHandler)

          where TEventData : IEventData
    parameters:
    - id: eventHandler
      type: Hybrid.EventBuses.IEventHandler
      description: 事件处理对象
    typeParameters:
    - id: TEventData
      description: 事件数据类型
    content.vb: Public Overridable Sub Subscribe(Of TEventData As IEventData)(eventHandler As IEventHandler)
  overload: Hybrid.EventBuses.EventBusBase.Subscribe*
  implements:
  - Hybrid.EventBuses.IEventSubscriber.Subscribe``1(Hybrid.EventBuses.IEventHandler)
  nameWithType.vb: EventBusBase.Subscribe(Of TEventData)(IEventHandler)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Hybrid.EventBuses.EventBusBase.Subscribe(Of TEventData)(Hybrid.EventBuses.IEventHandler)
  name.vb: Subscribe(Of TEventData)(IEventHandler)
- uid: Hybrid.EventBuses.EventBusBase.Subscribe(System.Type,Hybrid.EventBuses.IEventHandler)
  commentId: M:Hybrid.EventBuses.EventBusBase.Subscribe(System.Type,Hybrid.EventBuses.IEventHandler)
  id: Subscribe(System.Type,Hybrid.EventBuses.IEventHandler)
  parent: Hybrid.EventBuses.EventBusBase
  langs:
  - csharp
  - vb
  name: Subscribe(Type, IEventHandler)
  nameWithType: EventBusBase.Subscribe(Type, IEventHandler)
  fullName: Hybrid.EventBuses.EventBusBase.Subscribe(System.Type, Hybrid.EventBuses.IEventHandler)
  type: Method
  source:
    remote:
      path: src/Hybrid/EventBuses/EventBusBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: Subscribe
    path: ../src/Hybrid/EventBuses/EventBusBase.cs
    startLine: 98
  assemblies:
  - Hybrid
  namespace: Hybrid.EventBuses
  summary: "\n订阅指定事件数据的事件处理对象\n"
  example: []
  syntax:
    content: public virtual void Subscribe(Type eventType, IEventHandler eventHandler)
    parameters:
    - id: eventType
      type: System.Type
      description: 事件数据类型
    - id: eventHandler
      type: Hybrid.EventBuses.IEventHandler
      description: 事件处理对象
    content.vb: Public Overridable Sub Subscribe(eventType As Type, eventHandler As IEventHandler)
  overload: Hybrid.EventBuses.EventBusBase.Subscribe*
  implements:
  - Hybrid.EventBuses.IEventSubscriber.Subscribe(System.Type,Hybrid.EventBuses.IEventHandler)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Hybrid.EventBuses.EventBusBase.SubscribeAll(System.Type[])
  commentId: M:Hybrid.EventBuses.EventBusBase.SubscribeAll(System.Type[])
  id: SubscribeAll(System.Type[])
  parent: Hybrid.EventBuses.EventBusBase
  langs:
  - csharp
  - vb
  name: SubscribeAll(Type[])
  nameWithType: EventBusBase.SubscribeAll(Type[])
  fullName: Hybrid.EventBuses.EventBusBase.SubscribeAll(System.Type[])
  type: Method
  source:
    remote:
      path: src/Hybrid/EventBuses/EventBusBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: SubscribeAll
    path: ../src/Hybrid/EventBuses/EventBusBase.cs
    startLine: 110
  assemblies:
  - Hybrid
  namespace: Hybrid.EventBuses
  summary: "\n自动订阅所有事件数据及其处理类型\n"
  example: []
  syntax:
    content: public virtual void SubscribeAll(Type[] eventHandlerTypes)
    parameters:
    - id: eventHandlerTypes
      type: System.Type[]
      description: 事件处理器类型集合
    content.vb: Public Overridable Sub SubscribeAll(eventHandlerTypes As Type())
  overload: Hybrid.EventBuses.EventBusBase.SubscribeAll*
  implements:
  - Hybrid.EventBuses.IEventSubscriber.SubscribeAll(System.Type[])
  nameWithType.vb: EventBusBase.SubscribeAll(Type())
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Hybrid.EventBuses.EventBusBase.SubscribeAll(System.Type())
  name.vb: SubscribeAll(Type())
- uid: Hybrid.EventBuses.EventBusBase.Unsubscribe``1(System.Action{``0})
  commentId: M:Hybrid.EventBuses.EventBusBase.Unsubscribe``1(System.Action{``0})
  id: Unsubscribe``1(System.Action{``0})
  parent: Hybrid.EventBuses.EventBusBase
  langs:
  - csharp
  - vb
  name: Unsubscribe<TEventData>(Action<TEventData>)
  nameWithType: EventBusBase.Unsubscribe<TEventData>(Action<TEventData>)
  fullName: Hybrid.EventBuses.EventBusBase.Unsubscribe<TEventData>(System.Action<TEventData>)
  type: Method
  source:
    remote:
      path: src/Hybrid/EventBuses/EventBusBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: Unsubscribe
    path: ../src/Hybrid/EventBuses/EventBusBase.cs
    startLine: 134
  assemblies:
  - Hybrid
  namespace: Hybrid.EventBuses
  summary: "\n取消订阅指定事件数据的事件处理委托\n"
  example: []
  syntax:
    content: >-
      public virtual void Unsubscribe<TEventData>(Action<TEventData> action)

          where TEventData : IEventData
    parameters:
    - id: action
      type: System.Action{{TEventData}}
      description: 事件处理委托
    typeParameters:
    - id: TEventData
      description: 事件数据类型
    content.vb: Public Overridable Sub Unsubscribe(Of TEventData As IEventData)(action As Action(Of TEventData))
  overload: Hybrid.EventBuses.EventBusBase.Unsubscribe*
  implements:
  - Hybrid.EventBuses.IEventSubscriber.Unsubscribe``1(System.Action{{TEventData}})
  nameWithType.vb: EventBusBase.Unsubscribe(Of TEventData)(Action(Of TEventData))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Hybrid.EventBuses.EventBusBase.Unsubscribe(Of TEventData)(System.Action(Of TEventData))
  name.vb: Unsubscribe(Of TEventData)(Action(Of TEventData))
- uid: Hybrid.EventBuses.EventBusBase.Unsubscribe``1(Hybrid.EventBuses.IEventHandler{``0})
  commentId: M:Hybrid.EventBuses.EventBusBase.Unsubscribe``1(Hybrid.EventBuses.IEventHandler{``0})
  id: Unsubscribe``1(Hybrid.EventBuses.IEventHandler{``0})
  parent: Hybrid.EventBuses.EventBusBase
  langs:
  - csharp
  - vb
  name: Unsubscribe<TEventData>(IEventHandler<TEventData>)
  nameWithType: EventBusBase.Unsubscribe<TEventData>(IEventHandler<TEventData>)
  fullName: Hybrid.EventBuses.EventBusBase.Unsubscribe<TEventData>(Hybrid.EventBuses.IEventHandler<TEventData>)
  type: Method
  source:
    remote:
      path: src/Hybrid/EventBuses/EventBusBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: Unsubscribe
    path: ../src/Hybrid/EventBuses/EventBusBase.cs
    startLine: 146
  assemblies:
  - Hybrid
  namespace: Hybrid.EventBuses
  summary: "\n取消订阅指定事件数据的事件处理对象\n"
  example: []
  syntax:
    content: >-
      public virtual void Unsubscribe<TEventData>(IEventHandler<TEventData> eventHandler)

          where TEventData : IEventData
    parameters:
    - id: eventHandler
      type: Hybrid.EventBuses.IEventHandler{{TEventData}}
      description: 事件处理对象
    typeParameters:
    - id: TEventData
      description: 事件数据类型
    content.vb: Public Overridable Sub Unsubscribe(Of TEventData As IEventData)(eventHandler As IEventHandler(Of TEventData))
  overload: Hybrid.EventBuses.EventBusBase.Unsubscribe*
  implements:
  - Hybrid.EventBuses.IEventSubscriber.Unsubscribe``1(Hybrid.EventBuses.IEventHandler{{TEventData}})
  nameWithType.vb: EventBusBase.Unsubscribe(Of TEventData)(IEventHandler(Of TEventData))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Hybrid.EventBuses.EventBusBase.Unsubscribe(Of TEventData)(Hybrid.EventBuses.IEventHandler(Of TEventData))
  name.vb: Unsubscribe(Of TEventData)(IEventHandler(Of TEventData))
- uid: Hybrid.EventBuses.EventBusBase.Unsubscribe(System.Type,Hybrid.EventBuses.IEventHandler)
  commentId: M:Hybrid.EventBuses.EventBusBase.Unsubscribe(System.Type,Hybrid.EventBuses.IEventHandler)
  id: Unsubscribe(System.Type,Hybrid.EventBuses.IEventHandler)
  parent: Hybrid.EventBuses.EventBusBase
  langs:
  - csharp
  - vb
  name: Unsubscribe(Type, IEventHandler)
  nameWithType: EventBusBase.Unsubscribe(Type, IEventHandler)
  fullName: Hybrid.EventBuses.EventBusBase.Unsubscribe(System.Type, Hybrid.EventBuses.IEventHandler)
  type: Method
  source:
    remote:
      path: src/Hybrid/EventBuses/EventBusBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: Unsubscribe
    path: ../src/Hybrid/EventBuses/EventBusBase.cs
    startLine: 158
  assemblies:
  - Hybrid
  namespace: Hybrid.EventBuses
  summary: "\n取消订阅指定事件数据的事件处理对象\n"
  example: []
  syntax:
    content: public virtual void Unsubscribe(Type eventType, IEventHandler eventHandler)
    parameters:
    - id: eventType
      type: System.Type
      description: 事件数据类型
    - id: eventHandler
      type: Hybrid.EventBuses.IEventHandler
      description: 事件处理对象
    content.vb: Public Overridable Sub Unsubscribe(eventType As Type, eventHandler As IEventHandler)
  overload: Hybrid.EventBuses.EventBusBase.Unsubscribe*
  implements:
  - Hybrid.EventBuses.IEventSubscriber.Unsubscribe(System.Type,Hybrid.EventBuses.IEventHandler)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Hybrid.EventBuses.EventBusBase.UnsubscribeAll``1
  commentId: M:Hybrid.EventBuses.EventBusBase.UnsubscribeAll``1
  id: UnsubscribeAll``1
  parent: Hybrid.EventBuses.EventBusBase
  langs:
  - csharp
  - vb
  name: UnsubscribeAll<TEventData>()
  nameWithType: EventBusBase.UnsubscribeAll<TEventData>()
  fullName: Hybrid.EventBuses.EventBusBase.UnsubscribeAll<TEventData>()
  type: Method
  source:
    remote:
      path: src/Hybrid/EventBuses/EventBusBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: UnsubscribeAll
    path: ../src/Hybrid/EventBuses/EventBusBase.cs
    startLine: 167
  assemblies:
  - Hybrid
  namespace: Hybrid.EventBuses
  summary: "\n取消指定事件数据的所有处理器\n"
  example: []
  syntax:
    content: >-
      public virtual void UnsubscribeAll<TEventData>()

          where TEventData : IEventData
    typeParameters:
    - id: TEventData
      description: 事件数据类型
    content.vb: Public Overridable Sub UnsubscribeAll(Of TEventData As IEventData)
  overload: Hybrid.EventBuses.EventBusBase.UnsubscribeAll*
  implements:
  - Hybrid.EventBuses.IEventSubscriber.UnsubscribeAll``1
  nameWithType.vb: EventBusBase.UnsubscribeAll(Of TEventData)()
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Hybrid.EventBuses.EventBusBase.UnsubscribeAll(Of TEventData)()
  name.vb: UnsubscribeAll(Of TEventData)()
- uid: Hybrid.EventBuses.EventBusBase.UnsubscribeAll(System.Type)
  commentId: M:Hybrid.EventBuses.EventBusBase.UnsubscribeAll(System.Type)
  id: UnsubscribeAll(System.Type)
  parent: Hybrid.EventBuses.EventBusBase
  langs:
  - csharp
  - vb
  name: UnsubscribeAll(Type)
  nameWithType: EventBusBase.UnsubscribeAll(Type)
  fullName: Hybrid.EventBuses.EventBusBase.UnsubscribeAll(System.Type)
  type: Method
  source:
    remote:
      path: src/Hybrid/EventBuses/EventBusBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: UnsubscribeAll
    path: ../src/Hybrid/EventBuses/EventBusBase.cs
    startLine: 176
  assemblies:
  - Hybrid
  namespace: Hybrid.EventBuses
  summary: "\n取消指定事件数据的所有处理器\n"
  example: []
  syntax:
    content: public virtual void UnsubscribeAll(Type eventType)
    parameters:
    - id: eventType
      type: System.Type
      description: 事件数据类型
    content.vb: Public Overridable Sub UnsubscribeAll(eventType As Type)
  overload: Hybrid.EventBuses.EventBusBase.UnsubscribeAll*
  implements:
  - Hybrid.EventBuses.IEventSubscriber.UnsubscribeAll(System.Type)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Hybrid.EventBuses.EventBusBase.Publish``1(``0,System.Boolean)
  commentId: M:Hybrid.EventBuses.EventBusBase.Publish``1(``0,System.Boolean)
  id: Publish``1(``0,System.Boolean)
  parent: Hybrid.EventBuses.EventBusBase
  langs:
  - csharp
  - vb
  name: Publish<TEventData>(TEventData, Boolean)
  nameWithType: EventBusBase.Publish<TEventData>(TEventData, Boolean)
  fullName: Hybrid.EventBuses.EventBusBase.Publish<TEventData>(TEventData, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Hybrid/EventBuses/EventBusBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: Publish
    path: ../src/Hybrid/EventBuses/EventBusBase.cs
    startLine: 191
  assemblies:
  - Hybrid
  namespace: Hybrid.EventBuses
  summary: "\n同步发布指定事件\n"
  example: []
  syntax:
    content: >-
      public virtual void Publish<TEventData>(TEventData eventData, bool wait = true)

          where TEventData : IEventData
    parameters:
    - id: eventData
      type: '{TEventData}'
      description: 事件数据
    - id: wait
      type: System.Boolean
      description: 是否等待结果返回
    typeParameters:
    - id: TEventData
      description: 事件数据类型
    content.vb: Public Overridable Sub Publish(Of TEventData As IEventData)(eventData As TEventData, wait As Boolean = True)
  overload: Hybrid.EventBuses.EventBusBase.Publish*
  implements:
  - Hybrid.EventBuses.IEventPublisher.Publish``1({TEventData},System.Boolean)
  nameWithType.vb: EventBusBase.Publish(Of TEventData)(TEventData, Boolean)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Hybrid.EventBuses.EventBusBase.Publish(Of TEventData)(TEventData, System.Boolean)
  name.vb: Publish(Of TEventData)(TEventData, Boolean)
- uid: Hybrid.EventBuses.EventBusBase.Publish``1(System.Object,``0,System.Boolean)
  commentId: M:Hybrid.EventBuses.EventBusBase.Publish``1(System.Object,``0,System.Boolean)
  id: Publish``1(System.Object,``0,System.Boolean)
  parent: Hybrid.EventBuses.EventBusBase
  langs:
  - csharp
  - vb
  name: Publish<TEventData>(Object, TEventData, Boolean)
  nameWithType: EventBusBase.Publish<TEventData>(Object, TEventData, Boolean)
  fullName: Hybrid.EventBuses.EventBusBase.Publish<TEventData>(System.Object, TEventData, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Hybrid/EventBuses/EventBusBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: Publish
    path: ../src/Hybrid/EventBuses/EventBusBase.cs
    startLine: 203
  assemblies:
  - Hybrid
  namespace: Hybrid.EventBuses
  summary: "\n同步发布指定事件，并指定事件源\n"
  example: []
  syntax:
    content: >-
      public virtual void Publish<TEventData>(object eventSource, TEventData eventData, bool wait = true)

          where TEventData : IEventData
    parameters:
    - id: eventSource
      type: System.Object
      description: 事件源，触发事件的对象
    - id: eventData
      type: '{TEventData}'
      description: 事件数据
    - id: wait
      type: System.Boolean
      description: 是否等待结果返回
    typeParameters:
    - id: TEventData
      description: 事件数据类型
    content.vb: Public Overridable Sub Publish(Of TEventData As IEventData)(eventSource As Object, eventData As TEventData, wait As Boolean = True)
  overload: Hybrid.EventBuses.EventBusBase.Publish*
  implements:
  - Hybrid.EventBuses.IEventPublisher.Publish``1(System.Object,{TEventData},System.Boolean)
  nameWithType.vb: EventBusBase.Publish(Of TEventData)(Object, TEventData, Boolean)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Hybrid.EventBuses.EventBusBase.Publish(Of TEventData)(System.Object, TEventData, System.Boolean)
  name.vb: Publish(Of TEventData)(Object, TEventData, Boolean)
- uid: Hybrid.EventBuses.EventBusBase.Publish(System.Type,Hybrid.EventBuses.IEventData,System.Boolean)
  commentId: M:Hybrid.EventBuses.EventBusBase.Publish(System.Type,Hybrid.EventBuses.IEventData,System.Boolean)
  id: Publish(System.Type,Hybrid.EventBuses.IEventData,System.Boolean)
  parent: Hybrid.EventBuses.EventBusBase
  langs:
  - csharp
  - vb
  name: Publish(Type, IEventData, Boolean)
  nameWithType: EventBusBase.Publish(Type, IEventData, Boolean)
  fullName: Hybrid.EventBuses.EventBusBase.Publish(System.Type, Hybrid.EventBuses.IEventData, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Hybrid/EventBuses/EventBusBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: Publish
    path: ../src/Hybrid/EventBuses/EventBusBase.cs
    startLine: 214
  assemblies:
  - Hybrid
  namespace: Hybrid.EventBuses
  summary: "\n同步发布指定事件\n"
  example: []
  syntax:
    content: public virtual void Publish(Type eventType, IEventData eventData, bool wait = true)
    parameters:
    - id: eventType
      type: System.Type
      description: 事件数据类型
    - id: eventData
      type: Hybrid.EventBuses.IEventData
      description: 事件数据
    - id: wait
      type: System.Boolean
      description: 是否等待结果返回
    content.vb: Public Overridable Sub Publish(eventType As Type, eventData As IEventData, wait As Boolean = True)
  overload: Hybrid.EventBuses.EventBusBase.Publish*
  implements:
  - Hybrid.EventBuses.IEventPublisher.Publish(System.Type,Hybrid.EventBuses.IEventData,System.Boolean)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Hybrid.EventBuses.EventBusBase.Publish(System.Type,System.Object,Hybrid.EventBuses.IEventData,System.Boolean)
  commentId: M:Hybrid.EventBuses.EventBusBase.Publish(System.Type,System.Object,Hybrid.EventBuses.IEventData,System.Boolean)
  id: Publish(System.Type,System.Object,Hybrid.EventBuses.IEventData,System.Boolean)
  parent: Hybrid.EventBuses.EventBusBase
  langs:
  - csharp
  - vb
  name: Publish(Type, Object, IEventData, Boolean)
  nameWithType: EventBusBase.Publish(Type, Object, IEventData, Boolean)
  fullName: Hybrid.EventBuses.EventBusBase.Publish(System.Type, System.Object, Hybrid.EventBuses.IEventData, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Hybrid/EventBuses/EventBusBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: Publish
    path: ../src/Hybrid/EventBuses/EventBusBase.cs
    startLine: 226
  assemblies:
  - Hybrid
  namespace: Hybrid.EventBuses
  summary: "\n同步发布指定事件，并指定事件源\n"
  example: []
  syntax:
    content: public virtual void Publish(Type eventType, object eventSource, IEventData eventData, bool wait = true)
    parameters:
    - id: eventType
      type: System.Type
      description: 事件数据类型
    - id: eventSource
      type: System.Object
      description: 事件源，触发事件的对象
    - id: eventData
      type: Hybrid.EventBuses.IEventData
      description: 事件数据
    - id: wait
      type: System.Boolean
      description: 是否等待结果返回
    content.vb: Public Overridable Sub Publish(eventType As Type, eventSource As Object, eventData As IEventData, wait As Boolean = True)
  overload: Hybrid.EventBuses.EventBusBase.Publish*
  implements:
  - Hybrid.EventBuses.IEventPublisher.Publish(System.Type,System.Object,Hybrid.EventBuses.IEventData,System.Boolean)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Hybrid.EventBuses.EventBusBase.PublishAsync``1(``0,System.Boolean)
  commentId: M:Hybrid.EventBuses.EventBusBase.PublishAsync``1(``0,System.Boolean)
  id: PublishAsync``1(``0,System.Boolean)
  parent: Hybrid.EventBuses.EventBusBase
  langs:
  - csharp
  - vb
  name: PublishAsync<TEventData>(TEventData, Boolean)
  nameWithType: EventBusBase.PublishAsync<TEventData>(TEventData, Boolean)
  fullName: Hybrid.EventBuses.EventBusBase.PublishAsync<TEventData>(TEventData, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Hybrid/EventBuses/EventBusBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: PublishAsync
    path: ../src/Hybrid/EventBuses/EventBusBase.cs
    startLine: 246
  assemblies:
  - Hybrid
  namespace: Hybrid.EventBuses
  summary: "\n异步发布指定事件\n"
  example: []
  syntax:
    content: >-
      public virtual Task PublishAsync<TEventData>(TEventData eventData, bool wait = true)

          where TEventData : IEventData
    parameters:
    - id: eventData
      type: '{TEventData}'
      description: 事件数据
    - id: wait
      type: System.Boolean
      description: 是否等待结果返回
    typeParameters:
    - id: TEventData
      description: 事件数据类型
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Overridable Function PublishAsync(Of TEventData As IEventData)(eventData As TEventData, wait As Boolean = True) As Task
  overload: Hybrid.EventBuses.EventBusBase.PublishAsync*
  implements:
  - Hybrid.EventBuses.IEventPublisher.PublishAsync``1({TEventData},System.Boolean)
  nameWithType.vb: EventBusBase.PublishAsync(Of TEventData)(TEventData, Boolean)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Hybrid.EventBuses.EventBusBase.PublishAsync(Of TEventData)(TEventData, System.Boolean)
  name.vb: PublishAsync(Of TEventData)(TEventData, Boolean)
- uid: Hybrid.EventBuses.EventBusBase.PublishAsync``1(System.Object,``0,System.Boolean)
  commentId: M:Hybrid.EventBuses.EventBusBase.PublishAsync``1(System.Object,``0,System.Boolean)
  id: PublishAsync``1(System.Object,``0,System.Boolean)
  parent: Hybrid.EventBuses.EventBusBase
  langs:
  - csharp
  - vb
  name: PublishAsync<TEventData>(Object, TEventData, Boolean)
  nameWithType: EventBusBase.PublishAsync<TEventData>(Object, TEventData, Boolean)
  fullName: Hybrid.EventBuses.EventBusBase.PublishAsync<TEventData>(System.Object, TEventData, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Hybrid/EventBuses/EventBusBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: PublishAsync
    path: ../src/Hybrid/EventBuses/EventBusBase.cs
    startLine: 258
  assemblies:
  - Hybrid
  namespace: Hybrid.EventBuses
  summary: "\n异步发布指定事件，并指定事件源\n"
  example: []
  syntax:
    content: >-
      public virtual Task PublishAsync<TEventData>(object eventSource, TEventData eventData, bool wait = true)

          where TEventData : IEventData
    parameters:
    - id: eventSource
      type: System.Object
      description: 事件源，触发事件的对象
    - id: eventData
      type: '{TEventData}'
      description: 事件数据
    - id: wait
      type: System.Boolean
      description: 是否等待结果返回
    typeParameters:
    - id: TEventData
      description: 事件数据类型
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Overridable Function PublishAsync(Of TEventData As IEventData)(eventSource As Object, eventData As TEventData, wait As Boolean = True) As Task
  overload: Hybrid.EventBuses.EventBusBase.PublishAsync*
  implements:
  - Hybrid.EventBuses.IEventPublisher.PublishAsync``1(System.Object,{TEventData},System.Boolean)
  nameWithType.vb: EventBusBase.PublishAsync(Of TEventData)(Object, TEventData, Boolean)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Hybrid.EventBuses.EventBusBase.PublishAsync(Of TEventData)(System.Object, TEventData, System.Boolean)
  name.vb: PublishAsync(Of TEventData)(Object, TEventData, Boolean)
- uid: Hybrid.EventBuses.EventBusBase.PublishAsync(System.Type,Hybrid.EventBuses.IEventData,System.Boolean)
  commentId: M:Hybrid.EventBuses.EventBusBase.PublishAsync(System.Type,Hybrid.EventBuses.IEventData,System.Boolean)
  id: PublishAsync(System.Type,Hybrid.EventBuses.IEventData,System.Boolean)
  parent: Hybrid.EventBuses.EventBusBase
  langs:
  - csharp
  - vb
  name: PublishAsync(Type, IEventData, Boolean)
  nameWithType: EventBusBase.PublishAsync(Type, IEventData, Boolean)
  fullName: Hybrid.EventBuses.EventBusBase.PublishAsync(System.Type, Hybrid.EventBuses.IEventData, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Hybrid/EventBuses/EventBusBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: PublishAsync
    path: ../src/Hybrid/EventBuses/EventBusBase.cs
    startLine: 269
  assemblies:
  - Hybrid
  namespace: Hybrid.EventBuses
  summary: "\n异步发布指定事件\n"
  example: []
  syntax:
    content: public virtual Task PublishAsync(Type eventType, IEventData eventData, bool wait = true)
    parameters:
    - id: eventType
      type: System.Type
      description: 事件数据类型
    - id: eventData
      type: Hybrid.EventBuses.IEventData
      description: 事件数据
    - id: wait
      type: System.Boolean
      description: 是否等待结果返回
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Overridable Function PublishAsync(eventType As Type, eventData As IEventData, wait As Boolean = True) As Task
  overload: Hybrid.EventBuses.EventBusBase.PublishAsync*
  implements:
  - Hybrid.EventBuses.IEventPublisher.PublishAsync(System.Type,Hybrid.EventBuses.IEventData,System.Boolean)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Hybrid.EventBuses.EventBusBase.PublishAsync(System.Type,System.Object,Hybrid.EventBuses.IEventData,System.Boolean)
  commentId: M:Hybrid.EventBuses.EventBusBase.PublishAsync(System.Type,System.Object,Hybrid.EventBuses.IEventData,System.Boolean)
  id: PublishAsync(System.Type,System.Object,Hybrid.EventBuses.IEventData,System.Boolean)
  parent: Hybrid.EventBuses.EventBusBase
  langs:
  - csharp
  - vb
  name: PublishAsync(Type, Object, IEventData, Boolean)
  nameWithType: EventBusBase.PublishAsync(Type, Object, IEventData, Boolean)
  fullName: Hybrid.EventBuses.EventBusBase.PublishAsync(System.Type, System.Object, Hybrid.EventBuses.IEventData, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Hybrid/EventBuses/EventBusBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: PublishAsync
    path: ../src/Hybrid/EventBuses/EventBusBase.cs
    startLine: 281
  assemblies:
  - Hybrid
  namespace: Hybrid.EventBuses
  summary: "\n异步发布指定事件，并指定事件源\n"
  example: []
  syntax:
    content: public virtual Task PublishAsync(Type eventType, object eventSource, IEventData eventData, bool wait = true)
    parameters:
    - id: eventType
      type: System.Type
      description: 事件数据类型
    - id: eventSource
      type: System.Object
      description: 事件源，触发事件的对象
    - id: eventData
      type: Hybrid.EventBuses.IEventData
      description: 事件数据
    - id: wait
      type: System.Boolean
      description: 是否等待结果返回
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Overridable Function PublishAsync(eventType As Type, eventSource As Object, eventData As IEventData, wait As Boolean = True) As Task
  overload: Hybrid.EventBuses.EventBusBase.PublishAsync*
  implements:
  - Hybrid.EventBuses.IEventPublisher.PublishAsync(System.Type,System.Object,Hybrid.EventBuses.IEventData,System.Boolean)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Hybrid.EventBuses.EventBusBase.InvokeHandler(Hybrid.EventBuses.IEventHandlerFactory,System.Type,Hybrid.EventBuses.IEventData,System.Boolean)
  commentId: M:Hybrid.EventBuses.EventBusBase.InvokeHandler(Hybrid.EventBuses.IEventHandlerFactory,System.Type,Hybrid.EventBuses.IEventData,System.Boolean)
  id: InvokeHandler(Hybrid.EventBuses.IEventHandlerFactory,System.Type,Hybrid.EventBuses.IEventData,System.Boolean)
  parent: Hybrid.EventBuses.EventBusBase
  langs:
  - csharp
  - vb
  name: InvokeHandler(IEventHandlerFactory, Type, IEventData, Boolean)
  nameWithType: EventBusBase.InvokeHandler(IEventHandlerFactory, Type, IEventData, Boolean)
  fullName: Hybrid.EventBuses.EventBusBase.InvokeHandler(Hybrid.EventBuses.IEventHandlerFactory, System.Type, Hybrid.EventBuses.IEventData, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Hybrid/EventBuses/EventBusBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: InvokeHandler
    path: ../src/Hybrid/EventBuses/EventBusBase.cs
    startLine: 302
  assemblies:
  - Hybrid
  namespace: Hybrid.EventBuses
  summary: "\n重写以实现触发事件的执行\n"
  example: []
  syntax:
    content: protected void InvokeHandler(IEventHandlerFactory factory, Type eventType, IEventData eventData, bool wait = true)
    parameters:
    - id: factory
      type: Hybrid.EventBuses.IEventHandlerFactory
      description: 事件处理器工厂
    - id: eventType
      type: System.Type
      description: 事件类型
    - id: eventData
      type: Hybrid.EventBuses.IEventData
      description: 事件数据
    - id: wait
      type: System.Boolean
      description: 是否等待结果返回
    content.vb: Protected Sub InvokeHandler(factory As IEventHandlerFactory, eventType As Type, eventData As IEventData, wait As Boolean = True)
  overload: Hybrid.EventBuses.EventBusBase.InvokeHandler*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Hybrid.EventBuses.EventBusBase.InvokeHandlerAsync(Hybrid.EventBuses.IEventHandlerFactory,System.Type,Hybrid.EventBuses.IEventData,System.Boolean)
  commentId: M:Hybrid.EventBuses.EventBusBase.InvokeHandlerAsync(Hybrid.EventBuses.IEventHandlerFactory,System.Type,Hybrid.EventBuses.IEventData,System.Boolean)
  id: InvokeHandlerAsync(Hybrid.EventBuses.IEventHandlerFactory,System.Type,Hybrid.EventBuses.IEventData,System.Boolean)
  parent: Hybrid.EventBuses.EventBusBase
  langs:
  - csharp
  - vb
  name: InvokeHandlerAsync(IEventHandlerFactory, Type, IEventData, Boolean)
  nameWithType: EventBusBase.InvokeHandlerAsync(IEventHandlerFactory, Type, IEventData, Boolean)
  fullName: Hybrid.EventBuses.EventBusBase.InvokeHandlerAsync(Hybrid.EventBuses.IEventHandlerFactory, System.Type, Hybrid.EventBuses.IEventData, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Hybrid/EventBuses/EventBusBase.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: InvokeHandlerAsync
    path: ../src/Hybrid/EventBuses/EventBusBase.cs
    startLine: 343
  assemblies:
  - Hybrid
  namespace: Hybrid.EventBuses
  summary: "\n重写以实现异步触发事件的执行\n"
  example: []
  syntax:
    content: protected virtual Task InvokeHandlerAsync(IEventHandlerFactory factory, Type eventType, IEventData eventData, bool wait = true)
    parameters:
    - id: factory
      type: Hybrid.EventBuses.IEventHandlerFactory
      description: 事件处理器工厂
    - id: eventType
      type: System.Type
      description: 事件类型
    - id: eventData
      type: Hybrid.EventBuses.IEventData
      description: 事件数据
    - id: wait
      type: System.Boolean
      description: 是否等待结果返回
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: Protected Overridable Function InvokeHandlerAsync(factory As IEventHandlerFactory, eventType As Type, eventData As IEventData, wait As Boolean = True) As Task
  overload: Hybrid.EventBuses.EventBusBase.InvokeHandlerAsync*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
references:
- uid: Hybrid.EventBuses
  commentId: N:Hybrid.EventBuses
  name: Hybrid.EventBuses
  nameWithType: Hybrid.EventBuses
  fullName: Hybrid.EventBuses
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Hybrid.EventBuses.IEventBus
  commentId: T:Hybrid.EventBuses.IEventBus
  parent: Hybrid.EventBuses
  name: IEventBus
  nameWithType: IEventBus
  fullName: Hybrid.EventBuses.IEventBus
- uid: Hybrid.EventBuses.IEventSubscriber
  commentId: T:Hybrid.EventBuses.IEventSubscriber
  parent: Hybrid.EventBuses
  name: IEventSubscriber
  nameWithType: IEventSubscriber
  fullName: Hybrid.EventBuses.IEventSubscriber
- uid: Hybrid.EventBuses.IEventPublisher
  commentId: T:Hybrid.EventBuses.IEventPublisher
  parent: Hybrid.EventBuses
  name: IEventPublisher
  nameWithType: IEventPublisher
  fullName: Hybrid.EventBuses.IEventPublisher
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EventBuses.EventBusBase.OSharp.Entity.EntityExtensions.CheckICreatedTime``2
  commentId: M:OSharp.Entity.EntityExtensions.CheckICreatedTime``2(``0)
  parent: OSharp.Entity.EntityExtensions
  definition: OSharp.Entity.EntityExtensions.CheckICreatedTime``2(``0)
  name: CheckICreatedTime<EventBusBase, TKey>()
  nameWithType: EntityExtensions.CheckICreatedTime<EventBusBase, TKey>()
  fullName: OSharp.Entity.EntityExtensions.CheckICreatedTime<Hybrid.EventBuses.EventBusBase, TKey>()
  nameWithType.vb: EntityExtensions.CheckICreatedTime(Of EventBusBase, TKey)()
  fullName.vb: OSharp.Entity.EntityExtensions.CheckICreatedTime(Of Hybrid.EventBuses.EventBusBase, TKey)()
  name.vb: CheckICreatedTime(Of EventBusBase, TKey)()
  spec.csharp:
  - uid: OSharp.Entity.EntityExtensions.CheckICreatedTime``2
    name: CheckICreatedTime<EventBusBase, TKey>
    nameWithType: EntityExtensions.CheckICreatedTime<EventBusBase, TKey>
    fullName: OSharp.Entity.EntityExtensions.CheckICreatedTime<Hybrid.EventBuses.EventBusBase, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Entity.EntityExtensions.CheckICreatedTime``2
    name: CheckICreatedTime(Of EventBusBase, TKey)
    nameWithType: EntityExtensions.CheckICreatedTime(Of EventBusBase, TKey)
    fullName: OSharp.Entity.EntityExtensions.CheckICreatedTime(Of Hybrid.EventBuses.EventBusBase, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EventBuses.EventBusBase.OSharp.Entity.EntityExtensions.CheckICreationAudited``3(System.Security.Principal.IPrincipal)
  commentId: M:OSharp.Entity.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
  parent: OSharp.Entity.EntityExtensions
  definition: OSharp.Entity.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
  name: CheckICreationAudited<EventBusBase, TKey, TUserKey>(IPrincipal)
  nameWithType: EntityExtensions.CheckICreationAudited<EventBusBase, TKey, TUserKey>(IPrincipal)
  fullName: OSharp.Entity.EntityExtensions.CheckICreationAudited<Hybrid.EventBuses.EventBusBase, TKey, TUserKey>(System.Security.Principal.IPrincipal)
  nameWithType.vb: EntityExtensions.CheckICreationAudited(Of EventBusBase, TKey, TUserKey)(IPrincipal)
  fullName.vb: OSharp.Entity.EntityExtensions.CheckICreationAudited(Of Hybrid.EventBuses.EventBusBase, TKey, TUserKey)(System.Security.Principal.IPrincipal)
  name.vb: CheckICreationAudited(Of EventBusBase, TKey, TUserKey)(IPrincipal)
  spec.csharp:
  - uid: OSharp.Entity.EntityExtensions.CheckICreationAudited``3(System.Security.Principal.IPrincipal)
    name: CheckICreationAudited<EventBusBase, TKey, TUserKey>
    nameWithType: EntityExtensions.CheckICreationAudited<EventBusBase, TKey, TUserKey>
    fullName: OSharp.Entity.EntityExtensions.CheckICreationAudited<Hybrid.EventBuses.EventBusBase, TKey, TUserKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Entity.EntityExtensions.CheckICreationAudited``3(System.Security.Principal.IPrincipal)
    name: CheckICreationAudited(Of EventBusBase, TKey, TUserKey)
    nameWithType: EntityExtensions.CheckICreationAudited(Of EventBusBase, TKey, TUserKey)
    fullName: OSharp.Entity.EntityExtensions.CheckICreationAudited(Of Hybrid.EventBuses.EventBusBase, TKey, TUserKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EventBuses.EventBusBase.OSharp.Entity.EntityExtensions.CheckIUpdateAudited``3(System.Security.Principal.IPrincipal)
  commentId: M:OSharp.Entity.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
  parent: OSharp.Entity.EntityExtensions
  definition: OSharp.Entity.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
  name: CheckIUpdateAudited<EventBusBase, TKey, TUserKey>(IPrincipal)
  nameWithType: EntityExtensions.CheckIUpdateAudited<EventBusBase, TKey, TUserKey>(IPrincipal)
  fullName: OSharp.Entity.EntityExtensions.CheckIUpdateAudited<Hybrid.EventBuses.EventBusBase, TKey, TUserKey>(System.Security.Principal.IPrincipal)
  nameWithType.vb: EntityExtensions.CheckIUpdateAudited(Of EventBusBase, TKey, TUserKey)(IPrincipal)
  fullName.vb: OSharp.Entity.EntityExtensions.CheckIUpdateAudited(Of Hybrid.EventBuses.EventBusBase, TKey, TUserKey)(System.Security.Principal.IPrincipal)
  name.vb: CheckIUpdateAudited(Of EventBusBase, TKey, TUserKey)(IPrincipal)
  spec.csharp:
  - uid: OSharp.Entity.EntityExtensions.CheckIUpdateAudited``3(System.Security.Principal.IPrincipal)
    name: CheckIUpdateAudited<EventBusBase, TKey, TUserKey>
    nameWithType: EntityExtensions.CheckIUpdateAudited<EventBusBase, TKey, TUserKey>
    fullName: OSharp.Entity.EntityExtensions.CheckIUpdateAudited<Hybrid.EventBuses.EventBusBase, TKey, TUserKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Entity.EntityExtensions.CheckIUpdateAudited``3(System.Security.Principal.IPrincipal)
    name: CheckIUpdateAudited(Of EventBusBase, TKey, TUserKey)
    nameWithType: EntityExtensions.CheckIUpdateAudited(Of EventBusBase, TKey, TUserKey)
    fullName: OSharp.Entity.EntityExtensions.CheckIUpdateAudited(Of Hybrid.EventBuses.EventBusBase, TKey, TUserKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.OSharp.Extensions.ObjectExtensions.CastTo(System.Type)
  commentId: M:OSharp.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
  parent: OSharp.Extensions.ObjectExtensions
  definition: OSharp.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
  name: CastTo(Type)
  nameWithType: ObjectExtensions.CastTo(Type)
  fullName: OSharp.Extensions.ObjectExtensions.CastTo(System.Type)
  spec.csharp:
  - uid: OSharp.Extensions.ObjectExtensions.CastTo(System.Type)
    name: CastTo
    nameWithType: ObjectExtensions.CastTo
    fullName: OSharp.Extensions.ObjectExtensions.CastTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ObjectExtensions.CastTo(System.Type)
    name: CastTo
    nameWithType: ObjectExtensions.CastTo
    fullName: OSharp.Extensions.ObjectExtensions.CastTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.OSharp.Extensions.ObjectExtensions.CastTo``1
  commentId: M:OSharp.Extensions.ObjectExtensions.CastTo``1(System.Object)
  parent: OSharp.Extensions.ObjectExtensions
  definition: OSharp.Extensions.ObjectExtensions.CastTo``1(System.Object)
  name: CastTo<T>()
  nameWithType: ObjectExtensions.CastTo<T>()
  fullName: OSharp.Extensions.ObjectExtensions.CastTo<T>()
  nameWithType.vb: ObjectExtensions.CastTo(Of T)()
  fullName.vb: OSharp.Extensions.ObjectExtensions.CastTo(Of T)()
  name.vb: CastTo(Of T)()
  spec.csharp:
  - uid: OSharp.Extensions.ObjectExtensions.CastTo``1
    name: CastTo<T>
    nameWithType: ObjectExtensions.CastTo<T>
    fullName: OSharp.Extensions.ObjectExtensions.CastTo<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ObjectExtensions.CastTo``1
    name: CastTo(Of T)
    nameWithType: ObjectExtensions.CastTo(Of T)
    fullName: OSharp.Extensions.ObjectExtensions.CastTo(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.OSharp.Extensions.ObjectExtensions.CastTo``1({T})
  commentId: M:OSharp.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
  parent: OSharp.Extensions.ObjectExtensions
  definition: OSharp.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
  name: CastTo<T>(T)
  nameWithType: ObjectExtensions.CastTo<T>(T)
  fullName: OSharp.Extensions.ObjectExtensions.CastTo<T>(T)
  nameWithType.vb: ObjectExtensions.CastTo(Of T)(T)
  fullName.vb: OSharp.Extensions.ObjectExtensions.CastTo(Of T)(T)
  name.vb: CastTo(Of T)(T)
  spec.csharp:
  - uid: OSharp.Extensions.ObjectExtensions.CastTo``1(``0)
    name: CastTo<T>
    nameWithType: ObjectExtensions.CastTo<T>
    fullName: OSharp.Extensions.ObjectExtensions.CastTo<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ObjectExtensions.CastTo``1(``0)
    name: CastTo(Of T)
    nameWithType: ObjectExtensions.CastTo(Of T)
    fullName: OSharp.Extensions.ObjectExtensions.CastTo(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EventBuses.EventBusBase.OSharp.Extensions.ObjectExtensions.IsIn``1(Hybrid.EventBuses.EventBusBase[])
  commentId: M:OSharp.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
  parent: OSharp.Extensions.ObjectExtensions
  definition: OSharp.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
  name: IsIn<EventBusBase>(EventBusBase[])
  nameWithType: ObjectExtensions.IsIn<EventBusBase>(EventBusBase[])
  fullName: OSharp.Extensions.ObjectExtensions.IsIn<Hybrid.EventBuses.EventBusBase>(Hybrid.EventBuses.EventBusBase[])
  nameWithType.vb: ObjectExtensions.IsIn(Of EventBusBase)(EventBusBase())
  fullName.vb: OSharp.Extensions.ObjectExtensions.IsIn(Of Hybrid.EventBuses.EventBusBase)(Hybrid.EventBuses.EventBusBase())
  name.vb: IsIn(Of EventBusBase)(EventBusBase())
  spec.csharp:
  - uid: OSharp.Extensions.ObjectExtensions.IsIn``1(``0[])
    name: IsIn<EventBusBase>
    nameWithType: ObjectExtensions.IsIn<EventBusBase>
    fullName: OSharp.Extensions.ObjectExtensions.IsIn<Hybrid.EventBuses.EventBusBase>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Hybrid.EventBuses.EventBusBase
    name: EventBusBase
    nameWithType: EventBusBase
    fullName: Hybrid.EventBuses.EventBusBase
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ObjectExtensions.IsIn``1(``0[])
    name: IsIn(Of EventBusBase)
    nameWithType: ObjectExtensions.IsIn(Of EventBusBase)
    fullName: OSharp.Extensions.ObjectExtensions.IsIn(Of Hybrid.EventBuses.EventBusBase)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Hybrid.EventBuses.EventBusBase
    name: EventBusBase
    nameWithType: EventBusBase
    fullName: Hybrid.EventBuses.EventBusBase
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.OSharp.Extensions.ObjectExtensions.ToDynamic
  commentId: M:OSharp.Extensions.ObjectExtensions.ToDynamic(System.Object)
  parent: OSharp.Extensions.ObjectExtensions
  definition: OSharp.Extensions.ObjectExtensions.ToDynamic(System.Object)
  name: ToDynamic()
  nameWithType: ObjectExtensions.ToDynamic()
  fullName: OSharp.Extensions.ObjectExtensions.ToDynamic()
  spec.csharp:
  - uid: OSharp.Extensions.ObjectExtensions.ToDynamic
    name: ToDynamic
    nameWithType: ObjectExtensions.ToDynamic
    fullName: OSharp.Extensions.ObjectExtensions.ToDynamic
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ObjectExtensions.ToDynamic
    name: ToDynamic
    nameWithType: ObjectExtensions.ToDynamic
    fullName: OSharp.Extensions.ObjectExtensions.ToDynamic
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EventBuses.EventBusBase.OSharp.Extensions.ObjectExtensions.DeepClone``1
  commentId: M:OSharp.Extensions.ObjectExtensions.DeepClone``1(``0)
  parent: OSharp.Extensions.ObjectExtensions
  definition: OSharp.Extensions.ObjectExtensions.DeepClone``1(``0)
  name: DeepClone<EventBusBase>()
  nameWithType: ObjectExtensions.DeepClone<EventBusBase>()
  fullName: OSharp.Extensions.ObjectExtensions.DeepClone<Hybrid.EventBuses.EventBusBase>()
  nameWithType.vb: ObjectExtensions.DeepClone(Of EventBusBase)()
  fullName.vb: OSharp.Extensions.ObjectExtensions.DeepClone(Of Hybrid.EventBuses.EventBusBase)()
  name.vb: DeepClone(Of EventBusBase)()
  spec.csharp:
  - uid: OSharp.Extensions.ObjectExtensions.DeepClone``1
    name: DeepClone<EventBusBase>
    nameWithType: ObjectExtensions.DeepClone<EventBusBase>
    fullName: OSharp.Extensions.ObjectExtensions.DeepClone<Hybrid.EventBuses.EventBusBase>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ObjectExtensions.DeepClone``1
    name: DeepClone(Of EventBusBase)
    nameWithType: ObjectExtensions.DeepClone(Of EventBusBase)
    fullName: OSharp.Extensions.ObjectExtensions.DeepClone(Of Hybrid.EventBuses.EventBusBase)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EventBuses.EventBusBase.OSharp.Extensions.ParameterCheckExtensions.Required``1(System.Func{Hybrid.EventBuses.EventBusBase,System.Boolean},System.String)
  commentId: M:OSharp.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
  parent: OSharp.Extensions.ParameterCheckExtensions
  definition: OSharp.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
  name: Required<EventBusBase>(Func<EventBusBase, Boolean>, String)
  nameWithType: ParameterCheckExtensions.Required<EventBusBase>(Func<EventBusBase, Boolean>, String)
  fullName: OSharp.Extensions.ParameterCheckExtensions.Required<Hybrid.EventBuses.EventBusBase>(System.Func<Hybrid.EventBuses.EventBusBase, System.Boolean>, System.String)
  nameWithType.vb: ParameterCheckExtensions.Required(Of EventBusBase)(Func(Of EventBusBase, Boolean), String)
  fullName.vb: OSharp.Extensions.ParameterCheckExtensions.Required(Of Hybrid.EventBuses.EventBusBase)(System.Func(Of Hybrid.EventBuses.EventBusBase, System.Boolean), System.String)
  name.vb: Required(Of EventBusBase)(Func(Of EventBusBase, Boolean), String)
  spec.csharp:
  - uid: OSharp.Extensions.ParameterCheckExtensions.Required``1(System.Func{``0,System.Boolean},System.String)
    name: Required<EventBusBase>
    nameWithType: ParameterCheckExtensions.Required<EventBusBase>
    fullName: OSharp.Extensions.ParameterCheckExtensions.Required<Hybrid.EventBuses.EventBusBase>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.EventBuses.EventBusBase
    name: EventBusBase
    nameWithType: EventBusBase
    fullName: Hybrid.EventBuses.EventBusBase
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ParameterCheckExtensions.Required``1(System.Func{``0,System.Boolean},System.String)
    name: Required(Of EventBusBase)
    nameWithType: ParameterCheckExtensions.Required(Of EventBusBase)
    fullName: OSharp.Extensions.ParameterCheckExtensions.Required(Of Hybrid.EventBuses.EventBusBase)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.EventBuses.EventBusBase
    name: EventBusBase
    nameWithType: EventBusBase
    fullName: Hybrid.EventBuses.EventBusBase
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EventBuses.EventBusBase.OSharp.Extensions.ParameterCheckExtensions.Required``2(System.Func{Hybrid.EventBuses.EventBusBase,System.Boolean},System.String)
  commentId: M:OSharp.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
  parent: OSharp.Extensions.ParameterCheckExtensions
  definition: OSharp.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
  name: Required<EventBusBase, TException>(Func<EventBusBase, Boolean>, String)
  nameWithType: ParameterCheckExtensions.Required<EventBusBase, TException>(Func<EventBusBase, Boolean>, String)
  fullName: OSharp.Extensions.ParameterCheckExtensions.Required<Hybrid.EventBuses.EventBusBase, TException>(System.Func<Hybrid.EventBuses.EventBusBase, System.Boolean>, System.String)
  nameWithType.vb: ParameterCheckExtensions.Required(Of EventBusBase, TException)(Func(Of EventBusBase, Boolean), String)
  fullName.vb: OSharp.Extensions.ParameterCheckExtensions.Required(Of Hybrid.EventBuses.EventBusBase, TException)(System.Func(Of Hybrid.EventBuses.EventBusBase, System.Boolean), System.String)
  name.vb: Required(Of EventBusBase, TException)(Func(Of EventBusBase, Boolean), String)
  spec.csharp:
  - uid: OSharp.Extensions.ParameterCheckExtensions.Required``2(System.Func{``0,System.Boolean},System.String)
    name: Required<EventBusBase, TException>
    nameWithType: ParameterCheckExtensions.Required<EventBusBase, TException>
    fullName: OSharp.Extensions.ParameterCheckExtensions.Required<Hybrid.EventBuses.EventBusBase, TException>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.EventBuses.EventBusBase
    name: EventBusBase
    nameWithType: EventBusBase
    fullName: Hybrid.EventBuses.EventBusBase
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ParameterCheckExtensions.Required``2(System.Func{``0,System.Boolean},System.String)
    name: Required(Of EventBusBase, TException)
    nameWithType: ParameterCheckExtensions.Required(Of EventBusBase, TException)
    fullName: OSharp.Extensions.ParameterCheckExtensions.Required(Of Hybrid.EventBuses.EventBusBase, TException)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.EventBuses.EventBusBase
    name: EventBusBase
    nameWithType: EventBusBase
    fullName: Hybrid.EventBuses.EventBusBase
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EventBuses.EventBusBase.OSharp.Extensions.ParameterCheckExtensions.CheckNotNull``1(System.String)
  commentId: M:OSharp.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
  parent: OSharp.Extensions.ParameterCheckExtensions
  definition: OSharp.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
  name: CheckNotNull<EventBusBase>(String)
  nameWithType: ParameterCheckExtensions.CheckNotNull<EventBusBase>(String)
  fullName: OSharp.Extensions.ParameterCheckExtensions.CheckNotNull<Hybrid.EventBuses.EventBusBase>(System.String)
  nameWithType.vb: ParameterCheckExtensions.CheckNotNull(Of EventBusBase)(String)
  fullName.vb: OSharp.Extensions.ParameterCheckExtensions.CheckNotNull(Of Hybrid.EventBuses.EventBusBase)(System.String)
  name.vb: CheckNotNull(Of EventBusBase)(String)
  spec.csharp:
  - uid: OSharp.Extensions.ParameterCheckExtensions.CheckNotNull``1(System.String)
    name: CheckNotNull<EventBusBase>
    nameWithType: ParameterCheckExtensions.CheckNotNull<EventBusBase>
    fullName: OSharp.Extensions.ParameterCheckExtensions.CheckNotNull<Hybrid.EventBuses.EventBusBase>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ParameterCheckExtensions.CheckNotNull``1(System.String)
    name: CheckNotNull(Of EventBusBase)
    nameWithType: ParameterCheckExtensions.CheckNotNull(Of EventBusBase)
    fullName: OSharp.Extensions.ParameterCheckExtensions.CheckNotNull(Of Hybrid.EventBuses.EventBusBase)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EventBuses.EventBusBase.OSharp.Extensions.TryCatchExtensions.TryCatch``1(System.Action{Hybrid.EventBuses.EventBusBase},System.Action{System.Exception},System.Action{Hybrid.EventBuses.EventBusBase})
  commentId: M:OSharp.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
  parent: OSharp.Extensions.TryCatchExtensions
  definition: OSharp.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
  name: TryCatch<EventBusBase>(Action<EventBusBase>, Action<Exception>, Action<EventBusBase>)
  nameWithType: TryCatchExtensions.TryCatch<EventBusBase>(Action<EventBusBase>, Action<Exception>, Action<EventBusBase>)
  fullName: OSharp.Extensions.TryCatchExtensions.TryCatch<Hybrid.EventBuses.EventBusBase>(System.Action<Hybrid.EventBuses.EventBusBase>, System.Action<System.Exception>, System.Action<Hybrid.EventBuses.EventBusBase>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of EventBusBase)(Action(Of EventBusBase), Action(Of Exception), Action(Of EventBusBase))
  fullName.vb: OSharp.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.EventBuses.EventBusBase)(System.Action(Of Hybrid.EventBuses.EventBusBase), System.Action(Of System.Exception), System.Action(Of Hybrid.EventBuses.EventBusBase))
  name.vb: TryCatch(Of EventBusBase)(Action(Of EventBusBase), Action(Of Exception), Action(Of EventBusBase))
  spec.csharp:
  - uid: OSharp.Extensions.TryCatchExtensions.TryCatch``1(System.Action{``0},System.Action{System.Exception},System.Action{``0})
    name: TryCatch<EventBusBase>
    nameWithType: TryCatchExtensions.TryCatch<EventBusBase>
    fullName: OSharp.Extensions.TryCatchExtensions.TryCatch<Hybrid.EventBuses.EventBusBase>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.EventBuses.EventBusBase
    name: EventBusBase
    nameWithType: EventBusBase
    fullName: Hybrid.EventBuses.EventBusBase
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.EventBuses.EventBusBase
    name: EventBusBase
    nameWithType: EventBusBase
    fullName: Hybrid.EventBuses.EventBusBase
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.TryCatchExtensions.TryCatch``1(System.Action{``0},System.Action{System.Exception},System.Action{``0})
    name: TryCatch(Of EventBusBase)
    nameWithType: TryCatchExtensions.TryCatch(Of EventBusBase)
    fullName: OSharp.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.EventBuses.EventBusBase)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.EventBuses.EventBusBase
    name: EventBusBase
    nameWithType: EventBusBase
    fullName: Hybrid.EventBuses.EventBusBase
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.EventBuses.EventBusBase
    name: EventBusBase
    nameWithType: EventBusBase
    fullName: Hybrid.EventBuses.EventBusBase
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EventBuses.EventBusBase.OSharp.Extensions.TryCatchExtensions.TryCatch``1(System.Action{Hybrid.EventBuses.EventBusBase},System.Action{System.Exception})
  commentId: M:OSharp.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
  parent: OSharp.Extensions.TryCatchExtensions
  definition: OSharp.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
  name: TryCatch<EventBusBase>(Action<EventBusBase>, Action<Exception>)
  nameWithType: TryCatchExtensions.TryCatch<EventBusBase>(Action<EventBusBase>, Action<Exception>)
  fullName: OSharp.Extensions.TryCatchExtensions.TryCatch<Hybrid.EventBuses.EventBusBase>(System.Action<Hybrid.EventBuses.EventBusBase>, System.Action<System.Exception>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of EventBusBase)(Action(Of EventBusBase), Action(Of Exception))
  fullName.vb: OSharp.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.EventBuses.EventBusBase)(System.Action(Of Hybrid.EventBuses.EventBusBase), System.Action(Of System.Exception))
  name.vb: TryCatch(Of EventBusBase)(Action(Of EventBusBase), Action(Of Exception))
  spec.csharp:
  - uid: OSharp.Extensions.TryCatchExtensions.TryCatch``1(System.Action{``0},System.Action{System.Exception})
    name: TryCatch<EventBusBase>
    nameWithType: TryCatchExtensions.TryCatch<EventBusBase>
    fullName: OSharp.Extensions.TryCatchExtensions.TryCatch<Hybrid.EventBuses.EventBusBase>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.EventBuses.EventBusBase
    name: EventBusBase
    nameWithType: EventBusBase
    fullName: Hybrid.EventBuses.EventBusBase
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.TryCatchExtensions.TryCatch``1(System.Action{``0},System.Action{System.Exception})
    name: TryCatch(Of EventBusBase)
    nameWithType: TryCatchExtensions.TryCatch(Of EventBusBase)
    fullName: OSharp.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.EventBuses.EventBusBase)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.EventBuses.EventBusBase
    name: EventBusBase
    nameWithType: EventBusBase
    fullName: Hybrid.EventBuses.EventBusBase
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EventBuses.EventBusBase.OSharp.Extensions.TryCatchExtensions.TryCatch``2(System.Func{Hybrid.EventBuses.EventBusBase,{TResult}},System.Action{System.Exception},System.Action{Hybrid.EventBuses.EventBusBase})
  commentId: M:OSharp.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
  parent: OSharp.Extensions.TryCatchExtensions
  definition: OSharp.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
  name: TryCatch<EventBusBase, TResult>(Func<EventBusBase, TResult>, Action<Exception>, Action<EventBusBase>)
  nameWithType: TryCatchExtensions.TryCatch<EventBusBase, TResult>(Func<EventBusBase, TResult>, Action<Exception>, Action<EventBusBase>)
  fullName: OSharp.Extensions.TryCatchExtensions.TryCatch<Hybrid.EventBuses.EventBusBase, TResult>(System.Func<Hybrid.EventBuses.EventBusBase, TResult>, System.Action<System.Exception>, System.Action<Hybrid.EventBuses.EventBusBase>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of EventBusBase, TResult)(Func(Of EventBusBase, TResult), Action(Of Exception), Action(Of EventBusBase))
  fullName.vb: OSharp.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.EventBuses.EventBusBase, TResult)(System.Func(Of Hybrid.EventBuses.EventBusBase, TResult), System.Action(Of System.Exception), System.Action(Of Hybrid.EventBuses.EventBusBase))
  name.vb: TryCatch(Of EventBusBase, TResult)(Func(Of EventBusBase, TResult), Action(Of Exception), Action(Of EventBusBase))
  spec.csharp:
  - uid: OSharp.Extensions.TryCatchExtensions.TryCatch``2(System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
    name: TryCatch<EventBusBase, TResult>
    nameWithType: TryCatchExtensions.TryCatch<EventBusBase, TResult>
    fullName: OSharp.Extensions.TryCatchExtensions.TryCatch<Hybrid.EventBuses.EventBusBase, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.EventBuses.EventBusBase
    name: EventBusBase
    nameWithType: EventBusBase
    fullName: Hybrid.EventBuses.EventBusBase
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.EventBuses.EventBusBase
    name: EventBusBase
    nameWithType: EventBusBase
    fullName: Hybrid.EventBuses.EventBusBase
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.TryCatchExtensions.TryCatch``2(System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
    name: TryCatch(Of EventBusBase, TResult)
    nameWithType: TryCatchExtensions.TryCatch(Of EventBusBase, TResult)
    fullName: OSharp.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.EventBuses.EventBusBase, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.EventBuses.EventBusBase
    name: EventBusBase
    nameWithType: EventBusBase
    fullName: Hybrid.EventBuses.EventBusBase
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.EventBuses.EventBusBase
    name: EventBusBase
    nameWithType: EventBusBase
    fullName: Hybrid.EventBuses.EventBusBase
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EventBuses.EventBusBase.OSharp.Extensions.TryCatchExtensions.TryCatch``2(System.Func{Hybrid.EventBuses.EventBusBase,{TResult}},System.Action{System.Exception})
  commentId: M:OSharp.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
  parent: OSharp.Extensions.TryCatchExtensions
  definition: OSharp.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
  name: TryCatch<EventBusBase, TResult>(Func<EventBusBase, TResult>, Action<Exception>)
  nameWithType: TryCatchExtensions.TryCatch<EventBusBase, TResult>(Func<EventBusBase, TResult>, Action<Exception>)
  fullName: OSharp.Extensions.TryCatchExtensions.TryCatch<Hybrid.EventBuses.EventBusBase, TResult>(System.Func<Hybrid.EventBuses.EventBusBase, TResult>, System.Action<System.Exception>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of EventBusBase, TResult)(Func(Of EventBusBase, TResult), Action(Of Exception))
  fullName.vb: OSharp.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.EventBuses.EventBusBase, TResult)(System.Func(Of Hybrid.EventBuses.EventBusBase, TResult), System.Action(Of System.Exception))
  name.vb: TryCatch(Of EventBusBase, TResult)(Func(Of EventBusBase, TResult), Action(Of Exception))
  spec.csharp:
  - uid: OSharp.Extensions.TryCatchExtensions.TryCatch``2(System.Func{``0,``1},System.Action{System.Exception})
    name: TryCatch<EventBusBase, TResult>
    nameWithType: TryCatchExtensions.TryCatch<EventBusBase, TResult>
    fullName: OSharp.Extensions.TryCatchExtensions.TryCatch<Hybrid.EventBuses.EventBusBase, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.EventBuses.EventBusBase
    name: EventBusBase
    nameWithType: EventBusBase
    fullName: Hybrid.EventBuses.EventBusBase
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.TryCatchExtensions.TryCatch``2(System.Func{``0,``1},System.Action{System.Exception})
    name: TryCatch(Of EventBusBase, TResult)
    nameWithType: TryCatchExtensions.TryCatch(Of EventBusBase, TResult)
    fullName: OSharp.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.EventBuses.EventBusBase, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.EventBuses.EventBusBase
    name: EventBusBase
    nameWithType: EventBusBase
    fullName: Hybrid.EventBuses.EventBusBase
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EventBuses.EventBusBase.OSharp.Extensions.TryCatchExtensions.TryFinally``1(System.Action{Hybrid.EventBuses.EventBusBase},System.Action{Hybrid.EventBuses.EventBusBase})
  commentId: M:OSharp.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
  parent: OSharp.Extensions.TryCatchExtensions
  definition: OSharp.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
  name: TryFinally<EventBusBase>(Action<EventBusBase>, Action<EventBusBase>)
  nameWithType: TryCatchExtensions.TryFinally<EventBusBase>(Action<EventBusBase>, Action<EventBusBase>)
  fullName: OSharp.Extensions.TryCatchExtensions.TryFinally<Hybrid.EventBuses.EventBusBase>(System.Action<Hybrid.EventBuses.EventBusBase>, System.Action<Hybrid.EventBuses.EventBusBase>)
  nameWithType.vb: TryCatchExtensions.TryFinally(Of EventBusBase)(Action(Of EventBusBase), Action(Of EventBusBase))
  fullName.vb: OSharp.Extensions.TryCatchExtensions.TryFinally(Of Hybrid.EventBuses.EventBusBase)(System.Action(Of Hybrid.EventBuses.EventBusBase), System.Action(Of Hybrid.EventBuses.EventBusBase))
  name.vb: TryFinally(Of EventBusBase)(Action(Of EventBusBase), Action(Of EventBusBase))
  spec.csharp:
  - uid: OSharp.Extensions.TryCatchExtensions.TryFinally``1(System.Action{``0},System.Action{``0})
    name: TryFinally<EventBusBase>
    nameWithType: TryCatchExtensions.TryFinally<EventBusBase>
    fullName: OSharp.Extensions.TryCatchExtensions.TryFinally<Hybrid.EventBuses.EventBusBase>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.EventBuses.EventBusBase
    name: EventBusBase
    nameWithType: EventBusBase
    fullName: Hybrid.EventBuses.EventBusBase
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.EventBuses.EventBusBase
    name: EventBusBase
    nameWithType: EventBusBase
    fullName: Hybrid.EventBuses.EventBusBase
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.TryCatchExtensions.TryFinally``1(System.Action{``0},System.Action{``0})
    name: TryFinally(Of EventBusBase)
    nameWithType: TryCatchExtensions.TryFinally(Of EventBusBase)
    fullName: OSharp.Extensions.TryCatchExtensions.TryFinally(Of Hybrid.EventBuses.EventBusBase)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.EventBuses.EventBusBase
    name: EventBusBase
    nameWithType: EventBusBase
    fullName: Hybrid.EventBuses.EventBusBase
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.EventBuses.EventBusBase
    name: EventBusBase
    nameWithType: EventBusBase
    fullName: Hybrid.EventBuses.EventBusBase
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.OSharp.Json.JsonExtensions.ToJsonString(System.Boolean,System.Boolean)
  commentId: M:OSharp.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
  parent: OSharp.Json.JsonExtensions
  definition: OSharp.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
  name: ToJsonString(Boolean, Boolean)
  nameWithType: JsonExtensions.ToJsonString(Boolean, Boolean)
  fullName: OSharp.Json.JsonExtensions.ToJsonString(System.Boolean, System.Boolean)
  spec.csharp:
  - uid: OSharp.Json.JsonExtensions.ToJsonString(System.Boolean,System.Boolean)
    name: ToJsonString
    nameWithType: JsonExtensions.ToJsonString
    fullName: OSharp.Json.JsonExtensions.ToJsonString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Json.JsonExtensions.ToJsonString(System.Boolean,System.Boolean)
    name: ToJsonString
    nameWithType: JsonExtensions.ToJsonString
    fullName: OSharp.Json.JsonExtensions.ToJsonString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.OSharp.Mapping.MapperExtensions.MapTo``1
  commentId: M:OSharp.Mapping.MapperExtensions.MapTo``1(System.Object)
  parent: OSharp.Mapping.MapperExtensions
  definition: OSharp.Mapping.MapperExtensions.MapTo``1(System.Object)
  name: MapTo<TTarget>()
  nameWithType: MapperExtensions.MapTo<TTarget>()
  fullName: OSharp.Mapping.MapperExtensions.MapTo<TTarget>()
  nameWithType.vb: MapperExtensions.MapTo(Of TTarget)()
  fullName.vb: OSharp.Mapping.MapperExtensions.MapTo(Of TTarget)()
  name.vb: MapTo(Of TTarget)()
  spec.csharp:
  - uid: OSharp.Mapping.MapperExtensions.MapTo``1
    name: MapTo<TTarget>
    nameWithType: MapperExtensions.MapTo<TTarget>
    fullName: OSharp.Mapping.MapperExtensions.MapTo<TTarget>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Mapping.MapperExtensions.MapTo``1
    name: MapTo(Of TTarget)
    nameWithType: MapperExtensions.MapTo(Of TTarget)
    fullName: OSharp.Mapping.MapperExtensions.MapTo(Of TTarget)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EventBuses.EventBusBase.OSharp.Mapping.MapperExtensions.MapTo``2({TTarget})
  commentId: M:OSharp.Mapping.MapperExtensions.MapTo``2(``0,``1)
  parent: OSharp.Mapping.MapperExtensions
  definition: OSharp.Mapping.MapperExtensions.MapTo``2(``0,``1)
  name: MapTo<EventBusBase, TTarget>(TTarget)
  nameWithType: MapperExtensions.MapTo<EventBusBase, TTarget>(TTarget)
  fullName: OSharp.Mapping.MapperExtensions.MapTo<Hybrid.EventBuses.EventBusBase, TTarget>(TTarget)
  nameWithType.vb: MapperExtensions.MapTo(Of EventBusBase, TTarget)(TTarget)
  fullName.vb: OSharp.Mapping.MapperExtensions.MapTo(Of Hybrid.EventBuses.EventBusBase, TTarget)(TTarget)
  name.vb: MapTo(Of EventBusBase, TTarget)(TTarget)
  spec.csharp:
  - uid: OSharp.Mapping.MapperExtensions.MapTo``2(``1)
    name: MapTo<EventBusBase, TTarget>
    nameWithType: MapperExtensions.MapTo<EventBusBase, TTarget>
    fullName: OSharp.Mapping.MapperExtensions.MapTo<Hybrid.EventBuses.EventBusBase, TTarget>
  - name: (
    nameWithType: (
    fullName: (
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Mapping.MapperExtensions.MapTo``2(``1)
    name: MapTo(Of EventBusBase, TTarget)
    nameWithType: MapperExtensions.MapTo(Of EventBusBase, TTarget)
    fullName: OSharp.Mapping.MapperExtensions.MapTo(Of Hybrid.EventBuses.EventBusBase, TTarget)
  - name: (
    nameWithType: (
    fullName: (
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.OSharp.Reflection.LockExtensions.Locking(System.Action)
  commentId: M:OSharp.Reflection.LockExtensions.Locking(System.Object,System.Action)
  parent: OSharp.Reflection.LockExtensions
  definition: OSharp.Reflection.LockExtensions.Locking(System.Object,System.Action)
  name: Locking(Action)
  nameWithType: LockExtensions.Locking(Action)
  fullName: OSharp.Reflection.LockExtensions.Locking(System.Action)
  spec.csharp:
  - uid: OSharp.Reflection.LockExtensions.Locking(System.Action)
    name: Locking
    nameWithType: LockExtensions.Locking
    fullName: OSharp.Reflection.LockExtensions.Locking
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Reflection.LockExtensions.Locking(System.Action)
    name: Locking
    nameWithType: LockExtensions.Locking
    fullName: OSharp.Reflection.LockExtensions.Locking
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EventBuses.EventBusBase.OSharp.Reflection.LockExtensions.Locking``1(System.Action{Hybrid.EventBuses.EventBusBase})
  commentId: M:OSharp.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
  parent: OSharp.Reflection.LockExtensions
  definition: OSharp.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
  name: Locking<EventBusBase>(Action<EventBusBase>)
  nameWithType: LockExtensions.Locking<EventBusBase>(Action<EventBusBase>)
  fullName: OSharp.Reflection.LockExtensions.Locking<Hybrid.EventBuses.EventBusBase>(System.Action<Hybrid.EventBuses.EventBusBase>)
  nameWithType.vb: LockExtensions.Locking(Of EventBusBase)(Action(Of EventBusBase))
  fullName.vb: OSharp.Reflection.LockExtensions.Locking(Of Hybrid.EventBuses.EventBusBase)(System.Action(Of Hybrid.EventBuses.EventBusBase))
  name.vb: Locking(Of EventBusBase)(Action(Of EventBusBase))
  spec.csharp:
  - uid: OSharp.Reflection.LockExtensions.Locking``1(System.Action{``0})
    name: Locking<EventBusBase>
    nameWithType: LockExtensions.Locking<EventBusBase>
    fullName: OSharp.Reflection.LockExtensions.Locking<Hybrid.EventBuses.EventBusBase>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.EventBuses.EventBusBase
    name: EventBusBase
    nameWithType: EventBusBase
    fullName: Hybrid.EventBuses.EventBusBase
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Reflection.LockExtensions.Locking``1(System.Action{``0})
    name: Locking(Of EventBusBase)
    nameWithType: LockExtensions.Locking(Of EventBusBase)
    fullName: OSharp.Reflection.LockExtensions.Locking(Of Hybrid.EventBuses.EventBusBase)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.EventBuses.EventBusBase
    name: EventBusBase
    nameWithType: EventBusBase
    fullName: Hybrid.EventBuses.EventBusBase
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.OSharp.Reflection.LockExtensions.Locking``1(System.Func{{TResult}})
  commentId: M:OSharp.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
  parent: OSharp.Reflection.LockExtensions
  definition: OSharp.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
  name: Locking<TResult>(Func<TResult>)
  nameWithType: LockExtensions.Locking<TResult>(Func<TResult>)
  fullName: OSharp.Reflection.LockExtensions.Locking<TResult>(System.Func<TResult>)
  nameWithType.vb: LockExtensions.Locking(Of TResult)(Func(Of TResult))
  fullName.vb: OSharp.Reflection.LockExtensions.Locking(Of TResult)(System.Func(Of TResult))
  name.vb: Locking(Of TResult)(Func(Of TResult))
  spec.csharp:
  - uid: OSharp.Reflection.LockExtensions.Locking``1(System.Func{``0})
    name: Locking<TResult>
    nameWithType: LockExtensions.Locking<TResult>
    fullName: OSharp.Reflection.LockExtensions.Locking<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Reflection.LockExtensions.Locking``1(System.Func{``0})
    name: Locking(Of TResult)
    nameWithType: LockExtensions.Locking(Of TResult)
    fullName: OSharp.Reflection.LockExtensions.Locking(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EventBuses.EventBusBase.OSharp.Reflection.LockExtensions.Locking``2(System.Func{Hybrid.EventBuses.EventBusBase,{TResult}})
  commentId: M:OSharp.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
  parent: OSharp.Reflection.LockExtensions
  definition: OSharp.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
  name: Locking<EventBusBase, TResult>(Func<EventBusBase, TResult>)
  nameWithType: LockExtensions.Locking<EventBusBase, TResult>(Func<EventBusBase, TResult>)
  fullName: OSharp.Reflection.LockExtensions.Locking<Hybrid.EventBuses.EventBusBase, TResult>(System.Func<Hybrid.EventBuses.EventBusBase, TResult>)
  nameWithType.vb: LockExtensions.Locking(Of EventBusBase, TResult)(Func(Of EventBusBase, TResult))
  fullName.vb: OSharp.Reflection.LockExtensions.Locking(Of Hybrid.EventBuses.EventBusBase, TResult)(System.Func(Of Hybrid.EventBuses.EventBusBase, TResult))
  name.vb: Locking(Of EventBusBase, TResult)(Func(Of EventBusBase, TResult))
  spec.csharp:
  - uid: OSharp.Reflection.LockExtensions.Locking``2(System.Func{``0,``1})
    name: Locking<EventBusBase, TResult>
    nameWithType: LockExtensions.Locking<EventBusBase, TResult>
    fullName: OSharp.Reflection.LockExtensions.Locking<Hybrid.EventBuses.EventBusBase, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.EventBuses.EventBusBase
    name: EventBusBase
    nameWithType: EventBusBase
    fullName: Hybrid.EventBuses.EventBusBase
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Reflection.LockExtensions.Locking``2(System.Func{``0,``1})
    name: Locking(Of EventBusBase, TResult)
    nameWithType: LockExtensions.Locking(Of EventBusBase, TResult)
    fullName: OSharp.Reflection.LockExtensions.Locking(Of Hybrid.EventBuses.EventBusBase, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.EventBuses.EventBusBase
    name: EventBusBase
    nameWithType: EventBusBase
    fullName: Hybrid.EventBuses.EventBusBase
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Extensions.ObjectExtensions.CastTo(System.Type)
  commentId: M:Hybrid.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
  parent: Hybrid.Extensions.ObjectExtensions
  definition: Hybrid.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
  name: CastTo(Type)
  nameWithType: ObjectExtensions.CastTo(Type)
  fullName: Hybrid.Extensions.ObjectExtensions.CastTo(System.Type)
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo(System.Type)
    name: CastTo
    nameWithType: ObjectExtensions.CastTo
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo(System.Type)
    name: CastTo
    nameWithType: ObjectExtensions.CastTo
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Extensions.ObjectExtensions.CastTo``1
  commentId: M:Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object)
  parent: Hybrid.Extensions.ObjectExtensions
  definition: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object)
  name: CastTo<T>()
  nameWithType: ObjectExtensions.CastTo<T>()
  fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>()
  nameWithType.vb: ObjectExtensions.CastTo(Of T)()
  fullName.vb: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)()
  name.vb: CastTo(Of T)()
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1
    name: CastTo<T>
    nameWithType: ObjectExtensions.CastTo<T>
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1
    name: CastTo(Of T)
    nameWithType: ObjectExtensions.CastTo(Of T)
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Extensions.ObjectExtensions.CastTo``1({T})
  commentId: M:Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
  parent: Hybrid.Extensions.ObjectExtensions
  definition: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
  name: CastTo<T>(T)
  nameWithType: ObjectExtensions.CastTo<T>(T)
  fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>(T)
  nameWithType.vb: ObjectExtensions.CastTo(Of T)(T)
  fullName.vb: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)(T)
  name.vb: CastTo(Of T)(T)
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(``0)
    name: CastTo<T>
    nameWithType: ObjectExtensions.CastTo<T>
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(``0)
    name: CastTo(Of T)
    nameWithType: ObjectExtensions.CastTo(Of T)
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EventBuses.EventBusBase.Hybrid.Extensions.ObjectExtensions.IsIn``1(Hybrid.EventBuses.EventBusBase[])
  commentId: M:Hybrid.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
  parent: Hybrid.Extensions.ObjectExtensions
  definition: Hybrid.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
  name: IsIn<EventBusBase>(EventBusBase[])
  nameWithType: ObjectExtensions.IsIn<EventBusBase>(EventBusBase[])
  fullName: Hybrid.Extensions.ObjectExtensions.IsIn<Hybrid.EventBuses.EventBusBase>(Hybrid.EventBuses.EventBusBase[])
  nameWithType.vb: ObjectExtensions.IsIn(Of EventBusBase)(EventBusBase())
  fullName.vb: Hybrid.Extensions.ObjectExtensions.IsIn(Of Hybrid.EventBuses.EventBusBase)(Hybrid.EventBuses.EventBusBase())
  name.vb: IsIn(Of EventBusBase)(EventBusBase())
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.IsIn``1(``0[])
    name: IsIn<EventBusBase>
    nameWithType: ObjectExtensions.IsIn<EventBusBase>
    fullName: Hybrid.Extensions.ObjectExtensions.IsIn<Hybrid.EventBuses.EventBusBase>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Hybrid.EventBuses.EventBusBase
    name: EventBusBase
    nameWithType: EventBusBase
    fullName: Hybrid.EventBuses.EventBusBase
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.IsIn``1(``0[])
    name: IsIn(Of EventBusBase)
    nameWithType: ObjectExtensions.IsIn(Of EventBusBase)
    fullName: Hybrid.Extensions.ObjectExtensions.IsIn(Of Hybrid.EventBuses.EventBusBase)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Hybrid.EventBuses.EventBusBase
    name: EventBusBase
    nameWithType: EventBusBase
    fullName: Hybrid.EventBuses.EventBusBase
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Extensions.ObjectExtensions.ToDynamic
  commentId: M:Hybrid.Extensions.ObjectExtensions.ToDynamic(System.Object)
  parent: Hybrid.Extensions.ObjectExtensions
  definition: Hybrid.Extensions.ObjectExtensions.ToDynamic(System.Object)
  name: ToDynamic()
  nameWithType: ObjectExtensions.ToDynamic()
  fullName: Hybrid.Extensions.ObjectExtensions.ToDynamic()
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.ToDynamic
    name: ToDynamic
    nameWithType: ObjectExtensions.ToDynamic
    fullName: Hybrid.Extensions.ObjectExtensions.ToDynamic
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.ToDynamic
    name: ToDynamic
    nameWithType: ObjectExtensions.ToDynamic
    fullName: Hybrid.Extensions.ObjectExtensions.ToDynamic
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EventBuses.EventBusBase.Hybrid.Extensions.ObjectExtensions.DeepClone``1
  commentId: M:Hybrid.Extensions.ObjectExtensions.DeepClone``1(``0)
  parent: Hybrid.Extensions.ObjectExtensions
  definition: Hybrid.Extensions.ObjectExtensions.DeepClone``1(``0)
  name: DeepClone<EventBusBase>()
  nameWithType: ObjectExtensions.DeepClone<EventBusBase>()
  fullName: Hybrid.Extensions.ObjectExtensions.DeepClone<Hybrid.EventBuses.EventBusBase>()
  nameWithType.vb: ObjectExtensions.DeepClone(Of EventBusBase)()
  fullName.vb: Hybrid.Extensions.ObjectExtensions.DeepClone(Of Hybrid.EventBuses.EventBusBase)()
  name.vb: DeepClone(Of EventBusBase)()
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.DeepClone``1
    name: DeepClone<EventBusBase>
    nameWithType: ObjectExtensions.DeepClone<EventBusBase>
    fullName: Hybrid.Extensions.ObjectExtensions.DeepClone<Hybrid.EventBuses.EventBusBase>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.DeepClone``1
    name: DeepClone(Of EventBusBase)
    nameWithType: ObjectExtensions.DeepClone(Of EventBusBase)
    fullName: Hybrid.Extensions.ObjectExtensions.DeepClone(Of Hybrid.EventBuses.EventBusBase)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EventBuses.EventBusBase.Hybrid.Extensions.ParameterCheckExtensions.Required``1(System.Func{Hybrid.EventBuses.EventBusBase,System.Boolean},System.String)
  commentId: M:Hybrid.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
  parent: Hybrid.Extensions.ParameterCheckExtensions
  definition: Hybrid.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
  name: Required<EventBusBase>(Func<EventBusBase, Boolean>, String)
  nameWithType: ParameterCheckExtensions.Required<EventBusBase>(Func<EventBusBase, Boolean>, String)
  fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<Hybrid.EventBuses.EventBusBase>(System.Func<Hybrid.EventBuses.EventBusBase, System.Boolean>, System.String)
  nameWithType.vb: ParameterCheckExtensions.Required(Of EventBusBase)(Func(Of EventBusBase, Boolean), String)
  fullName.vb: Hybrid.Extensions.ParameterCheckExtensions.Required(Of Hybrid.EventBuses.EventBusBase)(System.Func(Of Hybrid.EventBuses.EventBusBase, System.Boolean), System.String)
  name.vb: Required(Of EventBusBase)(Func(Of EventBusBase, Boolean), String)
  spec.csharp:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``1(System.Func{``0,System.Boolean},System.String)
    name: Required<EventBusBase>
    nameWithType: ParameterCheckExtensions.Required<EventBusBase>
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<Hybrid.EventBuses.EventBusBase>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.EventBuses.EventBusBase
    name: EventBusBase
    nameWithType: EventBusBase
    fullName: Hybrid.EventBuses.EventBusBase
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``1(System.Func{``0,System.Boolean},System.String)
    name: Required(Of EventBusBase)
    nameWithType: ParameterCheckExtensions.Required(Of EventBusBase)
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required(Of Hybrid.EventBuses.EventBusBase)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.EventBuses.EventBusBase
    name: EventBusBase
    nameWithType: EventBusBase
    fullName: Hybrid.EventBuses.EventBusBase
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EventBuses.EventBusBase.Hybrid.Extensions.ParameterCheckExtensions.Required``2(System.Func{Hybrid.EventBuses.EventBusBase,System.Boolean},System.String)
  commentId: M:Hybrid.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
  parent: Hybrid.Extensions.ParameterCheckExtensions
  definition: Hybrid.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
  name: Required<EventBusBase, TException>(Func<EventBusBase, Boolean>, String)
  nameWithType: ParameterCheckExtensions.Required<EventBusBase, TException>(Func<EventBusBase, Boolean>, String)
  fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<Hybrid.EventBuses.EventBusBase, TException>(System.Func<Hybrid.EventBuses.EventBusBase, System.Boolean>, System.String)
  nameWithType.vb: ParameterCheckExtensions.Required(Of EventBusBase, TException)(Func(Of EventBusBase, Boolean), String)
  fullName.vb: Hybrid.Extensions.ParameterCheckExtensions.Required(Of Hybrid.EventBuses.EventBusBase, TException)(System.Func(Of Hybrid.EventBuses.EventBusBase, System.Boolean), System.String)
  name.vb: Required(Of EventBusBase, TException)(Func(Of EventBusBase, Boolean), String)
  spec.csharp:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``2(System.Func{``0,System.Boolean},System.String)
    name: Required<EventBusBase, TException>
    nameWithType: ParameterCheckExtensions.Required<EventBusBase, TException>
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<Hybrid.EventBuses.EventBusBase, TException>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.EventBuses.EventBusBase
    name: EventBusBase
    nameWithType: EventBusBase
    fullName: Hybrid.EventBuses.EventBusBase
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``2(System.Func{``0,System.Boolean},System.String)
    name: Required(Of EventBusBase, TException)
    nameWithType: ParameterCheckExtensions.Required(Of EventBusBase, TException)
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required(Of Hybrid.EventBuses.EventBusBase, TException)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.EventBuses.EventBusBase
    name: EventBusBase
    nameWithType: EventBusBase
    fullName: Hybrid.EventBuses.EventBusBase
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EventBuses.EventBusBase.Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(System.String)
  commentId: M:Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
  parent: Hybrid.Extensions.ParameterCheckExtensions
  definition: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
  name: CheckNotNull<EventBusBase>(String)
  nameWithType: ParameterCheckExtensions.CheckNotNull<EventBusBase>(String)
  fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull<Hybrid.EventBuses.EventBusBase>(System.String)
  nameWithType.vb: ParameterCheckExtensions.CheckNotNull(Of EventBusBase)(String)
  fullName.vb: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull(Of Hybrid.EventBuses.EventBusBase)(System.String)
  name.vb: CheckNotNull(Of EventBusBase)(String)
  spec.csharp:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(System.String)
    name: CheckNotNull<EventBusBase>
    nameWithType: ParameterCheckExtensions.CheckNotNull<EventBusBase>
    fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull<Hybrid.EventBuses.EventBusBase>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(System.String)
    name: CheckNotNull(Of EventBusBase)
    nameWithType: ParameterCheckExtensions.CheckNotNull(Of EventBusBase)
    fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull(Of Hybrid.EventBuses.EventBusBase)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EventBuses.EventBusBase.Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{Hybrid.EventBuses.EventBusBase},System.Action{System.Exception},System.Action{Hybrid.EventBuses.EventBusBase})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
  parent: Hybrid.Extensions.TryCatchExtensions
  definition: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
  name: TryCatch<EventBusBase>(Action<EventBusBase>, Action<Exception>, Action<EventBusBase>)
  nameWithType: TryCatchExtensions.TryCatch<EventBusBase>(Action<EventBusBase>, Action<Exception>, Action<EventBusBase>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.EventBuses.EventBusBase>(System.Action<Hybrid.EventBuses.EventBusBase>, System.Action<System.Exception>, System.Action<Hybrid.EventBuses.EventBusBase>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of EventBusBase)(Action(Of EventBusBase), Action(Of Exception), Action(Of EventBusBase))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.EventBuses.EventBusBase)(System.Action(Of Hybrid.EventBuses.EventBusBase), System.Action(Of System.Exception), System.Action(Of Hybrid.EventBuses.EventBusBase))
  name.vb: TryCatch(Of EventBusBase)(Action(Of EventBusBase), Action(Of Exception), Action(Of EventBusBase))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{``0},System.Action{System.Exception},System.Action{``0})
    name: TryCatch<EventBusBase>
    nameWithType: TryCatchExtensions.TryCatch<EventBusBase>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.EventBuses.EventBusBase>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.EventBuses.EventBusBase
    name: EventBusBase
    nameWithType: EventBusBase
    fullName: Hybrid.EventBuses.EventBusBase
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.EventBuses.EventBusBase
    name: EventBusBase
    nameWithType: EventBusBase
    fullName: Hybrid.EventBuses.EventBusBase
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{``0},System.Action{System.Exception},System.Action{``0})
    name: TryCatch(Of EventBusBase)
    nameWithType: TryCatchExtensions.TryCatch(Of EventBusBase)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.EventBuses.EventBusBase)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.EventBuses.EventBusBase
    name: EventBusBase
    nameWithType: EventBusBase
    fullName: Hybrid.EventBuses.EventBusBase
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.EventBuses.EventBusBase
    name: EventBusBase
    nameWithType: EventBusBase
    fullName: Hybrid.EventBuses.EventBusBase
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EventBuses.EventBusBase.Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{Hybrid.EventBuses.EventBusBase},System.Action{System.Exception})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
  parent: Hybrid.Extensions.TryCatchExtensions
  definition: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
  name: TryCatch<EventBusBase>(Action<EventBusBase>, Action<Exception>)
  nameWithType: TryCatchExtensions.TryCatch<EventBusBase>(Action<EventBusBase>, Action<Exception>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.EventBuses.EventBusBase>(System.Action<Hybrid.EventBuses.EventBusBase>, System.Action<System.Exception>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of EventBusBase)(Action(Of EventBusBase), Action(Of Exception))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.EventBuses.EventBusBase)(System.Action(Of Hybrid.EventBuses.EventBusBase), System.Action(Of System.Exception))
  name.vb: TryCatch(Of EventBusBase)(Action(Of EventBusBase), Action(Of Exception))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{``0},System.Action{System.Exception})
    name: TryCatch<EventBusBase>
    nameWithType: TryCatchExtensions.TryCatch<EventBusBase>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.EventBuses.EventBusBase>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.EventBuses.EventBusBase
    name: EventBusBase
    nameWithType: EventBusBase
    fullName: Hybrid.EventBuses.EventBusBase
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{``0},System.Action{System.Exception})
    name: TryCatch(Of EventBusBase)
    nameWithType: TryCatchExtensions.TryCatch(Of EventBusBase)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.EventBuses.EventBusBase)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.EventBuses.EventBusBase
    name: EventBusBase
    nameWithType: EventBusBase
    fullName: Hybrid.EventBuses.EventBusBase
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EventBuses.EventBusBase.Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{Hybrid.EventBuses.EventBusBase,{TResult}},System.Action{System.Exception},System.Action{Hybrid.EventBuses.EventBusBase})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
  parent: Hybrid.Extensions.TryCatchExtensions
  definition: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
  name: TryCatch<EventBusBase, TResult>(Func<EventBusBase, TResult>, Action<Exception>, Action<EventBusBase>)
  nameWithType: TryCatchExtensions.TryCatch<EventBusBase, TResult>(Func<EventBusBase, TResult>, Action<Exception>, Action<EventBusBase>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.EventBuses.EventBusBase, TResult>(System.Func<Hybrid.EventBuses.EventBusBase, TResult>, System.Action<System.Exception>, System.Action<Hybrid.EventBuses.EventBusBase>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of EventBusBase, TResult)(Func(Of EventBusBase, TResult), Action(Of Exception), Action(Of EventBusBase))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.EventBuses.EventBusBase, TResult)(System.Func(Of Hybrid.EventBuses.EventBusBase, TResult), System.Action(Of System.Exception), System.Action(Of Hybrid.EventBuses.EventBusBase))
  name.vb: TryCatch(Of EventBusBase, TResult)(Func(Of EventBusBase, TResult), Action(Of Exception), Action(Of EventBusBase))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
    name: TryCatch<EventBusBase, TResult>
    nameWithType: TryCatchExtensions.TryCatch<EventBusBase, TResult>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.EventBuses.EventBusBase, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.EventBuses.EventBusBase
    name: EventBusBase
    nameWithType: EventBusBase
    fullName: Hybrid.EventBuses.EventBusBase
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.EventBuses.EventBusBase
    name: EventBusBase
    nameWithType: EventBusBase
    fullName: Hybrid.EventBuses.EventBusBase
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
    name: TryCatch(Of EventBusBase, TResult)
    nameWithType: TryCatchExtensions.TryCatch(Of EventBusBase, TResult)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.EventBuses.EventBusBase, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.EventBuses.EventBusBase
    name: EventBusBase
    nameWithType: EventBusBase
    fullName: Hybrid.EventBuses.EventBusBase
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.EventBuses.EventBusBase
    name: EventBusBase
    nameWithType: EventBusBase
    fullName: Hybrid.EventBuses.EventBusBase
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EventBuses.EventBusBase.Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{Hybrid.EventBuses.EventBusBase,{TResult}},System.Action{System.Exception})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
  parent: Hybrid.Extensions.TryCatchExtensions
  definition: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
  name: TryCatch<EventBusBase, TResult>(Func<EventBusBase, TResult>, Action<Exception>)
  nameWithType: TryCatchExtensions.TryCatch<EventBusBase, TResult>(Func<EventBusBase, TResult>, Action<Exception>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.EventBuses.EventBusBase, TResult>(System.Func<Hybrid.EventBuses.EventBusBase, TResult>, System.Action<System.Exception>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of EventBusBase, TResult)(Func(Of EventBusBase, TResult), Action(Of Exception))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.EventBuses.EventBusBase, TResult)(System.Func(Of Hybrid.EventBuses.EventBusBase, TResult), System.Action(Of System.Exception))
  name.vb: TryCatch(Of EventBusBase, TResult)(Func(Of EventBusBase, TResult), Action(Of Exception))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{``0,``1},System.Action{System.Exception})
    name: TryCatch<EventBusBase, TResult>
    nameWithType: TryCatchExtensions.TryCatch<EventBusBase, TResult>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.EventBuses.EventBusBase, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.EventBuses.EventBusBase
    name: EventBusBase
    nameWithType: EventBusBase
    fullName: Hybrid.EventBuses.EventBusBase
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{``0,``1},System.Action{System.Exception})
    name: TryCatch(Of EventBusBase, TResult)
    nameWithType: TryCatchExtensions.TryCatch(Of EventBusBase, TResult)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.EventBuses.EventBusBase, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.EventBuses.EventBusBase
    name: EventBusBase
    nameWithType: EventBusBase
    fullName: Hybrid.EventBuses.EventBusBase
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EventBuses.EventBusBase.Hybrid.Extensions.TryCatchExtensions.TryFinally``1(System.Action{Hybrid.EventBuses.EventBusBase},System.Action{Hybrid.EventBuses.EventBusBase})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
  parent: Hybrid.Extensions.TryCatchExtensions
  definition: Hybrid.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
  name: TryFinally<EventBusBase>(Action<EventBusBase>, Action<EventBusBase>)
  nameWithType: TryCatchExtensions.TryFinally<EventBusBase>(Action<EventBusBase>, Action<EventBusBase>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryFinally<Hybrid.EventBuses.EventBusBase>(System.Action<Hybrid.EventBuses.EventBusBase>, System.Action<Hybrid.EventBuses.EventBusBase>)
  nameWithType.vb: TryCatchExtensions.TryFinally(Of EventBusBase)(Action(Of EventBusBase), Action(Of EventBusBase))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryFinally(Of Hybrid.EventBuses.EventBusBase)(System.Action(Of Hybrid.EventBuses.EventBusBase), System.Action(Of Hybrid.EventBuses.EventBusBase))
  name.vb: TryFinally(Of EventBusBase)(Action(Of EventBusBase), Action(Of EventBusBase))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryFinally``1(System.Action{``0},System.Action{``0})
    name: TryFinally<EventBusBase>
    nameWithType: TryCatchExtensions.TryFinally<EventBusBase>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryFinally<Hybrid.EventBuses.EventBusBase>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.EventBuses.EventBusBase
    name: EventBusBase
    nameWithType: EventBusBase
    fullName: Hybrid.EventBuses.EventBusBase
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.EventBuses.EventBusBase
    name: EventBusBase
    nameWithType: EventBusBase
    fullName: Hybrid.EventBuses.EventBusBase
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryFinally``1(System.Action{``0},System.Action{``0})
    name: TryFinally(Of EventBusBase)
    nameWithType: TryCatchExtensions.TryFinally(Of EventBusBase)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryFinally(Of Hybrid.EventBuses.EventBusBase)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.EventBuses.EventBusBase
    name: EventBusBase
    nameWithType: EventBusBase
    fullName: Hybrid.EventBuses.EventBusBase
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.EventBuses.EventBusBase
    name: EventBusBase
    nameWithType: EventBusBase
    fullName: Hybrid.EventBuses.EventBusBase
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Json.JsonExtensions.ToJsonString(System.Boolean,System.Boolean)
  commentId: M:Hybrid.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
  parent: Hybrid.Json.JsonExtensions
  definition: Hybrid.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
  name: ToJsonString(Boolean, Boolean)
  nameWithType: JsonExtensions.ToJsonString(Boolean, Boolean)
  fullName: Hybrid.Json.JsonExtensions.ToJsonString(System.Boolean, System.Boolean)
  spec.csharp:
  - uid: Hybrid.Json.JsonExtensions.ToJsonString(System.Boolean,System.Boolean)
    name: ToJsonString
    nameWithType: JsonExtensions.ToJsonString
    fullName: Hybrid.Json.JsonExtensions.ToJsonString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Json.JsonExtensions.ToJsonString(System.Boolean,System.Boolean)
    name: ToJsonString
    nameWithType: JsonExtensions.ToJsonString
    fullName: Hybrid.Json.JsonExtensions.ToJsonString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Mapping.MapperExtensions.MapTo``1
  commentId: M:Hybrid.Mapping.MapperExtensions.MapTo``1(System.Object)
  parent: Hybrid.Mapping.MapperExtensions
  definition: Hybrid.Mapping.MapperExtensions.MapTo``1(System.Object)
  name: MapTo<TTarget>()
  nameWithType: MapperExtensions.MapTo<TTarget>()
  fullName: Hybrid.Mapping.MapperExtensions.MapTo<TTarget>()
  nameWithType.vb: MapperExtensions.MapTo(Of TTarget)()
  fullName.vb: Hybrid.Mapping.MapperExtensions.MapTo(Of TTarget)()
  name.vb: MapTo(Of TTarget)()
  spec.csharp:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``1
    name: MapTo<TTarget>
    nameWithType: MapperExtensions.MapTo<TTarget>
    fullName: Hybrid.Mapping.MapperExtensions.MapTo<TTarget>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``1
    name: MapTo(Of TTarget)
    nameWithType: MapperExtensions.MapTo(Of TTarget)
    fullName: Hybrid.Mapping.MapperExtensions.MapTo(Of TTarget)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EventBuses.EventBusBase.Hybrid.Mapping.MapperExtensions.MapTo``2({TTarget})
  commentId: M:Hybrid.Mapping.MapperExtensions.MapTo``2(``0,``1)
  parent: Hybrid.Mapping.MapperExtensions
  definition: Hybrid.Mapping.MapperExtensions.MapTo``2(``0,``1)
  name: MapTo<EventBusBase, TTarget>(TTarget)
  nameWithType: MapperExtensions.MapTo<EventBusBase, TTarget>(TTarget)
  fullName: Hybrid.Mapping.MapperExtensions.MapTo<Hybrid.EventBuses.EventBusBase, TTarget>(TTarget)
  nameWithType.vb: MapperExtensions.MapTo(Of EventBusBase, TTarget)(TTarget)
  fullName.vb: Hybrid.Mapping.MapperExtensions.MapTo(Of Hybrid.EventBuses.EventBusBase, TTarget)(TTarget)
  name.vb: MapTo(Of EventBusBase, TTarget)(TTarget)
  spec.csharp:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``2(``1)
    name: MapTo<EventBusBase, TTarget>
    nameWithType: MapperExtensions.MapTo<EventBusBase, TTarget>
    fullName: Hybrid.Mapping.MapperExtensions.MapTo<Hybrid.EventBuses.EventBusBase, TTarget>
  - name: (
    nameWithType: (
    fullName: (
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``2(``1)
    name: MapTo(Of EventBusBase, TTarget)
    nameWithType: MapperExtensions.MapTo(Of EventBusBase, TTarget)
    fullName: Hybrid.Mapping.MapperExtensions.MapTo(Of Hybrid.EventBuses.EventBusBase, TTarget)
  - name: (
    nameWithType: (
    fullName: (
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Reflection.LockExtensions.Locking(System.Action)
  commentId: M:Hybrid.Reflection.LockExtensions.Locking(System.Object,System.Action)
  parent: Hybrid.Reflection.LockExtensions
  definition: Hybrid.Reflection.LockExtensions.Locking(System.Object,System.Action)
  name: Locking(Action)
  nameWithType: LockExtensions.Locking(Action)
  fullName: Hybrid.Reflection.LockExtensions.Locking(System.Action)
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking(System.Action)
    name: Locking
    nameWithType: LockExtensions.Locking
    fullName: Hybrid.Reflection.LockExtensions.Locking
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking(System.Action)
    name: Locking
    nameWithType: LockExtensions.Locking
    fullName: Hybrid.Reflection.LockExtensions.Locking
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EventBuses.EventBusBase.Hybrid.Reflection.LockExtensions.Locking``1(System.Action{Hybrid.EventBuses.EventBusBase})
  commentId: M:Hybrid.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
  parent: Hybrid.Reflection.LockExtensions
  definition: Hybrid.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
  name: Locking<EventBusBase>(Action<EventBusBase>)
  nameWithType: LockExtensions.Locking<EventBusBase>(Action<EventBusBase>)
  fullName: Hybrid.Reflection.LockExtensions.Locking<Hybrid.EventBuses.EventBusBase>(System.Action<Hybrid.EventBuses.EventBusBase>)
  nameWithType.vb: LockExtensions.Locking(Of EventBusBase)(Action(Of EventBusBase))
  fullName.vb: Hybrid.Reflection.LockExtensions.Locking(Of Hybrid.EventBuses.EventBusBase)(System.Action(Of Hybrid.EventBuses.EventBusBase))
  name.vb: Locking(Of EventBusBase)(Action(Of EventBusBase))
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(System.Action{``0})
    name: Locking<EventBusBase>
    nameWithType: LockExtensions.Locking<EventBusBase>
    fullName: Hybrid.Reflection.LockExtensions.Locking<Hybrid.EventBuses.EventBusBase>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.EventBuses.EventBusBase
    name: EventBusBase
    nameWithType: EventBusBase
    fullName: Hybrid.EventBuses.EventBusBase
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(System.Action{``0})
    name: Locking(Of EventBusBase)
    nameWithType: LockExtensions.Locking(Of EventBusBase)
    fullName: Hybrid.Reflection.LockExtensions.Locking(Of Hybrid.EventBuses.EventBusBase)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.EventBuses.EventBusBase
    name: EventBusBase
    nameWithType: EventBusBase
    fullName: Hybrid.EventBuses.EventBusBase
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Reflection.LockExtensions.Locking``1(System.Func{{TResult}})
  commentId: M:Hybrid.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
  parent: Hybrid.Reflection.LockExtensions
  definition: Hybrid.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
  name: Locking<TResult>(Func<TResult>)
  nameWithType: LockExtensions.Locking<TResult>(Func<TResult>)
  fullName: Hybrid.Reflection.LockExtensions.Locking<TResult>(System.Func<TResult>)
  nameWithType.vb: LockExtensions.Locking(Of TResult)(Func(Of TResult))
  fullName.vb: Hybrid.Reflection.LockExtensions.Locking(Of TResult)(System.Func(Of TResult))
  name.vb: Locking(Of TResult)(Func(Of TResult))
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(System.Func{``0})
    name: Locking<TResult>
    nameWithType: LockExtensions.Locking<TResult>
    fullName: Hybrid.Reflection.LockExtensions.Locking<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(System.Func{``0})
    name: Locking(Of TResult)
    nameWithType: LockExtensions.Locking(Of TResult)
    fullName: Hybrid.Reflection.LockExtensions.Locking(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EventBuses.EventBusBase.Hybrid.Reflection.LockExtensions.Locking``2(System.Func{Hybrid.EventBuses.EventBusBase,{TResult}})
  commentId: M:Hybrid.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
  parent: Hybrid.Reflection.LockExtensions
  definition: Hybrid.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
  name: Locking<EventBusBase, TResult>(Func<EventBusBase, TResult>)
  nameWithType: LockExtensions.Locking<EventBusBase, TResult>(Func<EventBusBase, TResult>)
  fullName: Hybrid.Reflection.LockExtensions.Locking<Hybrid.EventBuses.EventBusBase, TResult>(System.Func<Hybrid.EventBuses.EventBusBase, TResult>)
  nameWithType.vb: LockExtensions.Locking(Of EventBusBase, TResult)(Func(Of EventBusBase, TResult))
  fullName.vb: Hybrid.Reflection.LockExtensions.Locking(Of Hybrid.EventBuses.EventBusBase, TResult)(System.Func(Of Hybrid.EventBuses.EventBusBase, TResult))
  name.vb: Locking(Of EventBusBase, TResult)(Func(Of EventBusBase, TResult))
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking``2(System.Func{``0,``1})
    name: Locking<EventBusBase, TResult>
    nameWithType: LockExtensions.Locking<EventBusBase, TResult>
    fullName: Hybrid.Reflection.LockExtensions.Locking<Hybrid.EventBuses.EventBusBase, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.EventBuses.EventBusBase
    name: EventBusBase
    nameWithType: EventBusBase
    fullName: Hybrid.EventBuses.EventBusBase
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking``2(System.Func{``0,``1})
    name: Locking(Of EventBusBase, TResult)
    nameWithType: LockExtensions.Locking(Of EventBusBase, TResult)
    fullName: Hybrid.Reflection.LockExtensions.Locking(Of Hybrid.EventBuses.EventBusBase, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.EventBuses.EventBusBase
    name: EventBusBase
    nameWithType: EventBusBase
    fullName: Hybrid.EventBuses.EventBusBase
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EventBuses.EventBusBase.Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2
  commentId: M:Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2(``0)
  parent: Hybrid.Domain.Entities.EntityExtensions
  definition: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2(``0)
  name: CheckICreatedTime<EventBusBase, TKey>()
  nameWithType: EntityExtensions.CheckICreatedTime<EventBusBase, TKey>()
  fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime<Hybrid.EventBuses.EventBusBase, TKey>()
  nameWithType.vb: EntityExtensions.CheckICreatedTime(Of EventBusBase, TKey)()
  fullName.vb: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime(Of Hybrid.EventBuses.EventBusBase, TKey)()
  name.vb: CheckICreatedTime(Of EventBusBase, TKey)()
  spec.csharp:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2
    name: CheckICreatedTime<EventBusBase, TKey>
    nameWithType: EntityExtensions.CheckICreatedTime<EventBusBase, TKey>
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime<Hybrid.EventBuses.EventBusBase, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2
    name: CheckICreatedTime(Of EventBusBase, TKey)
    nameWithType: EntityExtensions.CheckICreatedTime(Of EventBusBase, TKey)
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime(Of Hybrid.EventBuses.EventBusBase, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EventBuses.EventBusBase.Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(System.Security.Principal.IPrincipal)
  commentId: M:Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
  parent: Hybrid.Domain.Entities.EntityExtensions
  definition: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
  name: CheckICreationAudited<EventBusBase, TKey, TUserKey>(IPrincipal)
  nameWithType: EntityExtensions.CheckICreationAudited<EventBusBase, TKey, TUserKey>(IPrincipal)
  fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited<Hybrid.EventBuses.EventBusBase, TKey, TUserKey>(System.Security.Principal.IPrincipal)
  nameWithType.vb: EntityExtensions.CheckICreationAudited(Of EventBusBase, TKey, TUserKey)(IPrincipal)
  fullName.vb: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited(Of Hybrid.EventBuses.EventBusBase, TKey, TUserKey)(System.Security.Principal.IPrincipal)
  name.vb: CheckICreationAudited(Of EventBusBase, TKey, TUserKey)(IPrincipal)
  spec.csharp:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(System.Security.Principal.IPrincipal)
    name: CheckICreationAudited<EventBusBase, TKey, TUserKey>
    nameWithType: EntityExtensions.CheckICreationAudited<EventBusBase, TKey, TUserKey>
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited<Hybrid.EventBuses.EventBusBase, TKey, TUserKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(System.Security.Principal.IPrincipal)
    name: CheckICreationAudited(Of EventBusBase, TKey, TUserKey)
    nameWithType: EntityExtensions.CheckICreationAudited(Of EventBusBase, TKey, TUserKey)
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited(Of Hybrid.EventBuses.EventBusBase, TKey, TUserKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EventBuses.EventBusBase.Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(System.Security.Principal.IPrincipal)
  commentId: M:Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
  parent: Hybrid.Domain.Entities.EntityExtensions
  definition: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
  name: CheckIUpdateAudited<EventBusBase, TKey, TUserKey>(IPrincipal)
  nameWithType: EntityExtensions.CheckIUpdateAudited<EventBusBase, TKey, TUserKey>(IPrincipal)
  fullName: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited<Hybrid.EventBuses.EventBusBase, TKey, TUserKey>(System.Security.Principal.IPrincipal)
  nameWithType.vb: EntityExtensions.CheckIUpdateAudited(Of EventBusBase, TKey, TUserKey)(IPrincipal)
  fullName.vb: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited(Of Hybrid.EventBuses.EventBusBase, TKey, TUserKey)(System.Security.Principal.IPrincipal)
  name.vb: CheckIUpdateAudited(Of EventBusBase, TKey, TUserKey)(IPrincipal)
  spec.csharp:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(System.Security.Principal.IPrincipal)
    name: CheckIUpdateAudited<EventBusBase, TKey, TUserKey>
    nameWithType: EntityExtensions.CheckIUpdateAudited<EventBusBase, TKey, TUserKey>
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited<Hybrid.EventBuses.EventBusBase, TKey, TUserKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(System.Security.Principal.IPrincipal)
    name: CheckIUpdateAudited(Of EventBusBase, TKey, TUserKey)
    nameWithType: EntityExtensions.CheckIUpdateAudited(Of EventBusBase, TKey, TUserKey)
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited(Of Hybrid.EventBuses.EventBusBase, TKey, TUserKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: OSharp.Entity.EntityExtensions.CheckICreatedTime``2(``0)
  commentId: M:OSharp.Entity.EntityExtensions.CheckICreatedTime``2(``0)
  name: CheckICreatedTime<TEntity, TKey>(TEntity)
  nameWithType: EntityExtensions.CheckICreatedTime<TEntity, TKey>(TEntity)
  fullName: OSharp.Entity.EntityExtensions.CheckICreatedTime<TEntity, TKey>(TEntity)
  nameWithType.vb: EntityExtensions.CheckICreatedTime(Of TEntity, TKey)(TEntity)
  fullName.vb: OSharp.Entity.EntityExtensions.CheckICreatedTime(Of TEntity, TKey)(TEntity)
  name.vb: CheckICreatedTime(Of TEntity, TKey)(TEntity)
  spec.csharp:
  - uid: OSharp.Entity.EntityExtensions.CheckICreatedTime``2(``0)
    name: CheckICreatedTime<TEntity, TKey>
    nameWithType: EntityExtensions.CheckICreatedTime<TEntity, TKey>
    fullName: OSharp.Entity.EntityExtensions.CheckICreatedTime<TEntity, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Entity.EntityExtensions.CheckICreatedTime``2(``0)
    name: CheckICreatedTime(Of TEntity, TKey)
    nameWithType: EntityExtensions.CheckICreatedTime(Of TEntity, TKey)
    fullName: OSharp.Entity.EntityExtensions.CheckICreatedTime(Of TEntity, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Entity.EntityExtensions
  commentId: T:OSharp.Entity.EntityExtensions
  parent: OSharp.Entity
  name: EntityExtensions
  nameWithType: EntityExtensions
  fullName: OSharp.Entity.EntityExtensions
- uid: OSharp.Entity.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
  commentId: M:OSharp.Entity.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
  isExternal: true
  name: CheckICreationAudited<TEntity, TKey, TUserKey>(TEntity, IPrincipal)
  nameWithType: EntityExtensions.CheckICreationAudited<TEntity, TKey, TUserKey>(TEntity, IPrincipal)
  fullName: OSharp.Entity.EntityExtensions.CheckICreationAudited<TEntity, TKey, TUserKey>(TEntity, System.Security.Principal.IPrincipal)
  nameWithType.vb: EntityExtensions.CheckICreationAudited(Of TEntity, TKey, TUserKey)(TEntity, IPrincipal)
  fullName.vb: OSharp.Entity.EntityExtensions.CheckICreationAudited(Of TEntity, TKey, TUserKey)(TEntity, System.Security.Principal.IPrincipal)
  name.vb: CheckICreationAudited(Of TEntity, TKey, TUserKey)(TEntity, IPrincipal)
  spec.csharp:
  - uid: OSharp.Entity.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
    name: CheckICreationAudited<TEntity, TKey, TUserKey>
    nameWithType: EntityExtensions.CheckICreationAudited<TEntity, TKey, TUserKey>
    fullName: OSharp.Entity.EntityExtensions.CheckICreationAudited<TEntity, TKey, TUserKey>
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Entity.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
    name: CheckICreationAudited(Of TEntity, TKey, TUserKey)
    nameWithType: EntityExtensions.CheckICreationAudited(Of TEntity, TKey, TUserKey)
    fullName: OSharp.Entity.EntityExtensions.CheckICreationAudited(Of TEntity, TKey, TUserKey)
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Entity.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
  commentId: M:OSharp.Entity.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
  isExternal: true
  name: CheckIUpdateAudited<TEntity, TKey, TUserKey>(TEntity, IPrincipal)
  nameWithType: EntityExtensions.CheckIUpdateAudited<TEntity, TKey, TUserKey>(TEntity, IPrincipal)
  fullName: OSharp.Entity.EntityExtensions.CheckIUpdateAudited<TEntity, TKey, TUserKey>(TEntity, System.Security.Principal.IPrincipal)
  nameWithType.vb: EntityExtensions.CheckIUpdateAudited(Of TEntity, TKey, TUserKey)(TEntity, IPrincipal)
  fullName.vb: OSharp.Entity.EntityExtensions.CheckIUpdateAudited(Of TEntity, TKey, TUserKey)(TEntity, System.Security.Principal.IPrincipal)
  name.vb: CheckIUpdateAudited(Of TEntity, TKey, TUserKey)(TEntity, IPrincipal)
  spec.csharp:
  - uid: OSharp.Entity.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
    name: CheckIUpdateAudited<TEntity, TKey, TUserKey>
    nameWithType: EntityExtensions.CheckIUpdateAudited<TEntity, TKey, TUserKey>
    fullName: OSharp.Entity.EntityExtensions.CheckIUpdateAudited<TEntity, TKey, TUserKey>
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Entity.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
    name: CheckIUpdateAudited(Of TEntity, TKey, TUserKey)
    nameWithType: EntityExtensions.CheckIUpdateAudited(Of TEntity, TKey, TUserKey)
    fullName: OSharp.Entity.EntityExtensions.CheckIUpdateAudited(Of TEntity, TKey, TUserKey)
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
  commentId: M:OSharp.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
  isExternal: true
  name: CastTo(Object, Type)
  nameWithType: ObjectExtensions.CastTo(Object, Type)
  fullName: OSharp.Extensions.ObjectExtensions.CastTo(System.Object, System.Type)
  spec.csharp:
  - uid: OSharp.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
    name: CastTo
    nameWithType: ObjectExtensions.CastTo
    fullName: OSharp.Extensions.ObjectExtensions.CastTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
    name: CastTo
    nameWithType: ObjectExtensions.CastTo
    fullName: OSharp.Extensions.ObjectExtensions.CastTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Extensions.ObjectExtensions
  commentId: T:OSharp.Extensions.ObjectExtensions
  parent: OSharp.Extensions
  name: ObjectExtensions
  nameWithType: ObjectExtensions
  fullName: OSharp.Extensions.ObjectExtensions
- uid: OSharp.Extensions.ObjectExtensions.CastTo``1(System.Object)
  commentId: M:OSharp.Extensions.ObjectExtensions.CastTo``1(System.Object)
  isExternal: true
  name: CastTo<T>(Object)
  nameWithType: ObjectExtensions.CastTo<T>(Object)
  fullName: OSharp.Extensions.ObjectExtensions.CastTo<T>(System.Object)
  nameWithType.vb: ObjectExtensions.CastTo(Of T)(Object)
  fullName.vb: OSharp.Extensions.ObjectExtensions.CastTo(Of T)(System.Object)
  name.vb: CastTo(Of T)(Object)
  spec.csharp:
  - uid: OSharp.Extensions.ObjectExtensions.CastTo``1(System.Object)
    name: CastTo<T>
    nameWithType: ObjectExtensions.CastTo<T>
    fullName: OSharp.Extensions.ObjectExtensions.CastTo<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ObjectExtensions.CastTo``1(System.Object)
    name: CastTo(Of T)
    nameWithType: ObjectExtensions.CastTo(Of T)
    fullName: OSharp.Extensions.ObjectExtensions.CastTo(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
  commentId: M:OSharp.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
  isExternal: true
  name: CastTo<T>(Object, T)
  nameWithType: ObjectExtensions.CastTo<T>(Object, T)
  fullName: OSharp.Extensions.ObjectExtensions.CastTo<T>(System.Object, T)
  nameWithType.vb: ObjectExtensions.CastTo(Of T)(Object, T)
  fullName.vb: OSharp.Extensions.ObjectExtensions.CastTo(Of T)(System.Object, T)
  name.vb: CastTo(Of T)(Object, T)
  spec.csharp:
  - uid: OSharp.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
    name: CastTo<T>
    nameWithType: ObjectExtensions.CastTo<T>
    fullName: OSharp.Extensions.ObjectExtensions.CastTo<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
    name: CastTo(Of T)
    nameWithType: ObjectExtensions.CastTo(Of T)
    fullName: OSharp.Extensions.ObjectExtensions.CastTo(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
  commentId: M:OSharp.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
  name: IsIn<T>(T, T[])
  nameWithType: ObjectExtensions.IsIn<T>(T, T[])
  fullName: OSharp.Extensions.ObjectExtensions.IsIn<T>(T, T[])
  nameWithType.vb: ObjectExtensions.IsIn(Of T)(T, T())
  fullName.vb: OSharp.Extensions.ObjectExtensions.IsIn(Of T)(T, T())
  name.vb: IsIn(Of T)(T, T())
  spec.csharp:
  - uid: OSharp.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
    name: IsIn<T>
    nameWithType: ObjectExtensions.IsIn<T>
    fullName: OSharp.Extensions.ObjectExtensions.IsIn<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
    name: IsIn(Of T)
    nameWithType: ObjectExtensions.IsIn(Of T)
    fullName: OSharp.Extensions.ObjectExtensions.IsIn(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Extensions.ObjectExtensions.ToDynamic(System.Object)
  commentId: M:OSharp.Extensions.ObjectExtensions.ToDynamic(System.Object)
  isExternal: true
  name: ToDynamic(Object)
  nameWithType: ObjectExtensions.ToDynamic(Object)
  fullName: OSharp.Extensions.ObjectExtensions.ToDynamic(System.Object)
  spec.csharp:
  - uid: OSharp.Extensions.ObjectExtensions.ToDynamic(System.Object)
    name: ToDynamic
    nameWithType: ObjectExtensions.ToDynamic
    fullName: OSharp.Extensions.ObjectExtensions.ToDynamic
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ObjectExtensions.ToDynamic(System.Object)
    name: ToDynamic
    nameWithType: ObjectExtensions.ToDynamic
    fullName: OSharp.Extensions.ObjectExtensions.ToDynamic
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Extensions.ObjectExtensions.DeepClone``1(``0)
  commentId: M:OSharp.Extensions.ObjectExtensions.DeepClone``1(``0)
  name: DeepClone<T>(T)
  nameWithType: ObjectExtensions.DeepClone<T>(T)
  fullName: OSharp.Extensions.ObjectExtensions.DeepClone<T>(T)
  nameWithType.vb: ObjectExtensions.DeepClone(Of T)(T)
  fullName.vb: OSharp.Extensions.ObjectExtensions.DeepClone(Of T)(T)
  name.vb: DeepClone(Of T)(T)
  spec.csharp:
  - uid: OSharp.Extensions.ObjectExtensions.DeepClone``1(``0)
    name: DeepClone<T>
    nameWithType: ObjectExtensions.DeepClone<T>
    fullName: OSharp.Extensions.ObjectExtensions.DeepClone<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ObjectExtensions.DeepClone``1(``0)
    name: DeepClone(Of T)
    nameWithType: ObjectExtensions.DeepClone(Of T)
    fullName: OSharp.Extensions.ObjectExtensions.DeepClone(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
  commentId: M:OSharp.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
  isExternal: true
  name: Required<T>(T, Func<T, Boolean>, String)
  nameWithType: ParameterCheckExtensions.Required<T>(T, Func<T, Boolean>, String)
  fullName: OSharp.Extensions.ParameterCheckExtensions.Required<T>(T, System.Func<T, System.Boolean>, System.String)
  nameWithType.vb: ParameterCheckExtensions.Required(Of T)(T, Func(Of T, Boolean), String)
  fullName.vb: OSharp.Extensions.ParameterCheckExtensions.Required(Of T)(T, System.Func(Of T, System.Boolean), System.String)
  name.vb: Required(Of T)(T, Func(Of T, Boolean), String)
  spec.csharp:
  - uid: OSharp.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
    name: Required<T>
    nameWithType: ParameterCheckExtensions.Required<T>
    fullName: OSharp.Extensions.ParameterCheckExtensions.Required<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
    name: Required(Of T)
    nameWithType: ParameterCheckExtensions.Required(Of T)
    fullName: OSharp.Extensions.ParameterCheckExtensions.Required(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Extensions.ParameterCheckExtensions
  commentId: T:OSharp.Extensions.ParameterCheckExtensions
  parent: OSharp.Extensions
  name: ParameterCheckExtensions
  nameWithType: ParameterCheckExtensions
  fullName: OSharp.Extensions.ParameterCheckExtensions
- uid: OSharp.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
  commentId: M:OSharp.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
  isExternal: true
  name: Required<T, TException>(T, Func<T, Boolean>, String)
  nameWithType: ParameterCheckExtensions.Required<T, TException>(T, Func<T, Boolean>, String)
  fullName: OSharp.Extensions.ParameterCheckExtensions.Required<T, TException>(T, System.Func<T, System.Boolean>, System.String)
  nameWithType.vb: ParameterCheckExtensions.Required(Of T, TException)(T, Func(Of T, Boolean), String)
  fullName.vb: OSharp.Extensions.ParameterCheckExtensions.Required(Of T, TException)(T, System.Func(Of T, System.Boolean), System.String)
  name.vb: Required(Of T, TException)(T, Func(Of T, Boolean), String)
  spec.csharp:
  - uid: OSharp.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
    name: Required<T, TException>
    nameWithType: ParameterCheckExtensions.Required<T, TException>
    fullName: OSharp.Extensions.ParameterCheckExtensions.Required<T, TException>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
    name: Required(Of T, TException)
    nameWithType: ParameterCheckExtensions.Required(Of T, TException)
    fullName: OSharp.Extensions.ParameterCheckExtensions.Required(Of T, TException)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
  commentId: M:OSharp.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
  isExternal: true
  name: CheckNotNull<T>(T, String)
  nameWithType: ParameterCheckExtensions.CheckNotNull<T>(T, String)
  fullName: OSharp.Extensions.ParameterCheckExtensions.CheckNotNull<T>(T, System.String)
  nameWithType.vb: ParameterCheckExtensions.CheckNotNull(Of T)(T, String)
  fullName.vb: OSharp.Extensions.ParameterCheckExtensions.CheckNotNull(Of T)(T, System.String)
  name.vb: CheckNotNull(Of T)(T, String)
  spec.csharp:
  - uid: OSharp.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
    name: CheckNotNull<T>
    nameWithType: ParameterCheckExtensions.CheckNotNull<T>
    fullName: OSharp.Extensions.ParameterCheckExtensions.CheckNotNull<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
    name: CheckNotNull(Of T)
    nameWithType: ParameterCheckExtensions.CheckNotNull(Of T)
    fullName: OSharp.Extensions.ParameterCheckExtensions.CheckNotNull(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
  commentId: M:OSharp.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
  isExternal: true
  name: TryCatch<T>(T, Action<T>, Action<Exception>, Action<T>)
  nameWithType: TryCatchExtensions.TryCatch<T>(T, Action<T>, Action<Exception>, Action<T>)
  fullName: OSharp.Extensions.TryCatchExtensions.TryCatch<T>(T, System.Action<T>, System.Action<System.Exception>, System.Action<T>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of T)(T, Action(Of T), Action(Of Exception), Action(Of T))
  fullName.vb: OSharp.Extensions.TryCatchExtensions.TryCatch(Of T)(T, System.Action(Of T), System.Action(Of System.Exception), System.Action(Of T))
  name.vb: TryCatch(Of T)(T, Action(Of T), Action(Of Exception), Action(Of T))
  spec.csharp:
  - uid: OSharp.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
    name: TryCatch<T>
    nameWithType: TryCatchExtensions.TryCatch<T>
    fullName: OSharp.Extensions.TryCatchExtensions.TryCatch<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
    name: TryCatch(Of T)
    nameWithType: TryCatchExtensions.TryCatch(Of T)
    fullName: OSharp.Extensions.TryCatchExtensions.TryCatch(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Extensions.TryCatchExtensions
  commentId: T:OSharp.Extensions.TryCatchExtensions
  parent: OSharp.Extensions
  name: TryCatchExtensions
  nameWithType: TryCatchExtensions
  fullName: OSharp.Extensions.TryCatchExtensions
- uid: OSharp.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
  commentId: M:OSharp.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
  isExternal: true
  name: TryCatch<T>(T, Action<T>, Action<Exception>)
  nameWithType: TryCatchExtensions.TryCatch<T>(T, Action<T>, Action<Exception>)
  fullName: OSharp.Extensions.TryCatchExtensions.TryCatch<T>(T, System.Action<T>, System.Action<System.Exception>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of T)(T, Action(Of T), Action(Of Exception))
  fullName.vb: OSharp.Extensions.TryCatchExtensions.TryCatch(Of T)(T, System.Action(Of T), System.Action(Of System.Exception))
  name.vb: TryCatch(Of T)(T, Action(Of T), Action(Of Exception))
  spec.csharp:
  - uid: OSharp.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
    name: TryCatch<T>
    nameWithType: TryCatchExtensions.TryCatch<T>
    fullName: OSharp.Extensions.TryCatchExtensions.TryCatch<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
    name: TryCatch(Of T)
    nameWithType: TryCatchExtensions.TryCatch(Of T)
    fullName: OSharp.Extensions.TryCatchExtensions.TryCatch(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
  commentId: M:OSharp.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
  isExternal: true
  name: TryCatch<T, TResult>(T, Func<T, TResult>, Action<Exception>, Action<T>)
  nameWithType: TryCatchExtensions.TryCatch<T, TResult>(T, Func<T, TResult>, Action<Exception>, Action<T>)
  fullName: OSharp.Extensions.TryCatchExtensions.TryCatch<T, TResult>(T, System.Func<T, TResult>, System.Action<System.Exception>, System.Action<T>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of T, TResult)(T, Func(Of T, TResult), Action(Of Exception), Action(Of T))
  fullName.vb: OSharp.Extensions.TryCatchExtensions.TryCatch(Of T, TResult)(T, System.Func(Of T, TResult), System.Action(Of System.Exception), System.Action(Of T))
  name.vb: TryCatch(Of T, TResult)(T, Func(Of T, TResult), Action(Of Exception), Action(Of T))
  spec.csharp:
  - uid: OSharp.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
    name: TryCatch<T, TResult>
    nameWithType: TryCatchExtensions.TryCatch<T, TResult>
    fullName: OSharp.Extensions.TryCatchExtensions.TryCatch<T, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
    name: TryCatch(Of T, TResult)
    nameWithType: TryCatchExtensions.TryCatch(Of T, TResult)
    fullName: OSharp.Extensions.TryCatchExtensions.TryCatch(Of T, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
  commentId: M:OSharp.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
  isExternal: true
  name: TryCatch<T, TResult>(T, Func<T, TResult>, Action<Exception>)
  nameWithType: TryCatchExtensions.TryCatch<T, TResult>(T, Func<T, TResult>, Action<Exception>)
  fullName: OSharp.Extensions.TryCatchExtensions.TryCatch<T, TResult>(T, System.Func<T, TResult>, System.Action<System.Exception>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of T, TResult)(T, Func(Of T, TResult), Action(Of Exception))
  fullName.vb: OSharp.Extensions.TryCatchExtensions.TryCatch(Of T, TResult)(T, System.Func(Of T, TResult), System.Action(Of System.Exception))
  name.vb: TryCatch(Of T, TResult)(T, Func(Of T, TResult), Action(Of Exception))
  spec.csharp:
  - uid: OSharp.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
    name: TryCatch<T, TResult>
    nameWithType: TryCatchExtensions.TryCatch<T, TResult>
    fullName: OSharp.Extensions.TryCatchExtensions.TryCatch<T, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
    name: TryCatch(Of T, TResult)
    nameWithType: TryCatchExtensions.TryCatch(Of T, TResult)
    fullName: OSharp.Extensions.TryCatchExtensions.TryCatch(Of T, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
  commentId: M:OSharp.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
  isExternal: true
  name: TryFinally<T>(T, Action<T>, Action<T>)
  nameWithType: TryCatchExtensions.TryFinally<T>(T, Action<T>, Action<T>)
  fullName: OSharp.Extensions.TryCatchExtensions.TryFinally<T>(T, System.Action<T>, System.Action<T>)
  nameWithType.vb: TryCatchExtensions.TryFinally(Of T)(T, Action(Of T), Action(Of T))
  fullName.vb: OSharp.Extensions.TryCatchExtensions.TryFinally(Of T)(T, System.Action(Of T), System.Action(Of T))
  name.vb: TryFinally(Of T)(T, Action(Of T), Action(Of T))
  spec.csharp:
  - uid: OSharp.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
    name: TryFinally<T>
    nameWithType: TryCatchExtensions.TryFinally<T>
    fullName: OSharp.Extensions.TryCatchExtensions.TryFinally<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
    name: TryFinally(Of T)
    nameWithType: TryCatchExtensions.TryFinally(Of T)
    fullName: OSharp.Extensions.TryCatchExtensions.TryFinally(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
  commentId: M:OSharp.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
  isExternal: true
  name: ToJsonString(Object, Boolean, Boolean)
  nameWithType: JsonExtensions.ToJsonString(Object, Boolean, Boolean)
  fullName: OSharp.Json.JsonExtensions.ToJsonString(System.Object, System.Boolean, System.Boolean)
  spec.csharp:
  - uid: OSharp.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
    name: ToJsonString
    nameWithType: JsonExtensions.ToJsonString
    fullName: OSharp.Json.JsonExtensions.ToJsonString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
    name: ToJsonString
    nameWithType: JsonExtensions.ToJsonString
    fullName: OSharp.Json.JsonExtensions.ToJsonString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Json.JsonExtensions
  commentId: T:OSharp.Json.JsonExtensions
  parent: OSharp.Json
  name: JsonExtensions
  nameWithType: JsonExtensions
  fullName: OSharp.Json.JsonExtensions
- uid: OSharp.Mapping.MapperExtensions.MapTo``1(System.Object)
  commentId: M:OSharp.Mapping.MapperExtensions.MapTo``1(System.Object)
  isExternal: true
  name: MapTo<TTarget>(Object)
  nameWithType: MapperExtensions.MapTo<TTarget>(Object)
  fullName: OSharp.Mapping.MapperExtensions.MapTo<TTarget>(System.Object)
  nameWithType.vb: MapperExtensions.MapTo(Of TTarget)(Object)
  fullName.vb: OSharp.Mapping.MapperExtensions.MapTo(Of TTarget)(System.Object)
  name.vb: MapTo(Of TTarget)(Object)
  spec.csharp:
  - uid: OSharp.Mapping.MapperExtensions.MapTo``1(System.Object)
    name: MapTo<TTarget>
    nameWithType: MapperExtensions.MapTo<TTarget>
    fullName: OSharp.Mapping.MapperExtensions.MapTo<TTarget>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Mapping.MapperExtensions.MapTo``1(System.Object)
    name: MapTo(Of TTarget)
    nameWithType: MapperExtensions.MapTo(Of TTarget)
    fullName: OSharp.Mapping.MapperExtensions.MapTo(Of TTarget)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Mapping.MapperExtensions
  commentId: T:OSharp.Mapping.MapperExtensions
  parent: OSharp.Mapping
  name: MapperExtensions
  nameWithType: MapperExtensions
  fullName: OSharp.Mapping.MapperExtensions
- uid: OSharp.Mapping.MapperExtensions.MapTo``2(``0,``1)
  commentId: M:OSharp.Mapping.MapperExtensions.MapTo``2(``0,``1)
  name: MapTo<TSource, TTarget>(TSource, TTarget)
  nameWithType: MapperExtensions.MapTo<TSource, TTarget>(TSource, TTarget)
  fullName: OSharp.Mapping.MapperExtensions.MapTo<TSource, TTarget>(TSource, TTarget)
  nameWithType.vb: MapperExtensions.MapTo(Of TSource, TTarget)(TSource, TTarget)
  fullName.vb: OSharp.Mapping.MapperExtensions.MapTo(Of TSource, TTarget)(TSource, TTarget)
  name.vb: MapTo(Of TSource, TTarget)(TSource, TTarget)
  spec.csharp:
  - uid: OSharp.Mapping.MapperExtensions.MapTo``2(``0,``1)
    name: MapTo<TSource, TTarget>
    nameWithType: MapperExtensions.MapTo<TSource, TTarget>
    fullName: OSharp.Mapping.MapperExtensions.MapTo<TSource, TTarget>
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Mapping.MapperExtensions.MapTo``2(``0,``1)
    name: MapTo(Of TSource, TTarget)
    nameWithType: MapperExtensions.MapTo(Of TSource, TTarget)
    fullName: OSharp.Mapping.MapperExtensions.MapTo(Of TSource, TTarget)
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Reflection.LockExtensions.Locking(System.Object,System.Action)
  commentId: M:OSharp.Reflection.LockExtensions.Locking(System.Object,System.Action)
  isExternal: true
  name: Locking(Object, Action)
  nameWithType: LockExtensions.Locking(Object, Action)
  fullName: OSharp.Reflection.LockExtensions.Locking(System.Object, System.Action)
  spec.csharp:
  - uid: OSharp.Reflection.LockExtensions.Locking(System.Object,System.Action)
    name: Locking
    nameWithType: LockExtensions.Locking
    fullName: OSharp.Reflection.LockExtensions.Locking
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Reflection.LockExtensions.Locking(System.Object,System.Action)
    name: Locking
    nameWithType: LockExtensions.Locking
    fullName: OSharp.Reflection.LockExtensions.Locking
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Reflection.LockExtensions
  commentId: T:OSharp.Reflection.LockExtensions
  parent: OSharp.Reflection
  name: LockExtensions
  nameWithType: LockExtensions
  fullName: OSharp.Reflection.LockExtensions
- uid: OSharp.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
  commentId: M:OSharp.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
  isExternal: true
  name: Locking<T>(T, Action<T>)
  nameWithType: LockExtensions.Locking<T>(T, Action<T>)
  fullName: OSharp.Reflection.LockExtensions.Locking<T>(T, System.Action<T>)
  nameWithType.vb: LockExtensions.Locking(Of T)(T, Action(Of T))
  fullName.vb: OSharp.Reflection.LockExtensions.Locking(Of T)(T, System.Action(Of T))
  name.vb: Locking(Of T)(T, Action(Of T))
  spec.csharp:
  - uid: OSharp.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
    name: Locking<T>
    nameWithType: LockExtensions.Locking<T>
    fullName: OSharp.Reflection.LockExtensions.Locking<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
    name: Locking(Of T)
    nameWithType: LockExtensions.Locking(Of T)
    fullName: OSharp.Reflection.LockExtensions.Locking(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
  commentId: M:OSharp.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
  isExternal: true
  name: Locking<TResult>(Object, Func<TResult>)
  nameWithType: LockExtensions.Locking<TResult>(Object, Func<TResult>)
  fullName: OSharp.Reflection.LockExtensions.Locking<TResult>(System.Object, System.Func<TResult>)
  nameWithType.vb: LockExtensions.Locking(Of TResult)(Object, Func(Of TResult))
  fullName.vb: OSharp.Reflection.LockExtensions.Locking(Of TResult)(System.Object, System.Func(Of TResult))
  name.vb: Locking(Of TResult)(Object, Func(Of TResult))
  spec.csharp:
  - uid: OSharp.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
    name: Locking<TResult>
    nameWithType: LockExtensions.Locking<TResult>
    fullName: OSharp.Reflection.LockExtensions.Locking<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
    name: Locking(Of TResult)
    nameWithType: LockExtensions.Locking(Of TResult)
    fullName: OSharp.Reflection.LockExtensions.Locking(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
  commentId: M:OSharp.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
  isExternal: true
  name: Locking<TSource, TResult>(TSource, Func<TSource, TResult>)
  nameWithType: LockExtensions.Locking<TSource, TResult>(TSource, Func<TSource, TResult>)
  fullName: OSharp.Reflection.LockExtensions.Locking<TSource, TResult>(TSource, System.Func<TSource, TResult>)
  nameWithType.vb: LockExtensions.Locking(Of TSource, TResult)(TSource, Func(Of TSource, TResult))
  fullName.vb: OSharp.Reflection.LockExtensions.Locking(Of TSource, TResult)(TSource, System.Func(Of TSource, TResult))
  name.vb: Locking(Of TSource, TResult)(TSource, Func(Of TSource, TResult))
  spec.csharp:
  - uid: OSharp.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
    name: Locking<TSource, TResult>
    nameWithType: LockExtensions.Locking<TSource, TResult>
    fullName: OSharp.Reflection.LockExtensions.Locking<TSource, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
    name: Locking(Of TSource, TResult)
    nameWithType: LockExtensions.Locking(Of TSource, TResult)
    fullName: OSharp.Reflection.LockExtensions.Locking(Of TSource, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
  commentId: M:Hybrid.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
  isExternal: true
  name: CastTo(Object, Type)
  nameWithType: ObjectExtensions.CastTo(Object, Type)
  fullName: Hybrid.Extensions.ObjectExtensions.CastTo(System.Object, System.Type)
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
    name: CastTo
    nameWithType: ObjectExtensions.CastTo
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
    name: CastTo
    nameWithType: ObjectExtensions.CastTo
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ObjectExtensions
  commentId: T:Hybrid.Extensions.ObjectExtensions
  parent: Hybrid.Extensions
  name: ObjectExtensions
  nameWithType: ObjectExtensions
  fullName: Hybrid.Extensions.ObjectExtensions
- uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object)
  commentId: M:Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object)
  isExternal: true
  name: CastTo<T>(Object)
  nameWithType: ObjectExtensions.CastTo<T>(Object)
  fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>(System.Object)
  nameWithType.vb: ObjectExtensions.CastTo(Of T)(Object)
  fullName.vb: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)(System.Object)
  name.vb: CastTo(Of T)(Object)
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object)
    name: CastTo<T>
    nameWithType: ObjectExtensions.CastTo<T>
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object)
    name: CastTo(Of T)
    nameWithType: ObjectExtensions.CastTo(Of T)
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
  commentId: M:Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
  isExternal: true
  name: CastTo<T>(Object, T)
  nameWithType: ObjectExtensions.CastTo<T>(Object, T)
  fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>(System.Object, T)
  nameWithType.vb: ObjectExtensions.CastTo(Of T)(Object, T)
  fullName.vb: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)(System.Object, T)
  name.vb: CastTo(Of T)(Object, T)
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
    name: CastTo<T>
    nameWithType: ObjectExtensions.CastTo<T>
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
    name: CastTo(Of T)
    nameWithType: ObjectExtensions.CastTo(Of T)
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
  commentId: M:Hybrid.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
  name: IsIn<T>(T, T[])
  nameWithType: ObjectExtensions.IsIn<T>(T, T[])
  fullName: Hybrid.Extensions.ObjectExtensions.IsIn<T>(T, T[])
  nameWithType.vb: ObjectExtensions.IsIn(Of T)(T, T())
  fullName.vb: Hybrid.Extensions.ObjectExtensions.IsIn(Of T)(T, T())
  name.vb: IsIn(Of T)(T, T())
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
    name: IsIn<T>
    nameWithType: ObjectExtensions.IsIn<T>
    fullName: Hybrid.Extensions.ObjectExtensions.IsIn<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
    name: IsIn(Of T)
    nameWithType: ObjectExtensions.IsIn(Of T)
    fullName: Hybrid.Extensions.ObjectExtensions.IsIn(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ObjectExtensions.ToDynamic(System.Object)
  commentId: M:Hybrid.Extensions.ObjectExtensions.ToDynamic(System.Object)
  isExternal: true
  name: ToDynamic(Object)
  nameWithType: ObjectExtensions.ToDynamic(Object)
  fullName: Hybrid.Extensions.ObjectExtensions.ToDynamic(System.Object)
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.ToDynamic(System.Object)
    name: ToDynamic
    nameWithType: ObjectExtensions.ToDynamic
    fullName: Hybrid.Extensions.ObjectExtensions.ToDynamic
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.ToDynamic(System.Object)
    name: ToDynamic
    nameWithType: ObjectExtensions.ToDynamic
    fullName: Hybrid.Extensions.ObjectExtensions.ToDynamic
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ObjectExtensions.DeepClone``1(``0)
  commentId: M:Hybrid.Extensions.ObjectExtensions.DeepClone``1(``0)
  name: DeepClone<T>(T)
  nameWithType: ObjectExtensions.DeepClone<T>(T)
  fullName: Hybrid.Extensions.ObjectExtensions.DeepClone<T>(T)
  nameWithType.vb: ObjectExtensions.DeepClone(Of T)(T)
  fullName.vb: Hybrid.Extensions.ObjectExtensions.DeepClone(Of T)(T)
  name.vb: DeepClone(Of T)(T)
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.DeepClone``1(``0)
    name: DeepClone<T>
    nameWithType: ObjectExtensions.DeepClone<T>
    fullName: Hybrid.Extensions.ObjectExtensions.DeepClone<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.DeepClone``1(``0)
    name: DeepClone(Of T)
    nameWithType: ObjectExtensions.DeepClone(Of T)
    fullName: Hybrid.Extensions.ObjectExtensions.DeepClone(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
  commentId: M:Hybrid.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
  isExternal: true
  name: Required<T>(T, Func<T, Boolean>, String)
  nameWithType: ParameterCheckExtensions.Required<T>(T, Func<T, Boolean>, String)
  fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<T>(T, System.Func<T, System.Boolean>, System.String)
  nameWithType.vb: ParameterCheckExtensions.Required(Of T)(T, Func(Of T, Boolean), String)
  fullName.vb: Hybrid.Extensions.ParameterCheckExtensions.Required(Of T)(T, System.Func(Of T, System.Boolean), System.String)
  name.vb: Required(Of T)(T, Func(Of T, Boolean), String)
  spec.csharp:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
    name: Required<T>
    nameWithType: ParameterCheckExtensions.Required<T>
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
    name: Required(Of T)
    nameWithType: ParameterCheckExtensions.Required(Of T)
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ParameterCheckExtensions
  commentId: T:Hybrid.Extensions.ParameterCheckExtensions
  parent: Hybrid.Extensions
  name: ParameterCheckExtensions
  nameWithType: ParameterCheckExtensions
  fullName: Hybrid.Extensions.ParameterCheckExtensions
- uid: Hybrid.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
  commentId: M:Hybrid.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
  isExternal: true
  name: Required<T, TException>(T, Func<T, Boolean>, String)
  nameWithType: ParameterCheckExtensions.Required<T, TException>(T, Func<T, Boolean>, String)
  fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<T, TException>(T, System.Func<T, System.Boolean>, System.String)
  nameWithType.vb: ParameterCheckExtensions.Required(Of T, TException)(T, Func(Of T, Boolean), String)
  fullName.vb: Hybrid.Extensions.ParameterCheckExtensions.Required(Of T, TException)(T, System.Func(Of T, System.Boolean), System.String)
  name.vb: Required(Of T, TException)(T, Func(Of T, Boolean), String)
  spec.csharp:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
    name: Required<T, TException>
    nameWithType: ParameterCheckExtensions.Required<T, TException>
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<T, TException>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
    name: Required(Of T, TException)
    nameWithType: ParameterCheckExtensions.Required(Of T, TException)
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required(Of T, TException)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
  commentId: M:Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
  isExternal: true
  name: CheckNotNull<T>(T, String)
  nameWithType: ParameterCheckExtensions.CheckNotNull<T>(T, String)
  fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull<T>(T, System.String)
  nameWithType.vb: ParameterCheckExtensions.CheckNotNull(Of T)(T, String)
  fullName.vb: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull(Of T)(T, System.String)
  name.vb: CheckNotNull(Of T)(T, String)
  spec.csharp:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
    name: CheckNotNull<T>
    nameWithType: ParameterCheckExtensions.CheckNotNull<T>
    fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
    name: CheckNotNull(Of T)
    nameWithType: ParameterCheckExtensions.CheckNotNull(Of T)
    fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
  isExternal: true
  name: TryCatch<T>(T, Action<T>, Action<Exception>, Action<T>)
  nameWithType: TryCatchExtensions.TryCatch<T>(T, Action<T>, Action<Exception>, Action<T>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T>(T, System.Action<T>, System.Action<System.Exception>, System.Action<T>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of T)(T, Action(Of T), Action(Of Exception), Action(Of T))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T)(T, System.Action(Of T), System.Action(Of System.Exception), System.Action(Of T))
  name.vb: TryCatch(Of T)(T, Action(Of T), Action(Of Exception), Action(Of T))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
    name: TryCatch<T>
    nameWithType: TryCatchExtensions.TryCatch<T>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
    name: TryCatch(Of T)
    nameWithType: TryCatchExtensions.TryCatch(Of T)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.TryCatchExtensions
  commentId: T:Hybrid.Extensions.TryCatchExtensions
  parent: Hybrid.Extensions
  name: TryCatchExtensions
  nameWithType: TryCatchExtensions
  fullName: Hybrid.Extensions.TryCatchExtensions
- uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
  isExternal: true
  name: TryCatch<T>(T, Action<T>, Action<Exception>)
  nameWithType: TryCatchExtensions.TryCatch<T>(T, Action<T>, Action<Exception>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T>(T, System.Action<T>, System.Action<System.Exception>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of T)(T, Action(Of T), Action(Of Exception))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T)(T, System.Action(Of T), System.Action(Of System.Exception))
  name.vb: TryCatch(Of T)(T, Action(Of T), Action(Of Exception))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
    name: TryCatch<T>
    nameWithType: TryCatchExtensions.TryCatch<T>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
    name: TryCatch(Of T)
    nameWithType: TryCatchExtensions.TryCatch(Of T)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
  isExternal: true
  name: TryCatch<T, TResult>(T, Func<T, TResult>, Action<Exception>, Action<T>)
  nameWithType: TryCatchExtensions.TryCatch<T, TResult>(T, Func<T, TResult>, Action<Exception>, Action<T>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T, TResult>(T, System.Func<T, TResult>, System.Action<System.Exception>, System.Action<T>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of T, TResult)(T, Func(Of T, TResult), Action(Of Exception), Action(Of T))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T, TResult)(T, System.Func(Of T, TResult), System.Action(Of System.Exception), System.Action(Of T))
  name.vb: TryCatch(Of T, TResult)(T, Func(Of T, TResult), Action(Of Exception), Action(Of T))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
    name: TryCatch<T, TResult>
    nameWithType: TryCatchExtensions.TryCatch<T, TResult>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
    name: TryCatch(Of T, TResult)
    nameWithType: TryCatchExtensions.TryCatch(Of T, TResult)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
  isExternal: true
  name: TryCatch<T, TResult>(T, Func<T, TResult>, Action<Exception>)
  nameWithType: TryCatchExtensions.TryCatch<T, TResult>(T, Func<T, TResult>, Action<Exception>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T, TResult>(T, System.Func<T, TResult>, System.Action<System.Exception>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of T, TResult)(T, Func(Of T, TResult), Action(Of Exception))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T, TResult)(T, System.Func(Of T, TResult), System.Action(Of System.Exception))
  name.vb: TryCatch(Of T, TResult)(T, Func(Of T, TResult), Action(Of Exception))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
    name: TryCatch<T, TResult>
    nameWithType: TryCatchExtensions.TryCatch<T, TResult>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
    name: TryCatch(Of T, TResult)
    nameWithType: TryCatchExtensions.TryCatch(Of T, TResult)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
  isExternal: true
  name: TryFinally<T>(T, Action<T>, Action<T>)
  nameWithType: TryCatchExtensions.TryFinally<T>(T, Action<T>, Action<T>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryFinally<T>(T, System.Action<T>, System.Action<T>)
  nameWithType.vb: TryCatchExtensions.TryFinally(Of T)(T, Action(Of T), Action(Of T))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryFinally(Of T)(T, System.Action(Of T), System.Action(Of T))
  name.vb: TryFinally(Of T)(T, Action(Of T), Action(Of T))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
    name: TryFinally<T>
    nameWithType: TryCatchExtensions.TryFinally<T>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryFinally<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
    name: TryFinally(Of T)
    nameWithType: TryCatchExtensions.TryFinally(Of T)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryFinally(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
  commentId: M:Hybrid.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
  isExternal: true
  name: ToJsonString(Object, Boolean, Boolean)
  nameWithType: JsonExtensions.ToJsonString(Object, Boolean, Boolean)
  fullName: Hybrid.Json.JsonExtensions.ToJsonString(System.Object, System.Boolean, System.Boolean)
  spec.csharp:
  - uid: Hybrid.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
    name: ToJsonString
    nameWithType: JsonExtensions.ToJsonString
    fullName: Hybrid.Json.JsonExtensions.ToJsonString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
    name: ToJsonString
    nameWithType: JsonExtensions.ToJsonString
    fullName: Hybrid.Json.JsonExtensions.ToJsonString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Json.JsonExtensions
  commentId: T:Hybrid.Json.JsonExtensions
  parent: Hybrid.Json
  name: JsonExtensions
  nameWithType: JsonExtensions
  fullName: Hybrid.Json.JsonExtensions
- uid: Hybrid.Mapping.MapperExtensions.MapTo``1(System.Object)
  commentId: M:Hybrid.Mapping.MapperExtensions.MapTo``1(System.Object)
  isExternal: true
  name: MapTo<TTarget>(Object)
  nameWithType: MapperExtensions.MapTo<TTarget>(Object)
  fullName: Hybrid.Mapping.MapperExtensions.MapTo<TTarget>(System.Object)
  nameWithType.vb: MapperExtensions.MapTo(Of TTarget)(Object)
  fullName.vb: Hybrid.Mapping.MapperExtensions.MapTo(Of TTarget)(System.Object)
  name.vb: MapTo(Of TTarget)(Object)
  spec.csharp:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``1(System.Object)
    name: MapTo<TTarget>
    nameWithType: MapperExtensions.MapTo<TTarget>
    fullName: Hybrid.Mapping.MapperExtensions.MapTo<TTarget>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``1(System.Object)
    name: MapTo(Of TTarget)
    nameWithType: MapperExtensions.MapTo(Of TTarget)
    fullName: Hybrid.Mapping.MapperExtensions.MapTo(Of TTarget)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Mapping.MapperExtensions
  commentId: T:Hybrid.Mapping.MapperExtensions
  parent: Hybrid.Mapping
  name: MapperExtensions
  nameWithType: MapperExtensions
  fullName: Hybrid.Mapping.MapperExtensions
- uid: Hybrid.Mapping.MapperExtensions.MapTo``2(``0,``1)
  commentId: M:Hybrid.Mapping.MapperExtensions.MapTo``2(``0,``1)
  name: MapTo<TSource, TTarget>(TSource, TTarget)
  nameWithType: MapperExtensions.MapTo<TSource, TTarget>(TSource, TTarget)
  fullName: Hybrid.Mapping.MapperExtensions.MapTo<TSource, TTarget>(TSource, TTarget)
  nameWithType.vb: MapperExtensions.MapTo(Of TSource, TTarget)(TSource, TTarget)
  fullName.vb: Hybrid.Mapping.MapperExtensions.MapTo(Of TSource, TTarget)(TSource, TTarget)
  name.vb: MapTo(Of TSource, TTarget)(TSource, TTarget)
  spec.csharp:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``2(``0,``1)
    name: MapTo<TSource, TTarget>
    nameWithType: MapperExtensions.MapTo<TSource, TTarget>
    fullName: Hybrid.Mapping.MapperExtensions.MapTo<TSource, TTarget>
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``2(``0,``1)
    name: MapTo(Of TSource, TTarget)
    nameWithType: MapperExtensions.MapTo(Of TSource, TTarget)
    fullName: Hybrid.Mapping.MapperExtensions.MapTo(Of TSource, TTarget)
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Reflection.LockExtensions.Locking(System.Object,System.Action)
  commentId: M:Hybrid.Reflection.LockExtensions.Locking(System.Object,System.Action)
  isExternal: true
  name: Locking(Object, Action)
  nameWithType: LockExtensions.Locking(Object, Action)
  fullName: Hybrid.Reflection.LockExtensions.Locking(System.Object, System.Action)
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking(System.Object,System.Action)
    name: Locking
    nameWithType: LockExtensions.Locking
    fullName: Hybrid.Reflection.LockExtensions.Locking
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking(System.Object,System.Action)
    name: Locking
    nameWithType: LockExtensions.Locking
    fullName: Hybrid.Reflection.LockExtensions.Locking
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Reflection.LockExtensions
  commentId: T:Hybrid.Reflection.LockExtensions
  parent: Hybrid.Reflection
  name: LockExtensions
  nameWithType: LockExtensions
  fullName: Hybrid.Reflection.LockExtensions
- uid: Hybrid.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
  commentId: M:Hybrid.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
  isExternal: true
  name: Locking<T>(T, Action<T>)
  nameWithType: LockExtensions.Locking<T>(T, Action<T>)
  fullName: Hybrid.Reflection.LockExtensions.Locking<T>(T, System.Action<T>)
  nameWithType.vb: LockExtensions.Locking(Of T)(T, Action(Of T))
  fullName.vb: Hybrid.Reflection.LockExtensions.Locking(Of T)(T, System.Action(Of T))
  name.vb: Locking(Of T)(T, Action(Of T))
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
    name: Locking<T>
    nameWithType: LockExtensions.Locking<T>
    fullName: Hybrid.Reflection.LockExtensions.Locking<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
    name: Locking(Of T)
    nameWithType: LockExtensions.Locking(Of T)
    fullName: Hybrid.Reflection.LockExtensions.Locking(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
  commentId: M:Hybrid.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
  isExternal: true
  name: Locking<TResult>(Object, Func<TResult>)
  nameWithType: LockExtensions.Locking<TResult>(Object, Func<TResult>)
  fullName: Hybrid.Reflection.LockExtensions.Locking<TResult>(System.Object, System.Func<TResult>)
  nameWithType.vb: LockExtensions.Locking(Of TResult)(Object, Func(Of TResult))
  fullName.vb: Hybrid.Reflection.LockExtensions.Locking(Of TResult)(System.Object, System.Func(Of TResult))
  name.vb: Locking(Of TResult)(Object, Func(Of TResult))
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
    name: Locking<TResult>
    nameWithType: LockExtensions.Locking<TResult>
    fullName: Hybrid.Reflection.LockExtensions.Locking<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
    name: Locking(Of TResult)
    nameWithType: LockExtensions.Locking(Of TResult)
    fullName: Hybrid.Reflection.LockExtensions.Locking(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
  commentId: M:Hybrid.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
  isExternal: true
  name: Locking<TSource, TResult>(TSource, Func<TSource, TResult>)
  nameWithType: LockExtensions.Locking<TSource, TResult>(TSource, Func<TSource, TResult>)
  fullName: Hybrid.Reflection.LockExtensions.Locking<TSource, TResult>(TSource, System.Func<TSource, TResult>)
  nameWithType.vb: LockExtensions.Locking(Of TSource, TResult)(TSource, Func(Of TSource, TResult))
  fullName.vb: Hybrid.Reflection.LockExtensions.Locking(Of TSource, TResult)(TSource, System.Func(Of TSource, TResult))
  name.vb: Locking(Of TSource, TResult)(TSource, Func(Of TSource, TResult))
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
    name: Locking<TSource, TResult>
    nameWithType: LockExtensions.Locking<TSource, TResult>
    fullName: Hybrid.Reflection.LockExtensions.Locking<TSource, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
    name: Locking(Of TSource, TResult)
    nameWithType: LockExtensions.Locking(Of TSource, TResult)
    fullName: Hybrid.Reflection.LockExtensions.Locking(Of TSource, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2(``0)
  commentId: M:Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2(``0)
  name: CheckICreatedTime<TEntity, TKey>(TEntity)
  nameWithType: EntityExtensions.CheckICreatedTime<TEntity, TKey>(TEntity)
  fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime<TEntity, TKey>(TEntity)
  nameWithType.vb: EntityExtensions.CheckICreatedTime(Of TEntity, TKey)(TEntity)
  fullName.vb: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime(Of TEntity, TKey)(TEntity)
  name.vb: CheckICreatedTime(Of TEntity, TKey)(TEntity)
  spec.csharp:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2(``0)
    name: CheckICreatedTime<TEntity, TKey>
    nameWithType: EntityExtensions.CheckICreatedTime<TEntity, TKey>
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime<TEntity, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2(``0)
    name: CheckICreatedTime(Of TEntity, TKey)
    nameWithType: EntityExtensions.CheckICreatedTime(Of TEntity, TKey)
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime(Of TEntity, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Domain.Entities.EntityExtensions
  commentId: T:Hybrid.Domain.Entities.EntityExtensions
  parent: Hybrid.Domain.Entities
  name: EntityExtensions
  nameWithType: EntityExtensions
  fullName: Hybrid.Domain.Entities.EntityExtensions
- uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
  commentId: M:Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
  isExternal: true
  name: CheckICreationAudited<TEntity, TKey, TUserKey>(TEntity, IPrincipal)
  nameWithType: EntityExtensions.CheckICreationAudited<TEntity, TKey, TUserKey>(TEntity, IPrincipal)
  fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited<TEntity, TKey, TUserKey>(TEntity, System.Security.Principal.IPrincipal)
  nameWithType.vb: EntityExtensions.CheckICreationAudited(Of TEntity, TKey, TUserKey)(TEntity, IPrincipal)
  fullName.vb: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited(Of TEntity, TKey, TUserKey)(TEntity, System.Security.Principal.IPrincipal)
  name.vb: CheckICreationAudited(Of TEntity, TKey, TUserKey)(TEntity, IPrincipal)
  spec.csharp:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
    name: CheckICreationAudited<TEntity, TKey, TUserKey>
    nameWithType: EntityExtensions.CheckICreationAudited<TEntity, TKey, TUserKey>
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited<TEntity, TKey, TUserKey>
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
    name: CheckICreationAudited(Of TEntity, TKey, TUserKey)
    nameWithType: EntityExtensions.CheckICreationAudited(Of TEntity, TKey, TUserKey)
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited(Of TEntity, TKey, TUserKey)
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
  commentId: M:Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
  isExternal: true
  name: CheckIUpdateAudited<TEntity, TKey, TUserKey>(TEntity, IPrincipal)
  nameWithType: EntityExtensions.CheckIUpdateAudited<TEntity, TKey, TUserKey>(TEntity, IPrincipal)
  fullName: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited<TEntity, TKey, TUserKey>(TEntity, System.Security.Principal.IPrincipal)
  nameWithType.vb: EntityExtensions.CheckIUpdateAudited(Of TEntity, TKey, TUserKey)(TEntity, IPrincipal)
  fullName.vb: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited(Of TEntity, TKey, TUserKey)(TEntity, System.Security.Principal.IPrincipal)
  name.vb: CheckIUpdateAudited(Of TEntity, TKey, TUserKey)(TEntity, IPrincipal)
  spec.csharp:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
    name: CheckIUpdateAudited<TEntity, TKey, TUserKey>
    nameWithType: EntityExtensions.CheckIUpdateAudited<TEntity, TKey, TUserKey>
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited<TEntity, TKey, TUserKey>
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
    name: CheckIUpdateAudited(Of TEntity, TKey, TUserKey)
    nameWithType: EntityExtensions.CheckIUpdateAudited(Of TEntity, TKey, TUserKey)
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited(Of TEntity, TKey, TUserKey)
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Entity
  commentId: N:OSharp.Entity
  name: OSharp.Entity
  nameWithType: OSharp.Entity
  fullName: OSharp.Entity
- uid: OSharp.Extensions
  commentId: N:OSharp.Extensions
  name: OSharp.Extensions
  nameWithType: OSharp.Extensions
  fullName: OSharp.Extensions
- uid: OSharp.Json
  commentId: N:OSharp.Json
  name: OSharp.Json
  nameWithType: OSharp.Json
  fullName: OSharp.Json
- uid: OSharp.Mapping
  commentId: N:OSharp.Mapping
  name: OSharp.Mapping
  nameWithType: OSharp.Mapping
  fullName: OSharp.Mapping
- uid: OSharp.Reflection
  commentId: N:OSharp.Reflection
  name: OSharp.Reflection
  nameWithType: OSharp.Reflection
  fullName: OSharp.Reflection
- uid: Hybrid.Extensions
  commentId: N:Hybrid.Extensions
  name: Hybrid.Extensions
  nameWithType: Hybrid.Extensions
  fullName: Hybrid.Extensions
- uid: Hybrid.Json
  commentId: N:Hybrid.Json
  name: Hybrid.Json
  nameWithType: Hybrid.Json
  fullName: Hybrid.Json
- uid: Hybrid.Mapping
  commentId: N:Hybrid.Mapping
  name: Hybrid.Mapping
  nameWithType: Hybrid.Mapping
  fullName: Hybrid.Mapping
- uid: Hybrid.Reflection
  commentId: N:Hybrid.Reflection
  name: Hybrid.Reflection
  nameWithType: Hybrid.Reflection
  fullName: Hybrid.Reflection
- uid: Hybrid.Domain.Entities
  commentId: N:Hybrid.Domain.Entities
  name: Hybrid.Domain.Entities
  nameWithType: Hybrid.Domain.Entities
  fullName: Hybrid.Domain.Entities
- uid: Hybrid.EventBuses.EventBusBase
  commentId: T:Hybrid.EventBuses.EventBusBase
  name: EventBusBase
  nameWithType: EventBusBase
  fullName: Hybrid.EventBuses.EventBusBase
- uid: Hybrid.EventBuses.EventBusBase.#ctor*
  commentId: Overload:Hybrid.EventBuses.EventBusBase.#ctor
  name: EventBusBase
  nameWithType: EventBusBase.EventBusBase
  fullName: Hybrid.EventBuses.EventBusBase.EventBusBase
- uid: Hybrid.Dependency.IHybridServiceScopeFactory
  commentId: T:Hybrid.Dependency.IHybridServiceScopeFactory
  parent: Hybrid.Dependency
  name: IHybridServiceScopeFactory
  nameWithType: IHybridServiceScopeFactory
  fullName: Hybrid.Dependency.IHybridServiceScopeFactory
- uid: System.IServiceProvider
  commentId: T:System.IServiceProvider
  parent: System
  isExternal: true
  name: IServiceProvider
  nameWithType: IServiceProvider
  fullName: System.IServiceProvider
- uid: Hybrid.Dependency
  commentId: N:Hybrid.Dependency
  name: Hybrid.Dependency
  nameWithType: Hybrid.Dependency
  fullName: Hybrid.Dependency
- uid: Hybrid.EventBuses.EventBusBase.ServiceScopeFactory*
  commentId: Overload:Hybrid.EventBuses.EventBusBase.ServiceScopeFactory
  name: ServiceScopeFactory
  nameWithType: EventBusBase.ServiceScopeFactory
  fullName: Hybrid.EventBuses.EventBusBase.ServiceScopeFactory
- uid: Hybrid.EventBuses.EventBusBase.EventStore*
  commentId: Overload:Hybrid.EventBuses.EventBusBase.EventStore
  name: EventStore
  nameWithType: EventBusBase.EventStore
  fullName: Hybrid.EventBuses.EventBusBase.EventStore
- uid: Hybrid.EventBuses.IEventStore
  commentId: T:Hybrid.EventBuses.IEventStore
  parent: Hybrid.EventBuses
  name: IEventStore
  nameWithType: IEventStore
  fullName: Hybrid.EventBuses.IEventStore
- uid: Hybrid.EventBuses.EventBusBase.Logger*
  commentId: Overload:Hybrid.EventBuses.EventBusBase.Logger
  name: Logger
  nameWithType: EventBusBase.Logger
  fullName: Hybrid.EventBuses.EventBusBase.Logger
- uid: Microsoft.Extensions.Logging.ILogger
  commentId: T:Microsoft.Extensions.Logging.ILogger
  parent: Microsoft.Extensions.Logging
  isExternal: true
  name: ILogger
  nameWithType: ILogger
  fullName: Microsoft.Extensions.Logging.ILogger
- uid: Microsoft.Extensions.Logging
  commentId: N:Microsoft.Extensions.Logging
  isExternal: true
  name: Microsoft.Extensions.Logging
  nameWithType: Microsoft.Extensions.Logging
  fullName: Microsoft.Extensions.Logging
- uid: Hybrid.EventBuses.EventBusBase.Subscribe*
  commentId: Overload:Hybrid.EventBuses.EventBusBase.Subscribe
  name: Subscribe
  nameWithType: EventBusBase.Subscribe
  fullName: Hybrid.EventBuses.EventBusBase.Subscribe
- uid: Hybrid.EventBuses.IEventSubscriber.Subscribe``2
  commentId: M:Hybrid.EventBuses.IEventSubscriber.Subscribe``2
  parent: Hybrid.EventBuses.IEventSubscriber
  name: Subscribe<TEventData, TEventHandler>()
  nameWithType: IEventSubscriber.Subscribe<TEventData, TEventHandler>()
  fullName: Hybrid.EventBuses.IEventSubscriber.Subscribe<TEventData, TEventHandler>()
  nameWithType.vb: IEventSubscriber.Subscribe(Of TEventData, TEventHandler)()
  fullName.vb: Hybrid.EventBuses.IEventSubscriber.Subscribe(Of TEventData, TEventHandler)()
  name.vb: Subscribe(Of TEventData, TEventHandler)()
  spec.csharp:
  - uid: Hybrid.EventBuses.IEventSubscriber.Subscribe``2
    name: Subscribe<TEventData, TEventHandler>
    nameWithType: IEventSubscriber.Subscribe<TEventData, TEventHandler>
    fullName: Hybrid.EventBuses.IEventSubscriber.Subscribe<TEventData, TEventHandler>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.EventBuses.IEventSubscriber.Subscribe``2
    name: Subscribe(Of TEventData, TEventHandler)
    nameWithType: IEventSubscriber.Subscribe(Of TEventData, TEventHandler)
    fullName: Hybrid.EventBuses.IEventSubscriber.Subscribe(Of TEventData, TEventHandler)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EventBuses.IEventSubscriber.Subscribe``1(System.Action{{TEventData}})
  commentId: M:Hybrid.EventBuses.IEventSubscriber.Subscribe``1(System.Action{``0})
  parent: Hybrid.EventBuses.IEventSubscriber
  definition: Hybrid.EventBuses.IEventSubscriber.Subscribe``1(System.Action{``0})
  name: Subscribe<TEventData>(Action<TEventData>)
  nameWithType: IEventSubscriber.Subscribe<TEventData>(Action<TEventData>)
  fullName: Hybrid.EventBuses.IEventSubscriber.Subscribe<TEventData>(System.Action<TEventData>)
  nameWithType.vb: IEventSubscriber.Subscribe(Of TEventData)(Action(Of TEventData))
  fullName.vb: Hybrid.EventBuses.IEventSubscriber.Subscribe(Of TEventData)(System.Action(Of TEventData))
  name.vb: Subscribe(Of TEventData)(Action(Of TEventData))
  spec.csharp:
  - uid: Hybrid.EventBuses.IEventSubscriber.Subscribe``1(System.Action{``0})
    name: Subscribe<TEventData>
    nameWithType: IEventSubscriber.Subscribe<TEventData>
    fullName: Hybrid.EventBuses.IEventSubscriber.Subscribe<TEventData>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEventData
    nameWithType: TEventData
    fullName: TEventData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.EventBuses.IEventSubscriber.Subscribe``1(System.Action{``0})
    name: Subscribe(Of TEventData)
    nameWithType: IEventSubscriber.Subscribe(Of TEventData)
    fullName: Hybrid.EventBuses.IEventSubscriber.Subscribe(Of TEventData)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEventData
    nameWithType: TEventData
    fullName: TEventData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action{{TEventData}}
  commentId: T:System.Action{``0}
  parent: System
  definition: System.Action`1
  name: Action<TEventData>
  nameWithType: Action<TEventData>
  fullName: System.Action<TEventData>
  nameWithType.vb: Action(Of TEventData)
  fullName.vb: System.Action(Of TEventData)
  name.vb: Action(Of TEventData)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEventData
    nameWithType: TEventData
    fullName: TEventData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEventData
    nameWithType: TEventData
    fullName: TEventData
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EventBuses.IEventSubscriber.Subscribe``1(System.Action{``0})
  commentId: M:Hybrid.EventBuses.IEventSubscriber.Subscribe``1(System.Action{``0})
  isExternal: true
  name: Subscribe<TEventData>(Action<TEventData>)
  nameWithType: IEventSubscriber.Subscribe<TEventData>(Action<TEventData>)
  fullName: Hybrid.EventBuses.IEventSubscriber.Subscribe<TEventData>(System.Action<TEventData>)
  nameWithType.vb: IEventSubscriber.Subscribe(Of TEventData)(Action(Of TEventData))
  fullName.vb: Hybrid.EventBuses.IEventSubscriber.Subscribe(Of TEventData)(System.Action(Of TEventData))
  name.vb: Subscribe(Of TEventData)(Action(Of TEventData))
  spec.csharp:
  - uid: Hybrid.EventBuses.IEventSubscriber.Subscribe``1(System.Action{``0})
    name: Subscribe<TEventData>
    nameWithType: IEventSubscriber.Subscribe<TEventData>
    fullName: Hybrid.EventBuses.IEventSubscriber.Subscribe<TEventData>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEventData
    nameWithType: TEventData
    fullName: TEventData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.EventBuses.IEventSubscriber.Subscribe``1(System.Action{``0})
    name: Subscribe(Of TEventData)
    nameWithType: IEventSubscriber.Subscribe(Of TEventData)
    fullName: Hybrid.EventBuses.IEventSubscriber.Subscribe(Of TEventData)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEventData
    nameWithType: TEventData
    fullName: TEventData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EventBuses.IEventSubscriber.Subscribe``1(Hybrid.EventBuses.IEventHandler)
  commentId: M:Hybrid.EventBuses.IEventSubscriber.Subscribe``1(Hybrid.EventBuses.IEventHandler)
  parent: Hybrid.EventBuses.IEventSubscriber
  name: Subscribe<TEventData>(IEventHandler)
  nameWithType: IEventSubscriber.Subscribe<TEventData>(IEventHandler)
  fullName: Hybrid.EventBuses.IEventSubscriber.Subscribe<TEventData>(Hybrid.EventBuses.IEventHandler)
  nameWithType.vb: IEventSubscriber.Subscribe(Of TEventData)(IEventHandler)
  fullName.vb: Hybrid.EventBuses.IEventSubscriber.Subscribe(Of TEventData)(Hybrid.EventBuses.IEventHandler)
  name.vb: Subscribe(Of TEventData)(IEventHandler)
  spec.csharp:
  - uid: Hybrid.EventBuses.IEventSubscriber.Subscribe``1(Hybrid.EventBuses.IEventHandler)
    name: Subscribe<TEventData>
    nameWithType: IEventSubscriber.Subscribe<TEventData>
    fullName: Hybrid.EventBuses.IEventSubscriber.Subscribe<TEventData>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Hybrid.EventBuses.IEventHandler
    name: IEventHandler
    nameWithType: IEventHandler
    fullName: Hybrid.EventBuses.IEventHandler
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.EventBuses.IEventSubscriber.Subscribe``1(Hybrid.EventBuses.IEventHandler)
    name: Subscribe(Of TEventData)
    nameWithType: IEventSubscriber.Subscribe(Of TEventData)
    fullName: Hybrid.EventBuses.IEventSubscriber.Subscribe(Of TEventData)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Hybrid.EventBuses.IEventHandler
    name: IEventHandler
    nameWithType: IEventHandler
    fullName: Hybrid.EventBuses.IEventHandler
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EventBuses.IEventHandler
  commentId: T:Hybrid.EventBuses.IEventHandler
  parent: Hybrid.EventBuses
  name: IEventHandler
  nameWithType: IEventHandler
  fullName: Hybrid.EventBuses.IEventHandler
- uid: Hybrid.EventBuses.IEventSubscriber.Subscribe(System.Type,Hybrid.EventBuses.IEventHandler)
  commentId: M:Hybrid.EventBuses.IEventSubscriber.Subscribe(System.Type,Hybrid.EventBuses.IEventHandler)
  parent: Hybrid.EventBuses.IEventSubscriber
  isExternal: true
  name: Subscribe(Type, IEventHandler)
  nameWithType: IEventSubscriber.Subscribe(Type, IEventHandler)
  fullName: Hybrid.EventBuses.IEventSubscriber.Subscribe(System.Type, Hybrid.EventBuses.IEventHandler)
  spec.csharp:
  - uid: Hybrid.EventBuses.IEventSubscriber.Subscribe(System.Type,Hybrid.EventBuses.IEventHandler)
    name: Subscribe
    nameWithType: IEventSubscriber.Subscribe
    fullName: Hybrid.EventBuses.IEventSubscriber.Subscribe
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Hybrid.EventBuses.IEventHandler
    name: IEventHandler
    nameWithType: IEventHandler
    fullName: Hybrid.EventBuses.IEventHandler
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.EventBuses.IEventSubscriber.Subscribe(System.Type,Hybrid.EventBuses.IEventHandler)
    name: Subscribe
    nameWithType: IEventSubscriber.Subscribe
    fullName: Hybrid.EventBuses.IEventSubscriber.Subscribe
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Hybrid.EventBuses.IEventHandler
    name: IEventHandler
    nameWithType: IEventHandler
    fullName: Hybrid.EventBuses.IEventHandler
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: Hybrid.EventBuses.EventBusBase.SubscribeAll*
  commentId: Overload:Hybrid.EventBuses.EventBusBase.SubscribeAll
  name: SubscribeAll
  nameWithType: EventBusBase.SubscribeAll
  fullName: Hybrid.EventBuses.EventBusBase.SubscribeAll
- uid: Hybrid.EventBuses.IEventSubscriber.SubscribeAll(System.Type[])
  commentId: M:Hybrid.EventBuses.IEventSubscriber.SubscribeAll(System.Type[])
  parent: Hybrid.EventBuses.IEventSubscriber
  isExternal: true
  name: SubscribeAll(Type[])
  nameWithType: IEventSubscriber.SubscribeAll(Type[])
  fullName: Hybrid.EventBuses.IEventSubscriber.SubscribeAll(System.Type[])
  nameWithType.vb: IEventSubscriber.SubscribeAll(Type())
  fullName.vb: Hybrid.EventBuses.IEventSubscriber.SubscribeAll(System.Type())
  name.vb: SubscribeAll(Type())
  spec.csharp:
  - uid: Hybrid.EventBuses.IEventSubscriber.SubscribeAll(System.Type[])
    name: SubscribeAll
    nameWithType: IEventSubscriber.SubscribeAll
    fullName: Hybrid.EventBuses.IEventSubscriber.SubscribeAll
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.EventBuses.IEventSubscriber.SubscribeAll(System.Type[])
    name: SubscribeAll
    nameWithType: IEventSubscriber.SubscribeAll
    fullName: Hybrid.EventBuses.IEventSubscriber.SubscribeAll
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Type[]
  isExternal: true
  name: Type[]
  nameWithType: Type[]
  fullName: System.Type[]
  nameWithType.vb: Type()
  fullName.vb: System.Type()
  name.vb: Type()
  spec.csharp:
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Hybrid.EventBuses.EventBusBase.Unsubscribe*
  commentId: Overload:Hybrid.EventBuses.EventBusBase.Unsubscribe
  name: Unsubscribe
  nameWithType: EventBusBase.Unsubscribe
  fullName: Hybrid.EventBuses.EventBusBase.Unsubscribe
- uid: Hybrid.EventBuses.IEventSubscriber.Unsubscribe``1(System.Action{{TEventData}})
  commentId: M:Hybrid.EventBuses.IEventSubscriber.Unsubscribe``1(System.Action{``0})
  parent: Hybrid.EventBuses.IEventSubscriber
  definition: Hybrid.EventBuses.IEventSubscriber.Unsubscribe``1(System.Action{``0})
  name: Unsubscribe<TEventData>(Action<TEventData>)
  nameWithType: IEventSubscriber.Unsubscribe<TEventData>(Action<TEventData>)
  fullName: Hybrid.EventBuses.IEventSubscriber.Unsubscribe<TEventData>(System.Action<TEventData>)
  nameWithType.vb: IEventSubscriber.Unsubscribe(Of TEventData)(Action(Of TEventData))
  fullName.vb: Hybrid.EventBuses.IEventSubscriber.Unsubscribe(Of TEventData)(System.Action(Of TEventData))
  name.vb: Unsubscribe(Of TEventData)(Action(Of TEventData))
  spec.csharp:
  - uid: Hybrid.EventBuses.IEventSubscriber.Unsubscribe``1(System.Action{``0})
    name: Unsubscribe<TEventData>
    nameWithType: IEventSubscriber.Unsubscribe<TEventData>
    fullName: Hybrid.EventBuses.IEventSubscriber.Unsubscribe<TEventData>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEventData
    nameWithType: TEventData
    fullName: TEventData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.EventBuses.IEventSubscriber.Unsubscribe``1(System.Action{``0})
    name: Unsubscribe(Of TEventData)
    nameWithType: IEventSubscriber.Unsubscribe(Of TEventData)
    fullName: Hybrid.EventBuses.IEventSubscriber.Unsubscribe(Of TEventData)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEventData
    nameWithType: TEventData
    fullName: TEventData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EventBuses.IEventSubscriber.Unsubscribe``1(System.Action{``0})
  commentId: M:Hybrid.EventBuses.IEventSubscriber.Unsubscribe``1(System.Action{``0})
  isExternal: true
  name: Unsubscribe<TEventData>(Action<TEventData>)
  nameWithType: IEventSubscriber.Unsubscribe<TEventData>(Action<TEventData>)
  fullName: Hybrid.EventBuses.IEventSubscriber.Unsubscribe<TEventData>(System.Action<TEventData>)
  nameWithType.vb: IEventSubscriber.Unsubscribe(Of TEventData)(Action(Of TEventData))
  fullName.vb: Hybrid.EventBuses.IEventSubscriber.Unsubscribe(Of TEventData)(System.Action(Of TEventData))
  name.vb: Unsubscribe(Of TEventData)(Action(Of TEventData))
  spec.csharp:
  - uid: Hybrid.EventBuses.IEventSubscriber.Unsubscribe``1(System.Action{``0})
    name: Unsubscribe<TEventData>
    nameWithType: IEventSubscriber.Unsubscribe<TEventData>
    fullName: Hybrid.EventBuses.IEventSubscriber.Unsubscribe<TEventData>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEventData
    nameWithType: TEventData
    fullName: TEventData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.EventBuses.IEventSubscriber.Unsubscribe``1(System.Action{``0})
    name: Unsubscribe(Of TEventData)
    nameWithType: IEventSubscriber.Unsubscribe(Of TEventData)
    fullName: Hybrid.EventBuses.IEventSubscriber.Unsubscribe(Of TEventData)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEventData
    nameWithType: TEventData
    fullName: TEventData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EventBuses.IEventSubscriber.Unsubscribe``1(Hybrid.EventBuses.IEventHandler{{TEventData}})
  commentId: M:Hybrid.EventBuses.IEventSubscriber.Unsubscribe``1(Hybrid.EventBuses.IEventHandler{``0})
  parent: Hybrid.EventBuses.IEventSubscriber
  definition: Hybrid.EventBuses.IEventSubscriber.Unsubscribe``1(Hybrid.EventBuses.IEventHandler{``0})
  name: Unsubscribe<TEventData>(IEventHandler<TEventData>)
  nameWithType: IEventSubscriber.Unsubscribe<TEventData>(IEventHandler<TEventData>)
  fullName: Hybrid.EventBuses.IEventSubscriber.Unsubscribe<TEventData>(Hybrid.EventBuses.IEventHandler<TEventData>)
  nameWithType.vb: IEventSubscriber.Unsubscribe(Of TEventData)(IEventHandler(Of TEventData))
  fullName.vb: Hybrid.EventBuses.IEventSubscriber.Unsubscribe(Of TEventData)(Hybrid.EventBuses.IEventHandler(Of TEventData))
  name.vb: Unsubscribe(Of TEventData)(IEventHandler(Of TEventData))
  spec.csharp:
  - uid: Hybrid.EventBuses.IEventSubscriber.Unsubscribe``1(Hybrid.EventBuses.IEventHandler{``0})
    name: Unsubscribe<TEventData>
    nameWithType: IEventSubscriber.Unsubscribe<TEventData>
    fullName: Hybrid.EventBuses.IEventSubscriber.Unsubscribe<TEventData>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Hybrid.EventBuses.IEventHandler`1
    name: IEventHandler
    nameWithType: IEventHandler
    fullName: Hybrid.EventBuses.IEventHandler
  - name: <
    nameWithType: <
    fullName: <
  - name: TEventData
    nameWithType: TEventData
    fullName: TEventData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.EventBuses.IEventSubscriber.Unsubscribe``1(Hybrid.EventBuses.IEventHandler{``0})
    name: Unsubscribe(Of TEventData)
    nameWithType: IEventSubscriber.Unsubscribe(Of TEventData)
    fullName: Hybrid.EventBuses.IEventSubscriber.Unsubscribe(Of TEventData)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Hybrid.EventBuses.IEventHandler`1
    name: IEventHandler
    nameWithType: IEventHandler
    fullName: Hybrid.EventBuses.IEventHandler
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEventData
    nameWithType: TEventData
    fullName: TEventData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EventBuses.IEventHandler{{TEventData}}
  commentId: T:Hybrid.EventBuses.IEventHandler{``0}
  parent: Hybrid.EventBuses
  definition: Hybrid.EventBuses.IEventHandler`1
  name: IEventHandler<TEventData>
  nameWithType: IEventHandler<TEventData>
  fullName: Hybrid.EventBuses.IEventHandler<TEventData>
  nameWithType.vb: IEventHandler(Of TEventData)
  fullName.vb: Hybrid.EventBuses.IEventHandler(Of TEventData)
  name.vb: IEventHandler(Of TEventData)
  spec.csharp:
  - uid: Hybrid.EventBuses.IEventHandler`1
    name: IEventHandler
    nameWithType: IEventHandler
    fullName: Hybrid.EventBuses.IEventHandler
  - name: <
    nameWithType: <
    fullName: <
  - name: TEventData
    nameWithType: TEventData
    fullName: TEventData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Hybrid.EventBuses.IEventHandler`1
    name: IEventHandler
    nameWithType: IEventHandler
    fullName: Hybrid.EventBuses.IEventHandler
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEventData
    nameWithType: TEventData
    fullName: TEventData
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EventBuses.IEventSubscriber.Unsubscribe``1(Hybrid.EventBuses.IEventHandler{``0})
  commentId: M:Hybrid.EventBuses.IEventSubscriber.Unsubscribe``1(Hybrid.EventBuses.IEventHandler{``0})
  name: Unsubscribe<TEventData>(IEventHandler<TEventData>)
  nameWithType: IEventSubscriber.Unsubscribe<TEventData>(IEventHandler<TEventData>)
  fullName: Hybrid.EventBuses.IEventSubscriber.Unsubscribe<TEventData>(Hybrid.EventBuses.IEventHandler<TEventData>)
  nameWithType.vb: IEventSubscriber.Unsubscribe(Of TEventData)(IEventHandler(Of TEventData))
  fullName.vb: Hybrid.EventBuses.IEventSubscriber.Unsubscribe(Of TEventData)(Hybrid.EventBuses.IEventHandler(Of TEventData))
  name.vb: Unsubscribe(Of TEventData)(IEventHandler(Of TEventData))
  spec.csharp:
  - uid: Hybrid.EventBuses.IEventSubscriber.Unsubscribe``1(Hybrid.EventBuses.IEventHandler{``0})
    name: Unsubscribe<TEventData>
    nameWithType: IEventSubscriber.Unsubscribe<TEventData>
    fullName: Hybrid.EventBuses.IEventSubscriber.Unsubscribe<TEventData>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Hybrid.EventBuses.IEventHandler`1
    name: IEventHandler
    nameWithType: IEventHandler
    fullName: Hybrid.EventBuses.IEventHandler
  - name: <
    nameWithType: <
    fullName: <
  - name: TEventData
    nameWithType: TEventData
    fullName: TEventData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.EventBuses.IEventSubscriber.Unsubscribe``1(Hybrid.EventBuses.IEventHandler{``0})
    name: Unsubscribe(Of TEventData)
    nameWithType: IEventSubscriber.Unsubscribe(Of TEventData)
    fullName: Hybrid.EventBuses.IEventSubscriber.Unsubscribe(Of TEventData)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Hybrid.EventBuses.IEventHandler`1
    name: IEventHandler
    nameWithType: IEventHandler
    fullName: Hybrid.EventBuses.IEventHandler
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEventData
    nameWithType: TEventData
    fullName: TEventData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EventBuses.IEventHandler`1
  commentId: T:Hybrid.EventBuses.IEventHandler`1
  name: IEventHandler<TEventData>
  nameWithType: IEventHandler<TEventData>
  fullName: Hybrid.EventBuses.IEventHandler<TEventData>
  nameWithType.vb: IEventHandler(Of TEventData)
  fullName.vb: Hybrid.EventBuses.IEventHandler(Of TEventData)
  name.vb: IEventHandler(Of TEventData)
  spec.csharp:
  - uid: Hybrid.EventBuses.IEventHandler`1
    name: IEventHandler
    nameWithType: IEventHandler
    fullName: Hybrid.EventBuses.IEventHandler
  - name: <
    nameWithType: <
    fullName: <
  - name: TEventData
    nameWithType: TEventData
    fullName: TEventData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Hybrid.EventBuses.IEventHandler`1
    name: IEventHandler
    nameWithType: IEventHandler
    fullName: Hybrid.EventBuses.IEventHandler
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEventData
    nameWithType: TEventData
    fullName: TEventData
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EventBuses.IEventSubscriber.Unsubscribe(System.Type,Hybrid.EventBuses.IEventHandler)
  commentId: M:Hybrid.EventBuses.IEventSubscriber.Unsubscribe(System.Type,Hybrid.EventBuses.IEventHandler)
  parent: Hybrid.EventBuses.IEventSubscriber
  isExternal: true
  name: Unsubscribe(Type, IEventHandler)
  nameWithType: IEventSubscriber.Unsubscribe(Type, IEventHandler)
  fullName: Hybrid.EventBuses.IEventSubscriber.Unsubscribe(System.Type, Hybrid.EventBuses.IEventHandler)
  spec.csharp:
  - uid: Hybrid.EventBuses.IEventSubscriber.Unsubscribe(System.Type,Hybrid.EventBuses.IEventHandler)
    name: Unsubscribe
    nameWithType: IEventSubscriber.Unsubscribe
    fullName: Hybrid.EventBuses.IEventSubscriber.Unsubscribe
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Hybrid.EventBuses.IEventHandler
    name: IEventHandler
    nameWithType: IEventHandler
    fullName: Hybrid.EventBuses.IEventHandler
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.EventBuses.IEventSubscriber.Unsubscribe(System.Type,Hybrid.EventBuses.IEventHandler)
    name: Unsubscribe
    nameWithType: IEventSubscriber.Unsubscribe
    fullName: Hybrid.EventBuses.IEventSubscriber.Unsubscribe
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Hybrid.EventBuses.IEventHandler
    name: IEventHandler
    nameWithType: IEventHandler
    fullName: Hybrid.EventBuses.IEventHandler
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EventBuses.EventBusBase.UnsubscribeAll*
  commentId: Overload:Hybrid.EventBuses.EventBusBase.UnsubscribeAll
  name: UnsubscribeAll
  nameWithType: EventBusBase.UnsubscribeAll
  fullName: Hybrid.EventBuses.EventBusBase.UnsubscribeAll
- uid: Hybrid.EventBuses.IEventSubscriber.UnsubscribeAll``1
  commentId: M:Hybrid.EventBuses.IEventSubscriber.UnsubscribeAll``1
  parent: Hybrid.EventBuses.IEventSubscriber
  name: UnsubscribeAll<TEventData>()
  nameWithType: IEventSubscriber.UnsubscribeAll<TEventData>()
  fullName: Hybrid.EventBuses.IEventSubscriber.UnsubscribeAll<TEventData>()
  nameWithType.vb: IEventSubscriber.UnsubscribeAll(Of TEventData)()
  fullName.vb: Hybrid.EventBuses.IEventSubscriber.UnsubscribeAll(Of TEventData)()
  name.vb: UnsubscribeAll(Of TEventData)()
  spec.csharp:
  - uid: Hybrid.EventBuses.IEventSubscriber.UnsubscribeAll``1
    name: UnsubscribeAll<TEventData>
    nameWithType: IEventSubscriber.UnsubscribeAll<TEventData>
    fullName: Hybrid.EventBuses.IEventSubscriber.UnsubscribeAll<TEventData>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.EventBuses.IEventSubscriber.UnsubscribeAll``1
    name: UnsubscribeAll(Of TEventData)
    nameWithType: IEventSubscriber.UnsubscribeAll(Of TEventData)
    fullName: Hybrid.EventBuses.IEventSubscriber.UnsubscribeAll(Of TEventData)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EventBuses.IEventSubscriber.UnsubscribeAll(System.Type)
  commentId: M:Hybrid.EventBuses.IEventSubscriber.UnsubscribeAll(System.Type)
  parent: Hybrid.EventBuses.IEventSubscriber
  isExternal: true
  name: UnsubscribeAll(Type)
  nameWithType: IEventSubscriber.UnsubscribeAll(Type)
  fullName: Hybrid.EventBuses.IEventSubscriber.UnsubscribeAll(System.Type)
  spec.csharp:
  - uid: Hybrid.EventBuses.IEventSubscriber.UnsubscribeAll(System.Type)
    name: UnsubscribeAll
    nameWithType: IEventSubscriber.UnsubscribeAll
    fullName: Hybrid.EventBuses.IEventSubscriber.UnsubscribeAll
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.EventBuses.IEventSubscriber.UnsubscribeAll(System.Type)
    name: UnsubscribeAll
    nameWithType: IEventSubscriber.UnsubscribeAll
    fullName: Hybrid.EventBuses.IEventSubscriber.UnsubscribeAll
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EventBuses.EventBusBase.Publish*
  commentId: Overload:Hybrid.EventBuses.EventBusBase.Publish
  name: Publish
  nameWithType: EventBusBase.Publish
  fullName: Hybrid.EventBuses.EventBusBase.Publish
- uid: Hybrid.EventBuses.IEventPublisher.Publish``1({TEventData},System.Boolean)
  commentId: M:Hybrid.EventBuses.IEventPublisher.Publish``1(``0,System.Boolean)
  parent: Hybrid.EventBuses.IEventPublisher
  definition: Hybrid.EventBuses.IEventPublisher.Publish``1(``0,System.Boolean)
  name: Publish<TEventData>(TEventData, Boolean)
  nameWithType: IEventPublisher.Publish<TEventData>(TEventData, Boolean)
  fullName: Hybrid.EventBuses.IEventPublisher.Publish<TEventData>(TEventData, System.Boolean)
  nameWithType.vb: IEventPublisher.Publish(Of TEventData)(TEventData, Boolean)
  fullName.vb: Hybrid.EventBuses.IEventPublisher.Publish(Of TEventData)(TEventData, System.Boolean)
  name.vb: Publish(Of TEventData)(TEventData, Boolean)
  spec.csharp:
  - uid: Hybrid.EventBuses.IEventPublisher.Publish``1(``0,System.Boolean)
    name: Publish<TEventData>
    nameWithType: IEventPublisher.Publish<TEventData>
    fullName: Hybrid.EventBuses.IEventPublisher.Publish<TEventData>
  - name: (
    nameWithType: (
    fullName: (
  - name: TEventData
    nameWithType: TEventData
    fullName: TEventData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.EventBuses.IEventPublisher.Publish``1(``0,System.Boolean)
    name: Publish(Of TEventData)
    nameWithType: IEventPublisher.Publish(Of TEventData)
    fullName: Hybrid.EventBuses.IEventPublisher.Publish(Of TEventData)
  - name: (
    nameWithType: (
    fullName: (
  - name: TEventData
    nameWithType: TEventData
    fullName: TEventData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TEventData}'
  commentId: '!:TEventData'
  definition: TEventData
  name: TEventData
  nameWithType: TEventData
  fullName: TEventData
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Hybrid.EventBuses.IEventPublisher.Publish``1(``0,System.Boolean)
  commentId: M:Hybrid.EventBuses.IEventPublisher.Publish``1(``0,System.Boolean)
  isExternal: true
  name: Publish<TEventData>(TEventData, Boolean)
  nameWithType: IEventPublisher.Publish<TEventData>(TEventData, Boolean)
  fullName: Hybrid.EventBuses.IEventPublisher.Publish<TEventData>(TEventData, System.Boolean)
  nameWithType.vb: IEventPublisher.Publish(Of TEventData)(TEventData, Boolean)
  fullName.vb: Hybrid.EventBuses.IEventPublisher.Publish(Of TEventData)(TEventData, System.Boolean)
  name.vb: Publish(Of TEventData)(TEventData, Boolean)
  spec.csharp:
  - uid: Hybrid.EventBuses.IEventPublisher.Publish``1(``0,System.Boolean)
    name: Publish<TEventData>
    nameWithType: IEventPublisher.Publish<TEventData>
    fullName: Hybrid.EventBuses.IEventPublisher.Publish<TEventData>
  - name: (
    nameWithType: (
    fullName: (
  - name: TEventData
    nameWithType: TEventData
    fullName: TEventData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.EventBuses.IEventPublisher.Publish``1(``0,System.Boolean)
    name: Publish(Of TEventData)
    nameWithType: IEventPublisher.Publish(Of TEventData)
    fullName: Hybrid.EventBuses.IEventPublisher.Publish(Of TEventData)
  - name: (
    nameWithType: (
    fullName: (
  - name: TEventData
    nameWithType: TEventData
    fullName: TEventData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TEventData
  name: TEventData
  nameWithType: TEventData
  fullName: TEventData
- uid: Hybrid.EventBuses.IEventPublisher.Publish``1(System.Object,{TEventData},System.Boolean)
  commentId: M:Hybrid.EventBuses.IEventPublisher.Publish``1(System.Object,``0,System.Boolean)
  parent: Hybrid.EventBuses.IEventPublisher
  definition: Hybrid.EventBuses.IEventPublisher.Publish``1(System.Object,``0,System.Boolean)
  name: Publish<TEventData>(Object, TEventData, Boolean)
  nameWithType: IEventPublisher.Publish<TEventData>(Object, TEventData, Boolean)
  fullName: Hybrid.EventBuses.IEventPublisher.Publish<TEventData>(System.Object, TEventData, System.Boolean)
  nameWithType.vb: IEventPublisher.Publish(Of TEventData)(Object, TEventData, Boolean)
  fullName.vb: Hybrid.EventBuses.IEventPublisher.Publish(Of TEventData)(System.Object, TEventData, System.Boolean)
  name.vb: Publish(Of TEventData)(Object, TEventData, Boolean)
  spec.csharp:
  - uid: Hybrid.EventBuses.IEventPublisher.Publish``1(System.Object,``0,System.Boolean)
    name: Publish<TEventData>
    nameWithType: IEventPublisher.Publish<TEventData>
    fullName: Hybrid.EventBuses.IEventPublisher.Publish<TEventData>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEventData
    nameWithType: TEventData
    fullName: TEventData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.EventBuses.IEventPublisher.Publish``1(System.Object,``0,System.Boolean)
    name: Publish(Of TEventData)
    nameWithType: IEventPublisher.Publish(Of TEventData)
    fullName: Hybrid.EventBuses.IEventPublisher.Publish(Of TEventData)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEventData
    nameWithType: TEventData
    fullName: TEventData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EventBuses.IEventPublisher.Publish``1(System.Object,``0,System.Boolean)
  commentId: M:Hybrid.EventBuses.IEventPublisher.Publish``1(System.Object,``0,System.Boolean)
  isExternal: true
  name: Publish<TEventData>(Object, TEventData, Boolean)
  nameWithType: IEventPublisher.Publish<TEventData>(Object, TEventData, Boolean)
  fullName: Hybrid.EventBuses.IEventPublisher.Publish<TEventData>(System.Object, TEventData, System.Boolean)
  nameWithType.vb: IEventPublisher.Publish(Of TEventData)(Object, TEventData, Boolean)
  fullName.vb: Hybrid.EventBuses.IEventPublisher.Publish(Of TEventData)(System.Object, TEventData, System.Boolean)
  name.vb: Publish(Of TEventData)(Object, TEventData, Boolean)
  spec.csharp:
  - uid: Hybrid.EventBuses.IEventPublisher.Publish``1(System.Object,``0,System.Boolean)
    name: Publish<TEventData>
    nameWithType: IEventPublisher.Publish<TEventData>
    fullName: Hybrid.EventBuses.IEventPublisher.Publish<TEventData>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEventData
    nameWithType: TEventData
    fullName: TEventData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.EventBuses.IEventPublisher.Publish``1(System.Object,``0,System.Boolean)
    name: Publish(Of TEventData)
    nameWithType: IEventPublisher.Publish(Of TEventData)
    fullName: Hybrid.EventBuses.IEventPublisher.Publish(Of TEventData)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEventData
    nameWithType: TEventData
    fullName: TEventData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EventBuses.IEventPublisher.Publish(System.Type,Hybrid.EventBuses.IEventData,System.Boolean)
  commentId: M:Hybrid.EventBuses.IEventPublisher.Publish(System.Type,Hybrid.EventBuses.IEventData,System.Boolean)
  parent: Hybrid.EventBuses.IEventPublisher
  isExternal: true
  name: Publish(Type, IEventData, Boolean)
  nameWithType: IEventPublisher.Publish(Type, IEventData, Boolean)
  fullName: Hybrid.EventBuses.IEventPublisher.Publish(System.Type, Hybrid.EventBuses.IEventData, System.Boolean)
  spec.csharp:
  - uid: Hybrid.EventBuses.IEventPublisher.Publish(System.Type,Hybrid.EventBuses.IEventData,System.Boolean)
    name: Publish
    nameWithType: IEventPublisher.Publish
    fullName: Hybrid.EventBuses.IEventPublisher.Publish
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Hybrid.EventBuses.IEventData
    name: IEventData
    nameWithType: IEventData
    fullName: Hybrid.EventBuses.IEventData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.EventBuses.IEventPublisher.Publish(System.Type,Hybrid.EventBuses.IEventData,System.Boolean)
    name: Publish
    nameWithType: IEventPublisher.Publish
    fullName: Hybrid.EventBuses.IEventPublisher.Publish
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Hybrid.EventBuses.IEventData
    name: IEventData
    nameWithType: IEventData
    fullName: Hybrid.EventBuses.IEventData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EventBuses.IEventData
  commentId: T:Hybrid.EventBuses.IEventData
  parent: Hybrid.EventBuses
  name: IEventData
  nameWithType: IEventData
  fullName: Hybrid.EventBuses.IEventData
- uid: Hybrid.EventBuses.IEventPublisher.Publish(System.Type,System.Object,Hybrid.EventBuses.IEventData,System.Boolean)
  commentId: M:Hybrid.EventBuses.IEventPublisher.Publish(System.Type,System.Object,Hybrid.EventBuses.IEventData,System.Boolean)
  parent: Hybrid.EventBuses.IEventPublisher
  isExternal: true
  name: Publish(Type, Object, IEventData, Boolean)
  nameWithType: IEventPublisher.Publish(Type, Object, IEventData, Boolean)
  fullName: Hybrid.EventBuses.IEventPublisher.Publish(System.Type, System.Object, Hybrid.EventBuses.IEventData, System.Boolean)
  spec.csharp:
  - uid: Hybrid.EventBuses.IEventPublisher.Publish(System.Type,System.Object,Hybrid.EventBuses.IEventData,System.Boolean)
    name: Publish
    nameWithType: IEventPublisher.Publish
    fullName: Hybrid.EventBuses.IEventPublisher.Publish
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Hybrid.EventBuses.IEventData
    name: IEventData
    nameWithType: IEventData
    fullName: Hybrid.EventBuses.IEventData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.EventBuses.IEventPublisher.Publish(System.Type,System.Object,Hybrid.EventBuses.IEventData,System.Boolean)
    name: Publish
    nameWithType: IEventPublisher.Publish
    fullName: Hybrid.EventBuses.IEventPublisher.Publish
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Hybrid.EventBuses.IEventData
    name: IEventData
    nameWithType: IEventData
    fullName: Hybrid.EventBuses.IEventData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EventBuses.EventBusBase.PublishAsync*
  commentId: Overload:Hybrid.EventBuses.EventBusBase.PublishAsync
  name: PublishAsync
  nameWithType: EventBusBase.PublishAsync
  fullName: Hybrid.EventBuses.EventBusBase.PublishAsync
- uid: Hybrid.EventBuses.IEventPublisher.PublishAsync``1({TEventData},System.Boolean)
  commentId: M:Hybrid.EventBuses.IEventPublisher.PublishAsync``1(``0,System.Boolean)
  parent: Hybrid.EventBuses.IEventPublisher
  definition: Hybrid.EventBuses.IEventPublisher.PublishAsync``1(``0,System.Boolean)
  name: PublishAsync<TEventData>(TEventData, Boolean)
  nameWithType: IEventPublisher.PublishAsync<TEventData>(TEventData, Boolean)
  fullName: Hybrid.EventBuses.IEventPublisher.PublishAsync<TEventData>(TEventData, System.Boolean)
  nameWithType.vb: IEventPublisher.PublishAsync(Of TEventData)(TEventData, Boolean)
  fullName.vb: Hybrid.EventBuses.IEventPublisher.PublishAsync(Of TEventData)(TEventData, System.Boolean)
  name.vb: PublishAsync(Of TEventData)(TEventData, Boolean)
  spec.csharp:
  - uid: Hybrid.EventBuses.IEventPublisher.PublishAsync``1(``0,System.Boolean)
    name: PublishAsync<TEventData>
    nameWithType: IEventPublisher.PublishAsync<TEventData>
    fullName: Hybrid.EventBuses.IEventPublisher.PublishAsync<TEventData>
  - name: (
    nameWithType: (
    fullName: (
  - name: TEventData
    nameWithType: TEventData
    fullName: TEventData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.EventBuses.IEventPublisher.PublishAsync``1(``0,System.Boolean)
    name: PublishAsync(Of TEventData)
    nameWithType: IEventPublisher.PublishAsync(Of TEventData)
    fullName: Hybrid.EventBuses.IEventPublisher.PublishAsync(Of TEventData)
  - name: (
    nameWithType: (
    fullName: (
  - name: TEventData
    nameWithType: TEventData
    fullName: TEventData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: Hybrid.EventBuses.IEventPublisher.PublishAsync``1(``0,System.Boolean)
  commentId: M:Hybrid.EventBuses.IEventPublisher.PublishAsync``1(``0,System.Boolean)
  isExternal: true
  name: PublishAsync<TEventData>(TEventData, Boolean)
  nameWithType: IEventPublisher.PublishAsync<TEventData>(TEventData, Boolean)
  fullName: Hybrid.EventBuses.IEventPublisher.PublishAsync<TEventData>(TEventData, System.Boolean)
  nameWithType.vb: IEventPublisher.PublishAsync(Of TEventData)(TEventData, Boolean)
  fullName.vb: Hybrid.EventBuses.IEventPublisher.PublishAsync(Of TEventData)(TEventData, System.Boolean)
  name.vb: PublishAsync(Of TEventData)(TEventData, Boolean)
  spec.csharp:
  - uid: Hybrid.EventBuses.IEventPublisher.PublishAsync``1(``0,System.Boolean)
    name: PublishAsync<TEventData>
    nameWithType: IEventPublisher.PublishAsync<TEventData>
    fullName: Hybrid.EventBuses.IEventPublisher.PublishAsync<TEventData>
  - name: (
    nameWithType: (
    fullName: (
  - name: TEventData
    nameWithType: TEventData
    fullName: TEventData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.EventBuses.IEventPublisher.PublishAsync``1(``0,System.Boolean)
    name: PublishAsync(Of TEventData)
    nameWithType: IEventPublisher.PublishAsync(Of TEventData)
    fullName: Hybrid.EventBuses.IEventPublisher.PublishAsync(Of TEventData)
  - name: (
    nameWithType: (
    fullName: (
  - name: TEventData
    nameWithType: TEventData
    fullName: TEventData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Hybrid.EventBuses.IEventPublisher.PublishAsync``1(System.Object,{TEventData},System.Boolean)
  commentId: M:Hybrid.EventBuses.IEventPublisher.PublishAsync``1(System.Object,``0,System.Boolean)
  parent: Hybrid.EventBuses.IEventPublisher
  definition: Hybrid.EventBuses.IEventPublisher.PublishAsync``1(System.Object,``0,System.Boolean)
  name: PublishAsync<TEventData>(Object, TEventData, Boolean)
  nameWithType: IEventPublisher.PublishAsync<TEventData>(Object, TEventData, Boolean)
  fullName: Hybrid.EventBuses.IEventPublisher.PublishAsync<TEventData>(System.Object, TEventData, System.Boolean)
  nameWithType.vb: IEventPublisher.PublishAsync(Of TEventData)(Object, TEventData, Boolean)
  fullName.vb: Hybrid.EventBuses.IEventPublisher.PublishAsync(Of TEventData)(System.Object, TEventData, System.Boolean)
  name.vb: PublishAsync(Of TEventData)(Object, TEventData, Boolean)
  spec.csharp:
  - uid: Hybrid.EventBuses.IEventPublisher.PublishAsync``1(System.Object,``0,System.Boolean)
    name: PublishAsync<TEventData>
    nameWithType: IEventPublisher.PublishAsync<TEventData>
    fullName: Hybrid.EventBuses.IEventPublisher.PublishAsync<TEventData>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEventData
    nameWithType: TEventData
    fullName: TEventData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.EventBuses.IEventPublisher.PublishAsync``1(System.Object,``0,System.Boolean)
    name: PublishAsync(Of TEventData)
    nameWithType: IEventPublisher.PublishAsync(Of TEventData)
    fullName: Hybrid.EventBuses.IEventPublisher.PublishAsync(Of TEventData)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEventData
    nameWithType: TEventData
    fullName: TEventData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EventBuses.IEventPublisher.PublishAsync``1(System.Object,``0,System.Boolean)
  commentId: M:Hybrid.EventBuses.IEventPublisher.PublishAsync``1(System.Object,``0,System.Boolean)
  isExternal: true
  name: PublishAsync<TEventData>(Object, TEventData, Boolean)
  nameWithType: IEventPublisher.PublishAsync<TEventData>(Object, TEventData, Boolean)
  fullName: Hybrid.EventBuses.IEventPublisher.PublishAsync<TEventData>(System.Object, TEventData, System.Boolean)
  nameWithType.vb: IEventPublisher.PublishAsync(Of TEventData)(Object, TEventData, Boolean)
  fullName.vb: Hybrid.EventBuses.IEventPublisher.PublishAsync(Of TEventData)(System.Object, TEventData, System.Boolean)
  name.vb: PublishAsync(Of TEventData)(Object, TEventData, Boolean)
  spec.csharp:
  - uid: Hybrid.EventBuses.IEventPublisher.PublishAsync``1(System.Object,``0,System.Boolean)
    name: PublishAsync<TEventData>
    nameWithType: IEventPublisher.PublishAsync<TEventData>
    fullName: Hybrid.EventBuses.IEventPublisher.PublishAsync<TEventData>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEventData
    nameWithType: TEventData
    fullName: TEventData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.EventBuses.IEventPublisher.PublishAsync``1(System.Object,``0,System.Boolean)
    name: PublishAsync(Of TEventData)
    nameWithType: IEventPublisher.PublishAsync(Of TEventData)
    fullName: Hybrid.EventBuses.IEventPublisher.PublishAsync(Of TEventData)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEventData
    nameWithType: TEventData
    fullName: TEventData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EventBuses.IEventPublisher.PublishAsync(System.Type,Hybrid.EventBuses.IEventData,System.Boolean)
  commentId: M:Hybrid.EventBuses.IEventPublisher.PublishAsync(System.Type,Hybrid.EventBuses.IEventData,System.Boolean)
  parent: Hybrid.EventBuses.IEventPublisher
  isExternal: true
  name: PublishAsync(Type, IEventData, Boolean)
  nameWithType: IEventPublisher.PublishAsync(Type, IEventData, Boolean)
  fullName: Hybrid.EventBuses.IEventPublisher.PublishAsync(System.Type, Hybrid.EventBuses.IEventData, System.Boolean)
  spec.csharp:
  - uid: Hybrid.EventBuses.IEventPublisher.PublishAsync(System.Type,Hybrid.EventBuses.IEventData,System.Boolean)
    name: PublishAsync
    nameWithType: IEventPublisher.PublishAsync
    fullName: Hybrid.EventBuses.IEventPublisher.PublishAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Hybrid.EventBuses.IEventData
    name: IEventData
    nameWithType: IEventData
    fullName: Hybrid.EventBuses.IEventData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.EventBuses.IEventPublisher.PublishAsync(System.Type,Hybrid.EventBuses.IEventData,System.Boolean)
    name: PublishAsync
    nameWithType: IEventPublisher.PublishAsync
    fullName: Hybrid.EventBuses.IEventPublisher.PublishAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Hybrid.EventBuses.IEventData
    name: IEventData
    nameWithType: IEventData
    fullName: Hybrid.EventBuses.IEventData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EventBuses.IEventPublisher.PublishAsync(System.Type,System.Object,Hybrid.EventBuses.IEventData,System.Boolean)
  commentId: M:Hybrid.EventBuses.IEventPublisher.PublishAsync(System.Type,System.Object,Hybrid.EventBuses.IEventData,System.Boolean)
  parent: Hybrid.EventBuses.IEventPublisher
  isExternal: true
  name: PublishAsync(Type, Object, IEventData, Boolean)
  nameWithType: IEventPublisher.PublishAsync(Type, Object, IEventData, Boolean)
  fullName: Hybrid.EventBuses.IEventPublisher.PublishAsync(System.Type, System.Object, Hybrid.EventBuses.IEventData, System.Boolean)
  spec.csharp:
  - uid: Hybrid.EventBuses.IEventPublisher.PublishAsync(System.Type,System.Object,Hybrid.EventBuses.IEventData,System.Boolean)
    name: PublishAsync
    nameWithType: IEventPublisher.PublishAsync
    fullName: Hybrid.EventBuses.IEventPublisher.PublishAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Hybrid.EventBuses.IEventData
    name: IEventData
    nameWithType: IEventData
    fullName: Hybrid.EventBuses.IEventData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.EventBuses.IEventPublisher.PublishAsync(System.Type,System.Object,Hybrid.EventBuses.IEventData,System.Boolean)
    name: PublishAsync
    nameWithType: IEventPublisher.PublishAsync
    fullName: Hybrid.EventBuses.IEventPublisher.PublishAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Hybrid.EventBuses.IEventData
    name: IEventData
    nameWithType: IEventData
    fullName: Hybrid.EventBuses.IEventData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EventBuses.EventBusBase.InvokeHandler*
  commentId: Overload:Hybrid.EventBuses.EventBusBase.InvokeHandler
  name: InvokeHandler
  nameWithType: EventBusBase.InvokeHandler
  fullName: Hybrid.EventBuses.EventBusBase.InvokeHandler
- uid: Hybrid.EventBuses.IEventHandlerFactory
  commentId: T:Hybrid.EventBuses.IEventHandlerFactory
  parent: Hybrid.EventBuses
  name: IEventHandlerFactory
  nameWithType: IEventHandlerFactory
  fullName: Hybrid.EventBuses.IEventHandlerFactory
- uid: Hybrid.EventBuses.EventBusBase.InvokeHandlerAsync*
  commentId: Overload:Hybrid.EventBuses.EventBusBase.InvokeHandlerAsync
  name: InvokeHandlerAsync
  nameWithType: EventBusBase.InvokeHandlerAsync
  fullName: Hybrid.EventBuses.EventBusBase.InvokeHandlerAsync
