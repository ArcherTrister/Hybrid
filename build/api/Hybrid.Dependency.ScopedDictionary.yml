### YamlMime:ManagedReference
items:
- uid: Hybrid.Dependency.ScopedDictionary
  commentId: T:Hybrid.Dependency.ScopedDictionary
  id: ScopedDictionary
  parent: Hybrid.Dependency
  children:
  - Hybrid.Dependency.ScopedDictionary.AuditOperation
  - Hybrid.Dependency.ScopedDictionary.DataAuthValidRoleNames
  - Hybrid.Dependency.ScopedDictionary.Dispose
  - Hybrid.Dependency.ScopedDictionary.Function
  - Hybrid.Dependency.ScopedDictionary.Identity
  langs:
  - csharp
  - vb
  name: ScopedDictionary
  nameWithType: ScopedDictionary
  fullName: Hybrid.Dependency.ScopedDictionary
  type: Class
  source:
    remote:
      path: src/Hybrid/Dependency/ScopedDictionary.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: ScopedDictionary
    path: ../src/Hybrid/Dependency/ScopedDictionary.cs
    startLine: 23
  assemblies:
  - Hybrid
  namespace: Hybrid.Dependency
  summary: "\n基于Scoped生命周期的数据字典，可用于在Scoped环境中传递数据\n"
  example: []
  syntax:
    content: >-
      [Dependency(ServiceLifetime.Scoped, AddSelf = true)]

      public class ScopedDictionary : ConcurrentDictionary<string, object>, IDictionary<string, object>, ICollection<KeyValuePair<string, object>>, IReadOnlyDictionary<string, object>, IReadOnlyCollection<KeyValuePair<string, object>>, IEnumerable<KeyValuePair<string, object>>, IDictionary, ICollection, IEnumerable, IDisposable
    content.vb: >-
      <Dependency(ServiceLifetime.Scoped, AddSelf:=True)>

      Public Class ScopedDictionary

          Inherits ConcurrentDictionary(Of String, Object)

          Implements IDictionary(Of String, Object), ICollection(Of KeyValuePair(Of String, Object)), IReadOnlyDictionary(Of String, Object), IReadOnlyCollection(Of KeyValuePair(Of String, Object)), IEnumerable(Of KeyValuePair(Of String, Object)), IDictionary, ICollection, IEnumerable, IDisposable
  inheritance:
  - System.Object
  - System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}
  implements:
  - System.Collections.Generic.IDictionary{System.String,System.Object}
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}}
  - System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object}
  - System.Collections.Generic.IReadOnlyCollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}}
  - System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}
  - System.Collections.IDictionary
  - System.Collections.ICollection
  - System.Collections.IEnumerable
  - System.IDisposable
  inheritedMembers:
  - System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.System#Collections#IDictionary#get_Item(System.Object)
  - System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.System#Collections#IDictionary#set_Item(System.Object,System.Object)
  - System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.AddOrUpdate(System.String,System.Func{System.String,System.Object},System.Func{System.String,System.Object,System.Object})
  - System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.AddOrUpdate(System.String,System.Object,System.Func{System.String,System.Object,System.Object})
  - System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.AddOrUpdate``1(System.String,System.Func{System.String,{TArg},System.Object},System.Func{System.String,System.Object,{TArg},System.Object},{TArg})
  - System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.Clear
  - System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.ContainsKey(System.String)
  - System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.GetEnumerator
  - System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.GetOrAdd(System.String,System.Func{System.String,System.Object})
  - System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.GetOrAdd(System.String,System.Object)
  - System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.GetOrAdd``1(System.String,System.Func{System.String,{TArg},System.Object},{TArg})
  - System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})
  - System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})
  - System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)
  - System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})
  - System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.System#Collections#Generic#IDictionary{TKey,TValue}#Add(System.String,System.Object)
  - System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.System#Collections#Generic#IDictionary{TKey,TValue}#Remove(System.String)
  - System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  - System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.System#Collections#IDictionary#Add(System.Object,System.Object)
  - System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.System#Collections#IDictionary#Contains(System.Object)
  - System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.System#Collections#IDictionary#GetEnumerator
  - System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.System#Collections#IDictionary#Remove(System.Object)
  - System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.System#Collections#IEnumerable#GetEnumerator
  - System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.ToArray
  - System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.TryAdd(System.String,System.Object)
  - System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.TryGetValue(System.String,System.Object@)
  - System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.TryRemove(System.String,System.Object@)
  - System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.TryUpdate(System.String,System.Object,System.Object)
  - System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.Count
  - System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.IsEmpty
  - System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.Item(System.String)
  - System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.Keys
  - System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#IsReadOnly
  - System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Keys
  - System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Values
  - System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.System#Collections#ICollection#IsSynchronized
  - System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.System#Collections#ICollection#SyncRoot
  - System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.System#Collections#IDictionary#IsFixedSize
  - System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.System#Collections#IDictionary#IsReadOnly
  - System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.System#Collections#IDictionary#Item(System.Object)
  - System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.System#Collections#IDictionary#Keys
  - System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.System#Collections#IDictionary#Values
  - System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.Values
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.OSharp.Collections.CollectionExtensions.AddIf``1(System.Collections.Generic.KeyValuePair{System.String,System.Object},System.Boolean)
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.OSharp.Collections.CollectionExtensions.AddIf``1(System.Collections.Generic.KeyValuePair{System.String,System.Object},System.Func{System.Boolean})
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.OSharp.Collections.CollectionExtensions.AddIfNotExist``1(System.Collections.Generic.KeyValuePair{System.String,System.Object},System.Func{System.Collections.Generic.KeyValuePair{System.String,System.Object},System.Boolean})
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.OSharp.Collections.CollectionExtensions.GetOrAdd``1(System.Func{System.Collections.Generic.KeyValuePair{System.String,System.Object},System.Boolean},System.Func{System.Collections.Generic.KeyValuePair{System.String,System.Object}})
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.OSharp.Collections.CollectionExtensions.IsNullOrEmpty``1
  - System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.OSharp.Collections.EnumerableExtensions.Shuffle``1
  - System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.OSharp.Collections.EnumerableExtensions.ExpandAndToString``1(System.String)
  - System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.OSharp.Collections.EnumerableExtensions.ExpandAndToString``1(System.Func{System.Collections.Generic.KeyValuePair{System.String,System.Object},System.String},System.String)
  - System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.OSharp.Collections.EnumerableExtensions.IsEmpty``1
  - System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.OSharp.Collections.EnumerableExtensions.WhereIf``1(System.Func{System.Collections.Generic.KeyValuePair{System.String,System.Object},System.Boolean},System.Boolean)
  - System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.OSharp.Collections.EnumerableExtensions.OrderByPrefixes``1(System.Func{System.Collections.Generic.KeyValuePair{System.String,System.Object},System.String},System.String[])
  - System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.OSharp.Collections.EnumerableExtensions.DistinctBy``2(System.Func{System.Collections.Generic.KeyValuePair{System.String,System.Object},{TKey}})
  - System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.OSharp.Collections.EnumerableExtensions.OrderBy``1(System.String,System.ComponentModel.ListSortDirection)
  - System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.OSharp.Collections.EnumerableExtensions.OrderBy``1(OSharp.Filter.SortCondition)
  - System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.OSharp.Collections.EnumerableExtensions.OrderBy``1(OSharp.Filter.SortCondition{System.Collections.Generic.KeyValuePair{System.String,System.Object}})
  - Hybrid.Dependency.ScopedDictionary.OSharp.Entity.EntityExtensions.CheckICreatedTime``2
  - Hybrid.Dependency.ScopedDictionary.OSharp.Entity.EntityExtensions.CheckICreationAudited``3(System.Security.Principal.IPrincipal)
  - Hybrid.Dependency.ScopedDictionary.OSharp.Entity.EntityExtensions.CheckIUpdateAudited``3(System.Security.Principal.IPrincipal)
  - System.Collections.Generic.IDictionary{System.String,System.Object}.OSharp.Extensions.DictionaryExtensions.GetOrDefault``2(System.String)
  - System.Collections.Generic.IDictionary{System.String,System.Object}.OSharp.Extensions.DictionaryExtensions.GetOrAdd``2(System.String,System.Func{System.Object})
  - System.Object.OSharp.Extensions.ObjectExtensions.CastTo(System.Type)
  - System.Object.OSharp.Extensions.ObjectExtensions.CastTo``1
  - System.Object.OSharp.Extensions.ObjectExtensions.CastTo``1({T})
  - Hybrid.Dependency.ScopedDictionary.OSharp.Extensions.ObjectExtensions.IsIn``1(Hybrid.Dependency.ScopedDictionary[])
  - System.Object.OSharp.Extensions.ObjectExtensions.ToDynamic
  - Hybrid.Dependency.ScopedDictionary.OSharp.Extensions.ObjectExtensions.DeepClone``1
  - Hybrid.Dependency.ScopedDictionary.OSharp.Extensions.ParameterCheckExtensions.Required``1(System.Func{Hybrid.Dependency.ScopedDictionary,System.Boolean},System.String)
  - Hybrid.Dependency.ScopedDictionary.OSharp.Extensions.ParameterCheckExtensions.Required``2(System.Func{Hybrid.Dependency.ScopedDictionary,System.Boolean},System.String)
  - Hybrid.Dependency.ScopedDictionary.OSharp.Extensions.ParameterCheckExtensions.CheckNotNull``1(System.String)
  - System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.OSharp.Extensions.ParameterCheckExtensions.CheckNotNullOrEmpty``1(System.String)
  - Hybrid.Dependency.ScopedDictionary.OSharp.Extensions.TryCatchExtensions.TryCatch``1(System.Action{Hybrid.Dependency.ScopedDictionary},System.Action{System.Exception},System.Action{Hybrid.Dependency.ScopedDictionary})
  - Hybrid.Dependency.ScopedDictionary.OSharp.Extensions.TryCatchExtensions.TryCatch``1(System.Action{Hybrid.Dependency.ScopedDictionary},System.Action{System.Exception})
  - Hybrid.Dependency.ScopedDictionary.OSharp.Extensions.TryCatchExtensions.TryCatch``2(System.Func{Hybrid.Dependency.ScopedDictionary,{TResult}},System.Action{System.Exception},System.Action{Hybrid.Dependency.ScopedDictionary})
  - Hybrid.Dependency.ScopedDictionary.OSharp.Extensions.TryCatchExtensions.TryCatch``2(System.Func{Hybrid.Dependency.ScopedDictionary,{TResult}},System.Action{System.Exception})
  - Hybrid.Dependency.ScopedDictionary.OSharp.Extensions.TryCatchExtensions.TryFinally``1(System.Action{Hybrid.Dependency.ScopedDictionary},System.Action{Hybrid.Dependency.ScopedDictionary})
  - System.Object.OSharp.Json.JsonExtensions.ToJsonString(System.Boolean,System.Boolean)
  - System.Object.OSharp.Mapping.MapperExtensions.MapTo``1
  - Hybrid.Dependency.ScopedDictionary.OSharp.Mapping.MapperExtensions.MapTo``2({TTarget})
  - System.Object.OSharp.Reflection.LockExtensions.Locking(System.Action)
  - Hybrid.Dependency.ScopedDictionary.OSharp.Reflection.LockExtensions.Locking``1(System.Action{Hybrid.Dependency.ScopedDictionary})
  - System.Object.OSharp.Reflection.LockExtensions.Locking``1(System.Func{{TResult}})
  - Hybrid.Dependency.ScopedDictionary.OSharp.Reflection.LockExtensions.Locking``2(System.Func{Hybrid.Dependency.ScopedDictionary,{TResult}})
  - Hybrid.Dependency.ScopedDictionary.Hybrid.Dependency.ScopedDictionaryExtensions.GetConnUnitOfWork(System.String)
  - Hybrid.Dependency.ScopedDictionary.Hybrid.Dependency.ScopedDictionaryExtensions.GetConnUnitOfWorks
  - Hybrid.Dependency.ScopedDictionary.Hybrid.Dependency.ScopedDictionaryExtensions.SetConnUnitOfWork(System.String,Hybrid.Domain.Uow.IUnitOfWork)
  - Hybrid.Dependency.ScopedDictionary.Hybrid.Dependency.ScopedDictionaryExtensions.GetEntityUnitOfWork(System.Type)
  - Hybrid.Dependency.ScopedDictionary.Hybrid.Dependency.ScopedDictionaryExtensions.GetEntityUnitOfWorks
  - Hybrid.Dependency.ScopedDictionary.Hybrid.Dependency.ScopedDictionaryExtensions.SetEntityUnitOfWork(System.Type,Hybrid.Domain.Uow.IUnitOfWork)
  - Hybrid.Dependency.ScopedDictionary.Hybrid.Dependency.ServiceCollectionExtensions.GetValue``1(System.String)
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.Hybrid.Extensions.CollectionExtensions.AddIf``1(System.Collections.Generic.KeyValuePair{System.String,System.Object},System.Boolean)
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.Hybrid.Extensions.CollectionExtensions.AddIf``1(System.Collections.Generic.KeyValuePair{System.String,System.Object},System.Func{System.Boolean})
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.Hybrid.Extensions.CollectionExtensions.AddIfNotExist``1(System.Collections.Generic.KeyValuePair{System.String,System.Object},System.Func{System.Collections.Generic.KeyValuePair{System.String,System.Object},System.Boolean})
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.Hybrid.Extensions.CollectionExtensions.GetOrAdd``1(System.Func{System.Collections.Generic.KeyValuePair{System.String,System.Object},System.Boolean},System.Func{System.Collections.Generic.KeyValuePair{System.String,System.Object}})
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.Hybrid.Extensions.CollectionExtensions.IsNullOrEmpty``1
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.Hybrid.Extensions.CollectionExtensions.AddIfNotContains``1(System.Collections.Generic.KeyValuePair{System.String,System.Object})
  - System.Collections.Generic.IDictionary{System.String,System.Object}.Hybrid.Extensions.DictionaryExtensions.GetOrDefault``2(System.String)
  - System.Collections.Generic.IDictionary{System.String,System.Object}.Hybrid.Extensions.DictionaryExtensions.GetOrAdd``2(System.String,System.Func{System.Object})
  - System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.Hybrid.Extensions.EnumerableExtensions.JoinAsString``1(System.String)
  - System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.Hybrid.Extensions.EnumerableExtensions.WhereIf``1(System.Boolean,System.Func{System.Collections.Generic.KeyValuePair{System.String,System.Object},System.Boolean})
  - System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.Hybrid.Extensions.EnumerableExtensions.WhereIf``1(System.Boolean,System.Func{System.Collections.Generic.KeyValuePair{System.String,System.Object},System.Int32,System.Boolean})
  - System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.Hybrid.Extensions.EnumerableExtensions.Shuffle``1
  - System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.Hybrid.Extensions.EnumerableExtensions.ExpandAndToString``1(System.String)
  - System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.Hybrid.Extensions.EnumerableExtensions.ExpandAndToString``1(System.Func{System.Collections.Generic.KeyValuePair{System.String,System.Object},System.String},System.String)
  - System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.Hybrid.Extensions.EnumerableExtensions.IsEmpty``1
  - System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.Hybrid.Extensions.EnumerableExtensions.WhereIf``1(System.Func{System.Collections.Generic.KeyValuePair{System.String,System.Object},System.Boolean},System.Boolean)
  - System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.Hybrid.Extensions.EnumerableExtensions.DistinctBy``2(System.Func{System.Collections.Generic.KeyValuePair{System.String,System.Object},{TKey}})
  - System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.Hybrid.Extensions.EnumerableExtensions.OrderBy``1(System.String,System.ComponentModel.ListSortDirection)
  - System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.Hybrid.Extensions.EnumerableExtensions.OrderBy``1(Hybrid.Filter.SortCondition)
  - System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.Hybrid.Extensions.EnumerableExtensions.OrderBy``1(Hybrid.Filter.SortCondition{System.Collections.Generic.KeyValuePair{System.String,System.Object}})
  - System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.Hybrid.Extensions.EnumerableExtensions.OrderByPrefixes``1(System.Func{System.Collections.Generic.KeyValuePair{System.String,System.Object},System.String},System.String[])
  - System.Object.Hybrid.Extensions.ObjectExtensions.CastTo(System.Type)
  - System.Object.Hybrid.Extensions.ObjectExtensions.CastTo``1
  - System.Object.Hybrid.Extensions.ObjectExtensions.CastTo``1({T})
  - Hybrid.Dependency.ScopedDictionary.Hybrid.Extensions.ObjectExtensions.IsIn``1(Hybrid.Dependency.ScopedDictionary[])
  - System.Object.Hybrid.Extensions.ObjectExtensions.ToDynamic
  - Hybrid.Dependency.ScopedDictionary.Hybrid.Extensions.ObjectExtensions.DeepClone``1
  - Hybrid.Dependency.ScopedDictionary.Hybrid.Extensions.ParameterCheckExtensions.Required``1(System.Func{Hybrid.Dependency.ScopedDictionary,System.Boolean},System.String)
  - Hybrid.Dependency.ScopedDictionary.Hybrid.Extensions.ParameterCheckExtensions.Required``2(System.Func{Hybrid.Dependency.ScopedDictionary,System.Boolean},System.String)
  - Hybrid.Dependency.ScopedDictionary.Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(System.String)
  - System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.Hybrid.Extensions.ParameterCheckExtensions.CheckNotNullOrEmpty``1(System.String)
  - Hybrid.Dependency.ScopedDictionary.Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{Hybrid.Dependency.ScopedDictionary},System.Action{System.Exception},System.Action{Hybrid.Dependency.ScopedDictionary})
  - Hybrid.Dependency.ScopedDictionary.Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{Hybrid.Dependency.ScopedDictionary},System.Action{System.Exception})
  - Hybrid.Dependency.ScopedDictionary.Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{Hybrid.Dependency.ScopedDictionary,{TResult}},System.Action{System.Exception},System.Action{Hybrid.Dependency.ScopedDictionary})
  - Hybrid.Dependency.ScopedDictionary.Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{Hybrid.Dependency.ScopedDictionary,{TResult}},System.Action{System.Exception})
  - Hybrid.Dependency.ScopedDictionary.Hybrid.Extensions.TryCatchExtensions.TryFinally``1(System.Action{Hybrid.Dependency.ScopedDictionary},System.Action{Hybrid.Dependency.ScopedDictionary})
  - System.Object.Hybrid.Json.JsonExtensions.ToJsonString(System.Boolean,System.Boolean)
  - System.Object.Hybrid.Mapping.MapperExtensions.MapTo``1
  - Hybrid.Dependency.ScopedDictionary.Hybrid.Mapping.MapperExtensions.MapTo``2({TTarget})
  - System.Object.Hybrid.Reflection.LockExtensions.Locking(System.Action)
  - Hybrid.Dependency.ScopedDictionary.Hybrid.Reflection.LockExtensions.Locking``1(System.Action{Hybrid.Dependency.ScopedDictionary})
  - System.Object.Hybrid.Reflection.LockExtensions.Locking``1(System.Func{{TResult}})
  - Hybrid.Dependency.ScopedDictionary.Hybrid.Reflection.LockExtensions.Locking``2(System.Func{Hybrid.Dependency.ScopedDictionary,{TResult}})
  - Hybrid.Dependency.ScopedDictionary.Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2
  - Hybrid.Dependency.ScopedDictionary.Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(System.Security.Principal.IPrincipal)
  - Hybrid.Dependency.ScopedDictionary.Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(System.Security.Principal.IPrincipal)
  - System.Collections.Generic.IDictionary{System.String,System.Object}.Quartz.Util.DictionaryExtensions.TryGetAndReturn``2(System.String)
  - System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.IdentityServer4.Extensions.IEnumerableExtensions.IsNullOrEmpty``1
  - System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.IdentityServer4.Extensions.IEnumerableExtensions.HasDuplicates``2(System.Func{System.Collections.Generic.KeyValuePair{System.String,System.Object},{TProp}})
  attributes:
  - type: Hybrid.Dependency.DependencyAttribute
    ctor: Hybrid.Dependency.DependencyAttribute.#ctor(Microsoft.Extensions.DependencyInjection.ServiceLifetime)
    arguments:
    - type: Microsoft.Extensions.DependencyInjection.ServiceLifetime
      value: 1
    namedArguments:
    - name: AddSelf
      type: System.Boolean
      value: true
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Hybrid.Dependency.ScopedDictionary.Function
  commentId: P:Hybrid.Dependency.ScopedDictionary.Function
  id: Function
  parent: Hybrid.Dependency.ScopedDictionary
  langs:
  - csharp
  - vb
  name: Function
  nameWithType: ScopedDictionary.Function
  fullName: Hybrid.Dependency.ScopedDictionary.Function
  type: Property
  source:
    remote:
      path: src/Hybrid/Dependency/ScopedDictionary.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: Function
    path: ../src/Hybrid/Dependency/ScopedDictionary.cs
    startLine: 29
  assemblies:
  - Hybrid
  namespace: Hybrid.Dependency
  summary: "\n获取或设置 当前执行的功能\n"
  example: []
  syntax:
    content: public IFunction Function { get; set; }
    parameters: []
    return:
      type: Hybrid.Authorization.Functions.IFunction
    content.vb: Public Property Function As IFunction
  overload: Hybrid.Dependency.ScopedDictionary.Function*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Hybrid.Dependency.ScopedDictionary.DataAuthValidRoleNames
  commentId: P:Hybrid.Dependency.ScopedDictionary.DataAuthValidRoleNames
  id: DataAuthValidRoleNames
  parent: Hybrid.Dependency.ScopedDictionary
  langs:
  - csharp
  - vb
  name: DataAuthValidRoleNames
  nameWithType: ScopedDictionary.DataAuthValidRoleNames
  fullName: Hybrid.Dependency.ScopedDictionary.DataAuthValidRoleNames
  type: Property
  source:
    remote:
      path: src/Hybrid/Dependency/ScopedDictionary.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: DataAuthValidRoleNames
    path: ../src/Hybrid/Dependency/ScopedDictionary.cs
    startLine: 34
  assemblies:
  - Hybrid
  namespace: Hybrid.Dependency
  summary: "\n获取或设置 对于当前功能有效的角色集合，用于数据权限判断\n"
  example: []
  syntax:
    content: public string[] DataAuthValidRoleNames { get; set; }
    parameters: []
    return:
      type: System.String[]
    content.vb: Public Property DataAuthValidRoleNames As String()
  overload: Hybrid.Dependency.ScopedDictionary.DataAuthValidRoleNames*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Hybrid.Dependency.ScopedDictionary.AuditOperation
  commentId: P:Hybrid.Dependency.ScopedDictionary.AuditOperation
  id: AuditOperation
  parent: Hybrid.Dependency.ScopedDictionary
  langs:
  - csharp
  - vb
  name: AuditOperation
  nameWithType: ScopedDictionary.AuditOperation
  fullName: Hybrid.Dependency.ScopedDictionary.AuditOperation
  type: Property
  source:
    remote:
      path: src/Hybrid/Dependency/ScopedDictionary.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: AuditOperation
    path: ../src/Hybrid/Dependency/ScopedDictionary.cs
    startLine: 39
  assemblies:
  - Hybrid
  namespace: Hybrid.Dependency
  summary: "\n获取或设置 当前操作审计\n"
  example: []
  syntax:
    content: public AuditOperationEntry AuditOperation { get; set; }
    parameters: []
    return:
      type: Hybrid.Audits.AuditOperationEntry
    content.vb: Public Property AuditOperation As AuditOperationEntry
  overload: Hybrid.Dependency.ScopedDictionary.AuditOperation*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Hybrid.Dependency.ScopedDictionary.Identity
  commentId: P:Hybrid.Dependency.ScopedDictionary.Identity
  id: Identity
  parent: Hybrid.Dependency.ScopedDictionary
  langs:
  - csharp
  - vb
  name: Identity
  nameWithType: ScopedDictionary.Identity
  fullName: Hybrid.Dependency.ScopedDictionary.Identity
  type: Property
  source:
    remote:
      path: src/Hybrid/Dependency/ScopedDictionary.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: Identity
    path: ../src/Hybrid/Dependency/ScopedDictionary.cs
    startLine: 44
  assemblies:
  - Hybrid
  namespace: Hybrid.Dependency
  summary: "\n获取或设置 当前用户\n"
  example: []
  syntax:
    content: public ClaimsIdentity Identity { get; set; }
    parameters: []
    return:
      type: System.Security.Claims.ClaimsIdentity
    content.vb: Public Property Identity As ClaimsIdentity
  overload: Hybrid.Dependency.ScopedDictionary.Identity*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Hybrid.Dependency.ScopedDictionary.Dispose
  commentId: M:Hybrid.Dependency.ScopedDictionary.Dispose
  id: Dispose
  parent: Hybrid.Dependency.ScopedDictionary
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: ScopedDictionary.Dispose()
  fullName: Hybrid.Dependency.ScopedDictionary.Dispose()
  type: Method
  source:
    remote:
      path: src/Hybrid/Dependency/ScopedDictionary.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: Dispose
    path: ../src/Hybrid/Dependency/ScopedDictionary.cs
    startLine: 47
  assemblies:
  - Hybrid
  namespace: Hybrid.Dependency
  summary: 释放资源.
  example: []
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  overload: Hybrid.Dependency.ScopedDictionary.Dispose*
  implements:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Hybrid.Dependency
  commentId: N:Hybrid.Dependency
  name: Hybrid.Dependency
  nameWithType: Hybrid.Dependency
  fullName: Hybrid.Dependency
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}
  commentId: T:System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}
  parent: System.Collections.Concurrent
  definition: System.Collections.Concurrent.ConcurrentDictionary`2
  name: ConcurrentDictionary<String, Object>
  nameWithType: ConcurrentDictionary<String, Object>
  fullName: System.Collections.Concurrent.ConcurrentDictionary<System.String, System.Object>
  nameWithType.vb: ConcurrentDictionary(Of String, Object)
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of System.String, System.Object)
  name.vb: ConcurrentDictionary(Of String, Object)
  spec.csharp:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2
    name: ConcurrentDictionary
    nameWithType: ConcurrentDictionary
    fullName: System.Collections.Concurrent.ConcurrentDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2
    name: ConcurrentDictionary
    nameWithType: ConcurrentDictionary
    fullName: System.Collections.Concurrent.ConcurrentDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary{System.String,System.Object}
  commentId: T:System.Collections.Generic.IDictionary{System.String,System.Object}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<String, Object>
  nameWithType: IDictionary<String, Object>
  fullName: System.Collections.Generic.IDictionary<System.String, System.Object>
  nameWithType.vb: IDictionary(Of String, Object)
  fullName.vb: System.Collections.Generic.IDictionary(Of System.String, System.Object)
  name.vb: IDictionary(Of String, Object)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}}
  commentId: T:System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<KeyValuePair<String, Object>>
  nameWithType: ICollection<KeyValuePair<String, Object>>
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Object>>
  nameWithType.vb: ICollection(Of KeyValuePair(Of String, Object))
  fullName.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object))
  name.vb: ICollection(Of KeyValuePair(Of String, Object))
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object}
  commentId: T:System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyDictionary`2
  name: IReadOnlyDictionary<String, Object>
  nameWithType: IReadOnlyDictionary<String, Object>
  fullName: System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>
  nameWithType.vb: IReadOnlyDictionary(Of String, Object)
  fullName.vb: System.Collections.Generic.IReadOnlyDictionary(Of System.String, System.Object)
  name.vb: IReadOnlyDictionary(Of String, Object)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    nameWithType: IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    nameWithType: IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyCollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}}
  commentId: T:System.Collections.Generic.IReadOnlyCollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyCollection`1
  name: IReadOnlyCollection<KeyValuePair<String, Object>>
  nameWithType: IReadOnlyCollection<KeyValuePair<String, Object>>
  fullName: System.Collections.Generic.IReadOnlyCollection<System.Collections.Generic.KeyValuePair<System.String, System.Object>>
  nameWithType.vb: IReadOnlyCollection(Of KeyValuePair(Of String, Object))
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object))
  name.vb: IReadOnlyCollection(Of KeyValuePair(Of String, Object))
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}
  commentId: T:System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<KeyValuePair<String, Object>>
  nameWithType: IEnumerable<KeyValuePair<String, Object>>
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String, System.Object>>
  nameWithType.vb: IEnumerable(Of KeyValuePair(Of String, Object))
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object))
  name.vb: IEnumerable(Of KeyValuePair(Of String, Object))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IDictionary
  commentId: T:System.Collections.IDictionary
  parent: System.Collections
  isExternal: true
  name: IDictionary
  nameWithType: IDictionary
  fullName: System.Collections.IDictionary
- uid: System.Collections.ICollection
  commentId: T:System.Collections.ICollection
  parent: System.Collections
  isExternal: true
  name: ICollection
  nameWithType: ICollection
  fullName: System.Collections.ICollection
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.System#Collections#IDictionary#get_Item(System.Object)
  commentId: M:System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.System#Collections#IDictionary#get_Item(System.Object)
  parent: System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}
  definition: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#get_Item(System.Object)
  name: IDictionary.get_Item(Object)
  nameWithType: ConcurrentDictionary<String, Object>.IDictionary.get_Item(Object)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<System.String, System.Object>.System.Collections.IDictionary.get_Item(System.Object)
  nameWithType.vb: ConcurrentDictionary(Of String, Object).System.Collections.IDictionary.get_Item(Object)
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of System.String, System.Object).System.Collections.IDictionary.get_Item(System.Object)
  name.vb: System.Collections.IDictionary.get_Item(Object)
  spec.csharp:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#get_Item(System.Object)
    name: IDictionary.get_Item
    nameWithType: ConcurrentDictionary<String, Object>.IDictionary.get_Item
    fullName: System.Collections.Concurrent.ConcurrentDictionary<System.String, System.Object>.System.Collections.IDictionary.get_Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#get_Item(System.Object)
    name: System.Collections.IDictionary.get_Item
    nameWithType: ConcurrentDictionary(Of String, Object).System.Collections.IDictionary.get_Item
    fullName: System.Collections.Concurrent.ConcurrentDictionary(Of System.String, System.Object).System.Collections.IDictionary.get_Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.System#Collections#IDictionary#set_Item(System.Object,System.Object)
  commentId: M:System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.System#Collections#IDictionary#set_Item(System.Object,System.Object)
  parent: System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}
  definition: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#set_Item(System.Object,System.Object)
  name: IDictionary.set_Item(Object, Object)
  nameWithType: ConcurrentDictionary<String, Object>.IDictionary.set_Item(Object, Object)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<System.String, System.Object>.System.Collections.IDictionary.set_Item(System.Object, System.Object)
  nameWithType.vb: ConcurrentDictionary(Of String, Object).System.Collections.IDictionary.set_Item(Object, Object)
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of System.String, System.Object).System.Collections.IDictionary.set_Item(System.Object, System.Object)
  name.vb: System.Collections.IDictionary.set_Item(Object, Object)
  spec.csharp:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#set_Item(System.Object,System.Object)
    name: IDictionary.set_Item
    nameWithType: ConcurrentDictionary<String, Object>.IDictionary.set_Item
    fullName: System.Collections.Concurrent.ConcurrentDictionary<System.String, System.Object>.System.Collections.IDictionary.set_Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#set_Item(System.Object,System.Object)
    name: System.Collections.IDictionary.set_Item
    nameWithType: ConcurrentDictionary(Of String, Object).System.Collections.IDictionary.set_Item
    fullName: System.Collections.Concurrent.ConcurrentDictionary(Of System.String, System.Object).System.Collections.IDictionary.set_Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.AddOrUpdate(System.String,System.Func{System.String,System.Object},System.Func{System.String,System.Object,System.Object})
  commentId: M:System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.AddOrUpdate(System.String,System.Func{System.String,System.Object},System.Func{System.String,System.Object,System.Object})
  parent: System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}
  definition: System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate(`0,System.Func{`0,`1},System.Func{`0,`1,`1})
  name: AddOrUpdate(String, Func<String, Object>, Func<String, Object, Object>)
  nameWithType: ConcurrentDictionary<String, Object>.AddOrUpdate(String, Func<String, Object>, Func<String, Object, Object>)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<System.String, System.Object>.AddOrUpdate(System.String, System.Func<System.String, System.Object>, System.Func<System.String, System.Object, System.Object>)
  nameWithType.vb: ConcurrentDictionary(Of String, Object).AddOrUpdate(String, Func(Of String, Object), Func(Of String, Object, Object))
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of System.String, System.Object).AddOrUpdate(System.String, System.Func(Of System.String, System.Object), System.Func(Of System.String, System.Object, System.Object))
  name.vb: AddOrUpdate(String, Func(Of String, Object), Func(Of String, Object, Object))
  spec.csharp:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate(`0,System.Func{`0,`1},System.Func{`0,`1,`1})
    name: AddOrUpdate
    nameWithType: ConcurrentDictionary<String, Object>.AddOrUpdate
    fullName: System.Collections.Concurrent.ConcurrentDictionary<System.String, System.Object>.AddOrUpdate
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate(`0,System.Func{`0,`1},System.Func{`0,`1,`1})
    name: AddOrUpdate
    nameWithType: ConcurrentDictionary(Of String, Object).AddOrUpdate
    fullName: System.Collections.Concurrent.ConcurrentDictionary(Of System.String, System.Object).AddOrUpdate
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.AddOrUpdate(System.String,System.Object,System.Func{System.String,System.Object,System.Object})
  commentId: M:System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.AddOrUpdate(System.String,System.Object,System.Func{System.String,System.Object,System.Object})
  parent: System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}
  definition: System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate(`0,`1,System.Func{`0,`1,`1})
  name: AddOrUpdate(String, Object, Func<String, Object, Object>)
  nameWithType: ConcurrentDictionary<String, Object>.AddOrUpdate(String, Object, Func<String, Object, Object>)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<System.String, System.Object>.AddOrUpdate(System.String, System.Object, System.Func<System.String, System.Object, System.Object>)
  nameWithType.vb: ConcurrentDictionary(Of String, Object).AddOrUpdate(String, Object, Func(Of String, Object, Object))
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of System.String, System.Object).AddOrUpdate(System.String, System.Object, System.Func(Of System.String, System.Object, System.Object))
  name.vb: AddOrUpdate(String, Object, Func(Of String, Object, Object))
  spec.csharp:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate(`0,`1,System.Func{`0,`1,`1})
    name: AddOrUpdate
    nameWithType: ConcurrentDictionary<String, Object>.AddOrUpdate
    fullName: System.Collections.Concurrent.ConcurrentDictionary<System.String, System.Object>.AddOrUpdate
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate(`0,`1,System.Func{`0,`1,`1})
    name: AddOrUpdate
    nameWithType: ConcurrentDictionary(Of String, Object).AddOrUpdate
    fullName: System.Collections.Concurrent.ConcurrentDictionary(Of System.String, System.Object).AddOrUpdate
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.AddOrUpdate``1(System.String,System.Func{System.String,{TArg},System.Object},System.Func{System.String,System.Object,{TArg},System.Object},{TArg})
  commentId: M:System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.AddOrUpdate``1(System.String,System.Func{System.String,``0,System.Object},System.Func{System.String,System.Object,``0,System.Object},``0)
  parent: System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}
  definition: System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate``1(`0,System.Func{`0,``0,`1},System.Func{`0,`1,``0,`1},``0)
  name: AddOrUpdate<TArg>(String, Func<String, TArg, Object>, Func<String, Object, TArg, Object>, TArg)
  nameWithType: ConcurrentDictionary<String, Object>.AddOrUpdate<TArg>(String, Func<String, TArg, Object>, Func<String, Object, TArg, Object>, TArg)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<System.String, System.Object>.AddOrUpdate<TArg>(System.String, System.Func<System.String, TArg, System.Object>, System.Func<System.String, System.Object, TArg, System.Object>, TArg)
  nameWithType.vb: ConcurrentDictionary(Of String, Object).AddOrUpdate(Of TArg)(String, Func(Of String, TArg, Object), Func(Of String, Object, TArg, Object), TArg)
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of System.String, System.Object).AddOrUpdate(Of TArg)(System.String, System.Func(Of System.String, TArg, System.Object), System.Func(Of System.String, System.Object, TArg, System.Object), TArg)
  name.vb: AddOrUpdate(Of TArg)(String, Func(Of String, TArg, Object), Func(Of String, Object, TArg, Object), TArg)
  spec.csharp:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate``1(`0,System.Func{`0,``0,`1},System.Func{`0,`1,``0,`1},``0)
    name: AddOrUpdate<TArg>
    nameWithType: ConcurrentDictionary<String, Object>.AddOrUpdate<TArg>
    fullName: System.Collections.Concurrent.ConcurrentDictionary<System.String, System.Object>.AddOrUpdate<TArg>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TArg
    nameWithType: TArg
    fullName: TArg
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TArg
    nameWithType: TArg
    fullName: TArg
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TArg
    nameWithType: TArg
    fullName: TArg
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate``1(`0,System.Func{`0,``0,`1},System.Func{`0,`1,``0,`1},``0)
    name: AddOrUpdate(Of TArg)
    nameWithType: ConcurrentDictionary(Of String, Object).AddOrUpdate(Of TArg)
    fullName: System.Collections.Concurrent.ConcurrentDictionary(Of System.String, System.Object).AddOrUpdate(Of TArg)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TArg
    nameWithType: TArg
    fullName: TArg
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TArg
    nameWithType: TArg
    fullName: TArg
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TArg
    nameWithType: TArg
    fullName: TArg
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.Clear
  commentId: M:System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.Clear
  parent: System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}
  definition: System.Collections.Concurrent.ConcurrentDictionary`2.Clear
  name: Clear()
  nameWithType: ConcurrentDictionary<String, Object>.Clear()
  fullName: System.Collections.Concurrent.ConcurrentDictionary<System.String, System.Object>.Clear()
  nameWithType.vb: ConcurrentDictionary(Of String, Object).Clear()
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of System.String, System.Object).Clear()
  spec.csharp:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2.Clear
    name: Clear
    nameWithType: ConcurrentDictionary<String, Object>.Clear
    fullName: System.Collections.Concurrent.ConcurrentDictionary<System.String, System.Object>.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2.Clear
    name: Clear
    nameWithType: ConcurrentDictionary(Of String, Object).Clear
    fullName: System.Collections.Concurrent.ConcurrentDictionary(Of System.String, System.Object).Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.ContainsKey(System.String)
  commentId: M:System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.ContainsKey(System.String)
  parent: System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}
  definition: System.Collections.Concurrent.ConcurrentDictionary`2.ContainsKey(`0)
  name: ContainsKey(String)
  nameWithType: ConcurrentDictionary<String, Object>.ContainsKey(String)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<System.String, System.Object>.ContainsKey(System.String)
  nameWithType.vb: ConcurrentDictionary(Of String, Object).ContainsKey(String)
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of System.String, System.Object).ContainsKey(System.String)
  spec.csharp:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2.ContainsKey(`0)
    name: ContainsKey
    nameWithType: ConcurrentDictionary<String, Object>.ContainsKey
    fullName: System.Collections.Concurrent.ConcurrentDictionary<System.String, System.Object>.ContainsKey
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2.ContainsKey(`0)
    name: ContainsKey
    nameWithType: ConcurrentDictionary(Of String, Object).ContainsKey
    fullName: System.Collections.Concurrent.ConcurrentDictionary(Of System.String, System.Object).ContainsKey
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.GetEnumerator
  commentId: M:System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.GetEnumerator
  parent: System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}
  definition: System.Collections.Concurrent.ConcurrentDictionary`2.GetEnumerator
  name: GetEnumerator()
  nameWithType: ConcurrentDictionary<String, Object>.GetEnumerator()
  fullName: System.Collections.Concurrent.ConcurrentDictionary<System.String, System.Object>.GetEnumerator()
  nameWithType.vb: ConcurrentDictionary(Of String, Object).GetEnumerator()
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of System.String, System.Object).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2.GetEnumerator
    name: GetEnumerator
    nameWithType: ConcurrentDictionary<String, Object>.GetEnumerator
    fullName: System.Collections.Concurrent.ConcurrentDictionary<System.String, System.Object>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2.GetEnumerator
    name: GetEnumerator
    nameWithType: ConcurrentDictionary(Of String, Object).GetEnumerator
    fullName: System.Collections.Concurrent.ConcurrentDictionary(Of System.String, System.Object).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.GetOrAdd(System.String,System.Func{System.String,System.Object})
  commentId: M:System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.GetOrAdd(System.String,System.Func{System.String,System.Object})
  parent: System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}
  definition: System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(`0,System.Func{`0,`1})
  name: GetOrAdd(String, Func<String, Object>)
  nameWithType: ConcurrentDictionary<String, Object>.GetOrAdd(String, Func<String, Object>)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<System.String, System.Object>.GetOrAdd(System.String, System.Func<System.String, System.Object>)
  nameWithType.vb: ConcurrentDictionary(Of String, Object).GetOrAdd(String, Func(Of String, Object))
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of System.String, System.Object).GetOrAdd(System.String, System.Func(Of System.String, System.Object))
  name.vb: GetOrAdd(String, Func(Of String, Object))
  spec.csharp:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(`0,System.Func{`0,`1})
    name: GetOrAdd
    nameWithType: ConcurrentDictionary<String, Object>.GetOrAdd
    fullName: System.Collections.Concurrent.ConcurrentDictionary<System.String, System.Object>.GetOrAdd
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(`0,System.Func{`0,`1})
    name: GetOrAdd
    nameWithType: ConcurrentDictionary(Of String, Object).GetOrAdd
    fullName: System.Collections.Concurrent.ConcurrentDictionary(Of System.String, System.Object).GetOrAdd
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.GetOrAdd(System.String,System.Object)
  commentId: M:System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.GetOrAdd(System.String,System.Object)
  parent: System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}
  definition: System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(`0,`1)
  name: GetOrAdd(String, Object)
  nameWithType: ConcurrentDictionary<String, Object>.GetOrAdd(String, Object)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<System.String, System.Object>.GetOrAdd(System.String, System.Object)
  nameWithType.vb: ConcurrentDictionary(Of String, Object).GetOrAdd(String, Object)
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of System.String, System.Object).GetOrAdd(System.String, System.Object)
  spec.csharp:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(`0,`1)
    name: GetOrAdd
    nameWithType: ConcurrentDictionary<String, Object>.GetOrAdd
    fullName: System.Collections.Concurrent.ConcurrentDictionary<System.String, System.Object>.GetOrAdd
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(`0,`1)
    name: GetOrAdd
    nameWithType: ConcurrentDictionary(Of String, Object).GetOrAdd
    fullName: System.Collections.Concurrent.ConcurrentDictionary(Of System.String, System.Object).GetOrAdd
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.GetOrAdd``1(System.String,System.Func{System.String,{TArg},System.Object},{TArg})
  commentId: M:System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.GetOrAdd``1(System.String,System.Func{System.String,``0,System.Object},``0)
  parent: System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}
  definition: System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd``1(`0,System.Func{`0,``0,`1},``0)
  name: GetOrAdd<TArg>(String, Func<String, TArg, Object>, TArg)
  nameWithType: ConcurrentDictionary<String, Object>.GetOrAdd<TArg>(String, Func<String, TArg, Object>, TArg)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<System.String, System.Object>.GetOrAdd<TArg>(System.String, System.Func<System.String, TArg, System.Object>, TArg)
  nameWithType.vb: ConcurrentDictionary(Of String, Object).GetOrAdd(Of TArg)(String, Func(Of String, TArg, Object), TArg)
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of System.String, System.Object).GetOrAdd(Of TArg)(System.String, System.Func(Of System.String, TArg, System.Object), TArg)
  name.vb: GetOrAdd(Of TArg)(String, Func(Of String, TArg, Object), TArg)
  spec.csharp:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd``1(`0,System.Func{`0,``0,`1},``0)
    name: GetOrAdd<TArg>
    nameWithType: ConcurrentDictionary<String, Object>.GetOrAdd<TArg>
    fullName: System.Collections.Concurrent.ConcurrentDictionary<System.String, System.Object>.GetOrAdd<TArg>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TArg
    nameWithType: TArg
    fullName: TArg
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TArg
    nameWithType: TArg
    fullName: TArg
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd``1(`0,System.Func{`0,``0,`1},``0)
    name: GetOrAdd(Of TArg)
    nameWithType: ConcurrentDictionary(Of String, Object).GetOrAdd(Of TArg)
    fullName: System.Collections.Concurrent.ConcurrentDictionary(Of System.String, System.Object).GetOrAdd(Of TArg)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TArg
    nameWithType: TArg
    fullName: TArg
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TArg
    nameWithType: TArg
    fullName: TArg
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})
  commentId: M:System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})
  parent: System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}
  definition: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})
  name: ICollection<KeyValuePair<String, Object>>.Add(KeyValuePair<String, Object>)
  nameWithType: ConcurrentDictionary<String, Object>.ICollection<KeyValuePair<String, Object>>.Add(KeyValuePair<String, Object>)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<System.String, System.Object>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Object>>.Add(System.Collections.Generic.KeyValuePair<System.String, System.Object>)
  nameWithType.vb: ConcurrentDictionary(Of String, Object).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add(KeyValuePair(Of String, Object))
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of System.String, System.Object).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add(System.Collections.Generic.KeyValuePair(Of System.String, System.Object))
  name.vb: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add(KeyValuePair(Of String, Object))
  spec.csharp:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})
    name: ICollection<KeyValuePair<String, Object>>.Add
    nameWithType: ConcurrentDictionary<String, Object>.ICollection<KeyValuePair<String, Object>>.Add
    fullName: System.Collections.Concurrent.ConcurrentDictionary<System.String, System.Object>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Object>>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})
    name: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add
    nameWithType: ConcurrentDictionary(Of String, Object).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add
    fullName: System.Collections.Concurrent.ConcurrentDictionary(Of System.String, System.Object).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})
  commentId: M:System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})
  parent: System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}
  definition: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})
  name: ICollection<KeyValuePair<String, Object>>.Contains(KeyValuePair<String, Object>)
  nameWithType: ConcurrentDictionary<String, Object>.ICollection<KeyValuePair<String, Object>>.Contains(KeyValuePair<String, Object>)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<System.String, System.Object>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Object>>.Contains(System.Collections.Generic.KeyValuePair<System.String, System.Object>)
  nameWithType.vb: ConcurrentDictionary(Of String, Object).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains(KeyValuePair(Of String, Object))
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of System.String, System.Object).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains(System.Collections.Generic.KeyValuePair(Of System.String, System.Object))
  name.vb: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains(KeyValuePair(Of String, Object))
  spec.csharp:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})
    name: ICollection<KeyValuePair<String, Object>>.Contains
    nameWithType: ConcurrentDictionary<String, Object>.ICollection<KeyValuePair<String, Object>>.Contains
    fullName: System.Collections.Concurrent.ConcurrentDictionary<System.String, System.Object>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Object>>.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})
    name: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains
    nameWithType: ConcurrentDictionary(Of String, Object).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains
    fullName: System.Collections.Concurrent.ConcurrentDictionary(Of System.String, System.Object).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)
  commentId: M:System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)
  parent: System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}
  definition: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)
  name: ICollection<KeyValuePair<String, Object>>.CopyTo(KeyValuePair<String, Object>[], Int32)
  nameWithType: ConcurrentDictionary<String, Object>.ICollection<KeyValuePair<String, Object>>.CopyTo(KeyValuePair<String, Object>[], Int32)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<System.String, System.Object>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Object>>.CopyTo(System.Collections.Generic.KeyValuePair<System.String, System.Object>[], System.Int32)
  nameWithType.vb: ConcurrentDictionary(Of String, Object).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo(KeyValuePair(Of String, Object)(), Int32)
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of System.String, System.Object).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo(System.Collections.Generic.KeyValuePair(Of System.String, System.Object)(), System.Int32)
  name.vb: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo(KeyValuePair(Of String, Object)(), Int32)
  spec.csharp:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)
    name: ICollection<KeyValuePair<String, Object>>.CopyTo
    nameWithType: ConcurrentDictionary<String, Object>.ICollection<KeyValuePair<String, Object>>.CopyTo
    fullName: System.Collections.Concurrent.ConcurrentDictionary<System.String, System.Object>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Object>>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)
    name: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo
    nameWithType: ConcurrentDictionary(Of String, Object).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo
    fullName: System.Collections.Concurrent.ConcurrentDictionary(Of System.String, System.Object).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})
  commentId: M:System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})
  parent: System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}
  definition: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})
  name: ICollection<KeyValuePair<String, Object>>.Remove(KeyValuePair<String, Object>)
  nameWithType: ConcurrentDictionary<String, Object>.ICollection<KeyValuePair<String, Object>>.Remove(KeyValuePair<String, Object>)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<System.String, System.Object>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Object>>.Remove(System.Collections.Generic.KeyValuePair<System.String, System.Object>)
  nameWithType.vb: ConcurrentDictionary(Of String, Object).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove(KeyValuePair(Of String, Object))
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of System.String, System.Object).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove(System.Collections.Generic.KeyValuePair(Of System.String, System.Object))
  name.vb: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove(KeyValuePair(Of String, Object))
  spec.csharp:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})
    name: ICollection<KeyValuePair<String, Object>>.Remove
    nameWithType: ConcurrentDictionary<String, Object>.ICollection<KeyValuePair<String, Object>>.Remove
    fullName: System.Collections.Concurrent.ConcurrentDictionary<System.String, System.Object>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Object>>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})
    name: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove
    nameWithType: ConcurrentDictionary(Of String, Object).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove
    fullName: System.Collections.Concurrent.ConcurrentDictionary(Of System.String, System.Object).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.System#Collections#Generic#IDictionary{TKey,TValue}#Add(System.String,System.Object)
  commentId: M:System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.System#Collections#Generic#IDictionary{TKey,TValue}#Add(System.String,System.Object)
  parent: System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}
  definition: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Add(`0,`1)
  name: IDictionary<String, Object>.Add(String, Object)
  nameWithType: ConcurrentDictionary<String, Object>.IDictionary<String, Object>.Add(String, Object)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<System.String, System.Object>.System.Collections.Generic.IDictionary<System.String, System.Object>.Add(System.String, System.Object)
  nameWithType.vb: ConcurrentDictionary(Of String, Object).System.Collections.Generic.IDictionary<TKey,TValue>.Add(String, Object)
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of System.String, System.Object).System.Collections.Generic.IDictionary<TKey,TValue>.Add(System.String, System.Object)
  name.vb: System.Collections.Generic.IDictionary<TKey,TValue>.Add(String, Object)
  spec.csharp:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Add(`0,`1)
    name: IDictionary<String, Object>.Add
    nameWithType: ConcurrentDictionary<String, Object>.IDictionary<String, Object>.Add
    fullName: System.Collections.Concurrent.ConcurrentDictionary<System.String, System.Object>.System.Collections.Generic.IDictionary<System.String, System.Object>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Add(`0,`1)
    name: System.Collections.Generic.IDictionary<TKey,TValue>.Add
    nameWithType: ConcurrentDictionary(Of String, Object).System.Collections.Generic.IDictionary<TKey,TValue>.Add
    fullName: System.Collections.Concurrent.ConcurrentDictionary(Of System.String, System.Object).System.Collections.Generic.IDictionary<TKey,TValue>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.System#Collections#Generic#IDictionary{TKey,TValue}#Remove(System.String)
  commentId: M:System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.System#Collections#Generic#IDictionary{TKey,TValue}#Remove(System.String)
  parent: System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}
  definition: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Remove(`0)
  name: IDictionary<String, Object>.Remove(String)
  nameWithType: ConcurrentDictionary<String, Object>.IDictionary<String, Object>.Remove(String)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<System.String, System.Object>.System.Collections.Generic.IDictionary<System.String, System.Object>.Remove(System.String)
  nameWithType.vb: ConcurrentDictionary(Of String, Object).System.Collections.Generic.IDictionary<TKey,TValue>.Remove(String)
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of System.String, System.Object).System.Collections.Generic.IDictionary<TKey,TValue>.Remove(System.String)
  name.vb: System.Collections.Generic.IDictionary<TKey,TValue>.Remove(String)
  spec.csharp:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Remove(`0)
    name: IDictionary<String, Object>.Remove
    nameWithType: ConcurrentDictionary<String, Object>.IDictionary<String, Object>.Remove
    fullName: System.Collections.Concurrent.ConcurrentDictionary<System.String, System.Object>.System.Collections.Generic.IDictionary<System.String, System.Object>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Remove(`0)
    name: System.Collections.Generic.IDictionary<TKey,TValue>.Remove
    nameWithType: ConcurrentDictionary(Of String, Object).System.Collections.Generic.IDictionary<TKey,TValue>.Remove
    fullName: System.Collections.Concurrent.ConcurrentDictionary(Of System.String, System.Object).System.Collections.Generic.IDictionary<TKey,TValue>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  commentId: M:System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  parent: System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}
  definition: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  name: ICollection.CopyTo(Array, Int32)
  nameWithType: ConcurrentDictionary<String, Object>.ICollection.CopyTo(Array, Int32)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<System.String, System.Object>.System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  nameWithType.vb: ConcurrentDictionary(Of String, Object).System.Collections.ICollection.CopyTo(Array, Int32)
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of System.String, System.Object).System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  name.vb: System.Collections.ICollection.CopyTo(Array, Int32)
  spec.csharp:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
    name: ICollection.CopyTo
    nameWithType: ConcurrentDictionary<String, Object>.ICollection.CopyTo
    fullName: System.Collections.Concurrent.ConcurrentDictionary<System.String, System.Object>.System.Collections.ICollection.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Array
    name: Array
    nameWithType: Array
    fullName: System.Array
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
    name: System.Collections.ICollection.CopyTo
    nameWithType: ConcurrentDictionary(Of String, Object).System.Collections.ICollection.CopyTo
    fullName: System.Collections.Concurrent.ConcurrentDictionary(Of System.String, System.Object).System.Collections.ICollection.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Array
    name: Array
    nameWithType: Array
    fullName: System.Array
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.System#Collections#IDictionary#Add(System.Object,System.Object)
  commentId: M:System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.System#Collections#IDictionary#Add(System.Object,System.Object)
  parent: System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}
  definition: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)
  name: IDictionary.Add(Object, Object)
  nameWithType: ConcurrentDictionary<String, Object>.IDictionary.Add(Object, Object)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<System.String, System.Object>.System.Collections.IDictionary.Add(System.Object, System.Object)
  nameWithType.vb: ConcurrentDictionary(Of String, Object).System.Collections.IDictionary.Add(Object, Object)
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of System.String, System.Object).System.Collections.IDictionary.Add(System.Object, System.Object)
  name.vb: System.Collections.IDictionary.Add(Object, Object)
  spec.csharp:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)
    name: IDictionary.Add
    nameWithType: ConcurrentDictionary<String, Object>.IDictionary.Add
    fullName: System.Collections.Concurrent.ConcurrentDictionary<System.String, System.Object>.System.Collections.IDictionary.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)
    name: System.Collections.IDictionary.Add
    nameWithType: ConcurrentDictionary(Of String, Object).System.Collections.IDictionary.Add
    fullName: System.Collections.Concurrent.ConcurrentDictionary(Of System.String, System.Object).System.Collections.IDictionary.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.System#Collections#IDictionary#Contains(System.Object)
  commentId: M:System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.System#Collections#IDictionary#Contains(System.Object)
  parent: System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}
  definition: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Contains(System.Object)
  name: IDictionary.Contains(Object)
  nameWithType: ConcurrentDictionary<String, Object>.IDictionary.Contains(Object)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<System.String, System.Object>.System.Collections.IDictionary.Contains(System.Object)
  nameWithType.vb: ConcurrentDictionary(Of String, Object).System.Collections.IDictionary.Contains(Object)
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of System.String, System.Object).System.Collections.IDictionary.Contains(System.Object)
  name.vb: System.Collections.IDictionary.Contains(Object)
  spec.csharp:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Contains(System.Object)
    name: IDictionary.Contains
    nameWithType: ConcurrentDictionary<String, Object>.IDictionary.Contains
    fullName: System.Collections.Concurrent.ConcurrentDictionary<System.String, System.Object>.System.Collections.IDictionary.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Contains(System.Object)
    name: System.Collections.IDictionary.Contains
    nameWithType: ConcurrentDictionary(Of String, Object).System.Collections.IDictionary.Contains
    fullName: System.Collections.Concurrent.ConcurrentDictionary(Of System.String, System.Object).System.Collections.IDictionary.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.System#Collections#IDictionary#GetEnumerator
  commentId: M:System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.System#Collections#IDictionary#GetEnumerator
  parent: System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}
  definition: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#GetEnumerator
  name: IDictionary.GetEnumerator()
  nameWithType: ConcurrentDictionary<String, Object>.IDictionary.GetEnumerator()
  fullName: System.Collections.Concurrent.ConcurrentDictionary<System.String, System.Object>.System.Collections.IDictionary.GetEnumerator()
  nameWithType.vb: ConcurrentDictionary(Of String, Object).System.Collections.IDictionary.GetEnumerator()
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of System.String, System.Object).System.Collections.IDictionary.GetEnumerator()
  name.vb: System.Collections.IDictionary.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#GetEnumerator
    name: IDictionary.GetEnumerator
    nameWithType: ConcurrentDictionary<String, Object>.IDictionary.GetEnumerator
    fullName: System.Collections.Concurrent.ConcurrentDictionary<System.String, System.Object>.System.Collections.IDictionary.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#GetEnumerator
    name: System.Collections.IDictionary.GetEnumerator
    nameWithType: ConcurrentDictionary(Of String, Object).System.Collections.IDictionary.GetEnumerator
    fullName: System.Collections.Concurrent.ConcurrentDictionary(Of System.String, System.Object).System.Collections.IDictionary.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.System#Collections#IDictionary#Remove(System.Object)
  commentId: M:System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.System#Collections#IDictionary#Remove(System.Object)
  parent: System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}
  definition: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Remove(System.Object)
  name: IDictionary.Remove(Object)
  nameWithType: ConcurrentDictionary<String, Object>.IDictionary.Remove(Object)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<System.String, System.Object>.System.Collections.IDictionary.Remove(System.Object)
  nameWithType.vb: ConcurrentDictionary(Of String, Object).System.Collections.IDictionary.Remove(Object)
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of System.String, System.Object).System.Collections.IDictionary.Remove(System.Object)
  name.vb: System.Collections.IDictionary.Remove(Object)
  spec.csharp:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Remove(System.Object)
    name: IDictionary.Remove
    nameWithType: ConcurrentDictionary<String, Object>.IDictionary.Remove
    fullName: System.Collections.Concurrent.ConcurrentDictionary<System.String, System.Object>.System.Collections.IDictionary.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Remove(System.Object)
    name: System.Collections.IDictionary.Remove
    nameWithType: ConcurrentDictionary(Of String, Object).System.Collections.IDictionary.Remove
    fullName: System.Collections.Concurrent.ConcurrentDictionary(Of System.String, System.Object).System.Collections.IDictionary.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.System#Collections#IEnumerable#GetEnumerator
  commentId: M:System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.System#Collections#IEnumerable#GetEnumerator
  parent: System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}
  definition: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IEnumerable#GetEnumerator
  name: IEnumerable.GetEnumerator()
  nameWithType: ConcurrentDictionary<String, Object>.IEnumerable.GetEnumerator()
  fullName: System.Collections.Concurrent.ConcurrentDictionary<System.String, System.Object>.System.Collections.IEnumerable.GetEnumerator()
  nameWithType.vb: ConcurrentDictionary(Of String, Object).System.Collections.IEnumerable.GetEnumerator()
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of System.String, System.Object).System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IEnumerable#GetEnumerator
    name: IEnumerable.GetEnumerator
    nameWithType: ConcurrentDictionary<String, Object>.IEnumerable.GetEnumerator
    fullName: System.Collections.Concurrent.ConcurrentDictionary<System.String, System.Object>.System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IEnumerable#GetEnumerator
    name: System.Collections.IEnumerable.GetEnumerator
    nameWithType: ConcurrentDictionary(Of String, Object).System.Collections.IEnumerable.GetEnumerator
    fullName: System.Collections.Concurrent.ConcurrentDictionary(Of System.String, System.Object).System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.ToArray
  commentId: M:System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.ToArray
  parent: System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}
  definition: System.Collections.Concurrent.ConcurrentDictionary`2.ToArray
  name: ToArray()
  nameWithType: ConcurrentDictionary<String, Object>.ToArray()
  fullName: System.Collections.Concurrent.ConcurrentDictionary<System.String, System.Object>.ToArray()
  nameWithType.vb: ConcurrentDictionary(Of String, Object).ToArray()
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of System.String, System.Object).ToArray()
  spec.csharp:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2.ToArray
    name: ToArray
    nameWithType: ConcurrentDictionary<String, Object>.ToArray
    fullName: System.Collections.Concurrent.ConcurrentDictionary<System.String, System.Object>.ToArray
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2.ToArray
    name: ToArray
    nameWithType: ConcurrentDictionary(Of String, Object).ToArray
    fullName: System.Collections.Concurrent.ConcurrentDictionary(Of System.String, System.Object).ToArray
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.TryAdd(System.String,System.Object)
  commentId: M:System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.TryAdd(System.String,System.Object)
  parent: System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}
  definition: System.Collections.Concurrent.ConcurrentDictionary`2.TryAdd(`0,`1)
  name: TryAdd(String, Object)
  nameWithType: ConcurrentDictionary<String, Object>.TryAdd(String, Object)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<System.String, System.Object>.TryAdd(System.String, System.Object)
  nameWithType.vb: ConcurrentDictionary(Of String, Object).TryAdd(String, Object)
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of System.String, System.Object).TryAdd(System.String, System.Object)
  spec.csharp:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2.TryAdd(`0,`1)
    name: TryAdd
    nameWithType: ConcurrentDictionary<String, Object>.TryAdd
    fullName: System.Collections.Concurrent.ConcurrentDictionary<System.String, System.Object>.TryAdd
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2.TryAdd(`0,`1)
    name: TryAdd
    nameWithType: ConcurrentDictionary(Of String, Object).TryAdd
    fullName: System.Collections.Concurrent.ConcurrentDictionary(Of System.String, System.Object).TryAdd
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.TryGetValue(System.String,System.Object@)
  commentId: M:System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.TryGetValue(System.String,System.Object@)
  parent: System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}
  definition: System.Collections.Concurrent.ConcurrentDictionary`2.TryGetValue(`0,`1@)
  name: TryGetValue(String, Object)
  nameWithType: ConcurrentDictionary<String, Object>.TryGetValue(String, Object)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<System.String, System.Object>.TryGetValue(System.String, System.Object)
  nameWithType.vb: ConcurrentDictionary(Of String, Object).TryGetValue(String, Object)
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of System.String, System.Object).TryGetValue(System.String, System.Object)
  spec.csharp:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2.TryGetValue(`0,`1@)
    name: TryGetValue
    nameWithType: ConcurrentDictionary<String, Object>.TryGetValue
    fullName: System.Collections.Concurrent.ConcurrentDictionary<System.String, System.Object>.TryGetValue
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2.TryGetValue(`0,`1@)
    name: TryGetValue
    nameWithType: ConcurrentDictionary(Of String, Object).TryGetValue
    fullName: System.Collections.Concurrent.ConcurrentDictionary(Of System.String, System.Object).TryGetValue
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.TryRemove(System.String,System.Object@)
  commentId: M:System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.TryRemove(System.String,System.Object@)
  parent: System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}
  definition: System.Collections.Concurrent.ConcurrentDictionary`2.TryRemove(`0,`1@)
  name: TryRemove(String, Object)
  nameWithType: ConcurrentDictionary<String, Object>.TryRemove(String, Object)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<System.String, System.Object>.TryRemove(System.String, System.Object)
  nameWithType.vb: ConcurrentDictionary(Of String, Object).TryRemove(String, Object)
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of System.String, System.Object).TryRemove(System.String, System.Object)
  spec.csharp:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2.TryRemove(`0,`1@)
    name: TryRemove
    nameWithType: ConcurrentDictionary<String, Object>.TryRemove
    fullName: System.Collections.Concurrent.ConcurrentDictionary<System.String, System.Object>.TryRemove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2.TryRemove(`0,`1@)
    name: TryRemove
    nameWithType: ConcurrentDictionary(Of String, Object).TryRemove
    fullName: System.Collections.Concurrent.ConcurrentDictionary(Of System.String, System.Object).TryRemove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.TryUpdate(System.String,System.Object,System.Object)
  commentId: M:System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.TryUpdate(System.String,System.Object,System.Object)
  parent: System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}
  definition: System.Collections.Concurrent.ConcurrentDictionary`2.TryUpdate(`0,`1,`1)
  name: TryUpdate(String, Object, Object)
  nameWithType: ConcurrentDictionary<String, Object>.TryUpdate(String, Object, Object)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<System.String, System.Object>.TryUpdate(System.String, System.Object, System.Object)
  nameWithType.vb: ConcurrentDictionary(Of String, Object).TryUpdate(String, Object, Object)
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of System.String, System.Object).TryUpdate(System.String, System.Object, System.Object)
  spec.csharp:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2.TryUpdate(`0,`1,`1)
    name: TryUpdate
    nameWithType: ConcurrentDictionary<String, Object>.TryUpdate
    fullName: System.Collections.Concurrent.ConcurrentDictionary<System.String, System.Object>.TryUpdate
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2.TryUpdate(`0,`1,`1)
    name: TryUpdate
    nameWithType: ConcurrentDictionary(Of String, Object).TryUpdate
    fullName: System.Collections.Concurrent.ConcurrentDictionary(Of System.String, System.Object).TryUpdate
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.Count
  commentId: P:System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.Count
  parent: System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}
  definition: System.Collections.Concurrent.ConcurrentDictionary`2.Count
  name: Count
  nameWithType: ConcurrentDictionary<String, Object>.Count
  fullName: System.Collections.Concurrent.ConcurrentDictionary<System.String, System.Object>.Count
  nameWithType.vb: ConcurrentDictionary(Of String, Object).Count
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of System.String, System.Object).Count
- uid: System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.IsEmpty
  commentId: P:System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.IsEmpty
  parent: System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}
  definition: System.Collections.Concurrent.ConcurrentDictionary`2.IsEmpty
  name: IsEmpty
  nameWithType: ConcurrentDictionary<String, Object>.IsEmpty
  fullName: System.Collections.Concurrent.ConcurrentDictionary<System.String, System.Object>.IsEmpty
  nameWithType.vb: ConcurrentDictionary(Of String, Object).IsEmpty
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of System.String, System.Object).IsEmpty
- uid: System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.Item(System.String)
  commentId: P:System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.Item(System.String)
  parent: System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}
  definition: System.Collections.Concurrent.ConcurrentDictionary`2.Item(`0)
  name: Item[String]
  nameWithType: ConcurrentDictionary<String, Object>.Item[String]
  fullName: System.Collections.Concurrent.ConcurrentDictionary<System.String, System.Object>.Item[System.String]
  nameWithType.vb: ConcurrentDictionary(Of String, Object).Item(String)
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of System.String, System.Object).Item(System.String)
  name.vb: Item(String)
  spec.csharp:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2.Item(`0)
    name: Item
    nameWithType: ConcurrentDictionary<String, Object>.Item
    fullName: System.Collections.Concurrent.ConcurrentDictionary<System.String, System.Object>.Item
    isExternal: true
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2.Item(`0)
    name: Item
    nameWithType: ConcurrentDictionary(Of String, Object).Item
    fullName: System.Collections.Concurrent.ConcurrentDictionary(Of System.String, System.Object).Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.Keys
  commentId: P:System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.Keys
  parent: System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}
  definition: System.Collections.Concurrent.ConcurrentDictionary`2.Keys
  name: Keys
  nameWithType: ConcurrentDictionary<String, Object>.Keys
  fullName: System.Collections.Concurrent.ConcurrentDictionary<System.String, System.Object>.Keys
  nameWithType.vb: ConcurrentDictionary(Of String, Object).Keys
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of System.String, System.Object).Keys
- uid: System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#IsReadOnly
  commentId: P:System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#IsReadOnly
  parent: System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}
  definition: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#IsReadOnly
  name: ICollection<KeyValuePair<String, Object>>.IsReadOnly
  nameWithType: ConcurrentDictionary<String, Object>.ICollection<KeyValuePair<String, Object>>.IsReadOnly
  fullName: System.Collections.Concurrent.ConcurrentDictionary<System.String, System.Object>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Object>>.IsReadOnly
  nameWithType.vb: ConcurrentDictionary(Of String, Object).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.IsReadOnly
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of System.String, System.Object).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.IsReadOnly
  name.vb: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.IsReadOnly
- uid: System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Keys
  commentId: P:System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Keys
  parent: System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}
  definition: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Keys
  name: IReadOnlyDictionary<String, Object>.Keys
  nameWithType: ConcurrentDictionary<String, Object>.IReadOnlyDictionary<String, Object>.Keys
  fullName: System.Collections.Concurrent.ConcurrentDictionary<System.String, System.Object>.System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>.Keys
  nameWithType.vb: ConcurrentDictionary(Of String, Object).System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Keys
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of System.String, System.Object).System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Keys
  name.vb: System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Keys
- uid: System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Values
  commentId: P:System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Values
  parent: System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}
  definition: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Values
  name: IReadOnlyDictionary<String, Object>.Values
  nameWithType: ConcurrentDictionary<String, Object>.IReadOnlyDictionary<String, Object>.Values
  fullName: System.Collections.Concurrent.ConcurrentDictionary<System.String, System.Object>.System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>.Values
  nameWithType.vb: ConcurrentDictionary(Of String, Object).System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Values
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of System.String, System.Object).System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Values
  name.vb: System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Values
- uid: System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.System#Collections#ICollection#IsSynchronized
  commentId: P:System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.System#Collections#ICollection#IsSynchronized
  parent: System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}
  definition: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#ICollection#IsSynchronized
  name: ICollection.IsSynchronized
  nameWithType: ConcurrentDictionary<String, Object>.ICollection.IsSynchronized
  fullName: System.Collections.Concurrent.ConcurrentDictionary<System.String, System.Object>.System.Collections.ICollection.IsSynchronized
  nameWithType.vb: ConcurrentDictionary(Of String, Object).System.Collections.ICollection.IsSynchronized
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of System.String, System.Object).System.Collections.ICollection.IsSynchronized
  name.vb: System.Collections.ICollection.IsSynchronized
- uid: System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.System#Collections#ICollection#SyncRoot
  commentId: P:System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.System#Collections#ICollection#SyncRoot
  parent: System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}
  definition: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#ICollection#SyncRoot
  name: ICollection.SyncRoot
  nameWithType: ConcurrentDictionary<String, Object>.ICollection.SyncRoot
  fullName: System.Collections.Concurrent.ConcurrentDictionary<System.String, System.Object>.System.Collections.ICollection.SyncRoot
  nameWithType.vb: ConcurrentDictionary(Of String, Object).System.Collections.ICollection.SyncRoot
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of System.String, System.Object).System.Collections.ICollection.SyncRoot
  name.vb: System.Collections.ICollection.SyncRoot
- uid: System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.System#Collections#IDictionary#IsFixedSize
  commentId: P:System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.System#Collections#IDictionary#IsFixedSize
  parent: System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}
  definition: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#IsFixedSize
  name: IDictionary.IsFixedSize
  nameWithType: ConcurrentDictionary<String, Object>.IDictionary.IsFixedSize
  fullName: System.Collections.Concurrent.ConcurrentDictionary<System.String, System.Object>.System.Collections.IDictionary.IsFixedSize
  nameWithType.vb: ConcurrentDictionary(Of String, Object).System.Collections.IDictionary.IsFixedSize
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of System.String, System.Object).System.Collections.IDictionary.IsFixedSize
  name.vb: System.Collections.IDictionary.IsFixedSize
- uid: System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.System#Collections#IDictionary#IsReadOnly
  commentId: P:System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.System#Collections#IDictionary#IsReadOnly
  parent: System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}
  definition: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#IsReadOnly
  name: IDictionary.IsReadOnly
  nameWithType: ConcurrentDictionary<String, Object>.IDictionary.IsReadOnly
  fullName: System.Collections.Concurrent.ConcurrentDictionary<System.String, System.Object>.System.Collections.IDictionary.IsReadOnly
  nameWithType.vb: ConcurrentDictionary(Of String, Object).System.Collections.IDictionary.IsReadOnly
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of System.String, System.Object).System.Collections.IDictionary.IsReadOnly
  name.vb: System.Collections.IDictionary.IsReadOnly
- uid: System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.System#Collections#IDictionary#Item(System.Object)
  commentId: P:System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.System#Collections#IDictionary#Item(System.Object)
  parent: System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}
  definition: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Item(System.Object)
  name: IDictionary.Item[Object]
  nameWithType: ConcurrentDictionary<String, Object>.IDictionary.Item[Object]
  fullName: System.Collections.Concurrent.ConcurrentDictionary<System.String, System.Object>.System.Collections.IDictionary.Item[System.Object]
  nameWithType.vb: ConcurrentDictionary(Of String, Object).System.Collections.IDictionary.Item(Object)
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of System.String, System.Object).System.Collections.IDictionary.Item(System.Object)
  name.vb: System.Collections.IDictionary.Item(Object)
  spec.csharp:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Item(System.Object)
    name: IDictionary.Item
    nameWithType: ConcurrentDictionary<String, Object>.IDictionary.Item
    fullName: System.Collections.Concurrent.ConcurrentDictionary<System.String, System.Object>.System.Collections.IDictionary.Item
    isExternal: true
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Item(System.Object)
    name: System.Collections.IDictionary.Item
    nameWithType: ConcurrentDictionary(Of String, Object).System.Collections.IDictionary.Item
    fullName: System.Collections.Concurrent.ConcurrentDictionary(Of System.String, System.Object).System.Collections.IDictionary.Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.System#Collections#IDictionary#Keys
  commentId: P:System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.System#Collections#IDictionary#Keys
  parent: System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}
  definition: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Keys
  name: IDictionary.Keys
  nameWithType: ConcurrentDictionary<String, Object>.IDictionary.Keys
  fullName: System.Collections.Concurrent.ConcurrentDictionary<System.String, System.Object>.System.Collections.IDictionary.Keys
  nameWithType.vb: ConcurrentDictionary(Of String, Object).System.Collections.IDictionary.Keys
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of System.String, System.Object).System.Collections.IDictionary.Keys
  name.vb: System.Collections.IDictionary.Keys
- uid: System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.System#Collections#IDictionary#Values
  commentId: P:System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.System#Collections#IDictionary#Values
  parent: System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}
  definition: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Values
  name: IDictionary.Values
  nameWithType: ConcurrentDictionary<String, Object>.IDictionary.Values
  fullName: System.Collections.Concurrent.ConcurrentDictionary<System.String, System.Object>.System.Collections.IDictionary.Values
  nameWithType.vb: ConcurrentDictionary(Of String, Object).System.Collections.IDictionary.Values
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of System.String, System.Object).System.Collections.IDictionary.Values
  name.vb: System.Collections.IDictionary.Values
- uid: System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.Values
  commentId: P:System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}.Values
  parent: System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}
  definition: System.Collections.Concurrent.ConcurrentDictionary`2.Values
  name: Values
  nameWithType: ConcurrentDictionary<String, Object>.Values
  fullName: System.Collections.Concurrent.ConcurrentDictionary<System.String, System.Object>.Values
  nameWithType.vb: ConcurrentDictionary(Of String, Object).Values
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of System.String, System.Object).Values
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.OSharp.Collections.CollectionExtensions.AddIf``1(System.Collections.Generic.KeyValuePair{System.String,System.Object},System.Boolean)
  commentId: M:OSharp.Collections.CollectionExtensions.AddIf``1(System.Collections.Generic.ICollection{``0},``0,System.Boolean)
  parent: OSharp.Collections.CollectionExtensions
  definition: OSharp.Collections.CollectionExtensions.AddIf``1(System.Collections.Generic.ICollection{``0},``0,System.Boolean)
  name: AddIf<KeyValuePair<String, Object>>(KeyValuePair<String, Object>, Boolean)
  nameWithType: CollectionExtensions.AddIf<KeyValuePair<String, Object>>(KeyValuePair<String, Object>, Boolean)
  fullName: OSharp.Collections.CollectionExtensions.AddIf<System.Collections.Generic.KeyValuePair<System.String, System.Object>>(System.Collections.Generic.KeyValuePair<System.String, System.Object>, System.Boolean)
  nameWithType.vb: CollectionExtensions.AddIf(Of KeyValuePair(Of String, Object))(KeyValuePair(Of String, Object), Boolean)
  fullName.vb: OSharp.Collections.CollectionExtensions.AddIf(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object))(System.Collections.Generic.KeyValuePair(Of System.String, System.Object), System.Boolean)
  name.vb: AddIf(Of KeyValuePair(Of String, Object))(KeyValuePair(Of String, Object), Boolean)
  spec.csharp:
  - uid: OSharp.Collections.CollectionExtensions.AddIf``1(``0,System.Boolean)
    name: AddIf<KeyValuePair<String, Object>>
    nameWithType: CollectionExtensions.AddIf<KeyValuePair<String, Object>>
    fullName: OSharp.Collections.CollectionExtensions.AddIf<System.Collections.Generic.KeyValuePair<System.String, System.Object>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Collections.CollectionExtensions.AddIf``1(``0,System.Boolean)
    name: AddIf(Of KeyValuePair(Of String, Object))
    nameWithType: CollectionExtensions.AddIf(Of KeyValuePair(Of String, Object))
    fullName: OSharp.Collections.CollectionExtensions.AddIf(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object))
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.OSharp.Collections.CollectionExtensions.AddIf``1(System.Collections.Generic.KeyValuePair{System.String,System.Object},System.Func{System.Boolean})
  commentId: M:OSharp.Collections.CollectionExtensions.AddIf``1(System.Collections.Generic.ICollection{``0},``0,System.Func{System.Boolean})
  parent: OSharp.Collections.CollectionExtensions
  definition: OSharp.Collections.CollectionExtensions.AddIf``1(System.Collections.Generic.ICollection{``0},``0,System.Func{System.Boolean})
  name: AddIf<KeyValuePair<String, Object>>(KeyValuePair<String, Object>, Func<Boolean>)
  nameWithType: CollectionExtensions.AddIf<KeyValuePair<String, Object>>(KeyValuePair<String, Object>, Func<Boolean>)
  fullName: OSharp.Collections.CollectionExtensions.AddIf<System.Collections.Generic.KeyValuePair<System.String, System.Object>>(System.Collections.Generic.KeyValuePair<System.String, System.Object>, System.Func<System.Boolean>)
  nameWithType.vb: CollectionExtensions.AddIf(Of KeyValuePair(Of String, Object))(KeyValuePair(Of String, Object), Func(Of Boolean))
  fullName.vb: OSharp.Collections.CollectionExtensions.AddIf(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object))(System.Collections.Generic.KeyValuePair(Of System.String, System.Object), System.Func(Of System.Boolean))
  name.vb: AddIf(Of KeyValuePair(Of String, Object))(KeyValuePair(Of String, Object), Func(Of Boolean))
  spec.csharp:
  - uid: OSharp.Collections.CollectionExtensions.AddIf``1(``0,System.Func{System.Boolean})
    name: AddIf<KeyValuePair<String, Object>>
    nameWithType: CollectionExtensions.AddIf<KeyValuePair<String, Object>>
    fullName: OSharp.Collections.CollectionExtensions.AddIf<System.Collections.Generic.KeyValuePair<System.String, System.Object>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Collections.CollectionExtensions.AddIf``1(``0,System.Func{System.Boolean})
    name: AddIf(Of KeyValuePair(Of String, Object))
    nameWithType: CollectionExtensions.AddIf(Of KeyValuePair(Of String, Object))
    fullName: OSharp.Collections.CollectionExtensions.AddIf(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object))
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.OSharp.Collections.CollectionExtensions.AddIfNotExist``1(System.Collections.Generic.KeyValuePair{System.String,System.Object},System.Func{System.Collections.Generic.KeyValuePair{System.String,System.Object},System.Boolean})
  commentId: M:OSharp.Collections.CollectionExtensions.AddIfNotExist``1(System.Collections.Generic.ICollection{``0},``0,System.Func{``0,System.Boolean})
  parent: OSharp.Collections.CollectionExtensions
  definition: OSharp.Collections.CollectionExtensions.AddIfNotExist``1(System.Collections.Generic.ICollection{``0},``0,System.Func{``0,System.Boolean})
  name: AddIfNotExist<KeyValuePair<String, Object>>(KeyValuePair<String, Object>, Func<KeyValuePair<String, Object>, Boolean>)
  nameWithType: CollectionExtensions.AddIfNotExist<KeyValuePair<String, Object>>(KeyValuePair<String, Object>, Func<KeyValuePair<String, Object>, Boolean>)
  fullName: OSharp.Collections.CollectionExtensions.AddIfNotExist<System.Collections.Generic.KeyValuePair<System.String, System.Object>>(System.Collections.Generic.KeyValuePair<System.String, System.Object>, System.Func<System.Collections.Generic.KeyValuePair<System.String, System.Object>, System.Boolean>)
  nameWithType.vb: CollectionExtensions.AddIfNotExist(Of KeyValuePair(Of String, Object))(KeyValuePair(Of String, Object), Func(Of KeyValuePair(Of String, Object), Boolean))
  fullName.vb: OSharp.Collections.CollectionExtensions.AddIfNotExist(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object))(System.Collections.Generic.KeyValuePair(Of System.String, System.Object), System.Func(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object), System.Boolean))
  name.vb: AddIfNotExist(Of KeyValuePair(Of String, Object))(KeyValuePair(Of String, Object), Func(Of KeyValuePair(Of String, Object), Boolean))
  spec.csharp:
  - uid: OSharp.Collections.CollectionExtensions.AddIfNotExist``1(``0,System.Func{``0,System.Boolean})
    name: AddIfNotExist<KeyValuePair<String, Object>>
    nameWithType: CollectionExtensions.AddIfNotExist<KeyValuePair<String, Object>>
    fullName: OSharp.Collections.CollectionExtensions.AddIfNotExist<System.Collections.Generic.KeyValuePair<System.String, System.Object>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Collections.CollectionExtensions.AddIfNotExist``1(``0,System.Func{``0,System.Boolean})
    name: AddIfNotExist(Of KeyValuePair(Of String, Object))
    nameWithType: CollectionExtensions.AddIfNotExist(Of KeyValuePair(Of String, Object))
    fullName: OSharp.Collections.CollectionExtensions.AddIfNotExist(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object))
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.OSharp.Collections.CollectionExtensions.GetOrAdd``1(System.Func{System.Collections.Generic.KeyValuePair{System.String,System.Object},System.Boolean},System.Func{System.Collections.Generic.KeyValuePair{System.String,System.Object}})
  commentId: M:OSharp.Collections.CollectionExtensions.GetOrAdd``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Boolean},System.Func{``0})
  parent: OSharp.Collections.CollectionExtensions
  definition: OSharp.Collections.CollectionExtensions.GetOrAdd``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Boolean},System.Func{``0})
  name: GetOrAdd<KeyValuePair<String, Object>>(Func<KeyValuePair<String, Object>, Boolean>, Func<KeyValuePair<String, Object>>)
  nameWithType: CollectionExtensions.GetOrAdd<KeyValuePair<String, Object>>(Func<KeyValuePair<String, Object>, Boolean>, Func<KeyValuePair<String, Object>>)
  fullName: OSharp.Collections.CollectionExtensions.GetOrAdd<System.Collections.Generic.KeyValuePair<System.String, System.Object>>(System.Func<System.Collections.Generic.KeyValuePair<System.String, System.Object>, System.Boolean>, System.Func<System.Collections.Generic.KeyValuePair<System.String, System.Object>>)
  nameWithType.vb: CollectionExtensions.GetOrAdd(Of KeyValuePair(Of String, Object))(Func(Of KeyValuePair(Of String, Object), Boolean), Func(Of KeyValuePair(Of String, Object)))
  fullName.vb: OSharp.Collections.CollectionExtensions.GetOrAdd(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object))(System.Func(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object), System.Boolean), System.Func(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object)))
  name.vb: GetOrAdd(Of KeyValuePair(Of String, Object))(Func(Of KeyValuePair(Of String, Object), Boolean), Func(Of KeyValuePair(Of String, Object)))
  spec.csharp:
  - uid: OSharp.Collections.CollectionExtensions.GetOrAdd``1(System.Func{``0,System.Boolean},System.Func{``0})
    name: GetOrAdd<KeyValuePair<String, Object>>
    nameWithType: CollectionExtensions.GetOrAdd<KeyValuePair<String, Object>>
    fullName: OSharp.Collections.CollectionExtensions.GetOrAdd<System.Collections.Generic.KeyValuePair<System.String, System.Object>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Collections.CollectionExtensions.GetOrAdd``1(System.Func{``0,System.Boolean},System.Func{``0})
    name: GetOrAdd(Of KeyValuePair(Of String, Object))
    nameWithType: CollectionExtensions.GetOrAdd(Of KeyValuePair(Of String, Object))
    fullName: OSharp.Collections.CollectionExtensions.GetOrAdd(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object))
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.OSharp.Collections.CollectionExtensions.IsNullOrEmpty``1
  commentId: M:OSharp.Collections.CollectionExtensions.IsNullOrEmpty``1(System.Collections.Generic.ICollection{``0})
  parent: OSharp.Collections.CollectionExtensions
  definition: OSharp.Collections.CollectionExtensions.IsNullOrEmpty``1(System.Collections.Generic.ICollection{``0})
  name: IsNullOrEmpty<KeyValuePair<String, Object>>()
  nameWithType: CollectionExtensions.IsNullOrEmpty<KeyValuePair<String, Object>>()
  fullName: OSharp.Collections.CollectionExtensions.IsNullOrEmpty<System.Collections.Generic.KeyValuePair<System.String, System.Object>>()
  nameWithType.vb: CollectionExtensions.IsNullOrEmpty(Of KeyValuePair(Of String, Object))()
  fullName.vb: OSharp.Collections.CollectionExtensions.IsNullOrEmpty(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object))()
  name.vb: IsNullOrEmpty(Of KeyValuePair(Of String, Object))()
  spec.csharp:
  - uid: OSharp.Collections.CollectionExtensions.IsNullOrEmpty``1
    name: IsNullOrEmpty<KeyValuePair<String, Object>>
    nameWithType: CollectionExtensions.IsNullOrEmpty<KeyValuePair<String, Object>>
    fullName: OSharp.Collections.CollectionExtensions.IsNullOrEmpty<System.Collections.Generic.KeyValuePair<System.String, System.Object>>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Collections.CollectionExtensions.IsNullOrEmpty``1
    name: IsNullOrEmpty(Of KeyValuePair(Of String, Object))
    nameWithType: CollectionExtensions.IsNullOrEmpty(Of KeyValuePair(Of String, Object))
    fullName: OSharp.Collections.CollectionExtensions.IsNullOrEmpty(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object))
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.OSharp.Collections.EnumerableExtensions.Shuffle``1
  commentId: M:OSharp.Collections.EnumerableExtensions.Shuffle``1(System.Collections.Generic.IEnumerable{``0})
  parent: OSharp.Collections.EnumerableExtensions
  definition: OSharp.Collections.EnumerableExtensions.Shuffle``1(System.Collections.Generic.IEnumerable{``0})
  name: Shuffle<KeyValuePair<String, Object>>()
  nameWithType: EnumerableExtensions.Shuffle<KeyValuePair<String, Object>>()
  fullName: OSharp.Collections.EnumerableExtensions.Shuffle<System.Collections.Generic.KeyValuePair<System.String, System.Object>>()
  nameWithType.vb: EnumerableExtensions.Shuffle(Of KeyValuePair(Of String, Object))()
  fullName.vb: OSharp.Collections.EnumerableExtensions.Shuffle(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object))()
  name.vb: Shuffle(Of KeyValuePair(Of String, Object))()
  spec.csharp:
  - uid: OSharp.Collections.EnumerableExtensions.Shuffle``1
    name: Shuffle<KeyValuePair<String, Object>>
    nameWithType: EnumerableExtensions.Shuffle<KeyValuePair<String, Object>>
    fullName: OSharp.Collections.EnumerableExtensions.Shuffle<System.Collections.Generic.KeyValuePair<System.String, System.Object>>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Collections.EnumerableExtensions.Shuffle``1
    name: Shuffle(Of KeyValuePair(Of String, Object))
    nameWithType: EnumerableExtensions.Shuffle(Of KeyValuePair(Of String, Object))
    fullName: OSharp.Collections.EnumerableExtensions.Shuffle(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object))
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.OSharp.Collections.EnumerableExtensions.ExpandAndToString``1(System.String)
  commentId: M:OSharp.Collections.EnumerableExtensions.ExpandAndToString``1(System.Collections.Generic.IEnumerable{``0},System.String)
  parent: OSharp.Collections.EnumerableExtensions
  definition: OSharp.Collections.EnumerableExtensions.ExpandAndToString``1(System.Collections.Generic.IEnumerable{``0},System.String)
  name: ExpandAndToString<KeyValuePair<String, Object>>(String)
  nameWithType: EnumerableExtensions.ExpandAndToString<KeyValuePair<String, Object>>(String)
  fullName: OSharp.Collections.EnumerableExtensions.ExpandAndToString<System.Collections.Generic.KeyValuePair<System.String, System.Object>>(System.String)
  nameWithType.vb: EnumerableExtensions.ExpandAndToString(Of KeyValuePair(Of String, Object))(String)
  fullName.vb: OSharp.Collections.EnumerableExtensions.ExpandAndToString(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object))(System.String)
  name.vb: ExpandAndToString(Of KeyValuePair(Of String, Object))(String)
  spec.csharp:
  - uid: OSharp.Collections.EnumerableExtensions.ExpandAndToString``1(System.String)
    name: ExpandAndToString<KeyValuePair<String, Object>>
    nameWithType: EnumerableExtensions.ExpandAndToString<KeyValuePair<String, Object>>
    fullName: OSharp.Collections.EnumerableExtensions.ExpandAndToString<System.Collections.Generic.KeyValuePair<System.String, System.Object>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Collections.EnumerableExtensions.ExpandAndToString``1(System.String)
    name: ExpandAndToString(Of KeyValuePair(Of String, Object))
    nameWithType: EnumerableExtensions.ExpandAndToString(Of KeyValuePair(Of String, Object))
    fullName: OSharp.Collections.EnumerableExtensions.ExpandAndToString(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object))
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.OSharp.Collections.EnumerableExtensions.ExpandAndToString``1(System.Func{System.Collections.Generic.KeyValuePair{System.String,System.Object},System.String},System.String)
  commentId: M:OSharp.Collections.EnumerableExtensions.ExpandAndToString``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.String)
  parent: OSharp.Collections.EnumerableExtensions
  definition: OSharp.Collections.EnumerableExtensions.ExpandAndToString``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.String)
  name: ExpandAndToString<KeyValuePair<String, Object>>(Func<KeyValuePair<String, Object>, String>, String)
  nameWithType: EnumerableExtensions.ExpandAndToString<KeyValuePair<String, Object>>(Func<KeyValuePair<String, Object>, String>, String)
  fullName: OSharp.Collections.EnumerableExtensions.ExpandAndToString<System.Collections.Generic.KeyValuePair<System.String, System.Object>>(System.Func<System.Collections.Generic.KeyValuePair<System.String, System.Object>, System.String>, System.String)
  nameWithType.vb: EnumerableExtensions.ExpandAndToString(Of KeyValuePair(Of String, Object))(Func(Of KeyValuePair(Of String, Object), String), String)
  fullName.vb: OSharp.Collections.EnumerableExtensions.ExpandAndToString(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object))(System.Func(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object), System.String), System.String)
  name.vb: ExpandAndToString(Of KeyValuePair(Of String, Object))(Func(Of KeyValuePair(Of String, Object), String), String)
  spec.csharp:
  - uid: OSharp.Collections.EnumerableExtensions.ExpandAndToString``1(System.Func{``0,System.String},System.String)
    name: ExpandAndToString<KeyValuePair<String, Object>>
    nameWithType: EnumerableExtensions.ExpandAndToString<KeyValuePair<String, Object>>
    fullName: OSharp.Collections.EnumerableExtensions.ExpandAndToString<System.Collections.Generic.KeyValuePair<System.String, System.Object>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Collections.EnumerableExtensions.ExpandAndToString``1(System.Func{``0,System.String},System.String)
    name: ExpandAndToString(Of KeyValuePair(Of String, Object))
    nameWithType: EnumerableExtensions.ExpandAndToString(Of KeyValuePair(Of String, Object))
    fullName: OSharp.Collections.EnumerableExtensions.ExpandAndToString(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object))
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.OSharp.Collections.EnumerableExtensions.IsEmpty``1
  commentId: M:OSharp.Collections.EnumerableExtensions.IsEmpty``1(System.Collections.Generic.IEnumerable{``0})
  parent: OSharp.Collections.EnumerableExtensions
  definition: OSharp.Collections.EnumerableExtensions.IsEmpty``1(System.Collections.Generic.IEnumerable{``0})
  name: IsEmpty<KeyValuePair<String, Object>>()
  nameWithType: EnumerableExtensions.IsEmpty<KeyValuePair<String, Object>>()
  fullName: OSharp.Collections.EnumerableExtensions.IsEmpty<System.Collections.Generic.KeyValuePair<System.String, System.Object>>()
  nameWithType.vb: EnumerableExtensions.IsEmpty(Of KeyValuePair(Of String, Object))()
  fullName.vb: OSharp.Collections.EnumerableExtensions.IsEmpty(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object))()
  name.vb: IsEmpty(Of KeyValuePair(Of String, Object))()
  spec.csharp:
  - uid: OSharp.Collections.EnumerableExtensions.IsEmpty``1
    name: IsEmpty<KeyValuePair<String, Object>>
    nameWithType: EnumerableExtensions.IsEmpty<KeyValuePair<String, Object>>
    fullName: OSharp.Collections.EnumerableExtensions.IsEmpty<System.Collections.Generic.KeyValuePair<System.String, System.Object>>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Collections.EnumerableExtensions.IsEmpty``1
    name: IsEmpty(Of KeyValuePair(Of String, Object))
    nameWithType: EnumerableExtensions.IsEmpty(Of KeyValuePair(Of String, Object))
    fullName: OSharp.Collections.EnumerableExtensions.IsEmpty(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object))
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.OSharp.Collections.EnumerableExtensions.WhereIf``1(System.Func{System.Collections.Generic.KeyValuePair{System.String,System.Object},System.Boolean},System.Boolean)
  commentId: M:OSharp.Collections.EnumerableExtensions.WhereIf``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Boolean)
  parent: OSharp.Collections.EnumerableExtensions
  definition: OSharp.Collections.EnumerableExtensions.WhereIf``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Boolean)
  name: WhereIf<KeyValuePair<String, Object>>(Func<KeyValuePair<String, Object>, Boolean>, Boolean)
  nameWithType: EnumerableExtensions.WhereIf<KeyValuePair<String, Object>>(Func<KeyValuePair<String, Object>, Boolean>, Boolean)
  fullName: OSharp.Collections.EnumerableExtensions.WhereIf<System.Collections.Generic.KeyValuePair<System.String, System.Object>>(System.Func<System.Collections.Generic.KeyValuePair<System.String, System.Object>, System.Boolean>, System.Boolean)
  nameWithType.vb: EnumerableExtensions.WhereIf(Of KeyValuePair(Of String, Object))(Func(Of KeyValuePair(Of String, Object), Boolean), Boolean)
  fullName.vb: OSharp.Collections.EnumerableExtensions.WhereIf(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object))(System.Func(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object), System.Boolean), System.Boolean)
  name.vb: WhereIf(Of KeyValuePair(Of String, Object))(Func(Of KeyValuePair(Of String, Object), Boolean), Boolean)
  spec.csharp:
  - uid: OSharp.Collections.EnumerableExtensions.WhereIf``1(System.Func{``0,System.Boolean},System.Boolean)
    name: WhereIf<KeyValuePair<String, Object>>
    nameWithType: EnumerableExtensions.WhereIf<KeyValuePair<String, Object>>
    fullName: OSharp.Collections.EnumerableExtensions.WhereIf<System.Collections.Generic.KeyValuePair<System.String, System.Object>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Collections.EnumerableExtensions.WhereIf``1(System.Func{``0,System.Boolean},System.Boolean)
    name: WhereIf(Of KeyValuePair(Of String, Object))
    nameWithType: EnumerableExtensions.WhereIf(Of KeyValuePair(Of String, Object))
    fullName: OSharp.Collections.EnumerableExtensions.WhereIf(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object))
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.OSharp.Collections.EnumerableExtensions.OrderByPrefixes``1(System.Func{System.Collections.Generic.KeyValuePair{System.String,System.Object},System.String},System.String[])
  commentId: M:OSharp.Collections.EnumerableExtensions.OrderByPrefixes``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.String[])
  parent: OSharp.Collections.EnumerableExtensions
  definition: OSharp.Collections.EnumerableExtensions.OrderByPrefixes``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.String[])
  name: OrderByPrefixes<KeyValuePair<String, Object>>(Func<KeyValuePair<String, Object>, String>, String[])
  nameWithType: EnumerableExtensions.OrderByPrefixes<KeyValuePair<String, Object>>(Func<KeyValuePair<String, Object>, String>, String[])
  fullName: OSharp.Collections.EnumerableExtensions.OrderByPrefixes<System.Collections.Generic.KeyValuePair<System.String, System.Object>>(System.Func<System.Collections.Generic.KeyValuePair<System.String, System.Object>, System.String>, System.String[])
  nameWithType.vb: EnumerableExtensions.OrderByPrefixes(Of KeyValuePair(Of String, Object))(Func(Of KeyValuePair(Of String, Object), String), String())
  fullName.vb: OSharp.Collections.EnumerableExtensions.OrderByPrefixes(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object))(System.Func(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object), System.String), System.String())
  name.vb: OrderByPrefixes(Of KeyValuePair(Of String, Object))(Func(Of KeyValuePair(Of String, Object), String), String())
  spec.csharp:
  - uid: OSharp.Collections.EnumerableExtensions.OrderByPrefixes``1(System.Func{``0,System.String},System.String[])
    name: OrderByPrefixes<KeyValuePair<String, Object>>
    nameWithType: EnumerableExtensions.OrderByPrefixes<KeyValuePair<String, Object>>
    fullName: OSharp.Collections.EnumerableExtensions.OrderByPrefixes<System.Collections.Generic.KeyValuePair<System.String, System.Object>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Collections.EnumerableExtensions.OrderByPrefixes``1(System.Func{``0,System.String},System.String[])
    name: OrderByPrefixes(Of KeyValuePair(Of String, Object))
    nameWithType: EnumerableExtensions.OrderByPrefixes(Of KeyValuePair(Of String, Object))
    fullName: OSharp.Collections.EnumerableExtensions.OrderByPrefixes(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object))
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.OSharp.Collections.EnumerableExtensions.DistinctBy``2(System.Func{System.Collections.Generic.KeyValuePair{System.String,System.Object},{TKey}})
  commentId: M:OSharp.Collections.EnumerableExtensions.DistinctBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  parent: OSharp.Collections.EnumerableExtensions
  definition: OSharp.Collections.EnumerableExtensions.DistinctBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  name: DistinctBy<KeyValuePair<String, Object>, TKey>(Func<KeyValuePair<String, Object>, TKey>)
  nameWithType: EnumerableExtensions.DistinctBy<KeyValuePair<String, Object>, TKey>(Func<KeyValuePair<String, Object>, TKey>)
  fullName: OSharp.Collections.EnumerableExtensions.DistinctBy<System.Collections.Generic.KeyValuePair<System.String, System.Object>, TKey>(System.Func<System.Collections.Generic.KeyValuePair<System.String, System.Object>, TKey>)
  nameWithType.vb: EnumerableExtensions.DistinctBy(Of KeyValuePair(Of String, Object), TKey)(Func(Of KeyValuePair(Of String, Object), TKey))
  fullName.vb: OSharp.Collections.EnumerableExtensions.DistinctBy(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object), TKey)(System.Func(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object), TKey))
  name.vb: DistinctBy(Of KeyValuePair(Of String, Object), TKey)(Func(Of KeyValuePair(Of String, Object), TKey))
  spec.csharp:
  - uid: OSharp.Collections.EnumerableExtensions.DistinctBy``2(System.Func{``0,``1})
    name: DistinctBy<KeyValuePair<String, Object>, TKey>
    nameWithType: EnumerableExtensions.DistinctBy<KeyValuePair<String, Object>, TKey>
    fullName: OSharp.Collections.EnumerableExtensions.DistinctBy<System.Collections.Generic.KeyValuePair<System.String, System.Object>, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Collections.EnumerableExtensions.DistinctBy``2(System.Func{``0,``1})
    name: DistinctBy(Of KeyValuePair(Of String, Object), TKey)
    nameWithType: EnumerableExtensions.DistinctBy(Of KeyValuePair(Of String, Object), TKey)
    fullName: OSharp.Collections.EnumerableExtensions.DistinctBy(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object), TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.OSharp.Collections.EnumerableExtensions.OrderBy``1(System.String,System.ComponentModel.ListSortDirection)
  commentId: M:OSharp.Collections.EnumerableExtensions.OrderBy``1(System.Collections.Generic.IEnumerable{``0},System.String,System.ComponentModel.ListSortDirection)
  parent: OSharp.Collections.EnumerableExtensions
  definition: OSharp.Collections.EnumerableExtensions.OrderBy``1(System.Collections.Generic.IEnumerable{``0},System.String,System.ComponentModel.ListSortDirection)
  name: OrderBy<KeyValuePair<String, Object>>(String, ListSortDirection)
  nameWithType: EnumerableExtensions.OrderBy<KeyValuePair<String, Object>>(String, ListSortDirection)
  fullName: OSharp.Collections.EnumerableExtensions.OrderBy<System.Collections.Generic.KeyValuePair<System.String, System.Object>>(System.String, System.ComponentModel.ListSortDirection)
  nameWithType.vb: EnumerableExtensions.OrderBy(Of KeyValuePair(Of String, Object))(String, ListSortDirection)
  fullName.vb: OSharp.Collections.EnumerableExtensions.OrderBy(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object))(System.String, System.ComponentModel.ListSortDirection)
  name.vb: OrderBy(Of KeyValuePair(Of String, Object))(String, ListSortDirection)
  spec.csharp:
  - uid: OSharp.Collections.EnumerableExtensions.OrderBy``1(System.String,System.ComponentModel.ListSortDirection)
    name: OrderBy<KeyValuePair<String, Object>>
    nameWithType: EnumerableExtensions.OrderBy<KeyValuePair<String, Object>>
    fullName: OSharp.Collections.EnumerableExtensions.OrderBy<System.Collections.Generic.KeyValuePair<System.String, System.Object>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.ComponentModel.ListSortDirection
    name: ListSortDirection
    nameWithType: ListSortDirection
    fullName: System.ComponentModel.ListSortDirection
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Collections.EnumerableExtensions.OrderBy``1(System.String,System.ComponentModel.ListSortDirection)
    name: OrderBy(Of KeyValuePair(Of String, Object))
    nameWithType: EnumerableExtensions.OrderBy(Of KeyValuePair(Of String, Object))
    fullName: OSharp.Collections.EnumerableExtensions.OrderBy(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object))
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.ComponentModel.ListSortDirection
    name: ListSortDirection
    nameWithType: ListSortDirection
    fullName: System.ComponentModel.ListSortDirection
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.OSharp.Collections.EnumerableExtensions.OrderBy``1(OSharp.Filter.SortCondition)
  commentId: M:OSharp.Collections.EnumerableExtensions.OrderBy``1(System.Collections.Generic.IEnumerable{``0},OSharp.Filter.SortCondition)
  parent: OSharp.Collections.EnumerableExtensions
  definition: OSharp.Collections.EnumerableExtensions.OrderBy``1(System.Collections.Generic.IEnumerable{``0},OSharp.Filter.SortCondition)
  name: OrderBy<KeyValuePair<String, Object>>(SortCondition)
  nameWithType: EnumerableExtensions.OrderBy<KeyValuePair<String, Object>>(SortCondition)
  fullName: OSharp.Collections.EnumerableExtensions.OrderBy<System.Collections.Generic.KeyValuePair<System.String, System.Object>>(OSharp.Filter.SortCondition)
  nameWithType.vb: EnumerableExtensions.OrderBy(Of KeyValuePair(Of String, Object))(SortCondition)
  fullName.vb: OSharp.Collections.EnumerableExtensions.OrderBy(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object))(OSharp.Filter.SortCondition)
  name.vb: OrderBy(Of KeyValuePair(Of String, Object))(SortCondition)
  spec.csharp:
  - uid: OSharp.Collections.EnumerableExtensions.OrderBy``1(OSharp.Filter.SortCondition)
    name: OrderBy<KeyValuePair<String, Object>>
    nameWithType: EnumerableExtensions.OrderBy<KeyValuePair<String, Object>>
    fullName: OSharp.Collections.EnumerableExtensions.OrderBy<System.Collections.Generic.KeyValuePair<System.String, System.Object>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: OSharp.Filter.SortCondition
    name: SortCondition
    nameWithType: SortCondition
    fullName: OSharp.Filter.SortCondition
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Collections.EnumerableExtensions.OrderBy``1(OSharp.Filter.SortCondition)
    name: OrderBy(Of KeyValuePair(Of String, Object))
    nameWithType: EnumerableExtensions.OrderBy(Of KeyValuePair(Of String, Object))
    fullName: OSharp.Collections.EnumerableExtensions.OrderBy(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object))
  - name: (
    nameWithType: (
    fullName: (
  - uid: OSharp.Filter.SortCondition
    name: SortCondition
    nameWithType: SortCondition
    fullName: OSharp.Filter.SortCondition
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.OSharp.Collections.EnumerableExtensions.OrderBy``1(OSharp.Filter.SortCondition{System.Collections.Generic.KeyValuePair{System.String,System.Object}})
  commentId: M:OSharp.Collections.EnumerableExtensions.OrderBy``1(System.Collections.Generic.IEnumerable{``0},OSharp.Filter.SortCondition{``0})
  parent: OSharp.Collections.EnumerableExtensions
  definition: OSharp.Collections.EnumerableExtensions.OrderBy``1(System.Collections.Generic.IEnumerable{``0},OSharp.Filter.SortCondition{``0})
  name: OrderBy<KeyValuePair<String, Object>>(SortCondition<KeyValuePair<String, Object>>)
  nameWithType: EnumerableExtensions.OrderBy<KeyValuePair<String, Object>>(SortCondition<KeyValuePair<String, Object>>)
  fullName: OSharp.Collections.EnumerableExtensions.OrderBy<System.Collections.Generic.KeyValuePair<System.String, System.Object>>(OSharp.Filter.SortCondition<System.Collections.Generic.KeyValuePair<System.String, System.Object>>)
  nameWithType.vb: EnumerableExtensions.OrderBy(Of KeyValuePair(Of String, Object))(SortCondition(Of KeyValuePair(Of String, Object)))
  fullName.vb: OSharp.Collections.EnumerableExtensions.OrderBy(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object))(OSharp.Filter.SortCondition(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object)))
  name.vb: OrderBy(Of KeyValuePair(Of String, Object))(SortCondition(Of KeyValuePair(Of String, Object)))
  spec.csharp:
  - uid: OSharp.Collections.EnumerableExtensions.OrderBy``1(OSharp.Filter.SortCondition{``0})
    name: OrderBy<KeyValuePair<String, Object>>
    nameWithType: EnumerableExtensions.OrderBy<KeyValuePair<String, Object>>
    fullName: OSharp.Collections.EnumerableExtensions.OrderBy<System.Collections.Generic.KeyValuePair<System.String, System.Object>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: OSharp.Filter.SortCondition`1
    name: SortCondition
    nameWithType: SortCondition
    fullName: OSharp.Filter.SortCondition
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Collections.EnumerableExtensions.OrderBy``1(OSharp.Filter.SortCondition{``0})
    name: OrderBy(Of KeyValuePair(Of String, Object))
    nameWithType: EnumerableExtensions.OrderBy(Of KeyValuePair(Of String, Object))
    fullName: OSharp.Collections.EnumerableExtensions.OrderBy(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object))
  - name: (
    nameWithType: (
    fullName: (
  - uid: OSharp.Filter.SortCondition`1
    name: SortCondition
    nameWithType: SortCondition
    fullName: OSharp.Filter.SortCondition
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Dependency.ScopedDictionary.OSharp.Entity.EntityExtensions.CheckICreatedTime``2
  commentId: M:OSharp.Entity.EntityExtensions.CheckICreatedTime``2(``0)
  parent: OSharp.Entity.EntityExtensions
  definition: OSharp.Entity.EntityExtensions.CheckICreatedTime``2(``0)
  name: CheckICreatedTime<ScopedDictionary, TKey>()
  nameWithType: EntityExtensions.CheckICreatedTime<ScopedDictionary, TKey>()
  fullName: OSharp.Entity.EntityExtensions.CheckICreatedTime<Hybrid.Dependency.ScopedDictionary, TKey>()
  nameWithType.vb: EntityExtensions.CheckICreatedTime(Of ScopedDictionary, TKey)()
  fullName.vb: OSharp.Entity.EntityExtensions.CheckICreatedTime(Of Hybrid.Dependency.ScopedDictionary, TKey)()
  name.vb: CheckICreatedTime(Of ScopedDictionary, TKey)()
  spec.csharp:
  - uid: OSharp.Entity.EntityExtensions.CheckICreatedTime``2
    name: CheckICreatedTime<ScopedDictionary, TKey>
    nameWithType: EntityExtensions.CheckICreatedTime<ScopedDictionary, TKey>
    fullName: OSharp.Entity.EntityExtensions.CheckICreatedTime<Hybrid.Dependency.ScopedDictionary, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Entity.EntityExtensions.CheckICreatedTime``2
    name: CheckICreatedTime(Of ScopedDictionary, TKey)
    nameWithType: EntityExtensions.CheckICreatedTime(Of ScopedDictionary, TKey)
    fullName: OSharp.Entity.EntityExtensions.CheckICreatedTime(Of Hybrid.Dependency.ScopedDictionary, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Dependency.ScopedDictionary.OSharp.Entity.EntityExtensions.CheckICreationAudited``3(System.Security.Principal.IPrincipal)
  commentId: M:OSharp.Entity.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
  parent: OSharp.Entity.EntityExtensions
  definition: OSharp.Entity.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
  name: CheckICreationAudited<ScopedDictionary, TKey, TUserKey>(IPrincipal)
  nameWithType: EntityExtensions.CheckICreationAudited<ScopedDictionary, TKey, TUserKey>(IPrincipal)
  fullName: OSharp.Entity.EntityExtensions.CheckICreationAudited<Hybrid.Dependency.ScopedDictionary, TKey, TUserKey>(System.Security.Principal.IPrincipal)
  nameWithType.vb: EntityExtensions.CheckICreationAudited(Of ScopedDictionary, TKey, TUserKey)(IPrincipal)
  fullName.vb: OSharp.Entity.EntityExtensions.CheckICreationAudited(Of Hybrid.Dependency.ScopedDictionary, TKey, TUserKey)(System.Security.Principal.IPrincipal)
  name.vb: CheckICreationAudited(Of ScopedDictionary, TKey, TUserKey)(IPrincipal)
  spec.csharp:
  - uid: OSharp.Entity.EntityExtensions.CheckICreationAudited``3(System.Security.Principal.IPrincipal)
    name: CheckICreationAudited<ScopedDictionary, TKey, TUserKey>
    nameWithType: EntityExtensions.CheckICreationAudited<ScopedDictionary, TKey, TUserKey>
    fullName: OSharp.Entity.EntityExtensions.CheckICreationAudited<Hybrid.Dependency.ScopedDictionary, TKey, TUserKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Entity.EntityExtensions.CheckICreationAudited``3(System.Security.Principal.IPrincipal)
    name: CheckICreationAudited(Of ScopedDictionary, TKey, TUserKey)
    nameWithType: EntityExtensions.CheckICreationAudited(Of ScopedDictionary, TKey, TUserKey)
    fullName: OSharp.Entity.EntityExtensions.CheckICreationAudited(Of Hybrid.Dependency.ScopedDictionary, TKey, TUserKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Dependency.ScopedDictionary.OSharp.Entity.EntityExtensions.CheckIUpdateAudited``3(System.Security.Principal.IPrincipal)
  commentId: M:OSharp.Entity.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
  parent: OSharp.Entity.EntityExtensions
  definition: OSharp.Entity.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
  name: CheckIUpdateAudited<ScopedDictionary, TKey, TUserKey>(IPrincipal)
  nameWithType: EntityExtensions.CheckIUpdateAudited<ScopedDictionary, TKey, TUserKey>(IPrincipal)
  fullName: OSharp.Entity.EntityExtensions.CheckIUpdateAudited<Hybrid.Dependency.ScopedDictionary, TKey, TUserKey>(System.Security.Principal.IPrincipal)
  nameWithType.vb: EntityExtensions.CheckIUpdateAudited(Of ScopedDictionary, TKey, TUserKey)(IPrincipal)
  fullName.vb: OSharp.Entity.EntityExtensions.CheckIUpdateAudited(Of Hybrid.Dependency.ScopedDictionary, TKey, TUserKey)(System.Security.Principal.IPrincipal)
  name.vb: CheckIUpdateAudited(Of ScopedDictionary, TKey, TUserKey)(IPrincipal)
  spec.csharp:
  - uid: OSharp.Entity.EntityExtensions.CheckIUpdateAudited``3(System.Security.Principal.IPrincipal)
    name: CheckIUpdateAudited<ScopedDictionary, TKey, TUserKey>
    nameWithType: EntityExtensions.CheckIUpdateAudited<ScopedDictionary, TKey, TUserKey>
    fullName: OSharp.Entity.EntityExtensions.CheckIUpdateAudited<Hybrid.Dependency.ScopedDictionary, TKey, TUserKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Entity.EntityExtensions.CheckIUpdateAudited``3(System.Security.Principal.IPrincipal)
    name: CheckIUpdateAudited(Of ScopedDictionary, TKey, TUserKey)
    nameWithType: EntityExtensions.CheckIUpdateAudited(Of ScopedDictionary, TKey, TUserKey)
    fullName: OSharp.Entity.EntityExtensions.CheckIUpdateAudited(Of Hybrid.Dependency.ScopedDictionary, TKey, TUserKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary{System.String,System.Object}.OSharp.Extensions.DictionaryExtensions.GetOrDefault``2(System.String)
  commentId: M:OSharp.Extensions.DictionaryExtensions.GetOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0)
  parent: OSharp.Extensions.DictionaryExtensions
  definition: OSharp.Extensions.DictionaryExtensions.GetOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0)
  name: GetOrDefault<String, Object>(String)
  nameWithType: DictionaryExtensions.GetOrDefault<String, Object>(String)
  fullName: OSharp.Extensions.DictionaryExtensions.GetOrDefault<System.String, System.Object>(System.String)
  nameWithType.vb: DictionaryExtensions.GetOrDefault(Of String, Object)(String)
  fullName.vb: OSharp.Extensions.DictionaryExtensions.GetOrDefault(Of System.String, System.Object)(System.String)
  name.vb: GetOrDefault(Of String, Object)(String)
  spec.csharp:
  - uid: OSharp.Extensions.DictionaryExtensions.GetOrDefault``2(``0)
    name: GetOrDefault<String, Object>
    nameWithType: DictionaryExtensions.GetOrDefault<String, Object>
    fullName: OSharp.Extensions.DictionaryExtensions.GetOrDefault<System.String, System.Object>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.DictionaryExtensions.GetOrDefault``2(``0)
    name: GetOrDefault(Of String, Object)
    nameWithType: DictionaryExtensions.GetOrDefault(Of String, Object)
    fullName: OSharp.Extensions.DictionaryExtensions.GetOrDefault(Of System.String, System.Object)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary{System.String,System.Object}.OSharp.Extensions.DictionaryExtensions.GetOrAdd``2(System.String,System.Func{System.Object})
  commentId: M:OSharp.Extensions.DictionaryExtensions.GetOrAdd``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``1})
  parent: OSharp.Extensions.DictionaryExtensions
  definition: OSharp.Extensions.DictionaryExtensions.GetOrAdd``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``1})
  name: GetOrAdd<String, Object>(String, Func<Object>)
  nameWithType: DictionaryExtensions.GetOrAdd<String, Object>(String, Func<Object>)
  fullName: OSharp.Extensions.DictionaryExtensions.GetOrAdd<System.String, System.Object>(System.String, System.Func<System.Object>)
  nameWithType.vb: DictionaryExtensions.GetOrAdd(Of String, Object)(String, Func(Of Object))
  fullName.vb: OSharp.Extensions.DictionaryExtensions.GetOrAdd(Of System.String, System.Object)(System.String, System.Func(Of System.Object))
  name.vb: GetOrAdd(Of String, Object)(String, Func(Of Object))
  spec.csharp:
  - uid: OSharp.Extensions.DictionaryExtensions.GetOrAdd``2(``0,System.Func{``1})
    name: GetOrAdd<String, Object>
    nameWithType: DictionaryExtensions.GetOrAdd<String, Object>
    fullName: OSharp.Extensions.DictionaryExtensions.GetOrAdd<System.String, System.Object>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.DictionaryExtensions.GetOrAdd``2(``0,System.Func{``1})
    name: GetOrAdd(Of String, Object)
    nameWithType: DictionaryExtensions.GetOrAdd(Of String, Object)
    fullName: OSharp.Extensions.DictionaryExtensions.GetOrAdd(Of System.String, System.Object)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.OSharp.Extensions.ObjectExtensions.CastTo(System.Type)
  commentId: M:OSharp.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
  parent: OSharp.Extensions.ObjectExtensions
  definition: OSharp.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
  name: CastTo(Type)
  nameWithType: ObjectExtensions.CastTo(Type)
  fullName: OSharp.Extensions.ObjectExtensions.CastTo(System.Type)
  spec.csharp:
  - uid: OSharp.Extensions.ObjectExtensions.CastTo(System.Type)
    name: CastTo
    nameWithType: ObjectExtensions.CastTo
    fullName: OSharp.Extensions.ObjectExtensions.CastTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ObjectExtensions.CastTo(System.Type)
    name: CastTo
    nameWithType: ObjectExtensions.CastTo
    fullName: OSharp.Extensions.ObjectExtensions.CastTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.OSharp.Extensions.ObjectExtensions.CastTo``1
  commentId: M:OSharp.Extensions.ObjectExtensions.CastTo``1(System.Object)
  parent: OSharp.Extensions.ObjectExtensions
  definition: OSharp.Extensions.ObjectExtensions.CastTo``1(System.Object)
  name: CastTo<T>()
  nameWithType: ObjectExtensions.CastTo<T>()
  fullName: OSharp.Extensions.ObjectExtensions.CastTo<T>()
  nameWithType.vb: ObjectExtensions.CastTo(Of T)()
  fullName.vb: OSharp.Extensions.ObjectExtensions.CastTo(Of T)()
  name.vb: CastTo(Of T)()
  spec.csharp:
  - uid: OSharp.Extensions.ObjectExtensions.CastTo``1
    name: CastTo<T>
    nameWithType: ObjectExtensions.CastTo<T>
    fullName: OSharp.Extensions.ObjectExtensions.CastTo<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ObjectExtensions.CastTo``1
    name: CastTo(Of T)
    nameWithType: ObjectExtensions.CastTo(Of T)
    fullName: OSharp.Extensions.ObjectExtensions.CastTo(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.OSharp.Extensions.ObjectExtensions.CastTo``1({T})
  commentId: M:OSharp.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
  parent: OSharp.Extensions.ObjectExtensions
  definition: OSharp.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
  name: CastTo<T>(T)
  nameWithType: ObjectExtensions.CastTo<T>(T)
  fullName: OSharp.Extensions.ObjectExtensions.CastTo<T>(T)
  nameWithType.vb: ObjectExtensions.CastTo(Of T)(T)
  fullName.vb: OSharp.Extensions.ObjectExtensions.CastTo(Of T)(T)
  name.vb: CastTo(Of T)(T)
  spec.csharp:
  - uid: OSharp.Extensions.ObjectExtensions.CastTo``1(``0)
    name: CastTo<T>
    nameWithType: ObjectExtensions.CastTo<T>
    fullName: OSharp.Extensions.ObjectExtensions.CastTo<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ObjectExtensions.CastTo``1(``0)
    name: CastTo(Of T)
    nameWithType: ObjectExtensions.CastTo(Of T)
    fullName: OSharp.Extensions.ObjectExtensions.CastTo(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Dependency.ScopedDictionary.OSharp.Extensions.ObjectExtensions.IsIn``1(Hybrid.Dependency.ScopedDictionary[])
  commentId: M:OSharp.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
  parent: OSharp.Extensions.ObjectExtensions
  definition: OSharp.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
  name: IsIn<ScopedDictionary>(ScopedDictionary[])
  nameWithType: ObjectExtensions.IsIn<ScopedDictionary>(ScopedDictionary[])
  fullName: OSharp.Extensions.ObjectExtensions.IsIn<Hybrid.Dependency.ScopedDictionary>(Hybrid.Dependency.ScopedDictionary[])
  nameWithType.vb: ObjectExtensions.IsIn(Of ScopedDictionary)(ScopedDictionary())
  fullName.vb: OSharp.Extensions.ObjectExtensions.IsIn(Of Hybrid.Dependency.ScopedDictionary)(Hybrid.Dependency.ScopedDictionary())
  name.vb: IsIn(Of ScopedDictionary)(ScopedDictionary())
  spec.csharp:
  - uid: OSharp.Extensions.ObjectExtensions.IsIn``1(``0[])
    name: IsIn<ScopedDictionary>
    nameWithType: ObjectExtensions.IsIn<ScopedDictionary>
    fullName: OSharp.Extensions.ObjectExtensions.IsIn<Hybrid.Dependency.ScopedDictionary>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Hybrid.Dependency.ScopedDictionary
    name: ScopedDictionary
    nameWithType: ScopedDictionary
    fullName: Hybrid.Dependency.ScopedDictionary
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ObjectExtensions.IsIn``1(``0[])
    name: IsIn(Of ScopedDictionary)
    nameWithType: ObjectExtensions.IsIn(Of ScopedDictionary)
    fullName: OSharp.Extensions.ObjectExtensions.IsIn(Of Hybrid.Dependency.ScopedDictionary)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Hybrid.Dependency.ScopedDictionary
    name: ScopedDictionary
    nameWithType: ScopedDictionary
    fullName: Hybrid.Dependency.ScopedDictionary
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.OSharp.Extensions.ObjectExtensions.ToDynamic
  commentId: M:OSharp.Extensions.ObjectExtensions.ToDynamic(System.Object)
  parent: OSharp.Extensions.ObjectExtensions
  definition: OSharp.Extensions.ObjectExtensions.ToDynamic(System.Object)
  name: ToDynamic()
  nameWithType: ObjectExtensions.ToDynamic()
  fullName: OSharp.Extensions.ObjectExtensions.ToDynamic()
  spec.csharp:
  - uid: OSharp.Extensions.ObjectExtensions.ToDynamic
    name: ToDynamic
    nameWithType: ObjectExtensions.ToDynamic
    fullName: OSharp.Extensions.ObjectExtensions.ToDynamic
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ObjectExtensions.ToDynamic
    name: ToDynamic
    nameWithType: ObjectExtensions.ToDynamic
    fullName: OSharp.Extensions.ObjectExtensions.ToDynamic
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Dependency.ScopedDictionary.OSharp.Extensions.ObjectExtensions.DeepClone``1
  commentId: M:OSharp.Extensions.ObjectExtensions.DeepClone``1(``0)
  parent: OSharp.Extensions.ObjectExtensions
  definition: OSharp.Extensions.ObjectExtensions.DeepClone``1(``0)
  name: DeepClone<ScopedDictionary>()
  nameWithType: ObjectExtensions.DeepClone<ScopedDictionary>()
  fullName: OSharp.Extensions.ObjectExtensions.DeepClone<Hybrid.Dependency.ScopedDictionary>()
  nameWithType.vb: ObjectExtensions.DeepClone(Of ScopedDictionary)()
  fullName.vb: OSharp.Extensions.ObjectExtensions.DeepClone(Of Hybrid.Dependency.ScopedDictionary)()
  name.vb: DeepClone(Of ScopedDictionary)()
  spec.csharp:
  - uid: OSharp.Extensions.ObjectExtensions.DeepClone``1
    name: DeepClone<ScopedDictionary>
    nameWithType: ObjectExtensions.DeepClone<ScopedDictionary>
    fullName: OSharp.Extensions.ObjectExtensions.DeepClone<Hybrid.Dependency.ScopedDictionary>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ObjectExtensions.DeepClone``1
    name: DeepClone(Of ScopedDictionary)
    nameWithType: ObjectExtensions.DeepClone(Of ScopedDictionary)
    fullName: OSharp.Extensions.ObjectExtensions.DeepClone(Of Hybrid.Dependency.ScopedDictionary)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Dependency.ScopedDictionary.OSharp.Extensions.ParameterCheckExtensions.Required``1(System.Func{Hybrid.Dependency.ScopedDictionary,System.Boolean},System.String)
  commentId: M:OSharp.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
  parent: OSharp.Extensions.ParameterCheckExtensions
  definition: OSharp.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
  name: Required<ScopedDictionary>(Func<ScopedDictionary, Boolean>, String)
  nameWithType: ParameterCheckExtensions.Required<ScopedDictionary>(Func<ScopedDictionary, Boolean>, String)
  fullName: OSharp.Extensions.ParameterCheckExtensions.Required<Hybrid.Dependency.ScopedDictionary>(System.Func<Hybrid.Dependency.ScopedDictionary, System.Boolean>, System.String)
  nameWithType.vb: ParameterCheckExtensions.Required(Of ScopedDictionary)(Func(Of ScopedDictionary, Boolean), String)
  fullName.vb: OSharp.Extensions.ParameterCheckExtensions.Required(Of Hybrid.Dependency.ScopedDictionary)(System.Func(Of Hybrid.Dependency.ScopedDictionary, System.Boolean), System.String)
  name.vb: Required(Of ScopedDictionary)(Func(Of ScopedDictionary, Boolean), String)
  spec.csharp:
  - uid: OSharp.Extensions.ParameterCheckExtensions.Required``1(System.Func{``0,System.Boolean},System.String)
    name: Required<ScopedDictionary>
    nameWithType: ParameterCheckExtensions.Required<ScopedDictionary>
    fullName: OSharp.Extensions.ParameterCheckExtensions.Required<Hybrid.Dependency.ScopedDictionary>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Dependency.ScopedDictionary
    name: ScopedDictionary
    nameWithType: ScopedDictionary
    fullName: Hybrid.Dependency.ScopedDictionary
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ParameterCheckExtensions.Required``1(System.Func{``0,System.Boolean},System.String)
    name: Required(Of ScopedDictionary)
    nameWithType: ParameterCheckExtensions.Required(Of ScopedDictionary)
    fullName: OSharp.Extensions.ParameterCheckExtensions.Required(Of Hybrid.Dependency.ScopedDictionary)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Dependency.ScopedDictionary
    name: ScopedDictionary
    nameWithType: ScopedDictionary
    fullName: Hybrid.Dependency.ScopedDictionary
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Dependency.ScopedDictionary.OSharp.Extensions.ParameterCheckExtensions.Required``2(System.Func{Hybrid.Dependency.ScopedDictionary,System.Boolean},System.String)
  commentId: M:OSharp.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
  parent: OSharp.Extensions.ParameterCheckExtensions
  definition: OSharp.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
  name: Required<ScopedDictionary, TException>(Func<ScopedDictionary, Boolean>, String)
  nameWithType: ParameterCheckExtensions.Required<ScopedDictionary, TException>(Func<ScopedDictionary, Boolean>, String)
  fullName: OSharp.Extensions.ParameterCheckExtensions.Required<Hybrid.Dependency.ScopedDictionary, TException>(System.Func<Hybrid.Dependency.ScopedDictionary, System.Boolean>, System.String)
  nameWithType.vb: ParameterCheckExtensions.Required(Of ScopedDictionary, TException)(Func(Of ScopedDictionary, Boolean), String)
  fullName.vb: OSharp.Extensions.ParameterCheckExtensions.Required(Of Hybrid.Dependency.ScopedDictionary, TException)(System.Func(Of Hybrid.Dependency.ScopedDictionary, System.Boolean), System.String)
  name.vb: Required(Of ScopedDictionary, TException)(Func(Of ScopedDictionary, Boolean), String)
  spec.csharp:
  - uid: OSharp.Extensions.ParameterCheckExtensions.Required``2(System.Func{``0,System.Boolean},System.String)
    name: Required<ScopedDictionary, TException>
    nameWithType: ParameterCheckExtensions.Required<ScopedDictionary, TException>
    fullName: OSharp.Extensions.ParameterCheckExtensions.Required<Hybrid.Dependency.ScopedDictionary, TException>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Dependency.ScopedDictionary
    name: ScopedDictionary
    nameWithType: ScopedDictionary
    fullName: Hybrid.Dependency.ScopedDictionary
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ParameterCheckExtensions.Required``2(System.Func{``0,System.Boolean},System.String)
    name: Required(Of ScopedDictionary, TException)
    nameWithType: ParameterCheckExtensions.Required(Of ScopedDictionary, TException)
    fullName: OSharp.Extensions.ParameterCheckExtensions.Required(Of Hybrid.Dependency.ScopedDictionary, TException)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Dependency.ScopedDictionary
    name: ScopedDictionary
    nameWithType: ScopedDictionary
    fullName: Hybrid.Dependency.ScopedDictionary
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Dependency.ScopedDictionary.OSharp.Extensions.ParameterCheckExtensions.CheckNotNull``1(System.String)
  commentId: M:OSharp.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
  parent: OSharp.Extensions.ParameterCheckExtensions
  definition: OSharp.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
  name: CheckNotNull<ScopedDictionary>(String)
  nameWithType: ParameterCheckExtensions.CheckNotNull<ScopedDictionary>(String)
  fullName: OSharp.Extensions.ParameterCheckExtensions.CheckNotNull<Hybrid.Dependency.ScopedDictionary>(System.String)
  nameWithType.vb: ParameterCheckExtensions.CheckNotNull(Of ScopedDictionary)(String)
  fullName.vb: OSharp.Extensions.ParameterCheckExtensions.CheckNotNull(Of Hybrid.Dependency.ScopedDictionary)(System.String)
  name.vb: CheckNotNull(Of ScopedDictionary)(String)
  spec.csharp:
  - uid: OSharp.Extensions.ParameterCheckExtensions.CheckNotNull``1(System.String)
    name: CheckNotNull<ScopedDictionary>
    nameWithType: ParameterCheckExtensions.CheckNotNull<ScopedDictionary>
    fullName: OSharp.Extensions.ParameterCheckExtensions.CheckNotNull<Hybrid.Dependency.ScopedDictionary>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ParameterCheckExtensions.CheckNotNull``1(System.String)
    name: CheckNotNull(Of ScopedDictionary)
    nameWithType: ParameterCheckExtensions.CheckNotNull(Of ScopedDictionary)
    fullName: OSharp.Extensions.ParameterCheckExtensions.CheckNotNull(Of Hybrid.Dependency.ScopedDictionary)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.OSharp.Extensions.ParameterCheckExtensions.CheckNotNullOrEmpty``1(System.String)
  commentId: M:OSharp.Extensions.ParameterCheckExtensions.CheckNotNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0},System.String)
  parent: OSharp.Extensions.ParameterCheckExtensions
  definition: OSharp.Extensions.ParameterCheckExtensions.CheckNotNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0},System.String)
  name: CheckNotNullOrEmpty<KeyValuePair<String, Object>>(String)
  nameWithType: ParameterCheckExtensions.CheckNotNullOrEmpty<KeyValuePair<String, Object>>(String)
  fullName: OSharp.Extensions.ParameterCheckExtensions.CheckNotNullOrEmpty<System.Collections.Generic.KeyValuePair<System.String, System.Object>>(System.String)
  nameWithType.vb: ParameterCheckExtensions.CheckNotNullOrEmpty(Of KeyValuePair(Of String, Object))(String)
  fullName.vb: OSharp.Extensions.ParameterCheckExtensions.CheckNotNullOrEmpty(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object))(System.String)
  name.vb: CheckNotNullOrEmpty(Of KeyValuePair(Of String, Object))(String)
  spec.csharp:
  - uid: OSharp.Extensions.ParameterCheckExtensions.CheckNotNullOrEmpty``1(System.String)
    name: CheckNotNullOrEmpty<KeyValuePair<String, Object>>
    nameWithType: ParameterCheckExtensions.CheckNotNullOrEmpty<KeyValuePair<String, Object>>
    fullName: OSharp.Extensions.ParameterCheckExtensions.CheckNotNullOrEmpty<System.Collections.Generic.KeyValuePair<System.String, System.Object>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ParameterCheckExtensions.CheckNotNullOrEmpty``1(System.String)
    name: CheckNotNullOrEmpty(Of KeyValuePair(Of String, Object))
    nameWithType: ParameterCheckExtensions.CheckNotNullOrEmpty(Of KeyValuePair(Of String, Object))
    fullName: OSharp.Extensions.ParameterCheckExtensions.CheckNotNullOrEmpty(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object))
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Dependency.ScopedDictionary.OSharp.Extensions.TryCatchExtensions.TryCatch``1(System.Action{Hybrid.Dependency.ScopedDictionary},System.Action{System.Exception},System.Action{Hybrid.Dependency.ScopedDictionary})
  commentId: M:OSharp.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
  parent: OSharp.Extensions.TryCatchExtensions
  definition: OSharp.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
  name: TryCatch<ScopedDictionary>(Action<ScopedDictionary>, Action<Exception>, Action<ScopedDictionary>)
  nameWithType: TryCatchExtensions.TryCatch<ScopedDictionary>(Action<ScopedDictionary>, Action<Exception>, Action<ScopedDictionary>)
  fullName: OSharp.Extensions.TryCatchExtensions.TryCatch<Hybrid.Dependency.ScopedDictionary>(System.Action<Hybrid.Dependency.ScopedDictionary>, System.Action<System.Exception>, System.Action<Hybrid.Dependency.ScopedDictionary>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of ScopedDictionary)(Action(Of ScopedDictionary), Action(Of Exception), Action(Of ScopedDictionary))
  fullName.vb: OSharp.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.Dependency.ScopedDictionary)(System.Action(Of Hybrid.Dependency.ScopedDictionary), System.Action(Of System.Exception), System.Action(Of Hybrid.Dependency.ScopedDictionary))
  name.vb: TryCatch(Of ScopedDictionary)(Action(Of ScopedDictionary), Action(Of Exception), Action(Of ScopedDictionary))
  spec.csharp:
  - uid: OSharp.Extensions.TryCatchExtensions.TryCatch``1(System.Action{``0},System.Action{System.Exception},System.Action{``0})
    name: TryCatch<ScopedDictionary>
    nameWithType: TryCatchExtensions.TryCatch<ScopedDictionary>
    fullName: OSharp.Extensions.TryCatchExtensions.TryCatch<Hybrid.Dependency.ScopedDictionary>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Dependency.ScopedDictionary
    name: ScopedDictionary
    nameWithType: ScopedDictionary
    fullName: Hybrid.Dependency.ScopedDictionary
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Dependency.ScopedDictionary
    name: ScopedDictionary
    nameWithType: ScopedDictionary
    fullName: Hybrid.Dependency.ScopedDictionary
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.TryCatchExtensions.TryCatch``1(System.Action{``0},System.Action{System.Exception},System.Action{``0})
    name: TryCatch(Of ScopedDictionary)
    nameWithType: TryCatchExtensions.TryCatch(Of ScopedDictionary)
    fullName: OSharp.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.Dependency.ScopedDictionary)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Dependency.ScopedDictionary
    name: ScopedDictionary
    nameWithType: ScopedDictionary
    fullName: Hybrid.Dependency.ScopedDictionary
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Dependency.ScopedDictionary
    name: ScopedDictionary
    nameWithType: ScopedDictionary
    fullName: Hybrid.Dependency.ScopedDictionary
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Dependency.ScopedDictionary.OSharp.Extensions.TryCatchExtensions.TryCatch``1(System.Action{Hybrid.Dependency.ScopedDictionary},System.Action{System.Exception})
  commentId: M:OSharp.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
  parent: OSharp.Extensions.TryCatchExtensions
  definition: OSharp.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
  name: TryCatch<ScopedDictionary>(Action<ScopedDictionary>, Action<Exception>)
  nameWithType: TryCatchExtensions.TryCatch<ScopedDictionary>(Action<ScopedDictionary>, Action<Exception>)
  fullName: OSharp.Extensions.TryCatchExtensions.TryCatch<Hybrid.Dependency.ScopedDictionary>(System.Action<Hybrid.Dependency.ScopedDictionary>, System.Action<System.Exception>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of ScopedDictionary)(Action(Of ScopedDictionary), Action(Of Exception))
  fullName.vb: OSharp.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.Dependency.ScopedDictionary)(System.Action(Of Hybrid.Dependency.ScopedDictionary), System.Action(Of System.Exception))
  name.vb: TryCatch(Of ScopedDictionary)(Action(Of ScopedDictionary), Action(Of Exception))
  spec.csharp:
  - uid: OSharp.Extensions.TryCatchExtensions.TryCatch``1(System.Action{``0},System.Action{System.Exception})
    name: TryCatch<ScopedDictionary>
    nameWithType: TryCatchExtensions.TryCatch<ScopedDictionary>
    fullName: OSharp.Extensions.TryCatchExtensions.TryCatch<Hybrid.Dependency.ScopedDictionary>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Dependency.ScopedDictionary
    name: ScopedDictionary
    nameWithType: ScopedDictionary
    fullName: Hybrid.Dependency.ScopedDictionary
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.TryCatchExtensions.TryCatch``1(System.Action{``0},System.Action{System.Exception})
    name: TryCatch(Of ScopedDictionary)
    nameWithType: TryCatchExtensions.TryCatch(Of ScopedDictionary)
    fullName: OSharp.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.Dependency.ScopedDictionary)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Dependency.ScopedDictionary
    name: ScopedDictionary
    nameWithType: ScopedDictionary
    fullName: Hybrid.Dependency.ScopedDictionary
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Dependency.ScopedDictionary.OSharp.Extensions.TryCatchExtensions.TryCatch``2(System.Func{Hybrid.Dependency.ScopedDictionary,{TResult}},System.Action{System.Exception},System.Action{Hybrid.Dependency.ScopedDictionary})
  commentId: M:OSharp.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
  parent: OSharp.Extensions.TryCatchExtensions
  definition: OSharp.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
  name: TryCatch<ScopedDictionary, TResult>(Func<ScopedDictionary, TResult>, Action<Exception>, Action<ScopedDictionary>)
  nameWithType: TryCatchExtensions.TryCatch<ScopedDictionary, TResult>(Func<ScopedDictionary, TResult>, Action<Exception>, Action<ScopedDictionary>)
  fullName: OSharp.Extensions.TryCatchExtensions.TryCatch<Hybrid.Dependency.ScopedDictionary, TResult>(System.Func<Hybrid.Dependency.ScopedDictionary, TResult>, System.Action<System.Exception>, System.Action<Hybrid.Dependency.ScopedDictionary>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of ScopedDictionary, TResult)(Func(Of ScopedDictionary, TResult), Action(Of Exception), Action(Of ScopedDictionary))
  fullName.vb: OSharp.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.Dependency.ScopedDictionary, TResult)(System.Func(Of Hybrid.Dependency.ScopedDictionary, TResult), System.Action(Of System.Exception), System.Action(Of Hybrid.Dependency.ScopedDictionary))
  name.vb: TryCatch(Of ScopedDictionary, TResult)(Func(Of ScopedDictionary, TResult), Action(Of Exception), Action(Of ScopedDictionary))
  spec.csharp:
  - uid: OSharp.Extensions.TryCatchExtensions.TryCatch``2(System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
    name: TryCatch<ScopedDictionary, TResult>
    nameWithType: TryCatchExtensions.TryCatch<ScopedDictionary, TResult>
    fullName: OSharp.Extensions.TryCatchExtensions.TryCatch<Hybrid.Dependency.ScopedDictionary, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Dependency.ScopedDictionary
    name: ScopedDictionary
    nameWithType: ScopedDictionary
    fullName: Hybrid.Dependency.ScopedDictionary
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Dependency.ScopedDictionary
    name: ScopedDictionary
    nameWithType: ScopedDictionary
    fullName: Hybrid.Dependency.ScopedDictionary
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.TryCatchExtensions.TryCatch``2(System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
    name: TryCatch(Of ScopedDictionary, TResult)
    nameWithType: TryCatchExtensions.TryCatch(Of ScopedDictionary, TResult)
    fullName: OSharp.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.Dependency.ScopedDictionary, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Dependency.ScopedDictionary
    name: ScopedDictionary
    nameWithType: ScopedDictionary
    fullName: Hybrid.Dependency.ScopedDictionary
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Dependency.ScopedDictionary
    name: ScopedDictionary
    nameWithType: ScopedDictionary
    fullName: Hybrid.Dependency.ScopedDictionary
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Dependency.ScopedDictionary.OSharp.Extensions.TryCatchExtensions.TryCatch``2(System.Func{Hybrid.Dependency.ScopedDictionary,{TResult}},System.Action{System.Exception})
  commentId: M:OSharp.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
  parent: OSharp.Extensions.TryCatchExtensions
  definition: OSharp.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
  name: TryCatch<ScopedDictionary, TResult>(Func<ScopedDictionary, TResult>, Action<Exception>)
  nameWithType: TryCatchExtensions.TryCatch<ScopedDictionary, TResult>(Func<ScopedDictionary, TResult>, Action<Exception>)
  fullName: OSharp.Extensions.TryCatchExtensions.TryCatch<Hybrid.Dependency.ScopedDictionary, TResult>(System.Func<Hybrid.Dependency.ScopedDictionary, TResult>, System.Action<System.Exception>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of ScopedDictionary, TResult)(Func(Of ScopedDictionary, TResult), Action(Of Exception))
  fullName.vb: OSharp.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.Dependency.ScopedDictionary, TResult)(System.Func(Of Hybrid.Dependency.ScopedDictionary, TResult), System.Action(Of System.Exception))
  name.vb: TryCatch(Of ScopedDictionary, TResult)(Func(Of ScopedDictionary, TResult), Action(Of Exception))
  spec.csharp:
  - uid: OSharp.Extensions.TryCatchExtensions.TryCatch``2(System.Func{``0,``1},System.Action{System.Exception})
    name: TryCatch<ScopedDictionary, TResult>
    nameWithType: TryCatchExtensions.TryCatch<ScopedDictionary, TResult>
    fullName: OSharp.Extensions.TryCatchExtensions.TryCatch<Hybrid.Dependency.ScopedDictionary, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Dependency.ScopedDictionary
    name: ScopedDictionary
    nameWithType: ScopedDictionary
    fullName: Hybrid.Dependency.ScopedDictionary
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.TryCatchExtensions.TryCatch``2(System.Func{``0,``1},System.Action{System.Exception})
    name: TryCatch(Of ScopedDictionary, TResult)
    nameWithType: TryCatchExtensions.TryCatch(Of ScopedDictionary, TResult)
    fullName: OSharp.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.Dependency.ScopedDictionary, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Dependency.ScopedDictionary
    name: ScopedDictionary
    nameWithType: ScopedDictionary
    fullName: Hybrid.Dependency.ScopedDictionary
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Dependency.ScopedDictionary.OSharp.Extensions.TryCatchExtensions.TryFinally``1(System.Action{Hybrid.Dependency.ScopedDictionary},System.Action{Hybrid.Dependency.ScopedDictionary})
  commentId: M:OSharp.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
  parent: OSharp.Extensions.TryCatchExtensions
  definition: OSharp.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
  name: TryFinally<ScopedDictionary>(Action<ScopedDictionary>, Action<ScopedDictionary>)
  nameWithType: TryCatchExtensions.TryFinally<ScopedDictionary>(Action<ScopedDictionary>, Action<ScopedDictionary>)
  fullName: OSharp.Extensions.TryCatchExtensions.TryFinally<Hybrid.Dependency.ScopedDictionary>(System.Action<Hybrid.Dependency.ScopedDictionary>, System.Action<Hybrid.Dependency.ScopedDictionary>)
  nameWithType.vb: TryCatchExtensions.TryFinally(Of ScopedDictionary)(Action(Of ScopedDictionary), Action(Of ScopedDictionary))
  fullName.vb: OSharp.Extensions.TryCatchExtensions.TryFinally(Of Hybrid.Dependency.ScopedDictionary)(System.Action(Of Hybrid.Dependency.ScopedDictionary), System.Action(Of Hybrid.Dependency.ScopedDictionary))
  name.vb: TryFinally(Of ScopedDictionary)(Action(Of ScopedDictionary), Action(Of ScopedDictionary))
  spec.csharp:
  - uid: OSharp.Extensions.TryCatchExtensions.TryFinally``1(System.Action{``0},System.Action{``0})
    name: TryFinally<ScopedDictionary>
    nameWithType: TryCatchExtensions.TryFinally<ScopedDictionary>
    fullName: OSharp.Extensions.TryCatchExtensions.TryFinally<Hybrid.Dependency.ScopedDictionary>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Dependency.ScopedDictionary
    name: ScopedDictionary
    nameWithType: ScopedDictionary
    fullName: Hybrid.Dependency.ScopedDictionary
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Dependency.ScopedDictionary
    name: ScopedDictionary
    nameWithType: ScopedDictionary
    fullName: Hybrid.Dependency.ScopedDictionary
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.TryCatchExtensions.TryFinally``1(System.Action{``0},System.Action{``0})
    name: TryFinally(Of ScopedDictionary)
    nameWithType: TryCatchExtensions.TryFinally(Of ScopedDictionary)
    fullName: OSharp.Extensions.TryCatchExtensions.TryFinally(Of Hybrid.Dependency.ScopedDictionary)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Dependency.ScopedDictionary
    name: ScopedDictionary
    nameWithType: ScopedDictionary
    fullName: Hybrid.Dependency.ScopedDictionary
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Dependency.ScopedDictionary
    name: ScopedDictionary
    nameWithType: ScopedDictionary
    fullName: Hybrid.Dependency.ScopedDictionary
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.OSharp.Json.JsonExtensions.ToJsonString(System.Boolean,System.Boolean)
  commentId: M:OSharp.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
  parent: OSharp.Json.JsonExtensions
  definition: OSharp.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
  name: ToJsonString(Boolean, Boolean)
  nameWithType: JsonExtensions.ToJsonString(Boolean, Boolean)
  fullName: OSharp.Json.JsonExtensions.ToJsonString(System.Boolean, System.Boolean)
  spec.csharp:
  - uid: OSharp.Json.JsonExtensions.ToJsonString(System.Boolean,System.Boolean)
    name: ToJsonString
    nameWithType: JsonExtensions.ToJsonString
    fullName: OSharp.Json.JsonExtensions.ToJsonString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Json.JsonExtensions.ToJsonString(System.Boolean,System.Boolean)
    name: ToJsonString
    nameWithType: JsonExtensions.ToJsonString
    fullName: OSharp.Json.JsonExtensions.ToJsonString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.OSharp.Mapping.MapperExtensions.MapTo``1
  commentId: M:OSharp.Mapping.MapperExtensions.MapTo``1(System.Object)
  parent: OSharp.Mapping.MapperExtensions
  definition: OSharp.Mapping.MapperExtensions.MapTo``1(System.Object)
  name: MapTo<TTarget>()
  nameWithType: MapperExtensions.MapTo<TTarget>()
  fullName: OSharp.Mapping.MapperExtensions.MapTo<TTarget>()
  nameWithType.vb: MapperExtensions.MapTo(Of TTarget)()
  fullName.vb: OSharp.Mapping.MapperExtensions.MapTo(Of TTarget)()
  name.vb: MapTo(Of TTarget)()
  spec.csharp:
  - uid: OSharp.Mapping.MapperExtensions.MapTo``1
    name: MapTo<TTarget>
    nameWithType: MapperExtensions.MapTo<TTarget>
    fullName: OSharp.Mapping.MapperExtensions.MapTo<TTarget>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Mapping.MapperExtensions.MapTo``1
    name: MapTo(Of TTarget)
    nameWithType: MapperExtensions.MapTo(Of TTarget)
    fullName: OSharp.Mapping.MapperExtensions.MapTo(Of TTarget)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Dependency.ScopedDictionary.OSharp.Mapping.MapperExtensions.MapTo``2({TTarget})
  commentId: M:OSharp.Mapping.MapperExtensions.MapTo``2(``0,``1)
  parent: OSharp.Mapping.MapperExtensions
  definition: OSharp.Mapping.MapperExtensions.MapTo``2(``0,``1)
  name: MapTo<ScopedDictionary, TTarget>(TTarget)
  nameWithType: MapperExtensions.MapTo<ScopedDictionary, TTarget>(TTarget)
  fullName: OSharp.Mapping.MapperExtensions.MapTo<Hybrid.Dependency.ScopedDictionary, TTarget>(TTarget)
  nameWithType.vb: MapperExtensions.MapTo(Of ScopedDictionary, TTarget)(TTarget)
  fullName.vb: OSharp.Mapping.MapperExtensions.MapTo(Of Hybrid.Dependency.ScopedDictionary, TTarget)(TTarget)
  name.vb: MapTo(Of ScopedDictionary, TTarget)(TTarget)
  spec.csharp:
  - uid: OSharp.Mapping.MapperExtensions.MapTo``2(``1)
    name: MapTo<ScopedDictionary, TTarget>
    nameWithType: MapperExtensions.MapTo<ScopedDictionary, TTarget>
    fullName: OSharp.Mapping.MapperExtensions.MapTo<Hybrid.Dependency.ScopedDictionary, TTarget>
  - name: (
    nameWithType: (
    fullName: (
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Mapping.MapperExtensions.MapTo``2(``1)
    name: MapTo(Of ScopedDictionary, TTarget)
    nameWithType: MapperExtensions.MapTo(Of ScopedDictionary, TTarget)
    fullName: OSharp.Mapping.MapperExtensions.MapTo(Of Hybrid.Dependency.ScopedDictionary, TTarget)
  - name: (
    nameWithType: (
    fullName: (
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.OSharp.Reflection.LockExtensions.Locking(System.Action)
  commentId: M:OSharp.Reflection.LockExtensions.Locking(System.Object,System.Action)
  parent: OSharp.Reflection.LockExtensions
  definition: OSharp.Reflection.LockExtensions.Locking(System.Object,System.Action)
  name: Locking(Action)
  nameWithType: LockExtensions.Locking(Action)
  fullName: OSharp.Reflection.LockExtensions.Locking(System.Action)
  spec.csharp:
  - uid: OSharp.Reflection.LockExtensions.Locking(System.Action)
    name: Locking
    nameWithType: LockExtensions.Locking
    fullName: OSharp.Reflection.LockExtensions.Locking
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Reflection.LockExtensions.Locking(System.Action)
    name: Locking
    nameWithType: LockExtensions.Locking
    fullName: OSharp.Reflection.LockExtensions.Locking
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Dependency.ScopedDictionary.OSharp.Reflection.LockExtensions.Locking``1(System.Action{Hybrid.Dependency.ScopedDictionary})
  commentId: M:OSharp.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
  parent: OSharp.Reflection.LockExtensions
  definition: OSharp.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
  name: Locking<ScopedDictionary>(Action<ScopedDictionary>)
  nameWithType: LockExtensions.Locking<ScopedDictionary>(Action<ScopedDictionary>)
  fullName: OSharp.Reflection.LockExtensions.Locking<Hybrid.Dependency.ScopedDictionary>(System.Action<Hybrid.Dependency.ScopedDictionary>)
  nameWithType.vb: LockExtensions.Locking(Of ScopedDictionary)(Action(Of ScopedDictionary))
  fullName.vb: OSharp.Reflection.LockExtensions.Locking(Of Hybrid.Dependency.ScopedDictionary)(System.Action(Of Hybrid.Dependency.ScopedDictionary))
  name.vb: Locking(Of ScopedDictionary)(Action(Of ScopedDictionary))
  spec.csharp:
  - uid: OSharp.Reflection.LockExtensions.Locking``1(System.Action{``0})
    name: Locking<ScopedDictionary>
    nameWithType: LockExtensions.Locking<ScopedDictionary>
    fullName: OSharp.Reflection.LockExtensions.Locking<Hybrid.Dependency.ScopedDictionary>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Dependency.ScopedDictionary
    name: ScopedDictionary
    nameWithType: ScopedDictionary
    fullName: Hybrid.Dependency.ScopedDictionary
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Reflection.LockExtensions.Locking``1(System.Action{``0})
    name: Locking(Of ScopedDictionary)
    nameWithType: LockExtensions.Locking(Of ScopedDictionary)
    fullName: OSharp.Reflection.LockExtensions.Locking(Of Hybrid.Dependency.ScopedDictionary)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Dependency.ScopedDictionary
    name: ScopedDictionary
    nameWithType: ScopedDictionary
    fullName: Hybrid.Dependency.ScopedDictionary
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.OSharp.Reflection.LockExtensions.Locking``1(System.Func{{TResult}})
  commentId: M:OSharp.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
  parent: OSharp.Reflection.LockExtensions
  definition: OSharp.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
  name: Locking<TResult>(Func<TResult>)
  nameWithType: LockExtensions.Locking<TResult>(Func<TResult>)
  fullName: OSharp.Reflection.LockExtensions.Locking<TResult>(System.Func<TResult>)
  nameWithType.vb: LockExtensions.Locking(Of TResult)(Func(Of TResult))
  fullName.vb: OSharp.Reflection.LockExtensions.Locking(Of TResult)(System.Func(Of TResult))
  name.vb: Locking(Of TResult)(Func(Of TResult))
  spec.csharp:
  - uid: OSharp.Reflection.LockExtensions.Locking``1(System.Func{``0})
    name: Locking<TResult>
    nameWithType: LockExtensions.Locking<TResult>
    fullName: OSharp.Reflection.LockExtensions.Locking<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Reflection.LockExtensions.Locking``1(System.Func{``0})
    name: Locking(Of TResult)
    nameWithType: LockExtensions.Locking(Of TResult)
    fullName: OSharp.Reflection.LockExtensions.Locking(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Dependency.ScopedDictionary.OSharp.Reflection.LockExtensions.Locking``2(System.Func{Hybrid.Dependency.ScopedDictionary,{TResult}})
  commentId: M:OSharp.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
  parent: OSharp.Reflection.LockExtensions
  definition: OSharp.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
  name: Locking<ScopedDictionary, TResult>(Func<ScopedDictionary, TResult>)
  nameWithType: LockExtensions.Locking<ScopedDictionary, TResult>(Func<ScopedDictionary, TResult>)
  fullName: OSharp.Reflection.LockExtensions.Locking<Hybrid.Dependency.ScopedDictionary, TResult>(System.Func<Hybrid.Dependency.ScopedDictionary, TResult>)
  nameWithType.vb: LockExtensions.Locking(Of ScopedDictionary, TResult)(Func(Of ScopedDictionary, TResult))
  fullName.vb: OSharp.Reflection.LockExtensions.Locking(Of Hybrid.Dependency.ScopedDictionary, TResult)(System.Func(Of Hybrid.Dependency.ScopedDictionary, TResult))
  name.vb: Locking(Of ScopedDictionary, TResult)(Func(Of ScopedDictionary, TResult))
  spec.csharp:
  - uid: OSharp.Reflection.LockExtensions.Locking``2(System.Func{``0,``1})
    name: Locking<ScopedDictionary, TResult>
    nameWithType: LockExtensions.Locking<ScopedDictionary, TResult>
    fullName: OSharp.Reflection.LockExtensions.Locking<Hybrid.Dependency.ScopedDictionary, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Dependency.ScopedDictionary
    name: ScopedDictionary
    nameWithType: ScopedDictionary
    fullName: Hybrid.Dependency.ScopedDictionary
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Reflection.LockExtensions.Locking``2(System.Func{``0,``1})
    name: Locking(Of ScopedDictionary, TResult)
    nameWithType: LockExtensions.Locking(Of ScopedDictionary, TResult)
    fullName: OSharp.Reflection.LockExtensions.Locking(Of Hybrid.Dependency.ScopedDictionary, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Dependency.ScopedDictionary
    name: ScopedDictionary
    nameWithType: ScopedDictionary
    fullName: Hybrid.Dependency.ScopedDictionary
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Dependency.ScopedDictionary.Hybrid.Dependency.ScopedDictionaryExtensions.GetConnUnitOfWork(System.String)
  commentId: M:Hybrid.Dependency.ScopedDictionaryExtensions.GetConnUnitOfWork(Hybrid.Dependency.ScopedDictionary,System.String)
  parent: Hybrid.Dependency.ScopedDictionaryExtensions
  definition: Hybrid.Dependency.ScopedDictionaryExtensions.GetConnUnitOfWork(Hybrid.Dependency.ScopedDictionary,System.String)
  name: GetConnUnitOfWork(String)
  nameWithType: ScopedDictionaryExtensions.GetConnUnitOfWork(String)
  fullName: Hybrid.Dependency.ScopedDictionaryExtensions.GetConnUnitOfWork(System.String)
  spec.csharp:
  - uid: Hybrid.Dependency.ScopedDictionaryExtensions.GetConnUnitOfWork(System.String)
    name: GetConnUnitOfWork
    nameWithType: ScopedDictionaryExtensions.GetConnUnitOfWork
    fullName: Hybrid.Dependency.ScopedDictionaryExtensions.GetConnUnitOfWork
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Dependency.ScopedDictionaryExtensions.GetConnUnitOfWork(System.String)
    name: GetConnUnitOfWork
    nameWithType: ScopedDictionaryExtensions.GetConnUnitOfWork
    fullName: Hybrid.Dependency.ScopedDictionaryExtensions.GetConnUnitOfWork
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Dependency.ScopedDictionary.Hybrid.Dependency.ScopedDictionaryExtensions.GetConnUnitOfWorks
  commentId: M:Hybrid.Dependency.ScopedDictionaryExtensions.GetConnUnitOfWorks(Hybrid.Dependency.ScopedDictionary)
  parent: Hybrid.Dependency.ScopedDictionaryExtensions
  definition: Hybrid.Dependency.ScopedDictionaryExtensions.GetConnUnitOfWorks(Hybrid.Dependency.ScopedDictionary)
  name: GetConnUnitOfWorks()
  nameWithType: ScopedDictionaryExtensions.GetConnUnitOfWorks()
  fullName: Hybrid.Dependency.ScopedDictionaryExtensions.GetConnUnitOfWorks()
  spec.csharp:
  - uid: Hybrid.Dependency.ScopedDictionaryExtensions.GetConnUnitOfWorks
    name: GetConnUnitOfWorks
    nameWithType: ScopedDictionaryExtensions.GetConnUnitOfWorks
    fullName: Hybrid.Dependency.ScopedDictionaryExtensions.GetConnUnitOfWorks
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Dependency.ScopedDictionaryExtensions.GetConnUnitOfWorks
    name: GetConnUnitOfWorks
    nameWithType: ScopedDictionaryExtensions.GetConnUnitOfWorks
    fullName: Hybrid.Dependency.ScopedDictionaryExtensions.GetConnUnitOfWorks
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Dependency.ScopedDictionary.Hybrid.Dependency.ScopedDictionaryExtensions.SetConnUnitOfWork(System.String,Hybrid.Domain.Uow.IUnitOfWork)
  commentId: M:Hybrid.Dependency.ScopedDictionaryExtensions.SetConnUnitOfWork(Hybrid.Dependency.ScopedDictionary,System.String,Hybrid.Domain.Uow.IUnitOfWork)
  parent: Hybrid.Dependency.ScopedDictionaryExtensions
  definition: Hybrid.Dependency.ScopedDictionaryExtensions.SetConnUnitOfWork(Hybrid.Dependency.ScopedDictionary,System.String,Hybrid.Domain.Uow.IUnitOfWork)
  name: SetConnUnitOfWork(String, IUnitOfWork)
  nameWithType: ScopedDictionaryExtensions.SetConnUnitOfWork(String, IUnitOfWork)
  fullName: Hybrid.Dependency.ScopedDictionaryExtensions.SetConnUnitOfWork(System.String, Hybrid.Domain.Uow.IUnitOfWork)
  spec.csharp:
  - uid: Hybrid.Dependency.ScopedDictionaryExtensions.SetConnUnitOfWork(System.String,Hybrid.Domain.Uow.IUnitOfWork)
    name: SetConnUnitOfWork
    nameWithType: ScopedDictionaryExtensions.SetConnUnitOfWork
    fullName: Hybrid.Dependency.ScopedDictionaryExtensions.SetConnUnitOfWork
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Hybrid.Domain.Uow.IUnitOfWork
    name: IUnitOfWork
    nameWithType: IUnitOfWork
    fullName: Hybrid.Domain.Uow.IUnitOfWork
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Dependency.ScopedDictionaryExtensions.SetConnUnitOfWork(System.String,Hybrid.Domain.Uow.IUnitOfWork)
    name: SetConnUnitOfWork
    nameWithType: ScopedDictionaryExtensions.SetConnUnitOfWork
    fullName: Hybrid.Dependency.ScopedDictionaryExtensions.SetConnUnitOfWork
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Hybrid.Domain.Uow.IUnitOfWork
    name: IUnitOfWork
    nameWithType: IUnitOfWork
    fullName: Hybrid.Domain.Uow.IUnitOfWork
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Dependency.ScopedDictionary.Hybrid.Dependency.ScopedDictionaryExtensions.GetEntityUnitOfWork(System.Type)
  commentId: M:Hybrid.Dependency.ScopedDictionaryExtensions.GetEntityUnitOfWork(Hybrid.Dependency.ScopedDictionary,System.Type)
  parent: Hybrid.Dependency.ScopedDictionaryExtensions
  definition: Hybrid.Dependency.ScopedDictionaryExtensions.GetEntityUnitOfWork(Hybrid.Dependency.ScopedDictionary,System.Type)
  name: GetEntityUnitOfWork(Type)
  nameWithType: ScopedDictionaryExtensions.GetEntityUnitOfWork(Type)
  fullName: Hybrid.Dependency.ScopedDictionaryExtensions.GetEntityUnitOfWork(System.Type)
  spec.csharp:
  - uid: Hybrid.Dependency.ScopedDictionaryExtensions.GetEntityUnitOfWork(System.Type)
    name: GetEntityUnitOfWork
    nameWithType: ScopedDictionaryExtensions.GetEntityUnitOfWork
    fullName: Hybrid.Dependency.ScopedDictionaryExtensions.GetEntityUnitOfWork
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Dependency.ScopedDictionaryExtensions.GetEntityUnitOfWork(System.Type)
    name: GetEntityUnitOfWork
    nameWithType: ScopedDictionaryExtensions.GetEntityUnitOfWork
    fullName: Hybrid.Dependency.ScopedDictionaryExtensions.GetEntityUnitOfWork
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Dependency.ScopedDictionary.Hybrid.Dependency.ScopedDictionaryExtensions.GetEntityUnitOfWorks
  commentId: M:Hybrid.Dependency.ScopedDictionaryExtensions.GetEntityUnitOfWorks(Hybrid.Dependency.ScopedDictionary)
  parent: Hybrid.Dependency.ScopedDictionaryExtensions
  definition: Hybrid.Dependency.ScopedDictionaryExtensions.GetEntityUnitOfWorks(Hybrid.Dependency.ScopedDictionary)
  name: GetEntityUnitOfWorks()
  nameWithType: ScopedDictionaryExtensions.GetEntityUnitOfWorks()
  fullName: Hybrid.Dependency.ScopedDictionaryExtensions.GetEntityUnitOfWorks()
  spec.csharp:
  - uid: Hybrid.Dependency.ScopedDictionaryExtensions.GetEntityUnitOfWorks
    name: GetEntityUnitOfWorks
    nameWithType: ScopedDictionaryExtensions.GetEntityUnitOfWorks
    fullName: Hybrid.Dependency.ScopedDictionaryExtensions.GetEntityUnitOfWorks
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Dependency.ScopedDictionaryExtensions.GetEntityUnitOfWorks
    name: GetEntityUnitOfWorks
    nameWithType: ScopedDictionaryExtensions.GetEntityUnitOfWorks
    fullName: Hybrid.Dependency.ScopedDictionaryExtensions.GetEntityUnitOfWorks
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Dependency.ScopedDictionary.Hybrid.Dependency.ScopedDictionaryExtensions.SetEntityUnitOfWork(System.Type,Hybrid.Domain.Uow.IUnitOfWork)
  commentId: M:Hybrid.Dependency.ScopedDictionaryExtensions.SetEntityUnitOfWork(Hybrid.Dependency.ScopedDictionary,System.Type,Hybrid.Domain.Uow.IUnitOfWork)
  parent: Hybrid.Dependency.ScopedDictionaryExtensions
  definition: Hybrid.Dependency.ScopedDictionaryExtensions.SetEntityUnitOfWork(Hybrid.Dependency.ScopedDictionary,System.Type,Hybrid.Domain.Uow.IUnitOfWork)
  name: SetEntityUnitOfWork(Type, IUnitOfWork)
  nameWithType: ScopedDictionaryExtensions.SetEntityUnitOfWork(Type, IUnitOfWork)
  fullName: Hybrid.Dependency.ScopedDictionaryExtensions.SetEntityUnitOfWork(System.Type, Hybrid.Domain.Uow.IUnitOfWork)
  spec.csharp:
  - uid: Hybrid.Dependency.ScopedDictionaryExtensions.SetEntityUnitOfWork(System.Type,Hybrid.Domain.Uow.IUnitOfWork)
    name: SetEntityUnitOfWork
    nameWithType: ScopedDictionaryExtensions.SetEntityUnitOfWork
    fullName: Hybrid.Dependency.ScopedDictionaryExtensions.SetEntityUnitOfWork
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Hybrid.Domain.Uow.IUnitOfWork
    name: IUnitOfWork
    nameWithType: IUnitOfWork
    fullName: Hybrid.Domain.Uow.IUnitOfWork
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Dependency.ScopedDictionaryExtensions.SetEntityUnitOfWork(System.Type,Hybrid.Domain.Uow.IUnitOfWork)
    name: SetEntityUnitOfWork
    nameWithType: ScopedDictionaryExtensions.SetEntityUnitOfWork
    fullName: Hybrid.Dependency.ScopedDictionaryExtensions.SetEntityUnitOfWork
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Hybrid.Domain.Uow.IUnitOfWork
    name: IUnitOfWork
    nameWithType: IUnitOfWork
    fullName: Hybrid.Domain.Uow.IUnitOfWork
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Dependency.ScopedDictionary.Hybrid.Dependency.ServiceCollectionExtensions.GetValue``1(System.String)
  commentId: M:Hybrid.Dependency.ServiceCollectionExtensions.GetValue``1(Hybrid.Dependency.ScopedDictionary,System.String)
  parent: Hybrid.Dependency.ServiceCollectionExtensions
  definition: Hybrid.Dependency.ServiceCollectionExtensions.GetValue``1(Hybrid.Dependency.ScopedDictionary,System.String)
  name: GetValue<T>(String)
  nameWithType: ServiceCollectionExtensions.GetValue<T>(String)
  fullName: Hybrid.Dependency.ServiceCollectionExtensions.GetValue<T>(System.String)
  nameWithType.vb: ServiceCollectionExtensions.GetValue(Of T)(String)
  fullName.vb: Hybrid.Dependency.ServiceCollectionExtensions.GetValue(Of T)(System.String)
  name.vb: GetValue(Of T)(String)
  spec.csharp:
  - uid: Hybrid.Dependency.ServiceCollectionExtensions.GetValue``1(System.String)
    name: GetValue<T>
    nameWithType: ServiceCollectionExtensions.GetValue<T>
    fullName: Hybrid.Dependency.ServiceCollectionExtensions.GetValue<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Dependency.ServiceCollectionExtensions.GetValue``1(System.String)
    name: GetValue(Of T)
    nameWithType: ServiceCollectionExtensions.GetValue(Of T)
    fullName: Hybrid.Dependency.ServiceCollectionExtensions.GetValue(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.Hybrid.Extensions.CollectionExtensions.AddIf``1(System.Collections.Generic.KeyValuePair{System.String,System.Object},System.Boolean)
  commentId: M:Hybrid.Extensions.CollectionExtensions.AddIf``1(System.Collections.Generic.ICollection{``0},``0,System.Boolean)
  parent: Hybrid.Extensions.CollectionExtensions
  definition: Hybrid.Extensions.CollectionExtensions.AddIf``1(System.Collections.Generic.ICollection{``0},``0,System.Boolean)
  name: AddIf<KeyValuePair<String, Object>>(KeyValuePair<String, Object>, Boolean)
  nameWithType: CollectionExtensions.AddIf<KeyValuePair<String, Object>>(KeyValuePair<String, Object>, Boolean)
  fullName: Hybrid.Extensions.CollectionExtensions.AddIf<System.Collections.Generic.KeyValuePair<System.String, System.Object>>(System.Collections.Generic.KeyValuePair<System.String, System.Object>, System.Boolean)
  nameWithType.vb: CollectionExtensions.AddIf(Of KeyValuePair(Of String, Object))(KeyValuePair(Of String, Object), Boolean)
  fullName.vb: Hybrid.Extensions.CollectionExtensions.AddIf(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object))(System.Collections.Generic.KeyValuePair(Of System.String, System.Object), System.Boolean)
  name.vb: AddIf(Of KeyValuePair(Of String, Object))(KeyValuePair(Of String, Object), Boolean)
  spec.csharp:
  - uid: Hybrid.Extensions.CollectionExtensions.AddIf``1(``0,System.Boolean)
    name: AddIf<KeyValuePair<String, Object>>
    nameWithType: CollectionExtensions.AddIf<KeyValuePair<String, Object>>
    fullName: Hybrid.Extensions.CollectionExtensions.AddIf<System.Collections.Generic.KeyValuePair<System.String, System.Object>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.CollectionExtensions.AddIf``1(``0,System.Boolean)
    name: AddIf(Of KeyValuePair(Of String, Object))
    nameWithType: CollectionExtensions.AddIf(Of KeyValuePair(Of String, Object))
    fullName: Hybrid.Extensions.CollectionExtensions.AddIf(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object))
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.Hybrid.Extensions.CollectionExtensions.AddIf``1(System.Collections.Generic.KeyValuePair{System.String,System.Object},System.Func{System.Boolean})
  commentId: M:Hybrid.Extensions.CollectionExtensions.AddIf``1(System.Collections.Generic.ICollection{``0},``0,System.Func{System.Boolean})
  parent: Hybrid.Extensions.CollectionExtensions
  definition: Hybrid.Extensions.CollectionExtensions.AddIf``1(System.Collections.Generic.ICollection{``0},``0,System.Func{System.Boolean})
  name: AddIf<KeyValuePair<String, Object>>(KeyValuePair<String, Object>, Func<Boolean>)
  nameWithType: CollectionExtensions.AddIf<KeyValuePair<String, Object>>(KeyValuePair<String, Object>, Func<Boolean>)
  fullName: Hybrid.Extensions.CollectionExtensions.AddIf<System.Collections.Generic.KeyValuePair<System.String, System.Object>>(System.Collections.Generic.KeyValuePair<System.String, System.Object>, System.Func<System.Boolean>)
  nameWithType.vb: CollectionExtensions.AddIf(Of KeyValuePair(Of String, Object))(KeyValuePair(Of String, Object), Func(Of Boolean))
  fullName.vb: Hybrid.Extensions.CollectionExtensions.AddIf(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object))(System.Collections.Generic.KeyValuePair(Of System.String, System.Object), System.Func(Of System.Boolean))
  name.vb: AddIf(Of KeyValuePair(Of String, Object))(KeyValuePair(Of String, Object), Func(Of Boolean))
  spec.csharp:
  - uid: Hybrid.Extensions.CollectionExtensions.AddIf``1(``0,System.Func{System.Boolean})
    name: AddIf<KeyValuePair<String, Object>>
    nameWithType: CollectionExtensions.AddIf<KeyValuePair<String, Object>>
    fullName: Hybrid.Extensions.CollectionExtensions.AddIf<System.Collections.Generic.KeyValuePair<System.String, System.Object>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.CollectionExtensions.AddIf``1(``0,System.Func{System.Boolean})
    name: AddIf(Of KeyValuePair(Of String, Object))
    nameWithType: CollectionExtensions.AddIf(Of KeyValuePair(Of String, Object))
    fullName: Hybrid.Extensions.CollectionExtensions.AddIf(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object))
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.Hybrid.Extensions.CollectionExtensions.AddIfNotExist``1(System.Collections.Generic.KeyValuePair{System.String,System.Object},System.Func{System.Collections.Generic.KeyValuePair{System.String,System.Object},System.Boolean})
  commentId: M:Hybrid.Extensions.CollectionExtensions.AddIfNotExist``1(System.Collections.Generic.ICollection{``0},``0,System.Func{``0,System.Boolean})
  parent: Hybrid.Extensions.CollectionExtensions
  definition: Hybrid.Extensions.CollectionExtensions.AddIfNotExist``1(System.Collections.Generic.ICollection{``0},``0,System.Func{``0,System.Boolean})
  name: AddIfNotExist<KeyValuePair<String, Object>>(KeyValuePair<String, Object>, Func<KeyValuePair<String, Object>, Boolean>)
  nameWithType: CollectionExtensions.AddIfNotExist<KeyValuePair<String, Object>>(KeyValuePair<String, Object>, Func<KeyValuePair<String, Object>, Boolean>)
  fullName: Hybrid.Extensions.CollectionExtensions.AddIfNotExist<System.Collections.Generic.KeyValuePair<System.String, System.Object>>(System.Collections.Generic.KeyValuePair<System.String, System.Object>, System.Func<System.Collections.Generic.KeyValuePair<System.String, System.Object>, System.Boolean>)
  nameWithType.vb: CollectionExtensions.AddIfNotExist(Of KeyValuePair(Of String, Object))(KeyValuePair(Of String, Object), Func(Of KeyValuePair(Of String, Object), Boolean))
  fullName.vb: Hybrid.Extensions.CollectionExtensions.AddIfNotExist(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object))(System.Collections.Generic.KeyValuePair(Of System.String, System.Object), System.Func(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object), System.Boolean))
  name.vb: AddIfNotExist(Of KeyValuePair(Of String, Object))(KeyValuePair(Of String, Object), Func(Of KeyValuePair(Of String, Object), Boolean))
  spec.csharp:
  - uid: Hybrid.Extensions.CollectionExtensions.AddIfNotExist``1(``0,System.Func{``0,System.Boolean})
    name: AddIfNotExist<KeyValuePair<String, Object>>
    nameWithType: CollectionExtensions.AddIfNotExist<KeyValuePair<String, Object>>
    fullName: Hybrid.Extensions.CollectionExtensions.AddIfNotExist<System.Collections.Generic.KeyValuePair<System.String, System.Object>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.CollectionExtensions.AddIfNotExist``1(``0,System.Func{``0,System.Boolean})
    name: AddIfNotExist(Of KeyValuePair(Of String, Object))
    nameWithType: CollectionExtensions.AddIfNotExist(Of KeyValuePair(Of String, Object))
    fullName: Hybrid.Extensions.CollectionExtensions.AddIfNotExist(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object))
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.Hybrid.Extensions.CollectionExtensions.GetOrAdd``1(System.Func{System.Collections.Generic.KeyValuePair{System.String,System.Object},System.Boolean},System.Func{System.Collections.Generic.KeyValuePair{System.String,System.Object}})
  commentId: M:Hybrid.Extensions.CollectionExtensions.GetOrAdd``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Boolean},System.Func{``0})
  parent: Hybrid.Extensions.CollectionExtensions
  definition: Hybrid.Extensions.CollectionExtensions.GetOrAdd``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Boolean},System.Func{``0})
  name: GetOrAdd<KeyValuePair<String, Object>>(Func<KeyValuePair<String, Object>, Boolean>, Func<KeyValuePair<String, Object>>)
  nameWithType: CollectionExtensions.GetOrAdd<KeyValuePair<String, Object>>(Func<KeyValuePair<String, Object>, Boolean>, Func<KeyValuePair<String, Object>>)
  fullName: Hybrid.Extensions.CollectionExtensions.GetOrAdd<System.Collections.Generic.KeyValuePair<System.String, System.Object>>(System.Func<System.Collections.Generic.KeyValuePair<System.String, System.Object>, System.Boolean>, System.Func<System.Collections.Generic.KeyValuePair<System.String, System.Object>>)
  nameWithType.vb: CollectionExtensions.GetOrAdd(Of KeyValuePair(Of String, Object))(Func(Of KeyValuePair(Of String, Object), Boolean), Func(Of KeyValuePair(Of String, Object)))
  fullName.vb: Hybrid.Extensions.CollectionExtensions.GetOrAdd(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object))(System.Func(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object), System.Boolean), System.Func(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object)))
  name.vb: GetOrAdd(Of KeyValuePair(Of String, Object))(Func(Of KeyValuePair(Of String, Object), Boolean), Func(Of KeyValuePair(Of String, Object)))
  spec.csharp:
  - uid: Hybrid.Extensions.CollectionExtensions.GetOrAdd``1(System.Func{``0,System.Boolean},System.Func{``0})
    name: GetOrAdd<KeyValuePair<String, Object>>
    nameWithType: CollectionExtensions.GetOrAdd<KeyValuePair<String, Object>>
    fullName: Hybrid.Extensions.CollectionExtensions.GetOrAdd<System.Collections.Generic.KeyValuePair<System.String, System.Object>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.CollectionExtensions.GetOrAdd``1(System.Func{``0,System.Boolean},System.Func{``0})
    name: GetOrAdd(Of KeyValuePair(Of String, Object))
    nameWithType: CollectionExtensions.GetOrAdd(Of KeyValuePair(Of String, Object))
    fullName: Hybrid.Extensions.CollectionExtensions.GetOrAdd(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object))
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.Hybrid.Extensions.CollectionExtensions.IsNullOrEmpty``1
  commentId: M:Hybrid.Extensions.CollectionExtensions.IsNullOrEmpty``1(System.Collections.Generic.ICollection{``0})
  parent: Hybrid.Extensions.CollectionExtensions
  definition: Hybrid.Extensions.CollectionExtensions.IsNullOrEmpty``1(System.Collections.Generic.ICollection{``0})
  name: IsNullOrEmpty<KeyValuePair<String, Object>>()
  nameWithType: CollectionExtensions.IsNullOrEmpty<KeyValuePair<String, Object>>()
  fullName: Hybrid.Extensions.CollectionExtensions.IsNullOrEmpty<System.Collections.Generic.KeyValuePair<System.String, System.Object>>()
  nameWithType.vb: CollectionExtensions.IsNullOrEmpty(Of KeyValuePair(Of String, Object))()
  fullName.vb: Hybrid.Extensions.CollectionExtensions.IsNullOrEmpty(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object))()
  name.vb: IsNullOrEmpty(Of KeyValuePair(Of String, Object))()
  spec.csharp:
  - uid: Hybrid.Extensions.CollectionExtensions.IsNullOrEmpty``1
    name: IsNullOrEmpty<KeyValuePair<String, Object>>
    nameWithType: CollectionExtensions.IsNullOrEmpty<KeyValuePair<String, Object>>
    fullName: Hybrid.Extensions.CollectionExtensions.IsNullOrEmpty<System.Collections.Generic.KeyValuePair<System.String, System.Object>>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.CollectionExtensions.IsNullOrEmpty``1
    name: IsNullOrEmpty(Of KeyValuePair(Of String, Object))
    nameWithType: CollectionExtensions.IsNullOrEmpty(Of KeyValuePair(Of String, Object))
    fullName: Hybrid.Extensions.CollectionExtensions.IsNullOrEmpty(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object))
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.Hybrid.Extensions.CollectionExtensions.AddIfNotContains``1(System.Collections.Generic.KeyValuePair{System.String,System.Object})
  commentId: M:Hybrid.Extensions.CollectionExtensions.AddIfNotContains``1(System.Collections.Generic.ICollection{``0},``0)
  parent: Hybrid.Extensions.CollectionExtensions
  definition: Hybrid.Extensions.CollectionExtensions.AddIfNotContains``1(System.Collections.Generic.ICollection{``0},``0)
  name: AddIfNotContains<KeyValuePair<String, Object>>(KeyValuePair<String, Object>)
  nameWithType: CollectionExtensions.AddIfNotContains<KeyValuePair<String, Object>>(KeyValuePair<String, Object>)
  fullName: Hybrid.Extensions.CollectionExtensions.AddIfNotContains<System.Collections.Generic.KeyValuePair<System.String, System.Object>>(System.Collections.Generic.KeyValuePair<System.String, System.Object>)
  nameWithType.vb: CollectionExtensions.AddIfNotContains(Of KeyValuePair(Of String, Object))(KeyValuePair(Of String, Object))
  fullName.vb: Hybrid.Extensions.CollectionExtensions.AddIfNotContains(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object))(System.Collections.Generic.KeyValuePair(Of System.String, System.Object))
  name.vb: AddIfNotContains(Of KeyValuePair(Of String, Object))(KeyValuePair(Of String, Object))
  spec.csharp:
  - uid: Hybrid.Extensions.CollectionExtensions.AddIfNotContains``1(``0)
    name: AddIfNotContains<KeyValuePair<String, Object>>
    nameWithType: CollectionExtensions.AddIfNotContains<KeyValuePair<String, Object>>
    fullName: Hybrid.Extensions.CollectionExtensions.AddIfNotContains<System.Collections.Generic.KeyValuePair<System.String, System.Object>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.CollectionExtensions.AddIfNotContains``1(``0)
    name: AddIfNotContains(Of KeyValuePair(Of String, Object))
    nameWithType: CollectionExtensions.AddIfNotContains(Of KeyValuePair(Of String, Object))
    fullName: Hybrid.Extensions.CollectionExtensions.AddIfNotContains(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object))
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary{System.String,System.Object}.Hybrid.Extensions.DictionaryExtensions.GetOrDefault``2(System.String)
  commentId: M:Hybrid.Extensions.DictionaryExtensions.GetOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0)
  parent: Hybrid.Extensions.DictionaryExtensions
  definition: Hybrid.Extensions.DictionaryExtensions.GetOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0)
  name: GetOrDefault<String, Object>(String)
  nameWithType: DictionaryExtensions.GetOrDefault<String, Object>(String)
  fullName: Hybrid.Extensions.DictionaryExtensions.GetOrDefault<System.String, System.Object>(System.String)
  nameWithType.vb: DictionaryExtensions.GetOrDefault(Of String, Object)(String)
  fullName.vb: Hybrid.Extensions.DictionaryExtensions.GetOrDefault(Of System.String, System.Object)(System.String)
  name.vb: GetOrDefault(Of String, Object)(String)
  spec.csharp:
  - uid: Hybrid.Extensions.DictionaryExtensions.GetOrDefault``2(``0)
    name: GetOrDefault<String, Object>
    nameWithType: DictionaryExtensions.GetOrDefault<String, Object>
    fullName: Hybrid.Extensions.DictionaryExtensions.GetOrDefault<System.String, System.Object>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.DictionaryExtensions.GetOrDefault``2(``0)
    name: GetOrDefault(Of String, Object)
    nameWithType: DictionaryExtensions.GetOrDefault(Of String, Object)
    fullName: Hybrid.Extensions.DictionaryExtensions.GetOrDefault(Of System.String, System.Object)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary{System.String,System.Object}.Hybrid.Extensions.DictionaryExtensions.GetOrAdd``2(System.String,System.Func{System.Object})
  commentId: M:Hybrid.Extensions.DictionaryExtensions.GetOrAdd``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``1})
  parent: Hybrid.Extensions.DictionaryExtensions
  definition: Hybrid.Extensions.DictionaryExtensions.GetOrAdd``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``1})
  name: GetOrAdd<String, Object>(String, Func<Object>)
  nameWithType: DictionaryExtensions.GetOrAdd<String, Object>(String, Func<Object>)
  fullName: Hybrid.Extensions.DictionaryExtensions.GetOrAdd<System.String, System.Object>(System.String, System.Func<System.Object>)
  nameWithType.vb: DictionaryExtensions.GetOrAdd(Of String, Object)(String, Func(Of Object))
  fullName.vb: Hybrid.Extensions.DictionaryExtensions.GetOrAdd(Of System.String, System.Object)(System.String, System.Func(Of System.Object))
  name.vb: GetOrAdd(Of String, Object)(String, Func(Of Object))
  spec.csharp:
  - uid: Hybrid.Extensions.DictionaryExtensions.GetOrAdd``2(``0,System.Func{``1})
    name: GetOrAdd<String, Object>
    nameWithType: DictionaryExtensions.GetOrAdd<String, Object>
    fullName: Hybrid.Extensions.DictionaryExtensions.GetOrAdd<System.String, System.Object>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.DictionaryExtensions.GetOrAdd``2(``0,System.Func{``1})
    name: GetOrAdd(Of String, Object)
    nameWithType: DictionaryExtensions.GetOrAdd(Of String, Object)
    fullName: Hybrid.Extensions.DictionaryExtensions.GetOrAdd(Of System.String, System.Object)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.Hybrid.Extensions.EnumerableExtensions.JoinAsString``1(System.String)
  commentId: M:Hybrid.Extensions.EnumerableExtensions.JoinAsString``1(System.Collections.Generic.IEnumerable{``0},System.String)
  parent: Hybrid.Extensions.EnumerableExtensions
  definition: Hybrid.Extensions.EnumerableExtensions.JoinAsString``1(System.Collections.Generic.IEnumerable{``0},System.String)
  name: JoinAsString<KeyValuePair<String, Object>>(String)
  nameWithType: EnumerableExtensions.JoinAsString<KeyValuePair<String, Object>>(String)
  fullName: Hybrid.Extensions.EnumerableExtensions.JoinAsString<System.Collections.Generic.KeyValuePair<System.String, System.Object>>(System.String)
  nameWithType.vb: EnumerableExtensions.JoinAsString(Of KeyValuePair(Of String, Object))(String)
  fullName.vb: Hybrid.Extensions.EnumerableExtensions.JoinAsString(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object))(System.String)
  name.vb: JoinAsString(Of KeyValuePair(Of String, Object))(String)
  spec.csharp:
  - uid: Hybrid.Extensions.EnumerableExtensions.JoinAsString``1(System.String)
    name: JoinAsString<KeyValuePair<String, Object>>
    nameWithType: EnumerableExtensions.JoinAsString<KeyValuePair<String, Object>>
    fullName: Hybrid.Extensions.EnumerableExtensions.JoinAsString<System.Collections.Generic.KeyValuePair<System.String, System.Object>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.EnumerableExtensions.JoinAsString``1(System.String)
    name: JoinAsString(Of KeyValuePair(Of String, Object))
    nameWithType: EnumerableExtensions.JoinAsString(Of KeyValuePair(Of String, Object))
    fullName: Hybrid.Extensions.EnumerableExtensions.JoinAsString(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object))
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.Hybrid.Extensions.EnumerableExtensions.WhereIf``1(System.Boolean,System.Func{System.Collections.Generic.KeyValuePair{System.String,System.Object},System.Boolean})
  commentId: M:Hybrid.Extensions.EnumerableExtensions.WhereIf``1(System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Func{``0,System.Boolean})
  parent: Hybrid.Extensions.EnumerableExtensions
  definition: Hybrid.Extensions.EnumerableExtensions.WhereIf``1(System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Func{``0,System.Boolean})
  name: WhereIf<KeyValuePair<String, Object>>(Boolean, Func<KeyValuePair<String, Object>, Boolean>)
  nameWithType: EnumerableExtensions.WhereIf<KeyValuePair<String, Object>>(Boolean, Func<KeyValuePair<String, Object>, Boolean>)
  fullName: Hybrid.Extensions.EnumerableExtensions.WhereIf<System.Collections.Generic.KeyValuePair<System.String, System.Object>>(System.Boolean, System.Func<System.Collections.Generic.KeyValuePair<System.String, System.Object>, System.Boolean>)
  nameWithType.vb: EnumerableExtensions.WhereIf(Of KeyValuePair(Of String, Object))(Boolean, Func(Of KeyValuePair(Of String, Object), Boolean))
  fullName.vb: Hybrid.Extensions.EnumerableExtensions.WhereIf(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object))(System.Boolean, System.Func(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object), System.Boolean))
  name.vb: WhereIf(Of KeyValuePair(Of String, Object))(Boolean, Func(Of KeyValuePair(Of String, Object), Boolean))
  spec.csharp:
  - uid: Hybrid.Extensions.EnumerableExtensions.WhereIf``1(System.Boolean,System.Func{``0,System.Boolean})
    name: WhereIf<KeyValuePair<String, Object>>
    nameWithType: EnumerableExtensions.WhereIf<KeyValuePair<String, Object>>
    fullName: Hybrid.Extensions.EnumerableExtensions.WhereIf<System.Collections.Generic.KeyValuePair<System.String, System.Object>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.EnumerableExtensions.WhereIf``1(System.Boolean,System.Func{``0,System.Boolean})
    name: WhereIf(Of KeyValuePair(Of String, Object))
    nameWithType: EnumerableExtensions.WhereIf(Of KeyValuePair(Of String, Object))
    fullName: Hybrid.Extensions.EnumerableExtensions.WhereIf(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object))
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.Hybrid.Extensions.EnumerableExtensions.WhereIf``1(System.Boolean,System.Func{System.Collections.Generic.KeyValuePair{System.String,System.Object},System.Int32,System.Boolean})
  commentId: M:Hybrid.Extensions.EnumerableExtensions.WhereIf``1(System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Func{``0,System.Int32,System.Boolean})
  parent: Hybrid.Extensions.EnumerableExtensions
  definition: Hybrid.Extensions.EnumerableExtensions.WhereIf``1(System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Func{``0,System.Int32,System.Boolean})
  name: WhereIf<KeyValuePair<String, Object>>(Boolean, Func<KeyValuePair<String, Object>, Int32, Boolean>)
  nameWithType: EnumerableExtensions.WhereIf<KeyValuePair<String, Object>>(Boolean, Func<KeyValuePair<String, Object>, Int32, Boolean>)
  fullName: Hybrid.Extensions.EnumerableExtensions.WhereIf<System.Collections.Generic.KeyValuePair<System.String, System.Object>>(System.Boolean, System.Func<System.Collections.Generic.KeyValuePair<System.String, System.Object>, System.Int32, System.Boolean>)
  nameWithType.vb: EnumerableExtensions.WhereIf(Of KeyValuePair(Of String, Object))(Boolean, Func(Of KeyValuePair(Of String, Object), Int32, Boolean))
  fullName.vb: Hybrid.Extensions.EnumerableExtensions.WhereIf(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object))(System.Boolean, System.Func(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object), System.Int32, System.Boolean))
  name.vb: WhereIf(Of KeyValuePair(Of String, Object))(Boolean, Func(Of KeyValuePair(Of String, Object), Int32, Boolean))
  spec.csharp:
  - uid: Hybrid.Extensions.EnumerableExtensions.WhereIf``1(System.Boolean,System.Func{``0,System.Int32,System.Boolean})
    name: WhereIf<KeyValuePair<String, Object>>
    nameWithType: EnumerableExtensions.WhereIf<KeyValuePair<String, Object>>
    fullName: Hybrid.Extensions.EnumerableExtensions.WhereIf<System.Collections.Generic.KeyValuePair<System.String, System.Object>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.EnumerableExtensions.WhereIf``1(System.Boolean,System.Func{``0,System.Int32,System.Boolean})
    name: WhereIf(Of KeyValuePair(Of String, Object))
    nameWithType: EnumerableExtensions.WhereIf(Of KeyValuePair(Of String, Object))
    fullName: Hybrid.Extensions.EnumerableExtensions.WhereIf(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object))
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.Hybrid.Extensions.EnumerableExtensions.Shuffle``1
  commentId: M:Hybrid.Extensions.EnumerableExtensions.Shuffle``1(System.Collections.Generic.IEnumerable{``0})
  parent: Hybrid.Extensions.EnumerableExtensions
  definition: Hybrid.Extensions.EnumerableExtensions.Shuffle``1(System.Collections.Generic.IEnumerable{``0})
  name: Shuffle<KeyValuePair<String, Object>>()
  nameWithType: EnumerableExtensions.Shuffle<KeyValuePair<String, Object>>()
  fullName: Hybrid.Extensions.EnumerableExtensions.Shuffle<System.Collections.Generic.KeyValuePair<System.String, System.Object>>()
  nameWithType.vb: EnumerableExtensions.Shuffle(Of KeyValuePair(Of String, Object))()
  fullName.vb: Hybrid.Extensions.EnumerableExtensions.Shuffle(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object))()
  name.vb: Shuffle(Of KeyValuePair(Of String, Object))()
  spec.csharp:
  - uid: Hybrid.Extensions.EnumerableExtensions.Shuffle``1
    name: Shuffle<KeyValuePair<String, Object>>
    nameWithType: EnumerableExtensions.Shuffle<KeyValuePair<String, Object>>
    fullName: Hybrid.Extensions.EnumerableExtensions.Shuffle<System.Collections.Generic.KeyValuePair<System.String, System.Object>>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.EnumerableExtensions.Shuffle``1
    name: Shuffle(Of KeyValuePair(Of String, Object))
    nameWithType: EnumerableExtensions.Shuffle(Of KeyValuePair(Of String, Object))
    fullName: Hybrid.Extensions.EnumerableExtensions.Shuffle(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object))
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.Hybrid.Extensions.EnumerableExtensions.ExpandAndToString``1(System.String)
  commentId: M:Hybrid.Extensions.EnumerableExtensions.ExpandAndToString``1(System.Collections.Generic.IEnumerable{``0},System.String)
  parent: Hybrid.Extensions.EnumerableExtensions
  definition: Hybrid.Extensions.EnumerableExtensions.ExpandAndToString``1(System.Collections.Generic.IEnumerable{``0},System.String)
  name: ExpandAndToString<KeyValuePair<String, Object>>(String)
  nameWithType: EnumerableExtensions.ExpandAndToString<KeyValuePair<String, Object>>(String)
  fullName: Hybrid.Extensions.EnumerableExtensions.ExpandAndToString<System.Collections.Generic.KeyValuePair<System.String, System.Object>>(System.String)
  nameWithType.vb: EnumerableExtensions.ExpandAndToString(Of KeyValuePair(Of String, Object))(String)
  fullName.vb: Hybrid.Extensions.EnumerableExtensions.ExpandAndToString(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object))(System.String)
  name.vb: ExpandAndToString(Of KeyValuePair(Of String, Object))(String)
  spec.csharp:
  - uid: Hybrid.Extensions.EnumerableExtensions.ExpandAndToString``1(System.String)
    name: ExpandAndToString<KeyValuePair<String, Object>>
    nameWithType: EnumerableExtensions.ExpandAndToString<KeyValuePair<String, Object>>
    fullName: Hybrid.Extensions.EnumerableExtensions.ExpandAndToString<System.Collections.Generic.KeyValuePair<System.String, System.Object>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.EnumerableExtensions.ExpandAndToString``1(System.String)
    name: ExpandAndToString(Of KeyValuePair(Of String, Object))
    nameWithType: EnumerableExtensions.ExpandAndToString(Of KeyValuePair(Of String, Object))
    fullName: Hybrid.Extensions.EnumerableExtensions.ExpandAndToString(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object))
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.Hybrid.Extensions.EnumerableExtensions.ExpandAndToString``1(System.Func{System.Collections.Generic.KeyValuePair{System.String,System.Object},System.String},System.String)
  commentId: M:Hybrid.Extensions.EnumerableExtensions.ExpandAndToString``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.String)
  parent: Hybrid.Extensions.EnumerableExtensions
  definition: Hybrid.Extensions.EnumerableExtensions.ExpandAndToString``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.String)
  name: ExpandAndToString<KeyValuePair<String, Object>>(Func<KeyValuePair<String, Object>, String>, String)
  nameWithType: EnumerableExtensions.ExpandAndToString<KeyValuePair<String, Object>>(Func<KeyValuePair<String, Object>, String>, String)
  fullName: Hybrid.Extensions.EnumerableExtensions.ExpandAndToString<System.Collections.Generic.KeyValuePair<System.String, System.Object>>(System.Func<System.Collections.Generic.KeyValuePair<System.String, System.Object>, System.String>, System.String)
  nameWithType.vb: EnumerableExtensions.ExpandAndToString(Of KeyValuePair(Of String, Object))(Func(Of KeyValuePair(Of String, Object), String), String)
  fullName.vb: Hybrid.Extensions.EnumerableExtensions.ExpandAndToString(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object))(System.Func(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object), System.String), System.String)
  name.vb: ExpandAndToString(Of KeyValuePair(Of String, Object))(Func(Of KeyValuePair(Of String, Object), String), String)
  spec.csharp:
  - uid: Hybrid.Extensions.EnumerableExtensions.ExpandAndToString``1(System.Func{``0,System.String},System.String)
    name: ExpandAndToString<KeyValuePair<String, Object>>
    nameWithType: EnumerableExtensions.ExpandAndToString<KeyValuePair<String, Object>>
    fullName: Hybrid.Extensions.EnumerableExtensions.ExpandAndToString<System.Collections.Generic.KeyValuePair<System.String, System.Object>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.EnumerableExtensions.ExpandAndToString``1(System.Func{``0,System.String},System.String)
    name: ExpandAndToString(Of KeyValuePair(Of String, Object))
    nameWithType: EnumerableExtensions.ExpandAndToString(Of KeyValuePair(Of String, Object))
    fullName: Hybrid.Extensions.EnumerableExtensions.ExpandAndToString(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object))
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.Hybrid.Extensions.EnumerableExtensions.IsEmpty``1
  commentId: M:Hybrid.Extensions.EnumerableExtensions.IsEmpty``1(System.Collections.Generic.IEnumerable{``0})
  parent: Hybrid.Extensions.EnumerableExtensions
  definition: Hybrid.Extensions.EnumerableExtensions.IsEmpty``1(System.Collections.Generic.IEnumerable{``0})
  name: IsEmpty<KeyValuePair<String, Object>>()
  nameWithType: EnumerableExtensions.IsEmpty<KeyValuePair<String, Object>>()
  fullName: Hybrid.Extensions.EnumerableExtensions.IsEmpty<System.Collections.Generic.KeyValuePair<System.String, System.Object>>()
  nameWithType.vb: EnumerableExtensions.IsEmpty(Of KeyValuePair(Of String, Object))()
  fullName.vb: Hybrid.Extensions.EnumerableExtensions.IsEmpty(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object))()
  name.vb: IsEmpty(Of KeyValuePair(Of String, Object))()
  spec.csharp:
  - uid: Hybrid.Extensions.EnumerableExtensions.IsEmpty``1
    name: IsEmpty<KeyValuePair<String, Object>>
    nameWithType: EnumerableExtensions.IsEmpty<KeyValuePair<String, Object>>
    fullName: Hybrid.Extensions.EnumerableExtensions.IsEmpty<System.Collections.Generic.KeyValuePair<System.String, System.Object>>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.EnumerableExtensions.IsEmpty``1
    name: IsEmpty(Of KeyValuePair(Of String, Object))
    nameWithType: EnumerableExtensions.IsEmpty(Of KeyValuePair(Of String, Object))
    fullName: Hybrid.Extensions.EnumerableExtensions.IsEmpty(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object))
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.Hybrid.Extensions.EnumerableExtensions.WhereIf``1(System.Func{System.Collections.Generic.KeyValuePair{System.String,System.Object},System.Boolean},System.Boolean)
  commentId: M:Hybrid.Extensions.EnumerableExtensions.WhereIf``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Boolean)
  parent: Hybrid.Extensions.EnumerableExtensions
  definition: Hybrid.Extensions.EnumerableExtensions.WhereIf``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Boolean)
  name: WhereIf<KeyValuePair<String, Object>>(Func<KeyValuePair<String, Object>, Boolean>, Boolean)
  nameWithType: EnumerableExtensions.WhereIf<KeyValuePair<String, Object>>(Func<KeyValuePair<String, Object>, Boolean>, Boolean)
  fullName: Hybrid.Extensions.EnumerableExtensions.WhereIf<System.Collections.Generic.KeyValuePair<System.String, System.Object>>(System.Func<System.Collections.Generic.KeyValuePair<System.String, System.Object>, System.Boolean>, System.Boolean)
  nameWithType.vb: EnumerableExtensions.WhereIf(Of KeyValuePair(Of String, Object))(Func(Of KeyValuePair(Of String, Object), Boolean), Boolean)
  fullName.vb: Hybrid.Extensions.EnumerableExtensions.WhereIf(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object))(System.Func(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object), System.Boolean), System.Boolean)
  name.vb: WhereIf(Of KeyValuePair(Of String, Object))(Func(Of KeyValuePair(Of String, Object), Boolean), Boolean)
  spec.csharp:
  - uid: Hybrid.Extensions.EnumerableExtensions.WhereIf``1(System.Func{``0,System.Boolean},System.Boolean)
    name: WhereIf<KeyValuePair<String, Object>>
    nameWithType: EnumerableExtensions.WhereIf<KeyValuePair<String, Object>>
    fullName: Hybrid.Extensions.EnumerableExtensions.WhereIf<System.Collections.Generic.KeyValuePair<System.String, System.Object>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.EnumerableExtensions.WhereIf``1(System.Func{``0,System.Boolean},System.Boolean)
    name: WhereIf(Of KeyValuePair(Of String, Object))
    nameWithType: EnumerableExtensions.WhereIf(Of KeyValuePair(Of String, Object))
    fullName: Hybrid.Extensions.EnumerableExtensions.WhereIf(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object))
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.Hybrid.Extensions.EnumerableExtensions.DistinctBy``2(System.Func{System.Collections.Generic.KeyValuePair{System.String,System.Object},{TKey}})
  commentId: M:Hybrid.Extensions.EnumerableExtensions.DistinctBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  parent: Hybrid.Extensions.EnumerableExtensions
  definition: Hybrid.Extensions.EnumerableExtensions.DistinctBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  name: DistinctBy<KeyValuePair<String, Object>, TKey>(Func<KeyValuePair<String, Object>, TKey>)
  nameWithType: EnumerableExtensions.DistinctBy<KeyValuePair<String, Object>, TKey>(Func<KeyValuePair<String, Object>, TKey>)
  fullName: Hybrid.Extensions.EnumerableExtensions.DistinctBy<System.Collections.Generic.KeyValuePair<System.String, System.Object>, TKey>(System.Func<System.Collections.Generic.KeyValuePair<System.String, System.Object>, TKey>)
  nameWithType.vb: EnumerableExtensions.DistinctBy(Of KeyValuePair(Of String, Object), TKey)(Func(Of KeyValuePair(Of String, Object), TKey))
  fullName.vb: Hybrid.Extensions.EnumerableExtensions.DistinctBy(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object), TKey)(System.Func(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object), TKey))
  name.vb: DistinctBy(Of KeyValuePair(Of String, Object), TKey)(Func(Of KeyValuePair(Of String, Object), TKey))
  spec.csharp:
  - uid: Hybrid.Extensions.EnumerableExtensions.DistinctBy``2(System.Func{``0,``1})
    name: DistinctBy<KeyValuePair<String, Object>, TKey>
    nameWithType: EnumerableExtensions.DistinctBy<KeyValuePair<String, Object>, TKey>
    fullName: Hybrid.Extensions.EnumerableExtensions.DistinctBy<System.Collections.Generic.KeyValuePair<System.String, System.Object>, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.EnumerableExtensions.DistinctBy``2(System.Func{``0,``1})
    name: DistinctBy(Of KeyValuePair(Of String, Object), TKey)
    nameWithType: EnumerableExtensions.DistinctBy(Of KeyValuePair(Of String, Object), TKey)
    fullName: Hybrid.Extensions.EnumerableExtensions.DistinctBy(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object), TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.Hybrid.Extensions.EnumerableExtensions.OrderBy``1(System.String,System.ComponentModel.ListSortDirection)
  commentId: M:Hybrid.Extensions.EnumerableExtensions.OrderBy``1(System.Collections.Generic.IEnumerable{``0},System.String,System.ComponentModel.ListSortDirection)
  parent: Hybrid.Extensions.EnumerableExtensions
  definition: Hybrid.Extensions.EnumerableExtensions.OrderBy``1(System.Collections.Generic.IEnumerable{``0},System.String,System.ComponentModel.ListSortDirection)
  name: OrderBy<KeyValuePair<String, Object>>(String, ListSortDirection)
  nameWithType: EnumerableExtensions.OrderBy<KeyValuePair<String, Object>>(String, ListSortDirection)
  fullName: Hybrid.Extensions.EnumerableExtensions.OrderBy<System.Collections.Generic.KeyValuePair<System.String, System.Object>>(System.String, System.ComponentModel.ListSortDirection)
  nameWithType.vb: EnumerableExtensions.OrderBy(Of KeyValuePair(Of String, Object))(String, ListSortDirection)
  fullName.vb: Hybrid.Extensions.EnumerableExtensions.OrderBy(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object))(System.String, System.ComponentModel.ListSortDirection)
  name.vb: OrderBy(Of KeyValuePair(Of String, Object))(String, ListSortDirection)
  spec.csharp:
  - uid: Hybrid.Extensions.EnumerableExtensions.OrderBy``1(System.String,System.ComponentModel.ListSortDirection)
    name: OrderBy<KeyValuePair<String, Object>>
    nameWithType: EnumerableExtensions.OrderBy<KeyValuePair<String, Object>>
    fullName: Hybrid.Extensions.EnumerableExtensions.OrderBy<System.Collections.Generic.KeyValuePair<System.String, System.Object>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.ComponentModel.ListSortDirection
    name: ListSortDirection
    nameWithType: ListSortDirection
    fullName: System.ComponentModel.ListSortDirection
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.EnumerableExtensions.OrderBy``1(System.String,System.ComponentModel.ListSortDirection)
    name: OrderBy(Of KeyValuePair(Of String, Object))
    nameWithType: EnumerableExtensions.OrderBy(Of KeyValuePair(Of String, Object))
    fullName: Hybrid.Extensions.EnumerableExtensions.OrderBy(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object))
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.ComponentModel.ListSortDirection
    name: ListSortDirection
    nameWithType: ListSortDirection
    fullName: System.ComponentModel.ListSortDirection
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.Hybrid.Extensions.EnumerableExtensions.OrderBy``1(Hybrid.Filter.SortCondition)
  commentId: M:Hybrid.Extensions.EnumerableExtensions.OrderBy``1(System.Collections.Generic.IEnumerable{``0},Hybrid.Filter.SortCondition)
  parent: Hybrid.Extensions.EnumerableExtensions
  definition: Hybrid.Extensions.EnumerableExtensions.OrderBy``1(System.Collections.Generic.IEnumerable{``0},Hybrid.Filter.SortCondition)
  name: OrderBy<KeyValuePair<String, Object>>(SortCondition)
  nameWithType: EnumerableExtensions.OrderBy<KeyValuePair<String, Object>>(SortCondition)
  fullName: Hybrid.Extensions.EnumerableExtensions.OrderBy<System.Collections.Generic.KeyValuePair<System.String, System.Object>>(Hybrid.Filter.SortCondition)
  nameWithType.vb: EnumerableExtensions.OrderBy(Of KeyValuePair(Of String, Object))(SortCondition)
  fullName.vb: Hybrid.Extensions.EnumerableExtensions.OrderBy(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object))(Hybrid.Filter.SortCondition)
  name.vb: OrderBy(Of KeyValuePair(Of String, Object))(SortCondition)
  spec.csharp:
  - uid: Hybrid.Extensions.EnumerableExtensions.OrderBy``1(Hybrid.Filter.SortCondition)
    name: OrderBy<KeyValuePair<String, Object>>
    nameWithType: EnumerableExtensions.OrderBy<KeyValuePair<String, Object>>
    fullName: Hybrid.Extensions.EnumerableExtensions.OrderBy<System.Collections.Generic.KeyValuePair<System.String, System.Object>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Hybrid.Filter.SortCondition
    name: SortCondition
    nameWithType: SortCondition
    fullName: Hybrid.Filter.SortCondition
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.EnumerableExtensions.OrderBy``1(Hybrid.Filter.SortCondition)
    name: OrderBy(Of KeyValuePair(Of String, Object))
    nameWithType: EnumerableExtensions.OrderBy(Of KeyValuePair(Of String, Object))
    fullName: Hybrid.Extensions.EnumerableExtensions.OrderBy(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object))
  - name: (
    nameWithType: (
    fullName: (
  - uid: Hybrid.Filter.SortCondition
    name: SortCondition
    nameWithType: SortCondition
    fullName: Hybrid.Filter.SortCondition
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.Hybrid.Extensions.EnumerableExtensions.OrderBy``1(Hybrid.Filter.SortCondition{System.Collections.Generic.KeyValuePair{System.String,System.Object}})
  commentId: M:Hybrid.Extensions.EnumerableExtensions.OrderBy``1(System.Collections.Generic.IEnumerable{``0},Hybrid.Filter.SortCondition{``0})
  parent: Hybrid.Extensions.EnumerableExtensions
  definition: Hybrid.Extensions.EnumerableExtensions.OrderBy``1(System.Collections.Generic.IEnumerable{``0},Hybrid.Filter.SortCondition{``0})
  name: OrderBy<KeyValuePair<String, Object>>(SortCondition<KeyValuePair<String, Object>>)
  nameWithType: EnumerableExtensions.OrderBy<KeyValuePair<String, Object>>(SortCondition<KeyValuePair<String, Object>>)
  fullName: Hybrid.Extensions.EnumerableExtensions.OrderBy<System.Collections.Generic.KeyValuePair<System.String, System.Object>>(Hybrid.Filter.SortCondition<System.Collections.Generic.KeyValuePair<System.String, System.Object>>)
  nameWithType.vb: EnumerableExtensions.OrderBy(Of KeyValuePair(Of String, Object))(SortCondition(Of KeyValuePair(Of String, Object)))
  fullName.vb: Hybrid.Extensions.EnumerableExtensions.OrderBy(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object))(Hybrid.Filter.SortCondition(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object)))
  name.vb: OrderBy(Of KeyValuePair(Of String, Object))(SortCondition(Of KeyValuePair(Of String, Object)))
  spec.csharp:
  - uid: Hybrid.Extensions.EnumerableExtensions.OrderBy``1(Hybrid.Filter.SortCondition{``0})
    name: OrderBy<KeyValuePair<String, Object>>
    nameWithType: EnumerableExtensions.OrderBy<KeyValuePair<String, Object>>
    fullName: Hybrid.Extensions.EnumerableExtensions.OrderBy<System.Collections.Generic.KeyValuePair<System.String, System.Object>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Hybrid.Filter.SortCondition`1
    name: SortCondition
    nameWithType: SortCondition
    fullName: Hybrid.Filter.SortCondition
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.EnumerableExtensions.OrderBy``1(Hybrid.Filter.SortCondition{``0})
    name: OrderBy(Of KeyValuePair(Of String, Object))
    nameWithType: EnumerableExtensions.OrderBy(Of KeyValuePair(Of String, Object))
    fullName: Hybrid.Extensions.EnumerableExtensions.OrderBy(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object))
  - name: (
    nameWithType: (
    fullName: (
  - uid: Hybrid.Filter.SortCondition`1
    name: SortCondition
    nameWithType: SortCondition
    fullName: Hybrid.Filter.SortCondition
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.Hybrid.Extensions.EnumerableExtensions.OrderByPrefixes``1(System.Func{System.Collections.Generic.KeyValuePair{System.String,System.Object},System.String},System.String[])
  commentId: M:Hybrid.Extensions.EnumerableExtensions.OrderByPrefixes``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.String[])
  parent: Hybrid.Extensions.EnumerableExtensions
  definition: Hybrid.Extensions.EnumerableExtensions.OrderByPrefixes``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.String[])
  name: OrderByPrefixes<KeyValuePair<String, Object>>(Func<KeyValuePair<String, Object>, String>, String[])
  nameWithType: EnumerableExtensions.OrderByPrefixes<KeyValuePair<String, Object>>(Func<KeyValuePair<String, Object>, String>, String[])
  fullName: Hybrid.Extensions.EnumerableExtensions.OrderByPrefixes<System.Collections.Generic.KeyValuePair<System.String, System.Object>>(System.Func<System.Collections.Generic.KeyValuePair<System.String, System.Object>, System.String>, System.String[])
  nameWithType.vb: EnumerableExtensions.OrderByPrefixes(Of KeyValuePair(Of String, Object))(Func(Of KeyValuePair(Of String, Object), String), String())
  fullName.vb: Hybrid.Extensions.EnumerableExtensions.OrderByPrefixes(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object))(System.Func(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object), System.String), System.String())
  name.vb: OrderByPrefixes(Of KeyValuePair(Of String, Object))(Func(Of KeyValuePair(Of String, Object), String), String())
  spec.csharp:
  - uid: Hybrid.Extensions.EnumerableExtensions.OrderByPrefixes``1(System.Func{``0,System.String},System.String[])
    name: OrderByPrefixes<KeyValuePair<String, Object>>
    nameWithType: EnumerableExtensions.OrderByPrefixes<KeyValuePair<String, Object>>
    fullName: Hybrid.Extensions.EnumerableExtensions.OrderByPrefixes<System.Collections.Generic.KeyValuePair<System.String, System.Object>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.EnumerableExtensions.OrderByPrefixes``1(System.Func{``0,System.String},System.String[])
    name: OrderByPrefixes(Of KeyValuePair(Of String, Object))
    nameWithType: EnumerableExtensions.OrderByPrefixes(Of KeyValuePair(Of String, Object))
    fullName: Hybrid.Extensions.EnumerableExtensions.OrderByPrefixes(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object))
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Extensions.ObjectExtensions.CastTo(System.Type)
  commentId: M:Hybrid.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
  parent: Hybrid.Extensions.ObjectExtensions
  definition: Hybrid.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
  name: CastTo(Type)
  nameWithType: ObjectExtensions.CastTo(Type)
  fullName: Hybrid.Extensions.ObjectExtensions.CastTo(System.Type)
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo(System.Type)
    name: CastTo
    nameWithType: ObjectExtensions.CastTo
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo(System.Type)
    name: CastTo
    nameWithType: ObjectExtensions.CastTo
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Extensions.ObjectExtensions.CastTo``1
  commentId: M:Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object)
  parent: Hybrid.Extensions.ObjectExtensions
  definition: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object)
  name: CastTo<T>()
  nameWithType: ObjectExtensions.CastTo<T>()
  fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>()
  nameWithType.vb: ObjectExtensions.CastTo(Of T)()
  fullName.vb: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)()
  name.vb: CastTo(Of T)()
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1
    name: CastTo<T>
    nameWithType: ObjectExtensions.CastTo<T>
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1
    name: CastTo(Of T)
    nameWithType: ObjectExtensions.CastTo(Of T)
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Extensions.ObjectExtensions.CastTo``1({T})
  commentId: M:Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
  parent: Hybrid.Extensions.ObjectExtensions
  definition: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
  name: CastTo<T>(T)
  nameWithType: ObjectExtensions.CastTo<T>(T)
  fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>(T)
  nameWithType.vb: ObjectExtensions.CastTo(Of T)(T)
  fullName.vb: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)(T)
  name.vb: CastTo(Of T)(T)
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(``0)
    name: CastTo<T>
    nameWithType: ObjectExtensions.CastTo<T>
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(``0)
    name: CastTo(Of T)
    nameWithType: ObjectExtensions.CastTo(Of T)
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Dependency.ScopedDictionary.Hybrid.Extensions.ObjectExtensions.IsIn``1(Hybrid.Dependency.ScopedDictionary[])
  commentId: M:Hybrid.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
  parent: Hybrid.Extensions.ObjectExtensions
  definition: Hybrid.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
  name: IsIn<ScopedDictionary>(ScopedDictionary[])
  nameWithType: ObjectExtensions.IsIn<ScopedDictionary>(ScopedDictionary[])
  fullName: Hybrid.Extensions.ObjectExtensions.IsIn<Hybrid.Dependency.ScopedDictionary>(Hybrid.Dependency.ScopedDictionary[])
  nameWithType.vb: ObjectExtensions.IsIn(Of ScopedDictionary)(ScopedDictionary())
  fullName.vb: Hybrid.Extensions.ObjectExtensions.IsIn(Of Hybrid.Dependency.ScopedDictionary)(Hybrid.Dependency.ScopedDictionary())
  name.vb: IsIn(Of ScopedDictionary)(ScopedDictionary())
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.IsIn``1(``0[])
    name: IsIn<ScopedDictionary>
    nameWithType: ObjectExtensions.IsIn<ScopedDictionary>
    fullName: Hybrid.Extensions.ObjectExtensions.IsIn<Hybrid.Dependency.ScopedDictionary>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Hybrid.Dependency.ScopedDictionary
    name: ScopedDictionary
    nameWithType: ScopedDictionary
    fullName: Hybrid.Dependency.ScopedDictionary
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.IsIn``1(``0[])
    name: IsIn(Of ScopedDictionary)
    nameWithType: ObjectExtensions.IsIn(Of ScopedDictionary)
    fullName: Hybrid.Extensions.ObjectExtensions.IsIn(Of Hybrid.Dependency.ScopedDictionary)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Hybrid.Dependency.ScopedDictionary
    name: ScopedDictionary
    nameWithType: ScopedDictionary
    fullName: Hybrid.Dependency.ScopedDictionary
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Extensions.ObjectExtensions.ToDynamic
  commentId: M:Hybrid.Extensions.ObjectExtensions.ToDynamic(System.Object)
  parent: Hybrid.Extensions.ObjectExtensions
  definition: Hybrid.Extensions.ObjectExtensions.ToDynamic(System.Object)
  name: ToDynamic()
  nameWithType: ObjectExtensions.ToDynamic()
  fullName: Hybrid.Extensions.ObjectExtensions.ToDynamic()
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.ToDynamic
    name: ToDynamic
    nameWithType: ObjectExtensions.ToDynamic
    fullName: Hybrid.Extensions.ObjectExtensions.ToDynamic
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.ToDynamic
    name: ToDynamic
    nameWithType: ObjectExtensions.ToDynamic
    fullName: Hybrid.Extensions.ObjectExtensions.ToDynamic
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Dependency.ScopedDictionary.Hybrid.Extensions.ObjectExtensions.DeepClone``1
  commentId: M:Hybrid.Extensions.ObjectExtensions.DeepClone``1(``0)
  parent: Hybrid.Extensions.ObjectExtensions
  definition: Hybrid.Extensions.ObjectExtensions.DeepClone``1(``0)
  name: DeepClone<ScopedDictionary>()
  nameWithType: ObjectExtensions.DeepClone<ScopedDictionary>()
  fullName: Hybrid.Extensions.ObjectExtensions.DeepClone<Hybrid.Dependency.ScopedDictionary>()
  nameWithType.vb: ObjectExtensions.DeepClone(Of ScopedDictionary)()
  fullName.vb: Hybrid.Extensions.ObjectExtensions.DeepClone(Of Hybrid.Dependency.ScopedDictionary)()
  name.vb: DeepClone(Of ScopedDictionary)()
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.DeepClone``1
    name: DeepClone<ScopedDictionary>
    nameWithType: ObjectExtensions.DeepClone<ScopedDictionary>
    fullName: Hybrid.Extensions.ObjectExtensions.DeepClone<Hybrid.Dependency.ScopedDictionary>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.DeepClone``1
    name: DeepClone(Of ScopedDictionary)
    nameWithType: ObjectExtensions.DeepClone(Of ScopedDictionary)
    fullName: Hybrid.Extensions.ObjectExtensions.DeepClone(Of Hybrid.Dependency.ScopedDictionary)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Dependency.ScopedDictionary.Hybrid.Extensions.ParameterCheckExtensions.Required``1(System.Func{Hybrid.Dependency.ScopedDictionary,System.Boolean},System.String)
  commentId: M:Hybrid.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
  parent: Hybrid.Extensions.ParameterCheckExtensions
  definition: Hybrid.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
  name: Required<ScopedDictionary>(Func<ScopedDictionary, Boolean>, String)
  nameWithType: ParameterCheckExtensions.Required<ScopedDictionary>(Func<ScopedDictionary, Boolean>, String)
  fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<Hybrid.Dependency.ScopedDictionary>(System.Func<Hybrid.Dependency.ScopedDictionary, System.Boolean>, System.String)
  nameWithType.vb: ParameterCheckExtensions.Required(Of ScopedDictionary)(Func(Of ScopedDictionary, Boolean), String)
  fullName.vb: Hybrid.Extensions.ParameterCheckExtensions.Required(Of Hybrid.Dependency.ScopedDictionary)(System.Func(Of Hybrid.Dependency.ScopedDictionary, System.Boolean), System.String)
  name.vb: Required(Of ScopedDictionary)(Func(Of ScopedDictionary, Boolean), String)
  spec.csharp:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``1(System.Func{``0,System.Boolean},System.String)
    name: Required<ScopedDictionary>
    nameWithType: ParameterCheckExtensions.Required<ScopedDictionary>
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<Hybrid.Dependency.ScopedDictionary>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Dependency.ScopedDictionary
    name: ScopedDictionary
    nameWithType: ScopedDictionary
    fullName: Hybrid.Dependency.ScopedDictionary
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``1(System.Func{``0,System.Boolean},System.String)
    name: Required(Of ScopedDictionary)
    nameWithType: ParameterCheckExtensions.Required(Of ScopedDictionary)
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required(Of Hybrid.Dependency.ScopedDictionary)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Dependency.ScopedDictionary
    name: ScopedDictionary
    nameWithType: ScopedDictionary
    fullName: Hybrid.Dependency.ScopedDictionary
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Dependency.ScopedDictionary.Hybrid.Extensions.ParameterCheckExtensions.Required``2(System.Func{Hybrid.Dependency.ScopedDictionary,System.Boolean},System.String)
  commentId: M:Hybrid.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
  parent: Hybrid.Extensions.ParameterCheckExtensions
  definition: Hybrid.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
  name: Required<ScopedDictionary, TException>(Func<ScopedDictionary, Boolean>, String)
  nameWithType: ParameterCheckExtensions.Required<ScopedDictionary, TException>(Func<ScopedDictionary, Boolean>, String)
  fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<Hybrid.Dependency.ScopedDictionary, TException>(System.Func<Hybrid.Dependency.ScopedDictionary, System.Boolean>, System.String)
  nameWithType.vb: ParameterCheckExtensions.Required(Of ScopedDictionary, TException)(Func(Of ScopedDictionary, Boolean), String)
  fullName.vb: Hybrid.Extensions.ParameterCheckExtensions.Required(Of Hybrid.Dependency.ScopedDictionary, TException)(System.Func(Of Hybrid.Dependency.ScopedDictionary, System.Boolean), System.String)
  name.vb: Required(Of ScopedDictionary, TException)(Func(Of ScopedDictionary, Boolean), String)
  spec.csharp:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``2(System.Func{``0,System.Boolean},System.String)
    name: Required<ScopedDictionary, TException>
    nameWithType: ParameterCheckExtensions.Required<ScopedDictionary, TException>
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<Hybrid.Dependency.ScopedDictionary, TException>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Dependency.ScopedDictionary
    name: ScopedDictionary
    nameWithType: ScopedDictionary
    fullName: Hybrid.Dependency.ScopedDictionary
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``2(System.Func{``0,System.Boolean},System.String)
    name: Required(Of ScopedDictionary, TException)
    nameWithType: ParameterCheckExtensions.Required(Of ScopedDictionary, TException)
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required(Of Hybrid.Dependency.ScopedDictionary, TException)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Dependency.ScopedDictionary
    name: ScopedDictionary
    nameWithType: ScopedDictionary
    fullName: Hybrid.Dependency.ScopedDictionary
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Dependency.ScopedDictionary.Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(System.String)
  commentId: M:Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
  parent: Hybrid.Extensions.ParameterCheckExtensions
  definition: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
  name: CheckNotNull<ScopedDictionary>(String)
  nameWithType: ParameterCheckExtensions.CheckNotNull<ScopedDictionary>(String)
  fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull<Hybrid.Dependency.ScopedDictionary>(System.String)
  nameWithType.vb: ParameterCheckExtensions.CheckNotNull(Of ScopedDictionary)(String)
  fullName.vb: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull(Of Hybrid.Dependency.ScopedDictionary)(System.String)
  name.vb: CheckNotNull(Of ScopedDictionary)(String)
  spec.csharp:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(System.String)
    name: CheckNotNull<ScopedDictionary>
    nameWithType: ParameterCheckExtensions.CheckNotNull<ScopedDictionary>
    fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull<Hybrid.Dependency.ScopedDictionary>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(System.String)
    name: CheckNotNull(Of ScopedDictionary)
    nameWithType: ParameterCheckExtensions.CheckNotNull(Of ScopedDictionary)
    fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull(Of Hybrid.Dependency.ScopedDictionary)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.Hybrid.Extensions.ParameterCheckExtensions.CheckNotNullOrEmpty``1(System.String)
  commentId: M:Hybrid.Extensions.ParameterCheckExtensions.CheckNotNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0},System.String)
  parent: Hybrid.Extensions.ParameterCheckExtensions
  definition: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0},System.String)
  name: CheckNotNullOrEmpty<KeyValuePair<String, Object>>(String)
  nameWithType: ParameterCheckExtensions.CheckNotNullOrEmpty<KeyValuePair<String, Object>>(String)
  fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNullOrEmpty<System.Collections.Generic.KeyValuePair<System.String, System.Object>>(System.String)
  nameWithType.vb: ParameterCheckExtensions.CheckNotNullOrEmpty(Of KeyValuePair(Of String, Object))(String)
  fullName.vb: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNullOrEmpty(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object))(System.String)
  name.vb: CheckNotNullOrEmpty(Of KeyValuePair(Of String, Object))(String)
  spec.csharp:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNullOrEmpty``1(System.String)
    name: CheckNotNullOrEmpty<KeyValuePair<String, Object>>
    nameWithType: ParameterCheckExtensions.CheckNotNullOrEmpty<KeyValuePair<String, Object>>
    fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNullOrEmpty<System.Collections.Generic.KeyValuePair<System.String, System.Object>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNullOrEmpty``1(System.String)
    name: CheckNotNullOrEmpty(Of KeyValuePair(Of String, Object))
    nameWithType: ParameterCheckExtensions.CheckNotNullOrEmpty(Of KeyValuePair(Of String, Object))
    fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNullOrEmpty(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object))
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Dependency.ScopedDictionary.Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{Hybrid.Dependency.ScopedDictionary},System.Action{System.Exception},System.Action{Hybrid.Dependency.ScopedDictionary})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
  parent: Hybrid.Extensions.TryCatchExtensions
  definition: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
  name: TryCatch<ScopedDictionary>(Action<ScopedDictionary>, Action<Exception>, Action<ScopedDictionary>)
  nameWithType: TryCatchExtensions.TryCatch<ScopedDictionary>(Action<ScopedDictionary>, Action<Exception>, Action<ScopedDictionary>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.Dependency.ScopedDictionary>(System.Action<Hybrid.Dependency.ScopedDictionary>, System.Action<System.Exception>, System.Action<Hybrid.Dependency.ScopedDictionary>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of ScopedDictionary)(Action(Of ScopedDictionary), Action(Of Exception), Action(Of ScopedDictionary))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.Dependency.ScopedDictionary)(System.Action(Of Hybrid.Dependency.ScopedDictionary), System.Action(Of System.Exception), System.Action(Of Hybrid.Dependency.ScopedDictionary))
  name.vb: TryCatch(Of ScopedDictionary)(Action(Of ScopedDictionary), Action(Of Exception), Action(Of ScopedDictionary))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{``0},System.Action{System.Exception},System.Action{``0})
    name: TryCatch<ScopedDictionary>
    nameWithType: TryCatchExtensions.TryCatch<ScopedDictionary>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.Dependency.ScopedDictionary>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Dependency.ScopedDictionary
    name: ScopedDictionary
    nameWithType: ScopedDictionary
    fullName: Hybrid.Dependency.ScopedDictionary
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Dependency.ScopedDictionary
    name: ScopedDictionary
    nameWithType: ScopedDictionary
    fullName: Hybrid.Dependency.ScopedDictionary
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{``0},System.Action{System.Exception},System.Action{``0})
    name: TryCatch(Of ScopedDictionary)
    nameWithType: TryCatchExtensions.TryCatch(Of ScopedDictionary)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.Dependency.ScopedDictionary)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Dependency.ScopedDictionary
    name: ScopedDictionary
    nameWithType: ScopedDictionary
    fullName: Hybrid.Dependency.ScopedDictionary
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Dependency.ScopedDictionary
    name: ScopedDictionary
    nameWithType: ScopedDictionary
    fullName: Hybrid.Dependency.ScopedDictionary
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Dependency.ScopedDictionary.Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{Hybrid.Dependency.ScopedDictionary},System.Action{System.Exception})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
  parent: Hybrid.Extensions.TryCatchExtensions
  definition: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
  name: TryCatch<ScopedDictionary>(Action<ScopedDictionary>, Action<Exception>)
  nameWithType: TryCatchExtensions.TryCatch<ScopedDictionary>(Action<ScopedDictionary>, Action<Exception>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.Dependency.ScopedDictionary>(System.Action<Hybrid.Dependency.ScopedDictionary>, System.Action<System.Exception>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of ScopedDictionary)(Action(Of ScopedDictionary), Action(Of Exception))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.Dependency.ScopedDictionary)(System.Action(Of Hybrid.Dependency.ScopedDictionary), System.Action(Of System.Exception))
  name.vb: TryCatch(Of ScopedDictionary)(Action(Of ScopedDictionary), Action(Of Exception))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{``0},System.Action{System.Exception})
    name: TryCatch<ScopedDictionary>
    nameWithType: TryCatchExtensions.TryCatch<ScopedDictionary>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.Dependency.ScopedDictionary>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Dependency.ScopedDictionary
    name: ScopedDictionary
    nameWithType: ScopedDictionary
    fullName: Hybrid.Dependency.ScopedDictionary
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{``0},System.Action{System.Exception})
    name: TryCatch(Of ScopedDictionary)
    nameWithType: TryCatchExtensions.TryCatch(Of ScopedDictionary)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.Dependency.ScopedDictionary)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Dependency.ScopedDictionary
    name: ScopedDictionary
    nameWithType: ScopedDictionary
    fullName: Hybrid.Dependency.ScopedDictionary
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Dependency.ScopedDictionary.Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{Hybrid.Dependency.ScopedDictionary,{TResult}},System.Action{System.Exception},System.Action{Hybrid.Dependency.ScopedDictionary})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
  parent: Hybrid.Extensions.TryCatchExtensions
  definition: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
  name: TryCatch<ScopedDictionary, TResult>(Func<ScopedDictionary, TResult>, Action<Exception>, Action<ScopedDictionary>)
  nameWithType: TryCatchExtensions.TryCatch<ScopedDictionary, TResult>(Func<ScopedDictionary, TResult>, Action<Exception>, Action<ScopedDictionary>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.Dependency.ScopedDictionary, TResult>(System.Func<Hybrid.Dependency.ScopedDictionary, TResult>, System.Action<System.Exception>, System.Action<Hybrid.Dependency.ScopedDictionary>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of ScopedDictionary, TResult)(Func(Of ScopedDictionary, TResult), Action(Of Exception), Action(Of ScopedDictionary))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.Dependency.ScopedDictionary, TResult)(System.Func(Of Hybrid.Dependency.ScopedDictionary, TResult), System.Action(Of System.Exception), System.Action(Of Hybrid.Dependency.ScopedDictionary))
  name.vb: TryCatch(Of ScopedDictionary, TResult)(Func(Of ScopedDictionary, TResult), Action(Of Exception), Action(Of ScopedDictionary))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
    name: TryCatch<ScopedDictionary, TResult>
    nameWithType: TryCatchExtensions.TryCatch<ScopedDictionary, TResult>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.Dependency.ScopedDictionary, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Dependency.ScopedDictionary
    name: ScopedDictionary
    nameWithType: ScopedDictionary
    fullName: Hybrid.Dependency.ScopedDictionary
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Dependency.ScopedDictionary
    name: ScopedDictionary
    nameWithType: ScopedDictionary
    fullName: Hybrid.Dependency.ScopedDictionary
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
    name: TryCatch(Of ScopedDictionary, TResult)
    nameWithType: TryCatchExtensions.TryCatch(Of ScopedDictionary, TResult)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.Dependency.ScopedDictionary, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Dependency.ScopedDictionary
    name: ScopedDictionary
    nameWithType: ScopedDictionary
    fullName: Hybrid.Dependency.ScopedDictionary
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Dependency.ScopedDictionary
    name: ScopedDictionary
    nameWithType: ScopedDictionary
    fullName: Hybrid.Dependency.ScopedDictionary
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Dependency.ScopedDictionary.Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{Hybrid.Dependency.ScopedDictionary,{TResult}},System.Action{System.Exception})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
  parent: Hybrid.Extensions.TryCatchExtensions
  definition: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
  name: TryCatch<ScopedDictionary, TResult>(Func<ScopedDictionary, TResult>, Action<Exception>)
  nameWithType: TryCatchExtensions.TryCatch<ScopedDictionary, TResult>(Func<ScopedDictionary, TResult>, Action<Exception>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.Dependency.ScopedDictionary, TResult>(System.Func<Hybrid.Dependency.ScopedDictionary, TResult>, System.Action<System.Exception>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of ScopedDictionary, TResult)(Func(Of ScopedDictionary, TResult), Action(Of Exception))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.Dependency.ScopedDictionary, TResult)(System.Func(Of Hybrid.Dependency.ScopedDictionary, TResult), System.Action(Of System.Exception))
  name.vb: TryCatch(Of ScopedDictionary, TResult)(Func(Of ScopedDictionary, TResult), Action(Of Exception))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{``0,``1},System.Action{System.Exception})
    name: TryCatch<ScopedDictionary, TResult>
    nameWithType: TryCatchExtensions.TryCatch<ScopedDictionary, TResult>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.Dependency.ScopedDictionary, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Dependency.ScopedDictionary
    name: ScopedDictionary
    nameWithType: ScopedDictionary
    fullName: Hybrid.Dependency.ScopedDictionary
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{``0,``1},System.Action{System.Exception})
    name: TryCatch(Of ScopedDictionary, TResult)
    nameWithType: TryCatchExtensions.TryCatch(Of ScopedDictionary, TResult)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.Dependency.ScopedDictionary, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Dependency.ScopedDictionary
    name: ScopedDictionary
    nameWithType: ScopedDictionary
    fullName: Hybrid.Dependency.ScopedDictionary
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Dependency.ScopedDictionary.Hybrid.Extensions.TryCatchExtensions.TryFinally``1(System.Action{Hybrid.Dependency.ScopedDictionary},System.Action{Hybrid.Dependency.ScopedDictionary})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
  parent: Hybrid.Extensions.TryCatchExtensions
  definition: Hybrid.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
  name: TryFinally<ScopedDictionary>(Action<ScopedDictionary>, Action<ScopedDictionary>)
  nameWithType: TryCatchExtensions.TryFinally<ScopedDictionary>(Action<ScopedDictionary>, Action<ScopedDictionary>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryFinally<Hybrid.Dependency.ScopedDictionary>(System.Action<Hybrid.Dependency.ScopedDictionary>, System.Action<Hybrid.Dependency.ScopedDictionary>)
  nameWithType.vb: TryCatchExtensions.TryFinally(Of ScopedDictionary)(Action(Of ScopedDictionary), Action(Of ScopedDictionary))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryFinally(Of Hybrid.Dependency.ScopedDictionary)(System.Action(Of Hybrid.Dependency.ScopedDictionary), System.Action(Of Hybrid.Dependency.ScopedDictionary))
  name.vb: TryFinally(Of ScopedDictionary)(Action(Of ScopedDictionary), Action(Of ScopedDictionary))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryFinally``1(System.Action{``0},System.Action{``0})
    name: TryFinally<ScopedDictionary>
    nameWithType: TryCatchExtensions.TryFinally<ScopedDictionary>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryFinally<Hybrid.Dependency.ScopedDictionary>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Dependency.ScopedDictionary
    name: ScopedDictionary
    nameWithType: ScopedDictionary
    fullName: Hybrid.Dependency.ScopedDictionary
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Dependency.ScopedDictionary
    name: ScopedDictionary
    nameWithType: ScopedDictionary
    fullName: Hybrid.Dependency.ScopedDictionary
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryFinally``1(System.Action{``0},System.Action{``0})
    name: TryFinally(Of ScopedDictionary)
    nameWithType: TryCatchExtensions.TryFinally(Of ScopedDictionary)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryFinally(Of Hybrid.Dependency.ScopedDictionary)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Dependency.ScopedDictionary
    name: ScopedDictionary
    nameWithType: ScopedDictionary
    fullName: Hybrid.Dependency.ScopedDictionary
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Dependency.ScopedDictionary
    name: ScopedDictionary
    nameWithType: ScopedDictionary
    fullName: Hybrid.Dependency.ScopedDictionary
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Json.JsonExtensions.ToJsonString(System.Boolean,System.Boolean)
  commentId: M:Hybrid.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
  parent: Hybrid.Json.JsonExtensions
  definition: Hybrid.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
  name: ToJsonString(Boolean, Boolean)
  nameWithType: JsonExtensions.ToJsonString(Boolean, Boolean)
  fullName: Hybrid.Json.JsonExtensions.ToJsonString(System.Boolean, System.Boolean)
  spec.csharp:
  - uid: Hybrid.Json.JsonExtensions.ToJsonString(System.Boolean,System.Boolean)
    name: ToJsonString
    nameWithType: JsonExtensions.ToJsonString
    fullName: Hybrid.Json.JsonExtensions.ToJsonString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Json.JsonExtensions.ToJsonString(System.Boolean,System.Boolean)
    name: ToJsonString
    nameWithType: JsonExtensions.ToJsonString
    fullName: Hybrid.Json.JsonExtensions.ToJsonString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Mapping.MapperExtensions.MapTo``1
  commentId: M:Hybrid.Mapping.MapperExtensions.MapTo``1(System.Object)
  parent: Hybrid.Mapping.MapperExtensions
  definition: Hybrid.Mapping.MapperExtensions.MapTo``1(System.Object)
  name: MapTo<TTarget>()
  nameWithType: MapperExtensions.MapTo<TTarget>()
  fullName: Hybrid.Mapping.MapperExtensions.MapTo<TTarget>()
  nameWithType.vb: MapperExtensions.MapTo(Of TTarget)()
  fullName.vb: Hybrid.Mapping.MapperExtensions.MapTo(Of TTarget)()
  name.vb: MapTo(Of TTarget)()
  spec.csharp:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``1
    name: MapTo<TTarget>
    nameWithType: MapperExtensions.MapTo<TTarget>
    fullName: Hybrid.Mapping.MapperExtensions.MapTo<TTarget>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``1
    name: MapTo(Of TTarget)
    nameWithType: MapperExtensions.MapTo(Of TTarget)
    fullName: Hybrid.Mapping.MapperExtensions.MapTo(Of TTarget)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Dependency.ScopedDictionary.Hybrid.Mapping.MapperExtensions.MapTo``2({TTarget})
  commentId: M:Hybrid.Mapping.MapperExtensions.MapTo``2(``0,``1)
  parent: Hybrid.Mapping.MapperExtensions
  definition: Hybrid.Mapping.MapperExtensions.MapTo``2(``0,``1)
  name: MapTo<ScopedDictionary, TTarget>(TTarget)
  nameWithType: MapperExtensions.MapTo<ScopedDictionary, TTarget>(TTarget)
  fullName: Hybrid.Mapping.MapperExtensions.MapTo<Hybrid.Dependency.ScopedDictionary, TTarget>(TTarget)
  nameWithType.vb: MapperExtensions.MapTo(Of ScopedDictionary, TTarget)(TTarget)
  fullName.vb: Hybrid.Mapping.MapperExtensions.MapTo(Of Hybrid.Dependency.ScopedDictionary, TTarget)(TTarget)
  name.vb: MapTo(Of ScopedDictionary, TTarget)(TTarget)
  spec.csharp:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``2(``1)
    name: MapTo<ScopedDictionary, TTarget>
    nameWithType: MapperExtensions.MapTo<ScopedDictionary, TTarget>
    fullName: Hybrid.Mapping.MapperExtensions.MapTo<Hybrid.Dependency.ScopedDictionary, TTarget>
  - name: (
    nameWithType: (
    fullName: (
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``2(``1)
    name: MapTo(Of ScopedDictionary, TTarget)
    nameWithType: MapperExtensions.MapTo(Of ScopedDictionary, TTarget)
    fullName: Hybrid.Mapping.MapperExtensions.MapTo(Of Hybrid.Dependency.ScopedDictionary, TTarget)
  - name: (
    nameWithType: (
    fullName: (
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Reflection.LockExtensions.Locking(System.Action)
  commentId: M:Hybrid.Reflection.LockExtensions.Locking(System.Object,System.Action)
  parent: Hybrid.Reflection.LockExtensions
  definition: Hybrid.Reflection.LockExtensions.Locking(System.Object,System.Action)
  name: Locking(Action)
  nameWithType: LockExtensions.Locking(Action)
  fullName: Hybrid.Reflection.LockExtensions.Locking(System.Action)
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking(System.Action)
    name: Locking
    nameWithType: LockExtensions.Locking
    fullName: Hybrid.Reflection.LockExtensions.Locking
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking(System.Action)
    name: Locking
    nameWithType: LockExtensions.Locking
    fullName: Hybrid.Reflection.LockExtensions.Locking
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Dependency.ScopedDictionary.Hybrid.Reflection.LockExtensions.Locking``1(System.Action{Hybrid.Dependency.ScopedDictionary})
  commentId: M:Hybrid.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
  parent: Hybrid.Reflection.LockExtensions
  definition: Hybrid.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
  name: Locking<ScopedDictionary>(Action<ScopedDictionary>)
  nameWithType: LockExtensions.Locking<ScopedDictionary>(Action<ScopedDictionary>)
  fullName: Hybrid.Reflection.LockExtensions.Locking<Hybrid.Dependency.ScopedDictionary>(System.Action<Hybrid.Dependency.ScopedDictionary>)
  nameWithType.vb: LockExtensions.Locking(Of ScopedDictionary)(Action(Of ScopedDictionary))
  fullName.vb: Hybrid.Reflection.LockExtensions.Locking(Of Hybrid.Dependency.ScopedDictionary)(System.Action(Of Hybrid.Dependency.ScopedDictionary))
  name.vb: Locking(Of ScopedDictionary)(Action(Of ScopedDictionary))
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(System.Action{``0})
    name: Locking<ScopedDictionary>
    nameWithType: LockExtensions.Locking<ScopedDictionary>
    fullName: Hybrid.Reflection.LockExtensions.Locking<Hybrid.Dependency.ScopedDictionary>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Dependency.ScopedDictionary
    name: ScopedDictionary
    nameWithType: ScopedDictionary
    fullName: Hybrid.Dependency.ScopedDictionary
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(System.Action{``0})
    name: Locking(Of ScopedDictionary)
    nameWithType: LockExtensions.Locking(Of ScopedDictionary)
    fullName: Hybrid.Reflection.LockExtensions.Locking(Of Hybrid.Dependency.ScopedDictionary)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Dependency.ScopedDictionary
    name: ScopedDictionary
    nameWithType: ScopedDictionary
    fullName: Hybrid.Dependency.ScopedDictionary
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Reflection.LockExtensions.Locking``1(System.Func{{TResult}})
  commentId: M:Hybrid.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
  parent: Hybrid.Reflection.LockExtensions
  definition: Hybrid.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
  name: Locking<TResult>(Func<TResult>)
  nameWithType: LockExtensions.Locking<TResult>(Func<TResult>)
  fullName: Hybrid.Reflection.LockExtensions.Locking<TResult>(System.Func<TResult>)
  nameWithType.vb: LockExtensions.Locking(Of TResult)(Func(Of TResult))
  fullName.vb: Hybrid.Reflection.LockExtensions.Locking(Of TResult)(System.Func(Of TResult))
  name.vb: Locking(Of TResult)(Func(Of TResult))
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(System.Func{``0})
    name: Locking<TResult>
    nameWithType: LockExtensions.Locking<TResult>
    fullName: Hybrid.Reflection.LockExtensions.Locking<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(System.Func{``0})
    name: Locking(Of TResult)
    nameWithType: LockExtensions.Locking(Of TResult)
    fullName: Hybrid.Reflection.LockExtensions.Locking(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Dependency.ScopedDictionary.Hybrid.Reflection.LockExtensions.Locking``2(System.Func{Hybrid.Dependency.ScopedDictionary,{TResult}})
  commentId: M:Hybrid.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
  parent: Hybrid.Reflection.LockExtensions
  definition: Hybrid.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
  name: Locking<ScopedDictionary, TResult>(Func<ScopedDictionary, TResult>)
  nameWithType: LockExtensions.Locking<ScopedDictionary, TResult>(Func<ScopedDictionary, TResult>)
  fullName: Hybrid.Reflection.LockExtensions.Locking<Hybrid.Dependency.ScopedDictionary, TResult>(System.Func<Hybrid.Dependency.ScopedDictionary, TResult>)
  nameWithType.vb: LockExtensions.Locking(Of ScopedDictionary, TResult)(Func(Of ScopedDictionary, TResult))
  fullName.vb: Hybrid.Reflection.LockExtensions.Locking(Of Hybrid.Dependency.ScopedDictionary, TResult)(System.Func(Of Hybrid.Dependency.ScopedDictionary, TResult))
  name.vb: Locking(Of ScopedDictionary, TResult)(Func(Of ScopedDictionary, TResult))
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking``2(System.Func{``0,``1})
    name: Locking<ScopedDictionary, TResult>
    nameWithType: LockExtensions.Locking<ScopedDictionary, TResult>
    fullName: Hybrid.Reflection.LockExtensions.Locking<Hybrid.Dependency.ScopedDictionary, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Dependency.ScopedDictionary
    name: ScopedDictionary
    nameWithType: ScopedDictionary
    fullName: Hybrid.Dependency.ScopedDictionary
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking``2(System.Func{``0,``1})
    name: Locking(Of ScopedDictionary, TResult)
    nameWithType: LockExtensions.Locking(Of ScopedDictionary, TResult)
    fullName: Hybrid.Reflection.LockExtensions.Locking(Of Hybrid.Dependency.ScopedDictionary, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Dependency.ScopedDictionary
    name: ScopedDictionary
    nameWithType: ScopedDictionary
    fullName: Hybrid.Dependency.ScopedDictionary
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Dependency.ScopedDictionary.Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2
  commentId: M:Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2(``0)
  parent: Hybrid.Domain.Entities.EntityExtensions
  definition: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2(``0)
  name: CheckICreatedTime<ScopedDictionary, TKey>()
  nameWithType: EntityExtensions.CheckICreatedTime<ScopedDictionary, TKey>()
  fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime<Hybrid.Dependency.ScopedDictionary, TKey>()
  nameWithType.vb: EntityExtensions.CheckICreatedTime(Of ScopedDictionary, TKey)()
  fullName.vb: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime(Of Hybrid.Dependency.ScopedDictionary, TKey)()
  name.vb: CheckICreatedTime(Of ScopedDictionary, TKey)()
  spec.csharp:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2
    name: CheckICreatedTime<ScopedDictionary, TKey>
    nameWithType: EntityExtensions.CheckICreatedTime<ScopedDictionary, TKey>
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime<Hybrid.Dependency.ScopedDictionary, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2
    name: CheckICreatedTime(Of ScopedDictionary, TKey)
    nameWithType: EntityExtensions.CheckICreatedTime(Of ScopedDictionary, TKey)
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime(Of Hybrid.Dependency.ScopedDictionary, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Dependency.ScopedDictionary.Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(System.Security.Principal.IPrincipal)
  commentId: M:Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
  parent: Hybrid.Domain.Entities.EntityExtensions
  definition: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
  name: CheckICreationAudited<ScopedDictionary, TKey, TUserKey>(IPrincipal)
  nameWithType: EntityExtensions.CheckICreationAudited<ScopedDictionary, TKey, TUserKey>(IPrincipal)
  fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited<Hybrid.Dependency.ScopedDictionary, TKey, TUserKey>(System.Security.Principal.IPrincipal)
  nameWithType.vb: EntityExtensions.CheckICreationAudited(Of ScopedDictionary, TKey, TUserKey)(IPrincipal)
  fullName.vb: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited(Of Hybrid.Dependency.ScopedDictionary, TKey, TUserKey)(System.Security.Principal.IPrincipal)
  name.vb: CheckICreationAudited(Of ScopedDictionary, TKey, TUserKey)(IPrincipal)
  spec.csharp:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(System.Security.Principal.IPrincipal)
    name: CheckICreationAudited<ScopedDictionary, TKey, TUserKey>
    nameWithType: EntityExtensions.CheckICreationAudited<ScopedDictionary, TKey, TUserKey>
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited<Hybrid.Dependency.ScopedDictionary, TKey, TUserKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(System.Security.Principal.IPrincipal)
    name: CheckICreationAudited(Of ScopedDictionary, TKey, TUserKey)
    nameWithType: EntityExtensions.CheckICreationAudited(Of ScopedDictionary, TKey, TUserKey)
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited(Of Hybrid.Dependency.ScopedDictionary, TKey, TUserKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Dependency.ScopedDictionary.Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(System.Security.Principal.IPrincipal)
  commentId: M:Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
  parent: Hybrid.Domain.Entities.EntityExtensions
  definition: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
  name: CheckIUpdateAudited<ScopedDictionary, TKey, TUserKey>(IPrincipal)
  nameWithType: EntityExtensions.CheckIUpdateAudited<ScopedDictionary, TKey, TUserKey>(IPrincipal)
  fullName: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited<Hybrid.Dependency.ScopedDictionary, TKey, TUserKey>(System.Security.Principal.IPrincipal)
  nameWithType.vb: EntityExtensions.CheckIUpdateAudited(Of ScopedDictionary, TKey, TUserKey)(IPrincipal)
  fullName.vb: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited(Of Hybrid.Dependency.ScopedDictionary, TKey, TUserKey)(System.Security.Principal.IPrincipal)
  name.vb: CheckIUpdateAudited(Of ScopedDictionary, TKey, TUserKey)(IPrincipal)
  spec.csharp:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(System.Security.Principal.IPrincipal)
    name: CheckIUpdateAudited<ScopedDictionary, TKey, TUserKey>
    nameWithType: EntityExtensions.CheckIUpdateAudited<ScopedDictionary, TKey, TUserKey>
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited<Hybrid.Dependency.ScopedDictionary, TKey, TUserKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(System.Security.Principal.IPrincipal)
    name: CheckIUpdateAudited(Of ScopedDictionary, TKey, TUserKey)
    nameWithType: EntityExtensions.CheckIUpdateAudited(Of ScopedDictionary, TKey, TUserKey)
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited(Of Hybrid.Dependency.ScopedDictionary, TKey, TUserKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary{System.String,System.Object}.Quartz.Util.DictionaryExtensions.TryGetAndReturn``2(System.String)
  commentId: M:Quartz.Util.DictionaryExtensions.TryGetAndReturn``2(System.Collections.Generic.IDictionary{``0,``1},``0)
  parent: Quartz.Util.DictionaryExtensions
  definition: Quartz.Util.DictionaryExtensions.TryGetAndReturn``2(System.Collections.Generic.IDictionary{``0,``1},``0)
  name: TryGetAndReturn<String, Object>(String)
  nameWithType: DictionaryExtensions.TryGetAndReturn<String, Object>(String)
  fullName: Quartz.Util.DictionaryExtensions.TryGetAndReturn<System.String, System.Object>(System.String)
  nameWithType.vb: DictionaryExtensions.TryGetAndReturn(Of String, Object)(String)
  fullName.vb: Quartz.Util.DictionaryExtensions.TryGetAndReturn(Of System.String, System.Object)(System.String)
  name.vb: TryGetAndReturn(Of String, Object)(String)
  spec.csharp:
  - uid: Quartz.Util.DictionaryExtensions.TryGetAndReturn``2(``0)
    name: TryGetAndReturn<String, Object>
    nameWithType: DictionaryExtensions.TryGetAndReturn<String, Object>
    fullName: Quartz.Util.DictionaryExtensions.TryGetAndReturn<System.String, System.Object>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Quartz.Util.DictionaryExtensions.TryGetAndReturn``2(``0)
    name: TryGetAndReturn(Of String, Object)
    nameWithType: DictionaryExtensions.TryGetAndReturn(Of String, Object)
    fullName: Quartz.Util.DictionaryExtensions.TryGetAndReturn(Of System.String, System.Object)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.IdentityServer4.Extensions.IEnumerableExtensions.IsNullOrEmpty``1
  commentId: M:IdentityServer4.Extensions.IEnumerableExtensions.IsNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})
  parent: IdentityServer4.Extensions.IEnumerableExtensions
  definition: IdentityServer4.Extensions.IEnumerableExtensions.IsNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})
  name: IsNullOrEmpty<KeyValuePair<String, Object>>()
  nameWithType: IEnumerableExtensions.IsNullOrEmpty<KeyValuePair<String, Object>>()
  fullName: IdentityServer4.Extensions.IEnumerableExtensions.IsNullOrEmpty<System.Collections.Generic.KeyValuePair<System.String, System.Object>>()
  nameWithType.vb: IEnumerableExtensions.IsNullOrEmpty(Of KeyValuePair(Of String, Object))()
  fullName.vb: IdentityServer4.Extensions.IEnumerableExtensions.IsNullOrEmpty(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object))()
  name.vb: IsNullOrEmpty(Of KeyValuePair(Of String, Object))()
  spec.csharp:
  - uid: IdentityServer4.Extensions.IEnumerableExtensions.IsNullOrEmpty``1
    name: IsNullOrEmpty<KeyValuePair<String, Object>>
    nameWithType: IEnumerableExtensions.IsNullOrEmpty<KeyValuePair<String, Object>>
    fullName: IdentityServer4.Extensions.IEnumerableExtensions.IsNullOrEmpty<System.Collections.Generic.KeyValuePair<System.String, System.Object>>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: IdentityServer4.Extensions.IEnumerableExtensions.IsNullOrEmpty``1
    name: IsNullOrEmpty(Of KeyValuePair(Of String, Object))
    nameWithType: IEnumerableExtensions.IsNullOrEmpty(Of KeyValuePair(Of String, Object))
    fullName: IdentityServer4.Extensions.IEnumerableExtensions.IsNullOrEmpty(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object))
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.IdentityServer4.Extensions.IEnumerableExtensions.HasDuplicates``2(System.Func{System.Collections.Generic.KeyValuePair{System.String,System.Object},{TProp}})
  commentId: M:IdentityServer4.Extensions.IEnumerableExtensions.HasDuplicates``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  parent: IdentityServer4.Extensions.IEnumerableExtensions
  definition: IdentityServer4.Extensions.IEnumerableExtensions.HasDuplicates``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  name: HasDuplicates<KeyValuePair<String, Object>, TProp>(Func<KeyValuePair<String, Object>, TProp>)
  nameWithType: IEnumerableExtensions.HasDuplicates<KeyValuePair<String, Object>, TProp>(Func<KeyValuePair<String, Object>, TProp>)
  fullName: IdentityServer4.Extensions.IEnumerableExtensions.HasDuplicates<System.Collections.Generic.KeyValuePair<System.String, System.Object>, TProp>(System.Func<System.Collections.Generic.KeyValuePair<System.String, System.Object>, TProp>)
  nameWithType.vb: IEnumerableExtensions.HasDuplicates(Of KeyValuePair(Of String, Object), TProp)(Func(Of KeyValuePair(Of String, Object), TProp))
  fullName.vb: IdentityServer4.Extensions.IEnumerableExtensions.HasDuplicates(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object), TProp)(System.Func(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object), TProp))
  name.vb: HasDuplicates(Of KeyValuePair(Of String, Object), TProp)(Func(Of KeyValuePair(Of String, Object), TProp))
  spec.csharp:
  - uid: IdentityServer4.Extensions.IEnumerableExtensions.HasDuplicates``2(System.Func{``0,``1})
    name: HasDuplicates<KeyValuePair<String, Object>, TProp>
    nameWithType: IEnumerableExtensions.HasDuplicates<KeyValuePair<String, Object>, TProp>
    fullName: IdentityServer4.Extensions.IEnumerableExtensions.HasDuplicates<System.Collections.Generic.KeyValuePair<System.String, System.Object>, TProp>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TProp
    nameWithType: TProp
    fullName: TProp
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: IdentityServer4.Extensions.IEnumerableExtensions.HasDuplicates``2(System.Func{``0,``1})
    name: HasDuplicates(Of KeyValuePair(Of String, Object), TProp)
    nameWithType: IEnumerableExtensions.HasDuplicates(Of KeyValuePair(Of String, Object), TProp)
    fullName: IdentityServer4.Extensions.IEnumerableExtensions.HasDuplicates(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object), TProp)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TProp
    nameWithType: TProp
    fullName: TProp
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Concurrent.ConcurrentDictionary`2
  commentId: T:System.Collections.Concurrent.ConcurrentDictionary`2
  isExternal: true
  name: ConcurrentDictionary<TKey, TValue>
  nameWithType: ConcurrentDictionary<TKey, TValue>
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>
  nameWithType.vb: ConcurrentDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue)
  name.vb: ConcurrentDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2
    name: ConcurrentDictionary
    nameWithType: ConcurrentDictionary
    fullName: System.Collections.Concurrent.ConcurrentDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2
    name: ConcurrentDictionary
    nameWithType: ConcurrentDictionary
    fullName: System.Collections.Concurrent.ConcurrentDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Concurrent
  commentId: N:System.Collections.Concurrent
  isExternal: true
  name: System.Collections.Concurrent
  nameWithType: System.Collections.Concurrent
  fullName: System.Collections.Concurrent
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyDictionary`2
  commentId: T:System.Collections.Generic.IReadOnlyDictionary`2
  isExternal: true
  name: IReadOnlyDictionary<TKey, TValue>
  nameWithType: IReadOnlyDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>
  nameWithType.vb: IReadOnlyDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IReadOnlyDictionary(Of TKey, TValue)
  name.vb: IReadOnlyDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    nameWithType: IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    nameWithType: IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyCollection`1
  commentId: T:System.Collections.Generic.IReadOnlyCollection`1
  isExternal: true
  name: IReadOnlyCollection<T>
  nameWithType: IReadOnlyCollection<T>
  fullName: System.Collections.Generic.IReadOnlyCollection<T>
  nameWithType.vb: IReadOnlyCollection(Of T)
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of T)
  name.vb: IReadOnlyCollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#get_Item(System.Object)
  commentId: M:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#get_Item(System.Object)
  isExternal: true
  name: IDictionary.get_Item(Object)
  nameWithType: ConcurrentDictionary<TKey, TValue>.IDictionary.get_Item(Object)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.System.Collections.IDictionary.get_Item(System.Object)
  nameWithType.vb: ConcurrentDictionary(Of TKey, TValue).System.Collections.IDictionary.get_Item(Object)
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).System.Collections.IDictionary.get_Item(System.Object)
  name.vb: System.Collections.IDictionary.get_Item(Object)
  spec.csharp:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#get_Item(System.Object)
    name: IDictionary.get_Item
    nameWithType: ConcurrentDictionary<TKey, TValue>.IDictionary.get_Item
    fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.System.Collections.IDictionary.get_Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#get_Item(System.Object)
    name: System.Collections.IDictionary.get_Item
    nameWithType: ConcurrentDictionary(Of TKey, TValue).System.Collections.IDictionary.get_Item
    fullName: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).System.Collections.IDictionary.get_Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#set_Item(System.Object,System.Object)
  commentId: M:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#set_Item(System.Object,System.Object)
  isExternal: true
  name: IDictionary.set_Item(Object, Object)
  nameWithType: ConcurrentDictionary<TKey, TValue>.IDictionary.set_Item(Object, Object)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.System.Collections.IDictionary.set_Item(System.Object, System.Object)
  nameWithType.vb: ConcurrentDictionary(Of TKey, TValue).System.Collections.IDictionary.set_Item(Object, Object)
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).System.Collections.IDictionary.set_Item(System.Object, System.Object)
  name.vb: System.Collections.IDictionary.set_Item(Object, Object)
  spec.csharp:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#set_Item(System.Object,System.Object)
    name: IDictionary.set_Item
    nameWithType: ConcurrentDictionary<TKey, TValue>.IDictionary.set_Item
    fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.System.Collections.IDictionary.set_Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#set_Item(System.Object,System.Object)
    name: System.Collections.IDictionary.set_Item
    nameWithType: ConcurrentDictionary(Of TKey, TValue).System.Collections.IDictionary.set_Item
    fullName: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).System.Collections.IDictionary.set_Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate(`0,System.Func{`0,`1},System.Func{`0,`1,`1})
  commentId: M:System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate(`0,System.Func{`0,`1},System.Func{`0,`1,`1})
  isExternal: true
  name: AddOrUpdate(TKey, Func<TKey, TValue>, Func<TKey, TValue, TValue>)
  nameWithType: ConcurrentDictionary<TKey, TValue>.AddOrUpdate(TKey, Func<TKey, TValue>, Func<TKey, TValue, TValue>)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.AddOrUpdate(TKey, System.Func<TKey, TValue>, System.Func<TKey, TValue, TValue>)
  nameWithType.vb: ConcurrentDictionary(Of TKey, TValue).AddOrUpdate(TKey, Func(Of TKey, TValue), Func(Of TKey, TValue, TValue))
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).AddOrUpdate(TKey, System.Func(Of TKey, TValue), System.Func(Of TKey, TValue, TValue))
  name.vb: AddOrUpdate(TKey, Func(Of TKey, TValue), Func(Of TKey, TValue, TValue))
  spec.csharp:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate(`0,System.Func{`0,`1},System.Func{`0,`1,`1})
    name: AddOrUpdate
    nameWithType: ConcurrentDictionary<TKey, TValue>.AddOrUpdate
    fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.AddOrUpdate
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate(`0,System.Func{`0,`1},System.Func{`0,`1,`1})
    name: AddOrUpdate
    nameWithType: ConcurrentDictionary(Of TKey, TValue).AddOrUpdate
    fullName: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).AddOrUpdate
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate(`0,`1,System.Func{`0,`1,`1})
  commentId: M:System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate(`0,`1,System.Func{`0,`1,`1})
  isExternal: true
  name: AddOrUpdate(TKey, TValue, Func<TKey, TValue, TValue>)
  nameWithType: ConcurrentDictionary<TKey, TValue>.AddOrUpdate(TKey, TValue, Func<TKey, TValue, TValue>)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.AddOrUpdate(TKey, TValue, System.Func<TKey, TValue, TValue>)
  nameWithType.vb: ConcurrentDictionary(Of TKey, TValue).AddOrUpdate(TKey, TValue, Func(Of TKey, TValue, TValue))
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).AddOrUpdate(TKey, TValue, System.Func(Of TKey, TValue, TValue))
  name.vb: AddOrUpdate(TKey, TValue, Func(Of TKey, TValue, TValue))
  spec.csharp:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate(`0,`1,System.Func{`0,`1,`1})
    name: AddOrUpdate
    nameWithType: ConcurrentDictionary<TKey, TValue>.AddOrUpdate
    fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.AddOrUpdate
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate(`0,`1,System.Func{`0,`1,`1})
    name: AddOrUpdate
    nameWithType: ConcurrentDictionary(Of TKey, TValue).AddOrUpdate
    fullName: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).AddOrUpdate
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate``1(`0,System.Func{`0,``0,`1},System.Func{`0,`1,``0,`1},``0)
  commentId: M:System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate``1(`0,System.Func{`0,``0,`1},System.Func{`0,`1,``0,`1},``0)
  isExternal: true
  name: AddOrUpdate<TArg>(TKey, Func<TKey, TArg, TValue>, Func<TKey, TValue, TArg, TValue>, TArg)
  nameWithType: ConcurrentDictionary<TKey, TValue>.AddOrUpdate<TArg>(TKey, Func<TKey, TArg, TValue>, Func<TKey, TValue, TArg, TValue>, TArg)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.AddOrUpdate<TArg>(TKey, System.Func<TKey, TArg, TValue>, System.Func<TKey, TValue, TArg, TValue>, TArg)
  nameWithType.vb: ConcurrentDictionary(Of TKey, TValue).AddOrUpdate(Of TArg)(TKey, Func(Of TKey, TArg, TValue), Func(Of TKey, TValue, TArg, TValue), TArg)
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).AddOrUpdate(Of TArg)(TKey, System.Func(Of TKey, TArg, TValue), System.Func(Of TKey, TValue, TArg, TValue), TArg)
  name.vb: AddOrUpdate(Of TArg)(TKey, Func(Of TKey, TArg, TValue), Func(Of TKey, TValue, TArg, TValue), TArg)
  spec.csharp:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate``1(`0,System.Func{`0,``0,`1},System.Func{`0,`1,``0,`1},``0)
    name: AddOrUpdate<TArg>
    nameWithType: ConcurrentDictionary<TKey, TValue>.AddOrUpdate<TArg>
    fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.AddOrUpdate<TArg>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TArg
    nameWithType: TArg
    fullName: TArg
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TArg
    nameWithType: TArg
    fullName: TArg
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TArg
    nameWithType: TArg
    fullName: TArg
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate``1(`0,System.Func{`0,``0,`1},System.Func{`0,`1,``0,`1},``0)
    name: AddOrUpdate(Of TArg)
    nameWithType: ConcurrentDictionary(Of TKey, TValue).AddOrUpdate(Of TArg)
    fullName: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).AddOrUpdate(Of TArg)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TArg
    nameWithType: TArg
    fullName: TArg
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TArg
    nameWithType: TArg
    fullName: TArg
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TArg
    nameWithType: TArg
    fullName: TArg
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.Clear
  commentId: M:System.Collections.Concurrent.ConcurrentDictionary`2.Clear
  isExternal: true
  name: Clear()
  nameWithType: ConcurrentDictionary<TKey, TValue>.Clear()
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.Clear()
  nameWithType.vb: ConcurrentDictionary(Of TKey, TValue).Clear()
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).Clear()
  spec.csharp:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2.Clear
    name: Clear
    nameWithType: ConcurrentDictionary<TKey, TValue>.Clear
    fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2.Clear
    name: Clear
    nameWithType: ConcurrentDictionary(Of TKey, TValue).Clear
    fullName: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.ContainsKey(`0)
  commentId: M:System.Collections.Concurrent.ConcurrentDictionary`2.ContainsKey(`0)
  isExternal: true
  name: ContainsKey(TKey)
  nameWithType: ConcurrentDictionary<TKey, TValue>.ContainsKey(TKey)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.ContainsKey(TKey)
  nameWithType.vb: ConcurrentDictionary(Of TKey, TValue).ContainsKey(TKey)
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).ContainsKey(TKey)
  spec.csharp:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2.ContainsKey(`0)
    name: ContainsKey
    nameWithType: ConcurrentDictionary<TKey, TValue>.ContainsKey
    fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.ContainsKey
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2.ContainsKey(`0)
    name: ContainsKey
    nameWithType: ConcurrentDictionary(Of TKey, TValue).ContainsKey
    fullName: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).ContainsKey
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.GetEnumerator
  commentId: M:System.Collections.Concurrent.ConcurrentDictionary`2.GetEnumerator
  isExternal: true
  name: GetEnumerator()
  nameWithType: ConcurrentDictionary<TKey, TValue>.GetEnumerator()
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.GetEnumerator()
  nameWithType.vb: ConcurrentDictionary(Of TKey, TValue).GetEnumerator()
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2.GetEnumerator
    name: GetEnumerator
    nameWithType: ConcurrentDictionary<TKey, TValue>.GetEnumerator
    fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2.GetEnumerator
    name: GetEnumerator
    nameWithType: ConcurrentDictionary(Of TKey, TValue).GetEnumerator
    fullName: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(`0,System.Func{`0,`1})
  commentId: M:System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(`0,System.Func{`0,`1})
  isExternal: true
  name: GetOrAdd(TKey, Func<TKey, TValue>)
  nameWithType: ConcurrentDictionary<TKey, TValue>.GetOrAdd(TKey, Func<TKey, TValue>)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.GetOrAdd(TKey, System.Func<TKey, TValue>)
  nameWithType.vb: ConcurrentDictionary(Of TKey, TValue).GetOrAdd(TKey, Func(Of TKey, TValue))
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).GetOrAdd(TKey, System.Func(Of TKey, TValue))
  name.vb: GetOrAdd(TKey, Func(Of TKey, TValue))
  spec.csharp:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(`0,System.Func{`0,`1})
    name: GetOrAdd
    nameWithType: ConcurrentDictionary<TKey, TValue>.GetOrAdd
    fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.GetOrAdd
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(`0,System.Func{`0,`1})
    name: GetOrAdd
    nameWithType: ConcurrentDictionary(Of TKey, TValue).GetOrAdd
    fullName: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).GetOrAdd
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(`0,`1)
  commentId: M:System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(`0,`1)
  isExternal: true
  name: GetOrAdd(TKey, TValue)
  nameWithType: ConcurrentDictionary<TKey, TValue>.GetOrAdd(TKey, TValue)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.GetOrAdd(TKey, TValue)
  nameWithType.vb: ConcurrentDictionary(Of TKey, TValue).GetOrAdd(TKey, TValue)
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).GetOrAdd(TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(`0,`1)
    name: GetOrAdd
    nameWithType: ConcurrentDictionary<TKey, TValue>.GetOrAdd
    fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.GetOrAdd
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(`0,`1)
    name: GetOrAdd
    nameWithType: ConcurrentDictionary(Of TKey, TValue).GetOrAdd
    fullName: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).GetOrAdd
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd``1(`0,System.Func{`0,``0,`1},``0)
  commentId: M:System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd``1(`0,System.Func{`0,``0,`1},``0)
  isExternal: true
  name: GetOrAdd<TArg>(TKey, Func<TKey, TArg, TValue>, TArg)
  nameWithType: ConcurrentDictionary<TKey, TValue>.GetOrAdd<TArg>(TKey, Func<TKey, TArg, TValue>, TArg)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.GetOrAdd<TArg>(TKey, System.Func<TKey, TArg, TValue>, TArg)
  nameWithType.vb: ConcurrentDictionary(Of TKey, TValue).GetOrAdd(Of TArg)(TKey, Func(Of TKey, TArg, TValue), TArg)
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).GetOrAdd(Of TArg)(TKey, System.Func(Of TKey, TArg, TValue), TArg)
  name.vb: GetOrAdd(Of TArg)(TKey, Func(Of TKey, TArg, TValue), TArg)
  spec.csharp:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd``1(`0,System.Func{`0,``0,`1},``0)
    name: GetOrAdd<TArg>
    nameWithType: ConcurrentDictionary<TKey, TValue>.GetOrAdd<TArg>
    fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.GetOrAdd<TArg>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TArg
    nameWithType: TArg
    fullName: TArg
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TArg
    nameWithType: TArg
    fullName: TArg
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd``1(`0,System.Func{`0,``0,`1},``0)
    name: GetOrAdd(Of TArg)
    nameWithType: ConcurrentDictionary(Of TKey, TValue).GetOrAdd(Of TArg)
    fullName: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).GetOrAdd(Of TArg)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TArg
    nameWithType: TArg
    fullName: TArg
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TArg
    nameWithType: TArg
    fullName: TArg
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})
  commentId: M:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})
  isExternal: true
  name: ICollection<KeyValuePair<TKey, TValue>>.Add(KeyValuePair<TKey, TValue>)
  nameWithType: ConcurrentDictionary<TKey, TValue>.ICollection<KeyValuePair<TKey, TValue>>.Add(KeyValuePair<TKey, TValue>)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.Add(System.Collections.Generic.KeyValuePair<TKey, TValue>)
  nameWithType.vb: ConcurrentDictionary(Of TKey, TValue).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add(KeyValuePair(Of TKey, TValue))
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add(System.Collections.Generic.KeyValuePair(Of TKey, TValue))
  name.vb: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add(KeyValuePair(Of TKey, TValue))
  spec.csharp:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})
    name: ICollection<KeyValuePair<TKey, TValue>>.Add
    nameWithType: ConcurrentDictionary<TKey, TValue>.ICollection<KeyValuePair<TKey, TValue>>.Add
    fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})
    name: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add
    nameWithType: ConcurrentDictionary(Of TKey, TValue).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add
    fullName: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})
  commentId: M:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})
  isExternal: true
  name: ICollection<KeyValuePair<TKey, TValue>>.Contains(KeyValuePair<TKey, TValue>)
  nameWithType: ConcurrentDictionary<TKey, TValue>.ICollection<KeyValuePair<TKey, TValue>>.Contains(KeyValuePair<TKey, TValue>)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.Contains(System.Collections.Generic.KeyValuePair<TKey, TValue>)
  nameWithType.vb: ConcurrentDictionary(Of TKey, TValue).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains(KeyValuePair(Of TKey, TValue))
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains(System.Collections.Generic.KeyValuePair(Of TKey, TValue))
  name.vb: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains(KeyValuePair(Of TKey, TValue))
  spec.csharp:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})
    name: ICollection<KeyValuePair<TKey, TValue>>.Contains
    nameWithType: ConcurrentDictionary<TKey, TValue>.ICollection<KeyValuePair<TKey, TValue>>.Contains
    fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})
    name: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains
    nameWithType: ConcurrentDictionary(Of TKey, TValue).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains
    fullName: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)
  commentId: M:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)
  isExternal: true
  name: ICollection<KeyValuePair<TKey, TValue>>.CopyTo(KeyValuePair<TKey, TValue>[], Int32)
  nameWithType: ConcurrentDictionary<TKey, TValue>.ICollection<KeyValuePair<TKey, TValue>>.CopyTo(KeyValuePair<TKey, TValue>[], Int32)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.CopyTo(System.Collections.Generic.KeyValuePair<TKey, TValue>[], System.Int32)
  nameWithType.vb: ConcurrentDictionary(Of TKey, TValue).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo(KeyValuePair(Of TKey, TValue)(), Int32)
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo(System.Collections.Generic.KeyValuePair(Of TKey, TValue)(), System.Int32)
  name.vb: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo(KeyValuePair(Of TKey, TValue)(), Int32)
  spec.csharp:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)
    name: ICollection<KeyValuePair<TKey, TValue>>.CopyTo
    nameWithType: ConcurrentDictionary<TKey, TValue>.ICollection<KeyValuePair<TKey, TValue>>.CopyTo
    fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)
    name: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo
    nameWithType: ConcurrentDictionary(Of TKey, TValue).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo
    fullName: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})
  commentId: M:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})
  isExternal: true
  name: ICollection<KeyValuePair<TKey, TValue>>.Remove(KeyValuePair<TKey, TValue>)
  nameWithType: ConcurrentDictionary<TKey, TValue>.ICollection<KeyValuePair<TKey, TValue>>.Remove(KeyValuePair<TKey, TValue>)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.Remove(System.Collections.Generic.KeyValuePair<TKey, TValue>)
  nameWithType.vb: ConcurrentDictionary(Of TKey, TValue).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove(KeyValuePair(Of TKey, TValue))
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove(System.Collections.Generic.KeyValuePair(Of TKey, TValue))
  name.vb: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove(KeyValuePair(Of TKey, TValue))
  spec.csharp:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})
    name: ICollection<KeyValuePair<TKey, TValue>>.Remove
    nameWithType: ConcurrentDictionary<TKey, TValue>.ICollection<KeyValuePair<TKey, TValue>>.Remove
    fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})
    name: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove
    nameWithType: ConcurrentDictionary(Of TKey, TValue).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove
    fullName: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Add(`0,`1)
  commentId: M:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Add(`0,`1)
  isExternal: true
  name: IDictionary<TKey, TValue>.Add(TKey, TValue)
  nameWithType: ConcurrentDictionary<TKey, TValue>.IDictionary<TKey, TValue>.Add(TKey, TValue)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.System.Collections.Generic.IDictionary<TKey, TValue>.Add(TKey, TValue)
  nameWithType.vb: ConcurrentDictionary(Of TKey, TValue).System.Collections.Generic.IDictionary<TKey,TValue>.Add(TKey, TValue)
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).System.Collections.Generic.IDictionary<TKey,TValue>.Add(TKey, TValue)
  name.vb: System.Collections.Generic.IDictionary<TKey,TValue>.Add(TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Add(`0,`1)
    name: IDictionary<TKey, TValue>.Add
    nameWithType: ConcurrentDictionary<TKey, TValue>.IDictionary<TKey, TValue>.Add
    fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.System.Collections.Generic.IDictionary<TKey, TValue>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Add(`0,`1)
    name: System.Collections.Generic.IDictionary<TKey,TValue>.Add
    nameWithType: ConcurrentDictionary(Of TKey, TValue).System.Collections.Generic.IDictionary<TKey,TValue>.Add
    fullName: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).System.Collections.Generic.IDictionary<TKey,TValue>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Remove(`0)
  commentId: M:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Remove(`0)
  isExternal: true
  name: IDictionary<TKey, TValue>.Remove(TKey)
  nameWithType: ConcurrentDictionary<TKey, TValue>.IDictionary<TKey, TValue>.Remove(TKey)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.System.Collections.Generic.IDictionary<TKey, TValue>.Remove(TKey)
  nameWithType.vb: ConcurrentDictionary(Of TKey, TValue).System.Collections.Generic.IDictionary<TKey,TValue>.Remove(TKey)
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).System.Collections.Generic.IDictionary<TKey,TValue>.Remove(TKey)
  name.vb: System.Collections.Generic.IDictionary<TKey,TValue>.Remove(TKey)
  spec.csharp:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Remove(`0)
    name: IDictionary<TKey, TValue>.Remove
    nameWithType: ConcurrentDictionary<TKey, TValue>.IDictionary<TKey, TValue>.Remove
    fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.System.Collections.Generic.IDictionary<TKey, TValue>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Remove(`0)
    name: System.Collections.Generic.IDictionary<TKey,TValue>.Remove
    nameWithType: ConcurrentDictionary(Of TKey, TValue).System.Collections.Generic.IDictionary<TKey,TValue>.Remove
    fullName: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).System.Collections.Generic.IDictionary<TKey,TValue>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  commentId: M:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  isExternal: true
  name: ICollection.CopyTo(Array, Int32)
  nameWithType: ConcurrentDictionary<TKey, TValue>.ICollection.CopyTo(Array, Int32)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  nameWithType.vb: ConcurrentDictionary(Of TKey, TValue).System.Collections.ICollection.CopyTo(Array, Int32)
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  name.vb: System.Collections.ICollection.CopyTo(Array, Int32)
  spec.csharp:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
    name: ICollection.CopyTo
    nameWithType: ConcurrentDictionary<TKey, TValue>.ICollection.CopyTo
    fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.System.Collections.ICollection.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Array
    name: Array
    nameWithType: Array
    fullName: System.Array
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
    name: System.Collections.ICollection.CopyTo
    nameWithType: ConcurrentDictionary(Of TKey, TValue).System.Collections.ICollection.CopyTo
    fullName: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).System.Collections.ICollection.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Array
    name: Array
    nameWithType: Array
    fullName: System.Array
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)
  commentId: M:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)
  isExternal: true
  name: IDictionary.Add(Object, Object)
  nameWithType: ConcurrentDictionary<TKey, TValue>.IDictionary.Add(Object, Object)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.System.Collections.IDictionary.Add(System.Object, System.Object)
  nameWithType.vb: ConcurrentDictionary(Of TKey, TValue).System.Collections.IDictionary.Add(Object, Object)
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).System.Collections.IDictionary.Add(System.Object, System.Object)
  name.vb: System.Collections.IDictionary.Add(Object, Object)
  spec.csharp:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)
    name: IDictionary.Add
    nameWithType: ConcurrentDictionary<TKey, TValue>.IDictionary.Add
    fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.System.Collections.IDictionary.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)
    name: System.Collections.IDictionary.Add
    nameWithType: ConcurrentDictionary(Of TKey, TValue).System.Collections.IDictionary.Add
    fullName: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).System.Collections.IDictionary.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Contains(System.Object)
  commentId: M:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Contains(System.Object)
  isExternal: true
  name: IDictionary.Contains(Object)
  nameWithType: ConcurrentDictionary<TKey, TValue>.IDictionary.Contains(Object)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.System.Collections.IDictionary.Contains(System.Object)
  nameWithType.vb: ConcurrentDictionary(Of TKey, TValue).System.Collections.IDictionary.Contains(Object)
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).System.Collections.IDictionary.Contains(System.Object)
  name.vb: System.Collections.IDictionary.Contains(Object)
  spec.csharp:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Contains(System.Object)
    name: IDictionary.Contains
    nameWithType: ConcurrentDictionary<TKey, TValue>.IDictionary.Contains
    fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.System.Collections.IDictionary.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Contains(System.Object)
    name: System.Collections.IDictionary.Contains
    nameWithType: ConcurrentDictionary(Of TKey, TValue).System.Collections.IDictionary.Contains
    fullName: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).System.Collections.IDictionary.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#GetEnumerator
  commentId: M:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#GetEnumerator
  isExternal: true
  name: IDictionary.GetEnumerator()
  nameWithType: ConcurrentDictionary<TKey, TValue>.IDictionary.GetEnumerator()
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.System.Collections.IDictionary.GetEnumerator()
  nameWithType.vb: ConcurrentDictionary(Of TKey, TValue).System.Collections.IDictionary.GetEnumerator()
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).System.Collections.IDictionary.GetEnumerator()
  name.vb: System.Collections.IDictionary.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#GetEnumerator
    name: IDictionary.GetEnumerator
    nameWithType: ConcurrentDictionary<TKey, TValue>.IDictionary.GetEnumerator
    fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.System.Collections.IDictionary.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#GetEnumerator
    name: System.Collections.IDictionary.GetEnumerator
    nameWithType: ConcurrentDictionary(Of TKey, TValue).System.Collections.IDictionary.GetEnumerator
    fullName: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).System.Collections.IDictionary.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Remove(System.Object)
  commentId: M:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Remove(System.Object)
  isExternal: true
  name: IDictionary.Remove(Object)
  nameWithType: ConcurrentDictionary<TKey, TValue>.IDictionary.Remove(Object)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.System.Collections.IDictionary.Remove(System.Object)
  nameWithType.vb: ConcurrentDictionary(Of TKey, TValue).System.Collections.IDictionary.Remove(Object)
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).System.Collections.IDictionary.Remove(System.Object)
  name.vb: System.Collections.IDictionary.Remove(Object)
  spec.csharp:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Remove(System.Object)
    name: IDictionary.Remove
    nameWithType: ConcurrentDictionary<TKey, TValue>.IDictionary.Remove
    fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.System.Collections.IDictionary.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Remove(System.Object)
    name: System.Collections.IDictionary.Remove
    nameWithType: ConcurrentDictionary(Of TKey, TValue).System.Collections.IDictionary.Remove
    fullName: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).System.Collections.IDictionary.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IEnumerable#GetEnumerator
  commentId: M:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IEnumerable#GetEnumerator
  isExternal: true
  name: IEnumerable.GetEnumerator()
  nameWithType: ConcurrentDictionary<TKey, TValue>.IEnumerable.GetEnumerator()
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.System.Collections.IEnumerable.GetEnumerator()
  nameWithType.vb: ConcurrentDictionary(Of TKey, TValue).System.Collections.IEnumerable.GetEnumerator()
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IEnumerable#GetEnumerator
    name: IEnumerable.GetEnumerator
    nameWithType: ConcurrentDictionary<TKey, TValue>.IEnumerable.GetEnumerator
    fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IEnumerable#GetEnumerator
    name: System.Collections.IEnumerable.GetEnumerator
    nameWithType: ConcurrentDictionary(Of TKey, TValue).System.Collections.IEnumerable.GetEnumerator
    fullName: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.ToArray
  commentId: M:System.Collections.Concurrent.ConcurrentDictionary`2.ToArray
  isExternal: true
  name: ToArray()
  nameWithType: ConcurrentDictionary<TKey, TValue>.ToArray()
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.ToArray()
  nameWithType.vb: ConcurrentDictionary(Of TKey, TValue).ToArray()
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).ToArray()
  spec.csharp:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2.ToArray
    name: ToArray
    nameWithType: ConcurrentDictionary<TKey, TValue>.ToArray
    fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.ToArray
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2.ToArray
    name: ToArray
    nameWithType: ConcurrentDictionary(Of TKey, TValue).ToArray
    fullName: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).ToArray
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.TryAdd(`0,`1)
  commentId: M:System.Collections.Concurrent.ConcurrentDictionary`2.TryAdd(`0,`1)
  isExternal: true
  name: TryAdd(TKey, TValue)
  nameWithType: ConcurrentDictionary<TKey, TValue>.TryAdd(TKey, TValue)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.TryAdd(TKey, TValue)
  nameWithType.vb: ConcurrentDictionary(Of TKey, TValue).TryAdd(TKey, TValue)
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).TryAdd(TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2.TryAdd(`0,`1)
    name: TryAdd
    nameWithType: ConcurrentDictionary<TKey, TValue>.TryAdd
    fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.TryAdd
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2.TryAdd(`0,`1)
    name: TryAdd
    nameWithType: ConcurrentDictionary(Of TKey, TValue).TryAdd
    fullName: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).TryAdd
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.TryGetValue(`0,`1@)
  commentId: M:System.Collections.Concurrent.ConcurrentDictionary`2.TryGetValue(`0,`1@)
  isExternal: true
  name: TryGetValue(TKey, TValue)
  nameWithType: ConcurrentDictionary<TKey, TValue>.TryGetValue(TKey, TValue)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.TryGetValue(TKey, TValue)
  nameWithType.vb: ConcurrentDictionary(Of TKey, TValue).TryGetValue(TKey, TValue)
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).TryGetValue(TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2.TryGetValue(`0,`1@)
    name: TryGetValue
    nameWithType: ConcurrentDictionary<TKey, TValue>.TryGetValue
    fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.TryGetValue
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2.TryGetValue(`0,`1@)
    name: TryGetValue
    nameWithType: ConcurrentDictionary(Of TKey, TValue).TryGetValue
    fullName: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).TryGetValue
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.TryRemove(`0,`1@)
  commentId: M:System.Collections.Concurrent.ConcurrentDictionary`2.TryRemove(`0,`1@)
  isExternal: true
  name: TryRemove(TKey, TValue)
  nameWithType: ConcurrentDictionary<TKey, TValue>.TryRemove(TKey, TValue)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.TryRemove(TKey, TValue)
  nameWithType.vb: ConcurrentDictionary(Of TKey, TValue).TryRemove(TKey, TValue)
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).TryRemove(TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2.TryRemove(`0,`1@)
    name: TryRemove
    nameWithType: ConcurrentDictionary<TKey, TValue>.TryRemove
    fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.TryRemove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2.TryRemove(`0,`1@)
    name: TryRemove
    nameWithType: ConcurrentDictionary(Of TKey, TValue).TryRemove
    fullName: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).TryRemove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.TryUpdate(`0,`1,`1)
  commentId: M:System.Collections.Concurrent.ConcurrentDictionary`2.TryUpdate(`0,`1,`1)
  isExternal: true
  name: TryUpdate(TKey, TValue, TValue)
  nameWithType: ConcurrentDictionary<TKey, TValue>.TryUpdate(TKey, TValue, TValue)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.TryUpdate(TKey, TValue, TValue)
  nameWithType.vb: ConcurrentDictionary(Of TKey, TValue).TryUpdate(TKey, TValue, TValue)
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).TryUpdate(TKey, TValue, TValue)
  spec.csharp:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2.TryUpdate(`0,`1,`1)
    name: TryUpdate
    nameWithType: ConcurrentDictionary<TKey, TValue>.TryUpdate
    fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.TryUpdate
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2.TryUpdate(`0,`1,`1)
    name: TryUpdate
    nameWithType: ConcurrentDictionary(Of TKey, TValue).TryUpdate
    fullName: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).TryUpdate
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.Count
  commentId: P:System.Collections.Concurrent.ConcurrentDictionary`2.Count
  isExternal: true
  name: Count
  nameWithType: ConcurrentDictionary<TKey, TValue>.Count
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.Count
  nameWithType.vb: ConcurrentDictionary(Of TKey, TValue).Count
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).Count
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.IsEmpty
  commentId: P:System.Collections.Concurrent.ConcurrentDictionary`2.IsEmpty
  isExternal: true
  name: IsEmpty
  nameWithType: ConcurrentDictionary<TKey, TValue>.IsEmpty
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.IsEmpty
  nameWithType.vb: ConcurrentDictionary(Of TKey, TValue).IsEmpty
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).IsEmpty
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.Item(`0)
  commentId: P:System.Collections.Concurrent.ConcurrentDictionary`2.Item(`0)
  isExternal: true
  name: Item[TKey]
  nameWithType: ConcurrentDictionary<TKey, TValue>.Item[TKey]
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.Item[TKey]
  nameWithType.vb: ConcurrentDictionary(Of TKey, TValue).Item(TKey)
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).Item(TKey)
  name.vb: Item(TKey)
  spec.csharp:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2.Item(`0)
    name: Item
    nameWithType: ConcurrentDictionary<TKey, TValue>.Item
    fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.Item
    isExternal: true
  - name: '['
    nameWithType: '['
    fullName: '['
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2.Item(`0)
    name: Item
    nameWithType: ConcurrentDictionary(Of TKey, TValue).Item
    fullName: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.Keys
  commentId: P:System.Collections.Concurrent.ConcurrentDictionary`2.Keys
  isExternal: true
  name: Keys
  nameWithType: ConcurrentDictionary<TKey, TValue>.Keys
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.Keys
  nameWithType.vb: ConcurrentDictionary(Of TKey, TValue).Keys
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).Keys
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#IsReadOnly
  commentId: P:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#IsReadOnly
  isExternal: true
  name: ICollection<KeyValuePair<TKey, TValue>>.IsReadOnly
  nameWithType: ConcurrentDictionary<TKey, TValue>.ICollection<KeyValuePair<TKey, TValue>>.IsReadOnly
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.IsReadOnly
  nameWithType.vb: ConcurrentDictionary(Of TKey, TValue).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.IsReadOnly
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.IsReadOnly
  name.vb: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.IsReadOnly
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Keys
  commentId: P:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Keys
  isExternal: true
  name: IReadOnlyDictionary<TKey, TValue>.Keys
  nameWithType: ConcurrentDictionary<TKey, TValue>.IReadOnlyDictionary<TKey, TValue>.Keys
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>.Keys
  nameWithType.vb: ConcurrentDictionary(Of TKey, TValue).System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Keys
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Keys
  name.vb: System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Keys
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Values
  commentId: P:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Values
  isExternal: true
  name: IReadOnlyDictionary<TKey, TValue>.Values
  nameWithType: ConcurrentDictionary<TKey, TValue>.IReadOnlyDictionary<TKey, TValue>.Values
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>.Values
  nameWithType.vb: ConcurrentDictionary(Of TKey, TValue).System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Values
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Values
  name.vb: System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Values
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#ICollection#IsSynchronized
  commentId: P:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#ICollection#IsSynchronized
  isExternal: true
  name: ICollection.IsSynchronized
  nameWithType: ConcurrentDictionary<TKey, TValue>.ICollection.IsSynchronized
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.System.Collections.ICollection.IsSynchronized
  nameWithType.vb: ConcurrentDictionary(Of TKey, TValue).System.Collections.ICollection.IsSynchronized
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).System.Collections.ICollection.IsSynchronized
  name.vb: System.Collections.ICollection.IsSynchronized
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#ICollection#SyncRoot
  commentId: P:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#ICollection#SyncRoot
  isExternal: true
  name: ICollection.SyncRoot
  nameWithType: ConcurrentDictionary<TKey, TValue>.ICollection.SyncRoot
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.System.Collections.ICollection.SyncRoot
  nameWithType.vb: ConcurrentDictionary(Of TKey, TValue).System.Collections.ICollection.SyncRoot
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).System.Collections.ICollection.SyncRoot
  name.vb: System.Collections.ICollection.SyncRoot
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#IsFixedSize
  commentId: P:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#IsFixedSize
  isExternal: true
  name: IDictionary.IsFixedSize
  nameWithType: ConcurrentDictionary<TKey, TValue>.IDictionary.IsFixedSize
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.System.Collections.IDictionary.IsFixedSize
  nameWithType.vb: ConcurrentDictionary(Of TKey, TValue).System.Collections.IDictionary.IsFixedSize
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).System.Collections.IDictionary.IsFixedSize
  name.vb: System.Collections.IDictionary.IsFixedSize
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#IsReadOnly
  commentId: P:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#IsReadOnly
  isExternal: true
  name: IDictionary.IsReadOnly
  nameWithType: ConcurrentDictionary<TKey, TValue>.IDictionary.IsReadOnly
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.System.Collections.IDictionary.IsReadOnly
  nameWithType.vb: ConcurrentDictionary(Of TKey, TValue).System.Collections.IDictionary.IsReadOnly
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).System.Collections.IDictionary.IsReadOnly
  name.vb: System.Collections.IDictionary.IsReadOnly
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Item(System.Object)
  commentId: P:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Item(System.Object)
  isExternal: true
  name: IDictionary.Item[Object]
  nameWithType: ConcurrentDictionary<TKey, TValue>.IDictionary.Item[Object]
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.System.Collections.IDictionary.Item[System.Object]
  nameWithType.vb: ConcurrentDictionary(Of TKey, TValue).System.Collections.IDictionary.Item(Object)
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).System.Collections.IDictionary.Item(System.Object)
  name.vb: System.Collections.IDictionary.Item(Object)
  spec.csharp:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Item(System.Object)
    name: IDictionary.Item
    nameWithType: ConcurrentDictionary<TKey, TValue>.IDictionary.Item
    fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.System.Collections.IDictionary.Item
    isExternal: true
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Item(System.Object)
    name: System.Collections.IDictionary.Item
    nameWithType: ConcurrentDictionary(Of TKey, TValue).System.Collections.IDictionary.Item
    fullName: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).System.Collections.IDictionary.Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Keys
  commentId: P:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Keys
  isExternal: true
  name: IDictionary.Keys
  nameWithType: ConcurrentDictionary<TKey, TValue>.IDictionary.Keys
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.System.Collections.IDictionary.Keys
  nameWithType.vb: ConcurrentDictionary(Of TKey, TValue).System.Collections.IDictionary.Keys
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).System.Collections.IDictionary.Keys
  name.vb: System.Collections.IDictionary.Keys
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Values
  commentId: P:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Values
  isExternal: true
  name: IDictionary.Values
  nameWithType: ConcurrentDictionary<TKey, TValue>.IDictionary.Values
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.System.Collections.IDictionary.Values
  nameWithType.vb: ConcurrentDictionary(Of TKey, TValue).System.Collections.IDictionary.Values
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).System.Collections.IDictionary.Values
  name.vb: System.Collections.IDictionary.Values
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.Values
  commentId: P:System.Collections.Concurrent.ConcurrentDictionary`2.Values
  isExternal: true
  name: Values
  nameWithType: ConcurrentDictionary<TKey, TValue>.Values
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.Values
  nameWithType.vb: ConcurrentDictionary(Of TKey, TValue).Values
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).Values
- uid: OSharp.Collections.CollectionExtensions.AddIf``1(System.Collections.Generic.ICollection{``0},``0,System.Boolean)
  commentId: M:OSharp.Collections.CollectionExtensions.AddIf``1(System.Collections.Generic.ICollection{``0},``0,System.Boolean)
  isExternal: true
  name: AddIf<T>(ICollection<T>, T, Boolean)
  nameWithType: CollectionExtensions.AddIf<T>(ICollection<T>, T, Boolean)
  fullName: OSharp.Collections.CollectionExtensions.AddIf<T>(System.Collections.Generic.ICollection<T>, T, System.Boolean)
  nameWithType.vb: CollectionExtensions.AddIf(Of T)(ICollection(Of T), T, Boolean)
  fullName.vb: OSharp.Collections.CollectionExtensions.AddIf(Of T)(System.Collections.Generic.ICollection(Of T), T, System.Boolean)
  name.vb: AddIf(Of T)(ICollection(Of T), T, Boolean)
  spec.csharp:
  - uid: OSharp.Collections.CollectionExtensions.AddIf``1(System.Collections.Generic.ICollection{``0},``0,System.Boolean)
    name: AddIf<T>
    nameWithType: CollectionExtensions.AddIf<T>
    fullName: OSharp.Collections.CollectionExtensions.AddIf<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Collections.CollectionExtensions.AddIf``1(System.Collections.Generic.ICollection{``0},``0,System.Boolean)
    name: AddIf(Of T)
    nameWithType: CollectionExtensions.AddIf(Of T)
    fullName: OSharp.Collections.CollectionExtensions.AddIf(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Collections.CollectionExtensions
  commentId: T:OSharp.Collections.CollectionExtensions
  parent: OSharp.Collections
  name: CollectionExtensions
  nameWithType: CollectionExtensions
  fullName: OSharp.Collections.CollectionExtensions
- uid: OSharp.Collections.CollectionExtensions.AddIf``1(System.Collections.Generic.ICollection{``0},``0,System.Func{System.Boolean})
  commentId: M:OSharp.Collections.CollectionExtensions.AddIf``1(System.Collections.Generic.ICollection{``0},``0,System.Func{System.Boolean})
  isExternal: true
  name: AddIf<T>(ICollection<T>, T, Func<Boolean>)
  nameWithType: CollectionExtensions.AddIf<T>(ICollection<T>, T, Func<Boolean>)
  fullName: OSharp.Collections.CollectionExtensions.AddIf<T>(System.Collections.Generic.ICollection<T>, T, System.Func<System.Boolean>)
  nameWithType.vb: CollectionExtensions.AddIf(Of T)(ICollection(Of T), T, Func(Of Boolean))
  fullName.vb: OSharp.Collections.CollectionExtensions.AddIf(Of T)(System.Collections.Generic.ICollection(Of T), T, System.Func(Of System.Boolean))
  name.vb: AddIf(Of T)(ICollection(Of T), T, Func(Of Boolean))
  spec.csharp:
  - uid: OSharp.Collections.CollectionExtensions.AddIf``1(System.Collections.Generic.ICollection{``0},``0,System.Func{System.Boolean})
    name: AddIf<T>
    nameWithType: CollectionExtensions.AddIf<T>
    fullName: OSharp.Collections.CollectionExtensions.AddIf<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Collections.CollectionExtensions.AddIf``1(System.Collections.Generic.ICollection{``0},``0,System.Func{System.Boolean})
    name: AddIf(Of T)
    nameWithType: CollectionExtensions.AddIf(Of T)
    fullName: OSharp.Collections.CollectionExtensions.AddIf(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Collections.CollectionExtensions.AddIfNotExist``1(System.Collections.Generic.ICollection{``0},``0,System.Func{``0,System.Boolean})
  commentId: M:OSharp.Collections.CollectionExtensions.AddIfNotExist``1(System.Collections.Generic.ICollection{``0},``0,System.Func{``0,System.Boolean})
  isExternal: true
  name: AddIfNotExist<T>(ICollection<T>, T, Func<T, Boolean>)
  nameWithType: CollectionExtensions.AddIfNotExist<T>(ICollection<T>, T, Func<T, Boolean>)
  fullName: OSharp.Collections.CollectionExtensions.AddIfNotExist<T>(System.Collections.Generic.ICollection<T>, T, System.Func<T, System.Boolean>)
  nameWithType.vb: CollectionExtensions.AddIfNotExist(Of T)(ICollection(Of T), T, Func(Of T, Boolean))
  fullName.vb: OSharp.Collections.CollectionExtensions.AddIfNotExist(Of T)(System.Collections.Generic.ICollection(Of T), T, System.Func(Of T, System.Boolean))
  name.vb: AddIfNotExist(Of T)(ICollection(Of T), T, Func(Of T, Boolean))
  spec.csharp:
  - uid: OSharp.Collections.CollectionExtensions.AddIfNotExist``1(System.Collections.Generic.ICollection{``0},``0,System.Func{``0,System.Boolean})
    name: AddIfNotExist<T>
    nameWithType: CollectionExtensions.AddIfNotExist<T>
    fullName: OSharp.Collections.CollectionExtensions.AddIfNotExist<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Collections.CollectionExtensions.AddIfNotExist``1(System.Collections.Generic.ICollection{``0},``0,System.Func{``0,System.Boolean})
    name: AddIfNotExist(Of T)
    nameWithType: CollectionExtensions.AddIfNotExist(Of T)
    fullName: OSharp.Collections.CollectionExtensions.AddIfNotExist(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Collections.CollectionExtensions.GetOrAdd``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Boolean},System.Func{``0})
  commentId: M:OSharp.Collections.CollectionExtensions.GetOrAdd``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Boolean},System.Func{``0})
  isExternal: true
  name: GetOrAdd<T>(ICollection<T>, Func<T, Boolean>, Func<T>)
  nameWithType: CollectionExtensions.GetOrAdd<T>(ICollection<T>, Func<T, Boolean>, Func<T>)
  fullName: OSharp.Collections.CollectionExtensions.GetOrAdd<T>(System.Collections.Generic.ICollection<T>, System.Func<T, System.Boolean>, System.Func<T>)
  nameWithType.vb: CollectionExtensions.GetOrAdd(Of T)(ICollection(Of T), Func(Of T, Boolean), Func(Of T))
  fullName.vb: OSharp.Collections.CollectionExtensions.GetOrAdd(Of T)(System.Collections.Generic.ICollection(Of T), System.Func(Of T, System.Boolean), System.Func(Of T))
  name.vb: GetOrAdd(Of T)(ICollection(Of T), Func(Of T, Boolean), Func(Of T))
  spec.csharp:
  - uid: OSharp.Collections.CollectionExtensions.GetOrAdd``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Boolean},System.Func{``0})
    name: GetOrAdd<T>
    nameWithType: CollectionExtensions.GetOrAdd<T>
    fullName: OSharp.Collections.CollectionExtensions.GetOrAdd<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Collections.CollectionExtensions.GetOrAdd``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Boolean},System.Func{``0})
    name: GetOrAdd(Of T)
    nameWithType: CollectionExtensions.GetOrAdd(Of T)
    fullName: OSharp.Collections.CollectionExtensions.GetOrAdd(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Collections.CollectionExtensions.IsNullOrEmpty``1(System.Collections.Generic.ICollection{``0})
  commentId: M:OSharp.Collections.CollectionExtensions.IsNullOrEmpty``1(System.Collections.Generic.ICollection{``0})
  isExternal: true
  name: IsNullOrEmpty<T>(ICollection<T>)
  nameWithType: CollectionExtensions.IsNullOrEmpty<T>(ICollection<T>)
  fullName: OSharp.Collections.CollectionExtensions.IsNullOrEmpty<T>(System.Collections.Generic.ICollection<T>)
  nameWithType.vb: CollectionExtensions.IsNullOrEmpty(Of T)(ICollection(Of T))
  fullName.vb: OSharp.Collections.CollectionExtensions.IsNullOrEmpty(Of T)(System.Collections.Generic.ICollection(Of T))
  name.vb: IsNullOrEmpty(Of T)(ICollection(Of T))
  spec.csharp:
  - uid: OSharp.Collections.CollectionExtensions.IsNullOrEmpty``1(System.Collections.Generic.ICollection{``0})
    name: IsNullOrEmpty<T>
    nameWithType: CollectionExtensions.IsNullOrEmpty<T>
    fullName: OSharp.Collections.CollectionExtensions.IsNullOrEmpty<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Collections.CollectionExtensions.IsNullOrEmpty``1(System.Collections.Generic.ICollection{``0})
    name: IsNullOrEmpty(Of T)
    nameWithType: CollectionExtensions.IsNullOrEmpty(Of T)
    fullName: OSharp.Collections.CollectionExtensions.IsNullOrEmpty(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Collections.EnumerableExtensions.Shuffle``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:OSharp.Collections.EnumerableExtensions.Shuffle``1(System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: Shuffle<TSource>(IEnumerable<TSource>)
  nameWithType: EnumerableExtensions.Shuffle<TSource>(IEnumerable<TSource>)
  fullName: OSharp.Collections.EnumerableExtensions.Shuffle<TSource>(System.Collections.Generic.IEnumerable<TSource>)
  nameWithType.vb: EnumerableExtensions.Shuffle(Of TSource)(IEnumerable(Of TSource))
  fullName.vb: OSharp.Collections.EnumerableExtensions.Shuffle(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: Shuffle(Of TSource)(IEnumerable(Of TSource))
  spec.csharp:
  - uid: OSharp.Collections.EnumerableExtensions.Shuffle``1(System.Collections.Generic.IEnumerable{``0})
    name: Shuffle<TSource>
    nameWithType: EnumerableExtensions.Shuffle<TSource>
    fullName: OSharp.Collections.EnumerableExtensions.Shuffle<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Collections.EnumerableExtensions.Shuffle``1(System.Collections.Generic.IEnumerable{``0})
    name: Shuffle(Of TSource)
    nameWithType: EnumerableExtensions.Shuffle(Of TSource)
    fullName: OSharp.Collections.EnumerableExtensions.Shuffle(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Collections.EnumerableExtensions
  commentId: T:OSharp.Collections.EnumerableExtensions
  parent: OSharp.Collections
  name: EnumerableExtensions
  nameWithType: EnumerableExtensions
  fullName: OSharp.Collections.EnumerableExtensions
- uid: OSharp.Collections.EnumerableExtensions.ExpandAndToString``1(System.Collections.Generic.IEnumerable{``0},System.String)
  commentId: M:OSharp.Collections.EnumerableExtensions.ExpandAndToString``1(System.Collections.Generic.IEnumerable{``0},System.String)
  isExternal: true
  name: ExpandAndToString<T>(IEnumerable<T>, String)
  nameWithType: EnumerableExtensions.ExpandAndToString<T>(IEnumerable<T>, String)
  fullName: OSharp.Collections.EnumerableExtensions.ExpandAndToString<T>(System.Collections.Generic.IEnumerable<T>, System.String)
  nameWithType.vb: EnumerableExtensions.ExpandAndToString(Of T)(IEnumerable(Of T), String)
  fullName.vb: OSharp.Collections.EnumerableExtensions.ExpandAndToString(Of T)(System.Collections.Generic.IEnumerable(Of T), System.String)
  name.vb: ExpandAndToString(Of T)(IEnumerable(Of T), String)
  spec.csharp:
  - uid: OSharp.Collections.EnumerableExtensions.ExpandAndToString``1(System.Collections.Generic.IEnumerable{``0},System.String)
    name: ExpandAndToString<T>
    nameWithType: EnumerableExtensions.ExpandAndToString<T>
    fullName: OSharp.Collections.EnumerableExtensions.ExpandAndToString<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Collections.EnumerableExtensions.ExpandAndToString``1(System.Collections.Generic.IEnumerable{``0},System.String)
    name: ExpandAndToString(Of T)
    nameWithType: EnumerableExtensions.ExpandAndToString(Of T)
    fullName: OSharp.Collections.EnumerableExtensions.ExpandAndToString(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Collections.EnumerableExtensions.ExpandAndToString``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.String)
  commentId: M:OSharp.Collections.EnumerableExtensions.ExpandAndToString``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.String)
  isExternal: true
  name: ExpandAndToString<T>(IEnumerable<T>, Func<T, String>, String)
  nameWithType: EnumerableExtensions.ExpandAndToString<T>(IEnumerable<T>, Func<T, String>, String)
  fullName: OSharp.Collections.EnumerableExtensions.ExpandAndToString<T>(System.Collections.Generic.IEnumerable<T>, System.Func<T, System.String>, System.String)
  nameWithType.vb: EnumerableExtensions.ExpandAndToString(Of T)(IEnumerable(Of T), Func(Of T, String), String)
  fullName.vb: OSharp.Collections.EnumerableExtensions.ExpandAndToString(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Func(Of T, System.String), System.String)
  name.vb: ExpandAndToString(Of T)(IEnumerable(Of T), Func(Of T, String), String)
  spec.csharp:
  - uid: OSharp.Collections.EnumerableExtensions.ExpandAndToString``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.String)
    name: ExpandAndToString<T>
    nameWithType: EnumerableExtensions.ExpandAndToString<T>
    fullName: OSharp.Collections.EnumerableExtensions.ExpandAndToString<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Collections.EnumerableExtensions.ExpandAndToString``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.String)
    name: ExpandAndToString(Of T)
    nameWithType: EnumerableExtensions.ExpandAndToString(Of T)
    fullName: OSharp.Collections.EnumerableExtensions.ExpandAndToString(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Collections.EnumerableExtensions.IsEmpty``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:OSharp.Collections.EnumerableExtensions.IsEmpty``1(System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: IsEmpty<T>(IEnumerable<T>)
  nameWithType: EnumerableExtensions.IsEmpty<T>(IEnumerable<T>)
  fullName: OSharp.Collections.EnumerableExtensions.IsEmpty<T>(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: EnumerableExtensions.IsEmpty(Of T)(IEnumerable(Of T))
  fullName.vb: OSharp.Collections.EnumerableExtensions.IsEmpty(Of T)(System.Collections.Generic.IEnumerable(Of T))
  name.vb: IsEmpty(Of T)(IEnumerable(Of T))
  spec.csharp:
  - uid: OSharp.Collections.EnumerableExtensions.IsEmpty``1(System.Collections.Generic.IEnumerable{``0})
    name: IsEmpty<T>
    nameWithType: EnumerableExtensions.IsEmpty<T>
    fullName: OSharp.Collections.EnumerableExtensions.IsEmpty<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Collections.EnumerableExtensions.IsEmpty``1(System.Collections.Generic.IEnumerable{``0})
    name: IsEmpty(Of T)
    nameWithType: EnumerableExtensions.IsEmpty(Of T)
    fullName: OSharp.Collections.EnumerableExtensions.IsEmpty(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Collections.EnumerableExtensions.WhereIf``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Boolean)
  commentId: M:OSharp.Collections.EnumerableExtensions.WhereIf``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Boolean)
  isExternal: true
  name: WhereIf<T>(IEnumerable<T>, Func<T, Boolean>, Boolean)
  nameWithType: EnumerableExtensions.WhereIf<T>(IEnumerable<T>, Func<T, Boolean>, Boolean)
  fullName: OSharp.Collections.EnumerableExtensions.WhereIf<T>(System.Collections.Generic.IEnumerable<T>, System.Func<T, System.Boolean>, System.Boolean)
  nameWithType.vb: EnumerableExtensions.WhereIf(Of T)(IEnumerable(Of T), Func(Of T, Boolean), Boolean)
  fullName.vb: OSharp.Collections.EnumerableExtensions.WhereIf(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Func(Of T, System.Boolean), System.Boolean)
  name.vb: WhereIf(Of T)(IEnumerable(Of T), Func(Of T, Boolean), Boolean)
  spec.csharp:
  - uid: OSharp.Collections.EnumerableExtensions.WhereIf``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Boolean)
    name: WhereIf<T>
    nameWithType: EnumerableExtensions.WhereIf<T>
    fullName: OSharp.Collections.EnumerableExtensions.WhereIf<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Collections.EnumerableExtensions.WhereIf``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Boolean)
    name: WhereIf(Of T)
    nameWithType: EnumerableExtensions.WhereIf(Of T)
    fullName: OSharp.Collections.EnumerableExtensions.WhereIf(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Collections.EnumerableExtensions.OrderByPrefixes``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.String[])
  commentId: M:OSharp.Collections.EnumerableExtensions.OrderByPrefixes``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.String[])
  isExternal: true
  name: OrderByPrefixes<T>(IEnumerable<T>, Func<T, String>, String[])
  nameWithType: EnumerableExtensions.OrderByPrefixes<T>(IEnumerable<T>, Func<T, String>, String[])
  fullName: OSharp.Collections.EnumerableExtensions.OrderByPrefixes<T>(System.Collections.Generic.IEnumerable<T>, System.Func<T, System.String>, System.String[])
  nameWithType.vb: EnumerableExtensions.OrderByPrefixes(Of T)(IEnumerable(Of T), Func(Of T, String), String())
  fullName.vb: OSharp.Collections.EnumerableExtensions.OrderByPrefixes(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Func(Of T, System.String), System.String())
  name.vb: OrderByPrefixes(Of T)(IEnumerable(Of T), Func(Of T, String), String())
  spec.csharp:
  - uid: OSharp.Collections.EnumerableExtensions.OrderByPrefixes``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.String[])
    name: OrderByPrefixes<T>
    nameWithType: EnumerableExtensions.OrderByPrefixes<T>
    fullName: OSharp.Collections.EnumerableExtensions.OrderByPrefixes<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Collections.EnumerableExtensions.OrderByPrefixes``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.String[])
    name: OrderByPrefixes(Of T)
    nameWithType: EnumerableExtensions.OrderByPrefixes(Of T)
    fullName: OSharp.Collections.EnumerableExtensions.OrderByPrefixes(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Collections.EnumerableExtensions.DistinctBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  commentId: M:OSharp.Collections.EnumerableExtensions.DistinctBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  isExternal: true
  name: DistinctBy<T, TKey>(IEnumerable<T>, Func<T, TKey>)
  nameWithType: EnumerableExtensions.DistinctBy<T, TKey>(IEnumerable<T>, Func<T, TKey>)
  fullName: OSharp.Collections.EnumerableExtensions.DistinctBy<T, TKey>(System.Collections.Generic.IEnumerable<T>, System.Func<T, TKey>)
  nameWithType.vb: EnumerableExtensions.DistinctBy(Of T, TKey)(IEnumerable(Of T), Func(Of T, TKey))
  fullName.vb: OSharp.Collections.EnumerableExtensions.DistinctBy(Of T, TKey)(System.Collections.Generic.IEnumerable(Of T), System.Func(Of T, TKey))
  name.vb: DistinctBy(Of T, TKey)(IEnumerable(Of T), Func(Of T, TKey))
  spec.csharp:
  - uid: OSharp.Collections.EnumerableExtensions.DistinctBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
    name: DistinctBy<T, TKey>
    nameWithType: EnumerableExtensions.DistinctBy<T, TKey>
    fullName: OSharp.Collections.EnumerableExtensions.DistinctBy<T, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Collections.EnumerableExtensions.DistinctBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
    name: DistinctBy(Of T, TKey)
    nameWithType: EnumerableExtensions.DistinctBy(Of T, TKey)
    fullName: OSharp.Collections.EnumerableExtensions.DistinctBy(Of T, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Collections.EnumerableExtensions.OrderBy``1(System.Collections.Generic.IEnumerable{``0},System.String,System.ComponentModel.ListSortDirection)
  commentId: M:OSharp.Collections.EnumerableExtensions.OrderBy``1(System.Collections.Generic.IEnumerable{``0},System.String,System.ComponentModel.ListSortDirection)
  isExternal: true
  name: OrderBy<T>(IEnumerable<T>, String, ListSortDirection)
  nameWithType: EnumerableExtensions.OrderBy<T>(IEnumerable<T>, String, ListSortDirection)
  fullName: OSharp.Collections.EnumerableExtensions.OrderBy<T>(System.Collections.Generic.IEnumerable<T>, System.String, System.ComponentModel.ListSortDirection)
  nameWithType.vb: EnumerableExtensions.OrderBy(Of T)(IEnumerable(Of T), String, ListSortDirection)
  fullName.vb: OSharp.Collections.EnumerableExtensions.OrderBy(Of T)(System.Collections.Generic.IEnumerable(Of T), System.String, System.ComponentModel.ListSortDirection)
  name.vb: OrderBy(Of T)(IEnumerable(Of T), String, ListSortDirection)
  spec.csharp:
  - uid: OSharp.Collections.EnumerableExtensions.OrderBy``1(System.Collections.Generic.IEnumerable{``0},System.String,System.ComponentModel.ListSortDirection)
    name: OrderBy<T>
    nameWithType: EnumerableExtensions.OrderBy<T>
    fullName: OSharp.Collections.EnumerableExtensions.OrderBy<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.ComponentModel.ListSortDirection
    name: ListSortDirection
    nameWithType: ListSortDirection
    fullName: System.ComponentModel.ListSortDirection
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Collections.EnumerableExtensions.OrderBy``1(System.Collections.Generic.IEnumerable{``0},System.String,System.ComponentModel.ListSortDirection)
    name: OrderBy(Of T)
    nameWithType: EnumerableExtensions.OrderBy(Of T)
    fullName: OSharp.Collections.EnumerableExtensions.OrderBy(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.ComponentModel.ListSortDirection
    name: ListSortDirection
    nameWithType: ListSortDirection
    fullName: System.ComponentModel.ListSortDirection
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Collections.EnumerableExtensions.OrderBy``1(System.Collections.Generic.IEnumerable{``0},OSharp.Filter.SortCondition)
  commentId: M:OSharp.Collections.EnumerableExtensions.OrderBy``1(System.Collections.Generic.IEnumerable{``0},OSharp.Filter.SortCondition)
  isExternal: true
  name: OrderBy<T>(IEnumerable<T>, SortCondition)
  nameWithType: EnumerableExtensions.OrderBy<T>(IEnumerable<T>, SortCondition)
  fullName: OSharp.Collections.EnumerableExtensions.OrderBy<T>(System.Collections.Generic.IEnumerable<T>, OSharp.Filter.SortCondition)
  nameWithType.vb: EnumerableExtensions.OrderBy(Of T)(IEnumerable(Of T), SortCondition)
  fullName.vb: OSharp.Collections.EnumerableExtensions.OrderBy(Of T)(System.Collections.Generic.IEnumerable(Of T), OSharp.Filter.SortCondition)
  name.vb: OrderBy(Of T)(IEnumerable(Of T), SortCondition)
  spec.csharp:
  - uid: OSharp.Collections.EnumerableExtensions.OrderBy``1(System.Collections.Generic.IEnumerable{``0},OSharp.Filter.SortCondition)
    name: OrderBy<T>
    nameWithType: EnumerableExtensions.OrderBy<T>
    fullName: OSharp.Collections.EnumerableExtensions.OrderBy<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: OSharp.Filter.SortCondition
    name: SortCondition
    nameWithType: SortCondition
    fullName: OSharp.Filter.SortCondition
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Collections.EnumerableExtensions.OrderBy``1(System.Collections.Generic.IEnumerable{``0},OSharp.Filter.SortCondition)
    name: OrderBy(Of T)
    nameWithType: EnumerableExtensions.OrderBy(Of T)
    fullName: OSharp.Collections.EnumerableExtensions.OrderBy(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: OSharp.Filter.SortCondition
    name: SortCondition
    nameWithType: SortCondition
    fullName: OSharp.Filter.SortCondition
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Collections.EnumerableExtensions.OrderBy``1(System.Collections.Generic.IEnumerable{``0},OSharp.Filter.SortCondition{``0})
  commentId: M:OSharp.Collections.EnumerableExtensions.OrderBy``1(System.Collections.Generic.IEnumerable{``0},OSharp.Filter.SortCondition{``0})
  isExternal: true
  name: OrderBy<T>(IEnumerable<T>, SortCondition<T>)
  nameWithType: EnumerableExtensions.OrderBy<T>(IEnumerable<T>, SortCondition<T>)
  fullName: OSharp.Collections.EnumerableExtensions.OrderBy<T>(System.Collections.Generic.IEnumerable<T>, OSharp.Filter.SortCondition<T>)
  nameWithType.vb: EnumerableExtensions.OrderBy(Of T)(IEnumerable(Of T), SortCondition(Of T))
  fullName.vb: OSharp.Collections.EnumerableExtensions.OrderBy(Of T)(System.Collections.Generic.IEnumerable(Of T), OSharp.Filter.SortCondition(Of T))
  name.vb: OrderBy(Of T)(IEnumerable(Of T), SortCondition(Of T))
  spec.csharp:
  - uid: OSharp.Collections.EnumerableExtensions.OrderBy``1(System.Collections.Generic.IEnumerable{``0},OSharp.Filter.SortCondition{``0})
    name: OrderBy<T>
    nameWithType: EnumerableExtensions.OrderBy<T>
    fullName: OSharp.Collections.EnumerableExtensions.OrderBy<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: OSharp.Filter.SortCondition`1
    name: SortCondition
    nameWithType: SortCondition
    fullName: OSharp.Filter.SortCondition
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Collections.EnumerableExtensions.OrderBy``1(System.Collections.Generic.IEnumerable{``0},OSharp.Filter.SortCondition{``0})
    name: OrderBy(Of T)
    nameWithType: EnumerableExtensions.OrderBy(Of T)
    fullName: OSharp.Collections.EnumerableExtensions.OrderBy(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: OSharp.Filter.SortCondition`1
    name: SortCondition
    nameWithType: SortCondition
    fullName: OSharp.Filter.SortCondition
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Entity.EntityExtensions.CheckICreatedTime``2(``0)
  commentId: M:OSharp.Entity.EntityExtensions.CheckICreatedTime``2(``0)
  name: CheckICreatedTime<TEntity, TKey>(TEntity)
  nameWithType: EntityExtensions.CheckICreatedTime<TEntity, TKey>(TEntity)
  fullName: OSharp.Entity.EntityExtensions.CheckICreatedTime<TEntity, TKey>(TEntity)
  nameWithType.vb: EntityExtensions.CheckICreatedTime(Of TEntity, TKey)(TEntity)
  fullName.vb: OSharp.Entity.EntityExtensions.CheckICreatedTime(Of TEntity, TKey)(TEntity)
  name.vb: CheckICreatedTime(Of TEntity, TKey)(TEntity)
  spec.csharp:
  - uid: OSharp.Entity.EntityExtensions.CheckICreatedTime``2(``0)
    name: CheckICreatedTime<TEntity, TKey>
    nameWithType: EntityExtensions.CheckICreatedTime<TEntity, TKey>
    fullName: OSharp.Entity.EntityExtensions.CheckICreatedTime<TEntity, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Entity.EntityExtensions.CheckICreatedTime``2(``0)
    name: CheckICreatedTime(Of TEntity, TKey)
    nameWithType: EntityExtensions.CheckICreatedTime(Of TEntity, TKey)
    fullName: OSharp.Entity.EntityExtensions.CheckICreatedTime(Of TEntity, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Entity.EntityExtensions
  commentId: T:OSharp.Entity.EntityExtensions
  parent: OSharp.Entity
  name: EntityExtensions
  nameWithType: EntityExtensions
  fullName: OSharp.Entity.EntityExtensions
- uid: OSharp.Entity.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
  commentId: M:OSharp.Entity.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
  isExternal: true
  name: CheckICreationAudited<TEntity, TKey, TUserKey>(TEntity, IPrincipal)
  nameWithType: EntityExtensions.CheckICreationAudited<TEntity, TKey, TUserKey>(TEntity, IPrincipal)
  fullName: OSharp.Entity.EntityExtensions.CheckICreationAudited<TEntity, TKey, TUserKey>(TEntity, System.Security.Principal.IPrincipal)
  nameWithType.vb: EntityExtensions.CheckICreationAudited(Of TEntity, TKey, TUserKey)(TEntity, IPrincipal)
  fullName.vb: OSharp.Entity.EntityExtensions.CheckICreationAudited(Of TEntity, TKey, TUserKey)(TEntity, System.Security.Principal.IPrincipal)
  name.vb: CheckICreationAudited(Of TEntity, TKey, TUserKey)(TEntity, IPrincipal)
  spec.csharp:
  - uid: OSharp.Entity.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
    name: CheckICreationAudited<TEntity, TKey, TUserKey>
    nameWithType: EntityExtensions.CheckICreationAudited<TEntity, TKey, TUserKey>
    fullName: OSharp.Entity.EntityExtensions.CheckICreationAudited<TEntity, TKey, TUserKey>
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Entity.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
    name: CheckICreationAudited(Of TEntity, TKey, TUserKey)
    nameWithType: EntityExtensions.CheckICreationAudited(Of TEntity, TKey, TUserKey)
    fullName: OSharp.Entity.EntityExtensions.CheckICreationAudited(Of TEntity, TKey, TUserKey)
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Entity.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
  commentId: M:OSharp.Entity.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
  isExternal: true
  name: CheckIUpdateAudited<TEntity, TKey, TUserKey>(TEntity, IPrincipal)
  nameWithType: EntityExtensions.CheckIUpdateAudited<TEntity, TKey, TUserKey>(TEntity, IPrincipal)
  fullName: OSharp.Entity.EntityExtensions.CheckIUpdateAudited<TEntity, TKey, TUserKey>(TEntity, System.Security.Principal.IPrincipal)
  nameWithType.vb: EntityExtensions.CheckIUpdateAudited(Of TEntity, TKey, TUserKey)(TEntity, IPrincipal)
  fullName.vb: OSharp.Entity.EntityExtensions.CheckIUpdateAudited(Of TEntity, TKey, TUserKey)(TEntity, System.Security.Principal.IPrincipal)
  name.vb: CheckIUpdateAudited(Of TEntity, TKey, TUserKey)(TEntity, IPrincipal)
  spec.csharp:
  - uid: OSharp.Entity.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
    name: CheckIUpdateAudited<TEntity, TKey, TUserKey>
    nameWithType: EntityExtensions.CheckIUpdateAudited<TEntity, TKey, TUserKey>
    fullName: OSharp.Entity.EntityExtensions.CheckIUpdateAudited<TEntity, TKey, TUserKey>
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Entity.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
    name: CheckIUpdateAudited(Of TEntity, TKey, TUserKey)
    nameWithType: EntityExtensions.CheckIUpdateAudited(Of TEntity, TKey, TUserKey)
    fullName: OSharp.Entity.EntityExtensions.CheckIUpdateAudited(Of TEntity, TKey, TUserKey)
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Extensions.DictionaryExtensions.GetOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0)
  commentId: M:OSharp.Extensions.DictionaryExtensions.GetOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0)
  isExternal: true
  name: GetOrDefault<TKey, TValue>(IDictionary<TKey, TValue>, TKey)
  nameWithType: DictionaryExtensions.GetOrDefault<TKey, TValue>(IDictionary<TKey, TValue>, TKey)
  fullName: OSharp.Extensions.DictionaryExtensions.GetOrDefault<TKey, TValue>(System.Collections.Generic.IDictionary<TKey, TValue>, TKey)
  nameWithType.vb: DictionaryExtensions.GetOrDefault(Of TKey, TValue)(IDictionary(Of TKey, TValue), TKey)
  fullName.vb: OSharp.Extensions.DictionaryExtensions.GetOrDefault(Of TKey, TValue)(System.Collections.Generic.IDictionary(Of TKey, TValue), TKey)
  name.vb: GetOrDefault(Of TKey, TValue)(IDictionary(Of TKey, TValue), TKey)
  spec.csharp:
  - uid: OSharp.Extensions.DictionaryExtensions.GetOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0)
    name: GetOrDefault<TKey, TValue>
    nameWithType: DictionaryExtensions.GetOrDefault<TKey, TValue>
    fullName: OSharp.Extensions.DictionaryExtensions.GetOrDefault<TKey, TValue>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.DictionaryExtensions.GetOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0)
    name: GetOrDefault(Of TKey, TValue)
    nameWithType: DictionaryExtensions.GetOrDefault(Of TKey, TValue)
    fullName: OSharp.Extensions.DictionaryExtensions.GetOrDefault(Of TKey, TValue)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Extensions.DictionaryExtensions
  commentId: T:OSharp.Extensions.DictionaryExtensions
  parent: OSharp.Extensions
  name: DictionaryExtensions
  nameWithType: DictionaryExtensions
  fullName: OSharp.Extensions.DictionaryExtensions
- uid: OSharp.Extensions.DictionaryExtensions.GetOrAdd``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``1})
  commentId: M:OSharp.Extensions.DictionaryExtensions.GetOrAdd``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``1})
  isExternal: true
  name: GetOrAdd<TKey, TValue>(IDictionary<TKey, TValue>, TKey, Func<TValue>)
  nameWithType: DictionaryExtensions.GetOrAdd<TKey, TValue>(IDictionary<TKey, TValue>, TKey, Func<TValue>)
  fullName: OSharp.Extensions.DictionaryExtensions.GetOrAdd<TKey, TValue>(System.Collections.Generic.IDictionary<TKey, TValue>, TKey, System.Func<TValue>)
  nameWithType.vb: DictionaryExtensions.GetOrAdd(Of TKey, TValue)(IDictionary(Of TKey, TValue), TKey, Func(Of TValue))
  fullName.vb: OSharp.Extensions.DictionaryExtensions.GetOrAdd(Of TKey, TValue)(System.Collections.Generic.IDictionary(Of TKey, TValue), TKey, System.Func(Of TValue))
  name.vb: GetOrAdd(Of TKey, TValue)(IDictionary(Of TKey, TValue), TKey, Func(Of TValue))
  spec.csharp:
  - uid: OSharp.Extensions.DictionaryExtensions.GetOrAdd``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``1})
    name: GetOrAdd<TKey, TValue>
    nameWithType: DictionaryExtensions.GetOrAdd<TKey, TValue>
    fullName: OSharp.Extensions.DictionaryExtensions.GetOrAdd<TKey, TValue>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.DictionaryExtensions.GetOrAdd``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``1})
    name: GetOrAdd(Of TKey, TValue)
    nameWithType: DictionaryExtensions.GetOrAdd(Of TKey, TValue)
    fullName: OSharp.Extensions.DictionaryExtensions.GetOrAdd(Of TKey, TValue)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
  commentId: M:OSharp.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
  isExternal: true
  name: CastTo(Object, Type)
  nameWithType: ObjectExtensions.CastTo(Object, Type)
  fullName: OSharp.Extensions.ObjectExtensions.CastTo(System.Object, System.Type)
  spec.csharp:
  - uid: OSharp.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
    name: CastTo
    nameWithType: ObjectExtensions.CastTo
    fullName: OSharp.Extensions.ObjectExtensions.CastTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
    name: CastTo
    nameWithType: ObjectExtensions.CastTo
    fullName: OSharp.Extensions.ObjectExtensions.CastTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Extensions.ObjectExtensions
  commentId: T:OSharp.Extensions.ObjectExtensions
  parent: OSharp.Extensions
  name: ObjectExtensions
  nameWithType: ObjectExtensions
  fullName: OSharp.Extensions.ObjectExtensions
- uid: OSharp.Extensions.ObjectExtensions.CastTo``1(System.Object)
  commentId: M:OSharp.Extensions.ObjectExtensions.CastTo``1(System.Object)
  isExternal: true
  name: CastTo<T>(Object)
  nameWithType: ObjectExtensions.CastTo<T>(Object)
  fullName: OSharp.Extensions.ObjectExtensions.CastTo<T>(System.Object)
  nameWithType.vb: ObjectExtensions.CastTo(Of T)(Object)
  fullName.vb: OSharp.Extensions.ObjectExtensions.CastTo(Of T)(System.Object)
  name.vb: CastTo(Of T)(Object)
  spec.csharp:
  - uid: OSharp.Extensions.ObjectExtensions.CastTo``1(System.Object)
    name: CastTo<T>
    nameWithType: ObjectExtensions.CastTo<T>
    fullName: OSharp.Extensions.ObjectExtensions.CastTo<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ObjectExtensions.CastTo``1(System.Object)
    name: CastTo(Of T)
    nameWithType: ObjectExtensions.CastTo(Of T)
    fullName: OSharp.Extensions.ObjectExtensions.CastTo(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
  commentId: M:OSharp.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
  isExternal: true
  name: CastTo<T>(Object, T)
  nameWithType: ObjectExtensions.CastTo<T>(Object, T)
  fullName: OSharp.Extensions.ObjectExtensions.CastTo<T>(System.Object, T)
  nameWithType.vb: ObjectExtensions.CastTo(Of T)(Object, T)
  fullName.vb: OSharp.Extensions.ObjectExtensions.CastTo(Of T)(System.Object, T)
  name.vb: CastTo(Of T)(Object, T)
  spec.csharp:
  - uid: OSharp.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
    name: CastTo<T>
    nameWithType: ObjectExtensions.CastTo<T>
    fullName: OSharp.Extensions.ObjectExtensions.CastTo<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
    name: CastTo(Of T)
    nameWithType: ObjectExtensions.CastTo(Of T)
    fullName: OSharp.Extensions.ObjectExtensions.CastTo(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
  commentId: M:OSharp.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
  name: IsIn<T>(T, T[])
  nameWithType: ObjectExtensions.IsIn<T>(T, T[])
  fullName: OSharp.Extensions.ObjectExtensions.IsIn<T>(T, T[])
  nameWithType.vb: ObjectExtensions.IsIn(Of T)(T, T())
  fullName.vb: OSharp.Extensions.ObjectExtensions.IsIn(Of T)(T, T())
  name.vb: IsIn(Of T)(T, T())
  spec.csharp:
  - uid: OSharp.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
    name: IsIn<T>
    nameWithType: ObjectExtensions.IsIn<T>
    fullName: OSharp.Extensions.ObjectExtensions.IsIn<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
    name: IsIn(Of T)
    nameWithType: ObjectExtensions.IsIn(Of T)
    fullName: OSharp.Extensions.ObjectExtensions.IsIn(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Extensions.ObjectExtensions.ToDynamic(System.Object)
  commentId: M:OSharp.Extensions.ObjectExtensions.ToDynamic(System.Object)
  isExternal: true
  name: ToDynamic(Object)
  nameWithType: ObjectExtensions.ToDynamic(Object)
  fullName: OSharp.Extensions.ObjectExtensions.ToDynamic(System.Object)
  spec.csharp:
  - uid: OSharp.Extensions.ObjectExtensions.ToDynamic(System.Object)
    name: ToDynamic
    nameWithType: ObjectExtensions.ToDynamic
    fullName: OSharp.Extensions.ObjectExtensions.ToDynamic
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ObjectExtensions.ToDynamic(System.Object)
    name: ToDynamic
    nameWithType: ObjectExtensions.ToDynamic
    fullName: OSharp.Extensions.ObjectExtensions.ToDynamic
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Extensions.ObjectExtensions.DeepClone``1(``0)
  commentId: M:OSharp.Extensions.ObjectExtensions.DeepClone``1(``0)
  name: DeepClone<T>(T)
  nameWithType: ObjectExtensions.DeepClone<T>(T)
  fullName: OSharp.Extensions.ObjectExtensions.DeepClone<T>(T)
  nameWithType.vb: ObjectExtensions.DeepClone(Of T)(T)
  fullName.vb: OSharp.Extensions.ObjectExtensions.DeepClone(Of T)(T)
  name.vb: DeepClone(Of T)(T)
  spec.csharp:
  - uid: OSharp.Extensions.ObjectExtensions.DeepClone``1(``0)
    name: DeepClone<T>
    nameWithType: ObjectExtensions.DeepClone<T>
    fullName: OSharp.Extensions.ObjectExtensions.DeepClone<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ObjectExtensions.DeepClone``1(``0)
    name: DeepClone(Of T)
    nameWithType: ObjectExtensions.DeepClone(Of T)
    fullName: OSharp.Extensions.ObjectExtensions.DeepClone(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
  commentId: M:OSharp.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
  isExternal: true
  name: Required<T>(T, Func<T, Boolean>, String)
  nameWithType: ParameterCheckExtensions.Required<T>(T, Func<T, Boolean>, String)
  fullName: OSharp.Extensions.ParameterCheckExtensions.Required<T>(T, System.Func<T, System.Boolean>, System.String)
  nameWithType.vb: ParameterCheckExtensions.Required(Of T)(T, Func(Of T, Boolean), String)
  fullName.vb: OSharp.Extensions.ParameterCheckExtensions.Required(Of T)(T, System.Func(Of T, System.Boolean), System.String)
  name.vb: Required(Of T)(T, Func(Of T, Boolean), String)
  spec.csharp:
  - uid: OSharp.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
    name: Required<T>
    nameWithType: ParameterCheckExtensions.Required<T>
    fullName: OSharp.Extensions.ParameterCheckExtensions.Required<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
    name: Required(Of T)
    nameWithType: ParameterCheckExtensions.Required(Of T)
    fullName: OSharp.Extensions.ParameterCheckExtensions.Required(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Extensions.ParameterCheckExtensions
  commentId: T:OSharp.Extensions.ParameterCheckExtensions
  parent: OSharp.Extensions
  name: ParameterCheckExtensions
  nameWithType: ParameterCheckExtensions
  fullName: OSharp.Extensions.ParameterCheckExtensions
- uid: OSharp.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
  commentId: M:OSharp.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
  isExternal: true
  name: Required<T, TException>(T, Func<T, Boolean>, String)
  nameWithType: ParameterCheckExtensions.Required<T, TException>(T, Func<T, Boolean>, String)
  fullName: OSharp.Extensions.ParameterCheckExtensions.Required<T, TException>(T, System.Func<T, System.Boolean>, System.String)
  nameWithType.vb: ParameterCheckExtensions.Required(Of T, TException)(T, Func(Of T, Boolean), String)
  fullName.vb: OSharp.Extensions.ParameterCheckExtensions.Required(Of T, TException)(T, System.Func(Of T, System.Boolean), System.String)
  name.vb: Required(Of T, TException)(T, Func(Of T, Boolean), String)
  spec.csharp:
  - uid: OSharp.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
    name: Required<T, TException>
    nameWithType: ParameterCheckExtensions.Required<T, TException>
    fullName: OSharp.Extensions.ParameterCheckExtensions.Required<T, TException>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
    name: Required(Of T, TException)
    nameWithType: ParameterCheckExtensions.Required(Of T, TException)
    fullName: OSharp.Extensions.ParameterCheckExtensions.Required(Of T, TException)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
  commentId: M:OSharp.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
  isExternal: true
  name: CheckNotNull<T>(T, String)
  nameWithType: ParameterCheckExtensions.CheckNotNull<T>(T, String)
  fullName: OSharp.Extensions.ParameterCheckExtensions.CheckNotNull<T>(T, System.String)
  nameWithType.vb: ParameterCheckExtensions.CheckNotNull(Of T)(T, String)
  fullName.vb: OSharp.Extensions.ParameterCheckExtensions.CheckNotNull(Of T)(T, System.String)
  name.vb: CheckNotNull(Of T)(T, String)
  spec.csharp:
  - uid: OSharp.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
    name: CheckNotNull<T>
    nameWithType: ParameterCheckExtensions.CheckNotNull<T>
    fullName: OSharp.Extensions.ParameterCheckExtensions.CheckNotNull<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
    name: CheckNotNull(Of T)
    nameWithType: ParameterCheckExtensions.CheckNotNull(Of T)
    fullName: OSharp.Extensions.ParameterCheckExtensions.CheckNotNull(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Extensions.ParameterCheckExtensions.CheckNotNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0},System.String)
  commentId: M:OSharp.Extensions.ParameterCheckExtensions.CheckNotNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0},System.String)
  isExternal: true
  name: CheckNotNullOrEmpty<T>(IEnumerable<T>, String)
  nameWithType: ParameterCheckExtensions.CheckNotNullOrEmpty<T>(IEnumerable<T>, String)
  fullName: OSharp.Extensions.ParameterCheckExtensions.CheckNotNullOrEmpty<T>(System.Collections.Generic.IEnumerable<T>, System.String)
  nameWithType.vb: ParameterCheckExtensions.CheckNotNullOrEmpty(Of T)(IEnumerable(Of T), String)
  fullName.vb: OSharp.Extensions.ParameterCheckExtensions.CheckNotNullOrEmpty(Of T)(System.Collections.Generic.IEnumerable(Of T), System.String)
  name.vb: CheckNotNullOrEmpty(Of T)(IEnumerable(Of T), String)
  spec.csharp:
  - uid: OSharp.Extensions.ParameterCheckExtensions.CheckNotNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0},System.String)
    name: CheckNotNullOrEmpty<T>
    nameWithType: ParameterCheckExtensions.CheckNotNullOrEmpty<T>
    fullName: OSharp.Extensions.ParameterCheckExtensions.CheckNotNullOrEmpty<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ParameterCheckExtensions.CheckNotNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0},System.String)
    name: CheckNotNullOrEmpty(Of T)
    nameWithType: ParameterCheckExtensions.CheckNotNullOrEmpty(Of T)
    fullName: OSharp.Extensions.ParameterCheckExtensions.CheckNotNullOrEmpty(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
  commentId: M:OSharp.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
  isExternal: true
  name: TryCatch<T>(T, Action<T>, Action<Exception>, Action<T>)
  nameWithType: TryCatchExtensions.TryCatch<T>(T, Action<T>, Action<Exception>, Action<T>)
  fullName: OSharp.Extensions.TryCatchExtensions.TryCatch<T>(T, System.Action<T>, System.Action<System.Exception>, System.Action<T>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of T)(T, Action(Of T), Action(Of Exception), Action(Of T))
  fullName.vb: OSharp.Extensions.TryCatchExtensions.TryCatch(Of T)(T, System.Action(Of T), System.Action(Of System.Exception), System.Action(Of T))
  name.vb: TryCatch(Of T)(T, Action(Of T), Action(Of Exception), Action(Of T))
  spec.csharp:
  - uid: OSharp.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
    name: TryCatch<T>
    nameWithType: TryCatchExtensions.TryCatch<T>
    fullName: OSharp.Extensions.TryCatchExtensions.TryCatch<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
    name: TryCatch(Of T)
    nameWithType: TryCatchExtensions.TryCatch(Of T)
    fullName: OSharp.Extensions.TryCatchExtensions.TryCatch(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Extensions.TryCatchExtensions
  commentId: T:OSharp.Extensions.TryCatchExtensions
  parent: OSharp.Extensions
  name: TryCatchExtensions
  nameWithType: TryCatchExtensions
  fullName: OSharp.Extensions.TryCatchExtensions
- uid: OSharp.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
  commentId: M:OSharp.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
  isExternal: true
  name: TryCatch<T>(T, Action<T>, Action<Exception>)
  nameWithType: TryCatchExtensions.TryCatch<T>(T, Action<T>, Action<Exception>)
  fullName: OSharp.Extensions.TryCatchExtensions.TryCatch<T>(T, System.Action<T>, System.Action<System.Exception>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of T)(T, Action(Of T), Action(Of Exception))
  fullName.vb: OSharp.Extensions.TryCatchExtensions.TryCatch(Of T)(T, System.Action(Of T), System.Action(Of System.Exception))
  name.vb: TryCatch(Of T)(T, Action(Of T), Action(Of Exception))
  spec.csharp:
  - uid: OSharp.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
    name: TryCatch<T>
    nameWithType: TryCatchExtensions.TryCatch<T>
    fullName: OSharp.Extensions.TryCatchExtensions.TryCatch<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
    name: TryCatch(Of T)
    nameWithType: TryCatchExtensions.TryCatch(Of T)
    fullName: OSharp.Extensions.TryCatchExtensions.TryCatch(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
  commentId: M:OSharp.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
  isExternal: true
  name: TryCatch<T, TResult>(T, Func<T, TResult>, Action<Exception>, Action<T>)
  nameWithType: TryCatchExtensions.TryCatch<T, TResult>(T, Func<T, TResult>, Action<Exception>, Action<T>)
  fullName: OSharp.Extensions.TryCatchExtensions.TryCatch<T, TResult>(T, System.Func<T, TResult>, System.Action<System.Exception>, System.Action<T>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of T, TResult)(T, Func(Of T, TResult), Action(Of Exception), Action(Of T))
  fullName.vb: OSharp.Extensions.TryCatchExtensions.TryCatch(Of T, TResult)(T, System.Func(Of T, TResult), System.Action(Of System.Exception), System.Action(Of T))
  name.vb: TryCatch(Of T, TResult)(T, Func(Of T, TResult), Action(Of Exception), Action(Of T))
  spec.csharp:
  - uid: OSharp.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
    name: TryCatch<T, TResult>
    nameWithType: TryCatchExtensions.TryCatch<T, TResult>
    fullName: OSharp.Extensions.TryCatchExtensions.TryCatch<T, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
    name: TryCatch(Of T, TResult)
    nameWithType: TryCatchExtensions.TryCatch(Of T, TResult)
    fullName: OSharp.Extensions.TryCatchExtensions.TryCatch(Of T, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
  commentId: M:OSharp.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
  isExternal: true
  name: TryCatch<T, TResult>(T, Func<T, TResult>, Action<Exception>)
  nameWithType: TryCatchExtensions.TryCatch<T, TResult>(T, Func<T, TResult>, Action<Exception>)
  fullName: OSharp.Extensions.TryCatchExtensions.TryCatch<T, TResult>(T, System.Func<T, TResult>, System.Action<System.Exception>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of T, TResult)(T, Func(Of T, TResult), Action(Of Exception))
  fullName.vb: OSharp.Extensions.TryCatchExtensions.TryCatch(Of T, TResult)(T, System.Func(Of T, TResult), System.Action(Of System.Exception))
  name.vb: TryCatch(Of T, TResult)(T, Func(Of T, TResult), Action(Of Exception))
  spec.csharp:
  - uid: OSharp.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
    name: TryCatch<T, TResult>
    nameWithType: TryCatchExtensions.TryCatch<T, TResult>
    fullName: OSharp.Extensions.TryCatchExtensions.TryCatch<T, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
    name: TryCatch(Of T, TResult)
    nameWithType: TryCatchExtensions.TryCatch(Of T, TResult)
    fullName: OSharp.Extensions.TryCatchExtensions.TryCatch(Of T, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
  commentId: M:OSharp.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
  isExternal: true
  name: TryFinally<T>(T, Action<T>, Action<T>)
  nameWithType: TryCatchExtensions.TryFinally<T>(T, Action<T>, Action<T>)
  fullName: OSharp.Extensions.TryCatchExtensions.TryFinally<T>(T, System.Action<T>, System.Action<T>)
  nameWithType.vb: TryCatchExtensions.TryFinally(Of T)(T, Action(Of T), Action(Of T))
  fullName.vb: OSharp.Extensions.TryCatchExtensions.TryFinally(Of T)(T, System.Action(Of T), System.Action(Of T))
  name.vb: TryFinally(Of T)(T, Action(Of T), Action(Of T))
  spec.csharp:
  - uid: OSharp.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
    name: TryFinally<T>
    nameWithType: TryCatchExtensions.TryFinally<T>
    fullName: OSharp.Extensions.TryCatchExtensions.TryFinally<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
    name: TryFinally(Of T)
    nameWithType: TryCatchExtensions.TryFinally(Of T)
    fullName: OSharp.Extensions.TryCatchExtensions.TryFinally(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
  commentId: M:OSharp.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
  isExternal: true
  name: ToJsonString(Object, Boolean, Boolean)
  nameWithType: JsonExtensions.ToJsonString(Object, Boolean, Boolean)
  fullName: OSharp.Json.JsonExtensions.ToJsonString(System.Object, System.Boolean, System.Boolean)
  spec.csharp:
  - uid: OSharp.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
    name: ToJsonString
    nameWithType: JsonExtensions.ToJsonString
    fullName: OSharp.Json.JsonExtensions.ToJsonString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
    name: ToJsonString
    nameWithType: JsonExtensions.ToJsonString
    fullName: OSharp.Json.JsonExtensions.ToJsonString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Json.JsonExtensions
  commentId: T:OSharp.Json.JsonExtensions
  parent: OSharp.Json
  name: JsonExtensions
  nameWithType: JsonExtensions
  fullName: OSharp.Json.JsonExtensions
- uid: OSharp.Mapping.MapperExtensions.MapTo``1(System.Object)
  commentId: M:OSharp.Mapping.MapperExtensions.MapTo``1(System.Object)
  isExternal: true
  name: MapTo<TTarget>(Object)
  nameWithType: MapperExtensions.MapTo<TTarget>(Object)
  fullName: OSharp.Mapping.MapperExtensions.MapTo<TTarget>(System.Object)
  nameWithType.vb: MapperExtensions.MapTo(Of TTarget)(Object)
  fullName.vb: OSharp.Mapping.MapperExtensions.MapTo(Of TTarget)(System.Object)
  name.vb: MapTo(Of TTarget)(Object)
  spec.csharp:
  - uid: OSharp.Mapping.MapperExtensions.MapTo``1(System.Object)
    name: MapTo<TTarget>
    nameWithType: MapperExtensions.MapTo<TTarget>
    fullName: OSharp.Mapping.MapperExtensions.MapTo<TTarget>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Mapping.MapperExtensions.MapTo``1(System.Object)
    name: MapTo(Of TTarget)
    nameWithType: MapperExtensions.MapTo(Of TTarget)
    fullName: OSharp.Mapping.MapperExtensions.MapTo(Of TTarget)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Mapping.MapperExtensions
  commentId: T:OSharp.Mapping.MapperExtensions
  parent: OSharp.Mapping
  name: MapperExtensions
  nameWithType: MapperExtensions
  fullName: OSharp.Mapping.MapperExtensions
- uid: OSharp.Mapping.MapperExtensions.MapTo``2(``0,``1)
  commentId: M:OSharp.Mapping.MapperExtensions.MapTo``2(``0,``1)
  name: MapTo<TSource, TTarget>(TSource, TTarget)
  nameWithType: MapperExtensions.MapTo<TSource, TTarget>(TSource, TTarget)
  fullName: OSharp.Mapping.MapperExtensions.MapTo<TSource, TTarget>(TSource, TTarget)
  nameWithType.vb: MapperExtensions.MapTo(Of TSource, TTarget)(TSource, TTarget)
  fullName.vb: OSharp.Mapping.MapperExtensions.MapTo(Of TSource, TTarget)(TSource, TTarget)
  name.vb: MapTo(Of TSource, TTarget)(TSource, TTarget)
  spec.csharp:
  - uid: OSharp.Mapping.MapperExtensions.MapTo``2(``0,``1)
    name: MapTo<TSource, TTarget>
    nameWithType: MapperExtensions.MapTo<TSource, TTarget>
    fullName: OSharp.Mapping.MapperExtensions.MapTo<TSource, TTarget>
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Mapping.MapperExtensions.MapTo``2(``0,``1)
    name: MapTo(Of TSource, TTarget)
    nameWithType: MapperExtensions.MapTo(Of TSource, TTarget)
    fullName: OSharp.Mapping.MapperExtensions.MapTo(Of TSource, TTarget)
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Reflection.LockExtensions.Locking(System.Object,System.Action)
  commentId: M:OSharp.Reflection.LockExtensions.Locking(System.Object,System.Action)
  isExternal: true
  name: Locking(Object, Action)
  nameWithType: LockExtensions.Locking(Object, Action)
  fullName: OSharp.Reflection.LockExtensions.Locking(System.Object, System.Action)
  spec.csharp:
  - uid: OSharp.Reflection.LockExtensions.Locking(System.Object,System.Action)
    name: Locking
    nameWithType: LockExtensions.Locking
    fullName: OSharp.Reflection.LockExtensions.Locking
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Reflection.LockExtensions.Locking(System.Object,System.Action)
    name: Locking
    nameWithType: LockExtensions.Locking
    fullName: OSharp.Reflection.LockExtensions.Locking
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Reflection.LockExtensions
  commentId: T:OSharp.Reflection.LockExtensions
  parent: OSharp.Reflection
  name: LockExtensions
  nameWithType: LockExtensions
  fullName: OSharp.Reflection.LockExtensions
- uid: OSharp.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
  commentId: M:OSharp.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
  isExternal: true
  name: Locking<T>(T, Action<T>)
  nameWithType: LockExtensions.Locking<T>(T, Action<T>)
  fullName: OSharp.Reflection.LockExtensions.Locking<T>(T, System.Action<T>)
  nameWithType.vb: LockExtensions.Locking(Of T)(T, Action(Of T))
  fullName.vb: OSharp.Reflection.LockExtensions.Locking(Of T)(T, System.Action(Of T))
  name.vb: Locking(Of T)(T, Action(Of T))
  spec.csharp:
  - uid: OSharp.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
    name: Locking<T>
    nameWithType: LockExtensions.Locking<T>
    fullName: OSharp.Reflection.LockExtensions.Locking<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
    name: Locking(Of T)
    nameWithType: LockExtensions.Locking(Of T)
    fullName: OSharp.Reflection.LockExtensions.Locking(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
  commentId: M:OSharp.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
  isExternal: true
  name: Locking<TResult>(Object, Func<TResult>)
  nameWithType: LockExtensions.Locking<TResult>(Object, Func<TResult>)
  fullName: OSharp.Reflection.LockExtensions.Locking<TResult>(System.Object, System.Func<TResult>)
  nameWithType.vb: LockExtensions.Locking(Of TResult)(Object, Func(Of TResult))
  fullName.vb: OSharp.Reflection.LockExtensions.Locking(Of TResult)(System.Object, System.Func(Of TResult))
  name.vb: Locking(Of TResult)(Object, Func(Of TResult))
  spec.csharp:
  - uid: OSharp.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
    name: Locking<TResult>
    nameWithType: LockExtensions.Locking<TResult>
    fullName: OSharp.Reflection.LockExtensions.Locking<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
    name: Locking(Of TResult)
    nameWithType: LockExtensions.Locking(Of TResult)
    fullName: OSharp.Reflection.LockExtensions.Locking(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
  commentId: M:OSharp.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
  isExternal: true
  name: Locking<TSource, TResult>(TSource, Func<TSource, TResult>)
  nameWithType: LockExtensions.Locking<TSource, TResult>(TSource, Func<TSource, TResult>)
  fullName: OSharp.Reflection.LockExtensions.Locking<TSource, TResult>(TSource, System.Func<TSource, TResult>)
  nameWithType.vb: LockExtensions.Locking(Of TSource, TResult)(TSource, Func(Of TSource, TResult))
  fullName.vb: OSharp.Reflection.LockExtensions.Locking(Of TSource, TResult)(TSource, System.Func(Of TSource, TResult))
  name.vb: Locking(Of TSource, TResult)(TSource, Func(Of TSource, TResult))
  spec.csharp:
  - uid: OSharp.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
    name: Locking<TSource, TResult>
    nameWithType: LockExtensions.Locking<TSource, TResult>
    fullName: OSharp.Reflection.LockExtensions.Locking<TSource, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
    name: Locking(Of TSource, TResult)
    nameWithType: LockExtensions.Locking(Of TSource, TResult)
    fullName: OSharp.Reflection.LockExtensions.Locking(Of TSource, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Dependency.ScopedDictionaryExtensions.GetConnUnitOfWork(Hybrid.Dependency.ScopedDictionary,System.String)
  commentId: M:Hybrid.Dependency.ScopedDictionaryExtensions.GetConnUnitOfWork(Hybrid.Dependency.ScopedDictionary,System.String)
  isExternal: true
  name: GetConnUnitOfWork(ScopedDictionary, String)
  nameWithType: ScopedDictionaryExtensions.GetConnUnitOfWork(ScopedDictionary, String)
  fullName: Hybrid.Dependency.ScopedDictionaryExtensions.GetConnUnitOfWork(Hybrid.Dependency.ScopedDictionary, System.String)
  spec.csharp:
  - uid: Hybrid.Dependency.ScopedDictionaryExtensions.GetConnUnitOfWork(Hybrid.Dependency.ScopedDictionary,System.String)
    name: GetConnUnitOfWork
    nameWithType: ScopedDictionaryExtensions.GetConnUnitOfWork
    fullName: Hybrid.Dependency.ScopedDictionaryExtensions.GetConnUnitOfWork
  - name: (
    nameWithType: (
    fullName: (
  - uid: Hybrid.Dependency.ScopedDictionary
    name: ScopedDictionary
    nameWithType: ScopedDictionary
    fullName: Hybrid.Dependency.ScopedDictionary
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Dependency.ScopedDictionaryExtensions.GetConnUnitOfWork(Hybrid.Dependency.ScopedDictionary,System.String)
    name: GetConnUnitOfWork
    nameWithType: ScopedDictionaryExtensions.GetConnUnitOfWork
    fullName: Hybrid.Dependency.ScopedDictionaryExtensions.GetConnUnitOfWork
  - name: (
    nameWithType: (
    fullName: (
  - uid: Hybrid.Dependency.ScopedDictionary
    name: ScopedDictionary
    nameWithType: ScopedDictionary
    fullName: Hybrid.Dependency.ScopedDictionary
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Dependency.ScopedDictionaryExtensions
  commentId: T:Hybrid.Dependency.ScopedDictionaryExtensions
  parent: Hybrid.Dependency
  name: ScopedDictionaryExtensions
  nameWithType: ScopedDictionaryExtensions
  fullName: Hybrid.Dependency.ScopedDictionaryExtensions
- uid: Hybrid.Dependency.ScopedDictionaryExtensions.GetConnUnitOfWorks(Hybrid.Dependency.ScopedDictionary)
  commentId: M:Hybrid.Dependency.ScopedDictionaryExtensions.GetConnUnitOfWorks(Hybrid.Dependency.ScopedDictionary)
  name: GetConnUnitOfWorks(ScopedDictionary)
  nameWithType: ScopedDictionaryExtensions.GetConnUnitOfWorks(ScopedDictionary)
  fullName: Hybrid.Dependency.ScopedDictionaryExtensions.GetConnUnitOfWorks(Hybrid.Dependency.ScopedDictionary)
  spec.csharp:
  - uid: Hybrid.Dependency.ScopedDictionaryExtensions.GetConnUnitOfWorks(Hybrid.Dependency.ScopedDictionary)
    name: GetConnUnitOfWorks
    nameWithType: ScopedDictionaryExtensions.GetConnUnitOfWorks
    fullName: Hybrid.Dependency.ScopedDictionaryExtensions.GetConnUnitOfWorks
  - name: (
    nameWithType: (
    fullName: (
  - uid: Hybrid.Dependency.ScopedDictionary
    name: ScopedDictionary
    nameWithType: ScopedDictionary
    fullName: Hybrid.Dependency.ScopedDictionary
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Dependency.ScopedDictionaryExtensions.GetConnUnitOfWorks(Hybrid.Dependency.ScopedDictionary)
    name: GetConnUnitOfWorks
    nameWithType: ScopedDictionaryExtensions.GetConnUnitOfWorks
    fullName: Hybrid.Dependency.ScopedDictionaryExtensions.GetConnUnitOfWorks
  - name: (
    nameWithType: (
    fullName: (
  - uid: Hybrid.Dependency.ScopedDictionary
    name: ScopedDictionary
    nameWithType: ScopedDictionary
    fullName: Hybrid.Dependency.ScopedDictionary
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Dependency.ScopedDictionaryExtensions.SetConnUnitOfWork(Hybrid.Dependency.ScopedDictionary,System.String,Hybrid.Domain.Uow.IUnitOfWork)
  commentId: M:Hybrid.Dependency.ScopedDictionaryExtensions.SetConnUnitOfWork(Hybrid.Dependency.ScopedDictionary,System.String,Hybrid.Domain.Uow.IUnitOfWork)
  isExternal: true
  name: SetConnUnitOfWork(ScopedDictionary, String, IUnitOfWork)
  nameWithType: ScopedDictionaryExtensions.SetConnUnitOfWork(ScopedDictionary, String, IUnitOfWork)
  fullName: Hybrid.Dependency.ScopedDictionaryExtensions.SetConnUnitOfWork(Hybrid.Dependency.ScopedDictionary, System.String, Hybrid.Domain.Uow.IUnitOfWork)
  spec.csharp:
  - uid: Hybrid.Dependency.ScopedDictionaryExtensions.SetConnUnitOfWork(Hybrid.Dependency.ScopedDictionary,System.String,Hybrid.Domain.Uow.IUnitOfWork)
    name: SetConnUnitOfWork
    nameWithType: ScopedDictionaryExtensions.SetConnUnitOfWork
    fullName: Hybrid.Dependency.ScopedDictionaryExtensions.SetConnUnitOfWork
  - name: (
    nameWithType: (
    fullName: (
  - uid: Hybrid.Dependency.ScopedDictionary
    name: ScopedDictionary
    nameWithType: ScopedDictionary
    fullName: Hybrid.Dependency.ScopedDictionary
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Hybrid.Domain.Uow.IUnitOfWork
    name: IUnitOfWork
    nameWithType: IUnitOfWork
    fullName: Hybrid.Domain.Uow.IUnitOfWork
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Dependency.ScopedDictionaryExtensions.SetConnUnitOfWork(Hybrid.Dependency.ScopedDictionary,System.String,Hybrid.Domain.Uow.IUnitOfWork)
    name: SetConnUnitOfWork
    nameWithType: ScopedDictionaryExtensions.SetConnUnitOfWork
    fullName: Hybrid.Dependency.ScopedDictionaryExtensions.SetConnUnitOfWork
  - name: (
    nameWithType: (
    fullName: (
  - uid: Hybrid.Dependency.ScopedDictionary
    name: ScopedDictionary
    nameWithType: ScopedDictionary
    fullName: Hybrid.Dependency.ScopedDictionary
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Hybrid.Domain.Uow.IUnitOfWork
    name: IUnitOfWork
    nameWithType: IUnitOfWork
    fullName: Hybrid.Domain.Uow.IUnitOfWork
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Dependency.ScopedDictionaryExtensions.GetEntityUnitOfWork(Hybrid.Dependency.ScopedDictionary,System.Type)
  commentId: M:Hybrid.Dependency.ScopedDictionaryExtensions.GetEntityUnitOfWork(Hybrid.Dependency.ScopedDictionary,System.Type)
  isExternal: true
  name: GetEntityUnitOfWork(ScopedDictionary, Type)
  nameWithType: ScopedDictionaryExtensions.GetEntityUnitOfWork(ScopedDictionary, Type)
  fullName: Hybrid.Dependency.ScopedDictionaryExtensions.GetEntityUnitOfWork(Hybrid.Dependency.ScopedDictionary, System.Type)
  spec.csharp:
  - uid: Hybrid.Dependency.ScopedDictionaryExtensions.GetEntityUnitOfWork(Hybrid.Dependency.ScopedDictionary,System.Type)
    name: GetEntityUnitOfWork
    nameWithType: ScopedDictionaryExtensions.GetEntityUnitOfWork
    fullName: Hybrid.Dependency.ScopedDictionaryExtensions.GetEntityUnitOfWork
  - name: (
    nameWithType: (
    fullName: (
  - uid: Hybrid.Dependency.ScopedDictionary
    name: ScopedDictionary
    nameWithType: ScopedDictionary
    fullName: Hybrid.Dependency.ScopedDictionary
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Dependency.ScopedDictionaryExtensions.GetEntityUnitOfWork(Hybrid.Dependency.ScopedDictionary,System.Type)
    name: GetEntityUnitOfWork
    nameWithType: ScopedDictionaryExtensions.GetEntityUnitOfWork
    fullName: Hybrid.Dependency.ScopedDictionaryExtensions.GetEntityUnitOfWork
  - name: (
    nameWithType: (
    fullName: (
  - uid: Hybrid.Dependency.ScopedDictionary
    name: ScopedDictionary
    nameWithType: ScopedDictionary
    fullName: Hybrid.Dependency.ScopedDictionary
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Dependency.ScopedDictionaryExtensions.GetEntityUnitOfWorks(Hybrid.Dependency.ScopedDictionary)
  commentId: M:Hybrid.Dependency.ScopedDictionaryExtensions.GetEntityUnitOfWorks(Hybrid.Dependency.ScopedDictionary)
  name: GetEntityUnitOfWorks(ScopedDictionary)
  nameWithType: ScopedDictionaryExtensions.GetEntityUnitOfWorks(ScopedDictionary)
  fullName: Hybrid.Dependency.ScopedDictionaryExtensions.GetEntityUnitOfWorks(Hybrid.Dependency.ScopedDictionary)
  spec.csharp:
  - uid: Hybrid.Dependency.ScopedDictionaryExtensions.GetEntityUnitOfWorks(Hybrid.Dependency.ScopedDictionary)
    name: GetEntityUnitOfWorks
    nameWithType: ScopedDictionaryExtensions.GetEntityUnitOfWorks
    fullName: Hybrid.Dependency.ScopedDictionaryExtensions.GetEntityUnitOfWorks
  - name: (
    nameWithType: (
    fullName: (
  - uid: Hybrid.Dependency.ScopedDictionary
    name: ScopedDictionary
    nameWithType: ScopedDictionary
    fullName: Hybrid.Dependency.ScopedDictionary
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Dependency.ScopedDictionaryExtensions.GetEntityUnitOfWorks(Hybrid.Dependency.ScopedDictionary)
    name: GetEntityUnitOfWorks
    nameWithType: ScopedDictionaryExtensions.GetEntityUnitOfWorks
    fullName: Hybrid.Dependency.ScopedDictionaryExtensions.GetEntityUnitOfWorks
  - name: (
    nameWithType: (
    fullName: (
  - uid: Hybrid.Dependency.ScopedDictionary
    name: ScopedDictionary
    nameWithType: ScopedDictionary
    fullName: Hybrid.Dependency.ScopedDictionary
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Dependency.ScopedDictionaryExtensions.SetEntityUnitOfWork(Hybrid.Dependency.ScopedDictionary,System.Type,Hybrid.Domain.Uow.IUnitOfWork)
  commentId: M:Hybrid.Dependency.ScopedDictionaryExtensions.SetEntityUnitOfWork(Hybrid.Dependency.ScopedDictionary,System.Type,Hybrid.Domain.Uow.IUnitOfWork)
  isExternal: true
  name: SetEntityUnitOfWork(ScopedDictionary, Type, IUnitOfWork)
  nameWithType: ScopedDictionaryExtensions.SetEntityUnitOfWork(ScopedDictionary, Type, IUnitOfWork)
  fullName: Hybrid.Dependency.ScopedDictionaryExtensions.SetEntityUnitOfWork(Hybrid.Dependency.ScopedDictionary, System.Type, Hybrid.Domain.Uow.IUnitOfWork)
  spec.csharp:
  - uid: Hybrid.Dependency.ScopedDictionaryExtensions.SetEntityUnitOfWork(Hybrid.Dependency.ScopedDictionary,System.Type,Hybrid.Domain.Uow.IUnitOfWork)
    name: SetEntityUnitOfWork
    nameWithType: ScopedDictionaryExtensions.SetEntityUnitOfWork
    fullName: Hybrid.Dependency.ScopedDictionaryExtensions.SetEntityUnitOfWork
  - name: (
    nameWithType: (
    fullName: (
  - uid: Hybrid.Dependency.ScopedDictionary
    name: ScopedDictionary
    nameWithType: ScopedDictionary
    fullName: Hybrid.Dependency.ScopedDictionary
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Hybrid.Domain.Uow.IUnitOfWork
    name: IUnitOfWork
    nameWithType: IUnitOfWork
    fullName: Hybrid.Domain.Uow.IUnitOfWork
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Dependency.ScopedDictionaryExtensions.SetEntityUnitOfWork(Hybrid.Dependency.ScopedDictionary,System.Type,Hybrid.Domain.Uow.IUnitOfWork)
    name: SetEntityUnitOfWork
    nameWithType: ScopedDictionaryExtensions.SetEntityUnitOfWork
    fullName: Hybrid.Dependency.ScopedDictionaryExtensions.SetEntityUnitOfWork
  - name: (
    nameWithType: (
    fullName: (
  - uid: Hybrid.Dependency.ScopedDictionary
    name: ScopedDictionary
    nameWithType: ScopedDictionary
    fullName: Hybrid.Dependency.ScopedDictionary
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Hybrid.Domain.Uow.IUnitOfWork
    name: IUnitOfWork
    nameWithType: IUnitOfWork
    fullName: Hybrid.Domain.Uow.IUnitOfWork
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Dependency.ServiceCollectionExtensions.GetValue``1(Hybrid.Dependency.ScopedDictionary,System.String)
  commentId: M:Hybrid.Dependency.ServiceCollectionExtensions.GetValue``1(Hybrid.Dependency.ScopedDictionary,System.String)
  isExternal: true
  name: GetValue<T>(ScopedDictionary, String)
  nameWithType: ServiceCollectionExtensions.GetValue<T>(ScopedDictionary, String)
  fullName: Hybrid.Dependency.ServiceCollectionExtensions.GetValue<T>(Hybrid.Dependency.ScopedDictionary, System.String)
  nameWithType.vb: ServiceCollectionExtensions.GetValue(Of T)(ScopedDictionary, String)
  fullName.vb: Hybrid.Dependency.ServiceCollectionExtensions.GetValue(Of T)(Hybrid.Dependency.ScopedDictionary, System.String)
  name.vb: GetValue(Of T)(ScopedDictionary, String)
  spec.csharp:
  - uid: Hybrid.Dependency.ServiceCollectionExtensions.GetValue``1(Hybrid.Dependency.ScopedDictionary,System.String)
    name: GetValue<T>
    nameWithType: ServiceCollectionExtensions.GetValue<T>
    fullName: Hybrid.Dependency.ServiceCollectionExtensions.GetValue<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Hybrid.Dependency.ScopedDictionary
    name: ScopedDictionary
    nameWithType: ScopedDictionary
    fullName: Hybrid.Dependency.ScopedDictionary
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Dependency.ServiceCollectionExtensions.GetValue``1(Hybrid.Dependency.ScopedDictionary,System.String)
    name: GetValue(Of T)
    nameWithType: ServiceCollectionExtensions.GetValue(Of T)
    fullName: Hybrid.Dependency.ServiceCollectionExtensions.GetValue(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Hybrid.Dependency.ScopedDictionary
    name: ScopedDictionary
    nameWithType: ScopedDictionary
    fullName: Hybrid.Dependency.ScopedDictionary
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Dependency.ServiceCollectionExtensions
  commentId: T:Hybrid.Dependency.ServiceCollectionExtensions
  parent: Hybrid.Dependency
  name: ServiceCollectionExtensions
  nameWithType: ServiceCollectionExtensions
  fullName: Hybrid.Dependency.ServiceCollectionExtensions
- uid: Hybrid.Extensions.CollectionExtensions.AddIf``1(System.Collections.Generic.ICollection{``0},``0,System.Boolean)
  commentId: M:Hybrid.Extensions.CollectionExtensions.AddIf``1(System.Collections.Generic.ICollection{``0},``0,System.Boolean)
  isExternal: true
  name: AddIf<T>(ICollection<T>, T, Boolean)
  nameWithType: CollectionExtensions.AddIf<T>(ICollection<T>, T, Boolean)
  fullName: Hybrid.Extensions.CollectionExtensions.AddIf<T>(System.Collections.Generic.ICollection<T>, T, System.Boolean)
  nameWithType.vb: CollectionExtensions.AddIf(Of T)(ICollection(Of T), T, Boolean)
  fullName.vb: Hybrid.Extensions.CollectionExtensions.AddIf(Of T)(System.Collections.Generic.ICollection(Of T), T, System.Boolean)
  name.vb: AddIf(Of T)(ICollection(Of T), T, Boolean)
  spec.csharp:
  - uid: Hybrid.Extensions.CollectionExtensions.AddIf``1(System.Collections.Generic.ICollection{``0},``0,System.Boolean)
    name: AddIf<T>
    nameWithType: CollectionExtensions.AddIf<T>
    fullName: Hybrid.Extensions.CollectionExtensions.AddIf<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.CollectionExtensions.AddIf``1(System.Collections.Generic.ICollection{``0},``0,System.Boolean)
    name: AddIf(Of T)
    nameWithType: CollectionExtensions.AddIf(Of T)
    fullName: Hybrid.Extensions.CollectionExtensions.AddIf(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.CollectionExtensions
  commentId: T:Hybrid.Extensions.CollectionExtensions
  parent: Hybrid.Extensions
  name: CollectionExtensions
  nameWithType: CollectionExtensions
  fullName: Hybrid.Extensions.CollectionExtensions
- uid: Hybrid.Extensions.CollectionExtensions.AddIf``1(System.Collections.Generic.ICollection{``0},``0,System.Func{System.Boolean})
  commentId: M:Hybrid.Extensions.CollectionExtensions.AddIf``1(System.Collections.Generic.ICollection{``0},``0,System.Func{System.Boolean})
  isExternal: true
  name: AddIf<T>(ICollection<T>, T, Func<Boolean>)
  nameWithType: CollectionExtensions.AddIf<T>(ICollection<T>, T, Func<Boolean>)
  fullName: Hybrid.Extensions.CollectionExtensions.AddIf<T>(System.Collections.Generic.ICollection<T>, T, System.Func<System.Boolean>)
  nameWithType.vb: CollectionExtensions.AddIf(Of T)(ICollection(Of T), T, Func(Of Boolean))
  fullName.vb: Hybrid.Extensions.CollectionExtensions.AddIf(Of T)(System.Collections.Generic.ICollection(Of T), T, System.Func(Of System.Boolean))
  name.vb: AddIf(Of T)(ICollection(Of T), T, Func(Of Boolean))
  spec.csharp:
  - uid: Hybrid.Extensions.CollectionExtensions.AddIf``1(System.Collections.Generic.ICollection{``0},``0,System.Func{System.Boolean})
    name: AddIf<T>
    nameWithType: CollectionExtensions.AddIf<T>
    fullName: Hybrid.Extensions.CollectionExtensions.AddIf<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.CollectionExtensions.AddIf``1(System.Collections.Generic.ICollection{``0},``0,System.Func{System.Boolean})
    name: AddIf(Of T)
    nameWithType: CollectionExtensions.AddIf(Of T)
    fullName: Hybrid.Extensions.CollectionExtensions.AddIf(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.CollectionExtensions.AddIfNotExist``1(System.Collections.Generic.ICollection{``0},``0,System.Func{``0,System.Boolean})
  commentId: M:Hybrid.Extensions.CollectionExtensions.AddIfNotExist``1(System.Collections.Generic.ICollection{``0},``0,System.Func{``0,System.Boolean})
  isExternal: true
  name: AddIfNotExist<T>(ICollection<T>, T, Func<T, Boolean>)
  nameWithType: CollectionExtensions.AddIfNotExist<T>(ICollection<T>, T, Func<T, Boolean>)
  fullName: Hybrid.Extensions.CollectionExtensions.AddIfNotExist<T>(System.Collections.Generic.ICollection<T>, T, System.Func<T, System.Boolean>)
  nameWithType.vb: CollectionExtensions.AddIfNotExist(Of T)(ICollection(Of T), T, Func(Of T, Boolean))
  fullName.vb: Hybrid.Extensions.CollectionExtensions.AddIfNotExist(Of T)(System.Collections.Generic.ICollection(Of T), T, System.Func(Of T, System.Boolean))
  name.vb: AddIfNotExist(Of T)(ICollection(Of T), T, Func(Of T, Boolean))
  spec.csharp:
  - uid: Hybrid.Extensions.CollectionExtensions.AddIfNotExist``1(System.Collections.Generic.ICollection{``0},``0,System.Func{``0,System.Boolean})
    name: AddIfNotExist<T>
    nameWithType: CollectionExtensions.AddIfNotExist<T>
    fullName: Hybrid.Extensions.CollectionExtensions.AddIfNotExist<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.CollectionExtensions.AddIfNotExist``1(System.Collections.Generic.ICollection{``0},``0,System.Func{``0,System.Boolean})
    name: AddIfNotExist(Of T)
    nameWithType: CollectionExtensions.AddIfNotExist(Of T)
    fullName: Hybrid.Extensions.CollectionExtensions.AddIfNotExist(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.CollectionExtensions.GetOrAdd``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Boolean},System.Func{``0})
  commentId: M:Hybrid.Extensions.CollectionExtensions.GetOrAdd``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Boolean},System.Func{``0})
  isExternal: true
  name: GetOrAdd<T>(ICollection<T>, Func<T, Boolean>, Func<T>)
  nameWithType: CollectionExtensions.GetOrAdd<T>(ICollection<T>, Func<T, Boolean>, Func<T>)
  fullName: Hybrid.Extensions.CollectionExtensions.GetOrAdd<T>(System.Collections.Generic.ICollection<T>, System.Func<T, System.Boolean>, System.Func<T>)
  nameWithType.vb: CollectionExtensions.GetOrAdd(Of T)(ICollection(Of T), Func(Of T, Boolean), Func(Of T))
  fullName.vb: Hybrid.Extensions.CollectionExtensions.GetOrAdd(Of T)(System.Collections.Generic.ICollection(Of T), System.Func(Of T, System.Boolean), System.Func(Of T))
  name.vb: GetOrAdd(Of T)(ICollection(Of T), Func(Of T, Boolean), Func(Of T))
  spec.csharp:
  - uid: Hybrid.Extensions.CollectionExtensions.GetOrAdd``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Boolean},System.Func{``0})
    name: GetOrAdd<T>
    nameWithType: CollectionExtensions.GetOrAdd<T>
    fullName: Hybrid.Extensions.CollectionExtensions.GetOrAdd<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.CollectionExtensions.GetOrAdd``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Boolean},System.Func{``0})
    name: GetOrAdd(Of T)
    nameWithType: CollectionExtensions.GetOrAdd(Of T)
    fullName: Hybrid.Extensions.CollectionExtensions.GetOrAdd(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.CollectionExtensions.IsNullOrEmpty``1(System.Collections.Generic.ICollection{``0})
  commentId: M:Hybrid.Extensions.CollectionExtensions.IsNullOrEmpty``1(System.Collections.Generic.ICollection{``0})
  isExternal: true
  name: IsNullOrEmpty<T>(ICollection<T>)
  nameWithType: CollectionExtensions.IsNullOrEmpty<T>(ICollection<T>)
  fullName: Hybrid.Extensions.CollectionExtensions.IsNullOrEmpty<T>(System.Collections.Generic.ICollection<T>)
  nameWithType.vb: CollectionExtensions.IsNullOrEmpty(Of T)(ICollection(Of T))
  fullName.vb: Hybrid.Extensions.CollectionExtensions.IsNullOrEmpty(Of T)(System.Collections.Generic.ICollection(Of T))
  name.vb: IsNullOrEmpty(Of T)(ICollection(Of T))
  spec.csharp:
  - uid: Hybrid.Extensions.CollectionExtensions.IsNullOrEmpty``1(System.Collections.Generic.ICollection{``0})
    name: IsNullOrEmpty<T>
    nameWithType: CollectionExtensions.IsNullOrEmpty<T>
    fullName: Hybrid.Extensions.CollectionExtensions.IsNullOrEmpty<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.CollectionExtensions.IsNullOrEmpty``1(System.Collections.Generic.ICollection{``0})
    name: IsNullOrEmpty(Of T)
    nameWithType: CollectionExtensions.IsNullOrEmpty(Of T)
    fullName: Hybrid.Extensions.CollectionExtensions.IsNullOrEmpty(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.CollectionExtensions.AddIfNotContains``1(System.Collections.Generic.ICollection{``0},``0)
  commentId: M:Hybrid.Extensions.CollectionExtensions.AddIfNotContains``1(System.Collections.Generic.ICollection{``0},``0)
  isExternal: true
  name: AddIfNotContains<T>(ICollection<T>, T)
  nameWithType: CollectionExtensions.AddIfNotContains<T>(ICollection<T>, T)
  fullName: Hybrid.Extensions.CollectionExtensions.AddIfNotContains<T>(System.Collections.Generic.ICollection<T>, T)
  nameWithType.vb: CollectionExtensions.AddIfNotContains(Of T)(ICollection(Of T), T)
  fullName.vb: Hybrid.Extensions.CollectionExtensions.AddIfNotContains(Of T)(System.Collections.Generic.ICollection(Of T), T)
  name.vb: AddIfNotContains(Of T)(ICollection(Of T), T)
  spec.csharp:
  - uid: Hybrid.Extensions.CollectionExtensions.AddIfNotContains``1(System.Collections.Generic.ICollection{``0},``0)
    name: AddIfNotContains<T>
    nameWithType: CollectionExtensions.AddIfNotContains<T>
    fullName: Hybrid.Extensions.CollectionExtensions.AddIfNotContains<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.CollectionExtensions.AddIfNotContains``1(System.Collections.Generic.ICollection{``0},``0)
    name: AddIfNotContains(Of T)
    nameWithType: CollectionExtensions.AddIfNotContains(Of T)
    fullName: Hybrid.Extensions.CollectionExtensions.AddIfNotContains(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.DictionaryExtensions.GetOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0)
  commentId: M:Hybrid.Extensions.DictionaryExtensions.GetOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0)
  isExternal: true
  name: GetOrDefault<TKey, TValue>(IDictionary<TKey, TValue>, TKey)
  nameWithType: DictionaryExtensions.GetOrDefault<TKey, TValue>(IDictionary<TKey, TValue>, TKey)
  fullName: Hybrid.Extensions.DictionaryExtensions.GetOrDefault<TKey, TValue>(System.Collections.Generic.IDictionary<TKey, TValue>, TKey)
  nameWithType.vb: DictionaryExtensions.GetOrDefault(Of TKey, TValue)(IDictionary(Of TKey, TValue), TKey)
  fullName.vb: Hybrid.Extensions.DictionaryExtensions.GetOrDefault(Of TKey, TValue)(System.Collections.Generic.IDictionary(Of TKey, TValue), TKey)
  name.vb: GetOrDefault(Of TKey, TValue)(IDictionary(Of TKey, TValue), TKey)
  spec.csharp:
  - uid: Hybrid.Extensions.DictionaryExtensions.GetOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0)
    name: GetOrDefault<TKey, TValue>
    nameWithType: DictionaryExtensions.GetOrDefault<TKey, TValue>
    fullName: Hybrid.Extensions.DictionaryExtensions.GetOrDefault<TKey, TValue>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.DictionaryExtensions.GetOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0)
    name: GetOrDefault(Of TKey, TValue)
    nameWithType: DictionaryExtensions.GetOrDefault(Of TKey, TValue)
    fullName: Hybrid.Extensions.DictionaryExtensions.GetOrDefault(Of TKey, TValue)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.DictionaryExtensions
  commentId: T:Hybrid.Extensions.DictionaryExtensions
  parent: Hybrid.Extensions
  name: DictionaryExtensions
  nameWithType: DictionaryExtensions
  fullName: Hybrid.Extensions.DictionaryExtensions
- uid: Hybrid.Extensions.DictionaryExtensions.GetOrAdd``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``1})
  commentId: M:Hybrid.Extensions.DictionaryExtensions.GetOrAdd``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``1})
  isExternal: true
  name: GetOrAdd<TKey, TValue>(IDictionary<TKey, TValue>, TKey, Func<TValue>)
  nameWithType: DictionaryExtensions.GetOrAdd<TKey, TValue>(IDictionary<TKey, TValue>, TKey, Func<TValue>)
  fullName: Hybrid.Extensions.DictionaryExtensions.GetOrAdd<TKey, TValue>(System.Collections.Generic.IDictionary<TKey, TValue>, TKey, System.Func<TValue>)
  nameWithType.vb: DictionaryExtensions.GetOrAdd(Of TKey, TValue)(IDictionary(Of TKey, TValue), TKey, Func(Of TValue))
  fullName.vb: Hybrid.Extensions.DictionaryExtensions.GetOrAdd(Of TKey, TValue)(System.Collections.Generic.IDictionary(Of TKey, TValue), TKey, System.Func(Of TValue))
  name.vb: GetOrAdd(Of TKey, TValue)(IDictionary(Of TKey, TValue), TKey, Func(Of TValue))
  spec.csharp:
  - uid: Hybrid.Extensions.DictionaryExtensions.GetOrAdd``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``1})
    name: GetOrAdd<TKey, TValue>
    nameWithType: DictionaryExtensions.GetOrAdd<TKey, TValue>
    fullName: Hybrid.Extensions.DictionaryExtensions.GetOrAdd<TKey, TValue>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.DictionaryExtensions.GetOrAdd``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``1})
    name: GetOrAdd(Of TKey, TValue)
    nameWithType: DictionaryExtensions.GetOrAdd(Of TKey, TValue)
    fullName: Hybrid.Extensions.DictionaryExtensions.GetOrAdd(Of TKey, TValue)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.EnumerableExtensions.JoinAsString``1(System.Collections.Generic.IEnumerable{``0},System.String)
  commentId: M:Hybrid.Extensions.EnumerableExtensions.JoinAsString``1(System.Collections.Generic.IEnumerable{``0},System.String)
  isExternal: true
  name: JoinAsString<T>(IEnumerable<T>, String)
  nameWithType: EnumerableExtensions.JoinAsString<T>(IEnumerable<T>, String)
  fullName: Hybrid.Extensions.EnumerableExtensions.JoinAsString<T>(System.Collections.Generic.IEnumerable<T>, System.String)
  nameWithType.vb: EnumerableExtensions.JoinAsString(Of T)(IEnumerable(Of T), String)
  fullName.vb: Hybrid.Extensions.EnumerableExtensions.JoinAsString(Of T)(System.Collections.Generic.IEnumerable(Of T), System.String)
  name.vb: JoinAsString(Of T)(IEnumerable(Of T), String)
  spec.csharp:
  - uid: Hybrid.Extensions.EnumerableExtensions.JoinAsString``1(System.Collections.Generic.IEnumerable{``0},System.String)
    name: JoinAsString<T>
    nameWithType: EnumerableExtensions.JoinAsString<T>
    fullName: Hybrid.Extensions.EnumerableExtensions.JoinAsString<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.EnumerableExtensions.JoinAsString``1(System.Collections.Generic.IEnumerable{``0},System.String)
    name: JoinAsString(Of T)
    nameWithType: EnumerableExtensions.JoinAsString(Of T)
    fullName: Hybrid.Extensions.EnumerableExtensions.JoinAsString(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.EnumerableExtensions
  commentId: T:Hybrid.Extensions.EnumerableExtensions
  parent: Hybrid.Extensions
  name: EnumerableExtensions
  nameWithType: EnumerableExtensions
  fullName: Hybrid.Extensions.EnumerableExtensions
- uid: Hybrid.Extensions.EnumerableExtensions.WhereIf``1(System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Func{``0,System.Boolean})
  commentId: M:Hybrid.Extensions.EnumerableExtensions.WhereIf``1(System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Func{``0,System.Boolean})
  isExternal: true
  name: WhereIf<T>(IEnumerable<T>, Boolean, Func<T, Boolean>)
  nameWithType: EnumerableExtensions.WhereIf<T>(IEnumerable<T>, Boolean, Func<T, Boolean>)
  fullName: Hybrid.Extensions.EnumerableExtensions.WhereIf<T>(System.Collections.Generic.IEnumerable<T>, System.Boolean, System.Func<T, System.Boolean>)
  nameWithType.vb: EnumerableExtensions.WhereIf(Of T)(IEnumerable(Of T), Boolean, Func(Of T, Boolean))
  fullName.vb: Hybrid.Extensions.EnumerableExtensions.WhereIf(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Boolean, System.Func(Of T, System.Boolean))
  name.vb: WhereIf(Of T)(IEnumerable(Of T), Boolean, Func(Of T, Boolean))
  spec.csharp:
  - uid: Hybrid.Extensions.EnumerableExtensions.WhereIf``1(System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Func{``0,System.Boolean})
    name: WhereIf<T>
    nameWithType: EnumerableExtensions.WhereIf<T>
    fullName: Hybrid.Extensions.EnumerableExtensions.WhereIf<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.EnumerableExtensions.WhereIf``1(System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Func{``0,System.Boolean})
    name: WhereIf(Of T)
    nameWithType: EnumerableExtensions.WhereIf(Of T)
    fullName: Hybrid.Extensions.EnumerableExtensions.WhereIf(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.EnumerableExtensions.WhereIf``1(System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Func{``0,System.Int32,System.Boolean})
  commentId: M:Hybrid.Extensions.EnumerableExtensions.WhereIf``1(System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Func{``0,System.Int32,System.Boolean})
  isExternal: true
  name: WhereIf<T>(IEnumerable<T>, Boolean, Func<T, Int32, Boolean>)
  nameWithType: EnumerableExtensions.WhereIf<T>(IEnumerable<T>, Boolean, Func<T, Int32, Boolean>)
  fullName: Hybrid.Extensions.EnumerableExtensions.WhereIf<T>(System.Collections.Generic.IEnumerable<T>, System.Boolean, System.Func<T, System.Int32, System.Boolean>)
  nameWithType.vb: EnumerableExtensions.WhereIf(Of T)(IEnumerable(Of T), Boolean, Func(Of T, Int32, Boolean))
  fullName.vb: Hybrid.Extensions.EnumerableExtensions.WhereIf(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Boolean, System.Func(Of T, System.Int32, System.Boolean))
  name.vb: WhereIf(Of T)(IEnumerable(Of T), Boolean, Func(Of T, Int32, Boolean))
  spec.csharp:
  - uid: Hybrid.Extensions.EnumerableExtensions.WhereIf``1(System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Func{``0,System.Int32,System.Boolean})
    name: WhereIf<T>
    nameWithType: EnumerableExtensions.WhereIf<T>
    fullName: Hybrid.Extensions.EnumerableExtensions.WhereIf<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.EnumerableExtensions.WhereIf``1(System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Func{``0,System.Int32,System.Boolean})
    name: WhereIf(Of T)
    nameWithType: EnumerableExtensions.WhereIf(Of T)
    fullName: Hybrid.Extensions.EnumerableExtensions.WhereIf(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.EnumerableExtensions.Shuffle``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:Hybrid.Extensions.EnumerableExtensions.Shuffle``1(System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: Shuffle<TSource>(IEnumerable<TSource>)
  nameWithType: EnumerableExtensions.Shuffle<TSource>(IEnumerable<TSource>)
  fullName: Hybrid.Extensions.EnumerableExtensions.Shuffle<TSource>(System.Collections.Generic.IEnumerable<TSource>)
  nameWithType.vb: EnumerableExtensions.Shuffle(Of TSource)(IEnumerable(Of TSource))
  fullName.vb: Hybrid.Extensions.EnumerableExtensions.Shuffle(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: Shuffle(Of TSource)(IEnumerable(Of TSource))
  spec.csharp:
  - uid: Hybrid.Extensions.EnumerableExtensions.Shuffle``1(System.Collections.Generic.IEnumerable{``0})
    name: Shuffle<TSource>
    nameWithType: EnumerableExtensions.Shuffle<TSource>
    fullName: Hybrid.Extensions.EnumerableExtensions.Shuffle<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.EnumerableExtensions.Shuffle``1(System.Collections.Generic.IEnumerable{``0})
    name: Shuffle(Of TSource)
    nameWithType: EnumerableExtensions.Shuffle(Of TSource)
    fullName: Hybrid.Extensions.EnumerableExtensions.Shuffle(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.EnumerableExtensions.ExpandAndToString``1(System.Collections.Generic.IEnumerable{``0},System.String)
  commentId: M:Hybrid.Extensions.EnumerableExtensions.ExpandAndToString``1(System.Collections.Generic.IEnumerable{``0},System.String)
  isExternal: true
  name: ExpandAndToString<T>(IEnumerable<T>, String)
  nameWithType: EnumerableExtensions.ExpandAndToString<T>(IEnumerable<T>, String)
  fullName: Hybrid.Extensions.EnumerableExtensions.ExpandAndToString<T>(System.Collections.Generic.IEnumerable<T>, System.String)
  nameWithType.vb: EnumerableExtensions.ExpandAndToString(Of T)(IEnumerable(Of T), String)
  fullName.vb: Hybrid.Extensions.EnumerableExtensions.ExpandAndToString(Of T)(System.Collections.Generic.IEnumerable(Of T), System.String)
  name.vb: ExpandAndToString(Of T)(IEnumerable(Of T), String)
  spec.csharp:
  - uid: Hybrid.Extensions.EnumerableExtensions.ExpandAndToString``1(System.Collections.Generic.IEnumerable{``0},System.String)
    name: ExpandAndToString<T>
    nameWithType: EnumerableExtensions.ExpandAndToString<T>
    fullName: Hybrid.Extensions.EnumerableExtensions.ExpandAndToString<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.EnumerableExtensions.ExpandAndToString``1(System.Collections.Generic.IEnumerable{``0},System.String)
    name: ExpandAndToString(Of T)
    nameWithType: EnumerableExtensions.ExpandAndToString(Of T)
    fullName: Hybrid.Extensions.EnumerableExtensions.ExpandAndToString(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.EnumerableExtensions.ExpandAndToString``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.String)
  commentId: M:Hybrid.Extensions.EnumerableExtensions.ExpandAndToString``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.String)
  isExternal: true
  name: ExpandAndToString<T>(IEnumerable<T>, Func<T, String>, String)
  nameWithType: EnumerableExtensions.ExpandAndToString<T>(IEnumerable<T>, Func<T, String>, String)
  fullName: Hybrid.Extensions.EnumerableExtensions.ExpandAndToString<T>(System.Collections.Generic.IEnumerable<T>, System.Func<T, System.String>, System.String)
  nameWithType.vb: EnumerableExtensions.ExpandAndToString(Of T)(IEnumerable(Of T), Func(Of T, String), String)
  fullName.vb: Hybrid.Extensions.EnumerableExtensions.ExpandAndToString(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Func(Of T, System.String), System.String)
  name.vb: ExpandAndToString(Of T)(IEnumerable(Of T), Func(Of T, String), String)
  spec.csharp:
  - uid: Hybrid.Extensions.EnumerableExtensions.ExpandAndToString``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.String)
    name: ExpandAndToString<T>
    nameWithType: EnumerableExtensions.ExpandAndToString<T>
    fullName: Hybrid.Extensions.EnumerableExtensions.ExpandAndToString<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.EnumerableExtensions.ExpandAndToString``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.String)
    name: ExpandAndToString(Of T)
    nameWithType: EnumerableExtensions.ExpandAndToString(Of T)
    fullName: Hybrid.Extensions.EnumerableExtensions.ExpandAndToString(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.EnumerableExtensions.IsEmpty``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:Hybrid.Extensions.EnumerableExtensions.IsEmpty``1(System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: IsEmpty<T>(IEnumerable<T>)
  nameWithType: EnumerableExtensions.IsEmpty<T>(IEnumerable<T>)
  fullName: Hybrid.Extensions.EnumerableExtensions.IsEmpty<T>(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: EnumerableExtensions.IsEmpty(Of T)(IEnumerable(Of T))
  fullName.vb: Hybrid.Extensions.EnumerableExtensions.IsEmpty(Of T)(System.Collections.Generic.IEnumerable(Of T))
  name.vb: IsEmpty(Of T)(IEnumerable(Of T))
  spec.csharp:
  - uid: Hybrid.Extensions.EnumerableExtensions.IsEmpty``1(System.Collections.Generic.IEnumerable{``0})
    name: IsEmpty<T>
    nameWithType: EnumerableExtensions.IsEmpty<T>
    fullName: Hybrid.Extensions.EnumerableExtensions.IsEmpty<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.EnumerableExtensions.IsEmpty``1(System.Collections.Generic.IEnumerable{``0})
    name: IsEmpty(Of T)
    nameWithType: EnumerableExtensions.IsEmpty(Of T)
    fullName: Hybrid.Extensions.EnumerableExtensions.IsEmpty(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.EnumerableExtensions.WhereIf``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Boolean)
  commentId: M:Hybrid.Extensions.EnumerableExtensions.WhereIf``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Boolean)
  isExternal: true
  name: WhereIf<T>(IEnumerable<T>, Func<T, Boolean>, Boolean)
  nameWithType: EnumerableExtensions.WhereIf<T>(IEnumerable<T>, Func<T, Boolean>, Boolean)
  fullName: Hybrid.Extensions.EnumerableExtensions.WhereIf<T>(System.Collections.Generic.IEnumerable<T>, System.Func<T, System.Boolean>, System.Boolean)
  nameWithType.vb: EnumerableExtensions.WhereIf(Of T)(IEnumerable(Of T), Func(Of T, Boolean), Boolean)
  fullName.vb: Hybrid.Extensions.EnumerableExtensions.WhereIf(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Func(Of T, System.Boolean), System.Boolean)
  name.vb: WhereIf(Of T)(IEnumerable(Of T), Func(Of T, Boolean), Boolean)
  spec.csharp:
  - uid: Hybrid.Extensions.EnumerableExtensions.WhereIf``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Boolean)
    name: WhereIf<T>
    nameWithType: EnumerableExtensions.WhereIf<T>
    fullName: Hybrid.Extensions.EnumerableExtensions.WhereIf<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.EnumerableExtensions.WhereIf``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Boolean)
    name: WhereIf(Of T)
    nameWithType: EnumerableExtensions.WhereIf(Of T)
    fullName: Hybrid.Extensions.EnumerableExtensions.WhereIf(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.EnumerableExtensions.DistinctBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  commentId: M:Hybrid.Extensions.EnumerableExtensions.DistinctBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  isExternal: true
  name: DistinctBy<T, TKey>(IEnumerable<T>, Func<T, TKey>)
  nameWithType: EnumerableExtensions.DistinctBy<T, TKey>(IEnumerable<T>, Func<T, TKey>)
  fullName: Hybrid.Extensions.EnumerableExtensions.DistinctBy<T, TKey>(System.Collections.Generic.IEnumerable<T>, System.Func<T, TKey>)
  nameWithType.vb: EnumerableExtensions.DistinctBy(Of T, TKey)(IEnumerable(Of T), Func(Of T, TKey))
  fullName.vb: Hybrid.Extensions.EnumerableExtensions.DistinctBy(Of T, TKey)(System.Collections.Generic.IEnumerable(Of T), System.Func(Of T, TKey))
  name.vb: DistinctBy(Of T, TKey)(IEnumerable(Of T), Func(Of T, TKey))
  spec.csharp:
  - uid: Hybrid.Extensions.EnumerableExtensions.DistinctBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
    name: DistinctBy<T, TKey>
    nameWithType: EnumerableExtensions.DistinctBy<T, TKey>
    fullName: Hybrid.Extensions.EnumerableExtensions.DistinctBy<T, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.EnumerableExtensions.DistinctBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
    name: DistinctBy(Of T, TKey)
    nameWithType: EnumerableExtensions.DistinctBy(Of T, TKey)
    fullName: Hybrid.Extensions.EnumerableExtensions.DistinctBy(Of T, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.EnumerableExtensions.OrderBy``1(System.Collections.Generic.IEnumerable{``0},System.String,System.ComponentModel.ListSortDirection)
  commentId: M:Hybrid.Extensions.EnumerableExtensions.OrderBy``1(System.Collections.Generic.IEnumerable{``0},System.String,System.ComponentModel.ListSortDirection)
  isExternal: true
  name: OrderBy<T>(IEnumerable<T>, String, ListSortDirection)
  nameWithType: EnumerableExtensions.OrderBy<T>(IEnumerable<T>, String, ListSortDirection)
  fullName: Hybrid.Extensions.EnumerableExtensions.OrderBy<T>(System.Collections.Generic.IEnumerable<T>, System.String, System.ComponentModel.ListSortDirection)
  nameWithType.vb: EnumerableExtensions.OrderBy(Of T)(IEnumerable(Of T), String, ListSortDirection)
  fullName.vb: Hybrid.Extensions.EnumerableExtensions.OrderBy(Of T)(System.Collections.Generic.IEnumerable(Of T), System.String, System.ComponentModel.ListSortDirection)
  name.vb: OrderBy(Of T)(IEnumerable(Of T), String, ListSortDirection)
  spec.csharp:
  - uid: Hybrid.Extensions.EnumerableExtensions.OrderBy``1(System.Collections.Generic.IEnumerable{``0},System.String,System.ComponentModel.ListSortDirection)
    name: OrderBy<T>
    nameWithType: EnumerableExtensions.OrderBy<T>
    fullName: Hybrid.Extensions.EnumerableExtensions.OrderBy<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.ComponentModel.ListSortDirection
    name: ListSortDirection
    nameWithType: ListSortDirection
    fullName: System.ComponentModel.ListSortDirection
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.EnumerableExtensions.OrderBy``1(System.Collections.Generic.IEnumerable{``0},System.String,System.ComponentModel.ListSortDirection)
    name: OrderBy(Of T)
    nameWithType: EnumerableExtensions.OrderBy(Of T)
    fullName: Hybrid.Extensions.EnumerableExtensions.OrderBy(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.ComponentModel.ListSortDirection
    name: ListSortDirection
    nameWithType: ListSortDirection
    fullName: System.ComponentModel.ListSortDirection
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.EnumerableExtensions.OrderBy``1(System.Collections.Generic.IEnumerable{``0},Hybrid.Filter.SortCondition)
  commentId: M:Hybrid.Extensions.EnumerableExtensions.OrderBy``1(System.Collections.Generic.IEnumerable{``0},Hybrid.Filter.SortCondition)
  isExternal: true
  name: OrderBy<T>(IEnumerable<T>, SortCondition)
  nameWithType: EnumerableExtensions.OrderBy<T>(IEnumerable<T>, SortCondition)
  fullName: Hybrid.Extensions.EnumerableExtensions.OrderBy<T>(System.Collections.Generic.IEnumerable<T>, Hybrid.Filter.SortCondition)
  nameWithType.vb: EnumerableExtensions.OrderBy(Of T)(IEnumerable(Of T), SortCondition)
  fullName.vb: Hybrid.Extensions.EnumerableExtensions.OrderBy(Of T)(System.Collections.Generic.IEnumerable(Of T), Hybrid.Filter.SortCondition)
  name.vb: OrderBy(Of T)(IEnumerable(Of T), SortCondition)
  spec.csharp:
  - uid: Hybrid.Extensions.EnumerableExtensions.OrderBy``1(System.Collections.Generic.IEnumerable{``0},Hybrid.Filter.SortCondition)
    name: OrderBy<T>
    nameWithType: EnumerableExtensions.OrderBy<T>
    fullName: Hybrid.Extensions.EnumerableExtensions.OrderBy<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Hybrid.Filter.SortCondition
    name: SortCondition
    nameWithType: SortCondition
    fullName: Hybrid.Filter.SortCondition
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.EnumerableExtensions.OrderBy``1(System.Collections.Generic.IEnumerable{``0},Hybrid.Filter.SortCondition)
    name: OrderBy(Of T)
    nameWithType: EnumerableExtensions.OrderBy(Of T)
    fullName: Hybrid.Extensions.EnumerableExtensions.OrderBy(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Hybrid.Filter.SortCondition
    name: SortCondition
    nameWithType: SortCondition
    fullName: Hybrid.Filter.SortCondition
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.EnumerableExtensions.OrderBy``1(System.Collections.Generic.IEnumerable{``0},Hybrid.Filter.SortCondition{``0})
  commentId: M:Hybrid.Extensions.EnumerableExtensions.OrderBy``1(System.Collections.Generic.IEnumerable{``0},Hybrid.Filter.SortCondition{``0})
  isExternal: true
  name: OrderBy<T>(IEnumerable<T>, SortCondition<T>)
  nameWithType: EnumerableExtensions.OrderBy<T>(IEnumerable<T>, SortCondition<T>)
  fullName: Hybrid.Extensions.EnumerableExtensions.OrderBy<T>(System.Collections.Generic.IEnumerable<T>, Hybrid.Filter.SortCondition<T>)
  nameWithType.vb: EnumerableExtensions.OrderBy(Of T)(IEnumerable(Of T), SortCondition(Of T))
  fullName.vb: Hybrid.Extensions.EnumerableExtensions.OrderBy(Of T)(System.Collections.Generic.IEnumerable(Of T), Hybrid.Filter.SortCondition(Of T))
  name.vb: OrderBy(Of T)(IEnumerable(Of T), SortCondition(Of T))
  spec.csharp:
  - uid: Hybrid.Extensions.EnumerableExtensions.OrderBy``1(System.Collections.Generic.IEnumerable{``0},Hybrid.Filter.SortCondition{``0})
    name: OrderBy<T>
    nameWithType: EnumerableExtensions.OrderBy<T>
    fullName: Hybrid.Extensions.EnumerableExtensions.OrderBy<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Hybrid.Filter.SortCondition`1
    name: SortCondition
    nameWithType: SortCondition
    fullName: Hybrid.Filter.SortCondition
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.EnumerableExtensions.OrderBy``1(System.Collections.Generic.IEnumerable{``0},Hybrid.Filter.SortCondition{``0})
    name: OrderBy(Of T)
    nameWithType: EnumerableExtensions.OrderBy(Of T)
    fullName: Hybrid.Extensions.EnumerableExtensions.OrderBy(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Hybrid.Filter.SortCondition`1
    name: SortCondition
    nameWithType: SortCondition
    fullName: Hybrid.Filter.SortCondition
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.EnumerableExtensions.OrderByPrefixes``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.String[])
  commentId: M:Hybrid.Extensions.EnumerableExtensions.OrderByPrefixes``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.String[])
  isExternal: true
  name: OrderByPrefixes<T>(IEnumerable<T>, Func<T, String>, String[])
  nameWithType: EnumerableExtensions.OrderByPrefixes<T>(IEnumerable<T>, Func<T, String>, String[])
  fullName: Hybrid.Extensions.EnumerableExtensions.OrderByPrefixes<T>(System.Collections.Generic.IEnumerable<T>, System.Func<T, System.String>, System.String[])
  nameWithType.vb: EnumerableExtensions.OrderByPrefixes(Of T)(IEnumerable(Of T), Func(Of T, String), String())
  fullName.vb: Hybrid.Extensions.EnumerableExtensions.OrderByPrefixes(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Func(Of T, System.String), System.String())
  name.vb: OrderByPrefixes(Of T)(IEnumerable(Of T), Func(Of T, String), String())
  spec.csharp:
  - uid: Hybrid.Extensions.EnumerableExtensions.OrderByPrefixes``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.String[])
    name: OrderByPrefixes<T>
    nameWithType: EnumerableExtensions.OrderByPrefixes<T>
    fullName: Hybrid.Extensions.EnumerableExtensions.OrderByPrefixes<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.EnumerableExtensions.OrderByPrefixes``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.String[])
    name: OrderByPrefixes(Of T)
    nameWithType: EnumerableExtensions.OrderByPrefixes(Of T)
    fullName: Hybrid.Extensions.EnumerableExtensions.OrderByPrefixes(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
  commentId: M:Hybrid.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
  isExternal: true
  name: CastTo(Object, Type)
  nameWithType: ObjectExtensions.CastTo(Object, Type)
  fullName: Hybrid.Extensions.ObjectExtensions.CastTo(System.Object, System.Type)
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
    name: CastTo
    nameWithType: ObjectExtensions.CastTo
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
    name: CastTo
    nameWithType: ObjectExtensions.CastTo
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ObjectExtensions
  commentId: T:Hybrid.Extensions.ObjectExtensions
  parent: Hybrid.Extensions
  name: ObjectExtensions
  nameWithType: ObjectExtensions
  fullName: Hybrid.Extensions.ObjectExtensions
- uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object)
  commentId: M:Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object)
  isExternal: true
  name: CastTo<T>(Object)
  nameWithType: ObjectExtensions.CastTo<T>(Object)
  fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>(System.Object)
  nameWithType.vb: ObjectExtensions.CastTo(Of T)(Object)
  fullName.vb: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)(System.Object)
  name.vb: CastTo(Of T)(Object)
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object)
    name: CastTo<T>
    nameWithType: ObjectExtensions.CastTo<T>
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object)
    name: CastTo(Of T)
    nameWithType: ObjectExtensions.CastTo(Of T)
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
  commentId: M:Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
  isExternal: true
  name: CastTo<T>(Object, T)
  nameWithType: ObjectExtensions.CastTo<T>(Object, T)
  fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>(System.Object, T)
  nameWithType.vb: ObjectExtensions.CastTo(Of T)(Object, T)
  fullName.vb: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)(System.Object, T)
  name.vb: CastTo(Of T)(Object, T)
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
    name: CastTo<T>
    nameWithType: ObjectExtensions.CastTo<T>
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
    name: CastTo(Of T)
    nameWithType: ObjectExtensions.CastTo(Of T)
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
  commentId: M:Hybrid.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
  name: IsIn<T>(T, T[])
  nameWithType: ObjectExtensions.IsIn<T>(T, T[])
  fullName: Hybrid.Extensions.ObjectExtensions.IsIn<T>(T, T[])
  nameWithType.vb: ObjectExtensions.IsIn(Of T)(T, T())
  fullName.vb: Hybrid.Extensions.ObjectExtensions.IsIn(Of T)(T, T())
  name.vb: IsIn(Of T)(T, T())
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
    name: IsIn<T>
    nameWithType: ObjectExtensions.IsIn<T>
    fullName: Hybrid.Extensions.ObjectExtensions.IsIn<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
    name: IsIn(Of T)
    nameWithType: ObjectExtensions.IsIn(Of T)
    fullName: Hybrid.Extensions.ObjectExtensions.IsIn(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ObjectExtensions.ToDynamic(System.Object)
  commentId: M:Hybrid.Extensions.ObjectExtensions.ToDynamic(System.Object)
  isExternal: true
  name: ToDynamic(Object)
  nameWithType: ObjectExtensions.ToDynamic(Object)
  fullName: Hybrid.Extensions.ObjectExtensions.ToDynamic(System.Object)
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.ToDynamic(System.Object)
    name: ToDynamic
    nameWithType: ObjectExtensions.ToDynamic
    fullName: Hybrid.Extensions.ObjectExtensions.ToDynamic
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.ToDynamic(System.Object)
    name: ToDynamic
    nameWithType: ObjectExtensions.ToDynamic
    fullName: Hybrid.Extensions.ObjectExtensions.ToDynamic
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ObjectExtensions.DeepClone``1(``0)
  commentId: M:Hybrid.Extensions.ObjectExtensions.DeepClone``1(``0)
  name: DeepClone<T>(T)
  nameWithType: ObjectExtensions.DeepClone<T>(T)
  fullName: Hybrid.Extensions.ObjectExtensions.DeepClone<T>(T)
  nameWithType.vb: ObjectExtensions.DeepClone(Of T)(T)
  fullName.vb: Hybrid.Extensions.ObjectExtensions.DeepClone(Of T)(T)
  name.vb: DeepClone(Of T)(T)
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.DeepClone``1(``0)
    name: DeepClone<T>
    nameWithType: ObjectExtensions.DeepClone<T>
    fullName: Hybrid.Extensions.ObjectExtensions.DeepClone<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.DeepClone``1(``0)
    name: DeepClone(Of T)
    nameWithType: ObjectExtensions.DeepClone(Of T)
    fullName: Hybrid.Extensions.ObjectExtensions.DeepClone(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
  commentId: M:Hybrid.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
  isExternal: true
  name: Required<T>(T, Func<T, Boolean>, String)
  nameWithType: ParameterCheckExtensions.Required<T>(T, Func<T, Boolean>, String)
  fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<T>(T, System.Func<T, System.Boolean>, System.String)
  nameWithType.vb: ParameterCheckExtensions.Required(Of T)(T, Func(Of T, Boolean), String)
  fullName.vb: Hybrid.Extensions.ParameterCheckExtensions.Required(Of T)(T, System.Func(Of T, System.Boolean), System.String)
  name.vb: Required(Of T)(T, Func(Of T, Boolean), String)
  spec.csharp:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
    name: Required<T>
    nameWithType: ParameterCheckExtensions.Required<T>
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
    name: Required(Of T)
    nameWithType: ParameterCheckExtensions.Required(Of T)
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ParameterCheckExtensions
  commentId: T:Hybrid.Extensions.ParameterCheckExtensions
  parent: Hybrid.Extensions
  name: ParameterCheckExtensions
  nameWithType: ParameterCheckExtensions
  fullName: Hybrid.Extensions.ParameterCheckExtensions
- uid: Hybrid.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
  commentId: M:Hybrid.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
  isExternal: true
  name: Required<T, TException>(T, Func<T, Boolean>, String)
  nameWithType: ParameterCheckExtensions.Required<T, TException>(T, Func<T, Boolean>, String)
  fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<T, TException>(T, System.Func<T, System.Boolean>, System.String)
  nameWithType.vb: ParameterCheckExtensions.Required(Of T, TException)(T, Func(Of T, Boolean), String)
  fullName.vb: Hybrid.Extensions.ParameterCheckExtensions.Required(Of T, TException)(T, System.Func(Of T, System.Boolean), System.String)
  name.vb: Required(Of T, TException)(T, Func(Of T, Boolean), String)
  spec.csharp:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
    name: Required<T, TException>
    nameWithType: ParameterCheckExtensions.Required<T, TException>
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<T, TException>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
    name: Required(Of T, TException)
    nameWithType: ParameterCheckExtensions.Required(Of T, TException)
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required(Of T, TException)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
  commentId: M:Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
  isExternal: true
  name: CheckNotNull<T>(T, String)
  nameWithType: ParameterCheckExtensions.CheckNotNull<T>(T, String)
  fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull<T>(T, System.String)
  nameWithType.vb: ParameterCheckExtensions.CheckNotNull(Of T)(T, String)
  fullName.vb: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull(Of T)(T, System.String)
  name.vb: CheckNotNull(Of T)(T, String)
  spec.csharp:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
    name: CheckNotNull<T>
    nameWithType: ParameterCheckExtensions.CheckNotNull<T>
    fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
    name: CheckNotNull(Of T)
    nameWithType: ParameterCheckExtensions.CheckNotNull(Of T)
    fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0},System.String)
  commentId: M:Hybrid.Extensions.ParameterCheckExtensions.CheckNotNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0},System.String)
  isExternal: true
  name: CheckNotNullOrEmpty<T>(IEnumerable<T>, String)
  nameWithType: ParameterCheckExtensions.CheckNotNullOrEmpty<T>(IEnumerable<T>, String)
  fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNullOrEmpty<T>(System.Collections.Generic.IEnumerable<T>, System.String)
  nameWithType.vb: ParameterCheckExtensions.CheckNotNullOrEmpty(Of T)(IEnumerable(Of T), String)
  fullName.vb: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNullOrEmpty(Of T)(System.Collections.Generic.IEnumerable(Of T), System.String)
  name.vb: CheckNotNullOrEmpty(Of T)(IEnumerable(Of T), String)
  spec.csharp:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0},System.String)
    name: CheckNotNullOrEmpty<T>
    nameWithType: ParameterCheckExtensions.CheckNotNullOrEmpty<T>
    fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNullOrEmpty<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0},System.String)
    name: CheckNotNullOrEmpty(Of T)
    nameWithType: ParameterCheckExtensions.CheckNotNullOrEmpty(Of T)
    fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNullOrEmpty(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
  isExternal: true
  name: TryCatch<T>(T, Action<T>, Action<Exception>, Action<T>)
  nameWithType: TryCatchExtensions.TryCatch<T>(T, Action<T>, Action<Exception>, Action<T>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T>(T, System.Action<T>, System.Action<System.Exception>, System.Action<T>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of T)(T, Action(Of T), Action(Of Exception), Action(Of T))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T)(T, System.Action(Of T), System.Action(Of System.Exception), System.Action(Of T))
  name.vb: TryCatch(Of T)(T, Action(Of T), Action(Of Exception), Action(Of T))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
    name: TryCatch<T>
    nameWithType: TryCatchExtensions.TryCatch<T>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
    name: TryCatch(Of T)
    nameWithType: TryCatchExtensions.TryCatch(Of T)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.TryCatchExtensions
  commentId: T:Hybrid.Extensions.TryCatchExtensions
  parent: Hybrid.Extensions
  name: TryCatchExtensions
  nameWithType: TryCatchExtensions
  fullName: Hybrid.Extensions.TryCatchExtensions
- uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
  isExternal: true
  name: TryCatch<T>(T, Action<T>, Action<Exception>)
  nameWithType: TryCatchExtensions.TryCatch<T>(T, Action<T>, Action<Exception>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T>(T, System.Action<T>, System.Action<System.Exception>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of T)(T, Action(Of T), Action(Of Exception))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T)(T, System.Action(Of T), System.Action(Of System.Exception))
  name.vb: TryCatch(Of T)(T, Action(Of T), Action(Of Exception))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
    name: TryCatch<T>
    nameWithType: TryCatchExtensions.TryCatch<T>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
    name: TryCatch(Of T)
    nameWithType: TryCatchExtensions.TryCatch(Of T)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
  isExternal: true
  name: TryCatch<T, TResult>(T, Func<T, TResult>, Action<Exception>, Action<T>)
  nameWithType: TryCatchExtensions.TryCatch<T, TResult>(T, Func<T, TResult>, Action<Exception>, Action<T>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T, TResult>(T, System.Func<T, TResult>, System.Action<System.Exception>, System.Action<T>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of T, TResult)(T, Func(Of T, TResult), Action(Of Exception), Action(Of T))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T, TResult)(T, System.Func(Of T, TResult), System.Action(Of System.Exception), System.Action(Of T))
  name.vb: TryCatch(Of T, TResult)(T, Func(Of T, TResult), Action(Of Exception), Action(Of T))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
    name: TryCatch<T, TResult>
    nameWithType: TryCatchExtensions.TryCatch<T, TResult>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
    name: TryCatch(Of T, TResult)
    nameWithType: TryCatchExtensions.TryCatch(Of T, TResult)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
  isExternal: true
  name: TryCatch<T, TResult>(T, Func<T, TResult>, Action<Exception>)
  nameWithType: TryCatchExtensions.TryCatch<T, TResult>(T, Func<T, TResult>, Action<Exception>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T, TResult>(T, System.Func<T, TResult>, System.Action<System.Exception>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of T, TResult)(T, Func(Of T, TResult), Action(Of Exception))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T, TResult)(T, System.Func(Of T, TResult), System.Action(Of System.Exception))
  name.vb: TryCatch(Of T, TResult)(T, Func(Of T, TResult), Action(Of Exception))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
    name: TryCatch<T, TResult>
    nameWithType: TryCatchExtensions.TryCatch<T, TResult>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
    name: TryCatch(Of T, TResult)
    nameWithType: TryCatchExtensions.TryCatch(Of T, TResult)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
  isExternal: true
  name: TryFinally<T>(T, Action<T>, Action<T>)
  nameWithType: TryCatchExtensions.TryFinally<T>(T, Action<T>, Action<T>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryFinally<T>(T, System.Action<T>, System.Action<T>)
  nameWithType.vb: TryCatchExtensions.TryFinally(Of T)(T, Action(Of T), Action(Of T))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryFinally(Of T)(T, System.Action(Of T), System.Action(Of T))
  name.vb: TryFinally(Of T)(T, Action(Of T), Action(Of T))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
    name: TryFinally<T>
    nameWithType: TryCatchExtensions.TryFinally<T>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryFinally<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
    name: TryFinally(Of T)
    nameWithType: TryCatchExtensions.TryFinally(Of T)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryFinally(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
  commentId: M:Hybrid.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
  isExternal: true
  name: ToJsonString(Object, Boolean, Boolean)
  nameWithType: JsonExtensions.ToJsonString(Object, Boolean, Boolean)
  fullName: Hybrid.Json.JsonExtensions.ToJsonString(System.Object, System.Boolean, System.Boolean)
  spec.csharp:
  - uid: Hybrid.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
    name: ToJsonString
    nameWithType: JsonExtensions.ToJsonString
    fullName: Hybrid.Json.JsonExtensions.ToJsonString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
    name: ToJsonString
    nameWithType: JsonExtensions.ToJsonString
    fullName: Hybrid.Json.JsonExtensions.ToJsonString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Json.JsonExtensions
  commentId: T:Hybrid.Json.JsonExtensions
  parent: Hybrid.Json
  name: JsonExtensions
  nameWithType: JsonExtensions
  fullName: Hybrid.Json.JsonExtensions
- uid: Hybrid.Mapping.MapperExtensions.MapTo``1(System.Object)
  commentId: M:Hybrid.Mapping.MapperExtensions.MapTo``1(System.Object)
  isExternal: true
  name: MapTo<TTarget>(Object)
  nameWithType: MapperExtensions.MapTo<TTarget>(Object)
  fullName: Hybrid.Mapping.MapperExtensions.MapTo<TTarget>(System.Object)
  nameWithType.vb: MapperExtensions.MapTo(Of TTarget)(Object)
  fullName.vb: Hybrid.Mapping.MapperExtensions.MapTo(Of TTarget)(System.Object)
  name.vb: MapTo(Of TTarget)(Object)
  spec.csharp:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``1(System.Object)
    name: MapTo<TTarget>
    nameWithType: MapperExtensions.MapTo<TTarget>
    fullName: Hybrid.Mapping.MapperExtensions.MapTo<TTarget>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``1(System.Object)
    name: MapTo(Of TTarget)
    nameWithType: MapperExtensions.MapTo(Of TTarget)
    fullName: Hybrid.Mapping.MapperExtensions.MapTo(Of TTarget)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Mapping.MapperExtensions
  commentId: T:Hybrid.Mapping.MapperExtensions
  parent: Hybrid.Mapping
  name: MapperExtensions
  nameWithType: MapperExtensions
  fullName: Hybrid.Mapping.MapperExtensions
- uid: Hybrid.Mapping.MapperExtensions.MapTo``2(``0,``1)
  commentId: M:Hybrid.Mapping.MapperExtensions.MapTo``2(``0,``1)
  name: MapTo<TSource, TTarget>(TSource, TTarget)
  nameWithType: MapperExtensions.MapTo<TSource, TTarget>(TSource, TTarget)
  fullName: Hybrid.Mapping.MapperExtensions.MapTo<TSource, TTarget>(TSource, TTarget)
  nameWithType.vb: MapperExtensions.MapTo(Of TSource, TTarget)(TSource, TTarget)
  fullName.vb: Hybrid.Mapping.MapperExtensions.MapTo(Of TSource, TTarget)(TSource, TTarget)
  name.vb: MapTo(Of TSource, TTarget)(TSource, TTarget)
  spec.csharp:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``2(``0,``1)
    name: MapTo<TSource, TTarget>
    nameWithType: MapperExtensions.MapTo<TSource, TTarget>
    fullName: Hybrid.Mapping.MapperExtensions.MapTo<TSource, TTarget>
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``2(``0,``1)
    name: MapTo(Of TSource, TTarget)
    nameWithType: MapperExtensions.MapTo(Of TSource, TTarget)
    fullName: Hybrid.Mapping.MapperExtensions.MapTo(Of TSource, TTarget)
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Reflection.LockExtensions.Locking(System.Object,System.Action)
  commentId: M:Hybrid.Reflection.LockExtensions.Locking(System.Object,System.Action)
  isExternal: true
  name: Locking(Object, Action)
  nameWithType: LockExtensions.Locking(Object, Action)
  fullName: Hybrid.Reflection.LockExtensions.Locking(System.Object, System.Action)
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking(System.Object,System.Action)
    name: Locking
    nameWithType: LockExtensions.Locking
    fullName: Hybrid.Reflection.LockExtensions.Locking
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking(System.Object,System.Action)
    name: Locking
    nameWithType: LockExtensions.Locking
    fullName: Hybrid.Reflection.LockExtensions.Locking
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Reflection.LockExtensions
  commentId: T:Hybrid.Reflection.LockExtensions
  parent: Hybrid.Reflection
  name: LockExtensions
  nameWithType: LockExtensions
  fullName: Hybrid.Reflection.LockExtensions
- uid: Hybrid.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
  commentId: M:Hybrid.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
  isExternal: true
  name: Locking<T>(T, Action<T>)
  nameWithType: LockExtensions.Locking<T>(T, Action<T>)
  fullName: Hybrid.Reflection.LockExtensions.Locking<T>(T, System.Action<T>)
  nameWithType.vb: LockExtensions.Locking(Of T)(T, Action(Of T))
  fullName.vb: Hybrid.Reflection.LockExtensions.Locking(Of T)(T, System.Action(Of T))
  name.vb: Locking(Of T)(T, Action(Of T))
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
    name: Locking<T>
    nameWithType: LockExtensions.Locking<T>
    fullName: Hybrid.Reflection.LockExtensions.Locking<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
    name: Locking(Of T)
    nameWithType: LockExtensions.Locking(Of T)
    fullName: Hybrid.Reflection.LockExtensions.Locking(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
  commentId: M:Hybrid.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
  isExternal: true
  name: Locking<TResult>(Object, Func<TResult>)
  nameWithType: LockExtensions.Locking<TResult>(Object, Func<TResult>)
  fullName: Hybrid.Reflection.LockExtensions.Locking<TResult>(System.Object, System.Func<TResult>)
  nameWithType.vb: LockExtensions.Locking(Of TResult)(Object, Func(Of TResult))
  fullName.vb: Hybrid.Reflection.LockExtensions.Locking(Of TResult)(System.Object, System.Func(Of TResult))
  name.vb: Locking(Of TResult)(Object, Func(Of TResult))
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
    name: Locking<TResult>
    nameWithType: LockExtensions.Locking<TResult>
    fullName: Hybrid.Reflection.LockExtensions.Locking<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
    name: Locking(Of TResult)
    nameWithType: LockExtensions.Locking(Of TResult)
    fullName: Hybrid.Reflection.LockExtensions.Locking(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
  commentId: M:Hybrid.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
  isExternal: true
  name: Locking<TSource, TResult>(TSource, Func<TSource, TResult>)
  nameWithType: LockExtensions.Locking<TSource, TResult>(TSource, Func<TSource, TResult>)
  fullName: Hybrid.Reflection.LockExtensions.Locking<TSource, TResult>(TSource, System.Func<TSource, TResult>)
  nameWithType.vb: LockExtensions.Locking(Of TSource, TResult)(TSource, Func(Of TSource, TResult))
  fullName.vb: Hybrid.Reflection.LockExtensions.Locking(Of TSource, TResult)(TSource, System.Func(Of TSource, TResult))
  name.vb: Locking(Of TSource, TResult)(TSource, Func(Of TSource, TResult))
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
    name: Locking<TSource, TResult>
    nameWithType: LockExtensions.Locking<TSource, TResult>
    fullName: Hybrid.Reflection.LockExtensions.Locking<TSource, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
    name: Locking(Of TSource, TResult)
    nameWithType: LockExtensions.Locking(Of TSource, TResult)
    fullName: Hybrid.Reflection.LockExtensions.Locking(Of TSource, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2(``0)
  commentId: M:Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2(``0)
  name: CheckICreatedTime<TEntity, TKey>(TEntity)
  nameWithType: EntityExtensions.CheckICreatedTime<TEntity, TKey>(TEntity)
  fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime<TEntity, TKey>(TEntity)
  nameWithType.vb: EntityExtensions.CheckICreatedTime(Of TEntity, TKey)(TEntity)
  fullName.vb: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime(Of TEntity, TKey)(TEntity)
  name.vb: CheckICreatedTime(Of TEntity, TKey)(TEntity)
  spec.csharp:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2(``0)
    name: CheckICreatedTime<TEntity, TKey>
    nameWithType: EntityExtensions.CheckICreatedTime<TEntity, TKey>
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime<TEntity, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2(``0)
    name: CheckICreatedTime(Of TEntity, TKey)
    nameWithType: EntityExtensions.CheckICreatedTime(Of TEntity, TKey)
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime(Of TEntity, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Domain.Entities.EntityExtensions
  commentId: T:Hybrid.Domain.Entities.EntityExtensions
  parent: Hybrid.Domain.Entities
  name: EntityExtensions
  nameWithType: EntityExtensions
  fullName: Hybrid.Domain.Entities.EntityExtensions
- uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
  commentId: M:Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
  isExternal: true
  name: CheckICreationAudited<TEntity, TKey, TUserKey>(TEntity, IPrincipal)
  nameWithType: EntityExtensions.CheckICreationAudited<TEntity, TKey, TUserKey>(TEntity, IPrincipal)
  fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited<TEntity, TKey, TUserKey>(TEntity, System.Security.Principal.IPrincipal)
  nameWithType.vb: EntityExtensions.CheckICreationAudited(Of TEntity, TKey, TUserKey)(TEntity, IPrincipal)
  fullName.vb: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited(Of TEntity, TKey, TUserKey)(TEntity, System.Security.Principal.IPrincipal)
  name.vb: CheckICreationAudited(Of TEntity, TKey, TUserKey)(TEntity, IPrincipal)
  spec.csharp:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
    name: CheckICreationAudited<TEntity, TKey, TUserKey>
    nameWithType: EntityExtensions.CheckICreationAudited<TEntity, TKey, TUserKey>
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited<TEntity, TKey, TUserKey>
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
    name: CheckICreationAudited(Of TEntity, TKey, TUserKey)
    nameWithType: EntityExtensions.CheckICreationAudited(Of TEntity, TKey, TUserKey)
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited(Of TEntity, TKey, TUserKey)
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
  commentId: M:Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
  isExternal: true
  name: CheckIUpdateAudited<TEntity, TKey, TUserKey>(TEntity, IPrincipal)
  nameWithType: EntityExtensions.CheckIUpdateAudited<TEntity, TKey, TUserKey>(TEntity, IPrincipal)
  fullName: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited<TEntity, TKey, TUserKey>(TEntity, System.Security.Principal.IPrincipal)
  nameWithType.vb: EntityExtensions.CheckIUpdateAudited(Of TEntity, TKey, TUserKey)(TEntity, IPrincipal)
  fullName.vb: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited(Of TEntity, TKey, TUserKey)(TEntity, System.Security.Principal.IPrincipal)
  name.vb: CheckIUpdateAudited(Of TEntity, TKey, TUserKey)(TEntity, IPrincipal)
  spec.csharp:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
    name: CheckIUpdateAudited<TEntity, TKey, TUserKey>
    nameWithType: EntityExtensions.CheckIUpdateAudited<TEntity, TKey, TUserKey>
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited<TEntity, TKey, TUserKey>
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
    name: CheckIUpdateAudited(Of TEntity, TKey, TUserKey)
    nameWithType: EntityExtensions.CheckIUpdateAudited(Of TEntity, TKey, TUserKey)
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited(Of TEntity, TKey, TUserKey)
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Quartz.Util.DictionaryExtensions.TryGetAndReturn``2(System.Collections.Generic.IDictionary{``0,``1},``0)
  commentId: M:Quartz.Util.DictionaryExtensions.TryGetAndReturn``2(System.Collections.Generic.IDictionary{``0,``1},``0)
  isExternal: true
  name: TryGetAndReturn<TKey, TValue>(IDictionary<TKey, TValue>, TKey)
  nameWithType: DictionaryExtensions.TryGetAndReturn<TKey, TValue>(IDictionary<TKey, TValue>, TKey)
  fullName: Quartz.Util.DictionaryExtensions.TryGetAndReturn<TKey, TValue>(System.Collections.Generic.IDictionary<TKey, TValue>, TKey)
  nameWithType.vb: DictionaryExtensions.TryGetAndReturn(Of TKey, TValue)(IDictionary(Of TKey, TValue), TKey)
  fullName.vb: Quartz.Util.DictionaryExtensions.TryGetAndReturn(Of TKey, TValue)(System.Collections.Generic.IDictionary(Of TKey, TValue), TKey)
  name.vb: TryGetAndReturn(Of TKey, TValue)(IDictionary(Of TKey, TValue), TKey)
  spec.csharp:
  - uid: Quartz.Util.DictionaryExtensions.TryGetAndReturn``2(System.Collections.Generic.IDictionary{``0,``1},``0)
    name: TryGetAndReturn<TKey, TValue>
    nameWithType: DictionaryExtensions.TryGetAndReturn<TKey, TValue>
    fullName: Quartz.Util.DictionaryExtensions.TryGetAndReturn<TKey, TValue>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Quartz.Util.DictionaryExtensions.TryGetAndReturn``2(System.Collections.Generic.IDictionary{``0,``1},``0)
    name: TryGetAndReturn(Of TKey, TValue)
    nameWithType: DictionaryExtensions.TryGetAndReturn(Of TKey, TValue)
    fullName: Quartz.Util.DictionaryExtensions.TryGetAndReturn(Of TKey, TValue)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: Quartz.Util.DictionaryExtensions
  commentId: T:Quartz.Util.DictionaryExtensions
  parent: Quartz.Util
  name: DictionaryExtensions
  nameWithType: DictionaryExtensions
  fullName: Quartz.Util.DictionaryExtensions
- uid: IdentityServer4.Extensions.IEnumerableExtensions.IsNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:IdentityServer4.Extensions.IEnumerableExtensions.IsNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: IsNullOrEmpty<T>(IEnumerable<T>)
  nameWithType: IEnumerableExtensions.IsNullOrEmpty<T>(IEnumerable<T>)
  fullName: IdentityServer4.Extensions.IEnumerableExtensions.IsNullOrEmpty<T>(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: IEnumerableExtensions.IsNullOrEmpty(Of T)(IEnumerable(Of T))
  fullName.vb: IdentityServer4.Extensions.IEnumerableExtensions.IsNullOrEmpty(Of T)(System.Collections.Generic.IEnumerable(Of T))
  name.vb: IsNullOrEmpty(Of T)(IEnumerable(Of T))
  spec.csharp:
  - uid: IdentityServer4.Extensions.IEnumerableExtensions.IsNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})
    name: IsNullOrEmpty<T>
    nameWithType: IEnumerableExtensions.IsNullOrEmpty<T>
    fullName: IdentityServer4.Extensions.IEnumerableExtensions.IsNullOrEmpty<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: IdentityServer4.Extensions.IEnumerableExtensions.IsNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})
    name: IsNullOrEmpty(Of T)
    nameWithType: IEnumerableExtensions.IsNullOrEmpty(Of T)
    fullName: IdentityServer4.Extensions.IEnumerableExtensions.IsNullOrEmpty(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: IdentityServer4.Extensions.IEnumerableExtensions
  commentId: T:IdentityServer4.Extensions.IEnumerableExtensions
  parent: IdentityServer4.Extensions
  name: IEnumerableExtensions
  nameWithType: IEnumerableExtensions
  fullName: IdentityServer4.Extensions.IEnumerableExtensions
- uid: IdentityServer4.Extensions.IEnumerableExtensions.HasDuplicates``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  commentId: M:IdentityServer4.Extensions.IEnumerableExtensions.HasDuplicates``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  isExternal: true
  name: HasDuplicates<T, TProp>(IEnumerable<T>, Func<T, TProp>)
  nameWithType: IEnumerableExtensions.HasDuplicates<T, TProp>(IEnumerable<T>, Func<T, TProp>)
  fullName: IdentityServer4.Extensions.IEnumerableExtensions.HasDuplicates<T, TProp>(System.Collections.Generic.IEnumerable<T>, System.Func<T, TProp>)
  nameWithType.vb: IEnumerableExtensions.HasDuplicates(Of T, TProp)(IEnumerable(Of T), Func(Of T, TProp))
  fullName.vb: IdentityServer4.Extensions.IEnumerableExtensions.HasDuplicates(Of T, TProp)(System.Collections.Generic.IEnumerable(Of T), System.Func(Of T, TProp))
  name.vb: HasDuplicates(Of T, TProp)(IEnumerable(Of T), Func(Of T, TProp))
  spec.csharp:
  - uid: IdentityServer4.Extensions.IEnumerableExtensions.HasDuplicates``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
    name: HasDuplicates<T, TProp>
    nameWithType: IEnumerableExtensions.HasDuplicates<T, TProp>
    fullName: IdentityServer4.Extensions.IEnumerableExtensions.HasDuplicates<T, TProp>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TProp
    nameWithType: TProp
    fullName: TProp
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: IdentityServer4.Extensions.IEnumerableExtensions.HasDuplicates``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
    name: HasDuplicates(Of T, TProp)
    nameWithType: IEnumerableExtensions.HasDuplicates(Of T, TProp)
    fullName: IdentityServer4.Extensions.IEnumerableExtensions.HasDuplicates(Of T, TProp)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TProp
    nameWithType: TProp
    fullName: TProp
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Collections
  commentId: N:OSharp.Collections
  name: OSharp.Collections
  nameWithType: OSharp.Collections
  fullName: OSharp.Collections
- uid: OSharp.Entity
  commentId: N:OSharp.Entity
  name: OSharp.Entity
  nameWithType: OSharp.Entity
  fullName: OSharp.Entity
- uid: OSharp.Extensions
  commentId: N:OSharp.Extensions
  name: OSharp.Extensions
  nameWithType: OSharp.Extensions
  fullName: OSharp.Extensions
- uid: OSharp.Json
  commentId: N:OSharp.Json
  name: OSharp.Json
  nameWithType: OSharp.Json
  fullName: OSharp.Json
- uid: OSharp.Mapping
  commentId: N:OSharp.Mapping
  name: OSharp.Mapping
  nameWithType: OSharp.Mapping
  fullName: OSharp.Mapping
- uid: OSharp.Reflection
  commentId: N:OSharp.Reflection
  name: OSharp.Reflection
  nameWithType: OSharp.Reflection
  fullName: OSharp.Reflection
- uid: Hybrid.Extensions
  commentId: N:Hybrid.Extensions
  name: Hybrid.Extensions
  nameWithType: Hybrid.Extensions
  fullName: Hybrid.Extensions
- uid: Hybrid.Json
  commentId: N:Hybrid.Json
  name: Hybrid.Json
  nameWithType: Hybrid.Json
  fullName: Hybrid.Json
- uid: Hybrid.Mapping
  commentId: N:Hybrid.Mapping
  name: Hybrid.Mapping
  nameWithType: Hybrid.Mapping
  fullName: Hybrid.Mapping
- uid: Hybrid.Reflection
  commentId: N:Hybrid.Reflection
  name: Hybrid.Reflection
  nameWithType: Hybrid.Reflection
  fullName: Hybrid.Reflection
- uid: Hybrid.Domain.Entities
  commentId: N:Hybrid.Domain.Entities
  name: Hybrid.Domain.Entities
  nameWithType: Hybrid.Domain.Entities
  fullName: Hybrid.Domain.Entities
- uid: Quartz.Util
  commentId: N:Quartz.Util
  name: Quartz.Util
  nameWithType: Quartz.Util
  fullName: Quartz.Util
- uid: IdentityServer4.Extensions
  commentId: N:IdentityServer4.Extensions
  name: IdentityServer4.Extensions
  nameWithType: IdentityServer4.Extensions
  fullName: IdentityServer4.Extensions
- uid: Hybrid.Dependency.ScopedDictionary.Function*
  commentId: Overload:Hybrid.Dependency.ScopedDictionary.Function
  name: Function
  nameWithType: ScopedDictionary.Function
  fullName: Hybrid.Dependency.ScopedDictionary.Function
- uid: Hybrid.Authorization.Functions.IFunction
  commentId: T:Hybrid.Authorization.Functions.IFunction
  parent: Hybrid.Authorization.Functions
  name: IFunction
  nameWithType: IFunction
  fullName: Hybrid.Authorization.Functions.IFunction
- uid: Hybrid.Authorization.Functions
  commentId: N:Hybrid.Authorization.Functions
  name: Hybrid.Authorization.Functions
  nameWithType: Hybrid.Authorization.Functions
  fullName: Hybrid.Authorization.Functions
- uid: Hybrid.Dependency.ScopedDictionary.DataAuthValidRoleNames*
  commentId: Overload:Hybrid.Dependency.ScopedDictionary.DataAuthValidRoleNames
  name: DataAuthValidRoleNames
  nameWithType: ScopedDictionary.DataAuthValidRoleNames
  fullName: Hybrid.Dependency.ScopedDictionary.DataAuthValidRoleNames
- uid: System.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Hybrid.Dependency.ScopedDictionary.AuditOperation*
  commentId: Overload:Hybrid.Dependency.ScopedDictionary.AuditOperation
  name: AuditOperation
  nameWithType: ScopedDictionary.AuditOperation
  fullName: Hybrid.Dependency.ScopedDictionary.AuditOperation
- uid: Hybrid.Audits.AuditOperationEntry
  commentId: T:Hybrid.Audits.AuditOperationEntry
  parent: Hybrid.Audits
  name: AuditOperationEntry
  nameWithType: AuditOperationEntry
  fullName: Hybrid.Audits.AuditOperationEntry
- uid: Hybrid.Audits
  commentId: N:Hybrid.Audits
  name: Hybrid.Audits
  nameWithType: Hybrid.Audits
  fullName: Hybrid.Audits
- uid: Hybrid.Dependency.ScopedDictionary.Identity*
  commentId: Overload:Hybrid.Dependency.ScopedDictionary.Identity
  name: Identity
  nameWithType: ScopedDictionary.Identity
  fullName: Hybrid.Dependency.ScopedDictionary.Identity
- uid: System.Security.Claims.ClaimsIdentity
  commentId: T:System.Security.Claims.ClaimsIdentity
  parent: System.Security.Claims
  isExternal: true
  name: ClaimsIdentity
  nameWithType: ClaimsIdentity
  fullName: System.Security.Claims.ClaimsIdentity
- uid: System.Security.Claims
  commentId: N:System.Security.Claims
  isExternal: true
  name: System.Security.Claims
  nameWithType: System.Security.Claims
  fullName: System.Security.Claims
- uid: Hybrid.Dependency.ScopedDictionary.Dispose*
  commentId: Overload:Hybrid.Dependency.ScopedDictionary.Dispose
  name: Dispose
  nameWithType: ScopedDictionary.Dispose
  fullName: Hybrid.Dependency.ScopedDictionary.Dispose
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
