### YamlMime:ManagedReference
items:
- uid: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2
  commentId: T:Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2
  id: SqlServerDapperSqlExecutor`2
  parent: Hybrid.EntityFrameworkCore.SqlServer
  children:
  - Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2.#ctor(Hybrid.Domain.Uow.IUnitOfWorkManager)
  - Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2.DatabaseType
  - Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2.GetDbConnection(System.String)
  langs:
  - csharp
  - vb
  name: SqlServerDapperSqlExecutor<TEntity, TKey>
  nameWithType: SqlServerDapperSqlExecutor<TEntity, TKey>
  fullName: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor<TEntity, TKey>
  type: Class
  source:
    remote:
      path: src/Hybrid.EntityFrameworkCore.SqlServer/SqlServerDapperSqlExecutor.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: SqlServerDapperSqlExecutor
    path: ../src/Hybrid.EntityFrameworkCore.SqlServer/SqlServerDapperSqlExecutor.cs
    startLine: 23
  assemblies:
  - Hybrid.EntityFrameworkCore.SqlServer
  namespace: Hybrid.EntityFrameworkCore.SqlServer
  summary: "\nSqlServer的Dapper-Sql功能执行\n"
  example: []
  syntax:
    content: 'public class SqlServerDapperSqlExecutor<TEntity, TKey> : SqlExecutorBase<TEntity, TKey>, ISqlExecutor<TEntity, TKey> where TEntity : IEntity<TKey>'
    typeParameters:
    - id: TEntity
      description: 实体类型
    - id: TKey
      description: 编号类型
    content.vb: >-
      Public Class SqlServerDapperSqlExecutor(Of TEntity As IEntity(Of TKey), TKey)

          Inherits SqlExecutorBase(Of TEntity, TKey)

          Implements ISqlExecutor(Of TEntity, TKey)
  inheritance:
  - System.Object
  - Hybrid.EntityFrameworkCore.SqlExecutorBase{{TEntity},{TKey}}
  implements:
  - Hybrid.Domain.Repositories.ISqlExecutor{{TEntity},{TKey}}
  inheritedMembers:
  - Hybrid.EntityFrameworkCore.SqlExecutorBase{{TEntity},{TKey}}.DatabaseType
  - Hybrid.EntityFrameworkCore.SqlExecutorBase{{TEntity},{TKey}}.GetDbConnection(System.String)
  - Hybrid.EntityFrameworkCore.SqlExecutorBase{{TEntity},{TKey}}.FromSql``1(System.String,System.Object)
  - Hybrid.EntityFrameworkCore.SqlExecutorBase{{TEntity},{TKey}}.ExecuteSqlCommand(System.String,System.Object)
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2.OSharp.Entity.EntityExtensions.CheckICreatedTime``2
  - Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2.OSharp.Entity.EntityExtensions.CheckICreationAudited``3(System.Security.Principal.IPrincipal)
  - Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2.OSharp.Entity.EntityExtensions.CheckIUpdateAudited``3(System.Security.Principal.IPrincipal)
  - System.Object.OSharp.Extensions.ObjectExtensions.CastTo(System.Type)
  - System.Object.OSharp.Extensions.ObjectExtensions.CastTo``1
  - System.Object.OSharp.Extensions.ObjectExtensions.CastTo``1({T})
  - Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2.OSharp.Extensions.ObjectExtensions.IsIn``1(Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor{{TEntity},{TKey}}[])
  - System.Object.OSharp.Extensions.ObjectExtensions.ToDynamic
  - Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2.OSharp.Extensions.ObjectExtensions.DeepClone``1
  - Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2.OSharp.Extensions.ParameterCheckExtensions.Required``1(System.Func{Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor{{TEntity},{TKey}},System.Boolean},System.String)
  - Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2.OSharp.Extensions.ParameterCheckExtensions.Required``2(System.Func{Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor{{TEntity},{TKey}},System.Boolean},System.String)
  - Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2.OSharp.Extensions.ParameterCheckExtensions.CheckNotNull``1(System.String)
  - Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2.OSharp.Extensions.TryCatchExtensions.TryCatch``1(System.Action{Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor{{TEntity},{TKey}}},System.Action{System.Exception},System.Action{Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor{{TEntity},{TKey}}})
  - Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2.OSharp.Extensions.TryCatchExtensions.TryCatch``1(System.Action{Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor{{TEntity},{TKey}}},System.Action{System.Exception})
  - Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2.OSharp.Extensions.TryCatchExtensions.TryCatch``2(System.Func{Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor{{TEntity},{TKey}},{TResult}},System.Action{System.Exception},System.Action{Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor{{TEntity},{TKey}}})
  - Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2.OSharp.Extensions.TryCatchExtensions.TryCatch``2(System.Func{Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor{{TEntity},{TKey}},{TResult}},System.Action{System.Exception})
  - Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2.OSharp.Extensions.TryCatchExtensions.TryFinally``1(System.Action{Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor{{TEntity},{TKey}}},System.Action{Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor{{TEntity},{TKey}}})
  - System.Object.OSharp.Json.JsonExtensions.ToJsonString(System.Boolean,System.Boolean)
  - System.Object.OSharp.Mapping.MapperExtensions.MapTo``1
  - Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2.OSharp.Mapping.MapperExtensions.MapTo``2({TTarget})
  - System.Object.OSharp.Reflection.LockExtensions.Locking(System.Action)
  - Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2.OSharp.Reflection.LockExtensions.Locking``1(System.Action{Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor{{TEntity},{TKey}}})
  - System.Object.OSharp.Reflection.LockExtensions.Locking``1(System.Func{{TResult}})
  - Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2.OSharp.Reflection.LockExtensions.Locking``2(System.Func{Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor{{TEntity},{TKey}},{TResult}})
  - System.Object.Hybrid.Extensions.ObjectExtensions.CastTo(System.Type)
  - System.Object.Hybrid.Extensions.ObjectExtensions.CastTo``1
  - System.Object.Hybrid.Extensions.ObjectExtensions.CastTo``1({T})
  - Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2.Hybrid.Extensions.ObjectExtensions.IsIn``1(Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor{{TEntity},{TKey}}[])
  - System.Object.Hybrid.Extensions.ObjectExtensions.ToDynamic
  - Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2.Hybrid.Extensions.ObjectExtensions.DeepClone``1
  - Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2.Hybrid.Extensions.ParameterCheckExtensions.Required``1(System.Func{Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor{{TEntity},{TKey}},System.Boolean},System.String)
  - Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2.Hybrid.Extensions.ParameterCheckExtensions.Required``2(System.Func{Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor{{TEntity},{TKey}},System.Boolean},System.String)
  - Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2.Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(System.String)
  - Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2.Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor{{TEntity},{TKey}}},System.Action{System.Exception},System.Action{Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor{{TEntity},{TKey}}})
  - Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2.Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor{{TEntity},{TKey}}},System.Action{System.Exception})
  - Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2.Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor{{TEntity},{TKey}},{TResult}},System.Action{System.Exception},System.Action{Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor{{TEntity},{TKey}}})
  - Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2.Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor{{TEntity},{TKey}},{TResult}},System.Action{System.Exception})
  - Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2.Hybrid.Extensions.TryCatchExtensions.TryFinally``1(System.Action{Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor{{TEntity},{TKey}}},System.Action{Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor{{TEntity},{TKey}}})
  - System.Object.Hybrid.Json.JsonExtensions.ToJsonString(System.Boolean,System.Boolean)
  - System.Object.Hybrid.Mapping.MapperExtensions.MapTo``1
  - Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2.Hybrid.Mapping.MapperExtensions.MapTo``2({TTarget})
  - System.Object.Hybrid.Reflection.LockExtensions.Locking(System.Action)
  - Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2.Hybrid.Reflection.LockExtensions.Locking``1(System.Action{Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor{{TEntity},{TKey}}})
  - System.Object.Hybrid.Reflection.LockExtensions.Locking``1(System.Func{{TResult}})
  - Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2.Hybrid.Reflection.LockExtensions.Locking``2(System.Func{Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor{{TEntity},{TKey}},{TResult}})
  - Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2.Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2
  - Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2.Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(System.Security.Principal.IPrincipal)
  - Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2.Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(System.Security.Principal.IPrincipal)
  nameWithType.vb: SqlServerDapperSqlExecutor(Of TEntity, TKey)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor(Of TEntity, TKey)
  name.vb: SqlServerDapperSqlExecutor(Of TEntity, TKey)
- uid: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2.#ctor(Hybrid.Domain.Uow.IUnitOfWorkManager)
  commentId: M:Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2.#ctor(Hybrid.Domain.Uow.IUnitOfWorkManager)
  id: '#ctor(Hybrid.Domain.Uow.IUnitOfWorkManager)'
  parent: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2
  langs:
  - csharp
  - vb
  name: SqlServerDapperSqlExecutor(IUnitOfWorkManager)
  nameWithType: SqlServerDapperSqlExecutor<TEntity, TKey>.SqlServerDapperSqlExecutor(IUnitOfWorkManager)
  fullName: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor<TEntity, TKey>.SqlServerDapperSqlExecutor(Hybrid.Domain.Uow.IUnitOfWorkManager)
  type: Constructor
  source:
    remote:
      path: src/Hybrid.EntityFrameworkCore.SqlServer/SqlServerDapperSqlExecutor.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: .ctor
    path: ../src/Hybrid.EntityFrameworkCore.SqlServer/SqlServerDapperSqlExecutor.cs
    startLine: 28
  assemblies:
  - Hybrid.EntityFrameworkCore.SqlServer
  namespace: Hybrid.EntityFrameworkCore.SqlServer
  summary: "\n初始化一个<xref href=\"Hybrid.EntityFrameworkCore.SqlExecutorBase%602\" data-throw-if-not-resolved=\"false\"></xref>类型的新实例\n"
  example: []
  syntax:
    content: public SqlServerDapperSqlExecutor(IUnitOfWorkManager unitOfWorkManager)
    parameters:
    - id: unitOfWorkManager
      type: Hybrid.Domain.Uow.IUnitOfWorkManager
    content.vb: Public Sub New(unitOfWorkManager As IUnitOfWorkManager)
  overload: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2.#ctor*
  nameWithType.vb: SqlServerDapperSqlExecutor(Of TEntity, TKey).SqlServerDapperSqlExecutor(IUnitOfWorkManager)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor(Of TEntity, TKey).SqlServerDapperSqlExecutor(Hybrid.Domain.Uow.IUnitOfWorkManager)
- uid: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2.DatabaseType
  commentId: P:Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2.DatabaseType
  id: DatabaseType
  parent: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2
  langs:
  - csharp
  - vb
  name: DatabaseType
  nameWithType: SqlServerDapperSqlExecutor<TEntity, TKey>.DatabaseType
  fullName: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor<TEntity, TKey>.DatabaseType
  type: Property
  source:
    remote:
      path: src/Hybrid.EntityFrameworkCore.SqlServer/SqlServerDapperSqlExecutor.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: DatabaseType
    path: ../src/Hybrid.EntityFrameworkCore.SqlServer/SqlServerDapperSqlExecutor.cs
    startLine: 35
  assemblies:
  - Hybrid.EntityFrameworkCore.SqlServer
  namespace: Hybrid.EntityFrameworkCore.SqlServer
  summary: "\n获取 数据库类型\n"
  example: []
  syntax:
    content: public override DatabaseType DatabaseType { get; }
    parameters: []
    return:
      type: Hybrid.Domain.EntityFramework.DatabaseType
    content.vb: Public Overrides ReadOnly Property DatabaseType As DatabaseType
  overridden: Hybrid.EntityFrameworkCore.SqlExecutorBase{{TEntity},{TKey}}.DatabaseType
  overload: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2.DatabaseType*
  nameWithType.vb: SqlServerDapperSqlExecutor(Of TEntity, TKey).DatabaseType
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
  fullName.vb: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor(Of TEntity, TKey).DatabaseType
- uid: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2.GetDbConnection(System.String)
  commentId: M:Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2.GetDbConnection(System.String)
  id: GetDbConnection(System.String)
  parent: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2
  langs:
  - csharp
  - vb
  name: GetDbConnection(String)
  nameWithType: SqlServerDapperSqlExecutor<TEntity, TKey>.GetDbConnection(String)
  fullName: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor<TEntity, TKey>.GetDbConnection(System.String)
  type: Method
  source:
    remote:
      path: src/Hybrid.EntityFrameworkCore.SqlServer/SqlServerDapperSqlExecutor.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: GetDbConnection
    path: ../src/Hybrid.EntityFrameworkCore.SqlServer/SqlServerDapperSqlExecutor.cs
    startLine: 42
  assemblies:
  - Hybrid.EntityFrameworkCore.SqlServer
  namespace: Hybrid.EntityFrameworkCore.SqlServer
  summary: "\n重写以获取数据连接对象\n"
  example: []
  syntax:
    content: protected override IDbConnection GetDbConnection(string connectionString)
    parameters:
    - id: connectionString
      type: System.String
      description: 数据连接字符串
    return:
      type: System.Data.IDbConnection
      description: ''
    content.vb: Protected Overrides Function GetDbConnection(connectionString As String) As IDbConnection
  overridden: Hybrid.EntityFrameworkCore.SqlExecutorBase{{TEntity},{TKey}}.GetDbConnection(System.String)
  overload: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2.GetDbConnection*
  nameWithType.vb: SqlServerDapperSqlExecutor(Of TEntity, TKey).GetDbConnection(String)
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
  fullName.vb: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor(Of TEntity, TKey).GetDbConnection(System.String)
references:
- uid: Hybrid.EntityFrameworkCore.SqlServer
  commentId: N:Hybrid.EntityFrameworkCore.SqlServer
  name: Hybrid.EntityFrameworkCore.SqlServer
  nameWithType: Hybrid.EntityFrameworkCore.SqlServer
  fullName: Hybrid.EntityFrameworkCore.SqlServer
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Hybrid.EntityFrameworkCore.SqlExecutorBase{{TEntity},{TKey}}
  commentId: T:Hybrid.EntityFrameworkCore.SqlExecutorBase{`0,`1}
  parent: Hybrid.EntityFrameworkCore
  definition: Hybrid.EntityFrameworkCore.SqlExecutorBase`2
  name: SqlExecutorBase<TEntity, TKey>
  nameWithType: SqlExecutorBase<TEntity, TKey>
  fullName: Hybrid.EntityFrameworkCore.SqlExecutorBase<TEntity, TKey>
  nameWithType.vb: SqlExecutorBase(Of TEntity, TKey)
  fullName.vb: Hybrid.EntityFrameworkCore.SqlExecutorBase(Of TEntity, TKey)
  name.vb: SqlExecutorBase(Of TEntity, TKey)
  spec.csharp:
  - uid: Hybrid.EntityFrameworkCore.SqlExecutorBase`2
    name: SqlExecutorBase
    nameWithType: SqlExecutorBase
    fullName: Hybrid.EntityFrameworkCore.SqlExecutorBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Hybrid.EntityFrameworkCore.SqlExecutorBase`2
    name: SqlExecutorBase
    nameWithType: SqlExecutorBase
    fullName: Hybrid.EntityFrameworkCore.SqlExecutorBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Domain.Repositories.ISqlExecutor{{TEntity},{TKey}}
  commentId: T:Hybrid.Domain.Repositories.ISqlExecutor{``0,``1}
  parent: Hybrid.Domain.Repositories
  definition: Hybrid.Domain.Repositories.ISqlExecutor`2
  name: ISqlExecutor<TEntity, TKey>
  nameWithType: ISqlExecutor<TEntity, TKey>
  fullName: Hybrid.Domain.Repositories.ISqlExecutor<TEntity, TKey>
  nameWithType.vb: ISqlExecutor(Of TEntity, TKey)
  fullName.vb: Hybrid.Domain.Repositories.ISqlExecutor(Of TEntity, TKey)
  name.vb: ISqlExecutor(Of TEntity, TKey)
  spec.csharp:
  - uid: Hybrid.Domain.Repositories.ISqlExecutor`2
    name: ISqlExecutor
    nameWithType: ISqlExecutor
    fullName: Hybrid.Domain.Repositories.ISqlExecutor
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Hybrid.Domain.Repositories.ISqlExecutor`2
    name: ISqlExecutor
    nameWithType: ISqlExecutor
    fullName: Hybrid.Domain.Repositories.ISqlExecutor
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EntityFrameworkCore.SqlExecutorBase{{TEntity},{TKey}}.DatabaseType
  commentId: P:Hybrid.EntityFrameworkCore.SqlExecutorBase{`0,`1}.DatabaseType
  parent: Hybrid.EntityFrameworkCore.SqlExecutorBase{{TEntity},{TKey}}
  definition: Hybrid.EntityFrameworkCore.SqlExecutorBase`2.DatabaseType
  name: DatabaseType
  nameWithType: SqlExecutorBase<TEntity, TKey>.DatabaseType
  fullName: Hybrid.EntityFrameworkCore.SqlExecutorBase<TEntity, TKey>.DatabaseType
  nameWithType.vb: SqlExecutorBase(Of TEntity, TKey).DatabaseType
  fullName.vb: Hybrid.EntityFrameworkCore.SqlExecutorBase(Of TEntity, TKey).DatabaseType
- uid: Hybrid.EntityFrameworkCore.SqlExecutorBase{{TEntity},{TKey}}.GetDbConnection(System.String)
  commentId: M:Hybrid.EntityFrameworkCore.SqlExecutorBase{`0,`1}.GetDbConnection(System.String)
  parent: Hybrid.EntityFrameworkCore.SqlExecutorBase{{TEntity},{TKey}}
  definition: Hybrid.EntityFrameworkCore.SqlExecutorBase`2.GetDbConnection(System.String)
  name: GetDbConnection(String)
  nameWithType: SqlExecutorBase<TEntity, TKey>.GetDbConnection(String)
  fullName: Hybrid.EntityFrameworkCore.SqlExecutorBase<TEntity, TKey>.GetDbConnection(System.String)
  nameWithType.vb: SqlExecutorBase(Of TEntity, TKey).GetDbConnection(String)
  fullName.vb: Hybrid.EntityFrameworkCore.SqlExecutorBase(Of TEntity, TKey).GetDbConnection(System.String)
  spec.csharp:
  - uid: Hybrid.EntityFrameworkCore.SqlExecutorBase`2.GetDbConnection(System.String)
    name: GetDbConnection
    nameWithType: SqlExecutorBase<TEntity, TKey>.GetDbConnection
    fullName: Hybrid.EntityFrameworkCore.SqlExecutorBase<TEntity, TKey>.GetDbConnection
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.EntityFrameworkCore.SqlExecutorBase`2.GetDbConnection(System.String)
    name: GetDbConnection
    nameWithType: SqlExecutorBase(Of TEntity, TKey).GetDbConnection
    fullName: Hybrid.EntityFrameworkCore.SqlExecutorBase(Of TEntity, TKey).GetDbConnection
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EntityFrameworkCore.SqlExecutorBase{{TEntity},{TKey}}.FromSql``1(System.String,System.Object)
  commentId: M:Hybrid.EntityFrameworkCore.SqlExecutorBase{`0,`1}.FromSql``1(System.String,System.Object)
  parent: Hybrid.EntityFrameworkCore.SqlExecutorBase{{TEntity},{TKey}}
  definition: Hybrid.EntityFrameworkCore.SqlExecutorBase`2.FromSql``1(System.String,System.Object)
  name: FromSql<TResult>(String, Object)
  nameWithType: SqlExecutorBase<TEntity, TKey>.FromSql<TResult>(String, Object)
  fullName: Hybrid.EntityFrameworkCore.SqlExecutorBase<TEntity, TKey>.FromSql<TResult>(System.String, System.Object)
  nameWithType.vb: SqlExecutorBase(Of TEntity, TKey).FromSql(Of TResult)(String, Object)
  fullName.vb: Hybrid.EntityFrameworkCore.SqlExecutorBase(Of TEntity, TKey).FromSql(Of TResult)(System.String, System.Object)
  name.vb: FromSql(Of TResult)(String, Object)
  spec.csharp:
  - uid: Hybrid.EntityFrameworkCore.SqlExecutorBase`2.FromSql``1(System.String,System.Object)
    name: FromSql<TResult>
    nameWithType: SqlExecutorBase<TEntity, TKey>.FromSql<TResult>
    fullName: Hybrid.EntityFrameworkCore.SqlExecutorBase<TEntity, TKey>.FromSql<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.EntityFrameworkCore.SqlExecutorBase`2.FromSql``1(System.String,System.Object)
    name: FromSql(Of TResult)
    nameWithType: SqlExecutorBase(Of TEntity, TKey).FromSql(Of TResult)
    fullName: Hybrid.EntityFrameworkCore.SqlExecutorBase(Of TEntity, TKey).FromSql(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EntityFrameworkCore.SqlExecutorBase{{TEntity},{TKey}}.ExecuteSqlCommand(System.String,System.Object)
  commentId: M:Hybrid.EntityFrameworkCore.SqlExecutorBase{`0,`1}.ExecuteSqlCommand(System.String,System.Object)
  parent: Hybrid.EntityFrameworkCore.SqlExecutorBase{{TEntity},{TKey}}
  definition: Hybrid.EntityFrameworkCore.SqlExecutorBase`2.ExecuteSqlCommand(System.String,System.Object)
  name: ExecuteSqlCommand(String, Object)
  nameWithType: SqlExecutorBase<TEntity, TKey>.ExecuteSqlCommand(String, Object)
  fullName: Hybrid.EntityFrameworkCore.SqlExecutorBase<TEntity, TKey>.ExecuteSqlCommand(System.String, System.Object)
  nameWithType.vb: SqlExecutorBase(Of TEntity, TKey).ExecuteSqlCommand(String, Object)
  fullName.vb: Hybrid.EntityFrameworkCore.SqlExecutorBase(Of TEntity, TKey).ExecuteSqlCommand(System.String, System.Object)
  spec.csharp:
  - uid: Hybrid.EntityFrameworkCore.SqlExecutorBase`2.ExecuteSqlCommand(System.String,System.Object)
    name: ExecuteSqlCommand
    nameWithType: SqlExecutorBase<TEntity, TKey>.ExecuteSqlCommand
    fullName: Hybrid.EntityFrameworkCore.SqlExecutorBase<TEntity, TKey>.ExecuteSqlCommand
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.EntityFrameworkCore.SqlExecutorBase`2.ExecuteSqlCommand(System.String,System.Object)
    name: ExecuteSqlCommand
    nameWithType: SqlExecutorBase(Of TEntity, TKey).ExecuteSqlCommand
    fullName: Hybrid.EntityFrameworkCore.SqlExecutorBase(Of TEntity, TKey).ExecuteSqlCommand
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2.OSharp.Entity.EntityExtensions.CheckICreatedTime``2
  commentId: M:OSharp.Entity.EntityExtensions.CheckICreatedTime``2(``0)
  parent: OSharp.Entity.EntityExtensions
  definition: OSharp.Entity.EntityExtensions.CheckICreatedTime``2(``0)
  name: CheckICreatedTime<SqlServerDapperSqlExecutor<TEntity, TKey>, TKey>()
  nameWithType: EntityExtensions.CheckICreatedTime<SqlServerDapperSqlExecutor<TEntity, TKey>, TKey>()
  fullName: OSharp.Entity.EntityExtensions.CheckICreatedTime<Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor<TEntity, TKey>, TKey>()
  nameWithType.vb: EntityExtensions.CheckICreatedTime(Of SqlServerDapperSqlExecutor(Of TEntity, TKey), TKey)()
  fullName.vb: OSharp.Entity.EntityExtensions.CheckICreatedTime(Of Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor(Of TEntity, TKey), TKey)()
  name.vb: CheckICreatedTime(Of SqlServerDapperSqlExecutor(Of TEntity, TKey), TKey)()
  spec.csharp:
  - uid: OSharp.Entity.EntityExtensions.CheckICreatedTime``2
    name: CheckICreatedTime<SqlServerDapperSqlExecutor<TEntity, TKey>, TKey>
    nameWithType: EntityExtensions.CheckICreatedTime<SqlServerDapperSqlExecutor<TEntity, TKey>, TKey>
    fullName: OSharp.Entity.EntityExtensions.CheckICreatedTime<Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor<TEntity, TKey>, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Entity.EntityExtensions.CheckICreatedTime``2
    name: CheckICreatedTime(Of SqlServerDapperSqlExecutor(Of TEntity, TKey), TKey)
    nameWithType: EntityExtensions.CheckICreatedTime(Of SqlServerDapperSqlExecutor(Of TEntity, TKey), TKey)
    fullName: OSharp.Entity.EntityExtensions.CheckICreatedTime(Of Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor(Of TEntity, TKey), TKey)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2.OSharp.Entity.EntityExtensions.CheckICreationAudited``3(System.Security.Principal.IPrincipal)
  commentId: M:OSharp.Entity.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
  parent: OSharp.Entity.EntityExtensions
  definition: OSharp.Entity.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
  name: CheckICreationAudited<SqlServerDapperSqlExecutor<TEntity, TKey>, TKey, TUserKey>(IPrincipal)
  nameWithType: EntityExtensions.CheckICreationAudited<SqlServerDapperSqlExecutor<TEntity, TKey>, TKey, TUserKey>(IPrincipal)
  fullName: OSharp.Entity.EntityExtensions.CheckICreationAudited<Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor<TEntity, TKey>, TKey, TUserKey>(System.Security.Principal.IPrincipal)
  nameWithType.vb: EntityExtensions.CheckICreationAudited(Of SqlServerDapperSqlExecutor(Of TEntity, TKey), TKey, TUserKey)(IPrincipal)
  fullName.vb: OSharp.Entity.EntityExtensions.CheckICreationAudited(Of Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor(Of TEntity, TKey), TKey, TUserKey)(System.Security.Principal.IPrincipal)
  name.vb: CheckICreationAudited(Of SqlServerDapperSqlExecutor(Of TEntity, TKey), TKey, TUserKey)(IPrincipal)
  spec.csharp:
  - uid: OSharp.Entity.EntityExtensions.CheckICreationAudited``3(System.Security.Principal.IPrincipal)
    name: CheckICreationAudited<SqlServerDapperSqlExecutor<TEntity, TKey>, TKey, TUserKey>
    nameWithType: EntityExtensions.CheckICreationAudited<SqlServerDapperSqlExecutor<TEntity, TKey>, TKey, TUserKey>
    fullName: OSharp.Entity.EntityExtensions.CheckICreationAudited<Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor<TEntity, TKey>, TKey, TUserKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Entity.EntityExtensions.CheckICreationAudited``3(System.Security.Principal.IPrincipal)
    name: CheckICreationAudited(Of SqlServerDapperSqlExecutor(Of TEntity, TKey), TKey, TUserKey)
    nameWithType: EntityExtensions.CheckICreationAudited(Of SqlServerDapperSqlExecutor(Of TEntity, TKey), TKey, TUserKey)
    fullName: OSharp.Entity.EntityExtensions.CheckICreationAudited(Of Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor(Of TEntity, TKey), TKey, TUserKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2.OSharp.Entity.EntityExtensions.CheckIUpdateAudited``3(System.Security.Principal.IPrincipal)
  commentId: M:OSharp.Entity.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
  parent: OSharp.Entity.EntityExtensions
  definition: OSharp.Entity.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
  name: CheckIUpdateAudited<SqlServerDapperSqlExecutor<TEntity, TKey>, TKey, TUserKey>(IPrincipal)
  nameWithType: EntityExtensions.CheckIUpdateAudited<SqlServerDapperSqlExecutor<TEntity, TKey>, TKey, TUserKey>(IPrincipal)
  fullName: OSharp.Entity.EntityExtensions.CheckIUpdateAudited<Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor<TEntity, TKey>, TKey, TUserKey>(System.Security.Principal.IPrincipal)
  nameWithType.vb: EntityExtensions.CheckIUpdateAudited(Of SqlServerDapperSqlExecutor(Of TEntity, TKey), TKey, TUserKey)(IPrincipal)
  fullName.vb: OSharp.Entity.EntityExtensions.CheckIUpdateAudited(Of Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor(Of TEntity, TKey), TKey, TUserKey)(System.Security.Principal.IPrincipal)
  name.vb: CheckIUpdateAudited(Of SqlServerDapperSqlExecutor(Of TEntity, TKey), TKey, TUserKey)(IPrincipal)
  spec.csharp:
  - uid: OSharp.Entity.EntityExtensions.CheckIUpdateAudited``3(System.Security.Principal.IPrincipal)
    name: CheckIUpdateAudited<SqlServerDapperSqlExecutor<TEntity, TKey>, TKey, TUserKey>
    nameWithType: EntityExtensions.CheckIUpdateAudited<SqlServerDapperSqlExecutor<TEntity, TKey>, TKey, TUserKey>
    fullName: OSharp.Entity.EntityExtensions.CheckIUpdateAudited<Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor<TEntity, TKey>, TKey, TUserKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Entity.EntityExtensions.CheckIUpdateAudited``3(System.Security.Principal.IPrincipal)
    name: CheckIUpdateAudited(Of SqlServerDapperSqlExecutor(Of TEntity, TKey), TKey, TUserKey)
    nameWithType: EntityExtensions.CheckIUpdateAudited(Of SqlServerDapperSqlExecutor(Of TEntity, TKey), TKey, TUserKey)
    fullName: OSharp.Entity.EntityExtensions.CheckIUpdateAudited(Of Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor(Of TEntity, TKey), TKey, TUserKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.OSharp.Extensions.ObjectExtensions.CastTo(System.Type)
  commentId: M:OSharp.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
  parent: OSharp.Extensions.ObjectExtensions
  definition: OSharp.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
  name: CastTo(Type)
  nameWithType: ObjectExtensions.CastTo(Type)
  fullName: OSharp.Extensions.ObjectExtensions.CastTo(System.Type)
  spec.csharp:
  - uid: OSharp.Extensions.ObjectExtensions.CastTo(System.Type)
    name: CastTo
    nameWithType: ObjectExtensions.CastTo
    fullName: OSharp.Extensions.ObjectExtensions.CastTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ObjectExtensions.CastTo(System.Type)
    name: CastTo
    nameWithType: ObjectExtensions.CastTo
    fullName: OSharp.Extensions.ObjectExtensions.CastTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.OSharp.Extensions.ObjectExtensions.CastTo``1
  commentId: M:OSharp.Extensions.ObjectExtensions.CastTo``1(System.Object)
  parent: OSharp.Extensions.ObjectExtensions
  definition: OSharp.Extensions.ObjectExtensions.CastTo``1(System.Object)
  name: CastTo<T>()
  nameWithType: ObjectExtensions.CastTo<T>()
  fullName: OSharp.Extensions.ObjectExtensions.CastTo<T>()
  nameWithType.vb: ObjectExtensions.CastTo(Of T)()
  fullName.vb: OSharp.Extensions.ObjectExtensions.CastTo(Of T)()
  name.vb: CastTo(Of T)()
  spec.csharp:
  - uid: OSharp.Extensions.ObjectExtensions.CastTo``1
    name: CastTo<T>
    nameWithType: ObjectExtensions.CastTo<T>
    fullName: OSharp.Extensions.ObjectExtensions.CastTo<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ObjectExtensions.CastTo``1
    name: CastTo(Of T)
    nameWithType: ObjectExtensions.CastTo(Of T)
    fullName: OSharp.Extensions.ObjectExtensions.CastTo(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.OSharp.Extensions.ObjectExtensions.CastTo``1({T})
  commentId: M:OSharp.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
  parent: OSharp.Extensions.ObjectExtensions
  definition: OSharp.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
  name: CastTo<T>(T)
  nameWithType: ObjectExtensions.CastTo<T>(T)
  fullName: OSharp.Extensions.ObjectExtensions.CastTo<T>(T)
  nameWithType.vb: ObjectExtensions.CastTo(Of T)(T)
  fullName.vb: OSharp.Extensions.ObjectExtensions.CastTo(Of T)(T)
  name.vb: CastTo(Of T)(T)
  spec.csharp:
  - uid: OSharp.Extensions.ObjectExtensions.CastTo``1(``0)
    name: CastTo<T>
    nameWithType: ObjectExtensions.CastTo<T>
    fullName: OSharp.Extensions.ObjectExtensions.CastTo<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ObjectExtensions.CastTo``1(``0)
    name: CastTo(Of T)
    nameWithType: ObjectExtensions.CastTo(Of T)
    fullName: OSharp.Extensions.ObjectExtensions.CastTo(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2.OSharp.Extensions.ObjectExtensions.IsIn``1(Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor{{TEntity},{TKey}}[])
  commentId: M:OSharp.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
  parent: OSharp.Extensions.ObjectExtensions
  definition: OSharp.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
  name: IsIn<SqlServerDapperSqlExecutor<TEntity, TKey>>(SqlServerDapperSqlExecutor<TEntity, TKey>[])
  nameWithType: ObjectExtensions.IsIn<SqlServerDapperSqlExecutor<TEntity, TKey>>(SqlServerDapperSqlExecutor<TEntity, TKey>[])
  fullName: OSharp.Extensions.ObjectExtensions.IsIn<Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor<TEntity, TKey>>(Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor<TEntity, TKey>[])
  nameWithType.vb: ObjectExtensions.IsIn(Of SqlServerDapperSqlExecutor(Of TEntity, TKey))(SqlServerDapperSqlExecutor(Of TEntity, TKey)())
  fullName.vb: OSharp.Extensions.ObjectExtensions.IsIn(Of Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor(Of TEntity, TKey))(Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor(Of TEntity, TKey)())
  name.vb: IsIn(Of SqlServerDapperSqlExecutor(Of TEntity, TKey))(SqlServerDapperSqlExecutor(Of TEntity, TKey)())
  spec.csharp:
  - uid: OSharp.Extensions.ObjectExtensions.IsIn``1(``0[])
    name: IsIn<SqlServerDapperSqlExecutor<TEntity, TKey>>
    nameWithType: ObjectExtensions.IsIn<SqlServerDapperSqlExecutor<TEntity, TKey>>
    fullName: OSharp.Extensions.ObjectExtensions.IsIn<Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor<TEntity, TKey>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2
    name: SqlServerDapperSqlExecutor
    nameWithType: SqlServerDapperSqlExecutor
    fullName: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ObjectExtensions.IsIn``1(``0[])
    name: IsIn(Of SqlServerDapperSqlExecutor(Of TEntity, TKey))
    nameWithType: ObjectExtensions.IsIn(Of SqlServerDapperSqlExecutor(Of TEntity, TKey))
    fullName: OSharp.Extensions.ObjectExtensions.IsIn(Of Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor(Of TEntity, TKey))
  - name: (
    nameWithType: (
    fullName: (
  - uid: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2
    name: SqlServerDapperSqlExecutor
    nameWithType: SqlServerDapperSqlExecutor
    fullName: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.OSharp.Extensions.ObjectExtensions.ToDynamic
  commentId: M:OSharp.Extensions.ObjectExtensions.ToDynamic(System.Object)
  parent: OSharp.Extensions.ObjectExtensions
  definition: OSharp.Extensions.ObjectExtensions.ToDynamic(System.Object)
  name: ToDynamic()
  nameWithType: ObjectExtensions.ToDynamic()
  fullName: OSharp.Extensions.ObjectExtensions.ToDynamic()
  spec.csharp:
  - uid: OSharp.Extensions.ObjectExtensions.ToDynamic
    name: ToDynamic
    nameWithType: ObjectExtensions.ToDynamic
    fullName: OSharp.Extensions.ObjectExtensions.ToDynamic
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ObjectExtensions.ToDynamic
    name: ToDynamic
    nameWithType: ObjectExtensions.ToDynamic
    fullName: OSharp.Extensions.ObjectExtensions.ToDynamic
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2.OSharp.Extensions.ObjectExtensions.DeepClone``1
  commentId: M:OSharp.Extensions.ObjectExtensions.DeepClone``1(``0)
  parent: OSharp.Extensions.ObjectExtensions
  definition: OSharp.Extensions.ObjectExtensions.DeepClone``1(``0)
  name: DeepClone<SqlServerDapperSqlExecutor<TEntity, TKey>>()
  nameWithType: ObjectExtensions.DeepClone<SqlServerDapperSqlExecutor<TEntity, TKey>>()
  fullName: OSharp.Extensions.ObjectExtensions.DeepClone<Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor<TEntity, TKey>>()
  nameWithType.vb: ObjectExtensions.DeepClone(Of SqlServerDapperSqlExecutor(Of TEntity, TKey))()
  fullName.vb: OSharp.Extensions.ObjectExtensions.DeepClone(Of Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor(Of TEntity, TKey))()
  name.vb: DeepClone(Of SqlServerDapperSqlExecutor(Of TEntity, TKey))()
  spec.csharp:
  - uid: OSharp.Extensions.ObjectExtensions.DeepClone``1
    name: DeepClone<SqlServerDapperSqlExecutor<TEntity, TKey>>
    nameWithType: ObjectExtensions.DeepClone<SqlServerDapperSqlExecutor<TEntity, TKey>>
    fullName: OSharp.Extensions.ObjectExtensions.DeepClone<Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor<TEntity, TKey>>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ObjectExtensions.DeepClone``1
    name: DeepClone(Of SqlServerDapperSqlExecutor(Of TEntity, TKey))
    nameWithType: ObjectExtensions.DeepClone(Of SqlServerDapperSqlExecutor(Of TEntity, TKey))
    fullName: OSharp.Extensions.ObjectExtensions.DeepClone(Of Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor(Of TEntity, TKey))
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2.OSharp.Extensions.ParameterCheckExtensions.Required``1(System.Func{Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor{{TEntity},{TKey}},System.Boolean},System.String)
  commentId: M:OSharp.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
  parent: OSharp.Extensions.ParameterCheckExtensions
  definition: OSharp.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
  name: Required<SqlServerDapperSqlExecutor<TEntity, TKey>>(Func<SqlServerDapperSqlExecutor<TEntity, TKey>, Boolean>, String)
  nameWithType: ParameterCheckExtensions.Required<SqlServerDapperSqlExecutor<TEntity, TKey>>(Func<SqlServerDapperSqlExecutor<TEntity, TKey>, Boolean>, String)
  fullName: OSharp.Extensions.ParameterCheckExtensions.Required<Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor<TEntity, TKey>>(System.Func<Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor<TEntity, TKey>, System.Boolean>, System.String)
  nameWithType.vb: ParameterCheckExtensions.Required(Of SqlServerDapperSqlExecutor(Of TEntity, TKey))(Func(Of SqlServerDapperSqlExecutor(Of TEntity, TKey), Boolean), String)
  fullName.vb: OSharp.Extensions.ParameterCheckExtensions.Required(Of Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor(Of TEntity, TKey))(System.Func(Of Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor(Of TEntity, TKey), System.Boolean), System.String)
  name.vb: Required(Of SqlServerDapperSqlExecutor(Of TEntity, TKey))(Func(Of SqlServerDapperSqlExecutor(Of TEntity, TKey), Boolean), String)
  spec.csharp:
  - uid: OSharp.Extensions.ParameterCheckExtensions.Required``1(System.Func{``0,System.Boolean},System.String)
    name: Required<SqlServerDapperSqlExecutor<TEntity, TKey>>
    nameWithType: ParameterCheckExtensions.Required<SqlServerDapperSqlExecutor<TEntity, TKey>>
    fullName: OSharp.Extensions.ParameterCheckExtensions.Required<Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor<TEntity, TKey>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2
    name: SqlServerDapperSqlExecutor
    nameWithType: SqlServerDapperSqlExecutor
    fullName: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ParameterCheckExtensions.Required``1(System.Func{``0,System.Boolean},System.String)
    name: Required(Of SqlServerDapperSqlExecutor(Of TEntity, TKey))
    nameWithType: ParameterCheckExtensions.Required(Of SqlServerDapperSqlExecutor(Of TEntity, TKey))
    fullName: OSharp.Extensions.ParameterCheckExtensions.Required(Of Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor(Of TEntity, TKey))
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2
    name: SqlServerDapperSqlExecutor
    nameWithType: SqlServerDapperSqlExecutor
    fullName: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2.OSharp.Extensions.ParameterCheckExtensions.Required``2(System.Func{Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor{{TEntity},{TKey}},System.Boolean},System.String)
  commentId: M:OSharp.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
  parent: OSharp.Extensions.ParameterCheckExtensions
  definition: OSharp.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
  name: Required<SqlServerDapperSqlExecutor<TEntity, TKey>, TException>(Func<SqlServerDapperSqlExecutor<TEntity, TKey>, Boolean>, String)
  nameWithType: ParameterCheckExtensions.Required<SqlServerDapperSqlExecutor<TEntity, TKey>, TException>(Func<SqlServerDapperSqlExecutor<TEntity, TKey>, Boolean>, String)
  fullName: OSharp.Extensions.ParameterCheckExtensions.Required<Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor<TEntity, TKey>, TException>(System.Func<Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor<TEntity, TKey>, System.Boolean>, System.String)
  nameWithType.vb: ParameterCheckExtensions.Required(Of SqlServerDapperSqlExecutor(Of TEntity, TKey), TException)(Func(Of SqlServerDapperSqlExecutor(Of TEntity, TKey), Boolean), String)
  fullName.vb: OSharp.Extensions.ParameterCheckExtensions.Required(Of Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor(Of TEntity, TKey), TException)(System.Func(Of Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor(Of TEntity, TKey), System.Boolean), System.String)
  name.vb: Required(Of SqlServerDapperSqlExecutor(Of TEntity, TKey), TException)(Func(Of SqlServerDapperSqlExecutor(Of TEntity, TKey), Boolean), String)
  spec.csharp:
  - uid: OSharp.Extensions.ParameterCheckExtensions.Required``2(System.Func{``0,System.Boolean},System.String)
    name: Required<SqlServerDapperSqlExecutor<TEntity, TKey>, TException>
    nameWithType: ParameterCheckExtensions.Required<SqlServerDapperSqlExecutor<TEntity, TKey>, TException>
    fullName: OSharp.Extensions.ParameterCheckExtensions.Required<Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor<TEntity, TKey>, TException>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2
    name: SqlServerDapperSqlExecutor
    nameWithType: SqlServerDapperSqlExecutor
    fullName: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ParameterCheckExtensions.Required``2(System.Func{``0,System.Boolean},System.String)
    name: Required(Of SqlServerDapperSqlExecutor(Of TEntity, TKey), TException)
    nameWithType: ParameterCheckExtensions.Required(Of SqlServerDapperSqlExecutor(Of TEntity, TKey), TException)
    fullName: OSharp.Extensions.ParameterCheckExtensions.Required(Of Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor(Of TEntity, TKey), TException)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2
    name: SqlServerDapperSqlExecutor
    nameWithType: SqlServerDapperSqlExecutor
    fullName: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2.OSharp.Extensions.ParameterCheckExtensions.CheckNotNull``1(System.String)
  commentId: M:OSharp.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
  parent: OSharp.Extensions.ParameterCheckExtensions
  definition: OSharp.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
  name: CheckNotNull<SqlServerDapperSqlExecutor<TEntity, TKey>>(String)
  nameWithType: ParameterCheckExtensions.CheckNotNull<SqlServerDapperSqlExecutor<TEntity, TKey>>(String)
  fullName: OSharp.Extensions.ParameterCheckExtensions.CheckNotNull<Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor<TEntity, TKey>>(System.String)
  nameWithType.vb: ParameterCheckExtensions.CheckNotNull(Of SqlServerDapperSqlExecutor(Of TEntity, TKey))(String)
  fullName.vb: OSharp.Extensions.ParameterCheckExtensions.CheckNotNull(Of Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor(Of TEntity, TKey))(System.String)
  name.vb: CheckNotNull(Of SqlServerDapperSqlExecutor(Of TEntity, TKey))(String)
  spec.csharp:
  - uid: OSharp.Extensions.ParameterCheckExtensions.CheckNotNull``1(System.String)
    name: CheckNotNull<SqlServerDapperSqlExecutor<TEntity, TKey>>
    nameWithType: ParameterCheckExtensions.CheckNotNull<SqlServerDapperSqlExecutor<TEntity, TKey>>
    fullName: OSharp.Extensions.ParameterCheckExtensions.CheckNotNull<Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor<TEntity, TKey>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ParameterCheckExtensions.CheckNotNull``1(System.String)
    name: CheckNotNull(Of SqlServerDapperSqlExecutor(Of TEntity, TKey))
    nameWithType: ParameterCheckExtensions.CheckNotNull(Of SqlServerDapperSqlExecutor(Of TEntity, TKey))
    fullName: OSharp.Extensions.ParameterCheckExtensions.CheckNotNull(Of Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor(Of TEntity, TKey))
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2.OSharp.Extensions.TryCatchExtensions.TryCatch``1(System.Action{Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor{{TEntity},{TKey}}},System.Action{System.Exception},System.Action{Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor{{TEntity},{TKey}}})
  commentId: M:OSharp.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
  parent: OSharp.Extensions.TryCatchExtensions
  definition: OSharp.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
  name: TryCatch<SqlServerDapperSqlExecutor<TEntity, TKey>>(Action<SqlServerDapperSqlExecutor<TEntity, TKey>>, Action<Exception>, Action<SqlServerDapperSqlExecutor<TEntity, TKey>>)
  nameWithType: TryCatchExtensions.TryCatch<SqlServerDapperSqlExecutor<TEntity, TKey>>(Action<SqlServerDapperSqlExecutor<TEntity, TKey>>, Action<Exception>, Action<SqlServerDapperSqlExecutor<TEntity, TKey>>)
  fullName: OSharp.Extensions.TryCatchExtensions.TryCatch<Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor<TEntity, TKey>>(System.Action<Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor<TEntity, TKey>>, System.Action<System.Exception>, System.Action<Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor<TEntity, TKey>>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of SqlServerDapperSqlExecutor(Of TEntity, TKey))(Action(Of SqlServerDapperSqlExecutor(Of TEntity, TKey)), Action(Of Exception), Action(Of SqlServerDapperSqlExecutor(Of TEntity, TKey)))
  fullName.vb: OSharp.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor(Of TEntity, TKey))(System.Action(Of Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor(Of TEntity, TKey)), System.Action(Of System.Exception), System.Action(Of Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor(Of TEntity, TKey)))
  name.vb: TryCatch(Of SqlServerDapperSqlExecutor(Of TEntity, TKey))(Action(Of SqlServerDapperSqlExecutor(Of TEntity, TKey)), Action(Of Exception), Action(Of SqlServerDapperSqlExecutor(Of TEntity, TKey)))
  spec.csharp:
  - uid: OSharp.Extensions.TryCatchExtensions.TryCatch``1(System.Action{``0},System.Action{System.Exception},System.Action{``0})
    name: TryCatch<SqlServerDapperSqlExecutor<TEntity, TKey>>
    nameWithType: TryCatchExtensions.TryCatch<SqlServerDapperSqlExecutor<TEntity, TKey>>
    fullName: OSharp.Extensions.TryCatchExtensions.TryCatch<Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor<TEntity, TKey>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2
    name: SqlServerDapperSqlExecutor
    nameWithType: SqlServerDapperSqlExecutor
    fullName: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2
    name: SqlServerDapperSqlExecutor
    nameWithType: SqlServerDapperSqlExecutor
    fullName: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.TryCatchExtensions.TryCatch``1(System.Action{``0},System.Action{System.Exception},System.Action{``0})
    name: TryCatch(Of SqlServerDapperSqlExecutor(Of TEntity, TKey))
    nameWithType: TryCatchExtensions.TryCatch(Of SqlServerDapperSqlExecutor(Of TEntity, TKey))
    fullName: OSharp.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor(Of TEntity, TKey))
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2
    name: SqlServerDapperSqlExecutor
    nameWithType: SqlServerDapperSqlExecutor
    fullName: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2
    name: SqlServerDapperSqlExecutor
    nameWithType: SqlServerDapperSqlExecutor
    fullName: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2.OSharp.Extensions.TryCatchExtensions.TryCatch``1(System.Action{Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor{{TEntity},{TKey}}},System.Action{System.Exception})
  commentId: M:OSharp.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
  parent: OSharp.Extensions.TryCatchExtensions
  definition: OSharp.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
  name: TryCatch<SqlServerDapperSqlExecutor<TEntity, TKey>>(Action<SqlServerDapperSqlExecutor<TEntity, TKey>>, Action<Exception>)
  nameWithType: TryCatchExtensions.TryCatch<SqlServerDapperSqlExecutor<TEntity, TKey>>(Action<SqlServerDapperSqlExecutor<TEntity, TKey>>, Action<Exception>)
  fullName: OSharp.Extensions.TryCatchExtensions.TryCatch<Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor<TEntity, TKey>>(System.Action<Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor<TEntity, TKey>>, System.Action<System.Exception>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of SqlServerDapperSqlExecutor(Of TEntity, TKey))(Action(Of SqlServerDapperSqlExecutor(Of TEntity, TKey)), Action(Of Exception))
  fullName.vb: OSharp.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor(Of TEntity, TKey))(System.Action(Of Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor(Of TEntity, TKey)), System.Action(Of System.Exception))
  name.vb: TryCatch(Of SqlServerDapperSqlExecutor(Of TEntity, TKey))(Action(Of SqlServerDapperSqlExecutor(Of TEntity, TKey)), Action(Of Exception))
  spec.csharp:
  - uid: OSharp.Extensions.TryCatchExtensions.TryCatch``1(System.Action{``0},System.Action{System.Exception})
    name: TryCatch<SqlServerDapperSqlExecutor<TEntity, TKey>>
    nameWithType: TryCatchExtensions.TryCatch<SqlServerDapperSqlExecutor<TEntity, TKey>>
    fullName: OSharp.Extensions.TryCatchExtensions.TryCatch<Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor<TEntity, TKey>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2
    name: SqlServerDapperSqlExecutor
    nameWithType: SqlServerDapperSqlExecutor
    fullName: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.TryCatchExtensions.TryCatch``1(System.Action{``0},System.Action{System.Exception})
    name: TryCatch(Of SqlServerDapperSqlExecutor(Of TEntity, TKey))
    nameWithType: TryCatchExtensions.TryCatch(Of SqlServerDapperSqlExecutor(Of TEntity, TKey))
    fullName: OSharp.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor(Of TEntity, TKey))
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2
    name: SqlServerDapperSqlExecutor
    nameWithType: SqlServerDapperSqlExecutor
    fullName: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2.OSharp.Extensions.TryCatchExtensions.TryCatch``2(System.Func{Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor{{TEntity},{TKey}},{TResult}},System.Action{System.Exception},System.Action{Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor{{TEntity},{TKey}}})
  commentId: M:OSharp.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
  parent: OSharp.Extensions.TryCatchExtensions
  definition: OSharp.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
  name: TryCatch<SqlServerDapperSqlExecutor<TEntity, TKey>, TResult>(Func<SqlServerDapperSqlExecutor<TEntity, TKey>, TResult>, Action<Exception>, Action<SqlServerDapperSqlExecutor<TEntity, TKey>>)
  nameWithType: TryCatchExtensions.TryCatch<SqlServerDapperSqlExecutor<TEntity, TKey>, TResult>(Func<SqlServerDapperSqlExecutor<TEntity, TKey>, TResult>, Action<Exception>, Action<SqlServerDapperSqlExecutor<TEntity, TKey>>)
  fullName: OSharp.Extensions.TryCatchExtensions.TryCatch<Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor<TEntity, TKey>, TResult>(System.Func<Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor<TEntity, TKey>, TResult>, System.Action<System.Exception>, System.Action<Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor<TEntity, TKey>>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of SqlServerDapperSqlExecutor(Of TEntity, TKey), TResult)(Func(Of SqlServerDapperSqlExecutor(Of TEntity, TKey), TResult), Action(Of Exception), Action(Of SqlServerDapperSqlExecutor(Of TEntity, TKey)))
  fullName.vb: OSharp.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor(Of TEntity, TKey), TResult)(System.Func(Of Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor(Of TEntity, TKey), TResult), System.Action(Of System.Exception), System.Action(Of Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor(Of TEntity, TKey)))
  name.vb: TryCatch(Of SqlServerDapperSqlExecutor(Of TEntity, TKey), TResult)(Func(Of SqlServerDapperSqlExecutor(Of TEntity, TKey), TResult), Action(Of Exception), Action(Of SqlServerDapperSqlExecutor(Of TEntity, TKey)))
  spec.csharp:
  - uid: OSharp.Extensions.TryCatchExtensions.TryCatch``2(System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
    name: TryCatch<SqlServerDapperSqlExecutor<TEntity, TKey>, TResult>
    nameWithType: TryCatchExtensions.TryCatch<SqlServerDapperSqlExecutor<TEntity, TKey>, TResult>
    fullName: OSharp.Extensions.TryCatchExtensions.TryCatch<Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor<TEntity, TKey>, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2
    name: SqlServerDapperSqlExecutor
    nameWithType: SqlServerDapperSqlExecutor
    fullName: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2
    name: SqlServerDapperSqlExecutor
    nameWithType: SqlServerDapperSqlExecutor
    fullName: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.TryCatchExtensions.TryCatch``2(System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
    name: TryCatch(Of SqlServerDapperSqlExecutor(Of TEntity, TKey), TResult)
    nameWithType: TryCatchExtensions.TryCatch(Of SqlServerDapperSqlExecutor(Of TEntity, TKey), TResult)
    fullName: OSharp.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor(Of TEntity, TKey), TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2
    name: SqlServerDapperSqlExecutor
    nameWithType: SqlServerDapperSqlExecutor
    fullName: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2
    name: SqlServerDapperSqlExecutor
    nameWithType: SqlServerDapperSqlExecutor
    fullName: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2.OSharp.Extensions.TryCatchExtensions.TryCatch``2(System.Func{Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor{{TEntity},{TKey}},{TResult}},System.Action{System.Exception})
  commentId: M:OSharp.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
  parent: OSharp.Extensions.TryCatchExtensions
  definition: OSharp.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
  name: TryCatch<SqlServerDapperSqlExecutor<TEntity, TKey>, TResult>(Func<SqlServerDapperSqlExecutor<TEntity, TKey>, TResult>, Action<Exception>)
  nameWithType: TryCatchExtensions.TryCatch<SqlServerDapperSqlExecutor<TEntity, TKey>, TResult>(Func<SqlServerDapperSqlExecutor<TEntity, TKey>, TResult>, Action<Exception>)
  fullName: OSharp.Extensions.TryCatchExtensions.TryCatch<Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor<TEntity, TKey>, TResult>(System.Func<Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor<TEntity, TKey>, TResult>, System.Action<System.Exception>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of SqlServerDapperSqlExecutor(Of TEntity, TKey), TResult)(Func(Of SqlServerDapperSqlExecutor(Of TEntity, TKey), TResult), Action(Of Exception))
  fullName.vb: OSharp.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor(Of TEntity, TKey), TResult)(System.Func(Of Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor(Of TEntity, TKey), TResult), System.Action(Of System.Exception))
  name.vb: TryCatch(Of SqlServerDapperSqlExecutor(Of TEntity, TKey), TResult)(Func(Of SqlServerDapperSqlExecutor(Of TEntity, TKey), TResult), Action(Of Exception))
  spec.csharp:
  - uid: OSharp.Extensions.TryCatchExtensions.TryCatch``2(System.Func{``0,``1},System.Action{System.Exception})
    name: TryCatch<SqlServerDapperSqlExecutor<TEntity, TKey>, TResult>
    nameWithType: TryCatchExtensions.TryCatch<SqlServerDapperSqlExecutor<TEntity, TKey>, TResult>
    fullName: OSharp.Extensions.TryCatchExtensions.TryCatch<Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor<TEntity, TKey>, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2
    name: SqlServerDapperSqlExecutor
    nameWithType: SqlServerDapperSqlExecutor
    fullName: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.TryCatchExtensions.TryCatch``2(System.Func{``0,``1},System.Action{System.Exception})
    name: TryCatch(Of SqlServerDapperSqlExecutor(Of TEntity, TKey), TResult)
    nameWithType: TryCatchExtensions.TryCatch(Of SqlServerDapperSqlExecutor(Of TEntity, TKey), TResult)
    fullName: OSharp.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor(Of TEntity, TKey), TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2
    name: SqlServerDapperSqlExecutor
    nameWithType: SqlServerDapperSqlExecutor
    fullName: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2.OSharp.Extensions.TryCatchExtensions.TryFinally``1(System.Action{Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor{{TEntity},{TKey}}},System.Action{Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor{{TEntity},{TKey}}})
  commentId: M:OSharp.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
  parent: OSharp.Extensions.TryCatchExtensions
  definition: OSharp.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
  name: TryFinally<SqlServerDapperSqlExecutor<TEntity, TKey>>(Action<SqlServerDapperSqlExecutor<TEntity, TKey>>, Action<SqlServerDapperSqlExecutor<TEntity, TKey>>)
  nameWithType: TryCatchExtensions.TryFinally<SqlServerDapperSqlExecutor<TEntity, TKey>>(Action<SqlServerDapperSqlExecutor<TEntity, TKey>>, Action<SqlServerDapperSqlExecutor<TEntity, TKey>>)
  fullName: OSharp.Extensions.TryCatchExtensions.TryFinally<Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor<TEntity, TKey>>(System.Action<Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor<TEntity, TKey>>, System.Action<Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor<TEntity, TKey>>)
  nameWithType.vb: TryCatchExtensions.TryFinally(Of SqlServerDapperSqlExecutor(Of TEntity, TKey))(Action(Of SqlServerDapperSqlExecutor(Of TEntity, TKey)), Action(Of SqlServerDapperSqlExecutor(Of TEntity, TKey)))
  fullName.vb: OSharp.Extensions.TryCatchExtensions.TryFinally(Of Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor(Of TEntity, TKey))(System.Action(Of Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor(Of TEntity, TKey)), System.Action(Of Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor(Of TEntity, TKey)))
  name.vb: TryFinally(Of SqlServerDapperSqlExecutor(Of TEntity, TKey))(Action(Of SqlServerDapperSqlExecutor(Of TEntity, TKey)), Action(Of SqlServerDapperSqlExecutor(Of TEntity, TKey)))
  spec.csharp:
  - uid: OSharp.Extensions.TryCatchExtensions.TryFinally``1(System.Action{``0},System.Action{``0})
    name: TryFinally<SqlServerDapperSqlExecutor<TEntity, TKey>>
    nameWithType: TryCatchExtensions.TryFinally<SqlServerDapperSqlExecutor<TEntity, TKey>>
    fullName: OSharp.Extensions.TryCatchExtensions.TryFinally<Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor<TEntity, TKey>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2
    name: SqlServerDapperSqlExecutor
    nameWithType: SqlServerDapperSqlExecutor
    fullName: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2
    name: SqlServerDapperSqlExecutor
    nameWithType: SqlServerDapperSqlExecutor
    fullName: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.TryCatchExtensions.TryFinally``1(System.Action{``0},System.Action{``0})
    name: TryFinally(Of SqlServerDapperSqlExecutor(Of TEntity, TKey))
    nameWithType: TryCatchExtensions.TryFinally(Of SqlServerDapperSqlExecutor(Of TEntity, TKey))
    fullName: OSharp.Extensions.TryCatchExtensions.TryFinally(Of Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor(Of TEntity, TKey))
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2
    name: SqlServerDapperSqlExecutor
    nameWithType: SqlServerDapperSqlExecutor
    fullName: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2
    name: SqlServerDapperSqlExecutor
    nameWithType: SqlServerDapperSqlExecutor
    fullName: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.OSharp.Json.JsonExtensions.ToJsonString(System.Boolean,System.Boolean)
  commentId: M:OSharp.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
  parent: OSharp.Json.JsonExtensions
  definition: OSharp.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
  name: ToJsonString(Boolean, Boolean)
  nameWithType: JsonExtensions.ToJsonString(Boolean, Boolean)
  fullName: OSharp.Json.JsonExtensions.ToJsonString(System.Boolean, System.Boolean)
  spec.csharp:
  - uid: OSharp.Json.JsonExtensions.ToJsonString(System.Boolean,System.Boolean)
    name: ToJsonString
    nameWithType: JsonExtensions.ToJsonString
    fullName: OSharp.Json.JsonExtensions.ToJsonString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Json.JsonExtensions.ToJsonString(System.Boolean,System.Boolean)
    name: ToJsonString
    nameWithType: JsonExtensions.ToJsonString
    fullName: OSharp.Json.JsonExtensions.ToJsonString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.OSharp.Mapping.MapperExtensions.MapTo``1
  commentId: M:OSharp.Mapping.MapperExtensions.MapTo``1(System.Object)
  parent: OSharp.Mapping.MapperExtensions
  definition: OSharp.Mapping.MapperExtensions.MapTo``1(System.Object)
  name: MapTo<TTarget>()
  nameWithType: MapperExtensions.MapTo<TTarget>()
  fullName: OSharp.Mapping.MapperExtensions.MapTo<TTarget>()
  nameWithType.vb: MapperExtensions.MapTo(Of TTarget)()
  fullName.vb: OSharp.Mapping.MapperExtensions.MapTo(Of TTarget)()
  name.vb: MapTo(Of TTarget)()
  spec.csharp:
  - uid: OSharp.Mapping.MapperExtensions.MapTo``1
    name: MapTo<TTarget>
    nameWithType: MapperExtensions.MapTo<TTarget>
    fullName: OSharp.Mapping.MapperExtensions.MapTo<TTarget>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Mapping.MapperExtensions.MapTo``1
    name: MapTo(Of TTarget)
    nameWithType: MapperExtensions.MapTo(Of TTarget)
    fullName: OSharp.Mapping.MapperExtensions.MapTo(Of TTarget)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2.OSharp.Mapping.MapperExtensions.MapTo``2({TTarget})
  commentId: M:OSharp.Mapping.MapperExtensions.MapTo``2(``0,``1)
  parent: OSharp.Mapping.MapperExtensions
  definition: OSharp.Mapping.MapperExtensions.MapTo``2(``0,``1)
  name: MapTo<SqlServerDapperSqlExecutor<TEntity, TKey>, TTarget>(TTarget)
  nameWithType: MapperExtensions.MapTo<SqlServerDapperSqlExecutor<TEntity, TKey>, TTarget>(TTarget)
  fullName: OSharp.Mapping.MapperExtensions.MapTo<Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor<TEntity, TKey>, TTarget>(TTarget)
  nameWithType.vb: MapperExtensions.MapTo(Of SqlServerDapperSqlExecutor(Of TEntity, TKey), TTarget)(TTarget)
  fullName.vb: OSharp.Mapping.MapperExtensions.MapTo(Of Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor(Of TEntity, TKey), TTarget)(TTarget)
  name.vb: MapTo(Of SqlServerDapperSqlExecutor(Of TEntity, TKey), TTarget)(TTarget)
  spec.csharp:
  - uid: OSharp.Mapping.MapperExtensions.MapTo``2(``1)
    name: MapTo<SqlServerDapperSqlExecutor<TEntity, TKey>, TTarget>
    nameWithType: MapperExtensions.MapTo<SqlServerDapperSqlExecutor<TEntity, TKey>, TTarget>
    fullName: OSharp.Mapping.MapperExtensions.MapTo<Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor<TEntity, TKey>, TTarget>
  - name: (
    nameWithType: (
    fullName: (
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Mapping.MapperExtensions.MapTo``2(``1)
    name: MapTo(Of SqlServerDapperSqlExecutor(Of TEntity, TKey), TTarget)
    nameWithType: MapperExtensions.MapTo(Of SqlServerDapperSqlExecutor(Of TEntity, TKey), TTarget)
    fullName: OSharp.Mapping.MapperExtensions.MapTo(Of Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor(Of TEntity, TKey), TTarget)
  - name: (
    nameWithType: (
    fullName: (
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.OSharp.Reflection.LockExtensions.Locking(System.Action)
  commentId: M:OSharp.Reflection.LockExtensions.Locking(System.Object,System.Action)
  parent: OSharp.Reflection.LockExtensions
  definition: OSharp.Reflection.LockExtensions.Locking(System.Object,System.Action)
  name: Locking(Action)
  nameWithType: LockExtensions.Locking(Action)
  fullName: OSharp.Reflection.LockExtensions.Locking(System.Action)
  spec.csharp:
  - uid: OSharp.Reflection.LockExtensions.Locking(System.Action)
    name: Locking
    nameWithType: LockExtensions.Locking
    fullName: OSharp.Reflection.LockExtensions.Locking
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Reflection.LockExtensions.Locking(System.Action)
    name: Locking
    nameWithType: LockExtensions.Locking
    fullName: OSharp.Reflection.LockExtensions.Locking
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2.OSharp.Reflection.LockExtensions.Locking``1(System.Action{Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor{{TEntity},{TKey}}})
  commentId: M:OSharp.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
  parent: OSharp.Reflection.LockExtensions
  definition: OSharp.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
  name: Locking<SqlServerDapperSqlExecutor<TEntity, TKey>>(Action<SqlServerDapperSqlExecutor<TEntity, TKey>>)
  nameWithType: LockExtensions.Locking<SqlServerDapperSqlExecutor<TEntity, TKey>>(Action<SqlServerDapperSqlExecutor<TEntity, TKey>>)
  fullName: OSharp.Reflection.LockExtensions.Locking<Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor<TEntity, TKey>>(System.Action<Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor<TEntity, TKey>>)
  nameWithType.vb: LockExtensions.Locking(Of SqlServerDapperSqlExecutor(Of TEntity, TKey))(Action(Of SqlServerDapperSqlExecutor(Of TEntity, TKey)))
  fullName.vb: OSharp.Reflection.LockExtensions.Locking(Of Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor(Of TEntity, TKey))(System.Action(Of Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor(Of TEntity, TKey)))
  name.vb: Locking(Of SqlServerDapperSqlExecutor(Of TEntity, TKey))(Action(Of SqlServerDapperSqlExecutor(Of TEntity, TKey)))
  spec.csharp:
  - uid: OSharp.Reflection.LockExtensions.Locking``1(System.Action{``0})
    name: Locking<SqlServerDapperSqlExecutor<TEntity, TKey>>
    nameWithType: LockExtensions.Locking<SqlServerDapperSqlExecutor<TEntity, TKey>>
    fullName: OSharp.Reflection.LockExtensions.Locking<Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor<TEntity, TKey>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2
    name: SqlServerDapperSqlExecutor
    nameWithType: SqlServerDapperSqlExecutor
    fullName: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Reflection.LockExtensions.Locking``1(System.Action{``0})
    name: Locking(Of SqlServerDapperSqlExecutor(Of TEntity, TKey))
    nameWithType: LockExtensions.Locking(Of SqlServerDapperSqlExecutor(Of TEntity, TKey))
    fullName: OSharp.Reflection.LockExtensions.Locking(Of Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor(Of TEntity, TKey))
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2
    name: SqlServerDapperSqlExecutor
    nameWithType: SqlServerDapperSqlExecutor
    fullName: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.OSharp.Reflection.LockExtensions.Locking``1(System.Func{{TResult}})
  commentId: M:OSharp.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
  parent: OSharp.Reflection.LockExtensions
  definition: OSharp.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
  name: Locking<TResult>(Func<TResult>)
  nameWithType: LockExtensions.Locking<TResult>(Func<TResult>)
  fullName: OSharp.Reflection.LockExtensions.Locking<TResult>(System.Func<TResult>)
  nameWithType.vb: LockExtensions.Locking(Of TResult)(Func(Of TResult))
  fullName.vb: OSharp.Reflection.LockExtensions.Locking(Of TResult)(System.Func(Of TResult))
  name.vb: Locking(Of TResult)(Func(Of TResult))
  spec.csharp:
  - uid: OSharp.Reflection.LockExtensions.Locking``1(System.Func{``0})
    name: Locking<TResult>
    nameWithType: LockExtensions.Locking<TResult>
    fullName: OSharp.Reflection.LockExtensions.Locking<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Reflection.LockExtensions.Locking``1(System.Func{``0})
    name: Locking(Of TResult)
    nameWithType: LockExtensions.Locking(Of TResult)
    fullName: OSharp.Reflection.LockExtensions.Locking(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2.OSharp.Reflection.LockExtensions.Locking``2(System.Func{Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor{{TEntity},{TKey}},{TResult}})
  commentId: M:OSharp.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
  parent: OSharp.Reflection.LockExtensions
  definition: OSharp.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
  name: Locking<SqlServerDapperSqlExecutor<TEntity, TKey>, TResult>(Func<SqlServerDapperSqlExecutor<TEntity, TKey>, TResult>)
  nameWithType: LockExtensions.Locking<SqlServerDapperSqlExecutor<TEntity, TKey>, TResult>(Func<SqlServerDapperSqlExecutor<TEntity, TKey>, TResult>)
  fullName: OSharp.Reflection.LockExtensions.Locking<Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor<TEntity, TKey>, TResult>(System.Func<Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor<TEntity, TKey>, TResult>)
  nameWithType.vb: LockExtensions.Locking(Of SqlServerDapperSqlExecutor(Of TEntity, TKey), TResult)(Func(Of SqlServerDapperSqlExecutor(Of TEntity, TKey), TResult))
  fullName.vb: OSharp.Reflection.LockExtensions.Locking(Of Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor(Of TEntity, TKey), TResult)(System.Func(Of Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor(Of TEntity, TKey), TResult))
  name.vb: Locking(Of SqlServerDapperSqlExecutor(Of TEntity, TKey), TResult)(Func(Of SqlServerDapperSqlExecutor(Of TEntity, TKey), TResult))
  spec.csharp:
  - uid: OSharp.Reflection.LockExtensions.Locking``2(System.Func{``0,``1})
    name: Locking<SqlServerDapperSqlExecutor<TEntity, TKey>, TResult>
    nameWithType: LockExtensions.Locking<SqlServerDapperSqlExecutor<TEntity, TKey>, TResult>
    fullName: OSharp.Reflection.LockExtensions.Locking<Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor<TEntity, TKey>, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2
    name: SqlServerDapperSqlExecutor
    nameWithType: SqlServerDapperSqlExecutor
    fullName: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Reflection.LockExtensions.Locking``2(System.Func{``0,``1})
    name: Locking(Of SqlServerDapperSqlExecutor(Of TEntity, TKey), TResult)
    nameWithType: LockExtensions.Locking(Of SqlServerDapperSqlExecutor(Of TEntity, TKey), TResult)
    fullName: OSharp.Reflection.LockExtensions.Locking(Of Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor(Of TEntity, TKey), TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2
    name: SqlServerDapperSqlExecutor
    nameWithType: SqlServerDapperSqlExecutor
    fullName: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Extensions.ObjectExtensions.CastTo(System.Type)
  commentId: M:Hybrid.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
  parent: Hybrid.Extensions.ObjectExtensions
  definition: Hybrid.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
  name: CastTo(Type)
  nameWithType: ObjectExtensions.CastTo(Type)
  fullName: Hybrid.Extensions.ObjectExtensions.CastTo(System.Type)
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo(System.Type)
    name: CastTo
    nameWithType: ObjectExtensions.CastTo
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo(System.Type)
    name: CastTo
    nameWithType: ObjectExtensions.CastTo
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Extensions.ObjectExtensions.CastTo``1
  commentId: M:Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object)
  parent: Hybrid.Extensions.ObjectExtensions
  definition: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object)
  name: CastTo<T>()
  nameWithType: ObjectExtensions.CastTo<T>()
  fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>()
  nameWithType.vb: ObjectExtensions.CastTo(Of T)()
  fullName.vb: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)()
  name.vb: CastTo(Of T)()
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1
    name: CastTo<T>
    nameWithType: ObjectExtensions.CastTo<T>
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1
    name: CastTo(Of T)
    nameWithType: ObjectExtensions.CastTo(Of T)
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Extensions.ObjectExtensions.CastTo``1({T})
  commentId: M:Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
  parent: Hybrid.Extensions.ObjectExtensions
  definition: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
  name: CastTo<T>(T)
  nameWithType: ObjectExtensions.CastTo<T>(T)
  fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>(T)
  nameWithType.vb: ObjectExtensions.CastTo(Of T)(T)
  fullName.vb: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)(T)
  name.vb: CastTo(Of T)(T)
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(``0)
    name: CastTo<T>
    nameWithType: ObjectExtensions.CastTo<T>
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(``0)
    name: CastTo(Of T)
    nameWithType: ObjectExtensions.CastTo(Of T)
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2.Hybrid.Extensions.ObjectExtensions.IsIn``1(Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor{{TEntity},{TKey}}[])
  commentId: M:Hybrid.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
  parent: Hybrid.Extensions.ObjectExtensions
  definition: Hybrid.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
  name: IsIn<SqlServerDapperSqlExecutor<TEntity, TKey>>(SqlServerDapperSqlExecutor<TEntity, TKey>[])
  nameWithType: ObjectExtensions.IsIn<SqlServerDapperSqlExecutor<TEntity, TKey>>(SqlServerDapperSqlExecutor<TEntity, TKey>[])
  fullName: Hybrid.Extensions.ObjectExtensions.IsIn<Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor<TEntity, TKey>>(Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor<TEntity, TKey>[])
  nameWithType.vb: ObjectExtensions.IsIn(Of SqlServerDapperSqlExecutor(Of TEntity, TKey))(SqlServerDapperSqlExecutor(Of TEntity, TKey)())
  fullName.vb: Hybrid.Extensions.ObjectExtensions.IsIn(Of Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor(Of TEntity, TKey))(Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor(Of TEntity, TKey)())
  name.vb: IsIn(Of SqlServerDapperSqlExecutor(Of TEntity, TKey))(SqlServerDapperSqlExecutor(Of TEntity, TKey)())
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.IsIn``1(``0[])
    name: IsIn<SqlServerDapperSqlExecutor<TEntity, TKey>>
    nameWithType: ObjectExtensions.IsIn<SqlServerDapperSqlExecutor<TEntity, TKey>>
    fullName: Hybrid.Extensions.ObjectExtensions.IsIn<Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor<TEntity, TKey>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2
    name: SqlServerDapperSqlExecutor
    nameWithType: SqlServerDapperSqlExecutor
    fullName: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.IsIn``1(``0[])
    name: IsIn(Of SqlServerDapperSqlExecutor(Of TEntity, TKey))
    nameWithType: ObjectExtensions.IsIn(Of SqlServerDapperSqlExecutor(Of TEntity, TKey))
    fullName: Hybrid.Extensions.ObjectExtensions.IsIn(Of Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor(Of TEntity, TKey))
  - name: (
    nameWithType: (
    fullName: (
  - uid: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2
    name: SqlServerDapperSqlExecutor
    nameWithType: SqlServerDapperSqlExecutor
    fullName: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Extensions.ObjectExtensions.ToDynamic
  commentId: M:Hybrid.Extensions.ObjectExtensions.ToDynamic(System.Object)
  parent: Hybrid.Extensions.ObjectExtensions
  definition: Hybrid.Extensions.ObjectExtensions.ToDynamic(System.Object)
  name: ToDynamic()
  nameWithType: ObjectExtensions.ToDynamic()
  fullName: Hybrid.Extensions.ObjectExtensions.ToDynamic()
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.ToDynamic
    name: ToDynamic
    nameWithType: ObjectExtensions.ToDynamic
    fullName: Hybrid.Extensions.ObjectExtensions.ToDynamic
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.ToDynamic
    name: ToDynamic
    nameWithType: ObjectExtensions.ToDynamic
    fullName: Hybrid.Extensions.ObjectExtensions.ToDynamic
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2.Hybrid.Extensions.ObjectExtensions.DeepClone``1
  commentId: M:Hybrid.Extensions.ObjectExtensions.DeepClone``1(``0)
  parent: Hybrid.Extensions.ObjectExtensions
  definition: Hybrid.Extensions.ObjectExtensions.DeepClone``1(``0)
  name: DeepClone<SqlServerDapperSqlExecutor<TEntity, TKey>>()
  nameWithType: ObjectExtensions.DeepClone<SqlServerDapperSqlExecutor<TEntity, TKey>>()
  fullName: Hybrid.Extensions.ObjectExtensions.DeepClone<Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor<TEntity, TKey>>()
  nameWithType.vb: ObjectExtensions.DeepClone(Of SqlServerDapperSqlExecutor(Of TEntity, TKey))()
  fullName.vb: Hybrid.Extensions.ObjectExtensions.DeepClone(Of Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor(Of TEntity, TKey))()
  name.vb: DeepClone(Of SqlServerDapperSqlExecutor(Of TEntity, TKey))()
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.DeepClone``1
    name: DeepClone<SqlServerDapperSqlExecutor<TEntity, TKey>>
    nameWithType: ObjectExtensions.DeepClone<SqlServerDapperSqlExecutor<TEntity, TKey>>
    fullName: Hybrid.Extensions.ObjectExtensions.DeepClone<Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor<TEntity, TKey>>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.DeepClone``1
    name: DeepClone(Of SqlServerDapperSqlExecutor(Of TEntity, TKey))
    nameWithType: ObjectExtensions.DeepClone(Of SqlServerDapperSqlExecutor(Of TEntity, TKey))
    fullName: Hybrid.Extensions.ObjectExtensions.DeepClone(Of Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor(Of TEntity, TKey))
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2.Hybrid.Extensions.ParameterCheckExtensions.Required``1(System.Func{Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor{{TEntity},{TKey}},System.Boolean},System.String)
  commentId: M:Hybrid.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
  parent: Hybrid.Extensions.ParameterCheckExtensions
  definition: Hybrid.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
  name: Required<SqlServerDapperSqlExecutor<TEntity, TKey>>(Func<SqlServerDapperSqlExecutor<TEntity, TKey>, Boolean>, String)
  nameWithType: ParameterCheckExtensions.Required<SqlServerDapperSqlExecutor<TEntity, TKey>>(Func<SqlServerDapperSqlExecutor<TEntity, TKey>, Boolean>, String)
  fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor<TEntity, TKey>>(System.Func<Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor<TEntity, TKey>, System.Boolean>, System.String)
  nameWithType.vb: ParameterCheckExtensions.Required(Of SqlServerDapperSqlExecutor(Of TEntity, TKey))(Func(Of SqlServerDapperSqlExecutor(Of TEntity, TKey), Boolean), String)
  fullName.vb: Hybrid.Extensions.ParameterCheckExtensions.Required(Of Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor(Of TEntity, TKey))(System.Func(Of Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor(Of TEntity, TKey), System.Boolean), System.String)
  name.vb: Required(Of SqlServerDapperSqlExecutor(Of TEntity, TKey))(Func(Of SqlServerDapperSqlExecutor(Of TEntity, TKey), Boolean), String)
  spec.csharp:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``1(System.Func{``0,System.Boolean},System.String)
    name: Required<SqlServerDapperSqlExecutor<TEntity, TKey>>
    nameWithType: ParameterCheckExtensions.Required<SqlServerDapperSqlExecutor<TEntity, TKey>>
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor<TEntity, TKey>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2
    name: SqlServerDapperSqlExecutor
    nameWithType: SqlServerDapperSqlExecutor
    fullName: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``1(System.Func{``0,System.Boolean},System.String)
    name: Required(Of SqlServerDapperSqlExecutor(Of TEntity, TKey))
    nameWithType: ParameterCheckExtensions.Required(Of SqlServerDapperSqlExecutor(Of TEntity, TKey))
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required(Of Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor(Of TEntity, TKey))
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2
    name: SqlServerDapperSqlExecutor
    nameWithType: SqlServerDapperSqlExecutor
    fullName: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2.Hybrid.Extensions.ParameterCheckExtensions.Required``2(System.Func{Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor{{TEntity},{TKey}},System.Boolean},System.String)
  commentId: M:Hybrid.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
  parent: Hybrid.Extensions.ParameterCheckExtensions
  definition: Hybrid.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
  name: Required<SqlServerDapperSqlExecutor<TEntity, TKey>, TException>(Func<SqlServerDapperSqlExecutor<TEntity, TKey>, Boolean>, String)
  nameWithType: ParameterCheckExtensions.Required<SqlServerDapperSqlExecutor<TEntity, TKey>, TException>(Func<SqlServerDapperSqlExecutor<TEntity, TKey>, Boolean>, String)
  fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor<TEntity, TKey>, TException>(System.Func<Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor<TEntity, TKey>, System.Boolean>, System.String)
  nameWithType.vb: ParameterCheckExtensions.Required(Of SqlServerDapperSqlExecutor(Of TEntity, TKey), TException)(Func(Of SqlServerDapperSqlExecutor(Of TEntity, TKey), Boolean), String)
  fullName.vb: Hybrid.Extensions.ParameterCheckExtensions.Required(Of Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor(Of TEntity, TKey), TException)(System.Func(Of Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor(Of TEntity, TKey), System.Boolean), System.String)
  name.vb: Required(Of SqlServerDapperSqlExecutor(Of TEntity, TKey), TException)(Func(Of SqlServerDapperSqlExecutor(Of TEntity, TKey), Boolean), String)
  spec.csharp:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``2(System.Func{``0,System.Boolean},System.String)
    name: Required<SqlServerDapperSqlExecutor<TEntity, TKey>, TException>
    nameWithType: ParameterCheckExtensions.Required<SqlServerDapperSqlExecutor<TEntity, TKey>, TException>
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor<TEntity, TKey>, TException>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2
    name: SqlServerDapperSqlExecutor
    nameWithType: SqlServerDapperSqlExecutor
    fullName: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``2(System.Func{``0,System.Boolean},System.String)
    name: Required(Of SqlServerDapperSqlExecutor(Of TEntity, TKey), TException)
    nameWithType: ParameterCheckExtensions.Required(Of SqlServerDapperSqlExecutor(Of TEntity, TKey), TException)
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required(Of Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor(Of TEntity, TKey), TException)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2
    name: SqlServerDapperSqlExecutor
    nameWithType: SqlServerDapperSqlExecutor
    fullName: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2.Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(System.String)
  commentId: M:Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
  parent: Hybrid.Extensions.ParameterCheckExtensions
  definition: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
  name: CheckNotNull<SqlServerDapperSqlExecutor<TEntity, TKey>>(String)
  nameWithType: ParameterCheckExtensions.CheckNotNull<SqlServerDapperSqlExecutor<TEntity, TKey>>(String)
  fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull<Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor<TEntity, TKey>>(System.String)
  nameWithType.vb: ParameterCheckExtensions.CheckNotNull(Of SqlServerDapperSqlExecutor(Of TEntity, TKey))(String)
  fullName.vb: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull(Of Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor(Of TEntity, TKey))(System.String)
  name.vb: CheckNotNull(Of SqlServerDapperSqlExecutor(Of TEntity, TKey))(String)
  spec.csharp:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(System.String)
    name: CheckNotNull<SqlServerDapperSqlExecutor<TEntity, TKey>>
    nameWithType: ParameterCheckExtensions.CheckNotNull<SqlServerDapperSqlExecutor<TEntity, TKey>>
    fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull<Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor<TEntity, TKey>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(System.String)
    name: CheckNotNull(Of SqlServerDapperSqlExecutor(Of TEntity, TKey))
    nameWithType: ParameterCheckExtensions.CheckNotNull(Of SqlServerDapperSqlExecutor(Of TEntity, TKey))
    fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull(Of Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor(Of TEntity, TKey))
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2.Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor{{TEntity},{TKey}}},System.Action{System.Exception},System.Action{Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor{{TEntity},{TKey}}})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
  parent: Hybrid.Extensions.TryCatchExtensions
  definition: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
  name: TryCatch<SqlServerDapperSqlExecutor<TEntity, TKey>>(Action<SqlServerDapperSqlExecutor<TEntity, TKey>>, Action<Exception>, Action<SqlServerDapperSqlExecutor<TEntity, TKey>>)
  nameWithType: TryCatchExtensions.TryCatch<SqlServerDapperSqlExecutor<TEntity, TKey>>(Action<SqlServerDapperSqlExecutor<TEntity, TKey>>, Action<Exception>, Action<SqlServerDapperSqlExecutor<TEntity, TKey>>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor<TEntity, TKey>>(System.Action<Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor<TEntity, TKey>>, System.Action<System.Exception>, System.Action<Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor<TEntity, TKey>>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of SqlServerDapperSqlExecutor(Of TEntity, TKey))(Action(Of SqlServerDapperSqlExecutor(Of TEntity, TKey)), Action(Of Exception), Action(Of SqlServerDapperSqlExecutor(Of TEntity, TKey)))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor(Of TEntity, TKey))(System.Action(Of Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor(Of TEntity, TKey)), System.Action(Of System.Exception), System.Action(Of Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor(Of TEntity, TKey)))
  name.vb: TryCatch(Of SqlServerDapperSqlExecutor(Of TEntity, TKey))(Action(Of SqlServerDapperSqlExecutor(Of TEntity, TKey)), Action(Of Exception), Action(Of SqlServerDapperSqlExecutor(Of TEntity, TKey)))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{``0},System.Action{System.Exception},System.Action{``0})
    name: TryCatch<SqlServerDapperSqlExecutor<TEntity, TKey>>
    nameWithType: TryCatchExtensions.TryCatch<SqlServerDapperSqlExecutor<TEntity, TKey>>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor<TEntity, TKey>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2
    name: SqlServerDapperSqlExecutor
    nameWithType: SqlServerDapperSqlExecutor
    fullName: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2
    name: SqlServerDapperSqlExecutor
    nameWithType: SqlServerDapperSqlExecutor
    fullName: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{``0},System.Action{System.Exception},System.Action{``0})
    name: TryCatch(Of SqlServerDapperSqlExecutor(Of TEntity, TKey))
    nameWithType: TryCatchExtensions.TryCatch(Of SqlServerDapperSqlExecutor(Of TEntity, TKey))
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor(Of TEntity, TKey))
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2
    name: SqlServerDapperSqlExecutor
    nameWithType: SqlServerDapperSqlExecutor
    fullName: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2
    name: SqlServerDapperSqlExecutor
    nameWithType: SqlServerDapperSqlExecutor
    fullName: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2.Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor{{TEntity},{TKey}}},System.Action{System.Exception})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
  parent: Hybrid.Extensions.TryCatchExtensions
  definition: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
  name: TryCatch<SqlServerDapperSqlExecutor<TEntity, TKey>>(Action<SqlServerDapperSqlExecutor<TEntity, TKey>>, Action<Exception>)
  nameWithType: TryCatchExtensions.TryCatch<SqlServerDapperSqlExecutor<TEntity, TKey>>(Action<SqlServerDapperSqlExecutor<TEntity, TKey>>, Action<Exception>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor<TEntity, TKey>>(System.Action<Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor<TEntity, TKey>>, System.Action<System.Exception>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of SqlServerDapperSqlExecutor(Of TEntity, TKey))(Action(Of SqlServerDapperSqlExecutor(Of TEntity, TKey)), Action(Of Exception))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor(Of TEntity, TKey))(System.Action(Of Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor(Of TEntity, TKey)), System.Action(Of System.Exception))
  name.vb: TryCatch(Of SqlServerDapperSqlExecutor(Of TEntity, TKey))(Action(Of SqlServerDapperSqlExecutor(Of TEntity, TKey)), Action(Of Exception))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{``0},System.Action{System.Exception})
    name: TryCatch<SqlServerDapperSqlExecutor<TEntity, TKey>>
    nameWithType: TryCatchExtensions.TryCatch<SqlServerDapperSqlExecutor<TEntity, TKey>>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor<TEntity, TKey>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2
    name: SqlServerDapperSqlExecutor
    nameWithType: SqlServerDapperSqlExecutor
    fullName: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{``0},System.Action{System.Exception})
    name: TryCatch(Of SqlServerDapperSqlExecutor(Of TEntity, TKey))
    nameWithType: TryCatchExtensions.TryCatch(Of SqlServerDapperSqlExecutor(Of TEntity, TKey))
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor(Of TEntity, TKey))
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2
    name: SqlServerDapperSqlExecutor
    nameWithType: SqlServerDapperSqlExecutor
    fullName: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2.Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor{{TEntity},{TKey}},{TResult}},System.Action{System.Exception},System.Action{Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor{{TEntity},{TKey}}})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
  parent: Hybrid.Extensions.TryCatchExtensions
  definition: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
  name: TryCatch<SqlServerDapperSqlExecutor<TEntity, TKey>, TResult>(Func<SqlServerDapperSqlExecutor<TEntity, TKey>, TResult>, Action<Exception>, Action<SqlServerDapperSqlExecutor<TEntity, TKey>>)
  nameWithType: TryCatchExtensions.TryCatch<SqlServerDapperSqlExecutor<TEntity, TKey>, TResult>(Func<SqlServerDapperSqlExecutor<TEntity, TKey>, TResult>, Action<Exception>, Action<SqlServerDapperSqlExecutor<TEntity, TKey>>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor<TEntity, TKey>, TResult>(System.Func<Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor<TEntity, TKey>, TResult>, System.Action<System.Exception>, System.Action<Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor<TEntity, TKey>>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of SqlServerDapperSqlExecutor(Of TEntity, TKey), TResult)(Func(Of SqlServerDapperSqlExecutor(Of TEntity, TKey), TResult), Action(Of Exception), Action(Of SqlServerDapperSqlExecutor(Of TEntity, TKey)))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor(Of TEntity, TKey), TResult)(System.Func(Of Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor(Of TEntity, TKey), TResult), System.Action(Of System.Exception), System.Action(Of Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor(Of TEntity, TKey)))
  name.vb: TryCatch(Of SqlServerDapperSqlExecutor(Of TEntity, TKey), TResult)(Func(Of SqlServerDapperSqlExecutor(Of TEntity, TKey), TResult), Action(Of Exception), Action(Of SqlServerDapperSqlExecutor(Of TEntity, TKey)))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
    name: TryCatch<SqlServerDapperSqlExecutor<TEntity, TKey>, TResult>
    nameWithType: TryCatchExtensions.TryCatch<SqlServerDapperSqlExecutor<TEntity, TKey>, TResult>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor<TEntity, TKey>, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2
    name: SqlServerDapperSqlExecutor
    nameWithType: SqlServerDapperSqlExecutor
    fullName: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2
    name: SqlServerDapperSqlExecutor
    nameWithType: SqlServerDapperSqlExecutor
    fullName: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
    name: TryCatch(Of SqlServerDapperSqlExecutor(Of TEntity, TKey), TResult)
    nameWithType: TryCatchExtensions.TryCatch(Of SqlServerDapperSqlExecutor(Of TEntity, TKey), TResult)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor(Of TEntity, TKey), TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2
    name: SqlServerDapperSqlExecutor
    nameWithType: SqlServerDapperSqlExecutor
    fullName: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2
    name: SqlServerDapperSqlExecutor
    nameWithType: SqlServerDapperSqlExecutor
    fullName: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2.Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor{{TEntity},{TKey}},{TResult}},System.Action{System.Exception})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
  parent: Hybrid.Extensions.TryCatchExtensions
  definition: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
  name: TryCatch<SqlServerDapperSqlExecutor<TEntity, TKey>, TResult>(Func<SqlServerDapperSqlExecutor<TEntity, TKey>, TResult>, Action<Exception>)
  nameWithType: TryCatchExtensions.TryCatch<SqlServerDapperSqlExecutor<TEntity, TKey>, TResult>(Func<SqlServerDapperSqlExecutor<TEntity, TKey>, TResult>, Action<Exception>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor<TEntity, TKey>, TResult>(System.Func<Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor<TEntity, TKey>, TResult>, System.Action<System.Exception>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of SqlServerDapperSqlExecutor(Of TEntity, TKey), TResult)(Func(Of SqlServerDapperSqlExecutor(Of TEntity, TKey), TResult), Action(Of Exception))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor(Of TEntity, TKey), TResult)(System.Func(Of Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor(Of TEntity, TKey), TResult), System.Action(Of System.Exception))
  name.vb: TryCatch(Of SqlServerDapperSqlExecutor(Of TEntity, TKey), TResult)(Func(Of SqlServerDapperSqlExecutor(Of TEntity, TKey), TResult), Action(Of Exception))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{``0,``1},System.Action{System.Exception})
    name: TryCatch<SqlServerDapperSqlExecutor<TEntity, TKey>, TResult>
    nameWithType: TryCatchExtensions.TryCatch<SqlServerDapperSqlExecutor<TEntity, TKey>, TResult>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor<TEntity, TKey>, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2
    name: SqlServerDapperSqlExecutor
    nameWithType: SqlServerDapperSqlExecutor
    fullName: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{``0,``1},System.Action{System.Exception})
    name: TryCatch(Of SqlServerDapperSqlExecutor(Of TEntity, TKey), TResult)
    nameWithType: TryCatchExtensions.TryCatch(Of SqlServerDapperSqlExecutor(Of TEntity, TKey), TResult)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor(Of TEntity, TKey), TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2
    name: SqlServerDapperSqlExecutor
    nameWithType: SqlServerDapperSqlExecutor
    fullName: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2.Hybrid.Extensions.TryCatchExtensions.TryFinally``1(System.Action{Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor{{TEntity},{TKey}}},System.Action{Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor{{TEntity},{TKey}}})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
  parent: Hybrid.Extensions.TryCatchExtensions
  definition: Hybrid.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
  name: TryFinally<SqlServerDapperSqlExecutor<TEntity, TKey>>(Action<SqlServerDapperSqlExecutor<TEntity, TKey>>, Action<SqlServerDapperSqlExecutor<TEntity, TKey>>)
  nameWithType: TryCatchExtensions.TryFinally<SqlServerDapperSqlExecutor<TEntity, TKey>>(Action<SqlServerDapperSqlExecutor<TEntity, TKey>>, Action<SqlServerDapperSqlExecutor<TEntity, TKey>>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryFinally<Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor<TEntity, TKey>>(System.Action<Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor<TEntity, TKey>>, System.Action<Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor<TEntity, TKey>>)
  nameWithType.vb: TryCatchExtensions.TryFinally(Of SqlServerDapperSqlExecutor(Of TEntity, TKey))(Action(Of SqlServerDapperSqlExecutor(Of TEntity, TKey)), Action(Of SqlServerDapperSqlExecutor(Of TEntity, TKey)))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryFinally(Of Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor(Of TEntity, TKey))(System.Action(Of Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor(Of TEntity, TKey)), System.Action(Of Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor(Of TEntity, TKey)))
  name.vb: TryFinally(Of SqlServerDapperSqlExecutor(Of TEntity, TKey))(Action(Of SqlServerDapperSqlExecutor(Of TEntity, TKey)), Action(Of SqlServerDapperSqlExecutor(Of TEntity, TKey)))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryFinally``1(System.Action{``0},System.Action{``0})
    name: TryFinally<SqlServerDapperSqlExecutor<TEntity, TKey>>
    nameWithType: TryCatchExtensions.TryFinally<SqlServerDapperSqlExecutor<TEntity, TKey>>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryFinally<Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor<TEntity, TKey>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2
    name: SqlServerDapperSqlExecutor
    nameWithType: SqlServerDapperSqlExecutor
    fullName: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2
    name: SqlServerDapperSqlExecutor
    nameWithType: SqlServerDapperSqlExecutor
    fullName: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryFinally``1(System.Action{``0},System.Action{``0})
    name: TryFinally(Of SqlServerDapperSqlExecutor(Of TEntity, TKey))
    nameWithType: TryCatchExtensions.TryFinally(Of SqlServerDapperSqlExecutor(Of TEntity, TKey))
    fullName: Hybrid.Extensions.TryCatchExtensions.TryFinally(Of Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor(Of TEntity, TKey))
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2
    name: SqlServerDapperSqlExecutor
    nameWithType: SqlServerDapperSqlExecutor
    fullName: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2
    name: SqlServerDapperSqlExecutor
    nameWithType: SqlServerDapperSqlExecutor
    fullName: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Json.JsonExtensions.ToJsonString(System.Boolean,System.Boolean)
  commentId: M:Hybrid.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
  parent: Hybrid.Json.JsonExtensions
  definition: Hybrid.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
  name: ToJsonString(Boolean, Boolean)
  nameWithType: JsonExtensions.ToJsonString(Boolean, Boolean)
  fullName: Hybrid.Json.JsonExtensions.ToJsonString(System.Boolean, System.Boolean)
  spec.csharp:
  - uid: Hybrid.Json.JsonExtensions.ToJsonString(System.Boolean,System.Boolean)
    name: ToJsonString
    nameWithType: JsonExtensions.ToJsonString
    fullName: Hybrid.Json.JsonExtensions.ToJsonString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Json.JsonExtensions.ToJsonString(System.Boolean,System.Boolean)
    name: ToJsonString
    nameWithType: JsonExtensions.ToJsonString
    fullName: Hybrid.Json.JsonExtensions.ToJsonString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Mapping.MapperExtensions.MapTo``1
  commentId: M:Hybrid.Mapping.MapperExtensions.MapTo``1(System.Object)
  parent: Hybrid.Mapping.MapperExtensions
  definition: Hybrid.Mapping.MapperExtensions.MapTo``1(System.Object)
  name: MapTo<TTarget>()
  nameWithType: MapperExtensions.MapTo<TTarget>()
  fullName: Hybrid.Mapping.MapperExtensions.MapTo<TTarget>()
  nameWithType.vb: MapperExtensions.MapTo(Of TTarget)()
  fullName.vb: Hybrid.Mapping.MapperExtensions.MapTo(Of TTarget)()
  name.vb: MapTo(Of TTarget)()
  spec.csharp:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``1
    name: MapTo<TTarget>
    nameWithType: MapperExtensions.MapTo<TTarget>
    fullName: Hybrid.Mapping.MapperExtensions.MapTo<TTarget>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``1
    name: MapTo(Of TTarget)
    nameWithType: MapperExtensions.MapTo(Of TTarget)
    fullName: Hybrid.Mapping.MapperExtensions.MapTo(Of TTarget)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2.Hybrid.Mapping.MapperExtensions.MapTo``2({TTarget})
  commentId: M:Hybrid.Mapping.MapperExtensions.MapTo``2(``0,``1)
  parent: Hybrid.Mapping.MapperExtensions
  definition: Hybrid.Mapping.MapperExtensions.MapTo``2(``0,``1)
  name: MapTo<SqlServerDapperSqlExecutor<TEntity, TKey>, TTarget>(TTarget)
  nameWithType: MapperExtensions.MapTo<SqlServerDapperSqlExecutor<TEntity, TKey>, TTarget>(TTarget)
  fullName: Hybrid.Mapping.MapperExtensions.MapTo<Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor<TEntity, TKey>, TTarget>(TTarget)
  nameWithType.vb: MapperExtensions.MapTo(Of SqlServerDapperSqlExecutor(Of TEntity, TKey), TTarget)(TTarget)
  fullName.vb: Hybrid.Mapping.MapperExtensions.MapTo(Of Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor(Of TEntity, TKey), TTarget)(TTarget)
  name.vb: MapTo(Of SqlServerDapperSqlExecutor(Of TEntity, TKey), TTarget)(TTarget)
  spec.csharp:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``2(``1)
    name: MapTo<SqlServerDapperSqlExecutor<TEntity, TKey>, TTarget>
    nameWithType: MapperExtensions.MapTo<SqlServerDapperSqlExecutor<TEntity, TKey>, TTarget>
    fullName: Hybrid.Mapping.MapperExtensions.MapTo<Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor<TEntity, TKey>, TTarget>
  - name: (
    nameWithType: (
    fullName: (
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``2(``1)
    name: MapTo(Of SqlServerDapperSqlExecutor(Of TEntity, TKey), TTarget)
    nameWithType: MapperExtensions.MapTo(Of SqlServerDapperSqlExecutor(Of TEntity, TKey), TTarget)
    fullName: Hybrid.Mapping.MapperExtensions.MapTo(Of Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor(Of TEntity, TKey), TTarget)
  - name: (
    nameWithType: (
    fullName: (
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Reflection.LockExtensions.Locking(System.Action)
  commentId: M:Hybrid.Reflection.LockExtensions.Locking(System.Object,System.Action)
  parent: Hybrid.Reflection.LockExtensions
  definition: Hybrid.Reflection.LockExtensions.Locking(System.Object,System.Action)
  name: Locking(Action)
  nameWithType: LockExtensions.Locking(Action)
  fullName: Hybrid.Reflection.LockExtensions.Locking(System.Action)
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking(System.Action)
    name: Locking
    nameWithType: LockExtensions.Locking
    fullName: Hybrid.Reflection.LockExtensions.Locking
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking(System.Action)
    name: Locking
    nameWithType: LockExtensions.Locking
    fullName: Hybrid.Reflection.LockExtensions.Locking
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2.Hybrid.Reflection.LockExtensions.Locking``1(System.Action{Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor{{TEntity},{TKey}}})
  commentId: M:Hybrid.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
  parent: Hybrid.Reflection.LockExtensions
  definition: Hybrid.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
  name: Locking<SqlServerDapperSqlExecutor<TEntity, TKey>>(Action<SqlServerDapperSqlExecutor<TEntity, TKey>>)
  nameWithType: LockExtensions.Locking<SqlServerDapperSqlExecutor<TEntity, TKey>>(Action<SqlServerDapperSqlExecutor<TEntity, TKey>>)
  fullName: Hybrid.Reflection.LockExtensions.Locking<Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor<TEntity, TKey>>(System.Action<Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor<TEntity, TKey>>)
  nameWithType.vb: LockExtensions.Locking(Of SqlServerDapperSqlExecutor(Of TEntity, TKey))(Action(Of SqlServerDapperSqlExecutor(Of TEntity, TKey)))
  fullName.vb: Hybrid.Reflection.LockExtensions.Locking(Of Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor(Of TEntity, TKey))(System.Action(Of Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor(Of TEntity, TKey)))
  name.vb: Locking(Of SqlServerDapperSqlExecutor(Of TEntity, TKey))(Action(Of SqlServerDapperSqlExecutor(Of TEntity, TKey)))
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(System.Action{``0})
    name: Locking<SqlServerDapperSqlExecutor<TEntity, TKey>>
    nameWithType: LockExtensions.Locking<SqlServerDapperSqlExecutor<TEntity, TKey>>
    fullName: Hybrid.Reflection.LockExtensions.Locking<Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor<TEntity, TKey>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2
    name: SqlServerDapperSqlExecutor
    nameWithType: SqlServerDapperSqlExecutor
    fullName: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(System.Action{``0})
    name: Locking(Of SqlServerDapperSqlExecutor(Of TEntity, TKey))
    nameWithType: LockExtensions.Locking(Of SqlServerDapperSqlExecutor(Of TEntity, TKey))
    fullName: Hybrid.Reflection.LockExtensions.Locking(Of Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor(Of TEntity, TKey))
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2
    name: SqlServerDapperSqlExecutor
    nameWithType: SqlServerDapperSqlExecutor
    fullName: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Reflection.LockExtensions.Locking``1(System.Func{{TResult}})
  commentId: M:Hybrid.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
  parent: Hybrid.Reflection.LockExtensions
  definition: Hybrid.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
  name: Locking<TResult>(Func<TResult>)
  nameWithType: LockExtensions.Locking<TResult>(Func<TResult>)
  fullName: Hybrid.Reflection.LockExtensions.Locking<TResult>(System.Func<TResult>)
  nameWithType.vb: LockExtensions.Locking(Of TResult)(Func(Of TResult))
  fullName.vb: Hybrid.Reflection.LockExtensions.Locking(Of TResult)(System.Func(Of TResult))
  name.vb: Locking(Of TResult)(Func(Of TResult))
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(System.Func{``0})
    name: Locking<TResult>
    nameWithType: LockExtensions.Locking<TResult>
    fullName: Hybrid.Reflection.LockExtensions.Locking<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(System.Func{``0})
    name: Locking(Of TResult)
    nameWithType: LockExtensions.Locking(Of TResult)
    fullName: Hybrid.Reflection.LockExtensions.Locking(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2.Hybrid.Reflection.LockExtensions.Locking``2(System.Func{Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor{{TEntity},{TKey}},{TResult}})
  commentId: M:Hybrid.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
  parent: Hybrid.Reflection.LockExtensions
  definition: Hybrid.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
  name: Locking<SqlServerDapperSqlExecutor<TEntity, TKey>, TResult>(Func<SqlServerDapperSqlExecutor<TEntity, TKey>, TResult>)
  nameWithType: LockExtensions.Locking<SqlServerDapperSqlExecutor<TEntity, TKey>, TResult>(Func<SqlServerDapperSqlExecutor<TEntity, TKey>, TResult>)
  fullName: Hybrid.Reflection.LockExtensions.Locking<Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor<TEntity, TKey>, TResult>(System.Func<Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor<TEntity, TKey>, TResult>)
  nameWithType.vb: LockExtensions.Locking(Of SqlServerDapperSqlExecutor(Of TEntity, TKey), TResult)(Func(Of SqlServerDapperSqlExecutor(Of TEntity, TKey), TResult))
  fullName.vb: Hybrid.Reflection.LockExtensions.Locking(Of Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor(Of TEntity, TKey), TResult)(System.Func(Of Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor(Of TEntity, TKey), TResult))
  name.vb: Locking(Of SqlServerDapperSqlExecutor(Of TEntity, TKey), TResult)(Func(Of SqlServerDapperSqlExecutor(Of TEntity, TKey), TResult))
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking``2(System.Func{``0,``1})
    name: Locking<SqlServerDapperSqlExecutor<TEntity, TKey>, TResult>
    nameWithType: LockExtensions.Locking<SqlServerDapperSqlExecutor<TEntity, TKey>, TResult>
    fullName: Hybrid.Reflection.LockExtensions.Locking<Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor<TEntity, TKey>, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2
    name: SqlServerDapperSqlExecutor
    nameWithType: SqlServerDapperSqlExecutor
    fullName: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking``2(System.Func{``0,``1})
    name: Locking(Of SqlServerDapperSqlExecutor(Of TEntity, TKey), TResult)
    nameWithType: LockExtensions.Locking(Of SqlServerDapperSqlExecutor(Of TEntity, TKey), TResult)
    fullName: Hybrid.Reflection.LockExtensions.Locking(Of Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor(Of TEntity, TKey), TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2
    name: SqlServerDapperSqlExecutor
    nameWithType: SqlServerDapperSqlExecutor
    fullName: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2.Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2
  commentId: M:Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2(``0)
  parent: Hybrid.Domain.Entities.EntityExtensions
  definition: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2(``0)
  name: CheckICreatedTime<SqlServerDapperSqlExecutor<TEntity, TKey>, TKey>()
  nameWithType: EntityExtensions.CheckICreatedTime<SqlServerDapperSqlExecutor<TEntity, TKey>, TKey>()
  fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime<Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor<TEntity, TKey>, TKey>()
  nameWithType.vb: EntityExtensions.CheckICreatedTime(Of SqlServerDapperSqlExecutor(Of TEntity, TKey), TKey)()
  fullName.vb: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime(Of Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor(Of TEntity, TKey), TKey)()
  name.vb: CheckICreatedTime(Of SqlServerDapperSqlExecutor(Of TEntity, TKey), TKey)()
  spec.csharp:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2
    name: CheckICreatedTime<SqlServerDapperSqlExecutor<TEntity, TKey>, TKey>
    nameWithType: EntityExtensions.CheckICreatedTime<SqlServerDapperSqlExecutor<TEntity, TKey>, TKey>
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime<Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor<TEntity, TKey>, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2
    name: CheckICreatedTime(Of SqlServerDapperSqlExecutor(Of TEntity, TKey), TKey)
    nameWithType: EntityExtensions.CheckICreatedTime(Of SqlServerDapperSqlExecutor(Of TEntity, TKey), TKey)
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime(Of Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor(Of TEntity, TKey), TKey)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2.Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(System.Security.Principal.IPrincipal)
  commentId: M:Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
  parent: Hybrid.Domain.Entities.EntityExtensions
  definition: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
  name: CheckICreationAudited<SqlServerDapperSqlExecutor<TEntity, TKey>, TKey, TUserKey>(IPrincipal)
  nameWithType: EntityExtensions.CheckICreationAudited<SqlServerDapperSqlExecutor<TEntity, TKey>, TKey, TUserKey>(IPrincipal)
  fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited<Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor<TEntity, TKey>, TKey, TUserKey>(System.Security.Principal.IPrincipal)
  nameWithType.vb: EntityExtensions.CheckICreationAudited(Of SqlServerDapperSqlExecutor(Of TEntity, TKey), TKey, TUserKey)(IPrincipal)
  fullName.vb: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited(Of Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor(Of TEntity, TKey), TKey, TUserKey)(System.Security.Principal.IPrincipal)
  name.vb: CheckICreationAudited(Of SqlServerDapperSqlExecutor(Of TEntity, TKey), TKey, TUserKey)(IPrincipal)
  spec.csharp:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(System.Security.Principal.IPrincipal)
    name: CheckICreationAudited<SqlServerDapperSqlExecutor<TEntity, TKey>, TKey, TUserKey>
    nameWithType: EntityExtensions.CheckICreationAudited<SqlServerDapperSqlExecutor<TEntity, TKey>, TKey, TUserKey>
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited<Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor<TEntity, TKey>, TKey, TUserKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(System.Security.Principal.IPrincipal)
    name: CheckICreationAudited(Of SqlServerDapperSqlExecutor(Of TEntity, TKey), TKey, TUserKey)
    nameWithType: EntityExtensions.CheckICreationAudited(Of SqlServerDapperSqlExecutor(Of TEntity, TKey), TKey, TUserKey)
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited(Of Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor(Of TEntity, TKey), TKey, TUserKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2.Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(System.Security.Principal.IPrincipal)
  commentId: M:Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
  parent: Hybrid.Domain.Entities.EntityExtensions
  definition: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
  name: CheckIUpdateAudited<SqlServerDapperSqlExecutor<TEntity, TKey>, TKey, TUserKey>(IPrincipal)
  nameWithType: EntityExtensions.CheckIUpdateAudited<SqlServerDapperSqlExecutor<TEntity, TKey>, TKey, TUserKey>(IPrincipal)
  fullName: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited<Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor<TEntity, TKey>, TKey, TUserKey>(System.Security.Principal.IPrincipal)
  nameWithType.vb: EntityExtensions.CheckIUpdateAudited(Of SqlServerDapperSqlExecutor(Of TEntity, TKey), TKey, TUserKey)(IPrincipal)
  fullName.vb: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited(Of Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor(Of TEntity, TKey), TKey, TUserKey)(System.Security.Principal.IPrincipal)
  name.vb: CheckIUpdateAudited(Of SqlServerDapperSqlExecutor(Of TEntity, TKey), TKey, TUserKey)(IPrincipal)
  spec.csharp:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(System.Security.Principal.IPrincipal)
    name: CheckIUpdateAudited<SqlServerDapperSqlExecutor<TEntity, TKey>, TKey, TUserKey>
    nameWithType: EntityExtensions.CheckIUpdateAudited<SqlServerDapperSqlExecutor<TEntity, TKey>, TKey, TUserKey>
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited<Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor<TEntity, TKey>, TKey, TUserKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(System.Security.Principal.IPrincipal)
    name: CheckIUpdateAudited(Of SqlServerDapperSqlExecutor(Of TEntity, TKey), TKey, TUserKey)
    nameWithType: EntityExtensions.CheckIUpdateAudited(Of SqlServerDapperSqlExecutor(Of TEntity, TKey), TKey, TUserKey)
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited(Of Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor(Of TEntity, TKey), TKey, TUserKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Hybrid.EntityFrameworkCore.SqlExecutorBase`2
  commentId: T:Hybrid.EntityFrameworkCore.SqlExecutorBase`2
  name: SqlExecutorBase<TEntity, TKey>
  nameWithType: SqlExecutorBase<TEntity, TKey>
  fullName: Hybrid.EntityFrameworkCore.SqlExecutorBase<TEntity, TKey>
  nameWithType.vb: SqlExecutorBase(Of TEntity, TKey)
  fullName.vb: Hybrid.EntityFrameworkCore.SqlExecutorBase(Of TEntity, TKey)
  name.vb: SqlExecutorBase(Of TEntity, TKey)
  spec.csharp:
  - uid: Hybrid.EntityFrameworkCore.SqlExecutorBase`2
    name: SqlExecutorBase
    nameWithType: SqlExecutorBase
    fullName: Hybrid.EntityFrameworkCore.SqlExecutorBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Hybrid.EntityFrameworkCore.SqlExecutorBase`2
    name: SqlExecutorBase
    nameWithType: SqlExecutorBase
    fullName: Hybrid.EntityFrameworkCore.SqlExecutorBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EntityFrameworkCore
  commentId: N:Hybrid.EntityFrameworkCore
  name: Hybrid.EntityFrameworkCore
  nameWithType: Hybrid.EntityFrameworkCore
  fullName: Hybrid.EntityFrameworkCore
- uid: Hybrid.Domain.Repositories.ISqlExecutor`2
  commentId: T:Hybrid.Domain.Repositories.ISqlExecutor`2
  name: ISqlExecutor<TEntity, TKey>
  nameWithType: ISqlExecutor<TEntity, TKey>
  fullName: Hybrid.Domain.Repositories.ISqlExecutor<TEntity, TKey>
  nameWithType.vb: ISqlExecutor(Of TEntity, TKey)
  fullName.vb: Hybrid.Domain.Repositories.ISqlExecutor(Of TEntity, TKey)
  name.vb: ISqlExecutor(Of TEntity, TKey)
  spec.csharp:
  - uid: Hybrid.Domain.Repositories.ISqlExecutor`2
    name: ISqlExecutor
    nameWithType: ISqlExecutor
    fullName: Hybrid.Domain.Repositories.ISqlExecutor
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Hybrid.Domain.Repositories.ISqlExecutor`2
    name: ISqlExecutor
    nameWithType: ISqlExecutor
    fullName: Hybrid.Domain.Repositories.ISqlExecutor
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Domain.Repositories
  commentId: N:Hybrid.Domain.Repositories
  name: Hybrid.Domain.Repositories
  nameWithType: Hybrid.Domain.Repositories
  fullName: Hybrid.Domain.Repositories
- uid: Hybrid.EntityFrameworkCore.SqlExecutorBase`2.DatabaseType
  commentId: P:Hybrid.EntityFrameworkCore.SqlExecutorBase`2.DatabaseType
  name: DatabaseType
  nameWithType: SqlExecutorBase<TEntity, TKey>.DatabaseType
  fullName: Hybrid.EntityFrameworkCore.SqlExecutorBase<TEntity, TKey>.DatabaseType
  nameWithType.vb: SqlExecutorBase(Of TEntity, TKey).DatabaseType
  fullName.vb: Hybrid.EntityFrameworkCore.SqlExecutorBase(Of TEntity, TKey).DatabaseType
- uid: Hybrid.EntityFrameworkCore.SqlExecutorBase`2.GetDbConnection(System.String)
  commentId: M:Hybrid.EntityFrameworkCore.SqlExecutorBase`2.GetDbConnection(System.String)
  isExternal: true
  name: GetDbConnection(String)
  nameWithType: SqlExecutorBase<TEntity, TKey>.GetDbConnection(String)
  fullName: Hybrid.EntityFrameworkCore.SqlExecutorBase<TEntity, TKey>.GetDbConnection(System.String)
  nameWithType.vb: SqlExecutorBase(Of TEntity, TKey).GetDbConnection(String)
  fullName.vb: Hybrid.EntityFrameworkCore.SqlExecutorBase(Of TEntity, TKey).GetDbConnection(System.String)
  spec.csharp:
  - uid: Hybrid.EntityFrameworkCore.SqlExecutorBase`2.GetDbConnection(System.String)
    name: GetDbConnection
    nameWithType: SqlExecutorBase<TEntity, TKey>.GetDbConnection
    fullName: Hybrid.EntityFrameworkCore.SqlExecutorBase<TEntity, TKey>.GetDbConnection
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.EntityFrameworkCore.SqlExecutorBase`2.GetDbConnection(System.String)
    name: GetDbConnection
    nameWithType: SqlExecutorBase(Of TEntity, TKey).GetDbConnection
    fullName: Hybrid.EntityFrameworkCore.SqlExecutorBase(Of TEntity, TKey).GetDbConnection
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EntityFrameworkCore.SqlExecutorBase`2.FromSql``1(System.String,System.Object)
  commentId: M:Hybrid.EntityFrameworkCore.SqlExecutorBase`2.FromSql``1(System.String,System.Object)
  isExternal: true
  name: FromSql<TResult>(String, Object)
  nameWithType: SqlExecutorBase<TEntity, TKey>.FromSql<TResult>(String, Object)
  fullName: Hybrid.EntityFrameworkCore.SqlExecutorBase<TEntity, TKey>.FromSql<TResult>(System.String, System.Object)
  nameWithType.vb: SqlExecutorBase(Of TEntity, TKey).FromSql(Of TResult)(String, Object)
  fullName.vb: Hybrid.EntityFrameworkCore.SqlExecutorBase(Of TEntity, TKey).FromSql(Of TResult)(System.String, System.Object)
  name.vb: FromSql(Of TResult)(String, Object)
  spec.csharp:
  - uid: Hybrid.EntityFrameworkCore.SqlExecutorBase`2.FromSql``1(System.String,System.Object)
    name: FromSql<TResult>
    nameWithType: SqlExecutorBase<TEntity, TKey>.FromSql<TResult>
    fullName: Hybrid.EntityFrameworkCore.SqlExecutorBase<TEntity, TKey>.FromSql<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.EntityFrameworkCore.SqlExecutorBase`2.FromSql``1(System.String,System.Object)
    name: FromSql(Of TResult)
    nameWithType: SqlExecutorBase(Of TEntity, TKey).FromSql(Of TResult)
    fullName: Hybrid.EntityFrameworkCore.SqlExecutorBase(Of TEntity, TKey).FromSql(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EntityFrameworkCore.SqlExecutorBase`2.ExecuteSqlCommand(System.String,System.Object)
  commentId: M:Hybrid.EntityFrameworkCore.SqlExecutorBase`2.ExecuteSqlCommand(System.String,System.Object)
  isExternal: true
  name: ExecuteSqlCommand(String, Object)
  nameWithType: SqlExecutorBase<TEntity, TKey>.ExecuteSqlCommand(String, Object)
  fullName: Hybrid.EntityFrameworkCore.SqlExecutorBase<TEntity, TKey>.ExecuteSqlCommand(System.String, System.Object)
  nameWithType.vb: SqlExecutorBase(Of TEntity, TKey).ExecuteSqlCommand(String, Object)
  fullName.vb: Hybrid.EntityFrameworkCore.SqlExecutorBase(Of TEntity, TKey).ExecuteSqlCommand(System.String, System.Object)
  spec.csharp:
  - uid: Hybrid.EntityFrameworkCore.SqlExecutorBase`2.ExecuteSqlCommand(System.String,System.Object)
    name: ExecuteSqlCommand
    nameWithType: SqlExecutorBase<TEntity, TKey>.ExecuteSqlCommand
    fullName: Hybrid.EntityFrameworkCore.SqlExecutorBase<TEntity, TKey>.ExecuteSqlCommand
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.EntityFrameworkCore.SqlExecutorBase`2.ExecuteSqlCommand(System.String,System.Object)
    name: ExecuteSqlCommand
    nameWithType: SqlExecutorBase(Of TEntity, TKey).ExecuteSqlCommand
    fullName: Hybrid.EntityFrameworkCore.SqlExecutorBase(Of TEntity, TKey).ExecuteSqlCommand
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Entity.EntityExtensions.CheckICreatedTime``2(``0)
  commentId: M:OSharp.Entity.EntityExtensions.CheckICreatedTime``2(``0)
  name: CheckICreatedTime<TEntity, TKey>(TEntity)
  nameWithType: EntityExtensions.CheckICreatedTime<TEntity, TKey>(TEntity)
  fullName: OSharp.Entity.EntityExtensions.CheckICreatedTime<TEntity, TKey>(TEntity)
  nameWithType.vb: EntityExtensions.CheckICreatedTime(Of TEntity, TKey)(TEntity)
  fullName.vb: OSharp.Entity.EntityExtensions.CheckICreatedTime(Of TEntity, TKey)(TEntity)
  name.vb: CheckICreatedTime(Of TEntity, TKey)(TEntity)
  spec.csharp:
  - uid: OSharp.Entity.EntityExtensions.CheckICreatedTime``2(``0)
    name: CheckICreatedTime<TEntity, TKey>
    nameWithType: EntityExtensions.CheckICreatedTime<TEntity, TKey>
    fullName: OSharp.Entity.EntityExtensions.CheckICreatedTime<TEntity, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Entity.EntityExtensions.CheckICreatedTime``2(``0)
    name: CheckICreatedTime(Of TEntity, TKey)
    nameWithType: EntityExtensions.CheckICreatedTime(Of TEntity, TKey)
    fullName: OSharp.Entity.EntityExtensions.CheckICreatedTime(Of TEntity, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Entity.EntityExtensions
  commentId: T:OSharp.Entity.EntityExtensions
  parent: OSharp.Entity
  name: EntityExtensions
  nameWithType: EntityExtensions
  fullName: OSharp.Entity.EntityExtensions
- uid: OSharp.Entity.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
  commentId: M:OSharp.Entity.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
  isExternal: true
  name: CheckICreationAudited<TEntity, TKey, TUserKey>(TEntity, IPrincipal)
  nameWithType: EntityExtensions.CheckICreationAudited<TEntity, TKey, TUserKey>(TEntity, IPrincipal)
  fullName: OSharp.Entity.EntityExtensions.CheckICreationAudited<TEntity, TKey, TUserKey>(TEntity, System.Security.Principal.IPrincipal)
  nameWithType.vb: EntityExtensions.CheckICreationAudited(Of TEntity, TKey, TUserKey)(TEntity, IPrincipal)
  fullName.vb: OSharp.Entity.EntityExtensions.CheckICreationAudited(Of TEntity, TKey, TUserKey)(TEntity, System.Security.Principal.IPrincipal)
  name.vb: CheckICreationAudited(Of TEntity, TKey, TUserKey)(TEntity, IPrincipal)
  spec.csharp:
  - uid: OSharp.Entity.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
    name: CheckICreationAudited<TEntity, TKey, TUserKey>
    nameWithType: EntityExtensions.CheckICreationAudited<TEntity, TKey, TUserKey>
    fullName: OSharp.Entity.EntityExtensions.CheckICreationAudited<TEntity, TKey, TUserKey>
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Entity.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
    name: CheckICreationAudited(Of TEntity, TKey, TUserKey)
    nameWithType: EntityExtensions.CheckICreationAudited(Of TEntity, TKey, TUserKey)
    fullName: OSharp.Entity.EntityExtensions.CheckICreationAudited(Of TEntity, TKey, TUserKey)
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Entity.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
  commentId: M:OSharp.Entity.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
  isExternal: true
  name: CheckIUpdateAudited<TEntity, TKey, TUserKey>(TEntity, IPrincipal)
  nameWithType: EntityExtensions.CheckIUpdateAudited<TEntity, TKey, TUserKey>(TEntity, IPrincipal)
  fullName: OSharp.Entity.EntityExtensions.CheckIUpdateAudited<TEntity, TKey, TUserKey>(TEntity, System.Security.Principal.IPrincipal)
  nameWithType.vb: EntityExtensions.CheckIUpdateAudited(Of TEntity, TKey, TUserKey)(TEntity, IPrincipal)
  fullName.vb: OSharp.Entity.EntityExtensions.CheckIUpdateAudited(Of TEntity, TKey, TUserKey)(TEntity, System.Security.Principal.IPrincipal)
  name.vb: CheckIUpdateAudited(Of TEntity, TKey, TUserKey)(TEntity, IPrincipal)
  spec.csharp:
  - uid: OSharp.Entity.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
    name: CheckIUpdateAudited<TEntity, TKey, TUserKey>
    nameWithType: EntityExtensions.CheckIUpdateAudited<TEntity, TKey, TUserKey>
    fullName: OSharp.Entity.EntityExtensions.CheckIUpdateAudited<TEntity, TKey, TUserKey>
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Entity.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
    name: CheckIUpdateAudited(Of TEntity, TKey, TUserKey)
    nameWithType: EntityExtensions.CheckIUpdateAudited(Of TEntity, TKey, TUserKey)
    fullName: OSharp.Entity.EntityExtensions.CheckIUpdateAudited(Of TEntity, TKey, TUserKey)
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
  commentId: M:OSharp.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
  isExternal: true
  name: CastTo(Object, Type)
  nameWithType: ObjectExtensions.CastTo(Object, Type)
  fullName: OSharp.Extensions.ObjectExtensions.CastTo(System.Object, System.Type)
  spec.csharp:
  - uid: OSharp.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
    name: CastTo
    nameWithType: ObjectExtensions.CastTo
    fullName: OSharp.Extensions.ObjectExtensions.CastTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
    name: CastTo
    nameWithType: ObjectExtensions.CastTo
    fullName: OSharp.Extensions.ObjectExtensions.CastTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Extensions.ObjectExtensions
  commentId: T:OSharp.Extensions.ObjectExtensions
  parent: OSharp.Extensions
  name: ObjectExtensions
  nameWithType: ObjectExtensions
  fullName: OSharp.Extensions.ObjectExtensions
- uid: OSharp.Extensions.ObjectExtensions.CastTo``1(System.Object)
  commentId: M:OSharp.Extensions.ObjectExtensions.CastTo``1(System.Object)
  isExternal: true
  name: CastTo<T>(Object)
  nameWithType: ObjectExtensions.CastTo<T>(Object)
  fullName: OSharp.Extensions.ObjectExtensions.CastTo<T>(System.Object)
  nameWithType.vb: ObjectExtensions.CastTo(Of T)(Object)
  fullName.vb: OSharp.Extensions.ObjectExtensions.CastTo(Of T)(System.Object)
  name.vb: CastTo(Of T)(Object)
  spec.csharp:
  - uid: OSharp.Extensions.ObjectExtensions.CastTo``1(System.Object)
    name: CastTo<T>
    nameWithType: ObjectExtensions.CastTo<T>
    fullName: OSharp.Extensions.ObjectExtensions.CastTo<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ObjectExtensions.CastTo``1(System.Object)
    name: CastTo(Of T)
    nameWithType: ObjectExtensions.CastTo(Of T)
    fullName: OSharp.Extensions.ObjectExtensions.CastTo(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
  commentId: M:OSharp.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
  isExternal: true
  name: CastTo<T>(Object, T)
  nameWithType: ObjectExtensions.CastTo<T>(Object, T)
  fullName: OSharp.Extensions.ObjectExtensions.CastTo<T>(System.Object, T)
  nameWithType.vb: ObjectExtensions.CastTo(Of T)(Object, T)
  fullName.vb: OSharp.Extensions.ObjectExtensions.CastTo(Of T)(System.Object, T)
  name.vb: CastTo(Of T)(Object, T)
  spec.csharp:
  - uid: OSharp.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
    name: CastTo<T>
    nameWithType: ObjectExtensions.CastTo<T>
    fullName: OSharp.Extensions.ObjectExtensions.CastTo<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
    name: CastTo(Of T)
    nameWithType: ObjectExtensions.CastTo(Of T)
    fullName: OSharp.Extensions.ObjectExtensions.CastTo(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
  commentId: M:OSharp.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
  name: IsIn<T>(T, T[])
  nameWithType: ObjectExtensions.IsIn<T>(T, T[])
  fullName: OSharp.Extensions.ObjectExtensions.IsIn<T>(T, T[])
  nameWithType.vb: ObjectExtensions.IsIn(Of T)(T, T())
  fullName.vb: OSharp.Extensions.ObjectExtensions.IsIn(Of T)(T, T())
  name.vb: IsIn(Of T)(T, T())
  spec.csharp:
  - uid: OSharp.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
    name: IsIn<T>
    nameWithType: ObjectExtensions.IsIn<T>
    fullName: OSharp.Extensions.ObjectExtensions.IsIn<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
    name: IsIn(Of T)
    nameWithType: ObjectExtensions.IsIn(Of T)
    fullName: OSharp.Extensions.ObjectExtensions.IsIn(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Extensions.ObjectExtensions.ToDynamic(System.Object)
  commentId: M:OSharp.Extensions.ObjectExtensions.ToDynamic(System.Object)
  isExternal: true
  name: ToDynamic(Object)
  nameWithType: ObjectExtensions.ToDynamic(Object)
  fullName: OSharp.Extensions.ObjectExtensions.ToDynamic(System.Object)
  spec.csharp:
  - uid: OSharp.Extensions.ObjectExtensions.ToDynamic(System.Object)
    name: ToDynamic
    nameWithType: ObjectExtensions.ToDynamic
    fullName: OSharp.Extensions.ObjectExtensions.ToDynamic
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ObjectExtensions.ToDynamic(System.Object)
    name: ToDynamic
    nameWithType: ObjectExtensions.ToDynamic
    fullName: OSharp.Extensions.ObjectExtensions.ToDynamic
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Extensions.ObjectExtensions.DeepClone``1(``0)
  commentId: M:OSharp.Extensions.ObjectExtensions.DeepClone``1(``0)
  name: DeepClone<T>(T)
  nameWithType: ObjectExtensions.DeepClone<T>(T)
  fullName: OSharp.Extensions.ObjectExtensions.DeepClone<T>(T)
  nameWithType.vb: ObjectExtensions.DeepClone(Of T)(T)
  fullName.vb: OSharp.Extensions.ObjectExtensions.DeepClone(Of T)(T)
  name.vb: DeepClone(Of T)(T)
  spec.csharp:
  - uid: OSharp.Extensions.ObjectExtensions.DeepClone``1(``0)
    name: DeepClone<T>
    nameWithType: ObjectExtensions.DeepClone<T>
    fullName: OSharp.Extensions.ObjectExtensions.DeepClone<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ObjectExtensions.DeepClone``1(``0)
    name: DeepClone(Of T)
    nameWithType: ObjectExtensions.DeepClone(Of T)
    fullName: OSharp.Extensions.ObjectExtensions.DeepClone(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
  commentId: M:OSharp.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
  isExternal: true
  name: Required<T>(T, Func<T, Boolean>, String)
  nameWithType: ParameterCheckExtensions.Required<T>(T, Func<T, Boolean>, String)
  fullName: OSharp.Extensions.ParameterCheckExtensions.Required<T>(T, System.Func<T, System.Boolean>, System.String)
  nameWithType.vb: ParameterCheckExtensions.Required(Of T)(T, Func(Of T, Boolean), String)
  fullName.vb: OSharp.Extensions.ParameterCheckExtensions.Required(Of T)(T, System.Func(Of T, System.Boolean), System.String)
  name.vb: Required(Of T)(T, Func(Of T, Boolean), String)
  spec.csharp:
  - uid: OSharp.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
    name: Required<T>
    nameWithType: ParameterCheckExtensions.Required<T>
    fullName: OSharp.Extensions.ParameterCheckExtensions.Required<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
    name: Required(Of T)
    nameWithType: ParameterCheckExtensions.Required(Of T)
    fullName: OSharp.Extensions.ParameterCheckExtensions.Required(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Extensions.ParameterCheckExtensions
  commentId: T:OSharp.Extensions.ParameterCheckExtensions
  parent: OSharp.Extensions
  name: ParameterCheckExtensions
  nameWithType: ParameterCheckExtensions
  fullName: OSharp.Extensions.ParameterCheckExtensions
- uid: OSharp.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
  commentId: M:OSharp.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
  isExternal: true
  name: Required<T, TException>(T, Func<T, Boolean>, String)
  nameWithType: ParameterCheckExtensions.Required<T, TException>(T, Func<T, Boolean>, String)
  fullName: OSharp.Extensions.ParameterCheckExtensions.Required<T, TException>(T, System.Func<T, System.Boolean>, System.String)
  nameWithType.vb: ParameterCheckExtensions.Required(Of T, TException)(T, Func(Of T, Boolean), String)
  fullName.vb: OSharp.Extensions.ParameterCheckExtensions.Required(Of T, TException)(T, System.Func(Of T, System.Boolean), System.String)
  name.vb: Required(Of T, TException)(T, Func(Of T, Boolean), String)
  spec.csharp:
  - uid: OSharp.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
    name: Required<T, TException>
    nameWithType: ParameterCheckExtensions.Required<T, TException>
    fullName: OSharp.Extensions.ParameterCheckExtensions.Required<T, TException>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
    name: Required(Of T, TException)
    nameWithType: ParameterCheckExtensions.Required(Of T, TException)
    fullName: OSharp.Extensions.ParameterCheckExtensions.Required(Of T, TException)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
  commentId: M:OSharp.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
  isExternal: true
  name: CheckNotNull<T>(T, String)
  nameWithType: ParameterCheckExtensions.CheckNotNull<T>(T, String)
  fullName: OSharp.Extensions.ParameterCheckExtensions.CheckNotNull<T>(T, System.String)
  nameWithType.vb: ParameterCheckExtensions.CheckNotNull(Of T)(T, String)
  fullName.vb: OSharp.Extensions.ParameterCheckExtensions.CheckNotNull(Of T)(T, System.String)
  name.vb: CheckNotNull(Of T)(T, String)
  spec.csharp:
  - uid: OSharp.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
    name: CheckNotNull<T>
    nameWithType: ParameterCheckExtensions.CheckNotNull<T>
    fullName: OSharp.Extensions.ParameterCheckExtensions.CheckNotNull<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
    name: CheckNotNull(Of T)
    nameWithType: ParameterCheckExtensions.CheckNotNull(Of T)
    fullName: OSharp.Extensions.ParameterCheckExtensions.CheckNotNull(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
  commentId: M:OSharp.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
  isExternal: true
  name: TryCatch<T>(T, Action<T>, Action<Exception>, Action<T>)
  nameWithType: TryCatchExtensions.TryCatch<T>(T, Action<T>, Action<Exception>, Action<T>)
  fullName: OSharp.Extensions.TryCatchExtensions.TryCatch<T>(T, System.Action<T>, System.Action<System.Exception>, System.Action<T>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of T)(T, Action(Of T), Action(Of Exception), Action(Of T))
  fullName.vb: OSharp.Extensions.TryCatchExtensions.TryCatch(Of T)(T, System.Action(Of T), System.Action(Of System.Exception), System.Action(Of T))
  name.vb: TryCatch(Of T)(T, Action(Of T), Action(Of Exception), Action(Of T))
  spec.csharp:
  - uid: OSharp.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
    name: TryCatch<T>
    nameWithType: TryCatchExtensions.TryCatch<T>
    fullName: OSharp.Extensions.TryCatchExtensions.TryCatch<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
    name: TryCatch(Of T)
    nameWithType: TryCatchExtensions.TryCatch(Of T)
    fullName: OSharp.Extensions.TryCatchExtensions.TryCatch(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Extensions.TryCatchExtensions
  commentId: T:OSharp.Extensions.TryCatchExtensions
  parent: OSharp.Extensions
  name: TryCatchExtensions
  nameWithType: TryCatchExtensions
  fullName: OSharp.Extensions.TryCatchExtensions
- uid: OSharp.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
  commentId: M:OSharp.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
  isExternal: true
  name: TryCatch<T>(T, Action<T>, Action<Exception>)
  nameWithType: TryCatchExtensions.TryCatch<T>(T, Action<T>, Action<Exception>)
  fullName: OSharp.Extensions.TryCatchExtensions.TryCatch<T>(T, System.Action<T>, System.Action<System.Exception>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of T)(T, Action(Of T), Action(Of Exception))
  fullName.vb: OSharp.Extensions.TryCatchExtensions.TryCatch(Of T)(T, System.Action(Of T), System.Action(Of System.Exception))
  name.vb: TryCatch(Of T)(T, Action(Of T), Action(Of Exception))
  spec.csharp:
  - uid: OSharp.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
    name: TryCatch<T>
    nameWithType: TryCatchExtensions.TryCatch<T>
    fullName: OSharp.Extensions.TryCatchExtensions.TryCatch<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
    name: TryCatch(Of T)
    nameWithType: TryCatchExtensions.TryCatch(Of T)
    fullName: OSharp.Extensions.TryCatchExtensions.TryCatch(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
  commentId: M:OSharp.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
  isExternal: true
  name: TryCatch<T, TResult>(T, Func<T, TResult>, Action<Exception>, Action<T>)
  nameWithType: TryCatchExtensions.TryCatch<T, TResult>(T, Func<T, TResult>, Action<Exception>, Action<T>)
  fullName: OSharp.Extensions.TryCatchExtensions.TryCatch<T, TResult>(T, System.Func<T, TResult>, System.Action<System.Exception>, System.Action<T>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of T, TResult)(T, Func(Of T, TResult), Action(Of Exception), Action(Of T))
  fullName.vb: OSharp.Extensions.TryCatchExtensions.TryCatch(Of T, TResult)(T, System.Func(Of T, TResult), System.Action(Of System.Exception), System.Action(Of T))
  name.vb: TryCatch(Of T, TResult)(T, Func(Of T, TResult), Action(Of Exception), Action(Of T))
  spec.csharp:
  - uid: OSharp.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
    name: TryCatch<T, TResult>
    nameWithType: TryCatchExtensions.TryCatch<T, TResult>
    fullName: OSharp.Extensions.TryCatchExtensions.TryCatch<T, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
    name: TryCatch(Of T, TResult)
    nameWithType: TryCatchExtensions.TryCatch(Of T, TResult)
    fullName: OSharp.Extensions.TryCatchExtensions.TryCatch(Of T, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
  commentId: M:OSharp.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
  isExternal: true
  name: TryCatch<T, TResult>(T, Func<T, TResult>, Action<Exception>)
  nameWithType: TryCatchExtensions.TryCatch<T, TResult>(T, Func<T, TResult>, Action<Exception>)
  fullName: OSharp.Extensions.TryCatchExtensions.TryCatch<T, TResult>(T, System.Func<T, TResult>, System.Action<System.Exception>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of T, TResult)(T, Func(Of T, TResult), Action(Of Exception))
  fullName.vb: OSharp.Extensions.TryCatchExtensions.TryCatch(Of T, TResult)(T, System.Func(Of T, TResult), System.Action(Of System.Exception))
  name.vb: TryCatch(Of T, TResult)(T, Func(Of T, TResult), Action(Of Exception))
  spec.csharp:
  - uid: OSharp.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
    name: TryCatch<T, TResult>
    nameWithType: TryCatchExtensions.TryCatch<T, TResult>
    fullName: OSharp.Extensions.TryCatchExtensions.TryCatch<T, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
    name: TryCatch(Of T, TResult)
    nameWithType: TryCatchExtensions.TryCatch(Of T, TResult)
    fullName: OSharp.Extensions.TryCatchExtensions.TryCatch(Of T, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
  commentId: M:OSharp.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
  isExternal: true
  name: TryFinally<T>(T, Action<T>, Action<T>)
  nameWithType: TryCatchExtensions.TryFinally<T>(T, Action<T>, Action<T>)
  fullName: OSharp.Extensions.TryCatchExtensions.TryFinally<T>(T, System.Action<T>, System.Action<T>)
  nameWithType.vb: TryCatchExtensions.TryFinally(Of T)(T, Action(Of T), Action(Of T))
  fullName.vb: OSharp.Extensions.TryCatchExtensions.TryFinally(Of T)(T, System.Action(Of T), System.Action(Of T))
  name.vb: TryFinally(Of T)(T, Action(Of T), Action(Of T))
  spec.csharp:
  - uid: OSharp.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
    name: TryFinally<T>
    nameWithType: TryCatchExtensions.TryFinally<T>
    fullName: OSharp.Extensions.TryCatchExtensions.TryFinally<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
    name: TryFinally(Of T)
    nameWithType: TryCatchExtensions.TryFinally(Of T)
    fullName: OSharp.Extensions.TryCatchExtensions.TryFinally(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
  commentId: M:OSharp.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
  isExternal: true
  name: ToJsonString(Object, Boolean, Boolean)
  nameWithType: JsonExtensions.ToJsonString(Object, Boolean, Boolean)
  fullName: OSharp.Json.JsonExtensions.ToJsonString(System.Object, System.Boolean, System.Boolean)
  spec.csharp:
  - uid: OSharp.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
    name: ToJsonString
    nameWithType: JsonExtensions.ToJsonString
    fullName: OSharp.Json.JsonExtensions.ToJsonString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
    name: ToJsonString
    nameWithType: JsonExtensions.ToJsonString
    fullName: OSharp.Json.JsonExtensions.ToJsonString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Json.JsonExtensions
  commentId: T:OSharp.Json.JsonExtensions
  parent: OSharp.Json
  name: JsonExtensions
  nameWithType: JsonExtensions
  fullName: OSharp.Json.JsonExtensions
- uid: OSharp.Mapping.MapperExtensions.MapTo``1(System.Object)
  commentId: M:OSharp.Mapping.MapperExtensions.MapTo``1(System.Object)
  isExternal: true
  name: MapTo<TTarget>(Object)
  nameWithType: MapperExtensions.MapTo<TTarget>(Object)
  fullName: OSharp.Mapping.MapperExtensions.MapTo<TTarget>(System.Object)
  nameWithType.vb: MapperExtensions.MapTo(Of TTarget)(Object)
  fullName.vb: OSharp.Mapping.MapperExtensions.MapTo(Of TTarget)(System.Object)
  name.vb: MapTo(Of TTarget)(Object)
  spec.csharp:
  - uid: OSharp.Mapping.MapperExtensions.MapTo``1(System.Object)
    name: MapTo<TTarget>
    nameWithType: MapperExtensions.MapTo<TTarget>
    fullName: OSharp.Mapping.MapperExtensions.MapTo<TTarget>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Mapping.MapperExtensions.MapTo``1(System.Object)
    name: MapTo(Of TTarget)
    nameWithType: MapperExtensions.MapTo(Of TTarget)
    fullName: OSharp.Mapping.MapperExtensions.MapTo(Of TTarget)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Mapping.MapperExtensions
  commentId: T:OSharp.Mapping.MapperExtensions
  parent: OSharp.Mapping
  name: MapperExtensions
  nameWithType: MapperExtensions
  fullName: OSharp.Mapping.MapperExtensions
- uid: OSharp.Mapping.MapperExtensions.MapTo``2(``0,``1)
  commentId: M:OSharp.Mapping.MapperExtensions.MapTo``2(``0,``1)
  name: MapTo<TSource, TTarget>(TSource, TTarget)
  nameWithType: MapperExtensions.MapTo<TSource, TTarget>(TSource, TTarget)
  fullName: OSharp.Mapping.MapperExtensions.MapTo<TSource, TTarget>(TSource, TTarget)
  nameWithType.vb: MapperExtensions.MapTo(Of TSource, TTarget)(TSource, TTarget)
  fullName.vb: OSharp.Mapping.MapperExtensions.MapTo(Of TSource, TTarget)(TSource, TTarget)
  name.vb: MapTo(Of TSource, TTarget)(TSource, TTarget)
  spec.csharp:
  - uid: OSharp.Mapping.MapperExtensions.MapTo``2(``0,``1)
    name: MapTo<TSource, TTarget>
    nameWithType: MapperExtensions.MapTo<TSource, TTarget>
    fullName: OSharp.Mapping.MapperExtensions.MapTo<TSource, TTarget>
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Mapping.MapperExtensions.MapTo``2(``0,``1)
    name: MapTo(Of TSource, TTarget)
    nameWithType: MapperExtensions.MapTo(Of TSource, TTarget)
    fullName: OSharp.Mapping.MapperExtensions.MapTo(Of TSource, TTarget)
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Reflection.LockExtensions.Locking(System.Object,System.Action)
  commentId: M:OSharp.Reflection.LockExtensions.Locking(System.Object,System.Action)
  isExternal: true
  name: Locking(Object, Action)
  nameWithType: LockExtensions.Locking(Object, Action)
  fullName: OSharp.Reflection.LockExtensions.Locking(System.Object, System.Action)
  spec.csharp:
  - uid: OSharp.Reflection.LockExtensions.Locking(System.Object,System.Action)
    name: Locking
    nameWithType: LockExtensions.Locking
    fullName: OSharp.Reflection.LockExtensions.Locking
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Reflection.LockExtensions.Locking(System.Object,System.Action)
    name: Locking
    nameWithType: LockExtensions.Locking
    fullName: OSharp.Reflection.LockExtensions.Locking
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Reflection.LockExtensions
  commentId: T:OSharp.Reflection.LockExtensions
  parent: OSharp.Reflection
  name: LockExtensions
  nameWithType: LockExtensions
  fullName: OSharp.Reflection.LockExtensions
- uid: OSharp.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
  commentId: M:OSharp.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
  isExternal: true
  name: Locking<T>(T, Action<T>)
  nameWithType: LockExtensions.Locking<T>(T, Action<T>)
  fullName: OSharp.Reflection.LockExtensions.Locking<T>(T, System.Action<T>)
  nameWithType.vb: LockExtensions.Locking(Of T)(T, Action(Of T))
  fullName.vb: OSharp.Reflection.LockExtensions.Locking(Of T)(T, System.Action(Of T))
  name.vb: Locking(Of T)(T, Action(Of T))
  spec.csharp:
  - uid: OSharp.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
    name: Locking<T>
    nameWithType: LockExtensions.Locking<T>
    fullName: OSharp.Reflection.LockExtensions.Locking<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
    name: Locking(Of T)
    nameWithType: LockExtensions.Locking(Of T)
    fullName: OSharp.Reflection.LockExtensions.Locking(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
  commentId: M:OSharp.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
  isExternal: true
  name: Locking<TResult>(Object, Func<TResult>)
  nameWithType: LockExtensions.Locking<TResult>(Object, Func<TResult>)
  fullName: OSharp.Reflection.LockExtensions.Locking<TResult>(System.Object, System.Func<TResult>)
  nameWithType.vb: LockExtensions.Locking(Of TResult)(Object, Func(Of TResult))
  fullName.vb: OSharp.Reflection.LockExtensions.Locking(Of TResult)(System.Object, System.Func(Of TResult))
  name.vb: Locking(Of TResult)(Object, Func(Of TResult))
  spec.csharp:
  - uid: OSharp.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
    name: Locking<TResult>
    nameWithType: LockExtensions.Locking<TResult>
    fullName: OSharp.Reflection.LockExtensions.Locking<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
    name: Locking(Of TResult)
    nameWithType: LockExtensions.Locking(Of TResult)
    fullName: OSharp.Reflection.LockExtensions.Locking(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
  commentId: M:OSharp.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
  isExternal: true
  name: Locking<TSource, TResult>(TSource, Func<TSource, TResult>)
  nameWithType: LockExtensions.Locking<TSource, TResult>(TSource, Func<TSource, TResult>)
  fullName: OSharp.Reflection.LockExtensions.Locking<TSource, TResult>(TSource, System.Func<TSource, TResult>)
  nameWithType.vb: LockExtensions.Locking(Of TSource, TResult)(TSource, Func(Of TSource, TResult))
  fullName.vb: OSharp.Reflection.LockExtensions.Locking(Of TSource, TResult)(TSource, System.Func(Of TSource, TResult))
  name.vb: Locking(Of TSource, TResult)(TSource, Func(Of TSource, TResult))
  spec.csharp:
  - uid: OSharp.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
    name: Locking<TSource, TResult>
    nameWithType: LockExtensions.Locking<TSource, TResult>
    fullName: OSharp.Reflection.LockExtensions.Locking<TSource, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
    name: Locking(Of TSource, TResult)
    nameWithType: LockExtensions.Locking(Of TSource, TResult)
    fullName: OSharp.Reflection.LockExtensions.Locking(Of TSource, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
  commentId: M:Hybrid.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
  isExternal: true
  name: CastTo(Object, Type)
  nameWithType: ObjectExtensions.CastTo(Object, Type)
  fullName: Hybrid.Extensions.ObjectExtensions.CastTo(System.Object, System.Type)
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
    name: CastTo
    nameWithType: ObjectExtensions.CastTo
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
    name: CastTo
    nameWithType: ObjectExtensions.CastTo
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ObjectExtensions
  commentId: T:Hybrid.Extensions.ObjectExtensions
  parent: Hybrid.Extensions
  name: ObjectExtensions
  nameWithType: ObjectExtensions
  fullName: Hybrid.Extensions.ObjectExtensions
- uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object)
  commentId: M:Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object)
  isExternal: true
  name: CastTo<T>(Object)
  nameWithType: ObjectExtensions.CastTo<T>(Object)
  fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>(System.Object)
  nameWithType.vb: ObjectExtensions.CastTo(Of T)(Object)
  fullName.vb: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)(System.Object)
  name.vb: CastTo(Of T)(Object)
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object)
    name: CastTo<T>
    nameWithType: ObjectExtensions.CastTo<T>
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object)
    name: CastTo(Of T)
    nameWithType: ObjectExtensions.CastTo(Of T)
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
  commentId: M:Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
  isExternal: true
  name: CastTo<T>(Object, T)
  nameWithType: ObjectExtensions.CastTo<T>(Object, T)
  fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>(System.Object, T)
  nameWithType.vb: ObjectExtensions.CastTo(Of T)(Object, T)
  fullName.vb: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)(System.Object, T)
  name.vb: CastTo(Of T)(Object, T)
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
    name: CastTo<T>
    nameWithType: ObjectExtensions.CastTo<T>
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
    name: CastTo(Of T)
    nameWithType: ObjectExtensions.CastTo(Of T)
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
  commentId: M:Hybrid.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
  name: IsIn<T>(T, T[])
  nameWithType: ObjectExtensions.IsIn<T>(T, T[])
  fullName: Hybrid.Extensions.ObjectExtensions.IsIn<T>(T, T[])
  nameWithType.vb: ObjectExtensions.IsIn(Of T)(T, T())
  fullName.vb: Hybrid.Extensions.ObjectExtensions.IsIn(Of T)(T, T())
  name.vb: IsIn(Of T)(T, T())
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
    name: IsIn<T>
    nameWithType: ObjectExtensions.IsIn<T>
    fullName: Hybrid.Extensions.ObjectExtensions.IsIn<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
    name: IsIn(Of T)
    nameWithType: ObjectExtensions.IsIn(Of T)
    fullName: Hybrid.Extensions.ObjectExtensions.IsIn(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ObjectExtensions.ToDynamic(System.Object)
  commentId: M:Hybrid.Extensions.ObjectExtensions.ToDynamic(System.Object)
  isExternal: true
  name: ToDynamic(Object)
  nameWithType: ObjectExtensions.ToDynamic(Object)
  fullName: Hybrid.Extensions.ObjectExtensions.ToDynamic(System.Object)
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.ToDynamic(System.Object)
    name: ToDynamic
    nameWithType: ObjectExtensions.ToDynamic
    fullName: Hybrid.Extensions.ObjectExtensions.ToDynamic
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.ToDynamic(System.Object)
    name: ToDynamic
    nameWithType: ObjectExtensions.ToDynamic
    fullName: Hybrid.Extensions.ObjectExtensions.ToDynamic
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ObjectExtensions.DeepClone``1(``0)
  commentId: M:Hybrid.Extensions.ObjectExtensions.DeepClone``1(``0)
  name: DeepClone<T>(T)
  nameWithType: ObjectExtensions.DeepClone<T>(T)
  fullName: Hybrid.Extensions.ObjectExtensions.DeepClone<T>(T)
  nameWithType.vb: ObjectExtensions.DeepClone(Of T)(T)
  fullName.vb: Hybrid.Extensions.ObjectExtensions.DeepClone(Of T)(T)
  name.vb: DeepClone(Of T)(T)
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.DeepClone``1(``0)
    name: DeepClone<T>
    nameWithType: ObjectExtensions.DeepClone<T>
    fullName: Hybrid.Extensions.ObjectExtensions.DeepClone<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.DeepClone``1(``0)
    name: DeepClone(Of T)
    nameWithType: ObjectExtensions.DeepClone(Of T)
    fullName: Hybrid.Extensions.ObjectExtensions.DeepClone(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
  commentId: M:Hybrid.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
  isExternal: true
  name: Required<T>(T, Func<T, Boolean>, String)
  nameWithType: ParameterCheckExtensions.Required<T>(T, Func<T, Boolean>, String)
  fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<T>(T, System.Func<T, System.Boolean>, System.String)
  nameWithType.vb: ParameterCheckExtensions.Required(Of T)(T, Func(Of T, Boolean), String)
  fullName.vb: Hybrid.Extensions.ParameterCheckExtensions.Required(Of T)(T, System.Func(Of T, System.Boolean), System.String)
  name.vb: Required(Of T)(T, Func(Of T, Boolean), String)
  spec.csharp:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
    name: Required<T>
    nameWithType: ParameterCheckExtensions.Required<T>
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
    name: Required(Of T)
    nameWithType: ParameterCheckExtensions.Required(Of T)
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ParameterCheckExtensions
  commentId: T:Hybrid.Extensions.ParameterCheckExtensions
  parent: Hybrid.Extensions
  name: ParameterCheckExtensions
  nameWithType: ParameterCheckExtensions
  fullName: Hybrid.Extensions.ParameterCheckExtensions
- uid: Hybrid.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
  commentId: M:Hybrid.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
  isExternal: true
  name: Required<T, TException>(T, Func<T, Boolean>, String)
  nameWithType: ParameterCheckExtensions.Required<T, TException>(T, Func<T, Boolean>, String)
  fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<T, TException>(T, System.Func<T, System.Boolean>, System.String)
  nameWithType.vb: ParameterCheckExtensions.Required(Of T, TException)(T, Func(Of T, Boolean), String)
  fullName.vb: Hybrid.Extensions.ParameterCheckExtensions.Required(Of T, TException)(T, System.Func(Of T, System.Boolean), System.String)
  name.vb: Required(Of T, TException)(T, Func(Of T, Boolean), String)
  spec.csharp:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
    name: Required<T, TException>
    nameWithType: ParameterCheckExtensions.Required<T, TException>
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<T, TException>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
    name: Required(Of T, TException)
    nameWithType: ParameterCheckExtensions.Required(Of T, TException)
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required(Of T, TException)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
  commentId: M:Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
  isExternal: true
  name: CheckNotNull<T>(T, String)
  nameWithType: ParameterCheckExtensions.CheckNotNull<T>(T, String)
  fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull<T>(T, System.String)
  nameWithType.vb: ParameterCheckExtensions.CheckNotNull(Of T)(T, String)
  fullName.vb: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull(Of T)(T, System.String)
  name.vb: CheckNotNull(Of T)(T, String)
  spec.csharp:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
    name: CheckNotNull<T>
    nameWithType: ParameterCheckExtensions.CheckNotNull<T>
    fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
    name: CheckNotNull(Of T)
    nameWithType: ParameterCheckExtensions.CheckNotNull(Of T)
    fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
  isExternal: true
  name: TryCatch<T>(T, Action<T>, Action<Exception>, Action<T>)
  nameWithType: TryCatchExtensions.TryCatch<T>(T, Action<T>, Action<Exception>, Action<T>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T>(T, System.Action<T>, System.Action<System.Exception>, System.Action<T>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of T)(T, Action(Of T), Action(Of Exception), Action(Of T))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T)(T, System.Action(Of T), System.Action(Of System.Exception), System.Action(Of T))
  name.vb: TryCatch(Of T)(T, Action(Of T), Action(Of Exception), Action(Of T))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
    name: TryCatch<T>
    nameWithType: TryCatchExtensions.TryCatch<T>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
    name: TryCatch(Of T)
    nameWithType: TryCatchExtensions.TryCatch(Of T)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.TryCatchExtensions
  commentId: T:Hybrid.Extensions.TryCatchExtensions
  parent: Hybrid.Extensions
  name: TryCatchExtensions
  nameWithType: TryCatchExtensions
  fullName: Hybrid.Extensions.TryCatchExtensions
- uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
  isExternal: true
  name: TryCatch<T>(T, Action<T>, Action<Exception>)
  nameWithType: TryCatchExtensions.TryCatch<T>(T, Action<T>, Action<Exception>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T>(T, System.Action<T>, System.Action<System.Exception>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of T)(T, Action(Of T), Action(Of Exception))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T)(T, System.Action(Of T), System.Action(Of System.Exception))
  name.vb: TryCatch(Of T)(T, Action(Of T), Action(Of Exception))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
    name: TryCatch<T>
    nameWithType: TryCatchExtensions.TryCatch<T>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
    name: TryCatch(Of T)
    nameWithType: TryCatchExtensions.TryCatch(Of T)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
  isExternal: true
  name: TryCatch<T, TResult>(T, Func<T, TResult>, Action<Exception>, Action<T>)
  nameWithType: TryCatchExtensions.TryCatch<T, TResult>(T, Func<T, TResult>, Action<Exception>, Action<T>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T, TResult>(T, System.Func<T, TResult>, System.Action<System.Exception>, System.Action<T>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of T, TResult)(T, Func(Of T, TResult), Action(Of Exception), Action(Of T))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T, TResult)(T, System.Func(Of T, TResult), System.Action(Of System.Exception), System.Action(Of T))
  name.vb: TryCatch(Of T, TResult)(T, Func(Of T, TResult), Action(Of Exception), Action(Of T))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
    name: TryCatch<T, TResult>
    nameWithType: TryCatchExtensions.TryCatch<T, TResult>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
    name: TryCatch(Of T, TResult)
    nameWithType: TryCatchExtensions.TryCatch(Of T, TResult)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
  isExternal: true
  name: TryCatch<T, TResult>(T, Func<T, TResult>, Action<Exception>)
  nameWithType: TryCatchExtensions.TryCatch<T, TResult>(T, Func<T, TResult>, Action<Exception>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T, TResult>(T, System.Func<T, TResult>, System.Action<System.Exception>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of T, TResult)(T, Func(Of T, TResult), Action(Of Exception))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T, TResult)(T, System.Func(Of T, TResult), System.Action(Of System.Exception))
  name.vb: TryCatch(Of T, TResult)(T, Func(Of T, TResult), Action(Of Exception))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
    name: TryCatch<T, TResult>
    nameWithType: TryCatchExtensions.TryCatch<T, TResult>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
    name: TryCatch(Of T, TResult)
    nameWithType: TryCatchExtensions.TryCatch(Of T, TResult)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
  isExternal: true
  name: TryFinally<T>(T, Action<T>, Action<T>)
  nameWithType: TryCatchExtensions.TryFinally<T>(T, Action<T>, Action<T>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryFinally<T>(T, System.Action<T>, System.Action<T>)
  nameWithType.vb: TryCatchExtensions.TryFinally(Of T)(T, Action(Of T), Action(Of T))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryFinally(Of T)(T, System.Action(Of T), System.Action(Of T))
  name.vb: TryFinally(Of T)(T, Action(Of T), Action(Of T))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
    name: TryFinally<T>
    nameWithType: TryCatchExtensions.TryFinally<T>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryFinally<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
    name: TryFinally(Of T)
    nameWithType: TryCatchExtensions.TryFinally(Of T)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryFinally(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
  commentId: M:Hybrid.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
  isExternal: true
  name: ToJsonString(Object, Boolean, Boolean)
  nameWithType: JsonExtensions.ToJsonString(Object, Boolean, Boolean)
  fullName: Hybrid.Json.JsonExtensions.ToJsonString(System.Object, System.Boolean, System.Boolean)
  spec.csharp:
  - uid: Hybrid.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
    name: ToJsonString
    nameWithType: JsonExtensions.ToJsonString
    fullName: Hybrid.Json.JsonExtensions.ToJsonString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
    name: ToJsonString
    nameWithType: JsonExtensions.ToJsonString
    fullName: Hybrid.Json.JsonExtensions.ToJsonString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Json.JsonExtensions
  commentId: T:Hybrid.Json.JsonExtensions
  parent: Hybrid.Json
  name: JsonExtensions
  nameWithType: JsonExtensions
  fullName: Hybrid.Json.JsonExtensions
- uid: Hybrid.Mapping.MapperExtensions.MapTo``1(System.Object)
  commentId: M:Hybrid.Mapping.MapperExtensions.MapTo``1(System.Object)
  isExternal: true
  name: MapTo<TTarget>(Object)
  nameWithType: MapperExtensions.MapTo<TTarget>(Object)
  fullName: Hybrid.Mapping.MapperExtensions.MapTo<TTarget>(System.Object)
  nameWithType.vb: MapperExtensions.MapTo(Of TTarget)(Object)
  fullName.vb: Hybrid.Mapping.MapperExtensions.MapTo(Of TTarget)(System.Object)
  name.vb: MapTo(Of TTarget)(Object)
  spec.csharp:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``1(System.Object)
    name: MapTo<TTarget>
    nameWithType: MapperExtensions.MapTo<TTarget>
    fullName: Hybrid.Mapping.MapperExtensions.MapTo<TTarget>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``1(System.Object)
    name: MapTo(Of TTarget)
    nameWithType: MapperExtensions.MapTo(Of TTarget)
    fullName: Hybrid.Mapping.MapperExtensions.MapTo(Of TTarget)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Mapping.MapperExtensions
  commentId: T:Hybrid.Mapping.MapperExtensions
  parent: Hybrid.Mapping
  name: MapperExtensions
  nameWithType: MapperExtensions
  fullName: Hybrid.Mapping.MapperExtensions
- uid: Hybrid.Mapping.MapperExtensions.MapTo``2(``0,``1)
  commentId: M:Hybrid.Mapping.MapperExtensions.MapTo``2(``0,``1)
  name: MapTo<TSource, TTarget>(TSource, TTarget)
  nameWithType: MapperExtensions.MapTo<TSource, TTarget>(TSource, TTarget)
  fullName: Hybrid.Mapping.MapperExtensions.MapTo<TSource, TTarget>(TSource, TTarget)
  nameWithType.vb: MapperExtensions.MapTo(Of TSource, TTarget)(TSource, TTarget)
  fullName.vb: Hybrid.Mapping.MapperExtensions.MapTo(Of TSource, TTarget)(TSource, TTarget)
  name.vb: MapTo(Of TSource, TTarget)(TSource, TTarget)
  spec.csharp:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``2(``0,``1)
    name: MapTo<TSource, TTarget>
    nameWithType: MapperExtensions.MapTo<TSource, TTarget>
    fullName: Hybrid.Mapping.MapperExtensions.MapTo<TSource, TTarget>
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``2(``0,``1)
    name: MapTo(Of TSource, TTarget)
    nameWithType: MapperExtensions.MapTo(Of TSource, TTarget)
    fullName: Hybrid.Mapping.MapperExtensions.MapTo(Of TSource, TTarget)
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Reflection.LockExtensions.Locking(System.Object,System.Action)
  commentId: M:Hybrid.Reflection.LockExtensions.Locking(System.Object,System.Action)
  isExternal: true
  name: Locking(Object, Action)
  nameWithType: LockExtensions.Locking(Object, Action)
  fullName: Hybrid.Reflection.LockExtensions.Locking(System.Object, System.Action)
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking(System.Object,System.Action)
    name: Locking
    nameWithType: LockExtensions.Locking
    fullName: Hybrid.Reflection.LockExtensions.Locking
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking(System.Object,System.Action)
    name: Locking
    nameWithType: LockExtensions.Locking
    fullName: Hybrid.Reflection.LockExtensions.Locking
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Reflection.LockExtensions
  commentId: T:Hybrid.Reflection.LockExtensions
  parent: Hybrid.Reflection
  name: LockExtensions
  nameWithType: LockExtensions
  fullName: Hybrid.Reflection.LockExtensions
- uid: Hybrid.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
  commentId: M:Hybrid.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
  isExternal: true
  name: Locking<T>(T, Action<T>)
  nameWithType: LockExtensions.Locking<T>(T, Action<T>)
  fullName: Hybrid.Reflection.LockExtensions.Locking<T>(T, System.Action<T>)
  nameWithType.vb: LockExtensions.Locking(Of T)(T, Action(Of T))
  fullName.vb: Hybrid.Reflection.LockExtensions.Locking(Of T)(T, System.Action(Of T))
  name.vb: Locking(Of T)(T, Action(Of T))
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
    name: Locking<T>
    nameWithType: LockExtensions.Locking<T>
    fullName: Hybrid.Reflection.LockExtensions.Locking<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
    name: Locking(Of T)
    nameWithType: LockExtensions.Locking(Of T)
    fullName: Hybrid.Reflection.LockExtensions.Locking(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
  commentId: M:Hybrid.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
  isExternal: true
  name: Locking<TResult>(Object, Func<TResult>)
  nameWithType: LockExtensions.Locking<TResult>(Object, Func<TResult>)
  fullName: Hybrid.Reflection.LockExtensions.Locking<TResult>(System.Object, System.Func<TResult>)
  nameWithType.vb: LockExtensions.Locking(Of TResult)(Object, Func(Of TResult))
  fullName.vb: Hybrid.Reflection.LockExtensions.Locking(Of TResult)(System.Object, System.Func(Of TResult))
  name.vb: Locking(Of TResult)(Object, Func(Of TResult))
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
    name: Locking<TResult>
    nameWithType: LockExtensions.Locking<TResult>
    fullName: Hybrid.Reflection.LockExtensions.Locking<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
    name: Locking(Of TResult)
    nameWithType: LockExtensions.Locking(Of TResult)
    fullName: Hybrid.Reflection.LockExtensions.Locking(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
  commentId: M:Hybrid.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
  isExternal: true
  name: Locking<TSource, TResult>(TSource, Func<TSource, TResult>)
  nameWithType: LockExtensions.Locking<TSource, TResult>(TSource, Func<TSource, TResult>)
  fullName: Hybrid.Reflection.LockExtensions.Locking<TSource, TResult>(TSource, System.Func<TSource, TResult>)
  nameWithType.vb: LockExtensions.Locking(Of TSource, TResult)(TSource, Func(Of TSource, TResult))
  fullName.vb: Hybrid.Reflection.LockExtensions.Locking(Of TSource, TResult)(TSource, System.Func(Of TSource, TResult))
  name.vb: Locking(Of TSource, TResult)(TSource, Func(Of TSource, TResult))
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
    name: Locking<TSource, TResult>
    nameWithType: LockExtensions.Locking<TSource, TResult>
    fullName: Hybrid.Reflection.LockExtensions.Locking<TSource, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
    name: Locking(Of TSource, TResult)
    nameWithType: LockExtensions.Locking(Of TSource, TResult)
    fullName: Hybrid.Reflection.LockExtensions.Locking(Of TSource, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2(``0)
  commentId: M:Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2(``0)
  name: CheckICreatedTime<TEntity, TKey>(TEntity)
  nameWithType: EntityExtensions.CheckICreatedTime<TEntity, TKey>(TEntity)
  fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime<TEntity, TKey>(TEntity)
  nameWithType.vb: EntityExtensions.CheckICreatedTime(Of TEntity, TKey)(TEntity)
  fullName.vb: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime(Of TEntity, TKey)(TEntity)
  name.vb: CheckICreatedTime(Of TEntity, TKey)(TEntity)
  spec.csharp:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2(``0)
    name: CheckICreatedTime<TEntity, TKey>
    nameWithType: EntityExtensions.CheckICreatedTime<TEntity, TKey>
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime<TEntity, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2(``0)
    name: CheckICreatedTime(Of TEntity, TKey)
    nameWithType: EntityExtensions.CheckICreatedTime(Of TEntity, TKey)
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime(Of TEntity, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Domain.Entities.EntityExtensions
  commentId: T:Hybrid.Domain.Entities.EntityExtensions
  parent: Hybrid.Domain.Entities
  name: EntityExtensions
  nameWithType: EntityExtensions
  fullName: Hybrid.Domain.Entities.EntityExtensions
- uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
  commentId: M:Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
  isExternal: true
  name: CheckICreationAudited<TEntity, TKey, TUserKey>(TEntity, IPrincipal)
  nameWithType: EntityExtensions.CheckICreationAudited<TEntity, TKey, TUserKey>(TEntity, IPrincipal)
  fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited<TEntity, TKey, TUserKey>(TEntity, System.Security.Principal.IPrincipal)
  nameWithType.vb: EntityExtensions.CheckICreationAudited(Of TEntity, TKey, TUserKey)(TEntity, IPrincipal)
  fullName.vb: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited(Of TEntity, TKey, TUserKey)(TEntity, System.Security.Principal.IPrincipal)
  name.vb: CheckICreationAudited(Of TEntity, TKey, TUserKey)(TEntity, IPrincipal)
  spec.csharp:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
    name: CheckICreationAudited<TEntity, TKey, TUserKey>
    nameWithType: EntityExtensions.CheckICreationAudited<TEntity, TKey, TUserKey>
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited<TEntity, TKey, TUserKey>
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
    name: CheckICreationAudited(Of TEntity, TKey, TUserKey)
    nameWithType: EntityExtensions.CheckICreationAudited(Of TEntity, TKey, TUserKey)
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited(Of TEntity, TKey, TUserKey)
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
  commentId: M:Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
  isExternal: true
  name: CheckIUpdateAudited<TEntity, TKey, TUserKey>(TEntity, IPrincipal)
  nameWithType: EntityExtensions.CheckIUpdateAudited<TEntity, TKey, TUserKey>(TEntity, IPrincipal)
  fullName: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited<TEntity, TKey, TUserKey>(TEntity, System.Security.Principal.IPrincipal)
  nameWithType.vb: EntityExtensions.CheckIUpdateAudited(Of TEntity, TKey, TUserKey)(TEntity, IPrincipal)
  fullName.vb: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited(Of TEntity, TKey, TUserKey)(TEntity, System.Security.Principal.IPrincipal)
  name.vb: CheckIUpdateAudited(Of TEntity, TKey, TUserKey)(TEntity, IPrincipal)
  spec.csharp:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
    name: CheckIUpdateAudited<TEntity, TKey, TUserKey>
    nameWithType: EntityExtensions.CheckIUpdateAudited<TEntity, TKey, TUserKey>
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited<TEntity, TKey, TUserKey>
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
    name: CheckIUpdateAudited(Of TEntity, TKey, TUserKey)
    nameWithType: EntityExtensions.CheckIUpdateAudited(Of TEntity, TKey, TUserKey)
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited(Of TEntity, TKey, TUserKey)
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Entity
  commentId: N:OSharp.Entity
  name: OSharp.Entity
  nameWithType: OSharp.Entity
  fullName: OSharp.Entity
- uid: OSharp.Extensions
  commentId: N:OSharp.Extensions
  name: OSharp.Extensions
  nameWithType: OSharp.Extensions
  fullName: OSharp.Extensions
- uid: OSharp.Json
  commentId: N:OSharp.Json
  name: OSharp.Json
  nameWithType: OSharp.Json
  fullName: OSharp.Json
- uid: OSharp.Mapping
  commentId: N:OSharp.Mapping
  name: OSharp.Mapping
  nameWithType: OSharp.Mapping
  fullName: OSharp.Mapping
- uid: OSharp.Reflection
  commentId: N:OSharp.Reflection
  name: OSharp.Reflection
  nameWithType: OSharp.Reflection
  fullName: OSharp.Reflection
- uid: Hybrid.Extensions
  commentId: N:Hybrid.Extensions
  name: Hybrid.Extensions
  nameWithType: Hybrid.Extensions
  fullName: Hybrid.Extensions
- uid: Hybrid.Json
  commentId: N:Hybrid.Json
  name: Hybrid.Json
  nameWithType: Hybrid.Json
  fullName: Hybrid.Json
- uid: Hybrid.Mapping
  commentId: N:Hybrid.Mapping
  name: Hybrid.Mapping
  nameWithType: Hybrid.Mapping
  fullName: Hybrid.Mapping
- uid: Hybrid.Reflection
  commentId: N:Hybrid.Reflection
  name: Hybrid.Reflection
  nameWithType: Hybrid.Reflection
  fullName: Hybrid.Reflection
- uid: Hybrid.Domain.Entities
  commentId: N:Hybrid.Domain.Entities
  name: Hybrid.Domain.Entities
  nameWithType: Hybrid.Domain.Entities
  fullName: Hybrid.Domain.Entities
- uid: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2.#ctor*
  commentId: Overload:Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2.#ctor
  name: SqlServerDapperSqlExecutor
  nameWithType: SqlServerDapperSqlExecutor<TEntity, TKey>.SqlServerDapperSqlExecutor
  fullName: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor<TEntity, TKey>.SqlServerDapperSqlExecutor
  nameWithType.vb: SqlServerDapperSqlExecutor(Of TEntity, TKey).SqlServerDapperSqlExecutor
  fullName.vb: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor(Of TEntity, TKey).SqlServerDapperSqlExecutor
- uid: Hybrid.Domain.Uow.IUnitOfWorkManager
  commentId: T:Hybrid.Domain.Uow.IUnitOfWorkManager
  parent: Hybrid.Domain.Uow
  name: IUnitOfWorkManager
  nameWithType: IUnitOfWorkManager
  fullName: Hybrid.Domain.Uow.IUnitOfWorkManager
- uid: Hybrid.Domain.Uow
  commentId: N:Hybrid.Domain.Uow
  name: Hybrid.Domain.Uow
  nameWithType: Hybrid.Domain.Uow
  fullName: Hybrid.Domain.Uow
- uid: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2.DatabaseType*
  commentId: Overload:Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2.DatabaseType
  name: DatabaseType
  nameWithType: SqlServerDapperSqlExecutor<TEntity, TKey>.DatabaseType
  fullName: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor<TEntity, TKey>.DatabaseType
  nameWithType.vb: SqlServerDapperSqlExecutor(Of TEntity, TKey).DatabaseType
  fullName.vb: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor(Of TEntity, TKey).DatabaseType
- uid: Hybrid.Domain.EntityFramework.DatabaseType
  commentId: T:Hybrid.Domain.EntityFramework.DatabaseType
  parent: Hybrid.Domain.EntityFramework
  name: DatabaseType
  nameWithType: DatabaseType
  fullName: Hybrid.Domain.EntityFramework.DatabaseType
- uid: Hybrid.Domain.EntityFramework
  commentId: N:Hybrid.Domain.EntityFramework
  name: Hybrid.Domain.EntityFramework
  nameWithType: Hybrid.Domain.EntityFramework
  fullName: Hybrid.Domain.EntityFramework
- uid: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2.GetDbConnection*
  commentId: Overload:Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor`2.GetDbConnection
  name: GetDbConnection
  nameWithType: SqlServerDapperSqlExecutor<TEntity, TKey>.GetDbConnection
  fullName: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor<TEntity, TKey>.GetDbConnection
  nameWithType.vb: SqlServerDapperSqlExecutor(Of TEntity, TKey).GetDbConnection
  fullName.vb: Hybrid.EntityFrameworkCore.SqlServer.SqlServerDapperSqlExecutor(Of TEntity, TKey).GetDbConnection
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.IDbConnection
  commentId: T:System.Data.IDbConnection
  parent: System.Data
  isExternal: true
  name: IDbConnection
  nameWithType: IDbConnection
  fullName: System.Data.IDbConnection
- uid: System.Data
  commentId: N:System.Data
  isExternal: true
  name: System.Data
  nameWithType: System.Data
  fullName: System.Data
