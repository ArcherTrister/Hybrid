### YamlMime:ManagedReference
items:
- uid: Hybrid.EntityFrameworkCore.Repository`2
  commentId: T:Hybrid.EntityFrameworkCore.Repository`2
  id: Repository`2
  parent: Hybrid.EntityFrameworkCore
  children:
  - Hybrid.EntityFrameworkCore.Repository`2.#ctor(System.IServiceProvider)
  - Hybrid.EntityFrameworkCore.Repository`2.CheckExists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},`1)
  - Hybrid.EntityFrameworkCore.Repository`2.CheckExistsAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},`1)
  - Hybrid.EntityFrameworkCore.Repository`2.Delete(`0[])
  - Hybrid.EntityFrameworkCore.Repository`2.Delete(`1)
  - Hybrid.EntityFrameworkCore.Repository`2.Delete(System.Collections.Generic.ICollection{`1},System.Action{`0},System.Func{`0,`0})
  - Hybrid.EntityFrameworkCore.Repository`2.DeleteAsync(`0[])
  - Hybrid.EntityFrameworkCore.Repository`2.DeleteAsync(`1)
  - Hybrid.EntityFrameworkCore.Repository`2.DeleteAsync(System.Collections.Generic.ICollection{`1},System.Func{`0,System.Threading.Tasks.Task},System.Func{`0,System.Threading.Tasks.Task{`0}})
  - Hybrid.EntityFrameworkCore.Repository`2.DeleteBatch(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  - Hybrid.EntityFrameworkCore.Repository`2.DeleteBatchAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  - Hybrid.EntityFrameworkCore.Repository`2.Entities
  - Hybrid.EntityFrameworkCore.Repository`2.Get(`1)
  - Hybrid.EntityFrameworkCore.Repository`2.GetAsync(`1)
  - Hybrid.EntityFrameworkCore.Repository`2.GetFirst(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  - Hybrid.EntityFrameworkCore.Repository`2.GetFirst(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)
  - Hybrid.EntityFrameworkCore.Repository`2.Insert(`0[])
  - Hybrid.EntityFrameworkCore.Repository`2.Insert``1(System.Collections.Generic.ICollection{``0},System.Action{``0},System.Func{``0,`0,`0})
  - Hybrid.EntityFrameworkCore.Repository`2.InsertAsync(`0[])
  - Hybrid.EntityFrameworkCore.Repository`2.InsertAsync``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Threading.Tasks.Task},System.Func{``0,`0,System.Threading.Tasks.Task{`0}})
  - Hybrid.EntityFrameworkCore.Repository`2.InsertOrUpdate(`0[],System.Func{`0,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}}})
  - Hybrid.EntityFrameworkCore.Repository`2.InsertOrUpdateAsync(`0[],System.Func{`0,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}}})
  - Hybrid.EntityFrameworkCore.Repository`2.Query
  - Hybrid.EntityFrameworkCore.Repository`2.Query(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  - Hybrid.EntityFrameworkCore.Repository`2.Query(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)
  - Hybrid.EntityFrameworkCore.Repository`2.Query(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
  - Hybrid.EntityFrameworkCore.Repository`2.QueryAsNoTracking
  - Hybrid.EntityFrameworkCore.Repository`2.QueryAsNoTracking(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  - Hybrid.EntityFrameworkCore.Repository`2.QueryAsNoTracking(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)
  - Hybrid.EntityFrameworkCore.Repository`2.QueryAsNoTracking(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
  - Hybrid.EntityFrameworkCore.Repository`2.TrackEntities
  - Hybrid.EntityFrameworkCore.Repository`2.UnitOfWork
  - Hybrid.EntityFrameworkCore.Repository`2.Update(`0[])
  - Hybrid.EntityFrameworkCore.Repository`2.Update``1(System.Collections.Generic.ICollection{``0},System.Action{``0,`0},System.Func{``0,`0,`0})
  - Hybrid.EntityFrameworkCore.Repository`2.UpdateAsync(`0[])
  - Hybrid.EntityFrameworkCore.Repository`2.UpdateAsync``1(System.Collections.Generic.ICollection{``0},System.Func{``0,`0,System.Threading.Tasks.Task},System.Func{``0,`0,System.Threading.Tasks.Task{`0}})
  - Hybrid.EntityFrameworkCore.Repository`2.UpdateBatch(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}})
  - Hybrid.EntityFrameworkCore.Repository`2.UpdateBatchAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}})
  langs:
  - csharp
  - vb
  name: Repository<TEntity, TKey>
  nameWithType: Repository<TEntity, TKey>
  fullName: Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>
  type: Class
  source:
    remote:
      path: src/Hybrid.EntityFrameworkCore/Repository.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: Repository
    path: ../src/Hybrid.EntityFrameworkCore/Repository.cs
    startLine: 42
  assemblies:
  - Hybrid.EntityFrameworkCore
  namespace: Hybrid.EntityFrameworkCore
  summary: "\n实体数据存储操作类\n"
  example: []
  syntax:
    content: >-
      public class Repository<TEntity, TKey> : IRepository<TEntity, TKey> where TEntity : class, IEntity<TKey>, new()

          where TKey : IEquatable<TKey>
    typeParameters:
    - id: TEntity
      description: 实体类型
    - id: TKey
      description: 实体主键类型
    content.vb: >-
      Public Class Repository(Of TEntity As {Class, IEntity(Of TKey), New}, TKey As IEquatable(Of TKey))

          Implements IRepository(Of TEntity, TKey)
  inheritance:
  - System.Object
  implements:
  - Hybrid.Domain.Repositories.IRepository{{TEntity},{TKey}}
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - Hybrid.EntityFrameworkCore.Repository`2.OSharp.Entity.EntityExtensions.CheckICreatedTime``2
  - Hybrid.EntityFrameworkCore.Repository`2.OSharp.Entity.EntityExtensions.CheckICreationAudited``3(System.Security.Principal.IPrincipal)
  - Hybrid.EntityFrameworkCore.Repository`2.OSharp.Entity.EntityExtensions.CheckIUpdateAudited``3(System.Security.Principal.IPrincipal)
  - System.Object.OSharp.Extensions.ObjectExtensions.CastTo(System.Type)
  - System.Object.OSharp.Extensions.ObjectExtensions.CastTo``1
  - System.Object.OSharp.Extensions.ObjectExtensions.CastTo``1({T})
  - Hybrid.EntityFrameworkCore.Repository`2.OSharp.Extensions.ObjectExtensions.IsIn``1(Hybrid.EntityFrameworkCore.Repository{{TEntity},{TKey}}[])
  - System.Object.OSharp.Extensions.ObjectExtensions.ToDynamic
  - Hybrid.EntityFrameworkCore.Repository`2.OSharp.Extensions.ObjectExtensions.DeepClone``1
  - Hybrid.EntityFrameworkCore.Repository`2.OSharp.Extensions.ParameterCheckExtensions.Required``1(System.Func{Hybrid.EntityFrameworkCore.Repository{{TEntity},{TKey}},System.Boolean},System.String)
  - Hybrid.EntityFrameworkCore.Repository`2.OSharp.Extensions.ParameterCheckExtensions.Required``2(System.Func{Hybrid.EntityFrameworkCore.Repository{{TEntity},{TKey}},System.Boolean},System.String)
  - Hybrid.EntityFrameworkCore.Repository`2.OSharp.Extensions.ParameterCheckExtensions.CheckNotNull``1(System.String)
  - Hybrid.EntityFrameworkCore.Repository`2.OSharp.Extensions.TryCatchExtensions.TryCatch``1(System.Action{Hybrid.EntityFrameworkCore.Repository{{TEntity},{TKey}}},System.Action{System.Exception},System.Action{Hybrid.EntityFrameworkCore.Repository{{TEntity},{TKey}}})
  - Hybrid.EntityFrameworkCore.Repository`2.OSharp.Extensions.TryCatchExtensions.TryCatch``1(System.Action{Hybrid.EntityFrameworkCore.Repository{{TEntity},{TKey}}},System.Action{System.Exception})
  - Hybrid.EntityFrameworkCore.Repository`2.OSharp.Extensions.TryCatchExtensions.TryCatch``2(System.Func{Hybrid.EntityFrameworkCore.Repository{{TEntity},{TKey}},{TResult}},System.Action{System.Exception},System.Action{Hybrid.EntityFrameworkCore.Repository{{TEntity},{TKey}}})
  - Hybrid.EntityFrameworkCore.Repository`2.OSharp.Extensions.TryCatchExtensions.TryCatch``2(System.Func{Hybrid.EntityFrameworkCore.Repository{{TEntity},{TKey}},{TResult}},System.Action{System.Exception})
  - Hybrid.EntityFrameworkCore.Repository`2.OSharp.Extensions.TryCatchExtensions.TryFinally``1(System.Action{Hybrid.EntityFrameworkCore.Repository{{TEntity},{TKey}}},System.Action{Hybrid.EntityFrameworkCore.Repository{{TEntity},{TKey}}})
  - System.Object.OSharp.Json.JsonExtensions.ToJsonString(System.Boolean,System.Boolean)
  - System.Object.OSharp.Mapping.MapperExtensions.MapTo``1
  - Hybrid.EntityFrameworkCore.Repository`2.OSharp.Mapping.MapperExtensions.MapTo``2({TTarget})
  - System.Object.OSharp.Reflection.LockExtensions.Locking(System.Action)
  - Hybrid.EntityFrameworkCore.Repository`2.OSharp.Reflection.LockExtensions.Locking``1(System.Action{Hybrid.EntityFrameworkCore.Repository{{TEntity},{TKey}}})
  - System.Object.OSharp.Reflection.LockExtensions.Locking``1(System.Func{{TResult}})
  - Hybrid.EntityFrameworkCore.Repository`2.OSharp.Reflection.LockExtensions.Locking``2(System.Func{Hybrid.EntityFrameworkCore.Repository{{TEntity},{TKey}},{TResult}})
  - Hybrid.Domain.Repositories.IRepository{`0,`1}.Hybrid.EntityFrameworkCore.RepositoryExtensions.UpdateBatchAndIntercept``2(System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}},System.Action{Z.EntityFramework.Extensions.BatchDelete})
  - Hybrid.Domain.Repositories.IRepository{`0,`1}.Hybrid.EntityFrameworkCore.RepositoryExtensions.UpdateBatchAndInterceptAsync``2(System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}},System.Action{Z.EntityFramework.Extensions.BatchDelete})
  - Hybrid.Domain.Repositories.IRepository{`0,`1}.Hybrid.EntityFrameworkCore.RepositoryExtensions.UpdateBatchAndIntercept``2(System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}},System.Linq.Expressions.Expression{System.Func{{TEntity},{TEntity}}},System.Action{Z.EntityFramework.Extensions.BatchUpdate})
  - Hybrid.Domain.Repositories.IRepository{`0,`1}.Hybrid.EntityFrameworkCore.RepositoryExtensions.UpdateBatchAndInterceptAsync``2(System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}},System.Linq.Expressions.Expression{System.Func{{TEntity},{TEntity}}},System.Action{Z.EntityFramework.Extensions.BatchUpdate})
  - Hybrid.Domain.Repositories.IRepository{`0,`1}.Hybrid.EntityFrameworkCore.RepositoryExtensions.FromSql``2(System.String,System.Object[])
  - System.Object.Hybrid.Extensions.ObjectExtensions.CastTo(System.Type)
  - System.Object.Hybrid.Extensions.ObjectExtensions.CastTo``1
  - System.Object.Hybrid.Extensions.ObjectExtensions.CastTo``1({T})
  - Hybrid.EntityFrameworkCore.Repository`2.Hybrid.Extensions.ObjectExtensions.IsIn``1(Hybrid.EntityFrameworkCore.Repository{{TEntity},{TKey}}[])
  - System.Object.Hybrid.Extensions.ObjectExtensions.ToDynamic
  - Hybrid.EntityFrameworkCore.Repository`2.Hybrid.Extensions.ObjectExtensions.DeepClone``1
  - Hybrid.EntityFrameworkCore.Repository`2.Hybrid.Extensions.ParameterCheckExtensions.Required``1(System.Func{Hybrid.EntityFrameworkCore.Repository{{TEntity},{TKey}},System.Boolean},System.String)
  - Hybrid.EntityFrameworkCore.Repository`2.Hybrid.Extensions.ParameterCheckExtensions.Required``2(System.Func{Hybrid.EntityFrameworkCore.Repository{{TEntity},{TKey}},System.Boolean},System.String)
  - Hybrid.EntityFrameworkCore.Repository`2.Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(System.String)
  - Hybrid.EntityFrameworkCore.Repository`2.Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{Hybrid.EntityFrameworkCore.Repository{{TEntity},{TKey}}},System.Action{System.Exception},System.Action{Hybrid.EntityFrameworkCore.Repository{{TEntity},{TKey}}})
  - Hybrid.EntityFrameworkCore.Repository`2.Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{Hybrid.EntityFrameworkCore.Repository{{TEntity},{TKey}}},System.Action{System.Exception})
  - Hybrid.EntityFrameworkCore.Repository`2.Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{Hybrid.EntityFrameworkCore.Repository{{TEntity},{TKey}},{TResult}},System.Action{System.Exception},System.Action{Hybrid.EntityFrameworkCore.Repository{{TEntity},{TKey}}})
  - Hybrid.EntityFrameworkCore.Repository`2.Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{Hybrid.EntityFrameworkCore.Repository{{TEntity},{TKey}},{TResult}},System.Action{System.Exception})
  - Hybrid.EntityFrameworkCore.Repository`2.Hybrid.Extensions.TryCatchExtensions.TryFinally``1(System.Action{Hybrid.EntityFrameworkCore.Repository{{TEntity},{TKey}}},System.Action{Hybrid.EntityFrameworkCore.Repository{{TEntity},{TKey}}})
  - System.Object.Hybrid.Json.JsonExtensions.ToJsonString(System.Boolean,System.Boolean)
  - System.Object.Hybrid.Mapping.MapperExtensions.MapTo``1
  - Hybrid.EntityFrameworkCore.Repository`2.Hybrid.Mapping.MapperExtensions.MapTo``2({TTarget})
  - System.Object.Hybrid.Reflection.LockExtensions.Locking(System.Action)
  - Hybrid.EntityFrameworkCore.Repository`2.Hybrid.Reflection.LockExtensions.Locking``1(System.Action{Hybrid.EntityFrameworkCore.Repository{{TEntity},{TKey}}})
  - System.Object.Hybrid.Reflection.LockExtensions.Locking``1(System.Func{{TResult}})
  - Hybrid.EntityFrameworkCore.Repository`2.Hybrid.Reflection.LockExtensions.Locking``2(System.Func{Hybrid.EntityFrameworkCore.Repository{{TEntity},{TKey}},{TResult}})
  - Hybrid.EntityFrameworkCore.Repository`2.Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2
  - Hybrid.EntityFrameworkCore.Repository`2.Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(System.Security.Principal.IPrincipal)
  - Hybrid.EntityFrameworkCore.Repository`2.Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(System.Security.Principal.IPrincipal)
  nameWithType.vb: Repository(Of TEntity, TKey)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey)
  name.vb: Repository(Of TEntity, TKey)
- uid: Hybrid.EntityFrameworkCore.Repository`2.#ctor(System.IServiceProvider)
  commentId: M:Hybrid.EntityFrameworkCore.Repository`2.#ctor(System.IServiceProvider)
  id: '#ctor(System.IServiceProvider)'
  parent: Hybrid.EntityFrameworkCore.Repository`2
  langs:
  - csharp
  - vb
  name: Repository(IServiceProvider)
  nameWithType: Repository<TEntity, TKey>.Repository(IServiceProvider)
  fullName: Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>.Repository(System.IServiceProvider)
  type: Constructor
  source:
    remote:
      path: src/Hybrid.EntityFrameworkCore/Repository.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: .ctor
    path: ../src/Hybrid.EntityFrameworkCore/Repository.cs
    startLine: 55
  assemblies:
  - Hybrid.EntityFrameworkCore
  namespace: Hybrid.EntityFrameworkCore
  summary: "\n初始化一个<xref href=\"Hybrid.EntityFrameworkCore.Repository%602\" data-throw-if-not-resolved=\"false\"></xref>类型的新实例\n"
  example: []
  syntax:
    content: public Repository(IServiceProvider serviceProvider)
    parameters:
    - id: serviceProvider
      type: System.IServiceProvider
    content.vb: Public Sub New(serviceProvider As IServiceProvider)
  overload: Hybrid.EntityFrameworkCore.Repository`2.#ctor*
  nameWithType.vb: Repository(Of TEntity, TKey).Repository(IServiceProvider)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey).Repository(System.IServiceProvider)
- uid: Hybrid.EntityFrameworkCore.Repository`2.UnitOfWork
  commentId: P:Hybrid.EntityFrameworkCore.Repository`2.UnitOfWork
  id: UnitOfWork
  parent: Hybrid.EntityFrameworkCore.Repository`2
  langs:
  - csharp
  - vb
  name: UnitOfWork
  nameWithType: Repository<TEntity, TKey>.UnitOfWork
  fullName: Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>.UnitOfWork
  type: Property
  source:
    remote:
      path: src/Hybrid.EntityFrameworkCore/Repository.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: UnitOfWork
    path: ../src/Hybrid.EntityFrameworkCore/Repository.cs
    startLine: 68
  assemblies:
  - Hybrid.EntityFrameworkCore
  namespace: Hybrid.EntityFrameworkCore
  summary: "\n获取 当前单元操作对象\n"
  example: []
  syntax:
    content: public IUnitOfWork UnitOfWork { get; }
    parameters: []
    return:
      type: Hybrid.Domain.Uow.IUnitOfWork
    content.vb: Public ReadOnly Property UnitOfWork As IUnitOfWork
  overload: Hybrid.EntityFrameworkCore.Repository`2.UnitOfWork*
  implements:
  - Hybrid.Domain.Repositories.IRepository{{TEntity},{TKey}}.UnitOfWork
  nameWithType.vb: Repository(Of TEntity, TKey).UnitOfWork
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey).UnitOfWork
- uid: Hybrid.EntityFrameworkCore.Repository`2.Entities
  commentId: P:Hybrid.EntityFrameworkCore.Repository`2.Entities
  id: Entities
  parent: Hybrid.EntityFrameworkCore.Repository`2
  langs:
  - csharp
  - vb
  name: Entities
  nameWithType: Repository<TEntity, TKey>.Entities
  fullName: Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>.Entities
  type: Property
  source:
    remote:
      path: src/Hybrid.EntityFrameworkCore/Repository.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: Entities
    path: ../src/Hybrid.EntityFrameworkCore/Repository.cs
    startLine: 73
  assemblies:
  - Hybrid.EntityFrameworkCore
  namespace: Hybrid.EntityFrameworkCore
  summary: "\n获取 <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TEntity</code>不跟踪数据更改（NoTracking）的查询数据源\n"
  example: []
  syntax:
    content: public virtual IQueryable<TEntity> Entities { get; }
    parameters: []
    return:
      type: System.Linq.IQueryable{{TEntity}}
    content.vb: Public Overridable ReadOnly Property Entities As IQueryable(Of TEntity)
  overload: Hybrid.EntityFrameworkCore.Repository`2.Entities*
  nameWithType.vb: Repository(Of TEntity, TKey).Entities
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
  fullName.vb: Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey).Entities
- uid: Hybrid.EntityFrameworkCore.Repository`2.TrackEntities
  commentId: P:Hybrid.EntityFrameworkCore.Repository`2.TrackEntities
  id: TrackEntities
  parent: Hybrid.EntityFrameworkCore.Repository`2
  langs:
  - csharp
  - vb
  name: TrackEntities
  nameWithType: Repository<TEntity, TKey>.TrackEntities
  fullName: Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>.TrackEntities
  type: Property
  source:
    remote:
      path: src/Hybrid.EntityFrameworkCore/Repository.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: TrackEntities
    path: ../src/Hybrid.EntityFrameworkCore/Repository.cs
    startLine: 85
  assemblies:
  - Hybrid.EntityFrameworkCore
  namespace: Hybrid.EntityFrameworkCore
  summary: "\n获取 <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TEntity</code>跟踪数据更改（Tracking）的查询数据源\n"
  example: []
  syntax:
    content: public virtual IQueryable<TEntity> TrackEntities { get; }
    parameters: []
    return:
      type: System.Linq.IQueryable{{TEntity}}
    content.vb: Public Overridable ReadOnly Property TrackEntities As IQueryable(Of TEntity)
  overload: Hybrid.EntityFrameworkCore.Repository`2.TrackEntities*
  nameWithType.vb: Repository(Of TEntity, TKey).TrackEntities
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
  fullName.vb: Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey).TrackEntities
- uid: Hybrid.EntityFrameworkCore.Repository`2.Insert(`0[])
  commentId: M:Hybrid.EntityFrameworkCore.Repository`2.Insert(`0[])
  id: Insert(`0[])
  parent: Hybrid.EntityFrameworkCore.Repository`2
  langs:
  - csharp
  - vb
  name: Insert(TEntity[])
  nameWithType: Repository<TEntity, TKey>.Insert(TEntity[])
  fullName: Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>.Insert(TEntity[])
  type: Method
  source:
    remote:
      path: src/Hybrid.EntityFrameworkCore/Repository.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: Insert
    path: ../src/Hybrid.EntityFrameworkCore/Repository.cs
    startLine: 101
  assemblies:
  - Hybrid.EntityFrameworkCore
  namespace: Hybrid.EntityFrameworkCore
  summary: "\n插入实体\n"
  example: []
  syntax:
    content: public virtual int Insert(params TEntity[] entities)
    parameters:
    - id: entities
      type: '{TEntity}[]'
      description: 实体对象集合
    return:
      type: System.Int32
      description: 操作影响的行数
    content.vb: Public Overridable Function Insert(ParamArray entities As TEntity()) As Integer
  overload: Hybrid.EntityFrameworkCore.Repository`2.Insert*
  implements:
  - Hybrid.Domain.Repositories.IRepository{{TEntity},{TKey}}.Insert({TEntity}[])
  nameWithType.vb: Repository(Of TEntity, TKey).Insert(TEntity())
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey).Insert(TEntity())
  name.vb: Insert(TEntity())
- uid: Hybrid.EntityFrameworkCore.Repository`2.InsertOrUpdate(`0[],System.Func{`0,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}}})
  commentId: M:Hybrid.EntityFrameworkCore.Repository`2.InsertOrUpdate(`0[],System.Func{`0,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}}})
  id: InsertOrUpdate(`0[],System.Func{`0,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}}})
  parent: Hybrid.EntityFrameworkCore.Repository`2
  langs:
  - csharp
  - vb
  name: InsertOrUpdate(TEntity[], Func<TEntity, Expression<Func<TEntity, Boolean>>>)
  nameWithType: Repository<TEntity, TKey>.InsertOrUpdate(TEntity[], Func<TEntity, Expression<Func<TEntity, Boolean>>>)
  fullName: Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>.InsertOrUpdate(TEntity[], System.Func<TEntity, System.Linq.Expressions.Expression<System.Func<TEntity, System.Boolean>>>)
  type: Method
  source:
    remote:
      path: src/Hybrid.EntityFrameworkCore/Repository.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: InsertOrUpdate
    path: ../src/Hybrid.EntityFrameworkCore/Repository.cs
    startLine: 115
  assemblies:
  - Hybrid.EntityFrameworkCore
  namespace: Hybrid.EntityFrameworkCore
  summary: "\n插入或更新实体\n"
  example: []
  syntax:
    content: public virtual int InsertOrUpdate(TEntity[] entities, Func<TEntity, Expression<Func<TEntity, bool>>> existingFunc = null)
    parameters:
    - id: entities
      type: '{TEntity}[]'
      description: 要处理的实体
    - id: existingFunc
      type: System.Func{{TEntity},System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}}}
      description: 实体是否存在的判断委托
    return:
      type: System.Int32
      description: 操作影响的行数
    content.vb: Public Overridable Function InsertOrUpdate(entities As TEntity(), existingFunc As Func(Of TEntity, Expression(Of Func(Of TEntity, Boolean))) = Nothing) As Integer
  overload: Hybrid.EntityFrameworkCore.Repository`2.InsertOrUpdate*
  nameWithType.vb: Repository(Of TEntity, TKey).InsertOrUpdate(TEntity(), Func(Of TEntity, Expression(Of Func(Of TEntity, Boolean))))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey).InsertOrUpdate(TEntity(), System.Func(Of TEntity, System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Boolean))))
  name.vb: InsertOrUpdate(TEntity(), Func(Of TEntity, Expression(Of Func(Of TEntity, Boolean))))
- uid: Hybrid.EntityFrameworkCore.Repository`2.Insert``1(System.Collections.Generic.ICollection{``0},System.Action{``0},System.Func{``0,`0,`0})
  commentId: M:Hybrid.EntityFrameworkCore.Repository`2.Insert``1(System.Collections.Generic.ICollection{``0},System.Action{``0},System.Func{``0,`0,`0})
  id: Insert``1(System.Collections.Generic.ICollection{``0},System.Action{``0},System.Func{``0,`0,`0})
  parent: Hybrid.EntityFrameworkCore.Repository`2
  langs:
  - csharp
  - vb
  name: Insert<TInputDto>(ICollection<TInputDto>, Action<TInputDto>, Func<TInputDto, TEntity, TEntity>)
  nameWithType: Repository<TEntity, TKey>.Insert<TInputDto>(ICollection<TInputDto>, Action<TInputDto>, Func<TInputDto, TEntity, TEntity>)
  fullName: Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>.Insert<TInputDto>(System.Collections.Generic.ICollection<TInputDto>, System.Action<TInputDto>, System.Func<TInputDto, TEntity, TEntity>)
  type: Method
  source:
    remote:
      path: src/Hybrid.EntityFrameworkCore/Repository.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: Insert
    path: ../src/Hybrid.EntityFrameworkCore/Repository.cs
    startLine: 146
  assemblies:
  - Hybrid.EntityFrameworkCore
  namespace: Hybrid.EntityFrameworkCore
  summary: "\n以DTO为载体批量插入实体\n"
  example: []
  syntax:
    content: >-
      public virtual OperationResult Insert<TInputDto>(ICollection<TInputDto> dtos, Action<TInputDto> checkAction = null, Func<TInputDto, TEntity, TEntity> updateFunc = null)

          where TInputDto : IInputDto<TKey>
    parameters:
    - id: dtos
      type: System.Collections.Generic.ICollection{{TInputDto}}
      description: 添加DTO信息集合
    - id: checkAction
      type: System.Action{{TInputDto}}
      description: 添加信息合法性检查委托
    - id: updateFunc
      type: System.Func{{TInputDto},{TEntity},{TEntity}}
      description: 由DTO到实体的转换委托
    typeParameters:
    - id: TInputDto
      description: 添加DTO类型
    return:
      type: Hybrid.Data.OperationResult
      description: 业务操作结果
    content.vb: Public Overridable Function Insert(Of TInputDto As IInputDto(Of TKey))(dtos As ICollection(Of TInputDto), checkAction As Action(Of TInputDto) = Nothing, updateFunc As Func(Of TInputDto, TEntity, TEntity) = Nothing) As OperationResult
  overload: Hybrid.EntityFrameworkCore.Repository`2.Insert*
  implements:
  - Hybrid.Domain.Repositories.IRepository{{TEntity},{TKey}}.Insert``1(System.Collections.Generic.ICollection{{TInputDto}},System.Action{{TInputDto}},System.Func{{TInputDto},{TEntity},{TEntity}})
  nameWithType.vb: Repository(Of TEntity, TKey).Insert(Of TInputDto)(ICollection(Of TInputDto), Action(Of TInputDto), Func(Of TInputDto, TEntity, TEntity))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey).Insert(Of TInputDto)(System.Collections.Generic.ICollection(Of TInputDto), System.Action(Of TInputDto), System.Func(Of TInputDto, TEntity, TEntity))
  name.vb: Insert(Of TInputDto)(ICollection(Of TInputDto), Action(Of TInputDto), Func(Of TInputDto, TEntity, TEntity))
- uid: Hybrid.EntityFrameworkCore.Repository`2.Delete(`0[])
  commentId: M:Hybrid.EntityFrameworkCore.Repository`2.Delete(`0[])
  id: Delete(`0[])
  parent: Hybrid.EntityFrameworkCore.Repository`2
  langs:
  - csharp
  - vb
  name: Delete(TEntity[])
  nameWithType: Repository<TEntity, TKey>.Delete(TEntity[])
  fullName: Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>.Delete(TEntity[])
  type: Method
  source:
    remote:
      path: src/Hybrid.EntityFrameworkCore/Repository.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: Delete
    path: ../src/Hybrid.EntityFrameworkCore/Repository.cs
    startLine: 193
  assemblies:
  - Hybrid.EntityFrameworkCore
  namespace: Hybrid.EntityFrameworkCore
  summary: "\n删除实体\n"
  example: []
  syntax:
    content: public virtual int Delete(params TEntity[] entities)
    parameters:
    - id: entities
      type: '{TEntity}[]'
      description: 实体对象集合
    return:
      type: System.Int32
      description: 操作影响的行数
    content.vb: Public Overridable Function Delete(ParamArray entities As TEntity()) As Integer
  overload: Hybrid.EntityFrameworkCore.Repository`2.Delete*
  implements:
  - Hybrid.Domain.Repositories.IRepository{{TEntity},{TKey}}.Delete({TEntity}[])
  nameWithType.vb: Repository(Of TEntity, TKey).Delete(TEntity())
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey).Delete(TEntity())
  name.vb: Delete(TEntity())
- uid: Hybrid.EntityFrameworkCore.Repository`2.Delete(`1)
  commentId: M:Hybrid.EntityFrameworkCore.Repository`2.Delete(`1)
  id: Delete(`1)
  parent: Hybrid.EntityFrameworkCore.Repository`2
  langs:
  - csharp
  - vb
  name: Delete(TKey)
  nameWithType: Repository<TEntity, TKey>.Delete(TKey)
  fullName: Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>.Delete(TKey)
  type: Method
  source:
    remote:
      path: src/Hybrid.EntityFrameworkCore/Repository.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: Delete
    path: ../src/Hybrid.EntityFrameworkCore/Repository.cs
    startLine: 206
  assemblies:
  - Hybrid.EntityFrameworkCore
  namespace: Hybrid.EntityFrameworkCore
  summary: "\n删除指定编号的实体\n"
  example: []
  syntax:
    content: public virtual int Delete(TKey key)
    parameters:
    - id: key
      type: '{TKey}'
      description: 实体主键
    return:
      type: System.Int32
      description: 操作影响的行数
    content.vb: Public Overridable Function Delete(key As TKey) As Integer
  overload: Hybrid.EntityFrameworkCore.Repository`2.Delete*
  implements:
  - Hybrid.Domain.Repositories.IRepository{{TEntity},{TKey}}.Delete({TKey})
  nameWithType.vb: Repository(Of TEntity, TKey).Delete(TKey)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey).Delete(TKey)
- uid: Hybrid.EntityFrameworkCore.Repository`2.Delete(System.Collections.Generic.ICollection{`1},System.Action{`0},System.Func{`0,`0})
  commentId: M:Hybrid.EntityFrameworkCore.Repository`2.Delete(System.Collections.Generic.ICollection{`1},System.Action{`0},System.Func{`0,`0})
  id: Delete(System.Collections.Generic.ICollection{`1},System.Action{`0},System.Func{`0,`0})
  parent: Hybrid.EntityFrameworkCore.Repository`2
  langs:
  - csharp
  - vb
  name: Delete(ICollection<TKey>, Action<TEntity>, Func<TEntity, TEntity>)
  nameWithType: Repository<TEntity, TKey>.Delete(ICollection<TKey>, Action<TEntity>, Func<TEntity, TEntity>)
  fullName: Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>.Delete(System.Collections.Generic.ICollection<TKey>, System.Action<TEntity>, System.Func<TEntity, TEntity>)
  type: Method
  source:
    remote:
      path: src/Hybrid.EntityFrameworkCore/Repository.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: Delete
    path: ../src/Hybrid.EntityFrameworkCore/Repository.cs
    startLine: 221
  assemblies:
  - Hybrid.EntityFrameworkCore
  namespace: Hybrid.EntityFrameworkCore
  summary: "\n以标识集合批量删除实体\n"
  example: []
  syntax:
    content: public virtual OperationResult Delete(ICollection<TKey> ids, Action<TEntity> checkAction = null, Func<TEntity, TEntity> deleteFunc = null)
    parameters:
    - id: ids
      type: System.Collections.Generic.ICollection{{TKey}}
      description: 标识集合
    - id: checkAction
      type: System.Action{{TEntity}}
      description: 删除前置检查委托
    - id: deleteFunc
      type: System.Func{{TEntity},{TEntity}}
      description: 删除委托，用于删除关联信息
    return:
      type: Hybrid.Data.OperationResult
      description: 业务操作结果
    content.vb: Public Overridable Function Delete(ids As ICollection(Of TKey), checkAction As Action(Of TEntity) = Nothing, deleteFunc As Func(Of TEntity, TEntity) = Nothing) As OperationResult
  overload: Hybrid.EntityFrameworkCore.Repository`2.Delete*
  implements:
  - Hybrid.Domain.Repositories.IRepository{{TEntity},{TKey}}.Delete(System.Collections.Generic.ICollection{{TKey}},System.Action{{TEntity}},System.Func{{TEntity},{TEntity}})
  nameWithType.vb: Repository(Of TEntity, TKey).Delete(ICollection(Of TKey), Action(Of TEntity), Func(Of TEntity, TEntity))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey).Delete(System.Collections.Generic.ICollection(Of TKey), System.Action(Of TEntity), System.Func(Of TEntity, TEntity))
  name.vb: Delete(ICollection(Of TKey), Action(Of TEntity), Func(Of TEntity, TEntity))
- uid: Hybrid.EntityFrameworkCore.Repository`2.DeleteBatch(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  commentId: M:Hybrid.EntityFrameworkCore.Repository`2.DeleteBatch(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  id: DeleteBatch(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  parent: Hybrid.EntityFrameworkCore.Repository`2
  langs:
  - csharp
  - vb
  name: DeleteBatch(Expression<Func<TEntity, Boolean>>)
  nameWithType: Repository<TEntity, TKey>.DeleteBatch(Expression<Func<TEntity, Boolean>>)
  fullName: Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>.DeleteBatch(System.Linq.Expressions.Expression<System.Func<TEntity, System.Boolean>>)
  type: Method
  source:
    remote:
      path: src/Hybrid.EntityFrameworkCore/Repository.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: DeleteBatch
    path: ../src/Hybrid.EntityFrameworkCore/Repository.cs
    startLine: 269
  assemblies:
  - Hybrid.EntityFrameworkCore
  namespace: Hybrid.EntityFrameworkCore
  summary: "\n删除所有符合特定条件的实体\n"
  example: []
  syntax:
    content: public virtual int DeleteBatch(Expression<Func<TEntity, bool>> predicate)
    parameters:
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}}
      description: 查询条件谓语表达式
    return:
      type: System.Int32
      description: 操作影响的行数
    content.vb: Public Overridable Function DeleteBatch(predicate As Expression(Of Func(Of TEntity, Boolean))) As Integer
  overload: Hybrid.EntityFrameworkCore.Repository`2.DeleteBatch*
  implements:
  - Hybrid.Domain.Repositories.IRepository{{TEntity},{TKey}}.DeleteBatch(System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}})
  nameWithType.vb: Repository(Of TEntity, TKey).DeleteBatch(Expression(Of Func(Of TEntity, Boolean)))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey).DeleteBatch(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Boolean)))
  name.vb: DeleteBatch(Expression(Of Func(Of TEntity, Boolean)))
- uid: Hybrid.EntityFrameworkCore.Repository`2.Update(`0[])
  commentId: M:Hybrid.EntityFrameworkCore.Repository`2.Update(`0[])
  id: Update(`0[])
  parent: Hybrid.EntityFrameworkCore.Repository`2
  langs:
  - csharp
  - vb
  name: Update(TEntity[])
  nameWithType: Repository<TEntity, TKey>.Update(TEntity[])
  fullName: Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>.Update(TEntity[])
  type: Method
  source:
    remote:
      path: src/Hybrid.EntityFrameworkCore/Repository.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: Update
    path: ../src/Hybrid.EntityFrameworkCore/Repository.cs
    startLine: 317
  assemblies:
  - Hybrid.EntityFrameworkCore
  namespace: Hybrid.EntityFrameworkCore
  summary: "\n更新实体对象\n"
  example: []
  syntax:
    content: public virtual int Update(params TEntity[] entities)
    parameters:
    - id: entities
      type: '{TEntity}[]'
      description: 更新后的实体对象
    return:
      type: System.Int32
      description: 操作影响的行数
    content.vb: Public Overridable Function Update(ParamArray entities As TEntity()) As Integer
  overload: Hybrid.EntityFrameworkCore.Repository`2.Update*
  implements:
  - Hybrid.Domain.Repositories.IRepository{{TEntity},{TKey}}.Update({TEntity}[])
  nameWithType.vb: Repository(Of TEntity, TKey).Update(TEntity())
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey).Update(TEntity())
  name.vb: Update(TEntity())
- uid: Hybrid.EntityFrameworkCore.Repository`2.Update``1(System.Collections.Generic.ICollection{``0},System.Action{``0,`0},System.Func{``0,`0,`0})
  commentId: M:Hybrid.EntityFrameworkCore.Repository`2.Update``1(System.Collections.Generic.ICollection{``0},System.Action{``0,`0},System.Func{``0,`0,`0})
  id: Update``1(System.Collections.Generic.ICollection{``0},System.Action{``0,`0},System.Func{``0,`0,`0})
  parent: Hybrid.EntityFrameworkCore.Repository`2
  langs:
  - csharp
  - vb
  name: Update<TEditDto>(ICollection<TEditDto>, Action<TEditDto, TEntity>, Func<TEditDto, TEntity, TEntity>)
  nameWithType: Repository<TEntity, TKey>.Update<TEditDto>(ICollection<TEditDto>, Action<TEditDto, TEntity>, Func<TEditDto, TEntity, TEntity>)
  fullName: Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>.Update<TEditDto>(System.Collections.Generic.ICollection<TEditDto>, System.Action<TEditDto, TEntity>, System.Func<TEditDto, TEntity, TEntity>)
  type: Method
  source:
    remote:
      path: src/Hybrid.EntityFrameworkCore/Repository.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: Update
    path: ../src/Hybrid.EntityFrameworkCore/Repository.cs
    startLine: 333
  assemblies:
  - Hybrid.EntityFrameworkCore
  namespace: Hybrid.EntityFrameworkCore
  summary: "\n以DTO为载体批量更新实体\n"
  example: []
  syntax:
    content: >-
      public virtual OperationResult Update<TEditDto>(ICollection<TEditDto> dtos, Action<TEditDto, TEntity> checkAction = null, Func<TEditDto, TEntity, TEntity> updateFunc = null)

          where TEditDto : IInputDto<TKey>
    parameters:
    - id: dtos
      type: System.Collections.Generic.ICollection{{TEditDto}}
      description: 更新DTO信息集合
    - id: checkAction
      type: System.Action{{TEditDto},{TEntity}}
      description: 更新信息合法性检查委托
    - id: updateFunc
      type: System.Func{{TEditDto},{TEntity},{TEntity}}
      description: 由DTO到实体的转换委托
    typeParameters:
    - id: TEditDto
      description: 更新DTO类型
    return:
      type: Hybrid.Data.OperationResult
      description: 业务操作结果
    content.vb: Public Overridable Function Update(Of TEditDto As IInputDto(Of TKey))(dtos As ICollection(Of TEditDto), checkAction As Action(Of TEditDto, TEntity) = Nothing, updateFunc As Func(Of TEditDto, TEntity, TEntity) = Nothing) As OperationResult
  overload: Hybrid.EntityFrameworkCore.Repository`2.Update*
  implements:
  - Hybrid.Domain.Repositories.IRepository{{TEntity},{TKey}}.Update``1(System.Collections.Generic.ICollection{{TEditDto}},System.Action{{TEditDto},{TEntity}},System.Func{{TEditDto},{TEntity},{TEntity}})
  nameWithType.vb: Repository(Of TEntity, TKey).Update(Of TEditDto)(ICollection(Of TEditDto), Action(Of TEditDto, TEntity), Func(Of TEditDto, TEntity, TEntity))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey).Update(Of TEditDto)(System.Collections.Generic.ICollection(Of TEditDto), System.Action(Of TEditDto, TEntity), System.Func(Of TEditDto, TEntity, TEntity))
  name.vb: Update(Of TEditDto)(ICollection(Of TEditDto), Action(Of TEditDto, TEntity), Func(Of TEditDto, TEntity, TEntity))
- uid: Hybrid.EntityFrameworkCore.Repository`2.UpdateBatch(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}})
  commentId: M:Hybrid.EntityFrameworkCore.Repository`2.UpdateBatch(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}})
  id: UpdateBatch(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}})
  parent: Hybrid.EntityFrameworkCore.Repository`2
  langs:
  - csharp
  - vb
  name: UpdateBatch(Expression<Func<TEntity, Boolean>>, Expression<Func<TEntity, TEntity>>)
  nameWithType: Repository<TEntity, TKey>.UpdateBatch(Expression<Func<TEntity, Boolean>>, Expression<Func<TEntity, TEntity>>)
  fullName: Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>.UpdateBatch(System.Linq.Expressions.Expression<System.Func<TEntity, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<TEntity, TEntity>>)
  type: Method
  source:
    remote:
      path: src/Hybrid.EntityFrameworkCore/Repository.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: UpdateBatch
    path: ../src/Hybrid.EntityFrameworkCore/Repository.cs
    startLine: 386
  assemblies:
  - Hybrid.EntityFrameworkCore
  namespace: Hybrid.EntityFrameworkCore
  summary: "\n批量更新所有符合特定条件的实体\n"
  example: []
  syntax:
    content: public virtual int UpdateBatch(Expression<Func<TEntity, bool>> predicate, Expression<Func<TEntity, TEntity>> updateExpression)
    parameters:
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}}
      description: 查询条件的谓语表达式
    - id: updateExpression
      type: System.Linq.Expressions.Expression{System.Func{{TEntity},{TEntity}}}
      description: 属性更新表达式
    return:
      type: System.Int32
      description: 操作影响的行数
    content.vb: Public Overridable Function UpdateBatch(predicate As Expression(Of Func(Of TEntity, Boolean)), updateExpression As Expression(Of Func(Of TEntity, TEntity))) As Integer
  overload: Hybrid.EntityFrameworkCore.Repository`2.UpdateBatch*
  implements:
  - Hybrid.Domain.Repositories.IRepository{{TEntity},{TKey}}.UpdateBatch(System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}},System.Linq.Expressions.Expression{System.Func{{TEntity},{TEntity}}})
  nameWithType.vb: Repository(Of TEntity, TKey).UpdateBatch(Expression(Of Func(Of TEntity, Boolean)), Expression(Of Func(Of TEntity, TEntity)))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey).UpdateBatch(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of TEntity, TEntity)))
  name.vb: UpdateBatch(Expression(Of Func(Of TEntity, Boolean)), Expression(Of Func(Of TEntity, TEntity)))
- uid: Hybrid.EntityFrameworkCore.Repository`2.CheckExists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},`1)
  commentId: M:Hybrid.EntityFrameworkCore.Repository`2.CheckExists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},`1)
  id: CheckExists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},`1)
  parent: Hybrid.EntityFrameworkCore.Repository`2
  langs:
  - csharp
  - vb
  name: CheckExists(Expression<Func<TEntity, Boolean>>, TKey)
  nameWithType: Repository<TEntity, TKey>.CheckExists(Expression<Func<TEntity, Boolean>>, TKey)
  fullName: Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>.CheckExists(System.Linq.Expressions.Expression<System.Func<TEntity, System.Boolean>>, TKey)
  type: Method
  source:
    remote:
      path: src/Hybrid.EntityFrameworkCore/Repository.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: CheckExists
    path: ../src/Hybrid.EntityFrameworkCore/Repository.cs
    startLine: 401
  assemblies:
  - Hybrid.EntityFrameworkCore
  namespace: Hybrid.EntityFrameworkCore
  summary: "\n检查实体是否存在\n"
  example: []
  syntax:
    content: public virtual bool CheckExists(Expression<Func<TEntity, bool>> predicate, TKey id = null)
    parameters:
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}}
      description: 查询条件谓语表达式
    - id: id
      type: '{TKey}'
      description: 编辑的实体标识
    return:
      type: System.Boolean
      description: 是否存在
    content.vb: Public Overridable Function CheckExists(predicate As Expression(Of Func(Of TEntity, Boolean)), id As TKey = Nothing) As Boolean
  overload: Hybrid.EntityFrameworkCore.Repository`2.CheckExists*
  implements:
  - Hybrid.Domain.Repositories.IRepository{{TEntity},{TKey}}.CheckExists(System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}},{TKey})
  nameWithType.vb: Repository(Of TEntity, TKey).CheckExists(Expression(Of Func(Of TEntity, Boolean)), TKey)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey).CheckExists(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Boolean)), TKey)
  name.vb: CheckExists(Expression(Of Func(Of TEntity, Boolean)), TKey)
- uid: Hybrid.EntityFrameworkCore.Repository`2.Get(`1)
  commentId: M:Hybrid.EntityFrameworkCore.Repository`2.Get(`1)
  id: Get(`1)
  parent: Hybrid.EntityFrameworkCore.Repository`2
  langs:
  - csharp
  - vb
  name: Get(TKey)
  nameWithType: Repository<TEntity, TKey>.Get(TKey)
  fullName: Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>.Get(TKey)
  type: Method
  source:
    remote:
      path: src/Hybrid.EntityFrameworkCore/Repository.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: Get
    path: ../src/Hybrid.EntityFrameworkCore/Repository.cs
    startLine: 418
  assemblies:
  - Hybrid.EntityFrameworkCore
  namespace: Hybrid.EntityFrameworkCore
  summary: "\n查找指定主键的实体\n"
  example: []
  syntax:
    content: public virtual TEntity Get(TKey key)
    parameters:
    - id: key
      type: '{TKey}'
      description: 实体主键
    return:
      type: '{TEntity}'
      description: 符合主键的实体，不存在时返回null
    content.vb: Public Overridable Function Get(key As TKey) As TEntity
  overload: Hybrid.EntityFrameworkCore.Repository`2.Get*
  implements:
  - Hybrid.Domain.Repositories.IRepository{{TEntity},{TKey}}.Get({TKey})
  nameWithType.vb: Repository(Of TEntity, TKey).Get(TKey)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey).Get(TKey)
- uid: Hybrid.EntityFrameworkCore.Repository`2.GetFirst(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  commentId: M:Hybrid.EntityFrameworkCore.Repository`2.GetFirst(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  id: GetFirst(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  parent: Hybrid.EntityFrameworkCore.Repository`2
  langs:
  - csharp
  - vb
  name: GetFirst(Expression<Func<TEntity, Boolean>>)
  nameWithType: Repository<TEntity, TKey>.GetFirst(Expression<Func<TEntity, Boolean>>)
  fullName: Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>.GetFirst(System.Linq.Expressions.Expression<System.Func<TEntity, System.Boolean>>)
  type: Method
  source:
    remote:
      path: src/Hybrid.EntityFrameworkCore/Repository.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: GetFirst
    path: ../src/Hybrid.EntityFrameworkCore/Repository.cs
    startLine: 430
  assemblies:
  - Hybrid.EntityFrameworkCore
  namespace: Hybrid.EntityFrameworkCore
  summary: "\n查找第一个符合条件的数据\n"
  example: []
  syntax:
    content: public TEntity GetFirst(Expression<Func<TEntity, bool>> predicate)
    parameters:
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}}
      description: 数据查询谓语表达式
    return:
      type: '{TEntity}'
      description: 符合条件的实体，不存在时返回null
    content.vb: Public Function GetFirst(predicate As Expression(Of Func(Of TEntity, Boolean))) As TEntity
  overload: Hybrid.EntityFrameworkCore.Repository`2.GetFirst*
  implements:
  - Hybrid.Domain.Repositories.IRepository{{TEntity},{TKey}}.GetFirst(System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}})
  nameWithType.vb: Repository(Of TEntity, TKey).GetFirst(Expression(Of Func(Of TEntity, Boolean)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey).GetFirst(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Boolean)))
  name.vb: GetFirst(Expression(Of Func(Of TEntity, Boolean)))
- uid: Hybrid.EntityFrameworkCore.Repository`2.GetFirst(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)
  commentId: M:Hybrid.EntityFrameworkCore.Repository`2.GetFirst(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)
  id: GetFirst(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)
  parent: Hybrid.EntityFrameworkCore.Repository`2
  langs:
  - csharp
  - vb
  name: GetFirst(Expression<Func<TEntity, Boolean>>, Boolean)
  nameWithType: Repository<TEntity, TKey>.GetFirst(Expression<Func<TEntity, Boolean>>, Boolean)
  fullName: Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>.GetFirst(System.Linq.Expressions.Expression<System.Func<TEntity, System.Boolean>>, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Hybrid.EntityFrameworkCore/Repository.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: GetFirst
    path: ../src/Hybrid.EntityFrameworkCore/Repository.cs
    startLine: 442
  assemblies:
  - Hybrid.EntityFrameworkCore
  namespace: Hybrid.EntityFrameworkCore
  summary: "\n查找第一个符合条件的数据\n"
  example: []
  syntax:
    content: public TEntity GetFirst(Expression<Func<TEntity, bool>> predicate, bool filterByDataAuth)
    parameters:
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}}
      description: 数据查询谓语表达式
    - id: filterByDataAuth
      type: System.Boolean
      description: 是否使用数据权限过滤，数据权限一般用于存在用户实例的查询，系统查询不启用数据权限过滤
    return:
      type: '{TEntity}'
      description: 符合条件的实体，不存在时返回null
    content.vb: Public Function GetFirst(predicate As Expression(Of Func(Of TEntity, Boolean)), filterByDataAuth As Boolean) As TEntity
  overload: Hybrid.EntityFrameworkCore.Repository`2.GetFirst*
  implements:
  - Hybrid.Domain.Repositories.IRepository{{TEntity},{TKey}}.GetFirst(System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}},System.Boolean)
  nameWithType.vb: Repository(Of TEntity, TKey).GetFirst(Expression(Of Func(Of TEntity, Boolean)), Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey).GetFirst(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Boolean)), System.Boolean)
  name.vb: GetFirst(Expression(Of Func(Of TEntity, Boolean)), Boolean)
- uid: Hybrid.EntityFrameworkCore.Repository`2.QueryAsNoTracking
  commentId: M:Hybrid.EntityFrameworkCore.Repository`2.QueryAsNoTracking
  id: QueryAsNoTracking
  parent: Hybrid.EntityFrameworkCore.Repository`2
  langs:
  - csharp
  - vb
  name: QueryAsNoTracking()
  nameWithType: Repository<TEntity, TKey>.QueryAsNoTracking()
  fullName: Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>.QueryAsNoTracking()
  type: Method
  source:
    remote:
      path: src/Hybrid.EntityFrameworkCore/Repository.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: QueryAsNoTracking
    path: ../src/Hybrid.EntityFrameworkCore/Repository.cs
    startLine: 452
  assemblies:
  - Hybrid.EntityFrameworkCore
  namespace: Hybrid.EntityFrameworkCore
  summary: "\n获取<code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TEntity</code>不跟踪数据更改（NoTracking）的查询数据源\n"
  example: []
  syntax:
    content: public virtual IQueryable<TEntity> QueryAsNoTracking()
    return:
      type: System.Linq.IQueryable{{TEntity}}
      description: 符合条件的数据集
    content.vb: Public Overridable Function QueryAsNoTracking As IQueryable(Of TEntity)
  overload: Hybrid.EntityFrameworkCore.Repository`2.QueryAsNoTracking*
  implements:
  - Hybrid.Domain.Repositories.IRepository{{TEntity},{TKey}}.QueryAsNoTracking
  nameWithType.vb: Repository(Of TEntity, TKey).QueryAsNoTracking()
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey).QueryAsNoTracking()
- uid: Hybrid.EntityFrameworkCore.Repository`2.QueryAsNoTracking(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  commentId: M:Hybrid.EntityFrameworkCore.Repository`2.QueryAsNoTracking(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  id: QueryAsNoTracking(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  parent: Hybrid.EntityFrameworkCore.Repository`2
  langs:
  - csharp
  - vb
  name: QueryAsNoTracking(Expression<Func<TEntity, Boolean>>)
  nameWithType: Repository<TEntity, TKey>.QueryAsNoTracking(Expression<Func<TEntity, Boolean>>)
  fullName: Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>.QueryAsNoTracking(System.Linq.Expressions.Expression<System.Func<TEntity, System.Boolean>>)
  type: Method
  source:
    remote:
      path: src/Hybrid.EntityFrameworkCore/Repository.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: QueryAsNoTracking
    path: ../src/Hybrid.EntityFrameworkCore/Repository.cs
    startLine: 462
  assemblies:
  - Hybrid.EntityFrameworkCore
  namespace: Hybrid.EntityFrameworkCore
  summary: "\n获取<code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TEntity</code>不跟踪数据更改（NoTracking）的查询数据源\n"
  example: []
  syntax:
    content: public virtual IQueryable<TEntity> QueryAsNoTracking(Expression<Func<TEntity, bool>> predicate)
    parameters:
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}}
      description: 数据查询谓语表达式
    return:
      type: System.Linq.IQueryable{{TEntity}}
      description: 符合条件的数据集
    content.vb: Public Overridable Function QueryAsNoTracking(predicate As Expression(Of Func(Of TEntity, Boolean))) As IQueryable(Of TEntity)
  overload: Hybrid.EntityFrameworkCore.Repository`2.QueryAsNoTracking*
  implements:
  - Hybrid.Domain.Repositories.IRepository{{TEntity},{TKey}}.QueryAsNoTracking(System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}})
  nameWithType.vb: Repository(Of TEntity, TKey).QueryAsNoTracking(Expression(Of Func(Of TEntity, Boolean)))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey).QueryAsNoTracking(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Boolean)))
  name.vb: QueryAsNoTracking(Expression(Of Func(Of TEntity, Boolean)))
- uid: Hybrid.EntityFrameworkCore.Repository`2.QueryAsNoTracking(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)
  commentId: M:Hybrid.EntityFrameworkCore.Repository`2.QueryAsNoTracking(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)
  id: QueryAsNoTracking(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)
  parent: Hybrid.EntityFrameworkCore.Repository`2
  langs:
  - csharp
  - vb
  name: QueryAsNoTracking(Expression<Func<TEntity, Boolean>>, Boolean)
  nameWithType: Repository<TEntity, TKey>.QueryAsNoTracking(Expression<Func<TEntity, Boolean>>, Boolean)
  fullName: Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>.QueryAsNoTracking(System.Linq.Expressions.Expression<System.Func<TEntity, System.Boolean>>, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Hybrid.EntityFrameworkCore/Repository.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: QueryAsNoTracking
    path: ../src/Hybrid.EntityFrameworkCore/Repository.cs
    startLine: 473
  assemblies:
  - Hybrid.EntityFrameworkCore
  namespace: Hybrid.EntityFrameworkCore
  summary: "\n获取<code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TEntity</code>不跟踪数据更改（NoTracking）的查询数据源，并可附加过滤条件及是否启用数据权限过滤\n"
  example: []
  syntax:
    content: public virtual IQueryable<TEntity> QueryAsNoTracking(Expression<Func<TEntity, bool>> predicate, bool filterByDataAuth)
    parameters:
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}}
      description: 数据过滤表达式
    - id: filterByDataAuth
      type: System.Boolean
      description: 是否使用数据权限过滤，数据权限一般用于存在用户实例的查询，系统查询不启用数据权限过滤
    return:
      type: System.Linq.IQueryable{{TEntity}}
      description: 符合条件的数据集
    content.vb: Public Overridable Function QueryAsNoTracking(predicate As Expression(Of Func(Of TEntity, Boolean)), filterByDataAuth As Boolean) As IQueryable(Of TEntity)
  overload: Hybrid.EntityFrameworkCore.Repository`2.QueryAsNoTracking*
  implements:
  - Hybrid.Domain.Repositories.IRepository{{TEntity},{TKey}}.QueryAsNoTracking(System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}},System.Boolean)
  nameWithType.vb: Repository(Of TEntity, TKey).QueryAsNoTracking(Expression(Of Func(Of TEntity, Boolean)), Boolean)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey).QueryAsNoTracking(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Boolean)), System.Boolean)
  name.vb: QueryAsNoTracking(Expression(Of Func(Of TEntity, Boolean)), Boolean)
- uid: Hybrid.EntityFrameworkCore.Repository`2.QueryAsNoTracking(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
  commentId: M:Hybrid.EntityFrameworkCore.Repository`2.QueryAsNoTracking(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
  id: QueryAsNoTracking(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
  parent: Hybrid.EntityFrameworkCore.Repository`2
  langs:
  - csharp
  - vb
  name: QueryAsNoTracking(Expression<Func<TEntity, Object>>[])
  nameWithType: Repository<TEntity, TKey>.QueryAsNoTracking(Expression<Func<TEntity, Object>>[])
  fullName: Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>.QueryAsNoTracking(System.Linq.Expressions.Expression<System.Func<TEntity, System.Object>>[])
  type: Method
  source:
    remote:
      path: src/Hybrid.EntityFrameworkCore/Repository.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: QueryAsNoTracking
    path: ../src/Hybrid.EntityFrameworkCore/Repository.cs
    startLine: 483
  assemblies:
  - Hybrid.EntityFrameworkCore
  namespace: Hybrid.EntityFrameworkCore
  summary: "\n获取<code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TEntity</code>不跟踪数据更改（NoTracking）的查询数据源，并可Include导航属性\n"
  example: []
  syntax:
    content: public virtual IQueryable<TEntity> QueryAsNoTracking(params Expression<Func<TEntity, object>>[] includePropertySelectors)
    parameters:
    - id: includePropertySelectors
      type: System.Linq.Expressions.Expression{System.Func{{TEntity},System.Object}}[]
      description: 要Include操作的属性表达式
    return:
      type: System.Linq.IQueryable{{TEntity}}
      description: 符合条件的数据集
    content.vb: Public Overridable Function QueryAsNoTracking(ParamArray includePropertySelectors As Expression(Of Func(Of TEntity, Object))()) As IQueryable(Of TEntity)
  overload: Hybrid.EntityFrameworkCore.Repository`2.QueryAsNoTracking*
  implements:
  - Hybrid.Domain.Repositories.IRepository{{TEntity},{TKey}}.QueryAsNoTracking(System.Linq.Expressions.Expression{System.Func{{TEntity},System.Object}}[])
  nameWithType.vb: Repository(Of TEntity, TKey).QueryAsNoTracking(Expression(Of Func(Of TEntity, Object))())
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey).QueryAsNoTracking(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Object))())
  name.vb: QueryAsNoTracking(Expression(Of Func(Of TEntity, Object))())
- uid: Hybrid.EntityFrameworkCore.Repository`2.Query
  commentId: M:Hybrid.EntityFrameworkCore.Repository`2.Query
  id: Query
  parent: Hybrid.EntityFrameworkCore.Repository`2
  langs:
  - csharp
  - vb
  name: Query()
  nameWithType: Repository<TEntity, TKey>.Query()
  fullName: Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>.Query()
  type: Method
  source:
    remote:
      path: src/Hybrid.EntityFrameworkCore/Repository.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: Query
    path: ../src/Hybrid.EntityFrameworkCore/Repository.cs
    startLine: 492
  assemblies:
  - Hybrid.EntityFrameworkCore
  namespace: Hybrid.EntityFrameworkCore
  summary: "\n获取<code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TEntity</code>跟踪数据更改（Tracking）的查询数据源\n"
  example: []
  syntax:
    content: public virtual IQueryable<TEntity> Query()
    return:
      type: System.Linq.IQueryable{{TEntity}}
      description: 符合条件的数据集
    content.vb: Public Overridable Function Query As IQueryable(Of TEntity)
  overload: Hybrid.EntityFrameworkCore.Repository`2.Query*
  implements:
  - Hybrid.Domain.Repositories.IRepository{{TEntity},{TKey}}.Query
  nameWithType.vb: Repository(Of TEntity, TKey).Query()
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey).Query()
- uid: Hybrid.EntityFrameworkCore.Repository`2.Query(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  commentId: M:Hybrid.EntityFrameworkCore.Repository`2.Query(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  id: Query(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  parent: Hybrid.EntityFrameworkCore.Repository`2
  langs:
  - csharp
  - vb
  name: Query(Expression<Func<TEntity, Boolean>>)
  nameWithType: Repository<TEntity, TKey>.Query(Expression<Func<TEntity, Boolean>>)
  fullName: Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>.Query(System.Linq.Expressions.Expression<System.Func<TEntity, System.Boolean>>)
  type: Method
  source:
    remote:
      path: src/Hybrid.EntityFrameworkCore/Repository.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: Query
    path: ../src/Hybrid.EntityFrameworkCore/Repository.cs
    startLine: 502
  assemblies:
  - Hybrid.EntityFrameworkCore
  namespace: Hybrid.EntityFrameworkCore
  summary: "\n获取<code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TEntity</code>跟踪数据更改（Tracking）的查询数据源\n"
  example: []
  syntax:
    content: public virtual IQueryable<TEntity> Query(Expression<Func<TEntity, bool>> predicate)
    parameters:
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}}
      description: 数据过滤表达式
    return:
      type: System.Linq.IQueryable{{TEntity}}
      description: 符合条件的数据集
    content.vb: Public Overridable Function Query(predicate As Expression(Of Func(Of TEntity, Boolean))) As IQueryable(Of TEntity)
  overload: Hybrid.EntityFrameworkCore.Repository`2.Query*
  implements:
  - Hybrid.Domain.Repositories.IRepository{{TEntity},{TKey}}.Query(System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}})
  nameWithType.vb: Repository(Of TEntity, TKey).Query(Expression(Of Func(Of TEntity, Boolean)))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey).Query(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Boolean)))
  name.vb: Query(Expression(Of Func(Of TEntity, Boolean)))
- uid: Hybrid.EntityFrameworkCore.Repository`2.Query(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)
  commentId: M:Hybrid.EntityFrameworkCore.Repository`2.Query(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)
  id: Query(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)
  parent: Hybrid.EntityFrameworkCore.Repository`2
  langs:
  - csharp
  - vb
  name: Query(Expression<Func<TEntity, Boolean>>, Boolean)
  nameWithType: Repository<TEntity, TKey>.Query(Expression<Func<TEntity, Boolean>>, Boolean)
  fullName: Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>.Query(System.Linq.Expressions.Expression<System.Func<TEntity, System.Boolean>>, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Hybrid.EntityFrameworkCore/Repository.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: Query
    path: ../src/Hybrid.EntityFrameworkCore/Repository.cs
    startLine: 513
  assemblies:
  - Hybrid.EntityFrameworkCore
  namespace: Hybrid.EntityFrameworkCore
  summary: "\n获取<code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TEntity</code>跟踪数据更改（Tracking）的查询数据源，并可附加过滤条件及是否启用数据权限过滤\n"
  example: []
  syntax:
    content: public IQueryable<TEntity> Query(Expression<Func<TEntity, bool>> predicate, bool filterByDataAuth)
    parameters:
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}}
      description: 数据过滤表达式
    - id: filterByDataAuth
      type: System.Boolean
      description: 是否使用数据权限过滤，数据权限一般用于存在用户实例的查询，系统查询不启用数据权限过滤
    return:
      type: System.Linq.IQueryable{{TEntity}}
      description: 符合条件的数据集
    content.vb: Public Function Query(predicate As Expression(Of Func(Of TEntity, Boolean)), filterByDataAuth As Boolean) As IQueryable(Of TEntity)
  overload: Hybrid.EntityFrameworkCore.Repository`2.Query*
  implements:
  - Hybrid.Domain.Repositories.IRepository{{TEntity},{TKey}}.Query(System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}},System.Boolean)
  nameWithType.vb: Repository(Of TEntity, TKey).Query(Expression(Of Func(Of TEntity, Boolean)), Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey).Query(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Boolean)), System.Boolean)
  name.vb: Query(Expression(Of Func(Of TEntity, Boolean)), Boolean)
- uid: Hybrid.EntityFrameworkCore.Repository`2.Query(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
  commentId: M:Hybrid.EntityFrameworkCore.Repository`2.Query(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
  id: Query(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
  parent: Hybrid.EntityFrameworkCore.Repository`2
  langs:
  - csharp
  - vb
  name: Query(Expression<Func<TEntity, Object>>[])
  nameWithType: Repository<TEntity, TKey>.Query(Expression<Func<TEntity, Object>>[])
  fullName: Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>.Query(System.Linq.Expressions.Expression<System.Func<TEntity, System.Object>>[])
  type: Method
  source:
    remote:
      path: src/Hybrid.EntityFrameworkCore/Repository.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: Query
    path: ../src/Hybrid.EntityFrameworkCore/Repository.cs
    startLine: 533
  assemblies:
  - Hybrid.EntityFrameworkCore
  namespace: Hybrid.EntityFrameworkCore
  summary: "\n获取<code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TEntity</code>跟踪数据更改（Tracking）的查询数据源，并可Include导航属性\n"
  example: []
  syntax:
    content: public virtual IQueryable<TEntity> Query(params Expression<Func<TEntity, object>>[] includePropertySelectors)
    parameters:
    - id: includePropertySelectors
      type: System.Linq.Expressions.Expression{System.Func{{TEntity},System.Object}}[]
      description: 要Include操作的属性表达式
    return:
      type: System.Linq.IQueryable{{TEntity}}
      description: 符合条件的数据集
    content.vb: Public Overridable Function Query(ParamArray includePropertySelectors As Expression(Of Func(Of TEntity, Object))()) As IQueryable(Of TEntity)
  overload: Hybrid.EntityFrameworkCore.Repository`2.Query*
  implements:
  - Hybrid.Domain.Repositories.IRepository{{TEntity},{TKey}}.Query(System.Linq.Expressions.Expression{System.Func{{TEntity},System.Object}}[])
  nameWithType.vb: Repository(Of TEntity, TKey).Query(Expression(Of Func(Of TEntity, Object))())
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey).Query(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Object))())
  name.vb: Query(Expression(Of Func(Of TEntity, Object))())
- uid: Hybrid.EntityFrameworkCore.Repository`2.InsertAsync(`0[])
  commentId: M:Hybrid.EntityFrameworkCore.Repository`2.InsertAsync(`0[])
  id: InsertAsync(`0[])
  parent: Hybrid.EntityFrameworkCore.Repository`2
  langs:
  - csharp
  - vb
  name: InsertAsync(TEntity[])
  nameWithType: Repository<TEntity, TKey>.InsertAsync(TEntity[])
  fullName: Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>.InsertAsync(TEntity[])
  type: Method
  source:
    remote:
      path: src/Hybrid.EntityFrameworkCore/Repository.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: InsertAsync
    path: ../src/Hybrid.EntityFrameworkCore/Repository.cs
    startLine: 557
  assemblies:
  - Hybrid.EntityFrameworkCore
  namespace: Hybrid.EntityFrameworkCore
  summary: "\n异步插入实体\n"
  example: []
  syntax:
    content: public virtual Task<int> InsertAsync(params TEntity[] entities)
    parameters:
    - id: entities
      type: '{TEntity}[]'
      description: 实体对象集合
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: 操作影响的行数
    content.vb: Public Overridable Function InsertAsync(ParamArray entities As TEntity()) As Task(Of Integer)
  overload: Hybrid.EntityFrameworkCore.Repository`2.InsertAsync*
  implements:
  - Hybrid.Domain.Repositories.IRepository{{TEntity},{TKey}}.InsertAsync({TEntity}[])
  nameWithType.vb: Repository(Of TEntity, TKey).InsertAsync(TEntity())
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey).InsertAsync(TEntity())
  name.vb: InsertAsync(TEntity())
- uid: Hybrid.EntityFrameworkCore.Repository`2.InsertOrUpdateAsync(`0[],System.Func{`0,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}}})
  commentId: M:Hybrid.EntityFrameworkCore.Repository`2.InsertOrUpdateAsync(`0[],System.Func{`0,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}}})
  id: InsertOrUpdateAsync(`0[],System.Func{`0,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}}})
  parent: Hybrid.EntityFrameworkCore.Repository`2
  langs:
  - csharp
  - vb
  name: InsertOrUpdateAsync(TEntity[], Func<TEntity, Expression<Func<TEntity, Boolean>>>)
  nameWithType: Repository<TEntity, TKey>.InsertOrUpdateAsync(TEntity[], Func<TEntity, Expression<Func<TEntity, Boolean>>>)
  fullName: Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>.InsertOrUpdateAsync(TEntity[], System.Func<TEntity, System.Linq.Expressions.Expression<System.Func<TEntity, System.Boolean>>>)
  type: Method
  source:
    remote:
      path: src/Hybrid.EntityFrameworkCore/Repository.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: InsertOrUpdateAsync
    path: ../src/Hybrid.EntityFrameworkCore/Repository.cs
    startLine: 572
  assemblies:
  - Hybrid.EntityFrameworkCore
  namespace: Hybrid.EntityFrameworkCore
  summary: "\n插入或更新实体\n"
  example: []
  syntax:
    content: public virtual Task<int> InsertOrUpdateAsync(TEntity[] entities, Func<TEntity, Expression<Func<TEntity, bool>>> existingFunc = null)
    parameters:
    - id: entities
      type: '{TEntity}[]'
      description: 要处理的实体
    - id: existingFunc
      type: System.Func{{TEntity},System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}}}
      description: 实体是否存在的判断委托
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: 操作影响的行数
    content.vb: Public Overridable Function InsertOrUpdateAsync(entities As TEntity(), existingFunc As Func(Of TEntity, Expression(Of Func(Of TEntity, Boolean))) = Nothing) As Task(Of Integer)
  overload: Hybrid.EntityFrameworkCore.Repository`2.InsertOrUpdateAsync*
  nameWithType.vb: Repository(Of TEntity, TKey).InsertOrUpdateAsync(TEntity(), Func(Of TEntity, Expression(Of Func(Of TEntity, Boolean))))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey).InsertOrUpdateAsync(TEntity(), System.Func(Of TEntity, System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Boolean))))
  name.vb: InsertOrUpdateAsync(TEntity(), Func(Of TEntity, Expression(Of Func(Of TEntity, Boolean))))
- uid: Hybrid.EntityFrameworkCore.Repository`2.InsertAsync``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Threading.Tasks.Task},System.Func{``0,`0,System.Threading.Tasks.Task{`0}})
  commentId: M:Hybrid.EntityFrameworkCore.Repository`2.InsertAsync``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Threading.Tasks.Task},System.Func{``0,`0,System.Threading.Tasks.Task{`0}})
  id: InsertAsync``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Threading.Tasks.Task},System.Func{``0,`0,System.Threading.Tasks.Task{`0}})
  parent: Hybrid.EntityFrameworkCore.Repository`2
  langs:
  - csharp
  - vb
  name: InsertAsync<TInputDto>(ICollection<TInputDto>, Func<TInputDto, Task>, Func<TInputDto, TEntity, Task<TEntity>>)
  nameWithType: Repository<TEntity, TKey>.InsertAsync<TInputDto>(ICollection<TInputDto>, Func<TInputDto, Task>, Func<TInputDto, TEntity, Task<TEntity>>)
  fullName: Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>.InsertAsync<TInputDto>(System.Collections.Generic.ICollection<TInputDto>, System.Func<TInputDto, System.Threading.Tasks.Task>, System.Func<TInputDto, TEntity, System.Threading.Tasks.Task<TEntity>>)
  type: Method
  source:
    remote:
      path: src/Hybrid.EntityFrameworkCore/Repository.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: InsertAsync
    path: ../src/Hybrid.EntityFrameworkCore/Repository.cs
    startLine: 603
  assemblies:
  - Hybrid.EntityFrameworkCore
  namespace: Hybrid.EntityFrameworkCore
  summary: "\n异步以DTO为载体批量插入实体\n"
  example: []
  syntax:
    content: >-
      public virtual Task<OperationResult> InsertAsync<TInputDto>(ICollection<TInputDto> dtos, Func<TInputDto, Task> checkAction = null, Func<TInputDto, TEntity, Task<TEntity>> updateFunc = null)

          where TInputDto : IInputDto<TKey>
    parameters:
    - id: dtos
      type: System.Collections.Generic.ICollection{{TInputDto}}
      description: 添加DTO信息集合
    - id: checkAction
      type: System.Func{{TInputDto},System.Threading.Tasks.Task}
      description: 添加信息合法性检查委托
    - id: updateFunc
      type: System.Func{{TInputDto},{TEntity},System.Threading.Tasks.Task{{TEntity}}}
      description: 由DTO到实体的转换委托
    typeParameters:
    - id: TInputDto
      description: 添加DTO类型
    return:
      type: System.Threading.Tasks.Task{Hybrid.Data.OperationResult}
      description: 业务操作结果
    content.vb: Public Overridable Function InsertAsync(Of TInputDto As IInputDto(Of TKey))(dtos As ICollection(Of TInputDto), checkAction As Func(Of TInputDto, Task) = Nothing, updateFunc As Func(Of TInputDto, TEntity, Task(Of TEntity)) = Nothing) As Task(Of OperationResult)
  overload: Hybrid.EntityFrameworkCore.Repository`2.InsertAsync*
  implements:
  - Hybrid.Domain.Repositories.IRepository{{TEntity},{TKey}}.InsertAsync``1(System.Collections.Generic.ICollection{{TInputDto}},System.Func{{TInputDto},System.Threading.Tasks.Task},System.Func{{TInputDto},{TEntity},System.Threading.Tasks.Task{{TEntity}}})
  nameWithType.vb: Repository(Of TEntity, TKey).InsertAsync(Of TInputDto)(ICollection(Of TInputDto), Func(Of TInputDto, Task), Func(Of TInputDto, TEntity, Task(Of TEntity)))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey).InsertAsync(Of TInputDto)(System.Collections.Generic.ICollection(Of TInputDto), System.Func(Of TInputDto, System.Threading.Tasks.Task), System.Func(Of TInputDto, TEntity, System.Threading.Tasks.Task(Of TEntity)))
  name.vb: InsertAsync(Of TInputDto)(ICollection(Of TInputDto), Func(Of TInputDto, Task), Func(Of TInputDto, TEntity, Task(Of TEntity)))
- uid: Hybrid.EntityFrameworkCore.Repository`2.DeleteAsync(`0[])
  commentId: M:Hybrid.EntityFrameworkCore.Repository`2.DeleteAsync(`0[])
  id: DeleteAsync(`0[])
  parent: Hybrid.EntityFrameworkCore.Repository`2
  langs:
  - csharp
  - vb
  name: DeleteAsync(TEntity[])
  nameWithType: Repository<TEntity, TKey>.DeleteAsync(TEntity[])
  fullName: Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>.DeleteAsync(TEntity[])
  type: Method
  source:
    remote:
      path: src/Hybrid.EntityFrameworkCore/Repository.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: DeleteAsync
    path: ../src/Hybrid.EntityFrameworkCore/Repository.cs
    startLine: 650
  assemblies:
  - Hybrid.EntityFrameworkCore
  namespace: Hybrid.EntityFrameworkCore
  summary: "\n异步删除实体\n"
  example: []
  syntax:
    content: public virtual Task<int> DeleteAsync(params TEntity[] entities)
    parameters:
    - id: entities
      type: '{TEntity}[]'
      description: 实体对象集合
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: 操作影响的行数
    content.vb: Public Overridable Function DeleteAsync(ParamArray entities As TEntity()) As Task(Of Integer)
  overload: Hybrid.EntityFrameworkCore.Repository`2.DeleteAsync*
  implements:
  - Hybrid.Domain.Repositories.IRepository{{TEntity},{TKey}}.DeleteAsync({TEntity}[])
  nameWithType.vb: Repository(Of TEntity, TKey).DeleteAsync(TEntity())
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey).DeleteAsync(TEntity())
  name.vb: DeleteAsync(TEntity())
- uid: Hybrid.EntityFrameworkCore.Repository`2.DeleteAsync(`1)
  commentId: M:Hybrid.EntityFrameworkCore.Repository`2.DeleteAsync(`1)
  id: DeleteAsync(`1)
  parent: Hybrid.EntityFrameworkCore.Repository`2
  langs:
  - csharp
  - vb
  name: DeleteAsync(TKey)
  nameWithType: Repository<TEntity, TKey>.DeleteAsync(TKey)
  fullName: Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>.DeleteAsync(TKey)
  type: Method
  source:
    remote:
      path: src/Hybrid.EntityFrameworkCore/Repository.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: DeleteAsync
    path: ../src/Hybrid.EntityFrameworkCore/Repository.cs
    startLine: 663
  assemblies:
  - Hybrid.EntityFrameworkCore
  namespace: Hybrid.EntityFrameworkCore
  summary: "\n异步删除指定编号的实体\n"
  example: []
  syntax:
    content: public virtual Task<int> DeleteAsync(TKey key)
    parameters:
    - id: key
      type: '{TKey}'
      description: 实体编号
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: 操作影响的行数
    content.vb: Public Overridable Function DeleteAsync(key As TKey) As Task(Of Integer)
  overload: Hybrid.EntityFrameworkCore.Repository`2.DeleteAsync*
  implements:
  - Hybrid.Domain.Repositories.IRepository{{TEntity},{TKey}}.DeleteAsync({TKey})
  nameWithType.vb: Repository(Of TEntity, TKey).DeleteAsync(TKey)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey).DeleteAsync(TKey)
- uid: Hybrid.EntityFrameworkCore.Repository`2.DeleteAsync(System.Collections.Generic.ICollection{`1},System.Func{`0,System.Threading.Tasks.Task},System.Func{`0,System.Threading.Tasks.Task{`0}})
  commentId: M:Hybrid.EntityFrameworkCore.Repository`2.DeleteAsync(System.Collections.Generic.ICollection{`1},System.Func{`0,System.Threading.Tasks.Task},System.Func{`0,System.Threading.Tasks.Task{`0}})
  id: DeleteAsync(System.Collections.Generic.ICollection{`1},System.Func{`0,System.Threading.Tasks.Task},System.Func{`0,System.Threading.Tasks.Task{`0}})
  parent: Hybrid.EntityFrameworkCore.Repository`2
  langs:
  - csharp
  - vb
  name: DeleteAsync(ICollection<TKey>, Func<TEntity, Task>, Func<TEntity, Task<TEntity>>)
  nameWithType: Repository<TEntity, TKey>.DeleteAsync(ICollection<TKey>, Func<TEntity, Task>, Func<TEntity, Task<TEntity>>)
  fullName: Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>.DeleteAsync(System.Collections.Generic.ICollection<TKey>, System.Func<TEntity, System.Threading.Tasks.Task>, System.Func<TEntity, System.Threading.Tasks.Task<TEntity>>)
  type: Method
  source:
    remote:
      path: src/Hybrid.EntityFrameworkCore/Repository.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: DeleteAsync
    path: ../src/Hybrid.EntityFrameworkCore/Repository.cs
    startLine: 678
  assemblies:
  - Hybrid.EntityFrameworkCore
  namespace: Hybrid.EntityFrameworkCore
  summary: "\n异步以标识集合批量删除实体\n"
  example: []
  syntax:
    content: public virtual Task<OperationResult> DeleteAsync(ICollection<TKey> ids, Func<TEntity, Task> checkAction = null, Func<TEntity, Task<TEntity>> deleteFunc = null)
    parameters:
    - id: ids
      type: System.Collections.Generic.ICollection{{TKey}}
      description: 标识集合
    - id: checkAction
      type: System.Func{{TEntity},System.Threading.Tasks.Task}
      description: 删除前置检查委托
    - id: deleteFunc
      type: System.Func{{TEntity},System.Threading.Tasks.Task{{TEntity}}}
      description: 删除委托，用于删除关联信息
    return:
      type: System.Threading.Tasks.Task{Hybrid.Data.OperationResult}
      description: 业务操作结果
    content.vb: Public Overridable Function DeleteAsync(ids As ICollection(Of TKey), checkAction As Func(Of TEntity, Task) = Nothing, deleteFunc As Func(Of TEntity, Task(Of TEntity)) = Nothing) As Task(Of OperationResult)
  overload: Hybrid.EntityFrameworkCore.Repository`2.DeleteAsync*
  implements:
  - Hybrid.Domain.Repositories.IRepository{{TEntity},{TKey}}.DeleteAsync(System.Collections.Generic.ICollection{{TKey}},System.Func{{TEntity},System.Threading.Tasks.Task},System.Func{{TEntity},System.Threading.Tasks.Task{{TEntity}}})
  nameWithType.vb: Repository(Of TEntity, TKey).DeleteAsync(ICollection(Of TKey), Func(Of TEntity, Task), Func(Of TEntity, Task(Of TEntity)))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey).DeleteAsync(System.Collections.Generic.ICollection(Of TKey), System.Func(Of TEntity, System.Threading.Tasks.Task), System.Func(Of TEntity, System.Threading.Tasks.Task(Of TEntity)))
  name.vb: DeleteAsync(ICollection(Of TKey), Func(Of TEntity, Task), Func(Of TEntity, Task(Of TEntity)))
- uid: Hybrid.EntityFrameworkCore.Repository`2.DeleteBatchAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  commentId: M:Hybrid.EntityFrameworkCore.Repository`2.DeleteBatchAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  id: DeleteBatchAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  parent: Hybrid.EntityFrameworkCore.Repository`2
  langs:
  - csharp
  - vb
  name: DeleteBatchAsync(Expression<Func<TEntity, Boolean>>)
  nameWithType: Repository<TEntity, TKey>.DeleteBatchAsync(Expression<Func<TEntity, Boolean>>)
  fullName: Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>.DeleteBatchAsync(System.Linq.Expressions.Expression<System.Func<TEntity, System.Boolean>>)
  type: Method
  source:
    remote:
      path: src/Hybrid.EntityFrameworkCore/Repository.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: DeleteBatchAsync
    path: ../src/Hybrid.EntityFrameworkCore/Repository.cs
    startLine: 728
  assemblies:
  - Hybrid.EntityFrameworkCore
  namespace: Hybrid.EntityFrameworkCore
  summary: "\n异步删除所有符合特定条件的实体\n"
  example: []
  syntax:
    content: public virtual Task<int> DeleteBatchAsync(Expression<Func<TEntity, bool>> predicate)
    parameters:
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}}
      description: 查询条件谓语表达式
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: 操作影响的行数
    content.vb: Public Overridable Function DeleteBatchAsync(predicate As Expression(Of Func(Of TEntity, Boolean))) As Task(Of Integer)
  overload: Hybrid.EntityFrameworkCore.Repository`2.DeleteBatchAsync*
  implements:
  - Hybrid.Domain.Repositories.IRepository{{TEntity},{TKey}}.DeleteBatchAsync(System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}})
  nameWithType.vb: Repository(Of TEntity, TKey).DeleteBatchAsync(Expression(Of Func(Of TEntity, Boolean)))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey).DeleteBatchAsync(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Boolean)))
  name.vb: DeleteBatchAsync(Expression(Of Func(Of TEntity, Boolean)))
- uid: Hybrid.EntityFrameworkCore.Repository`2.UpdateAsync(`0[])
  commentId: M:Hybrid.EntityFrameworkCore.Repository`2.UpdateAsync(`0[])
  id: UpdateAsync(`0[])
  parent: Hybrid.EntityFrameworkCore.Repository`2
  langs:
  - csharp
  - vb
  name: UpdateAsync(TEntity[])
  nameWithType: Repository<TEntity, TKey>.UpdateAsync(TEntity[])
  fullName: Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>.UpdateAsync(TEntity[])
  type: Method
  source:
    remote:
      path: src/Hybrid.EntityFrameworkCore/Repository.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: UpdateAsync
    path: ../src/Hybrid.EntityFrameworkCore/Repository.cs
    startLine: 776
  assemblies:
  - Hybrid.EntityFrameworkCore
  namespace: Hybrid.EntityFrameworkCore
  summary: "\n异步更新实体对象\n"
  example: []
  syntax:
    content: public virtual Task<int> UpdateAsync(params TEntity[] entities)
    parameters:
    - id: entities
      type: '{TEntity}[]'
      description: 更新后的实体对象
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: 操作影响的行数
    content.vb: Public Overridable Function UpdateAsync(ParamArray entities As TEntity()) As Task(Of Integer)
  overload: Hybrid.EntityFrameworkCore.Repository`2.UpdateAsync*
  implements:
  - Hybrid.Domain.Repositories.IRepository{{TEntity},{TKey}}.UpdateAsync({TEntity}[])
  nameWithType.vb: Repository(Of TEntity, TKey).UpdateAsync(TEntity())
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey).UpdateAsync(TEntity())
  name.vb: UpdateAsync(TEntity())
- uid: Hybrid.EntityFrameworkCore.Repository`2.UpdateAsync``1(System.Collections.Generic.ICollection{``0},System.Func{``0,`0,System.Threading.Tasks.Task},System.Func{``0,`0,System.Threading.Tasks.Task{`0}})
  commentId: M:Hybrid.EntityFrameworkCore.Repository`2.UpdateAsync``1(System.Collections.Generic.ICollection{``0},System.Func{``0,`0,System.Threading.Tasks.Task},System.Func{``0,`0,System.Threading.Tasks.Task{`0}})
  id: UpdateAsync``1(System.Collections.Generic.ICollection{``0},System.Func{``0,`0,System.Threading.Tasks.Task},System.Func{``0,`0,System.Threading.Tasks.Task{`0}})
  parent: Hybrid.EntityFrameworkCore.Repository`2
  langs:
  - csharp
  - vb
  name: UpdateAsync<TEditDto>(ICollection<TEditDto>, Func<TEditDto, TEntity, Task>, Func<TEditDto, TEntity, Task<TEntity>>)
  nameWithType: Repository<TEntity, TKey>.UpdateAsync<TEditDto>(ICollection<TEditDto>, Func<TEditDto, TEntity, Task>, Func<TEditDto, TEntity, Task<TEntity>>)
  fullName: Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>.UpdateAsync<TEditDto>(System.Collections.Generic.ICollection<TEditDto>, System.Func<TEditDto, TEntity, System.Threading.Tasks.Task>, System.Func<TEditDto, TEntity, System.Threading.Tasks.Task<TEntity>>)
  type: Method
  source:
    remote:
      path: src/Hybrid.EntityFrameworkCore/Repository.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: UpdateAsync
    path: ../src/Hybrid.EntityFrameworkCore/Repository.cs
    startLine: 793
  assemblies:
  - Hybrid.EntityFrameworkCore
  namespace: Hybrid.EntityFrameworkCore
  summary: "\n异步以DTO为载体批量更新实体\n"
  example: []
  syntax:
    content: >-
      public virtual Task<OperationResult> UpdateAsync<TEditDto>(ICollection<TEditDto> dtos, Func<TEditDto, TEntity, Task> checkAction = null, Func<TEditDto, TEntity, Task<TEntity>> updateFunc = null)

          where TEditDto : IInputDto<TKey>
    parameters:
    - id: dtos
      type: System.Collections.Generic.ICollection{{TEditDto}}
      description: 更新DTO信息集合
    - id: checkAction
      type: System.Func{{TEditDto},{TEntity},System.Threading.Tasks.Task}
      description: 更新信息合法性检查委托
    - id: updateFunc
      type: System.Func{{TEditDto},{TEntity},System.Threading.Tasks.Task{{TEntity}}}
      description: 由DTO到实体的转换委托
    typeParameters:
    - id: TEditDto
      description: 更新DTO类型
    return:
      type: System.Threading.Tasks.Task{Hybrid.Data.OperationResult}
      description: 业务操作结果
    content.vb: Public Overridable Function UpdateAsync(Of TEditDto As IInputDto(Of TKey))(dtos As ICollection(Of TEditDto), checkAction As Func(Of TEditDto, TEntity, Task) = Nothing, updateFunc As Func(Of TEditDto, TEntity, Task(Of TEntity)) = Nothing) As Task(Of OperationResult)
  overload: Hybrid.EntityFrameworkCore.Repository`2.UpdateAsync*
  implements:
  - Hybrid.Domain.Repositories.IRepository{{TEntity},{TKey}}.UpdateAsync``1(System.Collections.Generic.ICollection{{TEditDto}},System.Func{{TEditDto},{TEntity},System.Threading.Tasks.Task},System.Func{{TEditDto},{TEntity},System.Threading.Tasks.Task{{TEntity}}})
  nameWithType.vb: Repository(Of TEntity, TKey).UpdateAsync(Of TEditDto)(ICollection(Of TEditDto), Func(Of TEditDto, TEntity, Task), Func(Of TEditDto, TEntity, Task(Of TEntity)))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey).UpdateAsync(Of TEditDto)(System.Collections.Generic.ICollection(Of TEditDto), System.Func(Of TEditDto, TEntity, System.Threading.Tasks.Task), System.Func(Of TEditDto, TEntity, System.Threading.Tasks.Task(Of TEntity)))
  name.vb: UpdateAsync(Of TEditDto)(ICollection(Of TEditDto), Func(Of TEditDto, TEntity, Task), Func(Of TEditDto, TEntity, Task(Of TEntity)))
- uid: Hybrid.EntityFrameworkCore.Repository`2.UpdateBatchAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}})
  commentId: M:Hybrid.EntityFrameworkCore.Repository`2.UpdateBatchAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}})
  id: UpdateBatchAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}})
  parent: Hybrid.EntityFrameworkCore.Repository`2
  langs:
  - csharp
  - vb
  name: UpdateBatchAsync(Expression<Func<TEntity, Boolean>>, Expression<Func<TEntity, TEntity>>)
  nameWithType: Repository<TEntity, TKey>.UpdateBatchAsync(Expression<Func<TEntity, Boolean>>, Expression<Func<TEntity, TEntity>>)
  fullName: Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>.UpdateBatchAsync(System.Linq.Expressions.Expression<System.Func<TEntity, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<TEntity, TEntity>>)
  type: Method
  source:
    remote:
      path: src/Hybrid.EntityFrameworkCore/Repository.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: UpdateBatchAsync
    path: ../src/Hybrid.EntityFrameworkCore/Repository.cs
    startLine: 845
  assemblies:
  - Hybrid.EntityFrameworkCore
  namespace: Hybrid.EntityFrameworkCore
  summary: "\n异步更新所有符合特定条件的实体\n"
  example: []
  syntax:
    content: public virtual Task<int> UpdateBatchAsync(Expression<Func<TEntity, bool>> predicate, Expression<Func<TEntity, TEntity>> updateExpression)
    parameters:
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}}
      description: 查询条件谓语表达式
    - id: updateExpression
      type: System.Linq.Expressions.Expression{System.Func{{TEntity},{TEntity}}}
      description: 实体更新表达式
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: 操作影响的行数
    content.vb: Public Overridable Function UpdateBatchAsync(predicate As Expression(Of Func(Of TEntity, Boolean)), updateExpression As Expression(Of Func(Of TEntity, TEntity))) As Task(Of Integer)
  overload: Hybrid.EntityFrameworkCore.Repository`2.UpdateBatchAsync*
  implements:
  - Hybrid.Domain.Repositories.IRepository{{TEntity},{TKey}}.UpdateBatchAsync(System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}},System.Linq.Expressions.Expression{System.Func{{TEntity},{TEntity}}})
  nameWithType.vb: Repository(Of TEntity, TKey).UpdateBatchAsync(Expression(Of Func(Of TEntity, Boolean)), Expression(Of Func(Of TEntity, TEntity)))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey).UpdateBatchAsync(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of TEntity, TEntity)))
  name.vb: UpdateBatchAsync(Expression(Of Func(Of TEntity, Boolean)), Expression(Of Func(Of TEntity, TEntity)))
- uid: Hybrid.EntityFrameworkCore.Repository`2.CheckExistsAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},`1)
  commentId: M:Hybrid.EntityFrameworkCore.Repository`2.CheckExistsAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},`1)
  id: CheckExistsAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},`1)
  parent: Hybrid.EntityFrameworkCore.Repository`2
  langs:
  - csharp
  - vb
  name: CheckExistsAsync(Expression<Func<TEntity, Boolean>>, TKey)
  nameWithType: Repository<TEntity, TKey>.CheckExistsAsync(Expression<Func<TEntity, Boolean>>, TKey)
  fullName: Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>.CheckExistsAsync(System.Linq.Expressions.Expression<System.Func<TEntity, System.Boolean>>, TKey)
  type: Method
  source:
    remote:
      path: src/Hybrid.EntityFrameworkCore/Repository.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: CheckExistsAsync
    path: ../src/Hybrid.EntityFrameworkCore/Repository.cs
    startLine: 860
  assemblies:
  - Hybrid.EntityFrameworkCore
  namespace: Hybrid.EntityFrameworkCore
  summary: "\n异步检查实体是否存在\n"
  example: []
  syntax:
    content: public virtual Task<bool> CheckExistsAsync(Expression<Func<TEntity, bool>> predicate, TKey id = null)
    parameters:
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}}
      description: 查询条件谓语表达式
    - id: id
      type: '{TKey}'
      description: 编辑的实体标识
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: 是否存在
    content.vb: Public Overridable Function CheckExistsAsync(predicate As Expression(Of Func(Of TEntity, Boolean)), id As TKey = Nothing) As Task(Of Boolean)
  overload: Hybrid.EntityFrameworkCore.Repository`2.CheckExistsAsync*
  implements:
  - Hybrid.Domain.Repositories.IRepository{{TEntity},{TKey}}.CheckExistsAsync(System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}},{TKey})
  nameWithType.vb: Repository(Of TEntity, TKey).CheckExistsAsync(Expression(Of Func(Of TEntity, Boolean)), TKey)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey).CheckExistsAsync(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Boolean)), TKey)
  name.vb: CheckExistsAsync(Expression(Of Func(Of TEntity, Boolean)), TKey)
- uid: Hybrid.EntityFrameworkCore.Repository`2.GetAsync(`1)
  commentId: M:Hybrid.EntityFrameworkCore.Repository`2.GetAsync(`1)
  id: GetAsync(`1)
  parent: Hybrid.EntityFrameworkCore.Repository`2
  langs:
  - csharp
  - vb
  name: GetAsync(TKey)
  nameWithType: Repository<TEntity, TKey>.GetAsync(TKey)
  fullName: Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>.GetAsync(TKey)
  type: Method
  source:
    remote:
      path: src/Hybrid.EntityFrameworkCore/Repository.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: GetAsync
    path: ../src/Hybrid.EntityFrameworkCore/Repository.cs
    startLine: 877
  assemblies:
  - Hybrid.EntityFrameworkCore
  namespace: Hybrid.EntityFrameworkCore
  summary: "\n异步查找指定主键的实体\n"
  example: []
  syntax:
    content: public virtual Task<TEntity> GetAsync(TKey key)
    parameters:
    - id: key
      type: '{TKey}'
      description: 实体主键
    return:
      type: System.Threading.Tasks.Task{{TEntity}}
      description: 符合主键的实体，不存在时返回null
    content.vb: Public Overridable Function GetAsync(key As TKey) As Task(Of TEntity)
  overload: Hybrid.EntityFrameworkCore.Repository`2.GetAsync*
  implements:
  - Hybrid.Domain.Repositories.IRepository{{TEntity},{TKey}}.GetAsync({TKey})
  nameWithType.vb: Repository(Of TEntity, TKey).GetAsync(TKey)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey).GetAsync(TKey)
references:
- uid: Hybrid.EntityFrameworkCore
  commentId: N:Hybrid.EntityFrameworkCore
  name: Hybrid.EntityFrameworkCore
  nameWithType: Hybrid.EntityFrameworkCore
  fullName: Hybrid.EntityFrameworkCore
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Hybrid.Domain.Repositories.IRepository{{TEntity},{TKey}}
  commentId: T:Hybrid.Domain.Repositories.IRepository{`0,`1}
  parent: Hybrid.Domain.Repositories
  definition: Hybrid.Domain.Repositories.IRepository`2
  name: IRepository<TEntity, TKey>
  nameWithType: IRepository<TEntity, TKey>
  fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>
  nameWithType.vb: IRepository(Of TEntity, TKey)
  fullName.vb: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey)
  name.vb: IRepository(Of TEntity, TKey)
  spec.csharp:
  - uid: Hybrid.Domain.Repositories.IRepository`2
    name: IRepository
    nameWithType: IRepository
    fullName: Hybrid.Domain.Repositories.IRepository
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Hybrid.Domain.Repositories.IRepository`2
    name: IRepository
    nameWithType: IRepository
    fullName: Hybrid.Domain.Repositories.IRepository
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EntityFrameworkCore.Repository`2.OSharp.Entity.EntityExtensions.CheckICreatedTime``2
  commentId: M:OSharp.Entity.EntityExtensions.CheckICreatedTime``2(``0)
  parent: OSharp.Entity.EntityExtensions
  definition: OSharp.Entity.EntityExtensions.CheckICreatedTime``2(``0)
  name: CheckICreatedTime<Repository<TEntity, TKey>, TKey>()
  nameWithType: EntityExtensions.CheckICreatedTime<Repository<TEntity, TKey>, TKey>()
  fullName: OSharp.Entity.EntityExtensions.CheckICreatedTime<Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>, TKey>()
  nameWithType.vb: EntityExtensions.CheckICreatedTime(Of Repository(Of TEntity, TKey), TKey)()
  fullName.vb: OSharp.Entity.EntityExtensions.CheckICreatedTime(Of Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey), TKey)()
  name.vb: CheckICreatedTime(Of Repository(Of TEntity, TKey), TKey)()
  spec.csharp:
  - uid: OSharp.Entity.EntityExtensions.CheckICreatedTime``2
    name: CheckICreatedTime<Repository<TEntity, TKey>, TKey>
    nameWithType: EntityExtensions.CheckICreatedTime<Repository<TEntity, TKey>, TKey>
    fullName: OSharp.Entity.EntityExtensions.CheckICreatedTime<Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Entity.EntityExtensions.CheckICreatedTime``2
    name: CheckICreatedTime(Of Repository(Of TEntity, TKey), TKey)
    nameWithType: EntityExtensions.CheckICreatedTime(Of Repository(Of TEntity, TKey), TKey)
    fullName: OSharp.Entity.EntityExtensions.CheckICreatedTime(Of Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey), TKey)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EntityFrameworkCore.Repository`2.OSharp.Entity.EntityExtensions.CheckICreationAudited``3(System.Security.Principal.IPrincipal)
  commentId: M:OSharp.Entity.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
  parent: OSharp.Entity.EntityExtensions
  definition: OSharp.Entity.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
  name: CheckICreationAudited<Repository<TEntity, TKey>, TKey, TUserKey>(IPrincipal)
  nameWithType: EntityExtensions.CheckICreationAudited<Repository<TEntity, TKey>, TKey, TUserKey>(IPrincipal)
  fullName: OSharp.Entity.EntityExtensions.CheckICreationAudited<Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>, TKey, TUserKey>(System.Security.Principal.IPrincipal)
  nameWithType.vb: EntityExtensions.CheckICreationAudited(Of Repository(Of TEntity, TKey), TKey, TUserKey)(IPrincipal)
  fullName.vb: OSharp.Entity.EntityExtensions.CheckICreationAudited(Of Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey), TKey, TUserKey)(System.Security.Principal.IPrincipal)
  name.vb: CheckICreationAudited(Of Repository(Of TEntity, TKey), TKey, TUserKey)(IPrincipal)
  spec.csharp:
  - uid: OSharp.Entity.EntityExtensions.CheckICreationAudited``3(System.Security.Principal.IPrincipal)
    name: CheckICreationAudited<Repository<TEntity, TKey>, TKey, TUserKey>
    nameWithType: EntityExtensions.CheckICreationAudited<Repository<TEntity, TKey>, TKey, TUserKey>
    fullName: OSharp.Entity.EntityExtensions.CheckICreationAudited<Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>, TKey, TUserKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Entity.EntityExtensions.CheckICreationAudited``3(System.Security.Principal.IPrincipal)
    name: CheckICreationAudited(Of Repository(Of TEntity, TKey), TKey, TUserKey)
    nameWithType: EntityExtensions.CheckICreationAudited(Of Repository(Of TEntity, TKey), TKey, TUserKey)
    fullName: OSharp.Entity.EntityExtensions.CheckICreationAudited(Of Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey), TKey, TUserKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EntityFrameworkCore.Repository`2.OSharp.Entity.EntityExtensions.CheckIUpdateAudited``3(System.Security.Principal.IPrincipal)
  commentId: M:OSharp.Entity.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
  parent: OSharp.Entity.EntityExtensions
  definition: OSharp.Entity.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
  name: CheckIUpdateAudited<Repository<TEntity, TKey>, TKey, TUserKey>(IPrincipal)
  nameWithType: EntityExtensions.CheckIUpdateAudited<Repository<TEntity, TKey>, TKey, TUserKey>(IPrincipal)
  fullName: OSharp.Entity.EntityExtensions.CheckIUpdateAudited<Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>, TKey, TUserKey>(System.Security.Principal.IPrincipal)
  nameWithType.vb: EntityExtensions.CheckIUpdateAudited(Of Repository(Of TEntity, TKey), TKey, TUserKey)(IPrincipal)
  fullName.vb: OSharp.Entity.EntityExtensions.CheckIUpdateAudited(Of Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey), TKey, TUserKey)(System.Security.Principal.IPrincipal)
  name.vb: CheckIUpdateAudited(Of Repository(Of TEntity, TKey), TKey, TUserKey)(IPrincipal)
  spec.csharp:
  - uid: OSharp.Entity.EntityExtensions.CheckIUpdateAudited``3(System.Security.Principal.IPrincipal)
    name: CheckIUpdateAudited<Repository<TEntity, TKey>, TKey, TUserKey>
    nameWithType: EntityExtensions.CheckIUpdateAudited<Repository<TEntity, TKey>, TKey, TUserKey>
    fullName: OSharp.Entity.EntityExtensions.CheckIUpdateAudited<Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>, TKey, TUserKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Entity.EntityExtensions.CheckIUpdateAudited``3(System.Security.Principal.IPrincipal)
    name: CheckIUpdateAudited(Of Repository(Of TEntity, TKey), TKey, TUserKey)
    nameWithType: EntityExtensions.CheckIUpdateAudited(Of Repository(Of TEntity, TKey), TKey, TUserKey)
    fullName: OSharp.Entity.EntityExtensions.CheckIUpdateAudited(Of Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey), TKey, TUserKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.OSharp.Extensions.ObjectExtensions.CastTo(System.Type)
  commentId: M:OSharp.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
  parent: OSharp.Extensions.ObjectExtensions
  definition: OSharp.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
  name: CastTo(Type)
  nameWithType: ObjectExtensions.CastTo(Type)
  fullName: OSharp.Extensions.ObjectExtensions.CastTo(System.Type)
  spec.csharp:
  - uid: OSharp.Extensions.ObjectExtensions.CastTo(System.Type)
    name: CastTo
    nameWithType: ObjectExtensions.CastTo
    fullName: OSharp.Extensions.ObjectExtensions.CastTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ObjectExtensions.CastTo(System.Type)
    name: CastTo
    nameWithType: ObjectExtensions.CastTo
    fullName: OSharp.Extensions.ObjectExtensions.CastTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.OSharp.Extensions.ObjectExtensions.CastTo``1
  commentId: M:OSharp.Extensions.ObjectExtensions.CastTo``1(System.Object)
  parent: OSharp.Extensions.ObjectExtensions
  definition: OSharp.Extensions.ObjectExtensions.CastTo``1(System.Object)
  name: CastTo<T>()
  nameWithType: ObjectExtensions.CastTo<T>()
  fullName: OSharp.Extensions.ObjectExtensions.CastTo<T>()
  nameWithType.vb: ObjectExtensions.CastTo(Of T)()
  fullName.vb: OSharp.Extensions.ObjectExtensions.CastTo(Of T)()
  name.vb: CastTo(Of T)()
  spec.csharp:
  - uid: OSharp.Extensions.ObjectExtensions.CastTo``1
    name: CastTo<T>
    nameWithType: ObjectExtensions.CastTo<T>
    fullName: OSharp.Extensions.ObjectExtensions.CastTo<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ObjectExtensions.CastTo``1
    name: CastTo(Of T)
    nameWithType: ObjectExtensions.CastTo(Of T)
    fullName: OSharp.Extensions.ObjectExtensions.CastTo(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.OSharp.Extensions.ObjectExtensions.CastTo``1({T})
  commentId: M:OSharp.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
  parent: OSharp.Extensions.ObjectExtensions
  definition: OSharp.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
  name: CastTo<T>(T)
  nameWithType: ObjectExtensions.CastTo<T>(T)
  fullName: OSharp.Extensions.ObjectExtensions.CastTo<T>(T)
  nameWithType.vb: ObjectExtensions.CastTo(Of T)(T)
  fullName.vb: OSharp.Extensions.ObjectExtensions.CastTo(Of T)(T)
  name.vb: CastTo(Of T)(T)
  spec.csharp:
  - uid: OSharp.Extensions.ObjectExtensions.CastTo``1(``0)
    name: CastTo<T>
    nameWithType: ObjectExtensions.CastTo<T>
    fullName: OSharp.Extensions.ObjectExtensions.CastTo<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ObjectExtensions.CastTo``1(``0)
    name: CastTo(Of T)
    nameWithType: ObjectExtensions.CastTo(Of T)
    fullName: OSharp.Extensions.ObjectExtensions.CastTo(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EntityFrameworkCore.Repository`2.OSharp.Extensions.ObjectExtensions.IsIn``1(Hybrid.EntityFrameworkCore.Repository{{TEntity},{TKey}}[])
  commentId: M:OSharp.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
  parent: OSharp.Extensions.ObjectExtensions
  definition: OSharp.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
  name: IsIn<Repository<TEntity, TKey>>(Repository<TEntity, TKey>[])
  nameWithType: ObjectExtensions.IsIn<Repository<TEntity, TKey>>(Repository<TEntity, TKey>[])
  fullName: OSharp.Extensions.ObjectExtensions.IsIn<Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>>(Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>[])
  nameWithType.vb: ObjectExtensions.IsIn(Of Repository(Of TEntity, TKey))(Repository(Of TEntity, TKey)())
  fullName.vb: OSharp.Extensions.ObjectExtensions.IsIn(Of Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey))(Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey)())
  name.vb: IsIn(Of Repository(Of TEntity, TKey))(Repository(Of TEntity, TKey)())
  spec.csharp:
  - uid: OSharp.Extensions.ObjectExtensions.IsIn``1(``0[])
    name: IsIn<Repository<TEntity, TKey>>
    nameWithType: ObjectExtensions.IsIn<Repository<TEntity, TKey>>
    fullName: OSharp.Extensions.ObjectExtensions.IsIn<Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Hybrid.EntityFrameworkCore.Repository`2
    name: Repository
    nameWithType: Repository
    fullName: Hybrid.EntityFrameworkCore.Repository
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ObjectExtensions.IsIn``1(``0[])
    name: IsIn(Of Repository(Of TEntity, TKey))
    nameWithType: ObjectExtensions.IsIn(Of Repository(Of TEntity, TKey))
    fullName: OSharp.Extensions.ObjectExtensions.IsIn(Of Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey))
  - name: (
    nameWithType: (
    fullName: (
  - uid: Hybrid.EntityFrameworkCore.Repository`2
    name: Repository
    nameWithType: Repository
    fullName: Hybrid.EntityFrameworkCore.Repository
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.OSharp.Extensions.ObjectExtensions.ToDynamic
  commentId: M:OSharp.Extensions.ObjectExtensions.ToDynamic(System.Object)
  parent: OSharp.Extensions.ObjectExtensions
  definition: OSharp.Extensions.ObjectExtensions.ToDynamic(System.Object)
  name: ToDynamic()
  nameWithType: ObjectExtensions.ToDynamic()
  fullName: OSharp.Extensions.ObjectExtensions.ToDynamic()
  spec.csharp:
  - uid: OSharp.Extensions.ObjectExtensions.ToDynamic
    name: ToDynamic
    nameWithType: ObjectExtensions.ToDynamic
    fullName: OSharp.Extensions.ObjectExtensions.ToDynamic
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ObjectExtensions.ToDynamic
    name: ToDynamic
    nameWithType: ObjectExtensions.ToDynamic
    fullName: OSharp.Extensions.ObjectExtensions.ToDynamic
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EntityFrameworkCore.Repository`2.OSharp.Extensions.ObjectExtensions.DeepClone``1
  commentId: M:OSharp.Extensions.ObjectExtensions.DeepClone``1(``0)
  parent: OSharp.Extensions.ObjectExtensions
  definition: OSharp.Extensions.ObjectExtensions.DeepClone``1(``0)
  name: DeepClone<Repository<TEntity, TKey>>()
  nameWithType: ObjectExtensions.DeepClone<Repository<TEntity, TKey>>()
  fullName: OSharp.Extensions.ObjectExtensions.DeepClone<Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>>()
  nameWithType.vb: ObjectExtensions.DeepClone(Of Repository(Of TEntity, TKey))()
  fullName.vb: OSharp.Extensions.ObjectExtensions.DeepClone(Of Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey))()
  name.vb: DeepClone(Of Repository(Of TEntity, TKey))()
  spec.csharp:
  - uid: OSharp.Extensions.ObjectExtensions.DeepClone``1
    name: DeepClone<Repository<TEntity, TKey>>
    nameWithType: ObjectExtensions.DeepClone<Repository<TEntity, TKey>>
    fullName: OSharp.Extensions.ObjectExtensions.DeepClone<Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ObjectExtensions.DeepClone``1
    name: DeepClone(Of Repository(Of TEntity, TKey))
    nameWithType: ObjectExtensions.DeepClone(Of Repository(Of TEntity, TKey))
    fullName: OSharp.Extensions.ObjectExtensions.DeepClone(Of Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey))
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EntityFrameworkCore.Repository`2.OSharp.Extensions.ParameterCheckExtensions.Required``1(System.Func{Hybrid.EntityFrameworkCore.Repository{{TEntity},{TKey}},System.Boolean},System.String)
  commentId: M:OSharp.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
  parent: OSharp.Extensions.ParameterCheckExtensions
  definition: OSharp.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
  name: Required<Repository<TEntity, TKey>>(Func<Repository<TEntity, TKey>, Boolean>, String)
  nameWithType: ParameterCheckExtensions.Required<Repository<TEntity, TKey>>(Func<Repository<TEntity, TKey>, Boolean>, String)
  fullName: OSharp.Extensions.ParameterCheckExtensions.Required<Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>>(System.Func<Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>, System.Boolean>, System.String)
  nameWithType.vb: ParameterCheckExtensions.Required(Of Repository(Of TEntity, TKey))(Func(Of Repository(Of TEntity, TKey), Boolean), String)
  fullName.vb: OSharp.Extensions.ParameterCheckExtensions.Required(Of Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey))(System.Func(Of Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey), System.Boolean), System.String)
  name.vb: Required(Of Repository(Of TEntity, TKey))(Func(Of Repository(Of TEntity, TKey), Boolean), String)
  spec.csharp:
  - uid: OSharp.Extensions.ParameterCheckExtensions.Required``1(System.Func{``0,System.Boolean},System.String)
    name: Required<Repository<TEntity, TKey>>
    nameWithType: ParameterCheckExtensions.Required<Repository<TEntity, TKey>>
    fullName: OSharp.Extensions.ParameterCheckExtensions.Required<Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.EntityFrameworkCore.Repository`2
    name: Repository
    nameWithType: Repository
    fullName: Hybrid.EntityFrameworkCore.Repository
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ParameterCheckExtensions.Required``1(System.Func{``0,System.Boolean},System.String)
    name: Required(Of Repository(Of TEntity, TKey))
    nameWithType: ParameterCheckExtensions.Required(Of Repository(Of TEntity, TKey))
    fullName: OSharp.Extensions.ParameterCheckExtensions.Required(Of Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey))
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.EntityFrameworkCore.Repository`2
    name: Repository
    nameWithType: Repository
    fullName: Hybrid.EntityFrameworkCore.Repository
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EntityFrameworkCore.Repository`2.OSharp.Extensions.ParameterCheckExtensions.Required``2(System.Func{Hybrid.EntityFrameworkCore.Repository{{TEntity},{TKey}},System.Boolean},System.String)
  commentId: M:OSharp.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
  parent: OSharp.Extensions.ParameterCheckExtensions
  definition: OSharp.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
  name: Required<Repository<TEntity, TKey>, TException>(Func<Repository<TEntity, TKey>, Boolean>, String)
  nameWithType: ParameterCheckExtensions.Required<Repository<TEntity, TKey>, TException>(Func<Repository<TEntity, TKey>, Boolean>, String)
  fullName: OSharp.Extensions.ParameterCheckExtensions.Required<Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>, TException>(System.Func<Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>, System.Boolean>, System.String)
  nameWithType.vb: ParameterCheckExtensions.Required(Of Repository(Of TEntity, TKey), TException)(Func(Of Repository(Of TEntity, TKey), Boolean), String)
  fullName.vb: OSharp.Extensions.ParameterCheckExtensions.Required(Of Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey), TException)(System.Func(Of Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey), System.Boolean), System.String)
  name.vb: Required(Of Repository(Of TEntity, TKey), TException)(Func(Of Repository(Of TEntity, TKey), Boolean), String)
  spec.csharp:
  - uid: OSharp.Extensions.ParameterCheckExtensions.Required``2(System.Func{``0,System.Boolean},System.String)
    name: Required<Repository<TEntity, TKey>, TException>
    nameWithType: ParameterCheckExtensions.Required<Repository<TEntity, TKey>, TException>
    fullName: OSharp.Extensions.ParameterCheckExtensions.Required<Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>, TException>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.EntityFrameworkCore.Repository`2
    name: Repository
    nameWithType: Repository
    fullName: Hybrid.EntityFrameworkCore.Repository
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ParameterCheckExtensions.Required``2(System.Func{``0,System.Boolean},System.String)
    name: Required(Of Repository(Of TEntity, TKey), TException)
    nameWithType: ParameterCheckExtensions.Required(Of Repository(Of TEntity, TKey), TException)
    fullName: OSharp.Extensions.ParameterCheckExtensions.Required(Of Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey), TException)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.EntityFrameworkCore.Repository`2
    name: Repository
    nameWithType: Repository
    fullName: Hybrid.EntityFrameworkCore.Repository
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EntityFrameworkCore.Repository`2.OSharp.Extensions.ParameterCheckExtensions.CheckNotNull``1(System.String)
  commentId: M:OSharp.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
  parent: OSharp.Extensions.ParameterCheckExtensions
  definition: OSharp.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
  name: CheckNotNull<Repository<TEntity, TKey>>(String)
  nameWithType: ParameterCheckExtensions.CheckNotNull<Repository<TEntity, TKey>>(String)
  fullName: OSharp.Extensions.ParameterCheckExtensions.CheckNotNull<Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>>(System.String)
  nameWithType.vb: ParameterCheckExtensions.CheckNotNull(Of Repository(Of TEntity, TKey))(String)
  fullName.vb: OSharp.Extensions.ParameterCheckExtensions.CheckNotNull(Of Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey))(System.String)
  name.vb: CheckNotNull(Of Repository(Of TEntity, TKey))(String)
  spec.csharp:
  - uid: OSharp.Extensions.ParameterCheckExtensions.CheckNotNull``1(System.String)
    name: CheckNotNull<Repository<TEntity, TKey>>
    nameWithType: ParameterCheckExtensions.CheckNotNull<Repository<TEntity, TKey>>
    fullName: OSharp.Extensions.ParameterCheckExtensions.CheckNotNull<Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ParameterCheckExtensions.CheckNotNull``1(System.String)
    name: CheckNotNull(Of Repository(Of TEntity, TKey))
    nameWithType: ParameterCheckExtensions.CheckNotNull(Of Repository(Of TEntity, TKey))
    fullName: OSharp.Extensions.ParameterCheckExtensions.CheckNotNull(Of Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey))
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EntityFrameworkCore.Repository`2.OSharp.Extensions.TryCatchExtensions.TryCatch``1(System.Action{Hybrid.EntityFrameworkCore.Repository{{TEntity},{TKey}}},System.Action{System.Exception},System.Action{Hybrid.EntityFrameworkCore.Repository{{TEntity},{TKey}}})
  commentId: M:OSharp.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
  parent: OSharp.Extensions.TryCatchExtensions
  definition: OSharp.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
  name: TryCatch<Repository<TEntity, TKey>>(Action<Repository<TEntity, TKey>>, Action<Exception>, Action<Repository<TEntity, TKey>>)
  nameWithType: TryCatchExtensions.TryCatch<Repository<TEntity, TKey>>(Action<Repository<TEntity, TKey>>, Action<Exception>, Action<Repository<TEntity, TKey>>)
  fullName: OSharp.Extensions.TryCatchExtensions.TryCatch<Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>>(System.Action<Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>>, System.Action<System.Exception>, System.Action<Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of Repository(Of TEntity, TKey))(Action(Of Repository(Of TEntity, TKey)), Action(Of Exception), Action(Of Repository(Of TEntity, TKey)))
  fullName.vb: OSharp.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey))(System.Action(Of Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey)), System.Action(Of System.Exception), System.Action(Of Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey)))
  name.vb: TryCatch(Of Repository(Of TEntity, TKey))(Action(Of Repository(Of TEntity, TKey)), Action(Of Exception), Action(Of Repository(Of TEntity, TKey)))
  spec.csharp:
  - uid: OSharp.Extensions.TryCatchExtensions.TryCatch``1(System.Action{``0},System.Action{System.Exception},System.Action{``0})
    name: TryCatch<Repository<TEntity, TKey>>
    nameWithType: TryCatchExtensions.TryCatch<Repository<TEntity, TKey>>
    fullName: OSharp.Extensions.TryCatchExtensions.TryCatch<Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.EntityFrameworkCore.Repository`2
    name: Repository
    nameWithType: Repository
    fullName: Hybrid.EntityFrameworkCore.Repository
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.EntityFrameworkCore.Repository`2
    name: Repository
    nameWithType: Repository
    fullName: Hybrid.EntityFrameworkCore.Repository
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.TryCatchExtensions.TryCatch``1(System.Action{``0},System.Action{System.Exception},System.Action{``0})
    name: TryCatch(Of Repository(Of TEntity, TKey))
    nameWithType: TryCatchExtensions.TryCatch(Of Repository(Of TEntity, TKey))
    fullName: OSharp.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey))
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.EntityFrameworkCore.Repository`2
    name: Repository
    nameWithType: Repository
    fullName: Hybrid.EntityFrameworkCore.Repository
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.EntityFrameworkCore.Repository`2
    name: Repository
    nameWithType: Repository
    fullName: Hybrid.EntityFrameworkCore.Repository
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EntityFrameworkCore.Repository`2.OSharp.Extensions.TryCatchExtensions.TryCatch``1(System.Action{Hybrid.EntityFrameworkCore.Repository{{TEntity},{TKey}}},System.Action{System.Exception})
  commentId: M:OSharp.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
  parent: OSharp.Extensions.TryCatchExtensions
  definition: OSharp.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
  name: TryCatch<Repository<TEntity, TKey>>(Action<Repository<TEntity, TKey>>, Action<Exception>)
  nameWithType: TryCatchExtensions.TryCatch<Repository<TEntity, TKey>>(Action<Repository<TEntity, TKey>>, Action<Exception>)
  fullName: OSharp.Extensions.TryCatchExtensions.TryCatch<Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>>(System.Action<Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>>, System.Action<System.Exception>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of Repository(Of TEntity, TKey))(Action(Of Repository(Of TEntity, TKey)), Action(Of Exception))
  fullName.vb: OSharp.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey))(System.Action(Of Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey)), System.Action(Of System.Exception))
  name.vb: TryCatch(Of Repository(Of TEntity, TKey))(Action(Of Repository(Of TEntity, TKey)), Action(Of Exception))
  spec.csharp:
  - uid: OSharp.Extensions.TryCatchExtensions.TryCatch``1(System.Action{``0},System.Action{System.Exception})
    name: TryCatch<Repository<TEntity, TKey>>
    nameWithType: TryCatchExtensions.TryCatch<Repository<TEntity, TKey>>
    fullName: OSharp.Extensions.TryCatchExtensions.TryCatch<Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.EntityFrameworkCore.Repository`2
    name: Repository
    nameWithType: Repository
    fullName: Hybrid.EntityFrameworkCore.Repository
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.TryCatchExtensions.TryCatch``1(System.Action{``0},System.Action{System.Exception})
    name: TryCatch(Of Repository(Of TEntity, TKey))
    nameWithType: TryCatchExtensions.TryCatch(Of Repository(Of TEntity, TKey))
    fullName: OSharp.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey))
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.EntityFrameworkCore.Repository`2
    name: Repository
    nameWithType: Repository
    fullName: Hybrid.EntityFrameworkCore.Repository
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EntityFrameworkCore.Repository`2.OSharp.Extensions.TryCatchExtensions.TryCatch``2(System.Func{Hybrid.EntityFrameworkCore.Repository{{TEntity},{TKey}},{TResult}},System.Action{System.Exception},System.Action{Hybrid.EntityFrameworkCore.Repository{{TEntity},{TKey}}})
  commentId: M:OSharp.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
  parent: OSharp.Extensions.TryCatchExtensions
  definition: OSharp.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
  name: TryCatch<Repository<TEntity, TKey>, TResult>(Func<Repository<TEntity, TKey>, TResult>, Action<Exception>, Action<Repository<TEntity, TKey>>)
  nameWithType: TryCatchExtensions.TryCatch<Repository<TEntity, TKey>, TResult>(Func<Repository<TEntity, TKey>, TResult>, Action<Exception>, Action<Repository<TEntity, TKey>>)
  fullName: OSharp.Extensions.TryCatchExtensions.TryCatch<Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>, TResult>(System.Func<Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>, TResult>, System.Action<System.Exception>, System.Action<Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of Repository(Of TEntity, TKey), TResult)(Func(Of Repository(Of TEntity, TKey), TResult), Action(Of Exception), Action(Of Repository(Of TEntity, TKey)))
  fullName.vb: OSharp.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey), TResult)(System.Func(Of Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey), TResult), System.Action(Of System.Exception), System.Action(Of Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey)))
  name.vb: TryCatch(Of Repository(Of TEntity, TKey), TResult)(Func(Of Repository(Of TEntity, TKey), TResult), Action(Of Exception), Action(Of Repository(Of TEntity, TKey)))
  spec.csharp:
  - uid: OSharp.Extensions.TryCatchExtensions.TryCatch``2(System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
    name: TryCatch<Repository<TEntity, TKey>, TResult>
    nameWithType: TryCatchExtensions.TryCatch<Repository<TEntity, TKey>, TResult>
    fullName: OSharp.Extensions.TryCatchExtensions.TryCatch<Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.EntityFrameworkCore.Repository`2
    name: Repository
    nameWithType: Repository
    fullName: Hybrid.EntityFrameworkCore.Repository
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.EntityFrameworkCore.Repository`2
    name: Repository
    nameWithType: Repository
    fullName: Hybrid.EntityFrameworkCore.Repository
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.TryCatchExtensions.TryCatch``2(System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
    name: TryCatch(Of Repository(Of TEntity, TKey), TResult)
    nameWithType: TryCatchExtensions.TryCatch(Of Repository(Of TEntity, TKey), TResult)
    fullName: OSharp.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey), TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.EntityFrameworkCore.Repository`2
    name: Repository
    nameWithType: Repository
    fullName: Hybrid.EntityFrameworkCore.Repository
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.EntityFrameworkCore.Repository`2
    name: Repository
    nameWithType: Repository
    fullName: Hybrid.EntityFrameworkCore.Repository
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EntityFrameworkCore.Repository`2.OSharp.Extensions.TryCatchExtensions.TryCatch``2(System.Func{Hybrid.EntityFrameworkCore.Repository{{TEntity},{TKey}},{TResult}},System.Action{System.Exception})
  commentId: M:OSharp.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
  parent: OSharp.Extensions.TryCatchExtensions
  definition: OSharp.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
  name: TryCatch<Repository<TEntity, TKey>, TResult>(Func<Repository<TEntity, TKey>, TResult>, Action<Exception>)
  nameWithType: TryCatchExtensions.TryCatch<Repository<TEntity, TKey>, TResult>(Func<Repository<TEntity, TKey>, TResult>, Action<Exception>)
  fullName: OSharp.Extensions.TryCatchExtensions.TryCatch<Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>, TResult>(System.Func<Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>, TResult>, System.Action<System.Exception>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of Repository(Of TEntity, TKey), TResult)(Func(Of Repository(Of TEntity, TKey), TResult), Action(Of Exception))
  fullName.vb: OSharp.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey), TResult)(System.Func(Of Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey), TResult), System.Action(Of System.Exception))
  name.vb: TryCatch(Of Repository(Of TEntity, TKey), TResult)(Func(Of Repository(Of TEntity, TKey), TResult), Action(Of Exception))
  spec.csharp:
  - uid: OSharp.Extensions.TryCatchExtensions.TryCatch``2(System.Func{``0,``1},System.Action{System.Exception})
    name: TryCatch<Repository<TEntity, TKey>, TResult>
    nameWithType: TryCatchExtensions.TryCatch<Repository<TEntity, TKey>, TResult>
    fullName: OSharp.Extensions.TryCatchExtensions.TryCatch<Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.EntityFrameworkCore.Repository`2
    name: Repository
    nameWithType: Repository
    fullName: Hybrid.EntityFrameworkCore.Repository
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.TryCatchExtensions.TryCatch``2(System.Func{``0,``1},System.Action{System.Exception})
    name: TryCatch(Of Repository(Of TEntity, TKey), TResult)
    nameWithType: TryCatchExtensions.TryCatch(Of Repository(Of TEntity, TKey), TResult)
    fullName: OSharp.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey), TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.EntityFrameworkCore.Repository`2
    name: Repository
    nameWithType: Repository
    fullName: Hybrid.EntityFrameworkCore.Repository
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EntityFrameworkCore.Repository`2.OSharp.Extensions.TryCatchExtensions.TryFinally``1(System.Action{Hybrid.EntityFrameworkCore.Repository{{TEntity},{TKey}}},System.Action{Hybrid.EntityFrameworkCore.Repository{{TEntity},{TKey}}})
  commentId: M:OSharp.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
  parent: OSharp.Extensions.TryCatchExtensions
  definition: OSharp.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
  name: TryFinally<Repository<TEntity, TKey>>(Action<Repository<TEntity, TKey>>, Action<Repository<TEntity, TKey>>)
  nameWithType: TryCatchExtensions.TryFinally<Repository<TEntity, TKey>>(Action<Repository<TEntity, TKey>>, Action<Repository<TEntity, TKey>>)
  fullName: OSharp.Extensions.TryCatchExtensions.TryFinally<Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>>(System.Action<Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>>, System.Action<Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>>)
  nameWithType.vb: TryCatchExtensions.TryFinally(Of Repository(Of TEntity, TKey))(Action(Of Repository(Of TEntity, TKey)), Action(Of Repository(Of TEntity, TKey)))
  fullName.vb: OSharp.Extensions.TryCatchExtensions.TryFinally(Of Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey))(System.Action(Of Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey)), System.Action(Of Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey)))
  name.vb: TryFinally(Of Repository(Of TEntity, TKey))(Action(Of Repository(Of TEntity, TKey)), Action(Of Repository(Of TEntity, TKey)))
  spec.csharp:
  - uid: OSharp.Extensions.TryCatchExtensions.TryFinally``1(System.Action{``0},System.Action{``0})
    name: TryFinally<Repository<TEntity, TKey>>
    nameWithType: TryCatchExtensions.TryFinally<Repository<TEntity, TKey>>
    fullName: OSharp.Extensions.TryCatchExtensions.TryFinally<Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.EntityFrameworkCore.Repository`2
    name: Repository
    nameWithType: Repository
    fullName: Hybrid.EntityFrameworkCore.Repository
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.EntityFrameworkCore.Repository`2
    name: Repository
    nameWithType: Repository
    fullName: Hybrid.EntityFrameworkCore.Repository
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.TryCatchExtensions.TryFinally``1(System.Action{``0},System.Action{``0})
    name: TryFinally(Of Repository(Of TEntity, TKey))
    nameWithType: TryCatchExtensions.TryFinally(Of Repository(Of TEntity, TKey))
    fullName: OSharp.Extensions.TryCatchExtensions.TryFinally(Of Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey))
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.EntityFrameworkCore.Repository`2
    name: Repository
    nameWithType: Repository
    fullName: Hybrid.EntityFrameworkCore.Repository
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.EntityFrameworkCore.Repository`2
    name: Repository
    nameWithType: Repository
    fullName: Hybrid.EntityFrameworkCore.Repository
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.OSharp.Json.JsonExtensions.ToJsonString(System.Boolean,System.Boolean)
  commentId: M:OSharp.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
  parent: OSharp.Json.JsonExtensions
  definition: OSharp.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
  name: ToJsonString(Boolean, Boolean)
  nameWithType: JsonExtensions.ToJsonString(Boolean, Boolean)
  fullName: OSharp.Json.JsonExtensions.ToJsonString(System.Boolean, System.Boolean)
  spec.csharp:
  - uid: OSharp.Json.JsonExtensions.ToJsonString(System.Boolean,System.Boolean)
    name: ToJsonString
    nameWithType: JsonExtensions.ToJsonString
    fullName: OSharp.Json.JsonExtensions.ToJsonString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Json.JsonExtensions.ToJsonString(System.Boolean,System.Boolean)
    name: ToJsonString
    nameWithType: JsonExtensions.ToJsonString
    fullName: OSharp.Json.JsonExtensions.ToJsonString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.OSharp.Mapping.MapperExtensions.MapTo``1
  commentId: M:OSharp.Mapping.MapperExtensions.MapTo``1(System.Object)
  parent: OSharp.Mapping.MapperExtensions
  definition: OSharp.Mapping.MapperExtensions.MapTo``1(System.Object)
  name: MapTo<TTarget>()
  nameWithType: MapperExtensions.MapTo<TTarget>()
  fullName: OSharp.Mapping.MapperExtensions.MapTo<TTarget>()
  nameWithType.vb: MapperExtensions.MapTo(Of TTarget)()
  fullName.vb: OSharp.Mapping.MapperExtensions.MapTo(Of TTarget)()
  name.vb: MapTo(Of TTarget)()
  spec.csharp:
  - uid: OSharp.Mapping.MapperExtensions.MapTo``1
    name: MapTo<TTarget>
    nameWithType: MapperExtensions.MapTo<TTarget>
    fullName: OSharp.Mapping.MapperExtensions.MapTo<TTarget>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Mapping.MapperExtensions.MapTo``1
    name: MapTo(Of TTarget)
    nameWithType: MapperExtensions.MapTo(Of TTarget)
    fullName: OSharp.Mapping.MapperExtensions.MapTo(Of TTarget)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EntityFrameworkCore.Repository`2.OSharp.Mapping.MapperExtensions.MapTo``2({TTarget})
  commentId: M:OSharp.Mapping.MapperExtensions.MapTo``2(``0,``1)
  parent: OSharp.Mapping.MapperExtensions
  definition: OSharp.Mapping.MapperExtensions.MapTo``2(``0,``1)
  name: MapTo<Repository<TEntity, TKey>, TTarget>(TTarget)
  nameWithType: MapperExtensions.MapTo<Repository<TEntity, TKey>, TTarget>(TTarget)
  fullName: OSharp.Mapping.MapperExtensions.MapTo<Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>, TTarget>(TTarget)
  nameWithType.vb: MapperExtensions.MapTo(Of Repository(Of TEntity, TKey), TTarget)(TTarget)
  fullName.vb: OSharp.Mapping.MapperExtensions.MapTo(Of Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey), TTarget)(TTarget)
  name.vb: MapTo(Of Repository(Of TEntity, TKey), TTarget)(TTarget)
  spec.csharp:
  - uid: OSharp.Mapping.MapperExtensions.MapTo``2(``1)
    name: MapTo<Repository<TEntity, TKey>, TTarget>
    nameWithType: MapperExtensions.MapTo<Repository<TEntity, TKey>, TTarget>
    fullName: OSharp.Mapping.MapperExtensions.MapTo<Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>, TTarget>
  - name: (
    nameWithType: (
    fullName: (
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Mapping.MapperExtensions.MapTo``2(``1)
    name: MapTo(Of Repository(Of TEntity, TKey), TTarget)
    nameWithType: MapperExtensions.MapTo(Of Repository(Of TEntity, TKey), TTarget)
    fullName: OSharp.Mapping.MapperExtensions.MapTo(Of Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey), TTarget)
  - name: (
    nameWithType: (
    fullName: (
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.OSharp.Reflection.LockExtensions.Locking(System.Action)
  commentId: M:OSharp.Reflection.LockExtensions.Locking(System.Object,System.Action)
  parent: OSharp.Reflection.LockExtensions
  definition: OSharp.Reflection.LockExtensions.Locking(System.Object,System.Action)
  name: Locking(Action)
  nameWithType: LockExtensions.Locking(Action)
  fullName: OSharp.Reflection.LockExtensions.Locking(System.Action)
  spec.csharp:
  - uid: OSharp.Reflection.LockExtensions.Locking(System.Action)
    name: Locking
    nameWithType: LockExtensions.Locking
    fullName: OSharp.Reflection.LockExtensions.Locking
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Reflection.LockExtensions.Locking(System.Action)
    name: Locking
    nameWithType: LockExtensions.Locking
    fullName: OSharp.Reflection.LockExtensions.Locking
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EntityFrameworkCore.Repository`2.OSharp.Reflection.LockExtensions.Locking``1(System.Action{Hybrid.EntityFrameworkCore.Repository{{TEntity},{TKey}}})
  commentId: M:OSharp.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
  parent: OSharp.Reflection.LockExtensions
  definition: OSharp.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
  name: Locking<Repository<TEntity, TKey>>(Action<Repository<TEntity, TKey>>)
  nameWithType: LockExtensions.Locking<Repository<TEntity, TKey>>(Action<Repository<TEntity, TKey>>)
  fullName: OSharp.Reflection.LockExtensions.Locking<Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>>(System.Action<Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>>)
  nameWithType.vb: LockExtensions.Locking(Of Repository(Of TEntity, TKey))(Action(Of Repository(Of TEntity, TKey)))
  fullName.vb: OSharp.Reflection.LockExtensions.Locking(Of Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey))(System.Action(Of Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey)))
  name.vb: Locking(Of Repository(Of TEntity, TKey))(Action(Of Repository(Of TEntity, TKey)))
  spec.csharp:
  - uid: OSharp.Reflection.LockExtensions.Locking``1(System.Action{``0})
    name: Locking<Repository<TEntity, TKey>>
    nameWithType: LockExtensions.Locking<Repository<TEntity, TKey>>
    fullName: OSharp.Reflection.LockExtensions.Locking<Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.EntityFrameworkCore.Repository`2
    name: Repository
    nameWithType: Repository
    fullName: Hybrid.EntityFrameworkCore.Repository
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Reflection.LockExtensions.Locking``1(System.Action{``0})
    name: Locking(Of Repository(Of TEntity, TKey))
    nameWithType: LockExtensions.Locking(Of Repository(Of TEntity, TKey))
    fullName: OSharp.Reflection.LockExtensions.Locking(Of Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey))
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.EntityFrameworkCore.Repository`2
    name: Repository
    nameWithType: Repository
    fullName: Hybrid.EntityFrameworkCore.Repository
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.OSharp.Reflection.LockExtensions.Locking``1(System.Func{{TResult}})
  commentId: M:OSharp.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
  parent: OSharp.Reflection.LockExtensions
  definition: OSharp.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
  name: Locking<TResult>(Func<TResult>)
  nameWithType: LockExtensions.Locking<TResult>(Func<TResult>)
  fullName: OSharp.Reflection.LockExtensions.Locking<TResult>(System.Func<TResult>)
  nameWithType.vb: LockExtensions.Locking(Of TResult)(Func(Of TResult))
  fullName.vb: OSharp.Reflection.LockExtensions.Locking(Of TResult)(System.Func(Of TResult))
  name.vb: Locking(Of TResult)(Func(Of TResult))
  spec.csharp:
  - uid: OSharp.Reflection.LockExtensions.Locking``1(System.Func{``0})
    name: Locking<TResult>
    nameWithType: LockExtensions.Locking<TResult>
    fullName: OSharp.Reflection.LockExtensions.Locking<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Reflection.LockExtensions.Locking``1(System.Func{``0})
    name: Locking(Of TResult)
    nameWithType: LockExtensions.Locking(Of TResult)
    fullName: OSharp.Reflection.LockExtensions.Locking(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EntityFrameworkCore.Repository`2.OSharp.Reflection.LockExtensions.Locking``2(System.Func{Hybrid.EntityFrameworkCore.Repository{{TEntity},{TKey}},{TResult}})
  commentId: M:OSharp.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
  parent: OSharp.Reflection.LockExtensions
  definition: OSharp.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
  name: Locking<Repository<TEntity, TKey>, TResult>(Func<Repository<TEntity, TKey>, TResult>)
  nameWithType: LockExtensions.Locking<Repository<TEntity, TKey>, TResult>(Func<Repository<TEntity, TKey>, TResult>)
  fullName: OSharp.Reflection.LockExtensions.Locking<Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>, TResult>(System.Func<Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>, TResult>)
  nameWithType.vb: LockExtensions.Locking(Of Repository(Of TEntity, TKey), TResult)(Func(Of Repository(Of TEntity, TKey), TResult))
  fullName.vb: OSharp.Reflection.LockExtensions.Locking(Of Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey), TResult)(System.Func(Of Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey), TResult))
  name.vb: Locking(Of Repository(Of TEntity, TKey), TResult)(Func(Of Repository(Of TEntity, TKey), TResult))
  spec.csharp:
  - uid: OSharp.Reflection.LockExtensions.Locking``2(System.Func{``0,``1})
    name: Locking<Repository<TEntity, TKey>, TResult>
    nameWithType: LockExtensions.Locking<Repository<TEntity, TKey>, TResult>
    fullName: OSharp.Reflection.LockExtensions.Locking<Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.EntityFrameworkCore.Repository`2
    name: Repository
    nameWithType: Repository
    fullName: Hybrid.EntityFrameworkCore.Repository
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Reflection.LockExtensions.Locking``2(System.Func{``0,``1})
    name: Locking(Of Repository(Of TEntity, TKey), TResult)
    nameWithType: LockExtensions.Locking(Of Repository(Of TEntity, TKey), TResult)
    fullName: OSharp.Reflection.LockExtensions.Locking(Of Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey), TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.EntityFrameworkCore.Repository`2
    name: Repository
    nameWithType: Repository
    fullName: Hybrid.EntityFrameworkCore.Repository
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Domain.Repositories.IRepository{`0,`1}.Hybrid.EntityFrameworkCore.RepositoryExtensions.UpdateBatchAndIntercept``2(System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}},System.Action{Z.EntityFramework.Extensions.BatchDelete})
  commentId: M:Hybrid.EntityFrameworkCore.RepositoryExtensions.UpdateBatchAndIntercept``2(Hybrid.Domain.Repositories.IRepository{``0,``1},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Action{Z.EntityFramework.Extensions.BatchDelete})
  parent: Hybrid.EntityFrameworkCore.RepositoryExtensions
  definition: Hybrid.EntityFrameworkCore.RepositoryExtensions.UpdateBatchAndIntercept``2(Hybrid.Domain.Repositories.IRepository{``0,``1},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Action{Z.EntityFramework.Extensions.BatchDelete})
  name: UpdateBatchAndIntercept<TEntity, TKey>(Expression<Func<TEntity, Boolean>>, Action<BatchDelete>)
  nameWithType: RepositoryExtensions.UpdateBatchAndIntercept<TEntity, TKey>(Expression<Func<TEntity, Boolean>>, Action<BatchDelete>)
  fullName: Hybrid.EntityFrameworkCore.RepositoryExtensions.UpdateBatchAndIntercept<TEntity, TKey>(System.Linq.Expressions.Expression<System.Func<TEntity, System.Boolean>>, System.Action<Z.EntityFramework.Extensions.BatchDelete>)
  nameWithType.vb: RepositoryExtensions.UpdateBatchAndIntercept(Of TEntity, TKey)(Expression(Of Func(Of TEntity, Boolean)), Action(Of BatchDelete))
  fullName.vb: Hybrid.EntityFrameworkCore.RepositoryExtensions.UpdateBatchAndIntercept(Of TEntity, TKey)(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Boolean)), System.Action(Of Z.EntityFramework.Extensions.BatchDelete))
  name.vb: UpdateBatchAndIntercept(Of TEntity, TKey)(Expression(Of Func(Of TEntity, Boolean)), Action(Of BatchDelete))
  spec.csharp:
  - uid: Hybrid.EntityFrameworkCore.RepositoryExtensions.UpdateBatchAndIntercept``2(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Action{Z.EntityFramework.Extensions.BatchDelete})
    name: UpdateBatchAndIntercept<TEntity, TKey>
    nameWithType: RepositoryExtensions.UpdateBatchAndIntercept<TEntity, TKey>
    fullName: Hybrid.EntityFrameworkCore.RepositoryExtensions.UpdateBatchAndIntercept<TEntity, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Z.EntityFramework.Extensions.BatchDelete
    name: BatchDelete
    nameWithType: BatchDelete
    fullName: Z.EntityFramework.Extensions.BatchDelete
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.EntityFrameworkCore.RepositoryExtensions.UpdateBatchAndIntercept``2(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Action{Z.EntityFramework.Extensions.BatchDelete})
    name: UpdateBatchAndIntercept(Of TEntity, TKey)
    nameWithType: RepositoryExtensions.UpdateBatchAndIntercept(Of TEntity, TKey)
    fullName: Hybrid.EntityFrameworkCore.RepositoryExtensions.UpdateBatchAndIntercept(Of TEntity, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Z.EntityFramework.Extensions.BatchDelete
    name: BatchDelete
    nameWithType: BatchDelete
    fullName: Z.EntityFramework.Extensions.BatchDelete
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Domain.Repositories.IRepository{`0,`1}.Hybrid.EntityFrameworkCore.RepositoryExtensions.UpdateBatchAndInterceptAsync``2(System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}},System.Action{Z.EntityFramework.Extensions.BatchDelete})
  commentId: M:Hybrid.EntityFrameworkCore.RepositoryExtensions.UpdateBatchAndInterceptAsync``2(Hybrid.Domain.Repositories.IRepository{``0,``1},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Action{Z.EntityFramework.Extensions.BatchDelete})
  parent: Hybrid.EntityFrameworkCore.RepositoryExtensions
  definition: Hybrid.EntityFrameworkCore.RepositoryExtensions.UpdateBatchAndInterceptAsync``2(Hybrid.Domain.Repositories.IRepository{``0,``1},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Action{Z.EntityFramework.Extensions.BatchDelete})
  name: UpdateBatchAndInterceptAsync<TEntity, TKey>(Expression<Func<TEntity, Boolean>>, Action<BatchDelete>)
  nameWithType: RepositoryExtensions.UpdateBatchAndInterceptAsync<TEntity, TKey>(Expression<Func<TEntity, Boolean>>, Action<BatchDelete>)
  fullName: Hybrid.EntityFrameworkCore.RepositoryExtensions.UpdateBatchAndInterceptAsync<TEntity, TKey>(System.Linq.Expressions.Expression<System.Func<TEntity, System.Boolean>>, System.Action<Z.EntityFramework.Extensions.BatchDelete>)
  nameWithType.vb: RepositoryExtensions.UpdateBatchAndInterceptAsync(Of TEntity, TKey)(Expression(Of Func(Of TEntity, Boolean)), Action(Of BatchDelete))
  fullName.vb: Hybrid.EntityFrameworkCore.RepositoryExtensions.UpdateBatchAndInterceptAsync(Of TEntity, TKey)(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Boolean)), System.Action(Of Z.EntityFramework.Extensions.BatchDelete))
  name.vb: UpdateBatchAndInterceptAsync(Of TEntity, TKey)(Expression(Of Func(Of TEntity, Boolean)), Action(Of BatchDelete))
  spec.csharp:
  - uid: Hybrid.EntityFrameworkCore.RepositoryExtensions.UpdateBatchAndInterceptAsync``2(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Action{Z.EntityFramework.Extensions.BatchDelete})
    name: UpdateBatchAndInterceptAsync<TEntity, TKey>
    nameWithType: RepositoryExtensions.UpdateBatchAndInterceptAsync<TEntity, TKey>
    fullName: Hybrid.EntityFrameworkCore.RepositoryExtensions.UpdateBatchAndInterceptAsync<TEntity, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Z.EntityFramework.Extensions.BatchDelete
    name: BatchDelete
    nameWithType: BatchDelete
    fullName: Z.EntityFramework.Extensions.BatchDelete
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.EntityFrameworkCore.RepositoryExtensions.UpdateBatchAndInterceptAsync``2(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Action{Z.EntityFramework.Extensions.BatchDelete})
    name: UpdateBatchAndInterceptAsync(Of TEntity, TKey)
    nameWithType: RepositoryExtensions.UpdateBatchAndInterceptAsync(Of TEntity, TKey)
    fullName: Hybrid.EntityFrameworkCore.RepositoryExtensions.UpdateBatchAndInterceptAsync(Of TEntity, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Z.EntityFramework.Extensions.BatchDelete
    name: BatchDelete
    nameWithType: BatchDelete
    fullName: Z.EntityFramework.Extensions.BatchDelete
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Domain.Repositories.IRepository{`0,`1}.Hybrid.EntityFrameworkCore.RepositoryExtensions.UpdateBatchAndIntercept``2(System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}},System.Linq.Expressions.Expression{System.Func{{TEntity},{TEntity}}},System.Action{Z.EntityFramework.Extensions.BatchUpdate})
  commentId: M:Hybrid.EntityFrameworkCore.RepositoryExtensions.UpdateBatchAndIntercept``2(Hybrid.Domain.Repositories.IRepository{``0,``1},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,``0}},System.Action{Z.EntityFramework.Extensions.BatchUpdate})
  parent: Hybrid.EntityFrameworkCore.RepositoryExtensions
  definition: Hybrid.EntityFrameworkCore.RepositoryExtensions.UpdateBatchAndIntercept``2(Hybrid.Domain.Repositories.IRepository{``0,``1},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,``0}},System.Action{Z.EntityFramework.Extensions.BatchUpdate})
  name: UpdateBatchAndIntercept<TEntity, TKey>(Expression<Func<TEntity, Boolean>>, Expression<Func<TEntity, TEntity>>, Action<BatchUpdate>)
  nameWithType: RepositoryExtensions.UpdateBatchAndIntercept<TEntity, TKey>(Expression<Func<TEntity, Boolean>>, Expression<Func<TEntity, TEntity>>, Action<BatchUpdate>)
  fullName: Hybrid.EntityFrameworkCore.RepositoryExtensions.UpdateBatchAndIntercept<TEntity, TKey>(System.Linq.Expressions.Expression<System.Func<TEntity, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<TEntity, TEntity>>, System.Action<Z.EntityFramework.Extensions.BatchUpdate>)
  nameWithType.vb: RepositoryExtensions.UpdateBatchAndIntercept(Of TEntity, TKey)(Expression(Of Func(Of TEntity, Boolean)), Expression(Of Func(Of TEntity, TEntity)), Action(Of BatchUpdate))
  fullName.vb: Hybrid.EntityFrameworkCore.RepositoryExtensions.UpdateBatchAndIntercept(Of TEntity, TKey)(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of TEntity, TEntity)), System.Action(Of Z.EntityFramework.Extensions.BatchUpdate))
  name.vb: UpdateBatchAndIntercept(Of TEntity, TKey)(Expression(Of Func(Of TEntity, Boolean)), Expression(Of Func(Of TEntity, TEntity)), Action(Of BatchUpdate))
  spec.csharp:
  - uid: Hybrid.EntityFrameworkCore.RepositoryExtensions.UpdateBatchAndIntercept``2(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,``0}},System.Action{Z.EntityFramework.Extensions.BatchUpdate})
    name: UpdateBatchAndIntercept<TEntity, TKey>
    nameWithType: RepositoryExtensions.UpdateBatchAndIntercept<TEntity, TKey>
    fullName: Hybrid.EntityFrameworkCore.RepositoryExtensions.UpdateBatchAndIntercept<TEntity, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Z.EntityFramework.Extensions.BatchUpdate
    name: BatchUpdate
    nameWithType: BatchUpdate
    fullName: Z.EntityFramework.Extensions.BatchUpdate
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.EntityFrameworkCore.RepositoryExtensions.UpdateBatchAndIntercept``2(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,``0}},System.Action{Z.EntityFramework.Extensions.BatchUpdate})
    name: UpdateBatchAndIntercept(Of TEntity, TKey)
    nameWithType: RepositoryExtensions.UpdateBatchAndIntercept(Of TEntity, TKey)
    fullName: Hybrid.EntityFrameworkCore.RepositoryExtensions.UpdateBatchAndIntercept(Of TEntity, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Z.EntityFramework.Extensions.BatchUpdate
    name: BatchUpdate
    nameWithType: BatchUpdate
    fullName: Z.EntityFramework.Extensions.BatchUpdate
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Domain.Repositories.IRepository{`0,`1}.Hybrid.EntityFrameworkCore.RepositoryExtensions.UpdateBatchAndInterceptAsync``2(System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}},System.Linq.Expressions.Expression{System.Func{{TEntity},{TEntity}}},System.Action{Z.EntityFramework.Extensions.BatchUpdate})
  commentId: M:Hybrid.EntityFrameworkCore.RepositoryExtensions.UpdateBatchAndInterceptAsync``2(Hybrid.Domain.Repositories.IRepository{``0,``1},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,``0}},System.Action{Z.EntityFramework.Extensions.BatchUpdate})
  parent: Hybrid.EntityFrameworkCore.RepositoryExtensions
  definition: Hybrid.EntityFrameworkCore.RepositoryExtensions.UpdateBatchAndInterceptAsync``2(Hybrid.Domain.Repositories.IRepository{``0,``1},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,``0}},System.Action{Z.EntityFramework.Extensions.BatchUpdate})
  name: UpdateBatchAndInterceptAsync<TEntity, TKey>(Expression<Func<TEntity, Boolean>>, Expression<Func<TEntity, TEntity>>, Action<BatchUpdate>)
  nameWithType: RepositoryExtensions.UpdateBatchAndInterceptAsync<TEntity, TKey>(Expression<Func<TEntity, Boolean>>, Expression<Func<TEntity, TEntity>>, Action<BatchUpdate>)
  fullName: Hybrid.EntityFrameworkCore.RepositoryExtensions.UpdateBatchAndInterceptAsync<TEntity, TKey>(System.Linq.Expressions.Expression<System.Func<TEntity, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<TEntity, TEntity>>, System.Action<Z.EntityFramework.Extensions.BatchUpdate>)
  nameWithType.vb: RepositoryExtensions.UpdateBatchAndInterceptAsync(Of TEntity, TKey)(Expression(Of Func(Of TEntity, Boolean)), Expression(Of Func(Of TEntity, TEntity)), Action(Of BatchUpdate))
  fullName.vb: Hybrid.EntityFrameworkCore.RepositoryExtensions.UpdateBatchAndInterceptAsync(Of TEntity, TKey)(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of TEntity, TEntity)), System.Action(Of Z.EntityFramework.Extensions.BatchUpdate))
  name.vb: UpdateBatchAndInterceptAsync(Of TEntity, TKey)(Expression(Of Func(Of TEntity, Boolean)), Expression(Of Func(Of TEntity, TEntity)), Action(Of BatchUpdate))
  spec.csharp:
  - uid: Hybrid.EntityFrameworkCore.RepositoryExtensions.UpdateBatchAndInterceptAsync``2(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,``0}},System.Action{Z.EntityFramework.Extensions.BatchUpdate})
    name: UpdateBatchAndInterceptAsync<TEntity, TKey>
    nameWithType: RepositoryExtensions.UpdateBatchAndInterceptAsync<TEntity, TKey>
    fullName: Hybrid.EntityFrameworkCore.RepositoryExtensions.UpdateBatchAndInterceptAsync<TEntity, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Z.EntityFramework.Extensions.BatchUpdate
    name: BatchUpdate
    nameWithType: BatchUpdate
    fullName: Z.EntityFramework.Extensions.BatchUpdate
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.EntityFrameworkCore.RepositoryExtensions.UpdateBatchAndInterceptAsync``2(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,``0}},System.Action{Z.EntityFramework.Extensions.BatchUpdate})
    name: UpdateBatchAndInterceptAsync(Of TEntity, TKey)
    nameWithType: RepositoryExtensions.UpdateBatchAndInterceptAsync(Of TEntity, TKey)
    fullName: Hybrid.EntityFrameworkCore.RepositoryExtensions.UpdateBatchAndInterceptAsync(Of TEntity, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Z.EntityFramework.Extensions.BatchUpdate
    name: BatchUpdate
    nameWithType: BatchUpdate
    fullName: Z.EntityFramework.Extensions.BatchUpdate
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Domain.Repositories.IRepository{`0,`1}.Hybrid.EntityFrameworkCore.RepositoryExtensions.FromSql``2(System.String,System.Object[])
  commentId: M:Hybrid.EntityFrameworkCore.RepositoryExtensions.FromSql``2(Hybrid.Domain.Repositories.IRepository{``0,``1},System.String,System.Object[])
  parent: Hybrid.EntityFrameworkCore.RepositoryExtensions
  definition: Hybrid.EntityFrameworkCore.RepositoryExtensions.FromSql``2(Hybrid.Domain.Repositories.IRepository{``0,``1},System.String,System.Object[])
  name: FromSql<TEntity, TKey>(String, Object[])
  nameWithType: RepositoryExtensions.FromSql<TEntity, TKey>(String, Object[])
  fullName: Hybrid.EntityFrameworkCore.RepositoryExtensions.FromSql<TEntity, TKey>(System.String, System.Object[])
  nameWithType.vb: RepositoryExtensions.FromSql(Of TEntity, TKey)(String, Object())
  fullName.vb: Hybrid.EntityFrameworkCore.RepositoryExtensions.FromSql(Of TEntity, TKey)(System.String, System.Object())
  name.vb: FromSql(Of TEntity, TKey)(String, Object())
  spec.csharp:
  - uid: Hybrid.EntityFrameworkCore.RepositoryExtensions.FromSql``2(System.String,System.Object[])
    name: FromSql<TEntity, TKey>
    nameWithType: RepositoryExtensions.FromSql<TEntity, TKey>
    fullName: Hybrid.EntityFrameworkCore.RepositoryExtensions.FromSql<TEntity, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.EntityFrameworkCore.RepositoryExtensions.FromSql``2(System.String,System.Object[])
    name: FromSql(Of TEntity, TKey)
    nameWithType: RepositoryExtensions.FromSql(Of TEntity, TKey)
    fullName: Hybrid.EntityFrameworkCore.RepositoryExtensions.FromSql(Of TEntity, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Extensions.ObjectExtensions.CastTo(System.Type)
  commentId: M:Hybrid.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
  parent: Hybrid.Extensions.ObjectExtensions
  definition: Hybrid.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
  name: CastTo(Type)
  nameWithType: ObjectExtensions.CastTo(Type)
  fullName: Hybrid.Extensions.ObjectExtensions.CastTo(System.Type)
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo(System.Type)
    name: CastTo
    nameWithType: ObjectExtensions.CastTo
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo(System.Type)
    name: CastTo
    nameWithType: ObjectExtensions.CastTo
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Extensions.ObjectExtensions.CastTo``1
  commentId: M:Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object)
  parent: Hybrid.Extensions.ObjectExtensions
  definition: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object)
  name: CastTo<T>()
  nameWithType: ObjectExtensions.CastTo<T>()
  fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>()
  nameWithType.vb: ObjectExtensions.CastTo(Of T)()
  fullName.vb: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)()
  name.vb: CastTo(Of T)()
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1
    name: CastTo<T>
    nameWithType: ObjectExtensions.CastTo<T>
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1
    name: CastTo(Of T)
    nameWithType: ObjectExtensions.CastTo(Of T)
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Extensions.ObjectExtensions.CastTo``1({T})
  commentId: M:Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
  parent: Hybrid.Extensions.ObjectExtensions
  definition: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
  name: CastTo<T>(T)
  nameWithType: ObjectExtensions.CastTo<T>(T)
  fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>(T)
  nameWithType.vb: ObjectExtensions.CastTo(Of T)(T)
  fullName.vb: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)(T)
  name.vb: CastTo(Of T)(T)
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(``0)
    name: CastTo<T>
    nameWithType: ObjectExtensions.CastTo<T>
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(``0)
    name: CastTo(Of T)
    nameWithType: ObjectExtensions.CastTo(Of T)
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EntityFrameworkCore.Repository`2.Hybrid.Extensions.ObjectExtensions.IsIn``1(Hybrid.EntityFrameworkCore.Repository{{TEntity},{TKey}}[])
  commentId: M:Hybrid.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
  parent: Hybrid.Extensions.ObjectExtensions
  definition: Hybrid.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
  name: IsIn<Repository<TEntity, TKey>>(Repository<TEntity, TKey>[])
  nameWithType: ObjectExtensions.IsIn<Repository<TEntity, TKey>>(Repository<TEntity, TKey>[])
  fullName: Hybrid.Extensions.ObjectExtensions.IsIn<Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>>(Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>[])
  nameWithType.vb: ObjectExtensions.IsIn(Of Repository(Of TEntity, TKey))(Repository(Of TEntity, TKey)())
  fullName.vb: Hybrid.Extensions.ObjectExtensions.IsIn(Of Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey))(Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey)())
  name.vb: IsIn(Of Repository(Of TEntity, TKey))(Repository(Of TEntity, TKey)())
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.IsIn``1(``0[])
    name: IsIn<Repository<TEntity, TKey>>
    nameWithType: ObjectExtensions.IsIn<Repository<TEntity, TKey>>
    fullName: Hybrid.Extensions.ObjectExtensions.IsIn<Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Hybrid.EntityFrameworkCore.Repository`2
    name: Repository
    nameWithType: Repository
    fullName: Hybrid.EntityFrameworkCore.Repository
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.IsIn``1(``0[])
    name: IsIn(Of Repository(Of TEntity, TKey))
    nameWithType: ObjectExtensions.IsIn(Of Repository(Of TEntity, TKey))
    fullName: Hybrid.Extensions.ObjectExtensions.IsIn(Of Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey))
  - name: (
    nameWithType: (
    fullName: (
  - uid: Hybrid.EntityFrameworkCore.Repository`2
    name: Repository
    nameWithType: Repository
    fullName: Hybrid.EntityFrameworkCore.Repository
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Extensions.ObjectExtensions.ToDynamic
  commentId: M:Hybrid.Extensions.ObjectExtensions.ToDynamic(System.Object)
  parent: Hybrid.Extensions.ObjectExtensions
  definition: Hybrid.Extensions.ObjectExtensions.ToDynamic(System.Object)
  name: ToDynamic()
  nameWithType: ObjectExtensions.ToDynamic()
  fullName: Hybrid.Extensions.ObjectExtensions.ToDynamic()
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.ToDynamic
    name: ToDynamic
    nameWithType: ObjectExtensions.ToDynamic
    fullName: Hybrid.Extensions.ObjectExtensions.ToDynamic
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.ToDynamic
    name: ToDynamic
    nameWithType: ObjectExtensions.ToDynamic
    fullName: Hybrid.Extensions.ObjectExtensions.ToDynamic
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EntityFrameworkCore.Repository`2.Hybrid.Extensions.ObjectExtensions.DeepClone``1
  commentId: M:Hybrid.Extensions.ObjectExtensions.DeepClone``1(``0)
  parent: Hybrid.Extensions.ObjectExtensions
  definition: Hybrid.Extensions.ObjectExtensions.DeepClone``1(``0)
  name: DeepClone<Repository<TEntity, TKey>>()
  nameWithType: ObjectExtensions.DeepClone<Repository<TEntity, TKey>>()
  fullName: Hybrid.Extensions.ObjectExtensions.DeepClone<Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>>()
  nameWithType.vb: ObjectExtensions.DeepClone(Of Repository(Of TEntity, TKey))()
  fullName.vb: Hybrid.Extensions.ObjectExtensions.DeepClone(Of Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey))()
  name.vb: DeepClone(Of Repository(Of TEntity, TKey))()
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.DeepClone``1
    name: DeepClone<Repository<TEntity, TKey>>
    nameWithType: ObjectExtensions.DeepClone<Repository<TEntity, TKey>>
    fullName: Hybrid.Extensions.ObjectExtensions.DeepClone<Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.DeepClone``1
    name: DeepClone(Of Repository(Of TEntity, TKey))
    nameWithType: ObjectExtensions.DeepClone(Of Repository(Of TEntity, TKey))
    fullName: Hybrid.Extensions.ObjectExtensions.DeepClone(Of Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey))
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EntityFrameworkCore.Repository`2.Hybrid.Extensions.ParameterCheckExtensions.Required``1(System.Func{Hybrid.EntityFrameworkCore.Repository{{TEntity},{TKey}},System.Boolean},System.String)
  commentId: M:Hybrid.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
  parent: Hybrid.Extensions.ParameterCheckExtensions
  definition: Hybrid.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
  name: Required<Repository<TEntity, TKey>>(Func<Repository<TEntity, TKey>, Boolean>, String)
  nameWithType: ParameterCheckExtensions.Required<Repository<TEntity, TKey>>(Func<Repository<TEntity, TKey>, Boolean>, String)
  fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>>(System.Func<Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>, System.Boolean>, System.String)
  nameWithType.vb: ParameterCheckExtensions.Required(Of Repository(Of TEntity, TKey))(Func(Of Repository(Of TEntity, TKey), Boolean), String)
  fullName.vb: Hybrid.Extensions.ParameterCheckExtensions.Required(Of Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey))(System.Func(Of Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey), System.Boolean), System.String)
  name.vb: Required(Of Repository(Of TEntity, TKey))(Func(Of Repository(Of TEntity, TKey), Boolean), String)
  spec.csharp:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``1(System.Func{``0,System.Boolean},System.String)
    name: Required<Repository<TEntity, TKey>>
    nameWithType: ParameterCheckExtensions.Required<Repository<TEntity, TKey>>
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.EntityFrameworkCore.Repository`2
    name: Repository
    nameWithType: Repository
    fullName: Hybrid.EntityFrameworkCore.Repository
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``1(System.Func{``0,System.Boolean},System.String)
    name: Required(Of Repository(Of TEntity, TKey))
    nameWithType: ParameterCheckExtensions.Required(Of Repository(Of TEntity, TKey))
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required(Of Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey))
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.EntityFrameworkCore.Repository`2
    name: Repository
    nameWithType: Repository
    fullName: Hybrid.EntityFrameworkCore.Repository
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EntityFrameworkCore.Repository`2.Hybrid.Extensions.ParameterCheckExtensions.Required``2(System.Func{Hybrid.EntityFrameworkCore.Repository{{TEntity},{TKey}},System.Boolean},System.String)
  commentId: M:Hybrid.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
  parent: Hybrid.Extensions.ParameterCheckExtensions
  definition: Hybrid.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
  name: Required<Repository<TEntity, TKey>, TException>(Func<Repository<TEntity, TKey>, Boolean>, String)
  nameWithType: ParameterCheckExtensions.Required<Repository<TEntity, TKey>, TException>(Func<Repository<TEntity, TKey>, Boolean>, String)
  fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>, TException>(System.Func<Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>, System.Boolean>, System.String)
  nameWithType.vb: ParameterCheckExtensions.Required(Of Repository(Of TEntity, TKey), TException)(Func(Of Repository(Of TEntity, TKey), Boolean), String)
  fullName.vb: Hybrid.Extensions.ParameterCheckExtensions.Required(Of Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey), TException)(System.Func(Of Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey), System.Boolean), System.String)
  name.vb: Required(Of Repository(Of TEntity, TKey), TException)(Func(Of Repository(Of TEntity, TKey), Boolean), String)
  spec.csharp:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``2(System.Func{``0,System.Boolean},System.String)
    name: Required<Repository<TEntity, TKey>, TException>
    nameWithType: ParameterCheckExtensions.Required<Repository<TEntity, TKey>, TException>
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>, TException>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.EntityFrameworkCore.Repository`2
    name: Repository
    nameWithType: Repository
    fullName: Hybrid.EntityFrameworkCore.Repository
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``2(System.Func{``0,System.Boolean},System.String)
    name: Required(Of Repository(Of TEntity, TKey), TException)
    nameWithType: ParameterCheckExtensions.Required(Of Repository(Of TEntity, TKey), TException)
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required(Of Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey), TException)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.EntityFrameworkCore.Repository`2
    name: Repository
    nameWithType: Repository
    fullName: Hybrid.EntityFrameworkCore.Repository
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EntityFrameworkCore.Repository`2.Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(System.String)
  commentId: M:Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
  parent: Hybrid.Extensions.ParameterCheckExtensions
  definition: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
  name: CheckNotNull<Repository<TEntity, TKey>>(String)
  nameWithType: ParameterCheckExtensions.CheckNotNull<Repository<TEntity, TKey>>(String)
  fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull<Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>>(System.String)
  nameWithType.vb: ParameterCheckExtensions.CheckNotNull(Of Repository(Of TEntity, TKey))(String)
  fullName.vb: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull(Of Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey))(System.String)
  name.vb: CheckNotNull(Of Repository(Of TEntity, TKey))(String)
  spec.csharp:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(System.String)
    name: CheckNotNull<Repository<TEntity, TKey>>
    nameWithType: ParameterCheckExtensions.CheckNotNull<Repository<TEntity, TKey>>
    fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull<Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(System.String)
    name: CheckNotNull(Of Repository(Of TEntity, TKey))
    nameWithType: ParameterCheckExtensions.CheckNotNull(Of Repository(Of TEntity, TKey))
    fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull(Of Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey))
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EntityFrameworkCore.Repository`2.Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{Hybrid.EntityFrameworkCore.Repository{{TEntity},{TKey}}},System.Action{System.Exception},System.Action{Hybrid.EntityFrameworkCore.Repository{{TEntity},{TKey}}})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
  parent: Hybrid.Extensions.TryCatchExtensions
  definition: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
  name: TryCatch<Repository<TEntity, TKey>>(Action<Repository<TEntity, TKey>>, Action<Exception>, Action<Repository<TEntity, TKey>>)
  nameWithType: TryCatchExtensions.TryCatch<Repository<TEntity, TKey>>(Action<Repository<TEntity, TKey>>, Action<Exception>, Action<Repository<TEntity, TKey>>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>>(System.Action<Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>>, System.Action<System.Exception>, System.Action<Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of Repository(Of TEntity, TKey))(Action(Of Repository(Of TEntity, TKey)), Action(Of Exception), Action(Of Repository(Of TEntity, TKey)))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey))(System.Action(Of Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey)), System.Action(Of System.Exception), System.Action(Of Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey)))
  name.vb: TryCatch(Of Repository(Of TEntity, TKey))(Action(Of Repository(Of TEntity, TKey)), Action(Of Exception), Action(Of Repository(Of TEntity, TKey)))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{``0},System.Action{System.Exception},System.Action{``0})
    name: TryCatch<Repository<TEntity, TKey>>
    nameWithType: TryCatchExtensions.TryCatch<Repository<TEntity, TKey>>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.EntityFrameworkCore.Repository`2
    name: Repository
    nameWithType: Repository
    fullName: Hybrid.EntityFrameworkCore.Repository
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.EntityFrameworkCore.Repository`2
    name: Repository
    nameWithType: Repository
    fullName: Hybrid.EntityFrameworkCore.Repository
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{``0},System.Action{System.Exception},System.Action{``0})
    name: TryCatch(Of Repository(Of TEntity, TKey))
    nameWithType: TryCatchExtensions.TryCatch(Of Repository(Of TEntity, TKey))
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey))
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.EntityFrameworkCore.Repository`2
    name: Repository
    nameWithType: Repository
    fullName: Hybrid.EntityFrameworkCore.Repository
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.EntityFrameworkCore.Repository`2
    name: Repository
    nameWithType: Repository
    fullName: Hybrid.EntityFrameworkCore.Repository
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EntityFrameworkCore.Repository`2.Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{Hybrid.EntityFrameworkCore.Repository{{TEntity},{TKey}}},System.Action{System.Exception})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
  parent: Hybrid.Extensions.TryCatchExtensions
  definition: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
  name: TryCatch<Repository<TEntity, TKey>>(Action<Repository<TEntity, TKey>>, Action<Exception>)
  nameWithType: TryCatchExtensions.TryCatch<Repository<TEntity, TKey>>(Action<Repository<TEntity, TKey>>, Action<Exception>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>>(System.Action<Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>>, System.Action<System.Exception>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of Repository(Of TEntity, TKey))(Action(Of Repository(Of TEntity, TKey)), Action(Of Exception))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey))(System.Action(Of Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey)), System.Action(Of System.Exception))
  name.vb: TryCatch(Of Repository(Of TEntity, TKey))(Action(Of Repository(Of TEntity, TKey)), Action(Of Exception))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{``0},System.Action{System.Exception})
    name: TryCatch<Repository<TEntity, TKey>>
    nameWithType: TryCatchExtensions.TryCatch<Repository<TEntity, TKey>>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.EntityFrameworkCore.Repository`2
    name: Repository
    nameWithType: Repository
    fullName: Hybrid.EntityFrameworkCore.Repository
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(System.Action{``0},System.Action{System.Exception})
    name: TryCatch(Of Repository(Of TEntity, TKey))
    nameWithType: TryCatchExtensions.TryCatch(Of Repository(Of TEntity, TKey))
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey))
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.EntityFrameworkCore.Repository`2
    name: Repository
    nameWithType: Repository
    fullName: Hybrid.EntityFrameworkCore.Repository
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EntityFrameworkCore.Repository`2.Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{Hybrid.EntityFrameworkCore.Repository{{TEntity},{TKey}},{TResult}},System.Action{System.Exception},System.Action{Hybrid.EntityFrameworkCore.Repository{{TEntity},{TKey}}})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
  parent: Hybrid.Extensions.TryCatchExtensions
  definition: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
  name: TryCatch<Repository<TEntity, TKey>, TResult>(Func<Repository<TEntity, TKey>, TResult>, Action<Exception>, Action<Repository<TEntity, TKey>>)
  nameWithType: TryCatchExtensions.TryCatch<Repository<TEntity, TKey>, TResult>(Func<Repository<TEntity, TKey>, TResult>, Action<Exception>, Action<Repository<TEntity, TKey>>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>, TResult>(System.Func<Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>, TResult>, System.Action<System.Exception>, System.Action<Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of Repository(Of TEntity, TKey), TResult)(Func(Of Repository(Of TEntity, TKey), TResult), Action(Of Exception), Action(Of Repository(Of TEntity, TKey)))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey), TResult)(System.Func(Of Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey), TResult), System.Action(Of System.Exception), System.Action(Of Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey)))
  name.vb: TryCatch(Of Repository(Of TEntity, TKey), TResult)(Func(Of Repository(Of TEntity, TKey), TResult), Action(Of Exception), Action(Of Repository(Of TEntity, TKey)))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
    name: TryCatch<Repository<TEntity, TKey>, TResult>
    nameWithType: TryCatchExtensions.TryCatch<Repository<TEntity, TKey>, TResult>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.EntityFrameworkCore.Repository`2
    name: Repository
    nameWithType: Repository
    fullName: Hybrid.EntityFrameworkCore.Repository
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.EntityFrameworkCore.Repository`2
    name: Repository
    nameWithType: Repository
    fullName: Hybrid.EntityFrameworkCore.Repository
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
    name: TryCatch(Of Repository(Of TEntity, TKey), TResult)
    nameWithType: TryCatchExtensions.TryCatch(Of Repository(Of TEntity, TKey), TResult)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey), TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.EntityFrameworkCore.Repository`2
    name: Repository
    nameWithType: Repository
    fullName: Hybrid.EntityFrameworkCore.Repository
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.EntityFrameworkCore.Repository`2
    name: Repository
    nameWithType: Repository
    fullName: Hybrid.EntityFrameworkCore.Repository
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EntityFrameworkCore.Repository`2.Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{Hybrid.EntityFrameworkCore.Repository{{TEntity},{TKey}},{TResult}},System.Action{System.Exception})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
  parent: Hybrid.Extensions.TryCatchExtensions
  definition: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
  name: TryCatch<Repository<TEntity, TKey>, TResult>(Func<Repository<TEntity, TKey>, TResult>, Action<Exception>)
  nameWithType: TryCatchExtensions.TryCatch<Repository<TEntity, TKey>, TResult>(Func<Repository<TEntity, TKey>, TResult>, Action<Exception>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>, TResult>(System.Func<Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>, TResult>, System.Action<System.Exception>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of Repository(Of TEntity, TKey), TResult)(Func(Of Repository(Of TEntity, TKey), TResult), Action(Of Exception))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey), TResult)(System.Func(Of Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey), TResult), System.Action(Of System.Exception))
  name.vb: TryCatch(Of Repository(Of TEntity, TKey), TResult)(Func(Of Repository(Of TEntity, TKey), TResult), Action(Of Exception))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{``0,``1},System.Action{System.Exception})
    name: TryCatch<Repository<TEntity, TKey>, TResult>
    nameWithType: TryCatchExtensions.TryCatch<Repository<TEntity, TKey>, TResult>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.EntityFrameworkCore.Repository`2
    name: Repository
    nameWithType: Repository
    fullName: Hybrid.EntityFrameworkCore.Repository
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(System.Func{``0,``1},System.Action{System.Exception})
    name: TryCatch(Of Repository(Of TEntity, TKey), TResult)
    nameWithType: TryCatchExtensions.TryCatch(Of Repository(Of TEntity, TKey), TResult)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey), TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.EntityFrameworkCore.Repository`2
    name: Repository
    nameWithType: Repository
    fullName: Hybrid.EntityFrameworkCore.Repository
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EntityFrameworkCore.Repository`2.Hybrid.Extensions.TryCatchExtensions.TryFinally``1(System.Action{Hybrid.EntityFrameworkCore.Repository{{TEntity},{TKey}}},System.Action{Hybrid.EntityFrameworkCore.Repository{{TEntity},{TKey}}})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
  parent: Hybrid.Extensions.TryCatchExtensions
  definition: Hybrid.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
  name: TryFinally<Repository<TEntity, TKey>>(Action<Repository<TEntity, TKey>>, Action<Repository<TEntity, TKey>>)
  nameWithType: TryCatchExtensions.TryFinally<Repository<TEntity, TKey>>(Action<Repository<TEntity, TKey>>, Action<Repository<TEntity, TKey>>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryFinally<Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>>(System.Action<Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>>, System.Action<Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>>)
  nameWithType.vb: TryCatchExtensions.TryFinally(Of Repository(Of TEntity, TKey))(Action(Of Repository(Of TEntity, TKey)), Action(Of Repository(Of TEntity, TKey)))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryFinally(Of Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey))(System.Action(Of Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey)), System.Action(Of Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey)))
  name.vb: TryFinally(Of Repository(Of TEntity, TKey))(Action(Of Repository(Of TEntity, TKey)), Action(Of Repository(Of TEntity, TKey)))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryFinally``1(System.Action{``0},System.Action{``0})
    name: TryFinally<Repository<TEntity, TKey>>
    nameWithType: TryCatchExtensions.TryFinally<Repository<TEntity, TKey>>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryFinally<Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.EntityFrameworkCore.Repository`2
    name: Repository
    nameWithType: Repository
    fullName: Hybrid.EntityFrameworkCore.Repository
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.EntityFrameworkCore.Repository`2
    name: Repository
    nameWithType: Repository
    fullName: Hybrid.EntityFrameworkCore.Repository
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryFinally``1(System.Action{``0},System.Action{``0})
    name: TryFinally(Of Repository(Of TEntity, TKey))
    nameWithType: TryCatchExtensions.TryFinally(Of Repository(Of TEntity, TKey))
    fullName: Hybrid.Extensions.TryCatchExtensions.TryFinally(Of Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey))
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.EntityFrameworkCore.Repository`2
    name: Repository
    nameWithType: Repository
    fullName: Hybrid.EntityFrameworkCore.Repository
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.EntityFrameworkCore.Repository`2
    name: Repository
    nameWithType: Repository
    fullName: Hybrid.EntityFrameworkCore.Repository
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Json.JsonExtensions.ToJsonString(System.Boolean,System.Boolean)
  commentId: M:Hybrid.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
  parent: Hybrid.Json.JsonExtensions
  definition: Hybrid.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
  name: ToJsonString(Boolean, Boolean)
  nameWithType: JsonExtensions.ToJsonString(Boolean, Boolean)
  fullName: Hybrid.Json.JsonExtensions.ToJsonString(System.Boolean, System.Boolean)
  spec.csharp:
  - uid: Hybrid.Json.JsonExtensions.ToJsonString(System.Boolean,System.Boolean)
    name: ToJsonString
    nameWithType: JsonExtensions.ToJsonString
    fullName: Hybrid.Json.JsonExtensions.ToJsonString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Json.JsonExtensions.ToJsonString(System.Boolean,System.Boolean)
    name: ToJsonString
    nameWithType: JsonExtensions.ToJsonString
    fullName: Hybrid.Json.JsonExtensions.ToJsonString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Mapping.MapperExtensions.MapTo``1
  commentId: M:Hybrid.Mapping.MapperExtensions.MapTo``1(System.Object)
  parent: Hybrid.Mapping.MapperExtensions
  definition: Hybrid.Mapping.MapperExtensions.MapTo``1(System.Object)
  name: MapTo<TTarget>()
  nameWithType: MapperExtensions.MapTo<TTarget>()
  fullName: Hybrid.Mapping.MapperExtensions.MapTo<TTarget>()
  nameWithType.vb: MapperExtensions.MapTo(Of TTarget)()
  fullName.vb: Hybrid.Mapping.MapperExtensions.MapTo(Of TTarget)()
  name.vb: MapTo(Of TTarget)()
  spec.csharp:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``1
    name: MapTo<TTarget>
    nameWithType: MapperExtensions.MapTo<TTarget>
    fullName: Hybrid.Mapping.MapperExtensions.MapTo<TTarget>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``1
    name: MapTo(Of TTarget)
    nameWithType: MapperExtensions.MapTo(Of TTarget)
    fullName: Hybrid.Mapping.MapperExtensions.MapTo(Of TTarget)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EntityFrameworkCore.Repository`2.Hybrid.Mapping.MapperExtensions.MapTo``2({TTarget})
  commentId: M:Hybrid.Mapping.MapperExtensions.MapTo``2(``0,``1)
  parent: Hybrid.Mapping.MapperExtensions
  definition: Hybrid.Mapping.MapperExtensions.MapTo``2(``0,``1)
  name: MapTo<Repository<TEntity, TKey>, TTarget>(TTarget)
  nameWithType: MapperExtensions.MapTo<Repository<TEntity, TKey>, TTarget>(TTarget)
  fullName: Hybrid.Mapping.MapperExtensions.MapTo<Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>, TTarget>(TTarget)
  nameWithType.vb: MapperExtensions.MapTo(Of Repository(Of TEntity, TKey), TTarget)(TTarget)
  fullName.vb: Hybrid.Mapping.MapperExtensions.MapTo(Of Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey), TTarget)(TTarget)
  name.vb: MapTo(Of Repository(Of TEntity, TKey), TTarget)(TTarget)
  spec.csharp:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``2(``1)
    name: MapTo<Repository<TEntity, TKey>, TTarget>
    nameWithType: MapperExtensions.MapTo<Repository<TEntity, TKey>, TTarget>
    fullName: Hybrid.Mapping.MapperExtensions.MapTo<Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>, TTarget>
  - name: (
    nameWithType: (
    fullName: (
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``2(``1)
    name: MapTo(Of Repository(Of TEntity, TKey), TTarget)
    nameWithType: MapperExtensions.MapTo(Of Repository(Of TEntity, TKey), TTarget)
    fullName: Hybrid.Mapping.MapperExtensions.MapTo(Of Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey), TTarget)
  - name: (
    nameWithType: (
    fullName: (
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Reflection.LockExtensions.Locking(System.Action)
  commentId: M:Hybrid.Reflection.LockExtensions.Locking(System.Object,System.Action)
  parent: Hybrid.Reflection.LockExtensions
  definition: Hybrid.Reflection.LockExtensions.Locking(System.Object,System.Action)
  name: Locking(Action)
  nameWithType: LockExtensions.Locking(Action)
  fullName: Hybrid.Reflection.LockExtensions.Locking(System.Action)
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking(System.Action)
    name: Locking
    nameWithType: LockExtensions.Locking
    fullName: Hybrid.Reflection.LockExtensions.Locking
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking(System.Action)
    name: Locking
    nameWithType: LockExtensions.Locking
    fullName: Hybrid.Reflection.LockExtensions.Locking
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EntityFrameworkCore.Repository`2.Hybrid.Reflection.LockExtensions.Locking``1(System.Action{Hybrid.EntityFrameworkCore.Repository{{TEntity},{TKey}}})
  commentId: M:Hybrid.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
  parent: Hybrid.Reflection.LockExtensions
  definition: Hybrid.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
  name: Locking<Repository<TEntity, TKey>>(Action<Repository<TEntity, TKey>>)
  nameWithType: LockExtensions.Locking<Repository<TEntity, TKey>>(Action<Repository<TEntity, TKey>>)
  fullName: Hybrid.Reflection.LockExtensions.Locking<Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>>(System.Action<Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>>)
  nameWithType.vb: LockExtensions.Locking(Of Repository(Of TEntity, TKey))(Action(Of Repository(Of TEntity, TKey)))
  fullName.vb: Hybrid.Reflection.LockExtensions.Locking(Of Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey))(System.Action(Of Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey)))
  name.vb: Locking(Of Repository(Of TEntity, TKey))(Action(Of Repository(Of TEntity, TKey)))
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(System.Action{``0})
    name: Locking<Repository<TEntity, TKey>>
    nameWithType: LockExtensions.Locking<Repository<TEntity, TKey>>
    fullName: Hybrid.Reflection.LockExtensions.Locking<Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.EntityFrameworkCore.Repository`2
    name: Repository
    nameWithType: Repository
    fullName: Hybrid.EntityFrameworkCore.Repository
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(System.Action{``0})
    name: Locking(Of Repository(Of TEntity, TKey))
    nameWithType: LockExtensions.Locking(Of Repository(Of TEntity, TKey))
    fullName: Hybrid.Reflection.LockExtensions.Locking(Of Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey))
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.EntityFrameworkCore.Repository`2
    name: Repository
    nameWithType: Repository
    fullName: Hybrid.EntityFrameworkCore.Repository
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Hybrid.Reflection.LockExtensions.Locking``1(System.Func{{TResult}})
  commentId: M:Hybrid.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
  parent: Hybrid.Reflection.LockExtensions
  definition: Hybrid.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
  name: Locking<TResult>(Func<TResult>)
  nameWithType: LockExtensions.Locking<TResult>(Func<TResult>)
  fullName: Hybrid.Reflection.LockExtensions.Locking<TResult>(System.Func<TResult>)
  nameWithType.vb: LockExtensions.Locking(Of TResult)(Func(Of TResult))
  fullName.vb: Hybrid.Reflection.LockExtensions.Locking(Of TResult)(System.Func(Of TResult))
  name.vb: Locking(Of TResult)(Func(Of TResult))
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(System.Func{``0})
    name: Locking<TResult>
    nameWithType: LockExtensions.Locking<TResult>
    fullName: Hybrid.Reflection.LockExtensions.Locking<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(System.Func{``0})
    name: Locking(Of TResult)
    nameWithType: LockExtensions.Locking(Of TResult)
    fullName: Hybrid.Reflection.LockExtensions.Locking(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EntityFrameworkCore.Repository`2.Hybrid.Reflection.LockExtensions.Locking``2(System.Func{Hybrid.EntityFrameworkCore.Repository{{TEntity},{TKey}},{TResult}})
  commentId: M:Hybrid.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
  parent: Hybrid.Reflection.LockExtensions
  definition: Hybrid.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
  name: Locking<Repository<TEntity, TKey>, TResult>(Func<Repository<TEntity, TKey>, TResult>)
  nameWithType: LockExtensions.Locking<Repository<TEntity, TKey>, TResult>(Func<Repository<TEntity, TKey>, TResult>)
  fullName: Hybrid.Reflection.LockExtensions.Locking<Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>, TResult>(System.Func<Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>, TResult>)
  nameWithType.vb: LockExtensions.Locking(Of Repository(Of TEntity, TKey), TResult)(Func(Of Repository(Of TEntity, TKey), TResult))
  fullName.vb: Hybrid.Reflection.LockExtensions.Locking(Of Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey), TResult)(System.Func(Of Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey), TResult))
  name.vb: Locking(Of Repository(Of TEntity, TKey), TResult)(Func(Of Repository(Of TEntity, TKey), TResult))
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking``2(System.Func{``0,``1})
    name: Locking<Repository<TEntity, TKey>, TResult>
    nameWithType: LockExtensions.Locking<Repository<TEntity, TKey>, TResult>
    fullName: Hybrid.Reflection.LockExtensions.Locking<Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.EntityFrameworkCore.Repository`2
    name: Repository
    nameWithType: Repository
    fullName: Hybrid.EntityFrameworkCore.Repository
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking``2(System.Func{``0,``1})
    name: Locking(Of Repository(Of TEntity, TKey), TResult)
    nameWithType: LockExtensions.Locking(Of Repository(Of TEntity, TKey), TResult)
    fullName: Hybrid.Reflection.LockExtensions.Locking(Of Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey), TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.EntityFrameworkCore.Repository`2
    name: Repository
    nameWithType: Repository
    fullName: Hybrid.EntityFrameworkCore.Repository
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EntityFrameworkCore.Repository`2.Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2
  commentId: M:Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2(``0)
  parent: Hybrid.Domain.Entities.EntityExtensions
  definition: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2(``0)
  name: CheckICreatedTime<Repository<TEntity, TKey>, TKey>()
  nameWithType: EntityExtensions.CheckICreatedTime<Repository<TEntity, TKey>, TKey>()
  fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime<Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>, TKey>()
  nameWithType.vb: EntityExtensions.CheckICreatedTime(Of Repository(Of TEntity, TKey), TKey)()
  fullName.vb: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime(Of Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey), TKey)()
  name.vb: CheckICreatedTime(Of Repository(Of TEntity, TKey), TKey)()
  spec.csharp:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2
    name: CheckICreatedTime<Repository<TEntity, TKey>, TKey>
    nameWithType: EntityExtensions.CheckICreatedTime<Repository<TEntity, TKey>, TKey>
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime<Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2
    name: CheckICreatedTime(Of Repository(Of TEntity, TKey), TKey)
    nameWithType: EntityExtensions.CheckICreatedTime(Of Repository(Of TEntity, TKey), TKey)
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime(Of Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey), TKey)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EntityFrameworkCore.Repository`2.Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(System.Security.Principal.IPrincipal)
  commentId: M:Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
  parent: Hybrid.Domain.Entities.EntityExtensions
  definition: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
  name: CheckICreationAudited<Repository<TEntity, TKey>, TKey, TUserKey>(IPrincipal)
  nameWithType: EntityExtensions.CheckICreationAudited<Repository<TEntity, TKey>, TKey, TUserKey>(IPrincipal)
  fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited<Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>, TKey, TUserKey>(System.Security.Principal.IPrincipal)
  nameWithType.vb: EntityExtensions.CheckICreationAudited(Of Repository(Of TEntity, TKey), TKey, TUserKey)(IPrincipal)
  fullName.vb: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited(Of Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey), TKey, TUserKey)(System.Security.Principal.IPrincipal)
  name.vb: CheckICreationAudited(Of Repository(Of TEntity, TKey), TKey, TUserKey)(IPrincipal)
  spec.csharp:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(System.Security.Principal.IPrincipal)
    name: CheckICreationAudited<Repository<TEntity, TKey>, TKey, TUserKey>
    nameWithType: EntityExtensions.CheckICreationAudited<Repository<TEntity, TKey>, TKey, TUserKey>
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited<Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>, TKey, TUserKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(System.Security.Principal.IPrincipal)
    name: CheckICreationAudited(Of Repository(Of TEntity, TKey), TKey, TUserKey)
    nameWithType: EntityExtensions.CheckICreationAudited(Of Repository(Of TEntity, TKey), TKey, TUserKey)
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited(Of Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey), TKey, TUserKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EntityFrameworkCore.Repository`2.Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(System.Security.Principal.IPrincipal)
  commentId: M:Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
  parent: Hybrid.Domain.Entities.EntityExtensions
  definition: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
  name: CheckIUpdateAudited<Repository<TEntity, TKey>, TKey, TUserKey>(IPrincipal)
  nameWithType: EntityExtensions.CheckIUpdateAudited<Repository<TEntity, TKey>, TKey, TUserKey>(IPrincipal)
  fullName: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited<Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>, TKey, TUserKey>(System.Security.Principal.IPrincipal)
  nameWithType.vb: EntityExtensions.CheckIUpdateAudited(Of Repository(Of TEntity, TKey), TKey, TUserKey)(IPrincipal)
  fullName.vb: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited(Of Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey), TKey, TUserKey)(System.Security.Principal.IPrincipal)
  name.vb: CheckIUpdateAudited(Of Repository(Of TEntity, TKey), TKey, TUserKey)(IPrincipal)
  spec.csharp:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(System.Security.Principal.IPrincipal)
    name: CheckIUpdateAudited<Repository<TEntity, TKey>, TKey, TUserKey>
    nameWithType: EntityExtensions.CheckIUpdateAudited<Repository<TEntity, TKey>, TKey, TUserKey>
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited<Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>, TKey, TUserKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(System.Security.Principal.IPrincipal)
    name: CheckIUpdateAudited(Of Repository(Of TEntity, TKey), TKey, TUserKey)
    nameWithType: EntityExtensions.CheckIUpdateAudited(Of Repository(Of TEntity, TKey), TKey, TUserKey)
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited(Of Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey), TKey, TUserKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Hybrid.Domain.Repositories.IRepository`2
  commentId: T:Hybrid.Domain.Repositories.IRepository`2
  name: IRepository<TEntity, TKey>
  nameWithType: IRepository<TEntity, TKey>
  fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>
  nameWithType.vb: IRepository(Of TEntity, TKey)
  fullName.vb: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey)
  name.vb: IRepository(Of TEntity, TKey)
  spec.csharp:
  - uid: Hybrid.Domain.Repositories.IRepository`2
    name: IRepository
    nameWithType: IRepository
    fullName: Hybrid.Domain.Repositories.IRepository
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Hybrid.Domain.Repositories.IRepository`2
    name: IRepository
    nameWithType: IRepository
    fullName: Hybrid.Domain.Repositories.IRepository
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Domain.Repositories
  commentId: N:Hybrid.Domain.Repositories
  name: Hybrid.Domain.Repositories
  nameWithType: Hybrid.Domain.Repositories
  fullName: Hybrid.Domain.Repositories
- uid: OSharp.Entity.EntityExtensions.CheckICreatedTime``2(``0)
  commentId: M:OSharp.Entity.EntityExtensions.CheckICreatedTime``2(``0)
  name: CheckICreatedTime<TEntity, TKey>(TEntity)
  nameWithType: EntityExtensions.CheckICreatedTime<TEntity, TKey>(TEntity)
  fullName: OSharp.Entity.EntityExtensions.CheckICreatedTime<TEntity, TKey>(TEntity)
  nameWithType.vb: EntityExtensions.CheckICreatedTime(Of TEntity, TKey)(TEntity)
  fullName.vb: OSharp.Entity.EntityExtensions.CheckICreatedTime(Of TEntity, TKey)(TEntity)
  name.vb: CheckICreatedTime(Of TEntity, TKey)(TEntity)
  spec.csharp:
  - uid: OSharp.Entity.EntityExtensions.CheckICreatedTime``2(``0)
    name: CheckICreatedTime<TEntity, TKey>
    nameWithType: EntityExtensions.CheckICreatedTime<TEntity, TKey>
    fullName: OSharp.Entity.EntityExtensions.CheckICreatedTime<TEntity, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Entity.EntityExtensions.CheckICreatedTime``2(``0)
    name: CheckICreatedTime(Of TEntity, TKey)
    nameWithType: EntityExtensions.CheckICreatedTime(Of TEntity, TKey)
    fullName: OSharp.Entity.EntityExtensions.CheckICreatedTime(Of TEntity, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Entity.EntityExtensions
  commentId: T:OSharp.Entity.EntityExtensions
  parent: OSharp.Entity
  name: EntityExtensions
  nameWithType: EntityExtensions
  fullName: OSharp.Entity.EntityExtensions
- uid: OSharp.Entity.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
  commentId: M:OSharp.Entity.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
  isExternal: true
  name: CheckICreationAudited<TEntity, TKey, TUserKey>(TEntity, IPrincipal)
  nameWithType: EntityExtensions.CheckICreationAudited<TEntity, TKey, TUserKey>(TEntity, IPrincipal)
  fullName: OSharp.Entity.EntityExtensions.CheckICreationAudited<TEntity, TKey, TUserKey>(TEntity, System.Security.Principal.IPrincipal)
  nameWithType.vb: EntityExtensions.CheckICreationAudited(Of TEntity, TKey, TUserKey)(TEntity, IPrincipal)
  fullName.vb: OSharp.Entity.EntityExtensions.CheckICreationAudited(Of TEntity, TKey, TUserKey)(TEntity, System.Security.Principal.IPrincipal)
  name.vb: CheckICreationAudited(Of TEntity, TKey, TUserKey)(TEntity, IPrincipal)
  spec.csharp:
  - uid: OSharp.Entity.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
    name: CheckICreationAudited<TEntity, TKey, TUserKey>
    nameWithType: EntityExtensions.CheckICreationAudited<TEntity, TKey, TUserKey>
    fullName: OSharp.Entity.EntityExtensions.CheckICreationAudited<TEntity, TKey, TUserKey>
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Entity.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
    name: CheckICreationAudited(Of TEntity, TKey, TUserKey)
    nameWithType: EntityExtensions.CheckICreationAudited(Of TEntity, TKey, TUserKey)
    fullName: OSharp.Entity.EntityExtensions.CheckICreationAudited(Of TEntity, TKey, TUserKey)
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Entity.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
  commentId: M:OSharp.Entity.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
  isExternal: true
  name: CheckIUpdateAudited<TEntity, TKey, TUserKey>(TEntity, IPrincipal)
  nameWithType: EntityExtensions.CheckIUpdateAudited<TEntity, TKey, TUserKey>(TEntity, IPrincipal)
  fullName: OSharp.Entity.EntityExtensions.CheckIUpdateAudited<TEntity, TKey, TUserKey>(TEntity, System.Security.Principal.IPrincipal)
  nameWithType.vb: EntityExtensions.CheckIUpdateAudited(Of TEntity, TKey, TUserKey)(TEntity, IPrincipal)
  fullName.vb: OSharp.Entity.EntityExtensions.CheckIUpdateAudited(Of TEntity, TKey, TUserKey)(TEntity, System.Security.Principal.IPrincipal)
  name.vb: CheckIUpdateAudited(Of TEntity, TKey, TUserKey)(TEntity, IPrincipal)
  spec.csharp:
  - uid: OSharp.Entity.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
    name: CheckIUpdateAudited<TEntity, TKey, TUserKey>
    nameWithType: EntityExtensions.CheckIUpdateAudited<TEntity, TKey, TUserKey>
    fullName: OSharp.Entity.EntityExtensions.CheckIUpdateAudited<TEntity, TKey, TUserKey>
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Entity.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
    name: CheckIUpdateAudited(Of TEntity, TKey, TUserKey)
    nameWithType: EntityExtensions.CheckIUpdateAudited(Of TEntity, TKey, TUserKey)
    fullName: OSharp.Entity.EntityExtensions.CheckIUpdateAudited(Of TEntity, TKey, TUserKey)
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
  commentId: M:OSharp.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
  isExternal: true
  name: CastTo(Object, Type)
  nameWithType: ObjectExtensions.CastTo(Object, Type)
  fullName: OSharp.Extensions.ObjectExtensions.CastTo(System.Object, System.Type)
  spec.csharp:
  - uid: OSharp.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
    name: CastTo
    nameWithType: ObjectExtensions.CastTo
    fullName: OSharp.Extensions.ObjectExtensions.CastTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
    name: CastTo
    nameWithType: ObjectExtensions.CastTo
    fullName: OSharp.Extensions.ObjectExtensions.CastTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Extensions.ObjectExtensions
  commentId: T:OSharp.Extensions.ObjectExtensions
  parent: OSharp.Extensions
  name: ObjectExtensions
  nameWithType: ObjectExtensions
  fullName: OSharp.Extensions.ObjectExtensions
- uid: OSharp.Extensions.ObjectExtensions.CastTo``1(System.Object)
  commentId: M:OSharp.Extensions.ObjectExtensions.CastTo``1(System.Object)
  isExternal: true
  name: CastTo<T>(Object)
  nameWithType: ObjectExtensions.CastTo<T>(Object)
  fullName: OSharp.Extensions.ObjectExtensions.CastTo<T>(System.Object)
  nameWithType.vb: ObjectExtensions.CastTo(Of T)(Object)
  fullName.vb: OSharp.Extensions.ObjectExtensions.CastTo(Of T)(System.Object)
  name.vb: CastTo(Of T)(Object)
  spec.csharp:
  - uid: OSharp.Extensions.ObjectExtensions.CastTo``1(System.Object)
    name: CastTo<T>
    nameWithType: ObjectExtensions.CastTo<T>
    fullName: OSharp.Extensions.ObjectExtensions.CastTo<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ObjectExtensions.CastTo``1(System.Object)
    name: CastTo(Of T)
    nameWithType: ObjectExtensions.CastTo(Of T)
    fullName: OSharp.Extensions.ObjectExtensions.CastTo(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
  commentId: M:OSharp.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
  isExternal: true
  name: CastTo<T>(Object, T)
  nameWithType: ObjectExtensions.CastTo<T>(Object, T)
  fullName: OSharp.Extensions.ObjectExtensions.CastTo<T>(System.Object, T)
  nameWithType.vb: ObjectExtensions.CastTo(Of T)(Object, T)
  fullName.vb: OSharp.Extensions.ObjectExtensions.CastTo(Of T)(System.Object, T)
  name.vb: CastTo(Of T)(Object, T)
  spec.csharp:
  - uid: OSharp.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
    name: CastTo<T>
    nameWithType: ObjectExtensions.CastTo<T>
    fullName: OSharp.Extensions.ObjectExtensions.CastTo<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
    name: CastTo(Of T)
    nameWithType: ObjectExtensions.CastTo(Of T)
    fullName: OSharp.Extensions.ObjectExtensions.CastTo(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
  commentId: M:OSharp.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
  name: IsIn<T>(T, T[])
  nameWithType: ObjectExtensions.IsIn<T>(T, T[])
  fullName: OSharp.Extensions.ObjectExtensions.IsIn<T>(T, T[])
  nameWithType.vb: ObjectExtensions.IsIn(Of T)(T, T())
  fullName.vb: OSharp.Extensions.ObjectExtensions.IsIn(Of T)(T, T())
  name.vb: IsIn(Of T)(T, T())
  spec.csharp:
  - uid: OSharp.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
    name: IsIn<T>
    nameWithType: ObjectExtensions.IsIn<T>
    fullName: OSharp.Extensions.ObjectExtensions.IsIn<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
    name: IsIn(Of T)
    nameWithType: ObjectExtensions.IsIn(Of T)
    fullName: OSharp.Extensions.ObjectExtensions.IsIn(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Extensions.ObjectExtensions.ToDynamic(System.Object)
  commentId: M:OSharp.Extensions.ObjectExtensions.ToDynamic(System.Object)
  isExternal: true
  name: ToDynamic(Object)
  nameWithType: ObjectExtensions.ToDynamic(Object)
  fullName: OSharp.Extensions.ObjectExtensions.ToDynamic(System.Object)
  spec.csharp:
  - uid: OSharp.Extensions.ObjectExtensions.ToDynamic(System.Object)
    name: ToDynamic
    nameWithType: ObjectExtensions.ToDynamic
    fullName: OSharp.Extensions.ObjectExtensions.ToDynamic
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ObjectExtensions.ToDynamic(System.Object)
    name: ToDynamic
    nameWithType: ObjectExtensions.ToDynamic
    fullName: OSharp.Extensions.ObjectExtensions.ToDynamic
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Extensions.ObjectExtensions.DeepClone``1(``0)
  commentId: M:OSharp.Extensions.ObjectExtensions.DeepClone``1(``0)
  name: DeepClone<T>(T)
  nameWithType: ObjectExtensions.DeepClone<T>(T)
  fullName: OSharp.Extensions.ObjectExtensions.DeepClone<T>(T)
  nameWithType.vb: ObjectExtensions.DeepClone(Of T)(T)
  fullName.vb: OSharp.Extensions.ObjectExtensions.DeepClone(Of T)(T)
  name.vb: DeepClone(Of T)(T)
  spec.csharp:
  - uid: OSharp.Extensions.ObjectExtensions.DeepClone``1(``0)
    name: DeepClone<T>
    nameWithType: ObjectExtensions.DeepClone<T>
    fullName: OSharp.Extensions.ObjectExtensions.DeepClone<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ObjectExtensions.DeepClone``1(``0)
    name: DeepClone(Of T)
    nameWithType: ObjectExtensions.DeepClone(Of T)
    fullName: OSharp.Extensions.ObjectExtensions.DeepClone(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
  commentId: M:OSharp.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
  isExternal: true
  name: Required<T>(T, Func<T, Boolean>, String)
  nameWithType: ParameterCheckExtensions.Required<T>(T, Func<T, Boolean>, String)
  fullName: OSharp.Extensions.ParameterCheckExtensions.Required<T>(T, System.Func<T, System.Boolean>, System.String)
  nameWithType.vb: ParameterCheckExtensions.Required(Of T)(T, Func(Of T, Boolean), String)
  fullName.vb: OSharp.Extensions.ParameterCheckExtensions.Required(Of T)(T, System.Func(Of T, System.Boolean), System.String)
  name.vb: Required(Of T)(T, Func(Of T, Boolean), String)
  spec.csharp:
  - uid: OSharp.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
    name: Required<T>
    nameWithType: ParameterCheckExtensions.Required<T>
    fullName: OSharp.Extensions.ParameterCheckExtensions.Required<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
    name: Required(Of T)
    nameWithType: ParameterCheckExtensions.Required(Of T)
    fullName: OSharp.Extensions.ParameterCheckExtensions.Required(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Extensions.ParameterCheckExtensions
  commentId: T:OSharp.Extensions.ParameterCheckExtensions
  parent: OSharp.Extensions
  name: ParameterCheckExtensions
  nameWithType: ParameterCheckExtensions
  fullName: OSharp.Extensions.ParameterCheckExtensions
- uid: OSharp.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
  commentId: M:OSharp.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
  isExternal: true
  name: Required<T, TException>(T, Func<T, Boolean>, String)
  nameWithType: ParameterCheckExtensions.Required<T, TException>(T, Func<T, Boolean>, String)
  fullName: OSharp.Extensions.ParameterCheckExtensions.Required<T, TException>(T, System.Func<T, System.Boolean>, System.String)
  nameWithType.vb: ParameterCheckExtensions.Required(Of T, TException)(T, Func(Of T, Boolean), String)
  fullName.vb: OSharp.Extensions.ParameterCheckExtensions.Required(Of T, TException)(T, System.Func(Of T, System.Boolean), System.String)
  name.vb: Required(Of T, TException)(T, Func(Of T, Boolean), String)
  spec.csharp:
  - uid: OSharp.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
    name: Required<T, TException>
    nameWithType: ParameterCheckExtensions.Required<T, TException>
    fullName: OSharp.Extensions.ParameterCheckExtensions.Required<T, TException>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
    name: Required(Of T, TException)
    nameWithType: ParameterCheckExtensions.Required(Of T, TException)
    fullName: OSharp.Extensions.ParameterCheckExtensions.Required(Of T, TException)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
  commentId: M:OSharp.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
  isExternal: true
  name: CheckNotNull<T>(T, String)
  nameWithType: ParameterCheckExtensions.CheckNotNull<T>(T, String)
  fullName: OSharp.Extensions.ParameterCheckExtensions.CheckNotNull<T>(T, System.String)
  nameWithType.vb: ParameterCheckExtensions.CheckNotNull(Of T)(T, String)
  fullName.vb: OSharp.Extensions.ParameterCheckExtensions.CheckNotNull(Of T)(T, System.String)
  name.vb: CheckNotNull(Of T)(T, String)
  spec.csharp:
  - uid: OSharp.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
    name: CheckNotNull<T>
    nameWithType: ParameterCheckExtensions.CheckNotNull<T>
    fullName: OSharp.Extensions.ParameterCheckExtensions.CheckNotNull<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
    name: CheckNotNull(Of T)
    nameWithType: ParameterCheckExtensions.CheckNotNull(Of T)
    fullName: OSharp.Extensions.ParameterCheckExtensions.CheckNotNull(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
  commentId: M:OSharp.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
  isExternal: true
  name: TryCatch<T>(T, Action<T>, Action<Exception>, Action<T>)
  nameWithType: TryCatchExtensions.TryCatch<T>(T, Action<T>, Action<Exception>, Action<T>)
  fullName: OSharp.Extensions.TryCatchExtensions.TryCatch<T>(T, System.Action<T>, System.Action<System.Exception>, System.Action<T>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of T)(T, Action(Of T), Action(Of Exception), Action(Of T))
  fullName.vb: OSharp.Extensions.TryCatchExtensions.TryCatch(Of T)(T, System.Action(Of T), System.Action(Of System.Exception), System.Action(Of T))
  name.vb: TryCatch(Of T)(T, Action(Of T), Action(Of Exception), Action(Of T))
  spec.csharp:
  - uid: OSharp.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
    name: TryCatch<T>
    nameWithType: TryCatchExtensions.TryCatch<T>
    fullName: OSharp.Extensions.TryCatchExtensions.TryCatch<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
    name: TryCatch(Of T)
    nameWithType: TryCatchExtensions.TryCatch(Of T)
    fullName: OSharp.Extensions.TryCatchExtensions.TryCatch(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Extensions.TryCatchExtensions
  commentId: T:OSharp.Extensions.TryCatchExtensions
  parent: OSharp.Extensions
  name: TryCatchExtensions
  nameWithType: TryCatchExtensions
  fullName: OSharp.Extensions.TryCatchExtensions
- uid: OSharp.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
  commentId: M:OSharp.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
  isExternal: true
  name: TryCatch<T>(T, Action<T>, Action<Exception>)
  nameWithType: TryCatchExtensions.TryCatch<T>(T, Action<T>, Action<Exception>)
  fullName: OSharp.Extensions.TryCatchExtensions.TryCatch<T>(T, System.Action<T>, System.Action<System.Exception>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of T)(T, Action(Of T), Action(Of Exception))
  fullName.vb: OSharp.Extensions.TryCatchExtensions.TryCatch(Of T)(T, System.Action(Of T), System.Action(Of System.Exception))
  name.vb: TryCatch(Of T)(T, Action(Of T), Action(Of Exception))
  spec.csharp:
  - uid: OSharp.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
    name: TryCatch<T>
    nameWithType: TryCatchExtensions.TryCatch<T>
    fullName: OSharp.Extensions.TryCatchExtensions.TryCatch<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
    name: TryCatch(Of T)
    nameWithType: TryCatchExtensions.TryCatch(Of T)
    fullName: OSharp.Extensions.TryCatchExtensions.TryCatch(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
  commentId: M:OSharp.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
  isExternal: true
  name: TryCatch<T, TResult>(T, Func<T, TResult>, Action<Exception>, Action<T>)
  nameWithType: TryCatchExtensions.TryCatch<T, TResult>(T, Func<T, TResult>, Action<Exception>, Action<T>)
  fullName: OSharp.Extensions.TryCatchExtensions.TryCatch<T, TResult>(T, System.Func<T, TResult>, System.Action<System.Exception>, System.Action<T>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of T, TResult)(T, Func(Of T, TResult), Action(Of Exception), Action(Of T))
  fullName.vb: OSharp.Extensions.TryCatchExtensions.TryCatch(Of T, TResult)(T, System.Func(Of T, TResult), System.Action(Of System.Exception), System.Action(Of T))
  name.vb: TryCatch(Of T, TResult)(T, Func(Of T, TResult), Action(Of Exception), Action(Of T))
  spec.csharp:
  - uid: OSharp.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
    name: TryCatch<T, TResult>
    nameWithType: TryCatchExtensions.TryCatch<T, TResult>
    fullName: OSharp.Extensions.TryCatchExtensions.TryCatch<T, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
    name: TryCatch(Of T, TResult)
    nameWithType: TryCatchExtensions.TryCatch(Of T, TResult)
    fullName: OSharp.Extensions.TryCatchExtensions.TryCatch(Of T, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
  commentId: M:OSharp.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
  isExternal: true
  name: TryCatch<T, TResult>(T, Func<T, TResult>, Action<Exception>)
  nameWithType: TryCatchExtensions.TryCatch<T, TResult>(T, Func<T, TResult>, Action<Exception>)
  fullName: OSharp.Extensions.TryCatchExtensions.TryCatch<T, TResult>(T, System.Func<T, TResult>, System.Action<System.Exception>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of T, TResult)(T, Func(Of T, TResult), Action(Of Exception))
  fullName.vb: OSharp.Extensions.TryCatchExtensions.TryCatch(Of T, TResult)(T, System.Func(Of T, TResult), System.Action(Of System.Exception))
  name.vb: TryCatch(Of T, TResult)(T, Func(Of T, TResult), Action(Of Exception))
  spec.csharp:
  - uid: OSharp.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
    name: TryCatch<T, TResult>
    nameWithType: TryCatchExtensions.TryCatch<T, TResult>
    fullName: OSharp.Extensions.TryCatchExtensions.TryCatch<T, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
    name: TryCatch(Of T, TResult)
    nameWithType: TryCatchExtensions.TryCatch(Of T, TResult)
    fullName: OSharp.Extensions.TryCatchExtensions.TryCatch(Of T, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
  commentId: M:OSharp.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
  isExternal: true
  name: TryFinally<T>(T, Action<T>, Action<T>)
  nameWithType: TryCatchExtensions.TryFinally<T>(T, Action<T>, Action<T>)
  fullName: OSharp.Extensions.TryCatchExtensions.TryFinally<T>(T, System.Action<T>, System.Action<T>)
  nameWithType.vb: TryCatchExtensions.TryFinally(Of T)(T, Action(Of T), Action(Of T))
  fullName.vb: OSharp.Extensions.TryCatchExtensions.TryFinally(Of T)(T, System.Action(Of T), System.Action(Of T))
  name.vb: TryFinally(Of T)(T, Action(Of T), Action(Of T))
  spec.csharp:
  - uid: OSharp.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
    name: TryFinally<T>
    nameWithType: TryCatchExtensions.TryFinally<T>
    fullName: OSharp.Extensions.TryCatchExtensions.TryFinally<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
    name: TryFinally(Of T)
    nameWithType: TryCatchExtensions.TryFinally(Of T)
    fullName: OSharp.Extensions.TryCatchExtensions.TryFinally(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
  commentId: M:OSharp.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
  isExternal: true
  name: ToJsonString(Object, Boolean, Boolean)
  nameWithType: JsonExtensions.ToJsonString(Object, Boolean, Boolean)
  fullName: OSharp.Json.JsonExtensions.ToJsonString(System.Object, System.Boolean, System.Boolean)
  spec.csharp:
  - uid: OSharp.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
    name: ToJsonString
    nameWithType: JsonExtensions.ToJsonString
    fullName: OSharp.Json.JsonExtensions.ToJsonString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
    name: ToJsonString
    nameWithType: JsonExtensions.ToJsonString
    fullName: OSharp.Json.JsonExtensions.ToJsonString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Json.JsonExtensions
  commentId: T:OSharp.Json.JsonExtensions
  parent: OSharp.Json
  name: JsonExtensions
  nameWithType: JsonExtensions
  fullName: OSharp.Json.JsonExtensions
- uid: OSharp.Mapping.MapperExtensions.MapTo``1(System.Object)
  commentId: M:OSharp.Mapping.MapperExtensions.MapTo``1(System.Object)
  isExternal: true
  name: MapTo<TTarget>(Object)
  nameWithType: MapperExtensions.MapTo<TTarget>(Object)
  fullName: OSharp.Mapping.MapperExtensions.MapTo<TTarget>(System.Object)
  nameWithType.vb: MapperExtensions.MapTo(Of TTarget)(Object)
  fullName.vb: OSharp.Mapping.MapperExtensions.MapTo(Of TTarget)(System.Object)
  name.vb: MapTo(Of TTarget)(Object)
  spec.csharp:
  - uid: OSharp.Mapping.MapperExtensions.MapTo``1(System.Object)
    name: MapTo<TTarget>
    nameWithType: MapperExtensions.MapTo<TTarget>
    fullName: OSharp.Mapping.MapperExtensions.MapTo<TTarget>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Mapping.MapperExtensions.MapTo``1(System.Object)
    name: MapTo(Of TTarget)
    nameWithType: MapperExtensions.MapTo(Of TTarget)
    fullName: OSharp.Mapping.MapperExtensions.MapTo(Of TTarget)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Mapping.MapperExtensions
  commentId: T:OSharp.Mapping.MapperExtensions
  parent: OSharp.Mapping
  name: MapperExtensions
  nameWithType: MapperExtensions
  fullName: OSharp.Mapping.MapperExtensions
- uid: OSharp.Mapping.MapperExtensions.MapTo``2(``0,``1)
  commentId: M:OSharp.Mapping.MapperExtensions.MapTo``2(``0,``1)
  name: MapTo<TSource, TTarget>(TSource, TTarget)
  nameWithType: MapperExtensions.MapTo<TSource, TTarget>(TSource, TTarget)
  fullName: OSharp.Mapping.MapperExtensions.MapTo<TSource, TTarget>(TSource, TTarget)
  nameWithType.vb: MapperExtensions.MapTo(Of TSource, TTarget)(TSource, TTarget)
  fullName.vb: OSharp.Mapping.MapperExtensions.MapTo(Of TSource, TTarget)(TSource, TTarget)
  name.vb: MapTo(Of TSource, TTarget)(TSource, TTarget)
  spec.csharp:
  - uid: OSharp.Mapping.MapperExtensions.MapTo``2(``0,``1)
    name: MapTo<TSource, TTarget>
    nameWithType: MapperExtensions.MapTo<TSource, TTarget>
    fullName: OSharp.Mapping.MapperExtensions.MapTo<TSource, TTarget>
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Mapping.MapperExtensions.MapTo``2(``0,``1)
    name: MapTo(Of TSource, TTarget)
    nameWithType: MapperExtensions.MapTo(Of TSource, TTarget)
    fullName: OSharp.Mapping.MapperExtensions.MapTo(Of TSource, TTarget)
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Reflection.LockExtensions.Locking(System.Object,System.Action)
  commentId: M:OSharp.Reflection.LockExtensions.Locking(System.Object,System.Action)
  isExternal: true
  name: Locking(Object, Action)
  nameWithType: LockExtensions.Locking(Object, Action)
  fullName: OSharp.Reflection.LockExtensions.Locking(System.Object, System.Action)
  spec.csharp:
  - uid: OSharp.Reflection.LockExtensions.Locking(System.Object,System.Action)
    name: Locking
    nameWithType: LockExtensions.Locking
    fullName: OSharp.Reflection.LockExtensions.Locking
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Reflection.LockExtensions.Locking(System.Object,System.Action)
    name: Locking
    nameWithType: LockExtensions.Locking
    fullName: OSharp.Reflection.LockExtensions.Locking
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Reflection.LockExtensions
  commentId: T:OSharp.Reflection.LockExtensions
  parent: OSharp.Reflection
  name: LockExtensions
  nameWithType: LockExtensions
  fullName: OSharp.Reflection.LockExtensions
- uid: OSharp.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
  commentId: M:OSharp.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
  isExternal: true
  name: Locking<T>(T, Action<T>)
  nameWithType: LockExtensions.Locking<T>(T, Action<T>)
  fullName: OSharp.Reflection.LockExtensions.Locking<T>(T, System.Action<T>)
  nameWithType.vb: LockExtensions.Locking(Of T)(T, Action(Of T))
  fullName.vb: OSharp.Reflection.LockExtensions.Locking(Of T)(T, System.Action(Of T))
  name.vb: Locking(Of T)(T, Action(Of T))
  spec.csharp:
  - uid: OSharp.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
    name: Locking<T>
    nameWithType: LockExtensions.Locking<T>
    fullName: OSharp.Reflection.LockExtensions.Locking<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
    name: Locking(Of T)
    nameWithType: LockExtensions.Locking(Of T)
    fullName: OSharp.Reflection.LockExtensions.Locking(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
  commentId: M:OSharp.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
  isExternal: true
  name: Locking<TResult>(Object, Func<TResult>)
  nameWithType: LockExtensions.Locking<TResult>(Object, Func<TResult>)
  fullName: OSharp.Reflection.LockExtensions.Locking<TResult>(System.Object, System.Func<TResult>)
  nameWithType.vb: LockExtensions.Locking(Of TResult)(Object, Func(Of TResult))
  fullName.vb: OSharp.Reflection.LockExtensions.Locking(Of TResult)(System.Object, System.Func(Of TResult))
  name.vb: Locking(Of TResult)(Object, Func(Of TResult))
  spec.csharp:
  - uid: OSharp.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
    name: Locking<TResult>
    nameWithType: LockExtensions.Locking<TResult>
    fullName: OSharp.Reflection.LockExtensions.Locking<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
    name: Locking(Of TResult)
    nameWithType: LockExtensions.Locking(Of TResult)
    fullName: OSharp.Reflection.LockExtensions.Locking(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
  commentId: M:OSharp.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
  isExternal: true
  name: Locking<TSource, TResult>(TSource, Func<TSource, TResult>)
  nameWithType: LockExtensions.Locking<TSource, TResult>(TSource, Func<TSource, TResult>)
  fullName: OSharp.Reflection.LockExtensions.Locking<TSource, TResult>(TSource, System.Func<TSource, TResult>)
  nameWithType.vb: LockExtensions.Locking(Of TSource, TResult)(TSource, Func(Of TSource, TResult))
  fullName.vb: OSharp.Reflection.LockExtensions.Locking(Of TSource, TResult)(TSource, System.Func(Of TSource, TResult))
  name.vb: Locking(Of TSource, TResult)(TSource, Func(Of TSource, TResult))
  spec.csharp:
  - uid: OSharp.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
    name: Locking<TSource, TResult>
    nameWithType: LockExtensions.Locking<TSource, TResult>
    fullName: OSharp.Reflection.LockExtensions.Locking<TSource, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OSharp.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
    name: Locking(Of TSource, TResult)
    nameWithType: LockExtensions.Locking(Of TSource, TResult)
    fullName: OSharp.Reflection.LockExtensions.Locking(Of TSource, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EntityFrameworkCore.RepositoryExtensions.UpdateBatchAndIntercept``2(Hybrid.Domain.Repositories.IRepository{``0,``1},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Action{Z.EntityFramework.Extensions.BatchDelete})
  commentId: M:Hybrid.EntityFrameworkCore.RepositoryExtensions.UpdateBatchAndIntercept``2(Hybrid.Domain.Repositories.IRepository{``0,``1},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Action{Z.EntityFramework.Extensions.BatchDelete})
  isExternal: true
  name: UpdateBatchAndIntercept<TEntity, TKey>(IRepository<TEntity, TKey>, Expression<Func<TEntity, Boolean>>, Action<BatchDelete>)
  nameWithType: RepositoryExtensions.UpdateBatchAndIntercept<TEntity, TKey>(IRepository<TEntity, TKey>, Expression<Func<TEntity, Boolean>>, Action<BatchDelete>)
  fullName: Hybrid.EntityFrameworkCore.RepositoryExtensions.UpdateBatchAndIntercept<TEntity, TKey>(Hybrid.Domain.Repositories.IRepository<TEntity, TKey>, System.Linq.Expressions.Expression<System.Func<TEntity, System.Boolean>>, System.Action<Z.EntityFramework.Extensions.BatchDelete>)
  nameWithType.vb: RepositoryExtensions.UpdateBatchAndIntercept(Of TEntity, TKey)(IRepository(Of TEntity, TKey), Expression(Of Func(Of TEntity, Boolean)), Action(Of BatchDelete))
  fullName.vb: Hybrid.EntityFrameworkCore.RepositoryExtensions.UpdateBatchAndIntercept(Of TEntity, TKey)(Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey), System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Boolean)), System.Action(Of Z.EntityFramework.Extensions.BatchDelete))
  name.vb: UpdateBatchAndIntercept(Of TEntity, TKey)(IRepository(Of TEntity, TKey), Expression(Of Func(Of TEntity, Boolean)), Action(Of BatchDelete))
  spec.csharp:
  - uid: Hybrid.EntityFrameworkCore.RepositoryExtensions.UpdateBatchAndIntercept``2(Hybrid.Domain.Repositories.IRepository{``0,``1},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Action{Z.EntityFramework.Extensions.BatchDelete})
    name: UpdateBatchAndIntercept<TEntity, TKey>
    nameWithType: RepositoryExtensions.UpdateBatchAndIntercept<TEntity, TKey>
    fullName: Hybrid.EntityFrameworkCore.RepositoryExtensions.UpdateBatchAndIntercept<TEntity, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Hybrid.Domain.Repositories.IRepository`2
    name: IRepository
    nameWithType: IRepository
    fullName: Hybrid.Domain.Repositories.IRepository
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Z.EntityFramework.Extensions.BatchDelete
    name: BatchDelete
    nameWithType: BatchDelete
    fullName: Z.EntityFramework.Extensions.BatchDelete
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.EntityFrameworkCore.RepositoryExtensions.UpdateBatchAndIntercept``2(Hybrid.Domain.Repositories.IRepository{``0,``1},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Action{Z.EntityFramework.Extensions.BatchDelete})
    name: UpdateBatchAndIntercept(Of TEntity, TKey)
    nameWithType: RepositoryExtensions.UpdateBatchAndIntercept(Of TEntity, TKey)
    fullName: Hybrid.EntityFrameworkCore.RepositoryExtensions.UpdateBatchAndIntercept(Of TEntity, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Hybrid.Domain.Repositories.IRepository`2
    name: IRepository
    nameWithType: IRepository
    fullName: Hybrid.Domain.Repositories.IRepository
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Z.EntityFramework.Extensions.BatchDelete
    name: BatchDelete
    nameWithType: BatchDelete
    fullName: Z.EntityFramework.Extensions.BatchDelete
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EntityFrameworkCore.RepositoryExtensions
  commentId: T:Hybrid.EntityFrameworkCore.RepositoryExtensions
  parent: Hybrid.EntityFrameworkCore
  name: RepositoryExtensions
  nameWithType: RepositoryExtensions
  fullName: Hybrid.EntityFrameworkCore.RepositoryExtensions
- uid: Hybrid.EntityFrameworkCore.RepositoryExtensions.UpdateBatchAndInterceptAsync``2(Hybrid.Domain.Repositories.IRepository{``0,``1},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Action{Z.EntityFramework.Extensions.BatchDelete})
  commentId: M:Hybrid.EntityFrameworkCore.RepositoryExtensions.UpdateBatchAndInterceptAsync``2(Hybrid.Domain.Repositories.IRepository{``0,``1},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Action{Z.EntityFramework.Extensions.BatchDelete})
  isExternal: true
  name: UpdateBatchAndInterceptAsync<TEntity, TKey>(IRepository<TEntity, TKey>, Expression<Func<TEntity, Boolean>>, Action<BatchDelete>)
  nameWithType: RepositoryExtensions.UpdateBatchAndInterceptAsync<TEntity, TKey>(IRepository<TEntity, TKey>, Expression<Func<TEntity, Boolean>>, Action<BatchDelete>)
  fullName: Hybrid.EntityFrameworkCore.RepositoryExtensions.UpdateBatchAndInterceptAsync<TEntity, TKey>(Hybrid.Domain.Repositories.IRepository<TEntity, TKey>, System.Linq.Expressions.Expression<System.Func<TEntity, System.Boolean>>, System.Action<Z.EntityFramework.Extensions.BatchDelete>)
  nameWithType.vb: RepositoryExtensions.UpdateBatchAndInterceptAsync(Of TEntity, TKey)(IRepository(Of TEntity, TKey), Expression(Of Func(Of TEntity, Boolean)), Action(Of BatchDelete))
  fullName.vb: Hybrid.EntityFrameworkCore.RepositoryExtensions.UpdateBatchAndInterceptAsync(Of TEntity, TKey)(Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey), System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Boolean)), System.Action(Of Z.EntityFramework.Extensions.BatchDelete))
  name.vb: UpdateBatchAndInterceptAsync(Of TEntity, TKey)(IRepository(Of TEntity, TKey), Expression(Of Func(Of TEntity, Boolean)), Action(Of BatchDelete))
  spec.csharp:
  - uid: Hybrid.EntityFrameworkCore.RepositoryExtensions.UpdateBatchAndInterceptAsync``2(Hybrid.Domain.Repositories.IRepository{``0,``1},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Action{Z.EntityFramework.Extensions.BatchDelete})
    name: UpdateBatchAndInterceptAsync<TEntity, TKey>
    nameWithType: RepositoryExtensions.UpdateBatchAndInterceptAsync<TEntity, TKey>
    fullName: Hybrid.EntityFrameworkCore.RepositoryExtensions.UpdateBatchAndInterceptAsync<TEntity, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Hybrid.Domain.Repositories.IRepository`2
    name: IRepository
    nameWithType: IRepository
    fullName: Hybrid.Domain.Repositories.IRepository
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Z.EntityFramework.Extensions.BatchDelete
    name: BatchDelete
    nameWithType: BatchDelete
    fullName: Z.EntityFramework.Extensions.BatchDelete
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.EntityFrameworkCore.RepositoryExtensions.UpdateBatchAndInterceptAsync``2(Hybrid.Domain.Repositories.IRepository{``0,``1},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Action{Z.EntityFramework.Extensions.BatchDelete})
    name: UpdateBatchAndInterceptAsync(Of TEntity, TKey)
    nameWithType: RepositoryExtensions.UpdateBatchAndInterceptAsync(Of TEntity, TKey)
    fullName: Hybrid.EntityFrameworkCore.RepositoryExtensions.UpdateBatchAndInterceptAsync(Of TEntity, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Hybrid.Domain.Repositories.IRepository`2
    name: IRepository
    nameWithType: IRepository
    fullName: Hybrid.Domain.Repositories.IRepository
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Z.EntityFramework.Extensions.BatchDelete
    name: BatchDelete
    nameWithType: BatchDelete
    fullName: Z.EntityFramework.Extensions.BatchDelete
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EntityFrameworkCore.RepositoryExtensions.UpdateBatchAndIntercept``2(Hybrid.Domain.Repositories.IRepository{``0,``1},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,``0}},System.Action{Z.EntityFramework.Extensions.BatchUpdate})
  commentId: M:Hybrid.EntityFrameworkCore.RepositoryExtensions.UpdateBatchAndIntercept``2(Hybrid.Domain.Repositories.IRepository{``0,``1},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,``0}},System.Action{Z.EntityFramework.Extensions.BatchUpdate})
  isExternal: true
  name: UpdateBatchAndIntercept<TEntity, TKey>(IRepository<TEntity, TKey>, Expression<Func<TEntity, Boolean>>, Expression<Func<TEntity, TEntity>>, Action<BatchUpdate>)
  nameWithType: RepositoryExtensions.UpdateBatchAndIntercept<TEntity, TKey>(IRepository<TEntity, TKey>, Expression<Func<TEntity, Boolean>>, Expression<Func<TEntity, TEntity>>, Action<BatchUpdate>)
  fullName: Hybrid.EntityFrameworkCore.RepositoryExtensions.UpdateBatchAndIntercept<TEntity, TKey>(Hybrid.Domain.Repositories.IRepository<TEntity, TKey>, System.Linq.Expressions.Expression<System.Func<TEntity, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<TEntity, TEntity>>, System.Action<Z.EntityFramework.Extensions.BatchUpdate>)
  nameWithType.vb: RepositoryExtensions.UpdateBatchAndIntercept(Of TEntity, TKey)(IRepository(Of TEntity, TKey), Expression(Of Func(Of TEntity, Boolean)), Expression(Of Func(Of TEntity, TEntity)), Action(Of BatchUpdate))
  fullName.vb: Hybrid.EntityFrameworkCore.RepositoryExtensions.UpdateBatchAndIntercept(Of TEntity, TKey)(Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey), System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of TEntity, TEntity)), System.Action(Of Z.EntityFramework.Extensions.BatchUpdate))
  name.vb: UpdateBatchAndIntercept(Of TEntity, TKey)(IRepository(Of TEntity, TKey), Expression(Of Func(Of TEntity, Boolean)), Expression(Of Func(Of TEntity, TEntity)), Action(Of BatchUpdate))
  spec.csharp:
  - uid: Hybrid.EntityFrameworkCore.RepositoryExtensions.UpdateBatchAndIntercept``2(Hybrid.Domain.Repositories.IRepository{``0,``1},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,``0}},System.Action{Z.EntityFramework.Extensions.BatchUpdate})
    name: UpdateBatchAndIntercept<TEntity, TKey>
    nameWithType: RepositoryExtensions.UpdateBatchAndIntercept<TEntity, TKey>
    fullName: Hybrid.EntityFrameworkCore.RepositoryExtensions.UpdateBatchAndIntercept<TEntity, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Hybrid.Domain.Repositories.IRepository`2
    name: IRepository
    nameWithType: IRepository
    fullName: Hybrid.Domain.Repositories.IRepository
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Z.EntityFramework.Extensions.BatchUpdate
    name: BatchUpdate
    nameWithType: BatchUpdate
    fullName: Z.EntityFramework.Extensions.BatchUpdate
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.EntityFrameworkCore.RepositoryExtensions.UpdateBatchAndIntercept``2(Hybrid.Domain.Repositories.IRepository{``0,``1},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,``0}},System.Action{Z.EntityFramework.Extensions.BatchUpdate})
    name: UpdateBatchAndIntercept(Of TEntity, TKey)
    nameWithType: RepositoryExtensions.UpdateBatchAndIntercept(Of TEntity, TKey)
    fullName: Hybrid.EntityFrameworkCore.RepositoryExtensions.UpdateBatchAndIntercept(Of TEntity, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Hybrid.Domain.Repositories.IRepository`2
    name: IRepository
    nameWithType: IRepository
    fullName: Hybrid.Domain.Repositories.IRepository
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Z.EntityFramework.Extensions.BatchUpdate
    name: BatchUpdate
    nameWithType: BatchUpdate
    fullName: Z.EntityFramework.Extensions.BatchUpdate
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EntityFrameworkCore.RepositoryExtensions.UpdateBatchAndInterceptAsync``2(Hybrid.Domain.Repositories.IRepository{``0,``1},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,``0}},System.Action{Z.EntityFramework.Extensions.BatchUpdate})
  commentId: M:Hybrid.EntityFrameworkCore.RepositoryExtensions.UpdateBatchAndInterceptAsync``2(Hybrid.Domain.Repositories.IRepository{``0,``1},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,``0}},System.Action{Z.EntityFramework.Extensions.BatchUpdate})
  isExternal: true
  name: UpdateBatchAndInterceptAsync<TEntity, TKey>(IRepository<TEntity, TKey>, Expression<Func<TEntity, Boolean>>, Expression<Func<TEntity, TEntity>>, Action<BatchUpdate>)
  nameWithType: RepositoryExtensions.UpdateBatchAndInterceptAsync<TEntity, TKey>(IRepository<TEntity, TKey>, Expression<Func<TEntity, Boolean>>, Expression<Func<TEntity, TEntity>>, Action<BatchUpdate>)
  fullName: Hybrid.EntityFrameworkCore.RepositoryExtensions.UpdateBatchAndInterceptAsync<TEntity, TKey>(Hybrid.Domain.Repositories.IRepository<TEntity, TKey>, System.Linq.Expressions.Expression<System.Func<TEntity, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<TEntity, TEntity>>, System.Action<Z.EntityFramework.Extensions.BatchUpdate>)
  nameWithType.vb: RepositoryExtensions.UpdateBatchAndInterceptAsync(Of TEntity, TKey)(IRepository(Of TEntity, TKey), Expression(Of Func(Of TEntity, Boolean)), Expression(Of Func(Of TEntity, TEntity)), Action(Of BatchUpdate))
  fullName.vb: Hybrid.EntityFrameworkCore.RepositoryExtensions.UpdateBatchAndInterceptAsync(Of TEntity, TKey)(Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey), System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of TEntity, TEntity)), System.Action(Of Z.EntityFramework.Extensions.BatchUpdate))
  name.vb: UpdateBatchAndInterceptAsync(Of TEntity, TKey)(IRepository(Of TEntity, TKey), Expression(Of Func(Of TEntity, Boolean)), Expression(Of Func(Of TEntity, TEntity)), Action(Of BatchUpdate))
  spec.csharp:
  - uid: Hybrid.EntityFrameworkCore.RepositoryExtensions.UpdateBatchAndInterceptAsync``2(Hybrid.Domain.Repositories.IRepository{``0,``1},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,``0}},System.Action{Z.EntityFramework.Extensions.BatchUpdate})
    name: UpdateBatchAndInterceptAsync<TEntity, TKey>
    nameWithType: RepositoryExtensions.UpdateBatchAndInterceptAsync<TEntity, TKey>
    fullName: Hybrid.EntityFrameworkCore.RepositoryExtensions.UpdateBatchAndInterceptAsync<TEntity, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Hybrid.Domain.Repositories.IRepository`2
    name: IRepository
    nameWithType: IRepository
    fullName: Hybrid.Domain.Repositories.IRepository
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Z.EntityFramework.Extensions.BatchUpdate
    name: BatchUpdate
    nameWithType: BatchUpdate
    fullName: Z.EntityFramework.Extensions.BatchUpdate
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.EntityFrameworkCore.RepositoryExtensions.UpdateBatchAndInterceptAsync``2(Hybrid.Domain.Repositories.IRepository{``0,``1},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,``0}},System.Action{Z.EntityFramework.Extensions.BatchUpdate})
    name: UpdateBatchAndInterceptAsync(Of TEntity, TKey)
    nameWithType: RepositoryExtensions.UpdateBatchAndInterceptAsync(Of TEntity, TKey)
    fullName: Hybrid.EntityFrameworkCore.RepositoryExtensions.UpdateBatchAndInterceptAsync(Of TEntity, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Hybrid.Domain.Repositories.IRepository`2
    name: IRepository
    nameWithType: IRepository
    fullName: Hybrid.Domain.Repositories.IRepository
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Z.EntityFramework.Extensions.BatchUpdate
    name: BatchUpdate
    nameWithType: BatchUpdate
    fullName: Z.EntityFramework.Extensions.BatchUpdate
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EntityFrameworkCore.RepositoryExtensions.FromSql``2(Hybrid.Domain.Repositories.IRepository{``0,``1},System.String,System.Object[])
  commentId: M:Hybrid.EntityFrameworkCore.RepositoryExtensions.FromSql``2(Hybrid.Domain.Repositories.IRepository{``0,``1},System.String,System.Object[])
  isExternal: true
  name: FromSql<TEntity, TKey>(IRepository<TEntity, TKey>, String, Object[])
  nameWithType: RepositoryExtensions.FromSql<TEntity, TKey>(IRepository<TEntity, TKey>, String, Object[])
  fullName: Hybrid.EntityFrameworkCore.RepositoryExtensions.FromSql<TEntity, TKey>(Hybrid.Domain.Repositories.IRepository<TEntity, TKey>, System.String, System.Object[])
  nameWithType.vb: RepositoryExtensions.FromSql(Of TEntity, TKey)(IRepository(Of TEntity, TKey), String, Object())
  fullName.vb: Hybrid.EntityFrameworkCore.RepositoryExtensions.FromSql(Of TEntity, TKey)(Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey), System.String, System.Object())
  name.vb: FromSql(Of TEntity, TKey)(IRepository(Of TEntity, TKey), String, Object())
  spec.csharp:
  - uid: Hybrid.EntityFrameworkCore.RepositoryExtensions.FromSql``2(Hybrid.Domain.Repositories.IRepository{``0,``1},System.String,System.Object[])
    name: FromSql<TEntity, TKey>
    nameWithType: RepositoryExtensions.FromSql<TEntity, TKey>
    fullName: Hybrid.EntityFrameworkCore.RepositoryExtensions.FromSql<TEntity, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Hybrid.Domain.Repositories.IRepository`2
    name: IRepository
    nameWithType: IRepository
    fullName: Hybrid.Domain.Repositories.IRepository
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.EntityFrameworkCore.RepositoryExtensions.FromSql``2(Hybrid.Domain.Repositories.IRepository{``0,``1},System.String,System.Object[])
    name: FromSql(Of TEntity, TKey)
    nameWithType: RepositoryExtensions.FromSql(Of TEntity, TKey)
    fullName: Hybrid.EntityFrameworkCore.RepositoryExtensions.FromSql(Of TEntity, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Hybrid.Domain.Repositories.IRepository`2
    name: IRepository
    nameWithType: IRepository
    fullName: Hybrid.Domain.Repositories.IRepository
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
  commentId: M:Hybrid.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
  isExternal: true
  name: CastTo(Object, Type)
  nameWithType: ObjectExtensions.CastTo(Object, Type)
  fullName: Hybrid.Extensions.ObjectExtensions.CastTo(System.Object, System.Type)
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
    name: CastTo
    nameWithType: ObjectExtensions.CastTo
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)
    name: CastTo
    nameWithType: ObjectExtensions.CastTo
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ObjectExtensions
  commentId: T:Hybrid.Extensions.ObjectExtensions
  parent: Hybrid.Extensions
  name: ObjectExtensions
  nameWithType: ObjectExtensions
  fullName: Hybrid.Extensions.ObjectExtensions
- uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object)
  commentId: M:Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object)
  isExternal: true
  name: CastTo<T>(Object)
  nameWithType: ObjectExtensions.CastTo<T>(Object)
  fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>(System.Object)
  nameWithType.vb: ObjectExtensions.CastTo(Of T)(Object)
  fullName.vb: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)(System.Object)
  name.vb: CastTo(Of T)(Object)
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object)
    name: CastTo<T>
    nameWithType: ObjectExtensions.CastTo<T>
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object)
    name: CastTo(Of T)
    nameWithType: ObjectExtensions.CastTo(Of T)
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
  commentId: M:Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
  isExternal: true
  name: CastTo<T>(Object, T)
  nameWithType: ObjectExtensions.CastTo<T>(Object, T)
  fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>(System.Object, T)
  nameWithType.vb: ObjectExtensions.CastTo(Of T)(Object, T)
  fullName.vb: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)(System.Object, T)
  name.vb: CastTo(Of T)(Object, T)
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
    name: CastTo<T>
    nameWithType: ObjectExtensions.CastTo<T>
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)
    name: CastTo(Of T)
    nameWithType: ObjectExtensions.CastTo(Of T)
    fullName: Hybrid.Extensions.ObjectExtensions.CastTo(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
  commentId: M:Hybrid.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
  name: IsIn<T>(T, T[])
  nameWithType: ObjectExtensions.IsIn<T>(T, T[])
  fullName: Hybrid.Extensions.ObjectExtensions.IsIn<T>(T, T[])
  nameWithType.vb: ObjectExtensions.IsIn(Of T)(T, T())
  fullName.vb: Hybrid.Extensions.ObjectExtensions.IsIn(Of T)(T, T())
  name.vb: IsIn(Of T)(T, T())
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
    name: IsIn<T>
    nameWithType: ObjectExtensions.IsIn<T>
    fullName: Hybrid.Extensions.ObjectExtensions.IsIn<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.IsIn``1(``0,``0[])
    name: IsIn(Of T)
    nameWithType: ObjectExtensions.IsIn(Of T)
    fullName: Hybrid.Extensions.ObjectExtensions.IsIn(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ObjectExtensions.ToDynamic(System.Object)
  commentId: M:Hybrid.Extensions.ObjectExtensions.ToDynamic(System.Object)
  isExternal: true
  name: ToDynamic(Object)
  nameWithType: ObjectExtensions.ToDynamic(Object)
  fullName: Hybrid.Extensions.ObjectExtensions.ToDynamic(System.Object)
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.ToDynamic(System.Object)
    name: ToDynamic
    nameWithType: ObjectExtensions.ToDynamic
    fullName: Hybrid.Extensions.ObjectExtensions.ToDynamic
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.ToDynamic(System.Object)
    name: ToDynamic
    nameWithType: ObjectExtensions.ToDynamic
    fullName: Hybrid.Extensions.ObjectExtensions.ToDynamic
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ObjectExtensions.DeepClone``1(``0)
  commentId: M:Hybrid.Extensions.ObjectExtensions.DeepClone``1(``0)
  name: DeepClone<T>(T)
  nameWithType: ObjectExtensions.DeepClone<T>(T)
  fullName: Hybrid.Extensions.ObjectExtensions.DeepClone<T>(T)
  nameWithType.vb: ObjectExtensions.DeepClone(Of T)(T)
  fullName.vb: Hybrid.Extensions.ObjectExtensions.DeepClone(Of T)(T)
  name.vb: DeepClone(Of T)(T)
  spec.csharp:
  - uid: Hybrid.Extensions.ObjectExtensions.DeepClone``1(``0)
    name: DeepClone<T>
    nameWithType: ObjectExtensions.DeepClone<T>
    fullName: Hybrid.Extensions.ObjectExtensions.DeepClone<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ObjectExtensions.DeepClone``1(``0)
    name: DeepClone(Of T)
    nameWithType: ObjectExtensions.DeepClone(Of T)
    fullName: Hybrid.Extensions.ObjectExtensions.DeepClone(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
  commentId: M:Hybrid.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
  isExternal: true
  name: Required<T>(T, Func<T, Boolean>, String)
  nameWithType: ParameterCheckExtensions.Required<T>(T, Func<T, Boolean>, String)
  fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<T>(T, System.Func<T, System.Boolean>, System.String)
  nameWithType.vb: ParameterCheckExtensions.Required(Of T)(T, Func(Of T, Boolean), String)
  fullName.vb: Hybrid.Extensions.ParameterCheckExtensions.Required(Of T)(T, System.Func(Of T, System.Boolean), System.String)
  name.vb: Required(Of T)(T, Func(Of T, Boolean), String)
  spec.csharp:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
    name: Required<T>
    nameWithType: ParameterCheckExtensions.Required<T>
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)
    name: Required(Of T)
    nameWithType: ParameterCheckExtensions.Required(Of T)
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ParameterCheckExtensions
  commentId: T:Hybrid.Extensions.ParameterCheckExtensions
  parent: Hybrid.Extensions
  name: ParameterCheckExtensions
  nameWithType: ParameterCheckExtensions
  fullName: Hybrid.Extensions.ParameterCheckExtensions
- uid: Hybrid.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
  commentId: M:Hybrid.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
  isExternal: true
  name: Required<T, TException>(T, Func<T, Boolean>, String)
  nameWithType: ParameterCheckExtensions.Required<T, TException>(T, Func<T, Boolean>, String)
  fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<T, TException>(T, System.Func<T, System.Boolean>, System.String)
  nameWithType.vb: ParameterCheckExtensions.Required(Of T, TException)(T, Func(Of T, Boolean), String)
  fullName.vb: Hybrid.Extensions.ParameterCheckExtensions.Required(Of T, TException)(T, System.Func(Of T, System.Boolean), System.String)
  name.vb: Required(Of T, TException)(T, Func(Of T, Boolean), String)
  spec.csharp:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
    name: Required<T, TException>
    nameWithType: ParameterCheckExtensions.Required<T, TException>
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required<T, TException>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)
    name: Required(Of T, TException)
    nameWithType: ParameterCheckExtensions.Required(Of T, TException)
    fullName: Hybrid.Extensions.ParameterCheckExtensions.Required(Of T, TException)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
  commentId: M:Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
  isExternal: true
  name: CheckNotNull<T>(T, String)
  nameWithType: ParameterCheckExtensions.CheckNotNull<T>(T, String)
  fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull<T>(T, System.String)
  nameWithType.vb: ParameterCheckExtensions.CheckNotNull(Of T)(T, String)
  fullName.vb: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull(Of T)(T, System.String)
  name.vb: CheckNotNull(Of T)(T, String)
  spec.csharp:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
    name: CheckNotNull<T>
    nameWithType: ParameterCheckExtensions.CheckNotNull<T>
    fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)
    name: CheckNotNull(Of T)
    nameWithType: ParameterCheckExtensions.CheckNotNull(Of T)
    fullName: Hybrid.Extensions.ParameterCheckExtensions.CheckNotNull(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
  isExternal: true
  name: TryCatch<T>(T, Action<T>, Action<Exception>, Action<T>)
  nameWithType: TryCatchExtensions.TryCatch<T>(T, Action<T>, Action<Exception>, Action<T>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T>(T, System.Action<T>, System.Action<System.Exception>, System.Action<T>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of T)(T, Action(Of T), Action(Of Exception), Action(Of T))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T)(T, System.Action(Of T), System.Action(Of System.Exception), System.Action(Of T))
  name.vb: TryCatch(Of T)(T, Action(Of T), Action(Of Exception), Action(Of T))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
    name: TryCatch<T>
    nameWithType: TryCatchExtensions.TryCatch<T>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})
    name: TryCatch(Of T)
    nameWithType: TryCatchExtensions.TryCatch(Of T)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.TryCatchExtensions
  commentId: T:Hybrid.Extensions.TryCatchExtensions
  parent: Hybrid.Extensions
  name: TryCatchExtensions
  nameWithType: TryCatchExtensions
  fullName: Hybrid.Extensions.TryCatchExtensions
- uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
  isExternal: true
  name: TryCatch<T>(T, Action<T>, Action<Exception>)
  nameWithType: TryCatchExtensions.TryCatch<T>(T, Action<T>, Action<Exception>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T>(T, System.Action<T>, System.Action<System.Exception>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of T)(T, Action(Of T), Action(Of Exception))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T)(T, System.Action(Of T), System.Action(Of System.Exception))
  name.vb: TryCatch(Of T)(T, Action(Of T), Action(Of Exception))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
    name: TryCatch<T>
    nameWithType: TryCatchExtensions.TryCatch<T>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})
    name: TryCatch(Of T)
    nameWithType: TryCatchExtensions.TryCatch(Of T)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
  isExternal: true
  name: TryCatch<T, TResult>(T, Func<T, TResult>, Action<Exception>, Action<T>)
  nameWithType: TryCatchExtensions.TryCatch<T, TResult>(T, Func<T, TResult>, Action<Exception>, Action<T>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T, TResult>(T, System.Func<T, TResult>, System.Action<System.Exception>, System.Action<T>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of T, TResult)(T, Func(Of T, TResult), Action(Of Exception), Action(Of T))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T, TResult)(T, System.Func(Of T, TResult), System.Action(Of System.Exception), System.Action(Of T))
  name.vb: TryCatch(Of T, TResult)(T, Func(Of T, TResult), Action(Of Exception), Action(Of T))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
    name: TryCatch<T, TResult>
    nameWithType: TryCatchExtensions.TryCatch<T, TResult>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})
    name: TryCatch(Of T, TResult)
    nameWithType: TryCatchExtensions.TryCatch(Of T, TResult)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
  isExternal: true
  name: TryCatch<T, TResult>(T, Func<T, TResult>, Action<Exception>)
  nameWithType: TryCatchExtensions.TryCatch<T, TResult>(T, Func<T, TResult>, Action<Exception>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T, TResult>(T, System.Func<T, TResult>, System.Action<System.Exception>)
  nameWithType.vb: TryCatchExtensions.TryCatch(Of T, TResult)(T, Func(Of T, TResult), Action(Of Exception))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T, TResult)(T, System.Func(Of T, TResult), System.Action(Of System.Exception))
  name.vb: TryCatch(Of T, TResult)(T, Func(Of T, TResult), Action(Of Exception))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
    name: TryCatch<T, TResult>
    nameWithType: TryCatchExtensions.TryCatch<T, TResult>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch<T, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})
    name: TryCatch(Of T, TResult)
    nameWithType: TryCatchExtensions.TryCatch(Of T, TResult)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryCatch(Of T, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
  commentId: M:Hybrid.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
  isExternal: true
  name: TryFinally<T>(T, Action<T>, Action<T>)
  nameWithType: TryCatchExtensions.TryFinally<T>(T, Action<T>, Action<T>)
  fullName: Hybrid.Extensions.TryCatchExtensions.TryFinally<T>(T, System.Action<T>, System.Action<T>)
  nameWithType.vb: TryCatchExtensions.TryFinally(Of T)(T, Action(Of T), Action(Of T))
  fullName.vb: Hybrid.Extensions.TryCatchExtensions.TryFinally(Of T)(T, System.Action(Of T), System.Action(Of T))
  name.vb: TryFinally(Of T)(T, Action(Of T), Action(Of T))
  spec.csharp:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
    name: TryFinally<T>
    nameWithType: TryCatchExtensions.TryFinally<T>
    fullName: Hybrid.Extensions.TryCatchExtensions.TryFinally<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Extensions.TryCatchExtensions.TryFinally``1(``0,System.Action{``0},System.Action{``0})
    name: TryFinally(Of T)
    nameWithType: TryCatchExtensions.TryFinally(Of T)
    fullName: Hybrid.Extensions.TryCatchExtensions.TryFinally(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
  commentId: M:Hybrid.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
  isExternal: true
  name: ToJsonString(Object, Boolean, Boolean)
  nameWithType: JsonExtensions.ToJsonString(Object, Boolean, Boolean)
  fullName: Hybrid.Json.JsonExtensions.ToJsonString(System.Object, System.Boolean, System.Boolean)
  spec.csharp:
  - uid: Hybrid.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
    name: ToJsonString
    nameWithType: JsonExtensions.ToJsonString
    fullName: Hybrid.Json.JsonExtensions.ToJsonString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)
    name: ToJsonString
    nameWithType: JsonExtensions.ToJsonString
    fullName: Hybrid.Json.JsonExtensions.ToJsonString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Json.JsonExtensions
  commentId: T:Hybrid.Json.JsonExtensions
  parent: Hybrid.Json
  name: JsonExtensions
  nameWithType: JsonExtensions
  fullName: Hybrid.Json.JsonExtensions
- uid: Hybrid.Mapping.MapperExtensions.MapTo``1(System.Object)
  commentId: M:Hybrid.Mapping.MapperExtensions.MapTo``1(System.Object)
  isExternal: true
  name: MapTo<TTarget>(Object)
  nameWithType: MapperExtensions.MapTo<TTarget>(Object)
  fullName: Hybrid.Mapping.MapperExtensions.MapTo<TTarget>(System.Object)
  nameWithType.vb: MapperExtensions.MapTo(Of TTarget)(Object)
  fullName.vb: Hybrid.Mapping.MapperExtensions.MapTo(Of TTarget)(System.Object)
  name.vb: MapTo(Of TTarget)(Object)
  spec.csharp:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``1(System.Object)
    name: MapTo<TTarget>
    nameWithType: MapperExtensions.MapTo<TTarget>
    fullName: Hybrid.Mapping.MapperExtensions.MapTo<TTarget>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``1(System.Object)
    name: MapTo(Of TTarget)
    nameWithType: MapperExtensions.MapTo(Of TTarget)
    fullName: Hybrid.Mapping.MapperExtensions.MapTo(Of TTarget)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Mapping.MapperExtensions
  commentId: T:Hybrid.Mapping.MapperExtensions
  parent: Hybrid.Mapping
  name: MapperExtensions
  nameWithType: MapperExtensions
  fullName: Hybrid.Mapping.MapperExtensions
- uid: Hybrid.Mapping.MapperExtensions.MapTo``2(``0,``1)
  commentId: M:Hybrid.Mapping.MapperExtensions.MapTo``2(``0,``1)
  name: MapTo<TSource, TTarget>(TSource, TTarget)
  nameWithType: MapperExtensions.MapTo<TSource, TTarget>(TSource, TTarget)
  fullName: Hybrid.Mapping.MapperExtensions.MapTo<TSource, TTarget>(TSource, TTarget)
  nameWithType.vb: MapperExtensions.MapTo(Of TSource, TTarget)(TSource, TTarget)
  fullName.vb: Hybrid.Mapping.MapperExtensions.MapTo(Of TSource, TTarget)(TSource, TTarget)
  name.vb: MapTo(Of TSource, TTarget)(TSource, TTarget)
  spec.csharp:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``2(``0,``1)
    name: MapTo<TSource, TTarget>
    nameWithType: MapperExtensions.MapTo<TSource, TTarget>
    fullName: Hybrid.Mapping.MapperExtensions.MapTo<TSource, TTarget>
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Mapping.MapperExtensions.MapTo``2(``0,``1)
    name: MapTo(Of TSource, TTarget)
    nameWithType: MapperExtensions.MapTo(Of TSource, TTarget)
    fullName: Hybrid.Mapping.MapperExtensions.MapTo(Of TSource, TTarget)
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Reflection.LockExtensions.Locking(System.Object,System.Action)
  commentId: M:Hybrid.Reflection.LockExtensions.Locking(System.Object,System.Action)
  isExternal: true
  name: Locking(Object, Action)
  nameWithType: LockExtensions.Locking(Object, Action)
  fullName: Hybrid.Reflection.LockExtensions.Locking(System.Object, System.Action)
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking(System.Object,System.Action)
    name: Locking
    nameWithType: LockExtensions.Locking
    fullName: Hybrid.Reflection.LockExtensions.Locking
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking(System.Object,System.Action)
    name: Locking
    nameWithType: LockExtensions.Locking
    fullName: Hybrid.Reflection.LockExtensions.Locking
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Reflection.LockExtensions
  commentId: T:Hybrid.Reflection.LockExtensions
  parent: Hybrid.Reflection
  name: LockExtensions
  nameWithType: LockExtensions
  fullName: Hybrid.Reflection.LockExtensions
- uid: Hybrid.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
  commentId: M:Hybrid.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
  isExternal: true
  name: Locking<T>(T, Action<T>)
  nameWithType: LockExtensions.Locking<T>(T, Action<T>)
  fullName: Hybrid.Reflection.LockExtensions.Locking<T>(T, System.Action<T>)
  nameWithType.vb: LockExtensions.Locking(Of T)(T, Action(Of T))
  fullName.vb: Hybrid.Reflection.LockExtensions.Locking(Of T)(T, System.Action(Of T))
  name.vb: Locking(Of T)(T, Action(Of T))
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
    name: Locking<T>
    nameWithType: LockExtensions.Locking<T>
    fullName: Hybrid.Reflection.LockExtensions.Locking<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})
    name: Locking(Of T)
    nameWithType: LockExtensions.Locking(Of T)
    fullName: Hybrid.Reflection.LockExtensions.Locking(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
  commentId: M:Hybrid.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
  isExternal: true
  name: Locking<TResult>(Object, Func<TResult>)
  nameWithType: LockExtensions.Locking<TResult>(Object, Func<TResult>)
  fullName: Hybrid.Reflection.LockExtensions.Locking<TResult>(System.Object, System.Func<TResult>)
  nameWithType.vb: LockExtensions.Locking(Of TResult)(Object, Func(Of TResult))
  fullName.vb: Hybrid.Reflection.LockExtensions.Locking(Of TResult)(System.Object, System.Func(Of TResult))
  name.vb: Locking(Of TResult)(Object, Func(Of TResult))
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
    name: Locking<TResult>
    nameWithType: LockExtensions.Locking<TResult>
    fullName: Hybrid.Reflection.LockExtensions.Locking<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})
    name: Locking(Of TResult)
    nameWithType: LockExtensions.Locking(Of TResult)
    fullName: Hybrid.Reflection.LockExtensions.Locking(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
  commentId: M:Hybrid.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
  isExternal: true
  name: Locking<TSource, TResult>(TSource, Func<TSource, TResult>)
  nameWithType: LockExtensions.Locking<TSource, TResult>(TSource, Func<TSource, TResult>)
  fullName: Hybrid.Reflection.LockExtensions.Locking<TSource, TResult>(TSource, System.Func<TSource, TResult>)
  nameWithType.vb: LockExtensions.Locking(Of TSource, TResult)(TSource, Func(Of TSource, TResult))
  fullName.vb: Hybrid.Reflection.LockExtensions.Locking(Of TSource, TResult)(TSource, System.Func(Of TSource, TResult))
  name.vb: Locking(Of TSource, TResult)(TSource, Func(Of TSource, TResult))
  spec.csharp:
  - uid: Hybrid.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
    name: Locking<TSource, TResult>
    nameWithType: LockExtensions.Locking<TSource, TResult>
    fullName: Hybrid.Reflection.LockExtensions.Locking<TSource, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})
    name: Locking(Of TSource, TResult)
    nameWithType: LockExtensions.Locking(Of TSource, TResult)
    fullName: Hybrid.Reflection.LockExtensions.Locking(Of TSource, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2(``0)
  commentId: M:Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2(``0)
  name: CheckICreatedTime<TEntity, TKey>(TEntity)
  nameWithType: EntityExtensions.CheckICreatedTime<TEntity, TKey>(TEntity)
  fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime<TEntity, TKey>(TEntity)
  nameWithType.vb: EntityExtensions.CheckICreatedTime(Of TEntity, TKey)(TEntity)
  fullName.vb: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime(Of TEntity, TKey)(TEntity)
  name.vb: CheckICreatedTime(Of TEntity, TKey)(TEntity)
  spec.csharp:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2(``0)
    name: CheckICreatedTime<TEntity, TKey>
    nameWithType: EntityExtensions.CheckICreatedTime<TEntity, TKey>
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime<TEntity, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime``2(``0)
    name: CheckICreatedTime(Of TEntity, TKey)
    nameWithType: EntityExtensions.CheckICreatedTime(Of TEntity, TKey)
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreatedTime(Of TEntity, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Domain.Entities.EntityExtensions
  commentId: T:Hybrid.Domain.Entities.EntityExtensions
  parent: Hybrid.Domain.Entities
  name: EntityExtensions
  nameWithType: EntityExtensions
  fullName: Hybrid.Domain.Entities.EntityExtensions
- uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
  commentId: M:Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
  isExternal: true
  name: CheckICreationAudited<TEntity, TKey, TUserKey>(TEntity, IPrincipal)
  nameWithType: EntityExtensions.CheckICreationAudited<TEntity, TKey, TUserKey>(TEntity, IPrincipal)
  fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited<TEntity, TKey, TUserKey>(TEntity, System.Security.Principal.IPrincipal)
  nameWithType.vb: EntityExtensions.CheckICreationAudited(Of TEntity, TKey, TUserKey)(TEntity, IPrincipal)
  fullName.vb: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited(Of TEntity, TKey, TUserKey)(TEntity, System.Security.Principal.IPrincipal)
  name.vb: CheckICreationAudited(Of TEntity, TKey, TUserKey)(TEntity, IPrincipal)
  spec.csharp:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
    name: CheckICreationAudited<TEntity, TKey, TUserKey>
    nameWithType: EntityExtensions.CheckICreationAudited<TEntity, TKey, TUserKey>
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited<TEntity, TKey, TUserKey>
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited``3(``0,System.Security.Principal.IPrincipal)
    name: CheckICreationAudited(Of TEntity, TKey, TUserKey)
    nameWithType: EntityExtensions.CheckICreationAudited(Of TEntity, TKey, TUserKey)
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckICreationAudited(Of TEntity, TKey, TUserKey)
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
  commentId: M:Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
  isExternal: true
  name: CheckIUpdateAudited<TEntity, TKey, TUserKey>(TEntity, IPrincipal)
  nameWithType: EntityExtensions.CheckIUpdateAudited<TEntity, TKey, TUserKey>(TEntity, IPrincipal)
  fullName: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited<TEntity, TKey, TUserKey>(TEntity, System.Security.Principal.IPrincipal)
  nameWithType.vb: EntityExtensions.CheckIUpdateAudited(Of TEntity, TKey, TUserKey)(TEntity, IPrincipal)
  fullName.vb: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited(Of TEntity, TKey, TUserKey)(TEntity, System.Security.Principal.IPrincipal)
  name.vb: CheckIUpdateAudited(Of TEntity, TKey, TUserKey)(TEntity, IPrincipal)
  spec.csharp:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
    name: CheckIUpdateAudited<TEntity, TKey, TUserKey>
    nameWithType: EntityExtensions.CheckIUpdateAudited<TEntity, TKey, TUserKey>
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited<TEntity, TKey, TUserKey>
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited``3(``0,System.Security.Principal.IPrincipal)
    name: CheckIUpdateAudited(Of TEntity, TKey, TUserKey)
    nameWithType: EntityExtensions.CheckIUpdateAudited(Of TEntity, TKey, TUserKey)
    fullName: Hybrid.Domain.Entities.EntityExtensions.CheckIUpdateAudited(Of TEntity, TKey, TUserKey)
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Principal.IPrincipal
    name: IPrincipal
    nameWithType: IPrincipal
    fullName: System.Security.Principal.IPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OSharp.Entity
  commentId: N:OSharp.Entity
  name: OSharp.Entity
  nameWithType: OSharp.Entity
  fullName: OSharp.Entity
- uid: OSharp.Extensions
  commentId: N:OSharp.Extensions
  name: OSharp.Extensions
  nameWithType: OSharp.Extensions
  fullName: OSharp.Extensions
- uid: OSharp.Json
  commentId: N:OSharp.Json
  name: OSharp.Json
  nameWithType: OSharp.Json
  fullName: OSharp.Json
- uid: OSharp.Mapping
  commentId: N:OSharp.Mapping
  name: OSharp.Mapping
  nameWithType: OSharp.Mapping
  fullName: OSharp.Mapping
- uid: OSharp.Reflection
  commentId: N:OSharp.Reflection
  name: OSharp.Reflection
  nameWithType: OSharp.Reflection
  fullName: OSharp.Reflection
- uid: Hybrid.Extensions
  commentId: N:Hybrid.Extensions
  name: Hybrid.Extensions
  nameWithType: Hybrid.Extensions
  fullName: Hybrid.Extensions
- uid: Hybrid.Json
  commentId: N:Hybrid.Json
  name: Hybrid.Json
  nameWithType: Hybrid.Json
  fullName: Hybrid.Json
- uid: Hybrid.Mapping
  commentId: N:Hybrid.Mapping
  name: Hybrid.Mapping
  nameWithType: Hybrid.Mapping
  fullName: Hybrid.Mapping
- uid: Hybrid.Reflection
  commentId: N:Hybrid.Reflection
  name: Hybrid.Reflection
  nameWithType: Hybrid.Reflection
  fullName: Hybrid.Reflection
- uid: Hybrid.Domain.Entities
  commentId: N:Hybrid.Domain.Entities
  name: Hybrid.Domain.Entities
  nameWithType: Hybrid.Domain.Entities
  fullName: Hybrid.Domain.Entities
- uid: Hybrid.EntityFrameworkCore.Repository`2
  commentId: T:Hybrid.EntityFrameworkCore.Repository`2
  name: Repository<TEntity, TKey>
  nameWithType: Repository<TEntity, TKey>
  fullName: Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>
  nameWithType.vb: Repository(Of TEntity, TKey)
  fullName.vb: Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey)
  name.vb: Repository(Of TEntity, TKey)
  spec.csharp:
  - uid: Hybrid.EntityFrameworkCore.Repository`2
    name: Repository
    nameWithType: Repository
    fullName: Hybrid.EntityFrameworkCore.Repository
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Hybrid.EntityFrameworkCore.Repository`2
    name: Repository
    nameWithType: Repository
    fullName: Hybrid.EntityFrameworkCore.Repository
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EntityFrameworkCore.Repository`2.#ctor*
  commentId: Overload:Hybrid.EntityFrameworkCore.Repository`2.#ctor
  name: Repository
  nameWithType: Repository<TEntity, TKey>.Repository
  fullName: Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>.Repository
  nameWithType.vb: Repository(Of TEntity, TKey).Repository
  fullName.vb: Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey).Repository
- uid: System.IServiceProvider
  commentId: T:System.IServiceProvider
  parent: System
  isExternal: true
  name: IServiceProvider
  nameWithType: IServiceProvider
  fullName: System.IServiceProvider
- uid: Hybrid.EntityFrameworkCore.Repository`2.UnitOfWork*
  commentId: Overload:Hybrid.EntityFrameworkCore.Repository`2.UnitOfWork
  name: UnitOfWork
  nameWithType: Repository<TEntity, TKey>.UnitOfWork
  fullName: Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>.UnitOfWork
  nameWithType.vb: Repository(Of TEntity, TKey).UnitOfWork
  fullName.vb: Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey).UnitOfWork
- uid: Hybrid.Domain.Repositories.IRepository{{TEntity},{TKey}}.UnitOfWork
  commentId: P:Hybrid.Domain.Repositories.IRepository{`0,`1}.UnitOfWork
  parent: Hybrid.Domain.Repositories.IRepository{{TEntity},{TKey}}
  definition: Hybrid.Domain.Repositories.IRepository`2.UnitOfWork
  name: UnitOfWork
  nameWithType: IRepository<TEntity, TKey>.UnitOfWork
  fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.UnitOfWork
  nameWithType.vb: IRepository(Of TEntity, TKey).UnitOfWork
  fullName.vb: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).UnitOfWork
- uid: Hybrid.Domain.Uow.IUnitOfWork
  commentId: T:Hybrid.Domain.Uow.IUnitOfWork
  parent: Hybrid.Domain.Uow
  name: IUnitOfWork
  nameWithType: IUnitOfWork
  fullName: Hybrid.Domain.Uow.IUnitOfWork
- uid: Hybrid.Domain.Repositories.IRepository`2.UnitOfWork
  commentId: P:Hybrid.Domain.Repositories.IRepository`2.UnitOfWork
  name: UnitOfWork
  nameWithType: IRepository<TEntity, TKey>.UnitOfWork
  fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.UnitOfWork
  nameWithType.vb: IRepository(Of TEntity, TKey).UnitOfWork
  fullName.vb: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).UnitOfWork
- uid: Hybrid.Domain.Uow
  commentId: N:Hybrid.Domain.Uow
  name: Hybrid.Domain.Uow
  nameWithType: Hybrid.Domain.Uow
  fullName: Hybrid.Domain.Uow
- uid: Hybrid.EntityFrameworkCore.Repository`2.Entities*
  commentId: Overload:Hybrid.EntityFrameworkCore.Repository`2.Entities
  name: Entities
  nameWithType: Repository<TEntity, TKey>.Entities
  fullName: Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>.Entities
  nameWithType.vb: Repository(Of TEntity, TKey).Entities
  fullName.vb: Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey).Entities
- uid: System.Linq.IQueryable{{TEntity}}
  commentId: T:System.Linq.IQueryable{``0}
  parent: System.Linq
  definition: System.Linq.IQueryable`1
  name: IQueryable<TEntity>
  nameWithType: IQueryable<TEntity>
  fullName: System.Linq.IQueryable<TEntity>
  nameWithType.vb: IQueryable(Of TEntity)
  fullName.vb: System.Linq.IQueryable(Of TEntity)
  name.vb: IQueryable(Of TEntity)
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.IQueryable`1
  commentId: T:System.Linq.IQueryable`1
  isExternal: true
  name: IQueryable<T>
  nameWithType: IQueryable<T>
  fullName: System.Linq.IQueryable<T>
  nameWithType.vb: IQueryable(Of T)
  fullName.vb: System.Linq.IQueryable(Of T)
  name.vb: IQueryable(Of T)
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq
  commentId: N:System.Linq
  isExternal: true
  name: System.Linq
  nameWithType: System.Linq
  fullName: System.Linq
- uid: Hybrid.EntityFrameworkCore.Repository`2.TrackEntities*
  commentId: Overload:Hybrid.EntityFrameworkCore.Repository`2.TrackEntities
  name: TrackEntities
  nameWithType: Repository<TEntity, TKey>.TrackEntities
  fullName: Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>.TrackEntities
  nameWithType.vb: Repository(Of TEntity, TKey).TrackEntities
  fullName.vb: Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey).TrackEntities
- uid: Hybrid.EntityFrameworkCore.Repository`2.Insert*
  commentId: Overload:Hybrid.EntityFrameworkCore.Repository`2.Insert
  name: Insert
  nameWithType: Repository<TEntity, TKey>.Insert
  fullName: Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>.Insert
  nameWithType.vb: Repository(Of TEntity, TKey).Insert
  fullName.vb: Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey).Insert
- uid: Hybrid.Domain.Repositories.IRepository{{TEntity},{TKey}}.Insert({TEntity}[])
  commentId: M:Hybrid.Domain.Repositories.IRepository{`0,`1}.Insert(`0[])
  parent: Hybrid.Domain.Repositories.IRepository{{TEntity},{TKey}}
  definition: Hybrid.Domain.Repositories.IRepository`2.Insert(`0[])
  name: Insert(TEntity[])
  nameWithType: IRepository<TEntity, TKey>.Insert(TEntity[])
  fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.Insert(TEntity[])
  nameWithType.vb: IRepository(Of TEntity, TKey).Insert(TEntity())
  fullName.vb: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).Insert(TEntity())
  name.vb: Insert(TEntity())
  spec.csharp:
  - uid: Hybrid.Domain.Repositories.IRepository`2.Insert(`0[])
    name: Insert
    nameWithType: IRepository<TEntity, TKey>.Insert
    fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.Insert
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Repositories.IRepository`2.Insert(`0[])
    name: Insert
    nameWithType: IRepository(Of TEntity, TKey).Insert
    fullName: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).Insert
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TEntity}[]'
  isExternal: true
  name: TEntity[]
  nameWithType: TEntity[]
  fullName: TEntity[]
  nameWithType.vb: TEntity()
  fullName.vb: TEntity()
  name.vb: TEntity()
  spec.csharp:
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Hybrid.Domain.Repositories.IRepository`2.Insert(`0[])
  commentId: M:Hybrid.Domain.Repositories.IRepository`2.Insert(`0[])
  name: Insert(TEntity[])
  nameWithType: IRepository<TEntity, TKey>.Insert(TEntity[])
  fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.Insert(TEntity[])
  nameWithType.vb: IRepository(Of TEntity, TKey).Insert(TEntity())
  fullName.vb: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).Insert(TEntity())
  name.vb: Insert(TEntity())
  spec.csharp:
  - uid: Hybrid.Domain.Repositories.IRepository`2.Insert(`0[])
    name: Insert
    nameWithType: IRepository<TEntity, TKey>.Insert
    fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.Insert
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Repositories.IRepository`2.Insert(`0[])
    name: Insert
    nameWithType: IRepository(Of TEntity, TKey).Insert
    fullName: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).Insert
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EntityFrameworkCore.Repository`2.InsertOrUpdate*
  commentId: Overload:Hybrid.EntityFrameworkCore.Repository`2.InsertOrUpdate
  name: InsertOrUpdate
  nameWithType: Repository<TEntity, TKey>.InsertOrUpdate
  fullName: Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>.InsertOrUpdate
  nameWithType.vb: Repository(Of TEntity, TKey).InsertOrUpdate
  fullName.vb: Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey).InsertOrUpdate
- uid: System.Func{{TEntity},System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}}}
  commentId: T:System.Func{`0,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}}}
  parent: System
  definition: System.Func`2
  name: Func<TEntity, Expression<Func<TEntity, Boolean>>>
  nameWithType: Func<TEntity, Expression<Func<TEntity, Boolean>>>
  fullName: System.Func<TEntity, System.Linq.Expressions.Expression<System.Func<TEntity, System.Boolean>>>
  nameWithType.vb: Func(Of TEntity, Expression(Of Func(Of TEntity, Boolean)))
  fullName.vb: System.Func(Of TEntity, System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Boolean)))
  name.vb: Func(Of TEntity, Expression(Of Func(Of TEntity, Boolean)))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Domain.Repositories.IRepository{{TEntity},{TKey}}.Insert``1(System.Collections.Generic.ICollection{{TInputDto}},System.Action{{TInputDto}},System.Func{{TInputDto},{TEntity},{TEntity}})
  commentId: M:Hybrid.Domain.Repositories.IRepository{`0,`1}.Insert``1(System.Collections.Generic.ICollection{``0},System.Action{``0},System.Func{``0,`0,`0})
  parent: Hybrid.Domain.Repositories.IRepository{{TEntity},{TKey}}
  definition: Hybrid.Domain.Repositories.IRepository`2.Insert``1(System.Collections.Generic.ICollection{``0},System.Action{``0},System.Func{``0,`0,`0})
  name: Insert<TInputDto>(ICollection<TInputDto>, Action<TInputDto>, Func<TInputDto, TEntity, TEntity>)
  nameWithType: IRepository<TEntity, TKey>.Insert<TInputDto>(ICollection<TInputDto>, Action<TInputDto>, Func<TInputDto, TEntity, TEntity>)
  fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.Insert<TInputDto>(System.Collections.Generic.ICollection<TInputDto>, System.Action<TInputDto>, System.Func<TInputDto, TEntity, TEntity>)
  nameWithType.vb: IRepository(Of TEntity, TKey).Insert(Of TInputDto)(ICollection(Of TInputDto), Action(Of TInputDto), Func(Of TInputDto, TEntity, TEntity))
  fullName.vb: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).Insert(Of TInputDto)(System.Collections.Generic.ICollection(Of TInputDto), System.Action(Of TInputDto), System.Func(Of TInputDto, TEntity, TEntity))
  name.vb: Insert(Of TInputDto)(ICollection(Of TInputDto), Action(Of TInputDto), Func(Of TInputDto, TEntity, TEntity))
  spec.csharp:
  - uid: Hybrid.Domain.Repositories.IRepository`2.Insert``1(System.Collections.Generic.ICollection{``0},System.Action{``0},System.Func{``0,`0,`0})
    name: Insert<TInputDto>
    nameWithType: IRepository<TEntity, TKey>.Insert<TInputDto>
    fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.Insert<TInputDto>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInputDto
    nameWithType: TInputDto
    fullName: TInputDto
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInputDto
    nameWithType: TInputDto
    fullName: TInputDto
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInputDto
    nameWithType: TInputDto
    fullName: TInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Repositories.IRepository`2.Insert``1(System.Collections.Generic.ICollection{``0},System.Action{``0},System.Func{``0,`0,`0})
    name: Insert(Of TInputDto)
    nameWithType: IRepository(Of TEntity, TKey).Insert(Of TInputDto)
    fullName: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).Insert(Of TInputDto)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInputDto
    nameWithType: TInputDto
    fullName: TInputDto
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInputDto
    nameWithType: TInputDto
    fullName: TInputDto
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInputDto
    nameWithType: TInputDto
    fullName: TInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection{{TInputDto}}
  commentId: T:System.Collections.Generic.ICollection{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<TInputDto>
  nameWithType: ICollection<TInputDto>
  fullName: System.Collections.Generic.ICollection<TInputDto>
  nameWithType.vb: ICollection(Of TInputDto)
  fullName.vb: System.Collections.Generic.ICollection(Of TInputDto)
  name.vb: ICollection(Of TInputDto)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInputDto
    nameWithType: TInputDto
    fullName: TInputDto
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInputDto
    nameWithType: TInputDto
    fullName: TInputDto
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action{{TInputDto}}
  commentId: T:System.Action{``0}
  parent: System
  definition: System.Action`1
  name: Action<TInputDto>
  nameWithType: Action<TInputDto>
  fullName: System.Action<TInputDto>
  nameWithType.vb: Action(Of TInputDto)
  fullName.vb: System.Action(Of TInputDto)
  name.vb: Action(Of TInputDto)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInputDto
    nameWithType: TInputDto
    fullName: TInputDto
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInputDto
    nameWithType: TInputDto
    fullName: TInputDto
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TInputDto},{TEntity},{TEntity}}
  commentId: T:System.Func{``0,`0,`0}
  parent: System
  definition: System.Func`3
  name: Func<TInputDto, TEntity, TEntity>
  nameWithType: Func<TInputDto, TEntity, TEntity>
  fullName: System.Func<TInputDto, TEntity, TEntity>
  nameWithType.vb: Func(Of TInputDto, TEntity, TEntity)
  fullName.vb: System.Func(Of TInputDto, TEntity, TEntity)
  name.vb: Func(Of TInputDto, TEntity, TEntity)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInputDto
    nameWithType: TInputDto
    fullName: TInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInputDto
    nameWithType: TInputDto
    fullName: TInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Data.OperationResult
  commentId: T:Hybrid.Data.OperationResult
  parent: Hybrid.Data
  name: OperationResult
  nameWithType: OperationResult
  fullName: Hybrid.Data.OperationResult
- uid: Hybrid.Domain.Repositories.IRepository`2.Insert``1(System.Collections.Generic.ICollection{``0},System.Action{``0},System.Func{``0,`0,`0})
  commentId: M:Hybrid.Domain.Repositories.IRepository`2.Insert``1(System.Collections.Generic.ICollection{``0},System.Action{``0},System.Func{``0,`0,`0})
  isExternal: true
  name: Insert<TInputDto>(ICollection<TInputDto>, Action<TInputDto>, Func<TInputDto, TEntity, TEntity>)
  nameWithType: IRepository<TEntity, TKey>.Insert<TInputDto>(ICollection<TInputDto>, Action<TInputDto>, Func<TInputDto, TEntity, TEntity>)
  fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.Insert<TInputDto>(System.Collections.Generic.ICollection<TInputDto>, System.Action<TInputDto>, System.Func<TInputDto, TEntity, TEntity>)
  nameWithType.vb: IRepository(Of TEntity, TKey).Insert(Of TInputDto)(ICollection(Of TInputDto), Action(Of TInputDto), Func(Of TInputDto, TEntity, TEntity))
  fullName.vb: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).Insert(Of TInputDto)(System.Collections.Generic.ICollection(Of TInputDto), System.Action(Of TInputDto), System.Func(Of TInputDto, TEntity, TEntity))
  name.vb: Insert(Of TInputDto)(ICollection(Of TInputDto), Action(Of TInputDto), Func(Of TInputDto, TEntity, TEntity))
  spec.csharp:
  - uid: Hybrid.Domain.Repositories.IRepository`2.Insert``1(System.Collections.Generic.ICollection{``0},System.Action{``0},System.Func{``0,`0,`0})
    name: Insert<TInputDto>
    nameWithType: IRepository<TEntity, TKey>.Insert<TInputDto>
    fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.Insert<TInputDto>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInputDto
    nameWithType: TInputDto
    fullName: TInputDto
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInputDto
    nameWithType: TInputDto
    fullName: TInputDto
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInputDto
    nameWithType: TInputDto
    fullName: TInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Repositories.IRepository`2.Insert``1(System.Collections.Generic.ICollection{``0},System.Action{``0},System.Func{``0,`0,`0})
    name: Insert(Of TInputDto)
    nameWithType: IRepository(Of TEntity, TKey).Insert(Of TInputDto)
    fullName: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).Insert(Of TInputDto)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInputDto
    nameWithType: TInputDto
    fullName: TInputDto
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInputDto
    nameWithType: TInputDto
    fullName: TInputDto
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInputDto
    nameWithType: TInputDto
    fullName: TInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`3
  commentId: T:System.Func`3
  isExternal: true
  name: Func<T1, T2, TResult>
  nameWithType: Func<T1, T2, TResult>
  fullName: System.Func<T1, T2, TResult>
  nameWithType.vb: Func(Of T1, T2, TResult)
  fullName.vb: System.Func(Of T1, T2, TResult)
  name.vb: Func(Of T1, T2, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Data
  commentId: N:Hybrid.Data
  name: Hybrid.Data
  nameWithType: Hybrid.Data
  fullName: Hybrid.Data
- uid: Hybrid.EntityFrameworkCore.Repository`2.Delete*
  commentId: Overload:Hybrid.EntityFrameworkCore.Repository`2.Delete
  name: Delete
  nameWithType: Repository<TEntity, TKey>.Delete
  fullName: Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>.Delete
  nameWithType.vb: Repository(Of TEntity, TKey).Delete
  fullName.vb: Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey).Delete
- uid: Hybrid.Domain.Repositories.IRepository{{TEntity},{TKey}}.Delete({TEntity}[])
  commentId: M:Hybrid.Domain.Repositories.IRepository{`0,`1}.Delete(`0[])
  parent: Hybrid.Domain.Repositories.IRepository{{TEntity},{TKey}}
  definition: Hybrid.Domain.Repositories.IRepository`2.Delete(`0[])
  name: Delete(TEntity[])
  nameWithType: IRepository<TEntity, TKey>.Delete(TEntity[])
  fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.Delete(TEntity[])
  nameWithType.vb: IRepository(Of TEntity, TKey).Delete(TEntity())
  fullName.vb: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).Delete(TEntity())
  name.vb: Delete(TEntity())
  spec.csharp:
  - uid: Hybrid.Domain.Repositories.IRepository`2.Delete(`0[])
    name: Delete
    nameWithType: IRepository<TEntity, TKey>.Delete
    fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.Delete
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Repositories.IRepository`2.Delete(`0[])
    name: Delete
    nameWithType: IRepository(Of TEntity, TKey).Delete
    fullName: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).Delete
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Domain.Repositories.IRepository`2.Delete(`0[])
  commentId: M:Hybrid.Domain.Repositories.IRepository`2.Delete(`0[])
  name: Delete(TEntity[])
  nameWithType: IRepository<TEntity, TKey>.Delete(TEntity[])
  fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.Delete(TEntity[])
  nameWithType.vb: IRepository(Of TEntity, TKey).Delete(TEntity())
  fullName.vb: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).Delete(TEntity())
  name.vb: Delete(TEntity())
  spec.csharp:
  - uid: Hybrid.Domain.Repositories.IRepository`2.Delete(`0[])
    name: Delete
    nameWithType: IRepository<TEntity, TKey>.Delete
    fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.Delete
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Repositories.IRepository`2.Delete(`0[])
    name: Delete
    nameWithType: IRepository(Of TEntity, TKey).Delete
    fullName: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).Delete
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Domain.Repositories.IRepository{{TEntity},{TKey}}.Delete({TKey})
  commentId: M:Hybrid.Domain.Repositories.IRepository{`0,`1}.Delete(`1)
  parent: Hybrid.Domain.Repositories.IRepository{{TEntity},{TKey}}
  definition: Hybrid.Domain.Repositories.IRepository`2.Delete(`1)
  name: Delete(TKey)
  nameWithType: IRepository<TEntity, TKey>.Delete(TKey)
  fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.Delete(TKey)
  nameWithType.vb: IRepository(Of TEntity, TKey).Delete(TKey)
  fullName.vb: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).Delete(TKey)
  spec.csharp:
  - uid: Hybrid.Domain.Repositories.IRepository`2.Delete(`1)
    name: Delete
    nameWithType: IRepository<TEntity, TKey>.Delete
    fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.Delete
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Repositories.IRepository`2.Delete(`1)
    name: Delete
    nameWithType: IRepository(Of TEntity, TKey).Delete
    fullName: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).Delete
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TKey}'
  commentId: '!:TKey'
  definition: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: Hybrid.Domain.Repositories.IRepository`2.Delete(`1)
  commentId: M:Hybrid.Domain.Repositories.IRepository`2.Delete(`1)
  name: Delete(TKey)
  nameWithType: IRepository<TEntity, TKey>.Delete(TKey)
  fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.Delete(TKey)
  nameWithType.vb: IRepository(Of TEntity, TKey).Delete(TKey)
  fullName.vb: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).Delete(TKey)
  spec.csharp:
  - uid: Hybrid.Domain.Repositories.IRepository`2.Delete(`1)
    name: Delete
    nameWithType: IRepository<TEntity, TKey>.Delete
    fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.Delete
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Repositories.IRepository`2.Delete(`1)
    name: Delete
    nameWithType: IRepository(Of TEntity, TKey).Delete
    fullName: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).Delete
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: Hybrid.Domain.Repositories.IRepository{{TEntity},{TKey}}.Delete(System.Collections.Generic.ICollection{{TKey}},System.Action{{TEntity}},System.Func{{TEntity},{TEntity}})
  commentId: M:Hybrid.Domain.Repositories.IRepository{`0,`1}.Delete(System.Collections.Generic.ICollection{`1},System.Action{`0},System.Func{`0,`0})
  parent: Hybrid.Domain.Repositories.IRepository{{TEntity},{TKey}}
  definition: Hybrid.Domain.Repositories.IRepository`2.Delete(System.Collections.Generic.ICollection{`1},System.Action{`0},System.Func{`0,`0})
  name: Delete(ICollection<TKey>, Action<TEntity>, Func<TEntity, TEntity>)
  nameWithType: IRepository<TEntity, TKey>.Delete(ICollection<TKey>, Action<TEntity>, Func<TEntity, TEntity>)
  fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.Delete(System.Collections.Generic.ICollection<TKey>, System.Action<TEntity>, System.Func<TEntity, TEntity>)
  nameWithType.vb: IRepository(Of TEntity, TKey).Delete(ICollection(Of TKey), Action(Of TEntity), Func(Of TEntity, TEntity))
  fullName.vb: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).Delete(System.Collections.Generic.ICollection(Of TKey), System.Action(Of TEntity), System.Func(Of TEntity, TEntity))
  name.vb: Delete(ICollection(Of TKey), Action(Of TEntity), Func(Of TEntity, TEntity))
  spec.csharp:
  - uid: Hybrid.Domain.Repositories.IRepository`2.Delete(System.Collections.Generic.ICollection{`1},System.Action{`0},System.Func{`0,`0})
    name: Delete
    nameWithType: IRepository<TEntity, TKey>.Delete
    fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.Delete
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Repositories.IRepository`2.Delete(System.Collections.Generic.ICollection{`1},System.Action{`0},System.Func{`0,`0})
    name: Delete
    nameWithType: IRepository(Of TEntity, TKey).Delete
    fullName: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).Delete
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection{{TKey}}
  commentId: T:System.Collections.Generic.ICollection{`1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<TKey>
  nameWithType: ICollection<TKey>
  fullName: System.Collections.Generic.ICollection<TKey>
  nameWithType.vb: ICollection(Of TKey)
  fullName.vb: System.Collections.Generic.ICollection(Of TKey)
  name.vb: ICollection(Of TKey)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action{{TEntity}}
  commentId: T:System.Action{`0}
  parent: System
  definition: System.Action`1
  name: Action<TEntity>
  nameWithType: Action<TEntity>
  fullName: System.Action<TEntity>
  nameWithType.vb: Action(Of TEntity)
  fullName.vb: System.Action(Of TEntity)
  name.vb: Action(Of TEntity)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TEntity},{TEntity}}
  commentId: T:System.Func{`0,`0}
  parent: System
  definition: System.Func`2
  name: Func<TEntity, TEntity>
  nameWithType: Func<TEntity, TEntity>
  fullName: System.Func<TEntity, TEntity>
  nameWithType.vb: Func(Of TEntity, TEntity)
  fullName.vb: System.Func(Of TEntity, TEntity)
  name.vb: Func(Of TEntity, TEntity)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Domain.Repositories.IRepository`2.Delete(System.Collections.Generic.ICollection{`1},System.Action{`0},System.Func{`0,`0})
  commentId: M:Hybrid.Domain.Repositories.IRepository`2.Delete(System.Collections.Generic.ICollection{`1},System.Action{`0},System.Func{`0,`0})
  isExternal: true
  name: Delete(ICollection<TKey>, Action<TEntity>, Func<TEntity, TEntity>)
  nameWithType: IRepository<TEntity, TKey>.Delete(ICollection<TKey>, Action<TEntity>, Func<TEntity, TEntity>)
  fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.Delete(System.Collections.Generic.ICollection<TKey>, System.Action<TEntity>, System.Func<TEntity, TEntity>)
  nameWithType.vb: IRepository(Of TEntity, TKey).Delete(ICollection(Of TKey), Action(Of TEntity), Func(Of TEntity, TEntity))
  fullName.vb: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).Delete(System.Collections.Generic.ICollection(Of TKey), System.Action(Of TEntity), System.Func(Of TEntity, TEntity))
  name.vb: Delete(ICollection(Of TKey), Action(Of TEntity), Func(Of TEntity, TEntity))
  spec.csharp:
  - uid: Hybrid.Domain.Repositories.IRepository`2.Delete(System.Collections.Generic.ICollection{`1},System.Action{`0},System.Func{`0,`0})
    name: Delete
    nameWithType: IRepository<TEntity, TKey>.Delete
    fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.Delete
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Repositories.IRepository`2.Delete(System.Collections.Generic.ICollection{`1},System.Action{`0},System.Func{`0,`0})
    name: Delete
    nameWithType: IRepository(Of TEntity, TKey).Delete
    fullName: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).Delete
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EntityFrameworkCore.Repository`2.DeleteBatch*
  commentId: Overload:Hybrid.EntityFrameworkCore.Repository`2.DeleteBatch
  name: DeleteBatch
  nameWithType: Repository<TEntity, TKey>.DeleteBatch
  fullName: Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>.DeleteBatch
  nameWithType.vb: Repository(Of TEntity, TKey).DeleteBatch
  fullName.vb: Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey).DeleteBatch
- uid: Hybrid.Domain.Repositories.IRepository{{TEntity},{TKey}}.DeleteBatch(System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}})
  commentId: M:Hybrid.Domain.Repositories.IRepository{`0,`1}.DeleteBatch(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  parent: Hybrid.Domain.Repositories.IRepository{{TEntity},{TKey}}
  definition: Hybrid.Domain.Repositories.IRepository`2.DeleteBatch(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  name: DeleteBatch(Expression<Func<TEntity, Boolean>>)
  nameWithType: IRepository<TEntity, TKey>.DeleteBatch(Expression<Func<TEntity, Boolean>>)
  fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.DeleteBatch(System.Linq.Expressions.Expression<System.Func<TEntity, System.Boolean>>)
  nameWithType.vb: IRepository(Of TEntity, TKey).DeleteBatch(Expression(Of Func(Of TEntity, Boolean)))
  fullName.vb: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).DeleteBatch(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Boolean)))
  name.vb: DeleteBatch(Expression(Of Func(Of TEntity, Boolean)))
  spec.csharp:
  - uid: Hybrid.Domain.Repositories.IRepository`2.DeleteBatch(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: DeleteBatch
    nameWithType: IRepository<TEntity, TKey>.DeleteBatch
    fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.DeleteBatch
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Repositories.IRepository`2.DeleteBatch(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: DeleteBatch
    nameWithType: IRepository(Of TEntity, TKey).DeleteBatch
    fullName: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).DeleteBatch
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TEntity, Boolean>>
  nameWithType: Expression<Func<TEntity, Boolean>>
  fullName: System.Linq.Expressions.Expression<System.Func<TEntity, System.Boolean>>
  nameWithType.vb: Expression(Of Func(Of TEntity, Boolean))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Boolean))
  name.vb: Expression(Of Func(Of TEntity, Boolean))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Domain.Repositories.IRepository`2.DeleteBatch(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  commentId: M:Hybrid.Domain.Repositories.IRepository`2.DeleteBatch(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  isExternal: true
  name: DeleteBatch(Expression<Func<TEntity, Boolean>>)
  nameWithType: IRepository<TEntity, TKey>.DeleteBatch(Expression<Func<TEntity, Boolean>>)
  fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.DeleteBatch(System.Linq.Expressions.Expression<System.Func<TEntity, System.Boolean>>)
  nameWithType.vb: IRepository(Of TEntity, TKey).DeleteBatch(Expression(Of Func(Of TEntity, Boolean)))
  fullName.vb: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).DeleteBatch(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Boolean)))
  name.vb: DeleteBatch(Expression(Of Func(Of TEntity, Boolean)))
  spec.csharp:
  - uid: Hybrid.Domain.Repositories.IRepository`2.DeleteBatch(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: DeleteBatch
    nameWithType: IRepository<TEntity, TKey>.DeleteBatch
    fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.DeleteBatch
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Repositories.IRepository`2.DeleteBatch(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: DeleteBatch
    nameWithType: IRepository(Of TEntity, TKey).DeleteBatch
    fullName: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).DeleteBatch
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression`1
  commentId: T:System.Linq.Expressions.Expression`1
  isExternal: true
  name: Expression<TDelegate>
  nameWithType: Expression<TDelegate>
  fullName: System.Linq.Expressions.Expression<TDelegate>
  nameWithType.vb: Expression(Of TDelegate)
  fullName.vb: System.Linq.Expressions.Expression(Of TDelegate)
  name.vb: Expression(Of TDelegate)
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TDelegate
    nameWithType: TDelegate
    fullName: TDelegate
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TDelegate
    nameWithType: TDelegate
    fullName: TDelegate
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions
  commentId: N:System.Linq.Expressions
  isExternal: true
  name: System.Linq.Expressions
  nameWithType: System.Linq.Expressions
  fullName: System.Linq.Expressions
- uid: Hybrid.EntityFrameworkCore.Repository`2.Update*
  commentId: Overload:Hybrid.EntityFrameworkCore.Repository`2.Update
  name: Update
  nameWithType: Repository<TEntity, TKey>.Update
  fullName: Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>.Update
  nameWithType.vb: Repository(Of TEntity, TKey).Update
  fullName.vb: Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey).Update
- uid: Hybrid.Domain.Repositories.IRepository{{TEntity},{TKey}}.Update({TEntity}[])
  commentId: M:Hybrid.Domain.Repositories.IRepository{`0,`1}.Update(`0[])
  parent: Hybrid.Domain.Repositories.IRepository{{TEntity},{TKey}}
  definition: Hybrid.Domain.Repositories.IRepository`2.Update(`0[])
  name: Update(TEntity[])
  nameWithType: IRepository<TEntity, TKey>.Update(TEntity[])
  fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.Update(TEntity[])
  nameWithType.vb: IRepository(Of TEntity, TKey).Update(TEntity())
  fullName.vb: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).Update(TEntity())
  name.vb: Update(TEntity())
  spec.csharp:
  - uid: Hybrid.Domain.Repositories.IRepository`2.Update(`0[])
    name: Update
    nameWithType: IRepository<TEntity, TKey>.Update
    fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.Update
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Repositories.IRepository`2.Update(`0[])
    name: Update
    nameWithType: IRepository(Of TEntity, TKey).Update
    fullName: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).Update
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Domain.Repositories.IRepository`2.Update(`0[])
  commentId: M:Hybrid.Domain.Repositories.IRepository`2.Update(`0[])
  name: Update(TEntity[])
  nameWithType: IRepository<TEntity, TKey>.Update(TEntity[])
  fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.Update(TEntity[])
  nameWithType.vb: IRepository(Of TEntity, TKey).Update(TEntity())
  fullName.vb: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).Update(TEntity())
  name.vb: Update(TEntity())
  spec.csharp:
  - uid: Hybrid.Domain.Repositories.IRepository`2.Update(`0[])
    name: Update
    nameWithType: IRepository<TEntity, TKey>.Update
    fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.Update
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Repositories.IRepository`2.Update(`0[])
    name: Update
    nameWithType: IRepository(Of TEntity, TKey).Update
    fullName: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).Update
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Domain.Repositories.IRepository{{TEntity},{TKey}}.Update``1(System.Collections.Generic.ICollection{{TEditDto}},System.Action{{TEditDto},{TEntity}},System.Func{{TEditDto},{TEntity},{TEntity}})
  commentId: M:Hybrid.Domain.Repositories.IRepository{`0,`1}.Update``1(System.Collections.Generic.ICollection{``0},System.Action{``0,`0},System.Func{``0,`0,`0})
  parent: Hybrid.Domain.Repositories.IRepository{{TEntity},{TKey}}
  definition: Hybrid.Domain.Repositories.IRepository`2.Update``1(System.Collections.Generic.ICollection{``0},System.Action{``0,`0},System.Func{``0,`0,`0})
  name: Update<TEditDto>(ICollection<TEditDto>, Action<TEditDto, TEntity>, Func<TEditDto, TEntity, TEntity>)
  nameWithType: IRepository<TEntity, TKey>.Update<TEditDto>(ICollection<TEditDto>, Action<TEditDto, TEntity>, Func<TEditDto, TEntity, TEntity>)
  fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.Update<TEditDto>(System.Collections.Generic.ICollection<TEditDto>, System.Action<TEditDto, TEntity>, System.Func<TEditDto, TEntity, TEntity>)
  nameWithType.vb: IRepository(Of TEntity, TKey).Update(Of TEditDto)(ICollection(Of TEditDto), Action(Of TEditDto, TEntity), Func(Of TEditDto, TEntity, TEntity))
  fullName.vb: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).Update(Of TEditDto)(System.Collections.Generic.ICollection(Of TEditDto), System.Action(Of TEditDto, TEntity), System.Func(Of TEditDto, TEntity, TEntity))
  name.vb: Update(Of TEditDto)(ICollection(Of TEditDto), Action(Of TEditDto, TEntity), Func(Of TEditDto, TEntity, TEntity))
  spec.csharp:
  - uid: Hybrid.Domain.Repositories.IRepository`2.Update``1(System.Collections.Generic.ICollection{``0},System.Action{``0,`0},System.Func{``0,`0,`0})
    name: Update<TEditDto>
    nameWithType: IRepository<TEntity, TKey>.Update<TEditDto>
    fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.Update<TEditDto>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEditDto
    nameWithType: TEditDto
    fullName: TEditDto
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEditDto
    nameWithType: TEditDto
    fullName: TEditDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEditDto
    nameWithType: TEditDto
    fullName: TEditDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Repositories.IRepository`2.Update``1(System.Collections.Generic.ICollection{``0},System.Action{``0,`0},System.Func{``0,`0,`0})
    name: Update(Of TEditDto)
    nameWithType: IRepository(Of TEntity, TKey).Update(Of TEditDto)
    fullName: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).Update(Of TEditDto)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEditDto
    nameWithType: TEditDto
    fullName: TEditDto
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEditDto
    nameWithType: TEditDto
    fullName: TEditDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEditDto
    nameWithType: TEditDto
    fullName: TEditDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection{{TEditDto}}
  commentId: T:System.Collections.Generic.ICollection{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<TEditDto>
  nameWithType: ICollection<TEditDto>
  fullName: System.Collections.Generic.ICollection<TEditDto>
  nameWithType.vb: ICollection(Of TEditDto)
  fullName.vb: System.Collections.Generic.ICollection(Of TEditDto)
  name.vb: ICollection(Of TEditDto)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEditDto
    nameWithType: TEditDto
    fullName: TEditDto
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEditDto
    nameWithType: TEditDto
    fullName: TEditDto
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action{{TEditDto},{TEntity}}
  commentId: T:System.Action{``0,`0}
  parent: System
  definition: System.Action`2
  name: Action<TEditDto, TEntity>
  nameWithType: Action<TEditDto, TEntity>
  fullName: System.Action<TEditDto, TEntity>
  nameWithType.vb: Action(Of TEditDto, TEntity)
  fullName.vb: System.Action(Of TEditDto, TEntity)
  name.vb: Action(Of TEditDto, TEntity)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEditDto
    nameWithType: TEditDto
    fullName: TEditDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEditDto
    nameWithType: TEditDto
    fullName: TEditDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TEditDto},{TEntity},{TEntity}}
  commentId: T:System.Func{``0,`0,`0}
  parent: System
  definition: System.Func`3
  name: Func<TEditDto, TEntity, TEntity>
  nameWithType: Func<TEditDto, TEntity, TEntity>
  fullName: System.Func<TEditDto, TEntity, TEntity>
  nameWithType.vb: Func(Of TEditDto, TEntity, TEntity)
  fullName.vb: System.Func(Of TEditDto, TEntity, TEntity)
  name.vb: Func(Of TEditDto, TEntity, TEntity)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEditDto
    nameWithType: TEditDto
    fullName: TEditDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEditDto
    nameWithType: TEditDto
    fullName: TEditDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Domain.Repositories.IRepository`2.Update``1(System.Collections.Generic.ICollection{``0},System.Action{``0,`0},System.Func{``0,`0,`0})
  commentId: M:Hybrid.Domain.Repositories.IRepository`2.Update``1(System.Collections.Generic.ICollection{``0},System.Action{``0,`0},System.Func{``0,`0,`0})
  isExternal: true
  name: Update<TEditDto>(ICollection<TEditDto>, Action<TEditDto, TEntity>, Func<TEditDto, TEntity, TEntity>)
  nameWithType: IRepository<TEntity, TKey>.Update<TEditDto>(ICollection<TEditDto>, Action<TEditDto, TEntity>, Func<TEditDto, TEntity, TEntity>)
  fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.Update<TEditDto>(System.Collections.Generic.ICollection<TEditDto>, System.Action<TEditDto, TEntity>, System.Func<TEditDto, TEntity, TEntity>)
  nameWithType.vb: IRepository(Of TEntity, TKey).Update(Of TEditDto)(ICollection(Of TEditDto), Action(Of TEditDto, TEntity), Func(Of TEditDto, TEntity, TEntity))
  fullName.vb: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).Update(Of TEditDto)(System.Collections.Generic.ICollection(Of TEditDto), System.Action(Of TEditDto, TEntity), System.Func(Of TEditDto, TEntity, TEntity))
  name.vb: Update(Of TEditDto)(ICollection(Of TEditDto), Action(Of TEditDto, TEntity), Func(Of TEditDto, TEntity, TEntity))
  spec.csharp:
  - uid: Hybrid.Domain.Repositories.IRepository`2.Update``1(System.Collections.Generic.ICollection{``0},System.Action{``0,`0},System.Func{``0,`0,`0})
    name: Update<TEditDto>
    nameWithType: IRepository<TEntity, TKey>.Update<TEditDto>
    fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.Update<TEditDto>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEditDto
    nameWithType: TEditDto
    fullName: TEditDto
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEditDto
    nameWithType: TEditDto
    fullName: TEditDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEditDto
    nameWithType: TEditDto
    fullName: TEditDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Repositories.IRepository`2.Update``1(System.Collections.Generic.ICollection{``0},System.Action{``0,`0},System.Func{``0,`0,`0})
    name: Update(Of TEditDto)
    nameWithType: IRepository(Of TEntity, TKey).Update(Of TEditDto)
    fullName: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).Update(Of TEditDto)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEditDto
    nameWithType: TEditDto
    fullName: TEditDto
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEditDto
    nameWithType: TEditDto
    fullName: TEditDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEditDto
    nameWithType: TEditDto
    fullName: TEditDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`2
  commentId: T:System.Action`2
  isExternal: true
  name: Action<T1, T2>
  nameWithType: Action<T1, T2>
  fullName: System.Action<T1, T2>
  nameWithType.vb: Action(Of T1, T2)
  fullName.vb: System.Action(Of T1, T2)
  name.vb: Action(Of T1, T2)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EntityFrameworkCore.Repository`2.UpdateBatch*
  commentId: Overload:Hybrid.EntityFrameworkCore.Repository`2.UpdateBatch
  name: UpdateBatch
  nameWithType: Repository<TEntity, TKey>.UpdateBatch
  fullName: Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>.UpdateBatch
  nameWithType.vb: Repository(Of TEntity, TKey).UpdateBatch
  fullName.vb: Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey).UpdateBatch
- uid: Hybrid.Domain.Repositories.IRepository{{TEntity},{TKey}}.UpdateBatch(System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}},System.Linq.Expressions.Expression{System.Func{{TEntity},{TEntity}}})
  commentId: M:Hybrid.Domain.Repositories.IRepository{`0,`1}.UpdateBatch(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}})
  parent: Hybrid.Domain.Repositories.IRepository{{TEntity},{TKey}}
  definition: Hybrid.Domain.Repositories.IRepository`2.UpdateBatch(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}})
  name: UpdateBatch(Expression<Func<TEntity, Boolean>>, Expression<Func<TEntity, TEntity>>)
  nameWithType: IRepository<TEntity, TKey>.UpdateBatch(Expression<Func<TEntity, Boolean>>, Expression<Func<TEntity, TEntity>>)
  fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.UpdateBatch(System.Linq.Expressions.Expression<System.Func<TEntity, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<TEntity, TEntity>>)
  nameWithType.vb: IRepository(Of TEntity, TKey).UpdateBatch(Expression(Of Func(Of TEntity, Boolean)), Expression(Of Func(Of TEntity, TEntity)))
  fullName.vb: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).UpdateBatch(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of TEntity, TEntity)))
  name.vb: UpdateBatch(Expression(Of Func(Of TEntity, Boolean)), Expression(Of Func(Of TEntity, TEntity)))
  spec.csharp:
  - uid: Hybrid.Domain.Repositories.IRepository`2.UpdateBatch(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}})
    name: UpdateBatch
    nameWithType: IRepository<TEntity, TKey>.UpdateBatch
    fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.UpdateBatch
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Repositories.IRepository`2.UpdateBatch(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}})
    name: UpdateBatch
    nameWithType: IRepository(Of TEntity, TKey).UpdateBatch
    fullName: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).UpdateBatch
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{TEntity},{TEntity}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,`0}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TEntity, TEntity>>
  nameWithType: Expression<Func<TEntity, TEntity>>
  fullName: System.Linq.Expressions.Expression<System.Func<TEntity, TEntity>>
  nameWithType.vb: Expression(Of Func(Of TEntity, TEntity))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TEntity, TEntity))
  name.vb: Expression(Of Func(Of TEntity, TEntity))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Domain.Repositories.IRepository`2.UpdateBatch(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}})
  commentId: M:Hybrid.Domain.Repositories.IRepository`2.UpdateBatch(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}})
  isExternal: true
  name: UpdateBatch(Expression<Func<TEntity, Boolean>>, Expression<Func<TEntity, TEntity>>)
  nameWithType: IRepository<TEntity, TKey>.UpdateBatch(Expression<Func<TEntity, Boolean>>, Expression<Func<TEntity, TEntity>>)
  fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.UpdateBatch(System.Linq.Expressions.Expression<System.Func<TEntity, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<TEntity, TEntity>>)
  nameWithType.vb: IRepository(Of TEntity, TKey).UpdateBatch(Expression(Of Func(Of TEntity, Boolean)), Expression(Of Func(Of TEntity, TEntity)))
  fullName.vb: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).UpdateBatch(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of TEntity, TEntity)))
  name.vb: UpdateBatch(Expression(Of Func(Of TEntity, Boolean)), Expression(Of Func(Of TEntity, TEntity)))
  spec.csharp:
  - uid: Hybrid.Domain.Repositories.IRepository`2.UpdateBatch(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}})
    name: UpdateBatch
    nameWithType: IRepository<TEntity, TKey>.UpdateBatch
    fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.UpdateBatch
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Repositories.IRepository`2.UpdateBatch(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}})
    name: UpdateBatch
    nameWithType: IRepository(Of TEntity, TKey).UpdateBatch
    fullName: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).UpdateBatch
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EntityFrameworkCore.Repository`2.CheckExists*
  commentId: Overload:Hybrid.EntityFrameworkCore.Repository`2.CheckExists
  name: CheckExists
  nameWithType: Repository<TEntity, TKey>.CheckExists
  fullName: Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>.CheckExists
  nameWithType.vb: Repository(Of TEntity, TKey).CheckExists
  fullName.vb: Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey).CheckExists
- uid: Hybrid.Domain.Repositories.IRepository{{TEntity},{TKey}}.CheckExists(System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}},{TKey})
  commentId: M:Hybrid.Domain.Repositories.IRepository{`0,`1}.CheckExists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},`1)
  parent: Hybrid.Domain.Repositories.IRepository{{TEntity},{TKey}}
  definition: Hybrid.Domain.Repositories.IRepository`2.CheckExists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},`1)
  name: CheckExists(Expression<Func<TEntity, Boolean>>, TKey)
  nameWithType: IRepository<TEntity, TKey>.CheckExists(Expression<Func<TEntity, Boolean>>, TKey)
  fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.CheckExists(System.Linq.Expressions.Expression<System.Func<TEntity, System.Boolean>>, TKey)
  nameWithType.vb: IRepository(Of TEntity, TKey).CheckExists(Expression(Of Func(Of TEntity, Boolean)), TKey)
  fullName.vb: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).CheckExists(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Boolean)), TKey)
  name.vb: CheckExists(Expression(Of Func(Of TEntity, Boolean)), TKey)
  spec.csharp:
  - uid: Hybrid.Domain.Repositories.IRepository`2.CheckExists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},`1)
    name: CheckExists
    nameWithType: IRepository<TEntity, TKey>.CheckExists
    fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.CheckExists
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Repositories.IRepository`2.CheckExists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},`1)
    name: CheckExists
    nameWithType: IRepository(Of TEntity, TKey).CheckExists
    fullName: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).CheckExists
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Hybrid.Domain.Repositories.IRepository`2.CheckExists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},`1)
  commentId: M:Hybrid.Domain.Repositories.IRepository`2.CheckExists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},`1)
  isExternal: true
  name: CheckExists(Expression<Func<TEntity, Boolean>>, TKey)
  nameWithType: IRepository<TEntity, TKey>.CheckExists(Expression<Func<TEntity, Boolean>>, TKey)
  fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.CheckExists(System.Linq.Expressions.Expression<System.Func<TEntity, System.Boolean>>, TKey)
  nameWithType.vb: IRepository(Of TEntity, TKey).CheckExists(Expression(Of Func(Of TEntity, Boolean)), TKey)
  fullName.vb: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).CheckExists(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Boolean)), TKey)
  name.vb: CheckExists(Expression(Of Func(Of TEntity, Boolean)), TKey)
  spec.csharp:
  - uid: Hybrid.Domain.Repositories.IRepository`2.CheckExists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},`1)
    name: CheckExists
    nameWithType: IRepository<TEntity, TKey>.CheckExists
    fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.CheckExists
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Repositories.IRepository`2.CheckExists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},`1)
    name: CheckExists
    nameWithType: IRepository(Of TEntity, TKey).CheckExists
    fullName: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).CheckExists
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EntityFrameworkCore.Repository`2.Get*
  commentId: Overload:Hybrid.EntityFrameworkCore.Repository`2.Get
  name: Get
  nameWithType: Repository<TEntity, TKey>.Get
  fullName: Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>.Get
  nameWithType.vb: Repository(Of TEntity, TKey).Get
  fullName.vb: Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey).Get
- uid: Hybrid.Domain.Repositories.IRepository{{TEntity},{TKey}}.Get({TKey})
  commentId: M:Hybrid.Domain.Repositories.IRepository{`0,`1}.Get(`1)
  parent: Hybrid.Domain.Repositories.IRepository{{TEntity},{TKey}}
  definition: Hybrid.Domain.Repositories.IRepository`2.Get(`1)
  name: Get(TKey)
  nameWithType: IRepository<TEntity, TKey>.Get(TKey)
  fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.Get(TKey)
  nameWithType.vb: IRepository(Of TEntity, TKey).Get(TKey)
  fullName.vb: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).Get(TKey)
  spec.csharp:
  - uid: Hybrid.Domain.Repositories.IRepository`2.Get(`1)
    name: Get
    nameWithType: IRepository<TEntity, TKey>.Get
    fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.Get
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Repositories.IRepository`2.Get(`1)
    name: Get
    nameWithType: IRepository(Of TEntity, TKey).Get
    fullName: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).Get
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TEntity}'
  commentId: '!:TEntity'
  definition: TEntity
  name: TEntity
  nameWithType: TEntity
  fullName: TEntity
- uid: Hybrid.Domain.Repositories.IRepository`2.Get(`1)
  commentId: M:Hybrid.Domain.Repositories.IRepository`2.Get(`1)
  name: Get(TKey)
  nameWithType: IRepository<TEntity, TKey>.Get(TKey)
  fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.Get(TKey)
  nameWithType.vb: IRepository(Of TEntity, TKey).Get(TKey)
  fullName.vb: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).Get(TKey)
  spec.csharp:
  - uid: Hybrid.Domain.Repositories.IRepository`2.Get(`1)
    name: Get
    nameWithType: IRepository<TEntity, TKey>.Get
    fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.Get
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Repositories.IRepository`2.Get(`1)
    name: Get
    nameWithType: IRepository(Of TEntity, TKey).Get
    fullName: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).Get
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: TEntity
  name: TEntity
  nameWithType: TEntity
  fullName: TEntity
- uid: Hybrid.EntityFrameworkCore.Repository`2.GetFirst*
  commentId: Overload:Hybrid.EntityFrameworkCore.Repository`2.GetFirst
  name: GetFirst
  nameWithType: Repository<TEntity, TKey>.GetFirst
  fullName: Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>.GetFirst
  nameWithType.vb: Repository(Of TEntity, TKey).GetFirst
  fullName.vb: Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey).GetFirst
- uid: Hybrid.Domain.Repositories.IRepository{{TEntity},{TKey}}.GetFirst(System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}})
  commentId: M:Hybrid.Domain.Repositories.IRepository{`0,`1}.GetFirst(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  parent: Hybrid.Domain.Repositories.IRepository{{TEntity},{TKey}}
  definition: Hybrid.Domain.Repositories.IRepository`2.GetFirst(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  name: GetFirst(Expression<Func<TEntity, Boolean>>)
  nameWithType: IRepository<TEntity, TKey>.GetFirst(Expression<Func<TEntity, Boolean>>)
  fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.GetFirst(System.Linq.Expressions.Expression<System.Func<TEntity, System.Boolean>>)
  nameWithType.vb: IRepository(Of TEntity, TKey).GetFirst(Expression(Of Func(Of TEntity, Boolean)))
  fullName.vb: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).GetFirst(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Boolean)))
  name.vb: GetFirst(Expression(Of Func(Of TEntity, Boolean)))
  spec.csharp:
  - uid: Hybrid.Domain.Repositories.IRepository`2.GetFirst(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: GetFirst
    nameWithType: IRepository<TEntity, TKey>.GetFirst
    fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.GetFirst
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Repositories.IRepository`2.GetFirst(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: GetFirst
    nameWithType: IRepository(Of TEntity, TKey).GetFirst
    fullName: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).GetFirst
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Domain.Repositories.IRepository`2.GetFirst(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  commentId: M:Hybrid.Domain.Repositories.IRepository`2.GetFirst(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  isExternal: true
  name: GetFirst(Expression<Func<TEntity, Boolean>>)
  nameWithType: IRepository<TEntity, TKey>.GetFirst(Expression<Func<TEntity, Boolean>>)
  fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.GetFirst(System.Linq.Expressions.Expression<System.Func<TEntity, System.Boolean>>)
  nameWithType.vb: IRepository(Of TEntity, TKey).GetFirst(Expression(Of Func(Of TEntity, Boolean)))
  fullName.vb: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).GetFirst(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Boolean)))
  name.vb: GetFirst(Expression(Of Func(Of TEntity, Boolean)))
  spec.csharp:
  - uid: Hybrid.Domain.Repositories.IRepository`2.GetFirst(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: GetFirst
    nameWithType: IRepository<TEntity, TKey>.GetFirst
    fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.GetFirst
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Repositories.IRepository`2.GetFirst(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: GetFirst
    nameWithType: IRepository(Of TEntity, TKey).GetFirst
    fullName: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).GetFirst
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Domain.Repositories.IRepository{{TEntity},{TKey}}.GetFirst(System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}},System.Boolean)
  commentId: M:Hybrid.Domain.Repositories.IRepository{`0,`1}.GetFirst(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)
  parent: Hybrid.Domain.Repositories.IRepository{{TEntity},{TKey}}
  definition: Hybrid.Domain.Repositories.IRepository`2.GetFirst(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)
  name: GetFirst(Expression<Func<TEntity, Boolean>>, Boolean)
  nameWithType: IRepository<TEntity, TKey>.GetFirst(Expression<Func<TEntity, Boolean>>, Boolean)
  fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.GetFirst(System.Linq.Expressions.Expression<System.Func<TEntity, System.Boolean>>, System.Boolean)
  nameWithType.vb: IRepository(Of TEntity, TKey).GetFirst(Expression(Of Func(Of TEntity, Boolean)), Boolean)
  fullName.vb: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).GetFirst(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Boolean)), System.Boolean)
  name.vb: GetFirst(Expression(Of Func(Of TEntity, Boolean)), Boolean)
  spec.csharp:
  - uid: Hybrid.Domain.Repositories.IRepository`2.GetFirst(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)
    name: GetFirst
    nameWithType: IRepository<TEntity, TKey>.GetFirst
    fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.GetFirst
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Repositories.IRepository`2.GetFirst(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)
    name: GetFirst
    nameWithType: IRepository(Of TEntity, TKey).GetFirst
    fullName: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).GetFirst
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Domain.Repositories.IRepository`2.GetFirst(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)
  commentId: M:Hybrid.Domain.Repositories.IRepository`2.GetFirst(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)
  isExternal: true
  name: GetFirst(Expression<Func<TEntity, Boolean>>, Boolean)
  nameWithType: IRepository<TEntity, TKey>.GetFirst(Expression<Func<TEntity, Boolean>>, Boolean)
  fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.GetFirst(System.Linq.Expressions.Expression<System.Func<TEntity, System.Boolean>>, System.Boolean)
  nameWithType.vb: IRepository(Of TEntity, TKey).GetFirst(Expression(Of Func(Of TEntity, Boolean)), Boolean)
  fullName.vb: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).GetFirst(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Boolean)), System.Boolean)
  name.vb: GetFirst(Expression(Of Func(Of TEntity, Boolean)), Boolean)
  spec.csharp:
  - uid: Hybrid.Domain.Repositories.IRepository`2.GetFirst(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)
    name: GetFirst
    nameWithType: IRepository<TEntity, TKey>.GetFirst
    fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.GetFirst
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Repositories.IRepository`2.GetFirst(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)
    name: GetFirst
    nameWithType: IRepository(Of TEntity, TKey).GetFirst
    fullName: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).GetFirst
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EntityFrameworkCore.Repository`2.QueryAsNoTracking*
  commentId: Overload:Hybrid.EntityFrameworkCore.Repository`2.QueryAsNoTracking
  name: QueryAsNoTracking
  nameWithType: Repository<TEntity, TKey>.QueryAsNoTracking
  fullName: Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>.QueryAsNoTracking
  nameWithType.vb: Repository(Of TEntity, TKey).QueryAsNoTracking
  fullName.vb: Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey).QueryAsNoTracking
- uid: Hybrid.Domain.Repositories.IRepository{{TEntity},{TKey}}.QueryAsNoTracking
  commentId: M:Hybrid.Domain.Repositories.IRepository{`0,`1}.QueryAsNoTracking
  parent: Hybrid.Domain.Repositories.IRepository{{TEntity},{TKey}}
  definition: Hybrid.Domain.Repositories.IRepository`2.QueryAsNoTracking
  name: QueryAsNoTracking()
  nameWithType: IRepository<TEntity, TKey>.QueryAsNoTracking()
  fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.QueryAsNoTracking()
  nameWithType.vb: IRepository(Of TEntity, TKey).QueryAsNoTracking()
  fullName.vb: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).QueryAsNoTracking()
  spec.csharp:
  - uid: Hybrid.Domain.Repositories.IRepository`2.QueryAsNoTracking
    name: QueryAsNoTracking
    nameWithType: IRepository<TEntity, TKey>.QueryAsNoTracking
    fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.QueryAsNoTracking
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Repositories.IRepository`2.QueryAsNoTracking
    name: QueryAsNoTracking
    nameWithType: IRepository(Of TEntity, TKey).QueryAsNoTracking
    fullName: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).QueryAsNoTracking
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Domain.Repositories.IRepository`2.QueryAsNoTracking
  commentId: M:Hybrid.Domain.Repositories.IRepository`2.QueryAsNoTracking
  name: QueryAsNoTracking()
  nameWithType: IRepository<TEntity, TKey>.QueryAsNoTracking()
  fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.QueryAsNoTracking()
  nameWithType.vb: IRepository(Of TEntity, TKey).QueryAsNoTracking()
  fullName.vb: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).QueryAsNoTracking()
  spec.csharp:
  - uid: Hybrid.Domain.Repositories.IRepository`2.QueryAsNoTracking
    name: QueryAsNoTracking
    nameWithType: IRepository<TEntity, TKey>.QueryAsNoTracking
    fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.QueryAsNoTracking
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Repositories.IRepository`2.QueryAsNoTracking
    name: QueryAsNoTracking
    nameWithType: IRepository(Of TEntity, TKey).QueryAsNoTracking
    fullName: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).QueryAsNoTracking
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Domain.Repositories.IRepository{{TEntity},{TKey}}.QueryAsNoTracking(System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}})
  commentId: M:Hybrid.Domain.Repositories.IRepository{`0,`1}.QueryAsNoTracking(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  parent: Hybrid.Domain.Repositories.IRepository{{TEntity},{TKey}}
  definition: Hybrid.Domain.Repositories.IRepository`2.QueryAsNoTracking(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  name: QueryAsNoTracking(Expression<Func<TEntity, Boolean>>)
  nameWithType: IRepository<TEntity, TKey>.QueryAsNoTracking(Expression<Func<TEntity, Boolean>>)
  fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.QueryAsNoTracking(System.Linq.Expressions.Expression<System.Func<TEntity, System.Boolean>>)
  nameWithType.vb: IRepository(Of TEntity, TKey).QueryAsNoTracking(Expression(Of Func(Of TEntity, Boolean)))
  fullName.vb: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).QueryAsNoTracking(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Boolean)))
  name.vb: QueryAsNoTracking(Expression(Of Func(Of TEntity, Boolean)))
  spec.csharp:
  - uid: Hybrid.Domain.Repositories.IRepository`2.QueryAsNoTracking(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: QueryAsNoTracking
    nameWithType: IRepository<TEntity, TKey>.QueryAsNoTracking
    fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.QueryAsNoTracking
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Repositories.IRepository`2.QueryAsNoTracking(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: QueryAsNoTracking
    nameWithType: IRepository(Of TEntity, TKey).QueryAsNoTracking
    fullName: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).QueryAsNoTracking
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Domain.Repositories.IRepository`2.QueryAsNoTracking(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  commentId: M:Hybrid.Domain.Repositories.IRepository`2.QueryAsNoTracking(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  isExternal: true
  name: QueryAsNoTracking(Expression<Func<TEntity, Boolean>>)
  nameWithType: IRepository<TEntity, TKey>.QueryAsNoTracking(Expression<Func<TEntity, Boolean>>)
  fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.QueryAsNoTracking(System.Linq.Expressions.Expression<System.Func<TEntity, System.Boolean>>)
  nameWithType.vb: IRepository(Of TEntity, TKey).QueryAsNoTracking(Expression(Of Func(Of TEntity, Boolean)))
  fullName.vb: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).QueryAsNoTracking(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Boolean)))
  name.vb: QueryAsNoTracking(Expression(Of Func(Of TEntity, Boolean)))
  spec.csharp:
  - uid: Hybrid.Domain.Repositories.IRepository`2.QueryAsNoTracking(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: QueryAsNoTracking
    nameWithType: IRepository<TEntity, TKey>.QueryAsNoTracking
    fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.QueryAsNoTracking
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Repositories.IRepository`2.QueryAsNoTracking(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: QueryAsNoTracking
    nameWithType: IRepository(Of TEntity, TKey).QueryAsNoTracking
    fullName: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).QueryAsNoTracking
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Domain.Repositories.IRepository{{TEntity},{TKey}}.QueryAsNoTracking(System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}},System.Boolean)
  commentId: M:Hybrid.Domain.Repositories.IRepository{`0,`1}.QueryAsNoTracking(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)
  parent: Hybrid.Domain.Repositories.IRepository{{TEntity},{TKey}}
  definition: Hybrid.Domain.Repositories.IRepository`2.QueryAsNoTracking(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)
  name: QueryAsNoTracking(Expression<Func<TEntity, Boolean>>, Boolean)
  nameWithType: IRepository<TEntity, TKey>.QueryAsNoTracking(Expression<Func<TEntity, Boolean>>, Boolean)
  fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.QueryAsNoTracking(System.Linq.Expressions.Expression<System.Func<TEntity, System.Boolean>>, System.Boolean)
  nameWithType.vb: IRepository(Of TEntity, TKey).QueryAsNoTracking(Expression(Of Func(Of TEntity, Boolean)), Boolean)
  fullName.vb: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).QueryAsNoTracking(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Boolean)), System.Boolean)
  name.vb: QueryAsNoTracking(Expression(Of Func(Of TEntity, Boolean)), Boolean)
  spec.csharp:
  - uid: Hybrid.Domain.Repositories.IRepository`2.QueryAsNoTracking(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)
    name: QueryAsNoTracking
    nameWithType: IRepository<TEntity, TKey>.QueryAsNoTracking
    fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.QueryAsNoTracking
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Repositories.IRepository`2.QueryAsNoTracking(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)
    name: QueryAsNoTracking
    nameWithType: IRepository(Of TEntity, TKey).QueryAsNoTracking
    fullName: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).QueryAsNoTracking
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Domain.Repositories.IRepository`2.QueryAsNoTracking(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)
  commentId: M:Hybrid.Domain.Repositories.IRepository`2.QueryAsNoTracking(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)
  isExternal: true
  name: QueryAsNoTracking(Expression<Func<TEntity, Boolean>>, Boolean)
  nameWithType: IRepository<TEntity, TKey>.QueryAsNoTracking(Expression<Func<TEntity, Boolean>>, Boolean)
  fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.QueryAsNoTracking(System.Linq.Expressions.Expression<System.Func<TEntity, System.Boolean>>, System.Boolean)
  nameWithType.vb: IRepository(Of TEntity, TKey).QueryAsNoTracking(Expression(Of Func(Of TEntity, Boolean)), Boolean)
  fullName.vb: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).QueryAsNoTracking(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Boolean)), System.Boolean)
  name.vb: QueryAsNoTracking(Expression(Of Func(Of TEntity, Boolean)), Boolean)
  spec.csharp:
  - uid: Hybrid.Domain.Repositories.IRepository`2.QueryAsNoTracking(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)
    name: QueryAsNoTracking
    nameWithType: IRepository<TEntity, TKey>.QueryAsNoTracking
    fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.QueryAsNoTracking
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Repositories.IRepository`2.QueryAsNoTracking(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)
    name: QueryAsNoTracking
    nameWithType: IRepository(Of TEntity, TKey).QueryAsNoTracking
    fullName: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).QueryAsNoTracking
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Domain.Repositories.IRepository{{TEntity},{TKey}}.QueryAsNoTracking(System.Linq.Expressions.Expression{System.Func{{TEntity},System.Object}}[])
  commentId: M:Hybrid.Domain.Repositories.IRepository{`0,`1}.QueryAsNoTracking(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
  parent: Hybrid.Domain.Repositories.IRepository{{TEntity},{TKey}}
  definition: Hybrid.Domain.Repositories.IRepository`2.QueryAsNoTracking(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
  name: QueryAsNoTracking(Expression<Func<TEntity, Object>>[])
  nameWithType: IRepository<TEntity, TKey>.QueryAsNoTracking(Expression<Func<TEntity, Object>>[])
  fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.QueryAsNoTracking(System.Linq.Expressions.Expression<System.Func<TEntity, System.Object>>[])
  nameWithType.vb: IRepository(Of TEntity, TKey).QueryAsNoTracking(Expression(Of Func(Of TEntity, Object))())
  fullName.vb: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).QueryAsNoTracking(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Object))())
  name.vb: QueryAsNoTracking(Expression(Of Func(Of TEntity, Object))())
  spec.csharp:
  - uid: Hybrid.Domain.Repositories.IRepository`2.QueryAsNoTracking(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
    name: QueryAsNoTracking
    nameWithType: IRepository<TEntity, TKey>.QueryAsNoTracking
    fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.QueryAsNoTracking
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Repositories.IRepository`2.QueryAsNoTracking(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
    name: QueryAsNoTracking
    nameWithType: IRepository(Of TEntity, TKey).QueryAsNoTracking
    fullName: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).QueryAsNoTracking
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{TEntity},System.Object}}[]
  isExternal: true
  name: Expression<Func<TEntity, Object>>[]
  nameWithType: Expression<Func<TEntity, Object>>[]
  fullName: System.Linq.Expressions.Expression<System.Func<TEntity, System.Object>>[]
  nameWithType.vb: Expression(Of Func(Of TEntity, Object))()
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Object))()
  name.vb: Expression(Of Func(Of TEntity, Object))()
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Hybrid.Domain.Repositories.IRepository`2.QueryAsNoTracking(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
  commentId: M:Hybrid.Domain.Repositories.IRepository`2.QueryAsNoTracking(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
  isExternal: true
  name: QueryAsNoTracking(Expression<Func<TEntity, Object>>[])
  nameWithType: IRepository<TEntity, TKey>.QueryAsNoTracking(Expression<Func<TEntity, Object>>[])
  fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.QueryAsNoTracking(System.Linq.Expressions.Expression<System.Func<TEntity, System.Object>>[])
  nameWithType.vb: IRepository(Of TEntity, TKey).QueryAsNoTracking(Expression(Of Func(Of TEntity, Object))())
  fullName.vb: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).QueryAsNoTracking(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Object))())
  name.vb: QueryAsNoTracking(Expression(Of Func(Of TEntity, Object))())
  spec.csharp:
  - uid: Hybrid.Domain.Repositories.IRepository`2.QueryAsNoTracking(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
    name: QueryAsNoTracking
    nameWithType: IRepository<TEntity, TKey>.QueryAsNoTracking
    fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.QueryAsNoTracking
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Repositories.IRepository`2.QueryAsNoTracking(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
    name: QueryAsNoTracking
    nameWithType: IRepository(Of TEntity, TKey).QueryAsNoTracking
    fullName: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).QueryAsNoTracking
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EntityFrameworkCore.Repository`2.Query*
  commentId: Overload:Hybrid.EntityFrameworkCore.Repository`2.Query
  name: Query
  nameWithType: Repository<TEntity, TKey>.Query
  fullName: Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>.Query
  nameWithType.vb: Repository(Of TEntity, TKey).Query
  fullName.vb: Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey).Query
- uid: Hybrid.Domain.Repositories.IRepository{{TEntity},{TKey}}.Query
  commentId: M:Hybrid.Domain.Repositories.IRepository{`0,`1}.Query
  parent: Hybrid.Domain.Repositories.IRepository{{TEntity},{TKey}}
  definition: Hybrid.Domain.Repositories.IRepository`2.Query
  name: Query()
  nameWithType: IRepository<TEntity, TKey>.Query()
  fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.Query()
  nameWithType.vb: IRepository(Of TEntity, TKey).Query()
  fullName.vb: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).Query()
  spec.csharp:
  - uid: Hybrid.Domain.Repositories.IRepository`2.Query
    name: Query
    nameWithType: IRepository<TEntity, TKey>.Query
    fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.Query
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Repositories.IRepository`2.Query
    name: Query
    nameWithType: IRepository(Of TEntity, TKey).Query
    fullName: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).Query
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Domain.Repositories.IRepository`2.Query
  commentId: M:Hybrid.Domain.Repositories.IRepository`2.Query
  name: Query()
  nameWithType: IRepository<TEntity, TKey>.Query()
  fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.Query()
  nameWithType.vb: IRepository(Of TEntity, TKey).Query()
  fullName.vb: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).Query()
  spec.csharp:
  - uid: Hybrid.Domain.Repositories.IRepository`2.Query
    name: Query
    nameWithType: IRepository<TEntity, TKey>.Query
    fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.Query
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Repositories.IRepository`2.Query
    name: Query
    nameWithType: IRepository(Of TEntity, TKey).Query
    fullName: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).Query
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Domain.Repositories.IRepository{{TEntity},{TKey}}.Query(System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}})
  commentId: M:Hybrid.Domain.Repositories.IRepository{`0,`1}.Query(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  parent: Hybrid.Domain.Repositories.IRepository{{TEntity},{TKey}}
  definition: Hybrid.Domain.Repositories.IRepository`2.Query(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  name: Query(Expression<Func<TEntity, Boolean>>)
  nameWithType: IRepository<TEntity, TKey>.Query(Expression<Func<TEntity, Boolean>>)
  fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.Query(System.Linq.Expressions.Expression<System.Func<TEntity, System.Boolean>>)
  nameWithType.vb: IRepository(Of TEntity, TKey).Query(Expression(Of Func(Of TEntity, Boolean)))
  fullName.vb: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).Query(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Boolean)))
  name.vb: Query(Expression(Of Func(Of TEntity, Boolean)))
  spec.csharp:
  - uid: Hybrid.Domain.Repositories.IRepository`2.Query(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: Query
    nameWithType: IRepository<TEntity, TKey>.Query
    fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.Query
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Repositories.IRepository`2.Query(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: Query
    nameWithType: IRepository(Of TEntity, TKey).Query
    fullName: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).Query
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Domain.Repositories.IRepository`2.Query(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  commentId: M:Hybrid.Domain.Repositories.IRepository`2.Query(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  isExternal: true
  name: Query(Expression<Func<TEntity, Boolean>>)
  nameWithType: IRepository<TEntity, TKey>.Query(Expression<Func<TEntity, Boolean>>)
  fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.Query(System.Linq.Expressions.Expression<System.Func<TEntity, System.Boolean>>)
  nameWithType.vb: IRepository(Of TEntity, TKey).Query(Expression(Of Func(Of TEntity, Boolean)))
  fullName.vb: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).Query(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Boolean)))
  name.vb: Query(Expression(Of Func(Of TEntity, Boolean)))
  spec.csharp:
  - uid: Hybrid.Domain.Repositories.IRepository`2.Query(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: Query
    nameWithType: IRepository<TEntity, TKey>.Query
    fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.Query
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Repositories.IRepository`2.Query(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: Query
    nameWithType: IRepository(Of TEntity, TKey).Query
    fullName: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).Query
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Domain.Repositories.IRepository{{TEntity},{TKey}}.Query(System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}},System.Boolean)
  commentId: M:Hybrid.Domain.Repositories.IRepository{`0,`1}.Query(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)
  parent: Hybrid.Domain.Repositories.IRepository{{TEntity},{TKey}}
  definition: Hybrid.Domain.Repositories.IRepository`2.Query(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)
  name: Query(Expression<Func<TEntity, Boolean>>, Boolean)
  nameWithType: IRepository<TEntity, TKey>.Query(Expression<Func<TEntity, Boolean>>, Boolean)
  fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.Query(System.Linq.Expressions.Expression<System.Func<TEntity, System.Boolean>>, System.Boolean)
  nameWithType.vb: IRepository(Of TEntity, TKey).Query(Expression(Of Func(Of TEntity, Boolean)), Boolean)
  fullName.vb: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).Query(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Boolean)), System.Boolean)
  name.vb: Query(Expression(Of Func(Of TEntity, Boolean)), Boolean)
  spec.csharp:
  - uid: Hybrid.Domain.Repositories.IRepository`2.Query(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)
    name: Query
    nameWithType: IRepository<TEntity, TKey>.Query
    fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.Query
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Repositories.IRepository`2.Query(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)
    name: Query
    nameWithType: IRepository(Of TEntity, TKey).Query
    fullName: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).Query
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Domain.Repositories.IRepository`2.Query(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)
  commentId: M:Hybrid.Domain.Repositories.IRepository`2.Query(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)
  isExternal: true
  name: Query(Expression<Func<TEntity, Boolean>>, Boolean)
  nameWithType: IRepository<TEntity, TKey>.Query(Expression<Func<TEntity, Boolean>>, Boolean)
  fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.Query(System.Linq.Expressions.Expression<System.Func<TEntity, System.Boolean>>, System.Boolean)
  nameWithType.vb: IRepository(Of TEntity, TKey).Query(Expression(Of Func(Of TEntity, Boolean)), Boolean)
  fullName.vb: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).Query(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Boolean)), System.Boolean)
  name.vb: Query(Expression(Of Func(Of TEntity, Boolean)), Boolean)
  spec.csharp:
  - uid: Hybrid.Domain.Repositories.IRepository`2.Query(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)
    name: Query
    nameWithType: IRepository<TEntity, TKey>.Query
    fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.Query
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Repositories.IRepository`2.Query(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)
    name: Query
    nameWithType: IRepository(Of TEntity, TKey).Query
    fullName: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).Query
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Domain.Repositories.IRepository{{TEntity},{TKey}}.Query(System.Linq.Expressions.Expression{System.Func{{TEntity},System.Object}}[])
  commentId: M:Hybrid.Domain.Repositories.IRepository{`0,`1}.Query(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
  parent: Hybrid.Domain.Repositories.IRepository{{TEntity},{TKey}}
  definition: Hybrid.Domain.Repositories.IRepository`2.Query(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
  name: Query(Expression<Func<TEntity, Object>>[])
  nameWithType: IRepository<TEntity, TKey>.Query(Expression<Func<TEntity, Object>>[])
  fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.Query(System.Linq.Expressions.Expression<System.Func<TEntity, System.Object>>[])
  nameWithType.vb: IRepository(Of TEntity, TKey).Query(Expression(Of Func(Of TEntity, Object))())
  fullName.vb: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).Query(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Object))())
  name.vb: Query(Expression(Of Func(Of TEntity, Object))())
  spec.csharp:
  - uid: Hybrid.Domain.Repositories.IRepository`2.Query(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
    name: Query
    nameWithType: IRepository<TEntity, TKey>.Query
    fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.Query
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Repositories.IRepository`2.Query(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
    name: Query
    nameWithType: IRepository(Of TEntity, TKey).Query
    fullName: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).Query
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Domain.Repositories.IRepository`2.Query(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
  commentId: M:Hybrid.Domain.Repositories.IRepository`2.Query(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
  isExternal: true
  name: Query(Expression<Func<TEntity, Object>>[])
  nameWithType: IRepository<TEntity, TKey>.Query(Expression<Func<TEntity, Object>>[])
  fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.Query(System.Linq.Expressions.Expression<System.Func<TEntity, System.Object>>[])
  nameWithType.vb: IRepository(Of TEntity, TKey).Query(Expression(Of Func(Of TEntity, Object))())
  fullName.vb: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).Query(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Object))())
  name.vb: Query(Expression(Of Func(Of TEntity, Object))())
  spec.csharp:
  - uid: Hybrid.Domain.Repositories.IRepository`2.Query(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
    name: Query
    nameWithType: IRepository<TEntity, TKey>.Query
    fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.Query
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Repositories.IRepository`2.Query(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
    name: Query
    nameWithType: IRepository(Of TEntity, TKey).Query
    fullName: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).Query
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EntityFrameworkCore.Repository`2.InsertAsync*
  commentId: Overload:Hybrid.EntityFrameworkCore.Repository`2.InsertAsync
  name: InsertAsync
  nameWithType: Repository<TEntity, TKey>.InsertAsync
  fullName: Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>.InsertAsync
  nameWithType.vb: Repository(Of TEntity, TKey).InsertAsync
  fullName.vb: Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey).InsertAsync
- uid: Hybrid.Domain.Repositories.IRepository{{TEntity},{TKey}}.InsertAsync({TEntity}[])
  commentId: M:Hybrid.Domain.Repositories.IRepository{`0,`1}.InsertAsync(`0[])
  parent: Hybrid.Domain.Repositories.IRepository{{TEntity},{TKey}}
  definition: Hybrid.Domain.Repositories.IRepository`2.InsertAsync(`0[])
  name: InsertAsync(TEntity[])
  nameWithType: IRepository<TEntity, TKey>.InsertAsync(TEntity[])
  fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.InsertAsync(TEntity[])
  nameWithType.vb: IRepository(Of TEntity, TKey).InsertAsync(TEntity())
  fullName.vb: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).InsertAsync(TEntity())
  name.vb: InsertAsync(TEntity())
  spec.csharp:
  - uid: Hybrid.Domain.Repositories.IRepository`2.InsertAsync(`0[])
    name: InsertAsync
    nameWithType: IRepository<TEntity, TKey>.InsertAsync
    fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.InsertAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Repositories.IRepository`2.InsertAsync(`0[])
    name: InsertAsync
    nameWithType: IRepository(Of TEntity, TKey).InsertAsync
    fullName: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).InsertAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.Int32}
  commentId: T:System.Threading.Tasks.Task{System.Int32}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Int32>
  nameWithType: Task<Int32>
  fullName: System.Threading.Tasks.Task<System.Int32>
  nameWithType.vb: Task(Of Int32)
  fullName.vb: System.Threading.Tasks.Task(Of System.Int32)
  name.vb: Task(Of Int32)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Domain.Repositories.IRepository`2.InsertAsync(`0[])
  commentId: M:Hybrid.Domain.Repositories.IRepository`2.InsertAsync(`0[])
  name: InsertAsync(TEntity[])
  nameWithType: IRepository<TEntity, TKey>.InsertAsync(TEntity[])
  fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.InsertAsync(TEntity[])
  nameWithType.vb: IRepository(Of TEntity, TKey).InsertAsync(TEntity())
  fullName.vb: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).InsertAsync(TEntity())
  name.vb: InsertAsync(TEntity())
  spec.csharp:
  - uid: Hybrid.Domain.Repositories.IRepository`2.InsertAsync(`0[])
    name: InsertAsync
    nameWithType: IRepository<TEntity, TKey>.InsertAsync
    fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.InsertAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Repositories.IRepository`2.InsertAsync(`0[])
    name: InsertAsync
    nameWithType: IRepository(Of TEntity, TKey).InsertAsync
    fullName: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).InsertAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Hybrid.EntityFrameworkCore.Repository`2.InsertOrUpdateAsync*
  commentId: Overload:Hybrid.EntityFrameworkCore.Repository`2.InsertOrUpdateAsync
  name: InsertOrUpdateAsync
  nameWithType: Repository<TEntity, TKey>.InsertOrUpdateAsync
  fullName: Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>.InsertOrUpdateAsync
  nameWithType.vb: Repository(Of TEntity, TKey).InsertOrUpdateAsync
  fullName.vb: Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey).InsertOrUpdateAsync
- uid: Hybrid.Domain.Repositories.IRepository{{TEntity},{TKey}}.InsertAsync``1(System.Collections.Generic.ICollection{{TInputDto}},System.Func{{TInputDto},System.Threading.Tasks.Task},System.Func{{TInputDto},{TEntity},System.Threading.Tasks.Task{{TEntity}}})
  commentId: M:Hybrid.Domain.Repositories.IRepository{`0,`1}.InsertAsync``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Threading.Tasks.Task},System.Func{``0,`0,System.Threading.Tasks.Task{`0}})
  parent: Hybrid.Domain.Repositories.IRepository{{TEntity},{TKey}}
  definition: Hybrid.Domain.Repositories.IRepository`2.InsertAsync``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Threading.Tasks.Task},System.Func{``0,`0,System.Threading.Tasks.Task{`0}})
  name: InsertAsync<TInputDto>(ICollection<TInputDto>, Func<TInputDto, Task>, Func<TInputDto, TEntity, Task<TEntity>>)
  nameWithType: IRepository<TEntity, TKey>.InsertAsync<TInputDto>(ICollection<TInputDto>, Func<TInputDto, Task>, Func<TInputDto, TEntity, Task<TEntity>>)
  fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.InsertAsync<TInputDto>(System.Collections.Generic.ICollection<TInputDto>, System.Func<TInputDto, System.Threading.Tasks.Task>, System.Func<TInputDto, TEntity, System.Threading.Tasks.Task<TEntity>>)
  nameWithType.vb: IRepository(Of TEntity, TKey).InsertAsync(Of TInputDto)(ICollection(Of TInputDto), Func(Of TInputDto, Task), Func(Of TInputDto, TEntity, Task(Of TEntity)))
  fullName.vb: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).InsertAsync(Of TInputDto)(System.Collections.Generic.ICollection(Of TInputDto), System.Func(Of TInputDto, System.Threading.Tasks.Task), System.Func(Of TInputDto, TEntity, System.Threading.Tasks.Task(Of TEntity)))
  name.vb: InsertAsync(Of TInputDto)(ICollection(Of TInputDto), Func(Of TInputDto, Task), Func(Of TInputDto, TEntity, Task(Of TEntity)))
  spec.csharp:
  - uid: Hybrid.Domain.Repositories.IRepository`2.InsertAsync``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Threading.Tasks.Task},System.Func{``0,`0,System.Threading.Tasks.Task{`0}})
    name: InsertAsync<TInputDto>
    nameWithType: IRepository<TEntity, TKey>.InsertAsync<TInputDto>
    fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.InsertAsync<TInputDto>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInputDto
    nameWithType: TInputDto
    fullName: TInputDto
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInputDto
    nameWithType: TInputDto
    fullName: TInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInputDto
    nameWithType: TInputDto
    fullName: TInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Repositories.IRepository`2.InsertAsync``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Threading.Tasks.Task},System.Func{``0,`0,System.Threading.Tasks.Task{`0}})
    name: InsertAsync(Of TInputDto)
    nameWithType: IRepository(Of TEntity, TKey).InsertAsync(Of TInputDto)
    fullName: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).InsertAsync(Of TInputDto)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInputDto
    nameWithType: TInputDto
    fullName: TInputDto
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInputDto
    nameWithType: TInputDto
    fullName: TInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInputDto
    nameWithType: TInputDto
    fullName: TInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TInputDto},System.Threading.Tasks.Task}
  commentId: T:System.Func{``0,System.Threading.Tasks.Task}
  parent: System
  definition: System.Func`2
  name: Func<TInputDto, Task>
  nameWithType: Func<TInputDto, Task>
  fullName: System.Func<TInputDto, System.Threading.Tasks.Task>
  nameWithType.vb: Func(Of TInputDto, Task)
  fullName.vb: System.Func(Of TInputDto, System.Threading.Tasks.Task)
  name.vb: Func(Of TInputDto, Task)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInputDto
    nameWithType: TInputDto
    fullName: TInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInputDto
    nameWithType: TInputDto
    fullName: TInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TInputDto},{TEntity},System.Threading.Tasks.Task{{TEntity}}}
  commentId: T:System.Func{``0,`0,System.Threading.Tasks.Task{`0}}
  parent: System
  definition: System.Func`3
  name: Func<TInputDto, TEntity, Task<TEntity>>
  nameWithType: Func<TInputDto, TEntity, Task<TEntity>>
  fullName: System.Func<TInputDto, TEntity, System.Threading.Tasks.Task<TEntity>>
  nameWithType.vb: Func(Of TInputDto, TEntity, Task(Of TEntity))
  fullName.vb: System.Func(Of TInputDto, TEntity, System.Threading.Tasks.Task(Of TEntity))
  name.vb: Func(Of TInputDto, TEntity, Task(Of TEntity))
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInputDto
    nameWithType: TInputDto
    fullName: TInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInputDto
    nameWithType: TInputDto
    fullName: TInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{Hybrid.Data.OperationResult}
  commentId: T:System.Threading.Tasks.Task{Hybrid.Data.OperationResult}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<OperationResult>
  nameWithType: Task<OperationResult>
  fullName: System.Threading.Tasks.Task<Hybrid.Data.OperationResult>
  nameWithType.vb: Task(Of OperationResult)
  fullName.vb: System.Threading.Tasks.Task(Of Hybrid.Data.OperationResult)
  name.vb: Task(Of OperationResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Hybrid.Data.OperationResult
    name: OperationResult
    nameWithType: OperationResult
    fullName: Hybrid.Data.OperationResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Hybrid.Data.OperationResult
    name: OperationResult
    nameWithType: OperationResult
    fullName: Hybrid.Data.OperationResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Domain.Repositories.IRepository`2.InsertAsync``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Threading.Tasks.Task},System.Func{``0,`0,System.Threading.Tasks.Task{`0}})
  commentId: M:Hybrid.Domain.Repositories.IRepository`2.InsertAsync``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Threading.Tasks.Task},System.Func{``0,`0,System.Threading.Tasks.Task{`0}})
  isExternal: true
  name: InsertAsync<TInputDto>(ICollection<TInputDto>, Func<TInputDto, Task>, Func<TInputDto, TEntity, Task<TEntity>>)
  nameWithType: IRepository<TEntity, TKey>.InsertAsync<TInputDto>(ICollection<TInputDto>, Func<TInputDto, Task>, Func<TInputDto, TEntity, Task<TEntity>>)
  fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.InsertAsync<TInputDto>(System.Collections.Generic.ICollection<TInputDto>, System.Func<TInputDto, System.Threading.Tasks.Task>, System.Func<TInputDto, TEntity, System.Threading.Tasks.Task<TEntity>>)
  nameWithType.vb: IRepository(Of TEntity, TKey).InsertAsync(Of TInputDto)(ICollection(Of TInputDto), Func(Of TInputDto, Task), Func(Of TInputDto, TEntity, Task(Of TEntity)))
  fullName.vb: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).InsertAsync(Of TInputDto)(System.Collections.Generic.ICollection(Of TInputDto), System.Func(Of TInputDto, System.Threading.Tasks.Task), System.Func(Of TInputDto, TEntity, System.Threading.Tasks.Task(Of TEntity)))
  name.vb: InsertAsync(Of TInputDto)(ICollection(Of TInputDto), Func(Of TInputDto, Task), Func(Of TInputDto, TEntity, Task(Of TEntity)))
  spec.csharp:
  - uid: Hybrid.Domain.Repositories.IRepository`2.InsertAsync``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Threading.Tasks.Task},System.Func{``0,`0,System.Threading.Tasks.Task{`0}})
    name: InsertAsync<TInputDto>
    nameWithType: IRepository<TEntity, TKey>.InsertAsync<TInputDto>
    fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.InsertAsync<TInputDto>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInputDto
    nameWithType: TInputDto
    fullName: TInputDto
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInputDto
    nameWithType: TInputDto
    fullName: TInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInputDto
    nameWithType: TInputDto
    fullName: TInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Repositories.IRepository`2.InsertAsync``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Threading.Tasks.Task},System.Func{``0,`0,System.Threading.Tasks.Task{`0}})
    name: InsertAsync(Of TInputDto)
    nameWithType: IRepository(Of TEntity, TKey).InsertAsync(Of TInputDto)
    fullName: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).InsertAsync(Of TInputDto)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInputDto
    nameWithType: TInputDto
    fullName: TInputDto
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInputDto
    nameWithType: TInputDto
    fullName: TInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInputDto
    nameWithType: TInputDto
    fullName: TInputDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EntityFrameworkCore.Repository`2.DeleteAsync*
  commentId: Overload:Hybrid.EntityFrameworkCore.Repository`2.DeleteAsync
  name: DeleteAsync
  nameWithType: Repository<TEntity, TKey>.DeleteAsync
  fullName: Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>.DeleteAsync
  nameWithType.vb: Repository(Of TEntity, TKey).DeleteAsync
  fullName.vb: Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey).DeleteAsync
- uid: Hybrid.Domain.Repositories.IRepository{{TEntity},{TKey}}.DeleteAsync({TEntity}[])
  commentId: M:Hybrid.Domain.Repositories.IRepository{`0,`1}.DeleteAsync(`0[])
  parent: Hybrid.Domain.Repositories.IRepository{{TEntity},{TKey}}
  definition: Hybrid.Domain.Repositories.IRepository`2.DeleteAsync(`0[])
  name: DeleteAsync(TEntity[])
  nameWithType: IRepository<TEntity, TKey>.DeleteAsync(TEntity[])
  fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.DeleteAsync(TEntity[])
  nameWithType.vb: IRepository(Of TEntity, TKey).DeleteAsync(TEntity())
  fullName.vb: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).DeleteAsync(TEntity())
  name.vb: DeleteAsync(TEntity())
  spec.csharp:
  - uid: Hybrid.Domain.Repositories.IRepository`2.DeleteAsync(`0[])
    name: DeleteAsync
    nameWithType: IRepository<TEntity, TKey>.DeleteAsync
    fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.DeleteAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Repositories.IRepository`2.DeleteAsync(`0[])
    name: DeleteAsync
    nameWithType: IRepository(Of TEntity, TKey).DeleteAsync
    fullName: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).DeleteAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Domain.Repositories.IRepository`2.DeleteAsync(`0[])
  commentId: M:Hybrid.Domain.Repositories.IRepository`2.DeleteAsync(`0[])
  name: DeleteAsync(TEntity[])
  nameWithType: IRepository<TEntity, TKey>.DeleteAsync(TEntity[])
  fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.DeleteAsync(TEntity[])
  nameWithType.vb: IRepository(Of TEntity, TKey).DeleteAsync(TEntity())
  fullName.vb: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).DeleteAsync(TEntity())
  name.vb: DeleteAsync(TEntity())
  spec.csharp:
  - uid: Hybrid.Domain.Repositories.IRepository`2.DeleteAsync(`0[])
    name: DeleteAsync
    nameWithType: IRepository<TEntity, TKey>.DeleteAsync
    fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.DeleteAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Repositories.IRepository`2.DeleteAsync(`0[])
    name: DeleteAsync
    nameWithType: IRepository(Of TEntity, TKey).DeleteAsync
    fullName: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).DeleteAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Domain.Repositories.IRepository{{TEntity},{TKey}}.DeleteAsync({TKey})
  commentId: M:Hybrid.Domain.Repositories.IRepository{`0,`1}.DeleteAsync(`1)
  parent: Hybrid.Domain.Repositories.IRepository{{TEntity},{TKey}}
  definition: Hybrid.Domain.Repositories.IRepository`2.DeleteAsync(`1)
  name: DeleteAsync(TKey)
  nameWithType: IRepository<TEntity, TKey>.DeleteAsync(TKey)
  fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.DeleteAsync(TKey)
  nameWithType.vb: IRepository(Of TEntity, TKey).DeleteAsync(TKey)
  fullName.vb: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).DeleteAsync(TKey)
  spec.csharp:
  - uid: Hybrid.Domain.Repositories.IRepository`2.DeleteAsync(`1)
    name: DeleteAsync
    nameWithType: IRepository<TEntity, TKey>.DeleteAsync
    fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.DeleteAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Repositories.IRepository`2.DeleteAsync(`1)
    name: DeleteAsync
    nameWithType: IRepository(Of TEntity, TKey).DeleteAsync
    fullName: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).DeleteAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Domain.Repositories.IRepository`2.DeleteAsync(`1)
  commentId: M:Hybrid.Domain.Repositories.IRepository`2.DeleteAsync(`1)
  name: DeleteAsync(TKey)
  nameWithType: IRepository<TEntity, TKey>.DeleteAsync(TKey)
  fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.DeleteAsync(TKey)
  nameWithType.vb: IRepository(Of TEntity, TKey).DeleteAsync(TKey)
  fullName.vb: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).DeleteAsync(TKey)
  spec.csharp:
  - uid: Hybrid.Domain.Repositories.IRepository`2.DeleteAsync(`1)
    name: DeleteAsync
    nameWithType: IRepository<TEntity, TKey>.DeleteAsync
    fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.DeleteAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Repositories.IRepository`2.DeleteAsync(`1)
    name: DeleteAsync
    nameWithType: IRepository(Of TEntity, TKey).DeleteAsync
    fullName: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).DeleteAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Domain.Repositories.IRepository{{TEntity},{TKey}}.DeleteAsync(System.Collections.Generic.ICollection{{TKey}},System.Func{{TEntity},System.Threading.Tasks.Task},System.Func{{TEntity},System.Threading.Tasks.Task{{TEntity}}})
  commentId: M:Hybrid.Domain.Repositories.IRepository{`0,`1}.DeleteAsync(System.Collections.Generic.ICollection{`1},System.Func{`0,System.Threading.Tasks.Task},System.Func{`0,System.Threading.Tasks.Task{`0}})
  parent: Hybrid.Domain.Repositories.IRepository{{TEntity},{TKey}}
  definition: Hybrid.Domain.Repositories.IRepository`2.DeleteAsync(System.Collections.Generic.ICollection{`1},System.Func{`0,System.Threading.Tasks.Task},System.Func{`0,System.Threading.Tasks.Task{`0}})
  name: DeleteAsync(ICollection<TKey>, Func<TEntity, Task>, Func<TEntity, Task<TEntity>>)
  nameWithType: IRepository<TEntity, TKey>.DeleteAsync(ICollection<TKey>, Func<TEntity, Task>, Func<TEntity, Task<TEntity>>)
  fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.DeleteAsync(System.Collections.Generic.ICollection<TKey>, System.Func<TEntity, System.Threading.Tasks.Task>, System.Func<TEntity, System.Threading.Tasks.Task<TEntity>>)
  nameWithType.vb: IRepository(Of TEntity, TKey).DeleteAsync(ICollection(Of TKey), Func(Of TEntity, Task), Func(Of TEntity, Task(Of TEntity)))
  fullName.vb: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).DeleteAsync(System.Collections.Generic.ICollection(Of TKey), System.Func(Of TEntity, System.Threading.Tasks.Task), System.Func(Of TEntity, System.Threading.Tasks.Task(Of TEntity)))
  name.vb: DeleteAsync(ICollection(Of TKey), Func(Of TEntity, Task), Func(Of TEntity, Task(Of TEntity)))
  spec.csharp:
  - uid: Hybrid.Domain.Repositories.IRepository`2.DeleteAsync(System.Collections.Generic.ICollection{`1},System.Func{`0,System.Threading.Tasks.Task},System.Func{`0,System.Threading.Tasks.Task{`0}})
    name: DeleteAsync
    nameWithType: IRepository<TEntity, TKey>.DeleteAsync
    fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.DeleteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Repositories.IRepository`2.DeleteAsync(System.Collections.Generic.ICollection{`1},System.Func{`0,System.Threading.Tasks.Task},System.Func{`0,System.Threading.Tasks.Task{`0}})
    name: DeleteAsync
    nameWithType: IRepository(Of TEntity, TKey).DeleteAsync
    fullName: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).DeleteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TEntity},System.Threading.Tasks.Task}
  commentId: T:System.Func{`0,System.Threading.Tasks.Task}
  parent: System
  definition: System.Func`2
  name: Func<TEntity, Task>
  nameWithType: Func<TEntity, Task>
  fullName: System.Func<TEntity, System.Threading.Tasks.Task>
  nameWithType.vb: Func(Of TEntity, Task)
  fullName.vb: System.Func(Of TEntity, System.Threading.Tasks.Task)
  name.vb: Func(Of TEntity, Task)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TEntity},System.Threading.Tasks.Task{{TEntity}}}
  commentId: T:System.Func{`0,System.Threading.Tasks.Task{`0}}
  parent: System
  definition: System.Func`2
  name: Func<TEntity, Task<TEntity>>
  nameWithType: Func<TEntity, Task<TEntity>>
  fullName: System.Func<TEntity, System.Threading.Tasks.Task<TEntity>>
  nameWithType.vb: Func(Of TEntity, Task(Of TEntity))
  fullName.vb: System.Func(Of TEntity, System.Threading.Tasks.Task(Of TEntity))
  name.vb: Func(Of TEntity, Task(Of TEntity))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Domain.Repositories.IRepository`2.DeleteAsync(System.Collections.Generic.ICollection{`1},System.Func{`0,System.Threading.Tasks.Task},System.Func{`0,System.Threading.Tasks.Task{`0}})
  commentId: M:Hybrid.Domain.Repositories.IRepository`2.DeleteAsync(System.Collections.Generic.ICollection{`1},System.Func{`0,System.Threading.Tasks.Task},System.Func{`0,System.Threading.Tasks.Task{`0}})
  isExternal: true
  name: DeleteAsync(ICollection<TKey>, Func<TEntity, Task>, Func<TEntity, Task<TEntity>>)
  nameWithType: IRepository<TEntity, TKey>.DeleteAsync(ICollection<TKey>, Func<TEntity, Task>, Func<TEntity, Task<TEntity>>)
  fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.DeleteAsync(System.Collections.Generic.ICollection<TKey>, System.Func<TEntity, System.Threading.Tasks.Task>, System.Func<TEntity, System.Threading.Tasks.Task<TEntity>>)
  nameWithType.vb: IRepository(Of TEntity, TKey).DeleteAsync(ICollection(Of TKey), Func(Of TEntity, Task), Func(Of TEntity, Task(Of TEntity)))
  fullName.vb: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).DeleteAsync(System.Collections.Generic.ICollection(Of TKey), System.Func(Of TEntity, System.Threading.Tasks.Task), System.Func(Of TEntity, System.Threading.Tasks.Task(Of TEntity)))
  name.vb: DeleteAsync(ICollection(Of TKey), Func(Of TEntity, Task), Func(Of TEntity, Task(Of TEntity)))
  spec.csharp:
  - uid: Hybrid.Domain.Repositories.IRepository`2.DeleteAsync(System.Collections.Generic.ICollection{`1},System.Func{`0,System.Threading.Tasks.Task},System.Func{`0,System.Threading.Tasks.Task{`0}})
    name: DeleteAsync
    nameWithType: IRepository<TEntity, TKey>.DeleteAsync
    fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.DeleteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Repositories.IRepository`2.DeleteAsync(System.Collections.Generic.ICollection{`1},System.Func{`0,System.Threading.Tasks.Task},System.Func{`0,System.Threading.Tasks.Task{`0}})
    name: DeleteAsync
    nameWithType: IRepository(Of TEntity, TKey).DeleteAsync
    fullName: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).DeleteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EntityFrameworkCore.Repository`2.DeleteBatchAsync*
  commentId: Overload:Hybrid.EntityFrameworkCore.Repository`2.DeleteBatchAsync
  name: DeleteBatchAsync
  nameWithType: Repository<TEntity, TKey>.DeleteBatchAsync
  fullName: Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>.DeleteBatchAsync
  nameWithType.vb: Repository(Of TEntity, TKey).DeleteBatchAsync
  fullName.vb: Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey).DeleteBatchAsync
- uid: Hybrid.Domain.Repositories.IRepository{{TEntity},{TKey}}.DeleteBatchAsync(System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}})
  commentId: M:Hybrid.Domain.Repositories.IRepository{`0,`1}.DeleteBatchAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  parent: Hybrid.Domain.Repositories.IRepository{{TEntity},{TKey}}
  definition: Hybrid.Domain.Repositories.IRepository`2.DeleteBatchAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  name: DeleteBatchAsync(Expression<Func<TEntity, Boolean>>)
  nameWithType: IRepository<TEntity, TKey>.DeleteBatchAsync(Expression<Func<TEntity, Boolean>>)
  fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.DeleteBatchAsync(System.Linq.Expressions.Expression<System.Func<TEntity, System.Boolean>>)
  nameWithType.vb: IRepository(Of TEntity, TKey).DeleteBatchAsync(Expression(Of Func(Of TEntity, Boolean)))
  fullName.vb: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).DeleteBatchAsync(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Boolean)))
  name.vb: DeleteBatchAsync(Expression(Of Func(Of TEntity, Boolean)))
  spec.csharp:
  - uid: Hybrid.Domain.Repositories.IRepository`2.DeleteBatchAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: DeleteBatchAsync
    nameWithType: IRepository<TEntity, TKey>.DeleteBatchAsync
    fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.DeleteBatchAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Repositories.IRepository`2.DeleteBatchAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: DeleteBatchAsync
    nameWithType: IRepository(Of TEntity, TKey).DeleteBatchAsync
    fullName: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).DeleteBatchAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Domain.Repositories.IRepository`2.DeleteBatchAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  commentId: M:Hybrid.Domain.Repositories.IRepository`2.DeleteBatchAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  isExternal: true
  name: DeleteBatchAsync(Expression<Func<TEntity, Boolean>>)
  nameWithType: IRepository<TEntity, TKey>.DeleteBatchAsync(Expression<Func<TEntity, Boolean>>)
  fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.DeleteBatchAsync(System.Linq.Expressions.Expression<System.Func<TEntity, System.Boolean>>)
  nameWithType.vb: IRepository(Of TEntity, TKey).DeleteBatchAsync(Expression(Of Func(Of TEntity, Boolean)))
  fullName.vb: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).DeleteBatchAsync(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Boolean)))
  name.vb: DeleteBatchAsync(Expression(Of Func(Of TEntity, Boolean)))
  spec.csharp:
  - uid: Hybrid.Domain.Repositories.IRepository`2.DeleteBatchAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: DeleteBatchAsync
    nameWithType: IRepository<TEntity, TKey>.DeleteBatchAsync
    fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.DeleteBatchAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Repositories.IRepository`2.DeleteBatchAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: DeleteBatchAsync
    nameWithType: IRepository(Of TEntity, TKey).DeleteBatchAsync
    fullName: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).DeleteBatchAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EntityFrameworkCore.Repository`2.UpdateAsync*
  commentId: Overload:Hybrid.EntityFrameworkCore.Repository`2.UpdateAsync
  name: UpdateAsync
  nameWithType: Repository<TEntity, TKey>.UpdateAsync
  fullName: Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>.UpdateAsync
  nameWithType.vb: Repository(Of TEntity, TKey).UpdateAsync
  fullName.vb: Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey).UpdateAsync
- uid: Hybrid.Domain.Repositories.IRepository{{TEntity},{TKey}}.UpdateAsync({TEntity}[])
  commentId: M:Hybrid.Domain.Repositories.IRepository{`0,`1}.UpdateAsync(`0[])
  parent: Hybrid.Domain.Repositories.IRepository{{TEntity},{TKey}}
  definition: Hybrid.Domain.Repositories.IRepository`2.UpdateAsync(`0[])
  name: UpdateAsync(TEntity[])
  nameWithType: IRepository<TEntity, TKey>.UpdateAsync(TEntity[])
  fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.UpdateAsync(TEntity[])
  nameWithType.vb: IRepository(Of TEntity, TKey).UpdateAsync(TEntity())
  fullName.vb: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).UpdateAsync(TEntity())
  name.vb: UpdateAsync(TEntity())
  spec.csharp:
  - uid: Hybrid.Domain.Repositories.IRepository`2.UpdateAsync(`0[])
    name: UpdateAsync
    nameWithType: IRepository<TEntity, TKey>.UpdateAsync
    fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.UpdateAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Repositories.IRepository`2.UpdateAsync(`0[])
    name: UpdateAsync
    nameWithType: IRepository(Of TEntity, TKey).UpdateAsync
    fullName: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).UpdateAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Domain.Repositories.IRepository`2.UpdateAsync(`0[])
  commentId: M:Hybrid.Domain.Repositories.IRepository`2.UpdateAsync(`0[])
  name: UpdateAsync(TEntity[])
  nameWithType: IRepository<TEntity, TKey>.UpdateAsync(TEntity[])
  fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.UpdateAsync(TEntity[])
  nameWithType.vb: IRepository(Of TEntity, TKey).UpdateAsync(TEntity())
  fullName.vb: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).UpdateAsync(TEntity())
  name.vb: UpdateAsync(TEntity())
  spec.csharp:
  - uid: Hybrid.Domain.Repositories.IRepository`2.UpdateAsync(`0[])
    name: UpdateAsync
    nameWithType: IRepository<TEntity, TKey>.UpdateAsync
    fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.UpdateAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Repositories.IRepository`2.UpdateAsync(`0[])
    name: UpdateAsync
    nameWithType: IRepository(Of TEntity, TKey).UpdateAsync
    fullName: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).UpdateAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Domain.Repositories.IRepository{{TEntity},{TKey}}.UpdateAsync``1(System.Collections.Generic.ICollection{{TEditDto}},System.Func{{TEditDto},{TEntity},System.Threading.Tasks.Task},System.Func{{TEditDto},{TEntity},System.Threading.Tasks.Task{{TEntity}}})
  commentId: M:Hybrid.Domain.Repositories.IRepository{`0,`1}.UpdateAsync``1(System.Collections.Generic.ICollection{``0},System.Func{``0,`0,System.Threading.Tasks.Task},System.Func{``0,`0,System.Threading.Tasks.Task{`0}})
  parent: Hybrid.Domain.Repositories.IRepository{{TEntity},{TKey}}
  definition: Hybrid.Domain.Repositories.IRepository`2.UpdateAsync``1(System.Collections.Generic.ICollection{``0},System.Func{``0,`0,System.Threading.Tasks.Task},System.Func{``0,`0,System.Threading.Tasks.Task{`0}})
  name: UpdateAsync<TEditDto>(ICollection<TEditDto>, Func<TEditDto, TEntity, Task>, Func<TEditDto, TEntity, Task<TEntity>>)
  nameWithType: IRepository<TEntity, TKey>.UpdateAsync<TEditDto>(ICollection<TEditDto>, Func<TEditDto, TEntity, Task>, Func<TEditDto, TEntity, Task<TEntity>>)
  fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.UpdateAsync<TEditDto>(System.Collections.Generic.ICollection<TEditDto>, System.Func<TEditDto, TEntity, System.Threading.Tasks.Task>, System.Func<TEditDto, TEntity, System.Threading.Tasks.Task<TEntity>>)
  nameWithType.vb: IRepository(Of TEntity, TKey).UpdateAsync(Of TEditDto)(ICollection(Of TEditDto), Func(Of TEditDto, TEntity, Task), Func(Of TEditDto, TEntity, Task(Of TEntity)))
  fullName.vb: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).UpdateAsync(Of TEditDto)(System.Collections.Generic.ICollection(Of TEditDto), System.Func(Of TEditDto, TEntity, System.Threading.Tasks.Task), System.Func(Of TEditDto, TEntity, System.Threading.Tasks.Task(Of TEntity)))
  name.vb: UpdateAsync(Of TEditDto)(ICollection(Of TEditDto), Func(Of TEditDto, TEntity, Task), Func(Of TEditDto, TEntity, Task(Of TEntity)))
  spec.csharp:
  - uid: Hybrid.Domain.Repositories.IRepository`2.UpdateAsync``1(System.Collections.Generic.ICollection{``0},System.Func{``0,`0,System.Threading.Tasks.Task},System.Func{``0,`0,System.Threading.Tasks.Task{`0}})
    name: UpdateAsync<TEditDto>
    nameWithType: IRepository<TEntity, TKey>.UpdateAsync<TEditDto>
    fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.UpdateAsync<TEditDto>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEditDto
    nameWithType: TEditDto
    fullName: TEditDto
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEditDto
    nameWithType: TEditDto
    fullName: TEditDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEditDto
    nameWithType: TEditDto
    fullName: TEditDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Repositories.IRepository`2.UpdateAsync``1(System.Collections.Generic.ICollection{``0},System.Func{``0,`0,System.Threading.Tasks.Task},System.Func{``0,`0,System.Threading.Tasks.Task{`0}})
    name: UpdateAsync(Of TEditDto)
    nameWithType: IRepository(Of TEntity, TKey).UpdateAsync(Of TEditDto)
    fullName: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).UpdateAsync(Of TEditDto)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEditDto
    nameWithType: TEditDto
    fullName: TEditDto
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEditDto
    nameWithType: TEditDto
    fullName: TEditDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEditDto
    nameWithType: TEditDto
    fullName: TEditDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TEditDto},{TEntity},System.Threading.Tasks.Task}
  commentId: T:System.Func{``0,`0,System.Threading.Tasks.Task}
  parent: System
  definition: System.Func`3
  name: Func<TEditDto, TEntity, Task>
  nameWithType: Func<TEditDto, TEntity, Task>
  fullName: System.Func<TEditDto, TEntity, System.Threading.Tasks.Task>
  nameWithType.vb: Func(Of TEditDto, TEntity, Task)
  fullName.vb: System.Func(Of TEditDto, TEntity, System.Threading.Tasks.Task)
  name.vb: Func(Of TEditDto, TEntity, Task)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEditDto
    nameWithType: TEditDto
    fullName: TEditDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEditDto
    nameWithType: TEditDto
    fullName: TEditDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TEditDto},{TEntity},System.Threading.Tasks.Task{{TEntity}}}
  commentId: T:System.Func{``0,`0,System.Threading.Tasks.Task{`0}}
  parent: System
  definition: System.Func`3
  name: Func<TEditDto, TEntity, Task<TEntity>>
  nameWithType: Func<TEditDto, TEntity, Task<TEntity>>
  fullName: System.Func<TEditDto, TEntity, System.Threading.Tasks.Task<TEntity>>
  nameWithType.vb: Func(Of TEditDto, TEntity, Task(Of TEntity))
  fullName.vb: System.Func(Of TEditDto, TEntity, System.Threading.Tasks.Task(Of TEntity))
  name.vb: Func(Of TEditDto, TEntity, Task(Of TEntity))
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEditDto
    nameWithType: TEditDto
    fullName: TEditDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEditDto
    nameWithType: TEditDto
    fullName: TEditDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Domain.Repositories.IRepository`2.UpdateAsync``1(System.Collections.Generic.ICollection{``0},System.Func{``0,`0,System.Threading.Tasks.Task},System.Func{``0,`0,System.Threading.Tasks.Task{`0}})
  commentId: M:Hybrid.Domain.Repositories.IRepository`2.UpdateAsync``1(System.Collections.Generic.ICollection{``0},System.Func{``0,`0,System.Threading.Tasks.Task},System.Func{``0,`0,System.Threading.Tasks.Task{`0}})
  isExternal: true
  name: UpdateAsync<TEditDto>(ICollection<TEditDto>, Func<TEditDto, TEntity, Task>, Func<TEditDto, TEntity, Task<TEntity>>)
  nameWithType: IRepository<TEntity, TKey>.UpdateAsync<TEditDto>(ICollection<TEditDto>, Func<TEditDto, TEntity, Task>, Func<TEditDto, TEntity, Task<TEntity>>)
  fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.UpdateAsync<TEditDto>(System.Collections.Generic.ICollection<TEditDto>, System.Func<TEditDto, TEntity, System.Threading.Tasks.Task>, System.Func<TEditDto, TEntity, System.Threading.Tasks.Task<TEntity>>)
  nameWithType.vb: IRepository(Of TEntity, TKey).UpdateAsync(Of TEditDto)(ICollection(Of TEditDto), Func(Of TEditDto, TEntity, Task), Func(Of TEditDto, TEntity, Task(Of TEntity)))
  fullName.vb: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).UpdateAsync(Of TEditDto)(System.Collections.Generic.ICollection(Of TEditDto), System.Func(Of TEditDto, TEntity, System.Threading.Tasks.Task), System.Func(Of TEditDto, TEntity, System.Threading.Tasks.Task(Of TEntity)))
  name.vb: UpdateAsync(Of TEditDto)(ICollection(Of TEditDto), Func(Of TEditDto, TEntity, Task), Func(Of TEditDto, TEntity, Task(Of TEntity)))
  spec.csharp:
  - uid: Hybrid.Domain.Repositories.IRepository`2.UpdateAsync``1(System.Collections.Generic.ICollection{``0},System.Func{``0,`0,System.Threading.Tasks.Task},System.Func{``0,`0,System.Threading.Tasks.Task{`0}})
    name: UpdateAsync<TEditDto>
    nameWithType: IRepository<TEntity, TKey>.UpdateAsync<TEditDto>
    fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.UpdateAsync<TEditDto>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEditDto
    nameWithType: TEditDto
    fullName: TEditDto
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEditDto
    nameWithType: TEditDto
    fullName: TEditDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEditDto
    nameWithType: TEditDto
    fullName: TEditDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Repositories.IRepository`2.UpdateAsync``1(System.Collections.Generic.ICollection{``0},System.Func{``0,`0,System.Threading.Tasks.Task},System.Func{``0,`0,System.Threading.Tasks.Task{`0}})
    name: UpdateAsync(Of TEditDto)
    nameWithType: IRepository(Of TEntity, TKey).UpdateAsync(Of TEditDto)
    fullName: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).UpdateAsync(Of TEditDto)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEditDto
    nameWithType: TEditDto
    fullName: TEditDto
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEditDto
    nameWithType: TEditDto
    fullName: TEditDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEditDto
    nameWithType: TEditDto
    fullName: TEditDto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EntityFrameworkCore.Repository`2.UpdateBatchAsync*
  commentId: Overload:Hybrid.EntityFrameworkCore.Repository`2.UpdateBatchAsync
  name: UpdateBatchAsync
  nameWithType: Repository<TEntity, TKey>.UpdateBatchAsync
  fullName: Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>.UpdateBatchAsync
  nameWithType.vb: Repository(Of TEntity, TKey).UpdateBatchAsync
  fullName.vb: Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey).UpdateBatchAsync
- uid: Hybrid.Domain.Repositories.IRepository{{TEntity},{TKey}}.UpdateBatchAsync(System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}},System.Linq.Expressions.Expression{System.Func{{TEntity},{TEntity}}})
  commentId: M:Hybrid.Domain.Repositories.IRepository{`0,`1}.UpdateBatchAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}})
  parent: Hybrid.Domain.Repositories.IRepository{{TEntity},{TKey}}
  definition: Hybrid.Domain.Repositories.IRepository`2.UpdateBatchAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}})
  name: UpdateBatchAsync(Expression<Func<TEntity, Boolean>>, Expression<Func<TEntity, TEntity>>)
  nameWithType: IRepository<TEntity, TKey>.UpdateBatchAsync(Expression<Func<TEntity, Boolean>>, Expression<Func<TEntity, TEntity>>)
  fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.UpdateBatchAsync(System.Linq.Expressions.Expression<System.Func<TEntity, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<TEntity, TEntity>>)
  nameWithType.vb: IRepository(Of TEntity, TKey).UpdateBatchAsync(Expression(Of Func(Of TEntity, Boolean)), Expression(Of Func(Of TEntity, TEntity)))
  fullName.vb: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).UpdateBatchAsync(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of TEntity, TEntity)))
  name.vb: UpdateBatchAsync(Expression(Of Func(Of TEntity, Boolean)), Expression(Of Func(Of TEntity, TEntity)))
  spec.csharp:
  - uid: Hybrid.Domain.Repositories.IRepository`2.UpdateBatchAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}})
    name: UpdateBatchAsync
    nameWithType: IRepository<TEntity, TKey>.UpdateBatchAsync
    fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.UpdateBatchAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Repositories.IRepository`2.UpdateBatchAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}})
    name: UpdateBatchAsync
    nameWithType: IRepository(Of TEntity, TKey).UpdateBatchAsync
    fullName: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).UpdateBatchAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Domain.Repositories.IRepository`2.UpdateBatchAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}})
  commentId: M:Hybrid.Domain.Repositories.IRepository`2.UpdateBatchAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}})
  isExternal: true
  name: UpdateBatchAsync(Expression<Func<TEntity, Boolean>>, Expression<Func<TEntity, TEntity>>)
  nameWithType: IRepository<TEntity, TKey>.UpdateBatchAsync(Expression<Func<TEntity, Boolean>>, Expression<Func<TEntity, TEntity>>)
  fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.UpdateBatchAsync(System.Linq.Expressions.Expression<System.Func<TEntity, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<TEntity, TEntity>>)
  nameWithType.vb: IRepository(Of TEntity, TKey).UpdateBatchAsync(Expression(Of Func(Of TEntity, Boolean)), Expression(Of Func(Of TEntity, TEntity)))
  fullName.vb: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).UpdateBatchAsync(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of TEntity, TEntity)))
  name.vb: UpdateBatchAsync(Expression(Of Func(Of TEntity, Boolean)), Expression(Of Func(Of TEntity, TEntity)))
  spec.csharp:
  - uid: Hybrid.Domain.Repositories.IRepository`2.UpdateBatchAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}})
    name: UpdateBatchAsync
    nameWithType: IRepository<TEntity, TKey>.UpdateBatchAsync
    fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.UpdateBatchAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Repositories.IRepository`2.UpdateBatchAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}})
    name: UpdateBatchAsync
    nameWithType: IRepository(Of TEntity, TKey).UpdateBatchAsync
    fullName: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).UpdateBatchAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EntityFrameworkCore.Repository`2.CheckExistsAsync*
  commentId: Overload:Hybrid.EntityFrameworkCore.Repository`2.CheckExistsAsync
  name: CheckExistsAsync
  nameWithType: Repository<TEntity, TKey>.CheckExistsAsync
  fullName: Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>.CheckExistsAsync
  nameWithType.vb: Repository(Of TEntity, TKey).CheckExistsAsync
  fullName.vb: Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey).CheckExistsAsync
- uid: Hybrid.Domain.Repositories.IRepository{{TEntity},{TKey}}.CheckExistsAsync(System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}},{TKey})
  commentId: M:Hybrid.Domain.Repositories.IRepository{`0,`1}.CheckExistsAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},`1)
  parent: Hybrid.Domain.Repositories.IRepository{{TEntity},{TKey}}
  definition: Hybrid.Domain.Repositories.IRepository`2.CheckExistsAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},`1)
  name: CheckExistsAsync(Expression<Func<TEntity, Boolean>>, TKey)
  nameWithType: IRepository<TEntity, TKey>.CheckExistsAsync(Expression<Func<TEntity, Boolean>>, TKey)
  fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.CheckExistsAsync(System.Linq.Expressions.Expression<System.Func<TEntity, System.Boolean>>, TKey)
  nameWithType.vb: IRepository(Of TEntity, TKey).CheckExistsAsync(Expression(Of Func(Of TEntity, Boolean)), TKey)
  fullName.vb: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).CheckExistsAsync(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Boolean)), TKey)
  name.vb: CheckExistsAsync(Expression(Of Func(Of TEntity, Boolean)), TKey)
  spec.csharp:
  - uid: Hybrid.Domain.Repositories.IRepository`2.CheckExistsAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},`1)
    name: CheckExistsAsync
    nameWithType: IRepository<TEntity, TKey>.CheckExistsAsync
    fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.CheckExistsAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Repositories.IRepository`2.CheckExistsAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},`1)
    name: CheckExistsAsync
    nameWithType: IRepository(Of TEntity, TKey).CheckExistsAsync
    fullName: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).CheckExistsAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.Boolean}
  commentId: T:System.Threading.Tasks.Task{System.Boolean}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Boolean>
  nameWithType: Task<Boolean>
  fullName: System.Threading.Tasks.Task<System.Boolean>
  nameWithType.vb: Task(Of Boolean)
  fullName.vb: System.Threading.Tasks.Task(Of System.Boolean)
  name.vb: Task(Of Boolean)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Domain.Repositories.IRepository`2.CheckExistsAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},`1)
  commentId: M:Hybrid.Domain.Repositories.IRepository`2.CheckExistsAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},`1)
  isExternal: true
  name: CheckExistsAsync(Expression<Func<TEntity, Boolean>>, TKey)
  nameWithType: IRepository<TEntity, TKey>.CheckExistsAsync(Expression<Func<TEntity, Boolean>>, TKey)
  fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.CheckExistsAsync(System.Linq.Expressions.Expression<System.Func<TEntity, System.Boolean>>, TKey)
  nameWithType.vb: IRepository(Of TEntity, TKey).CheckExistsAsync(Expression(Of Func(Of TEntity, Boolean)), TKey)
  fullName.vb: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).CheckExistsAsync(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Boolean)), TKey)
  name.vb: CheckExistsAsync(Expression(Of Func(Of TEntity, Boolean)), TKey)
  spec.csharp:
  - uid: Hybrid.Domain.Repositories.IRepository`2.CheckExistsAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},`1)
    name: CheckExistsAsync
    nameWithType: IRepository<TEntity, TKey>.CheckExistsAsync
    fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.CheckExistsAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Repositories.IRepository`2.CheckExistsAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},`1)
    name: CheckExistsAsync
    nameWithType: IRepository(Of TEntity, TKey).CheckExistsAsync
    fullName: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).CheckExistsAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.EntityFrameworkCore.Repository`2.GetAsync*
  commentId: Overload:Hybrid.EntityFrameworkCore.Repository`2.GetAsync
  name: GetAsync
  nameWithType: Repository<TEntity, TKey>.GetAsync
  fullName: Hybrid.EntityFrameworkCore.Repository<TEntity, TKey>.GetAsync
  nameWithType.vb: Repository(Of TEntity, TKey).GetAsync
  fullName.vb: Hybrid.EntityFrameworkCore.Repository(Of TEntity, TKey).GetAsync
- uid: Hybrid.Domain.Repositories.IRepository{{TEntity},{TKey}}.GetAsync({TKey})
  commentId: M:Hybrid.Domain.Repositories.IRepository{`0,`1}.GetAsync(`1)
  parent: Hybrid.Domain.Repositories.IRepository{{TEntity},{TKey}}
  definition: Hybrid.Domain.Repositories.IRepository`2.GetAsync(`1)
  name: GetAsync(TKey)
  nameWithType: IRepository<TEntity, TKey>.GetAsync(TKey)
  fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.GetAsync(TKey)
  nameWithType.vb: IRepository(Of TEntity, TKey).GetAsync(TKey)
  fullName.vb: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).GetAsync(TKey)
  spec.csharp:
  - uid: Hybrid.Domain.Repositories.IRepository`2.GetAsync(`1)
    name: GetAsync
    nameWithType: IRepository<TEntity, TKey>.GetAsync
    fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.GetAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Repositories.IRepository`2.GetAsync(`1)
    name: GetAsync
    nameWithType: IRepository(Of TEntity, TKey).GetAsync
    fullName: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).GetAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{{TEntity}}
  commentId: T:System.Threading.Tasks.Task{`0}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<TEntity>
  nameWithType: Task<TEntity>
  fullName: System.Threading.Tasks.Task<TEntity>
  nameWithType.vb: Task(Of TEntity)
  fullName.vb: System.Threading.Tasks.Task(Of TEntity)
  name.vb: Task(Of TEntity)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: Hybrid.Domain.Repositories.IRepository`2.GetAsync(`1)
  commentId: M:Hybrid.Domain.Repositories.IRepository`2.GetAsync(`1)
  name: GetAsync(TKey)
  nameWithType: IRepository<TEntity, TKey>.GetAsync(TKey)
  fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.GetAsync(TKey)
  nameWithType.vb: IRepository(Of TEntity, TKey).GetAsync(TKey)
  fullName.vb: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).GetAsync(TKey)
  spec.csharp:
  - uid: Hybrid.Domain.Repositories.IRepository`2.GetAsync(`1)
    name: GetAsync
    nameWithType: IRepository<TEntity, TKey>.GetAsync
    fullName: Hybrid.Domain.Repositories.IRepository<TEntity, TKey>.GetAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Hybrid.Domain.Repositories.IRepository`2.GetAsync(`1)
    name: GetAsync
    nameWithType: IRepository(Of TEntity, TKey).GetAsync
    fullName: Hybrid.Domain.Repositories.IRepository(Of TEntity, TKey).GetAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
