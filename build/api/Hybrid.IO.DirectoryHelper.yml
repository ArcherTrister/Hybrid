### YamlMime:ManagedReference
items:
- uid: Hybrid.IO.DirectoryHelper
  commentId: T:Hybrid.IO.DirectoryHelper
  id: DirectoryHelper
  parent: Hybrid.IO
  children:
  - Hybrid.IO.DirectoryHelper.Copy(System.String,System.String,System.String[])
  - Hybrid.IO.DirectoryHelper.CreateIfNotExists(System.String)
  - Hybrid.IO.DirectoryHelper.Delete(System.String,System.Boolean)
  - Hybrid.IO.DirectoryHelper.RootPath
  - Hybrid.IO.DirectoryHelper.SetAttributes(System.String,System.IO.FileAttributes,System.Boolean)
  langs:
  - csharp
  - vb
  name: DirectoryHelper
  nameWithType: DirectoryHelper
  fullName: Hybrid.IO.DirectoryHelper
  type: Class
  source:
    remote:
      path: src/Hybrid/IO/DirectoryHelper.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: DirectoryHelper
    path: ../src/Hybrid/IO/DirectoryHelper.cs
    startLine: 18
  assemblies:
  - Hybrid
  namespace: Hybrid.IO
  summary: "\n目录操作辅助类\n"
  example: []
  syntax:
    content: public static class DirectoryHelper
    content.vb: Public Module DirectoryHelper
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Hybrid.IO.DirectoryHelper.RootPath
  commentId: M:Hybrid.IO.DirectoryHelper.RootPath
  id: RootPath
  parent: Hybrid.IO.DirectoryHelper
  langs:
  - csharp
  - vb
  name: RootPath()
  nameWithType: DirectoryHelper.RootPath()
  fullName: Hybrid.IO.DirectoryHelper.RootPath()
  type: Method
  source:
    remote:
      path: src/Hybrid/IO/DirectoryHelper.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: RootPath
    path: ../src/Hybrid/IO/DirectoryHelper.cs
    startLine: 23
  assemblies:
  - Hybrid
  namespace: Hybrid.IO
  summary: "\n获取程序根目录\n"
  example: []
  syntax:
    content: public static string RootPath()
    return:
      type: System.String
    content.vb: Public Shared Function RootPath As String
  overload: Hybrid.IO.DirectoryHelper.RootPath*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Hybrid.IO.DirectoryHelper.CreateIfNotExists(System.String)
  commentId: M:Hybrid.IO.DirectoryHelper.CreateIfNotExists(System.String)
  id: CreateIfNotExists(System.String)
  parent: Hybrid.IO.DirectoryHelper
  langs:
  - csharp
  - vb
  name: CreateIfNotExists(String)
  nameWithType: DirectoryHelper.CreateIfNotExists(String)
  fullName: Hybrid.IO.DirectoryHelper.CreateIfNotExists(System.String)
  type: Method
  source:
    remote:
      path: src/Hybrid/IO/DirectoryHelper.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: CreateIfNotExists
    path: ../src/Hybrid/IO/DirectoryHelper.cs
    startLine: 32
  assemblies:
  - Hybrid
  namespace: Hybrid.IO
  summary: "\n创建文件夹，如果不存在\n"
  example: []
  syntax:
    content: public static void CreateIfNotExists(string directory)
    parameters:
    - id: directory
      type: System.String
      description: 要创建的文件夹路径
    content.vb: Public Shared Sub CreateIfNotExists(directory As String)
  overload: Hybrid.IO.DirectoryHelper.CreateIfNotExists*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Hybrid.IO.DirectoryHelper.Copy(System.String,System.String,System.String[])
  commentId: M:Hybrid.IO.DirectoryHelper.Copy(System.String,System.String,System.String[])
  id: Copy(System.String,System.String,System.String[])
  parent: Hybrid.IO.DirectoryHelper
  langs:
  - csharp
  - vb
  name: Copy(String, String, String[])
  nameWithType: DirectoryHelper.Copy(String, String, String[])
  fullName: Hybrid.IO.DirectoryHelper.Copy(System.String, System.String, System.String[])
  type: Method
  source:
    remote:
      path: src/Hybrid/IO/DirectoryHelper.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: Copy
    path: ../src/Hybrid/IO/DirectoryHelper.cs
    startLine: 46
  assemblies:
  - Hybrid
  namespace: Hybrid.IO
  summary: "\n递归复制文件夹及文件夹/文件\n"
  example: []
  syntax:
    content: public static void Copy(string sourcePath, string targetPath, string[] searchPatterns = null)
    parameters:
    - id: sourcePath
      type: System.String
      description: '源文件夹路径 '
    - id: targetPath
      type: System.String
      description: '目的文件夹路径 '
    - id: searchPatterns
      type: System.String[]
      description: '要复制的文件扩展名数组 '
    content.vb: Public Shared Sub Copy(sourcePath As String, targetPath As String, searchPatterns As String() = Nothing)
  overload: Hybrid.IO.DirectoryHelper.Copy*
  nameWithType.vb: DirectoryHelper.Copy(String, String, String())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Hybrid.IO.DirectoryHelper.Copy(System.String, System.String, System.String())
  name.vb: Copy(String, String, String())
- uid: Hybrid.IO.DirectoryHelper.Delete(System.String,System.Boolean)
  commentId: M:Hybrid.IO.DirectoryHelper.Delete(System.String,System.Boolean)
  id: Delete(System.String,System.Boolean)
  parent: Hybrid.IO.DirectoryHelper
  langs:
  - csharp
  - vb
  name: Delete(String, Boolean)
  nameWithType: DirectoryHelper.Delete(String, Boolean)
  fullName: Hybrid.IO.DirectoryHelper.Delete(System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Hybrid/IO/DirectoryHelper.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: Delete
    path: ../src/Hybrid/IO/DirectoryHelper.cs
    startLine: 102
  assemblies:
  - Hybrid
  namespace: Hybrid.IO
  summary: "\n递归删除目录\n"
  example: []
  syntax:
    content: public static bool Delete(string directory, bool isDeleteRoot = true)
    parameters:
    - id: directory
      type: System.String
      description: '目录路径 '
    - id: isDeleteRoot
      type: System.Boolean
      description: '是否删除根目录 '
    return:
      type: System.Boolean
      description: '是否成功 '
    content.vb: Public Shared Function Delete(directory As String, isDeleteRoot As Boolean = True) As Boolean
  overload: Hybrid.IO.DirectoryHelper.Delete*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Hybrid.IO.DirectoryHelper.SetAttributes(System.String,System.IO.FileAttributes,System.Boolean)
  commentId: M:Hybrid.IO.DirectoryHelper.SetAttributes(System.String,System.IO.FileAttributes,System.Boolean)
  id: SetAttributes(System.String,System.IO.FileAttributes,System.Boolean)
  parent: Hybrid.IO.DirectoryHelper
  langs:
  - csharp
  - vb
  name: SetAttributes(String, FileAttributes, Boolean)
  nameWithType: DirectoryHelper.SetAttributes(String, FileAttributes, Boolean)
  fullName: Hybrid.IO.DirectoryHelper.SetAttributes(System.String, System.IO.FileAttributes, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Hybrid/IO/DirectoryHelper.cs
      branch: dev
      repo: https://github.com/ArcherTrister/Hybrid.git
    id: SetAttributes
    path: ../src/Hybrid/IO/DirectoryHelper.cs
    startLine: 137
  assemblies:
  - Hybrid
  namespace: Hybrid.IO
  summary: "\n设置或取消目录的<xref href=\"System.IO.FileAttributes\" data-throw-if-not-resolved=\"false\"></xref>属性。\n"
  example: []
  syntax:
    content: public static void SetAttributes(string directory, FileAttributes attribute, bool isSet)
    parameters:
    - id: directory
      type: System.String
      description: 目录路径
    - id: attribute
      type: System.IO.FileAttributes
      description: 要设置的目录属性
    - id: isSet
      type: System.Boolean
      description: true为设置，false为取消
    content.vb: Public Shared Sub SetAttributes(directory As String, attribute As FileAttributes, isSet As Boolean)
  overload: Hybrid.IO.DirectoryHelper.SetAttributes*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Hybrid.IO
  commentId: N:Hybrid.IO
  name: Hybrid.IO
  nameWithType: Hybrid.IO
  fullName: Hybrid.IO
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Hybrid.IO.DirectoryHelper.RootPath*
  commentId: Overload:Hybrid.IO.DirectoryHelper.RootPath
  name: RootPath
  nameWithType: DirectoryHelper.RootPath
  fullName: Hybrid.IO.DirectoryHelper.RootPath
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Hybrid.IO.DirectoryHelper.CreateIfNotExists*
  commentId: Overload:Hybrid.IO.DirectoryHelper.CreateIfNotExists
  name: CreateIfNotExists
  nameWithType: DirectoryHelper.CreateIfNotExists
  fullName: Hybrid.IO.DirectoryHelper.CreateIfNotExists
- uid: Hybrid.IO.DirectoryHelper.Copy*
  commentId: Overload:Hybrid.IO.DirectoryHelper.Copy
  name: Copy
  nameWithType: DirectoryHelper.Copy
  fullName: Hybrid.IO.DirectoryHelper.Copy
- uid: System.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Hybrid.IO.DirectoryHelper.Delete*
  commentId: Overload:Hybrid.IO.DirectoryHelper.Delete
  name: Delete
  nameWithType: DirectoryHelper.Delete
  fullName: Hybrid.IO.DirectoryHelper.Delete
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IO.FileAttributes
  commentId: T:System.IO.FileAttributes
  parent: System.IO
  isExternal: true
  name: FileAttributes
  nameWithType: FileAttributes
  fullName: System.IO.FileAttributes
- uid: Hybrid.IO.DirectoryHelper.SetAttributes*
  commentId: Overload:Hybrid.IO.DirectoryHelper.SetAttributes
  name: SetAttributes
  nameWithType: DirectoryHelper.SetAttributes
  fullName: Hybrid.IO.DirectoryHelper.SetAttributes
- uid: System.IO
  commentId: N:System.IO
  isExternal: true
  name: System.IO
  nameWithType: System.IO
  fullName: System.IO
